
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	20011470 	.word	0x20011470
    c004:	0000ed75 	.word	0x0000ed75
    c008:	00016ddd 	.word	0x00016ddd
    c00c:	0000eda5 	.word	0x0000eda5
    c010:	0000eda5 	.word	0x0000eda5
    c014:	0000eda5 	.word	0x0000eda5
    c018:	0000eda5 	.word	0x0000eda5
    c01c:	0000eda5 	.word	0x0000eda5
	...
    c02c:	0000eb15 	.word	0x0000eb15
    c030:	0000eda5 	.word	0x0000eda5
    c034:	00000000 	.word	0x00000000
    c038:	0000eabd 	.word	0x0000eabd
    c03c:	00016cfd 	.word	0x00016cfd

0000c040 <_irq_vector_table>:
    c040:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c050:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c060:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c070:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c080:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c090:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c0a0:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c0b0:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c0c0:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c0d0:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c0e0:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c0f0:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c100:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c110:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c120:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c130:	0000ed35 0000ed35 0000ed35 0000ed35     5...5...5...5...
    c140:	0000ed35                                5...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	0000e8b8 00000001 0000c000 0000c000     ................
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c23c <__aeabi_uldivmod>:
    c23c:	b953      	cbnz	r3, c254 <__aeabi_uldivmod+0x18>
    c23e:	b94a      	cbnz	r2, c254 <__aeabi_uldivmod+0x18>
    c240:	2900      	cmp	r1, #0
    c242:	bf08      	it	eq
    c244:	2800      	cmpeq	r0, #0
    c246:	bf1c      	itt	ne
    c248:	f04f 31ff 	movne.w	r1, #4294967295
    c24c:	f04f 30ff 	movne.w	r0, #4294967295
    c250:	f000 b984 	b.w	c55c <__aeabi_idiv0>
    c254:	f1ad 0c08 	sub.w	ip, sp, #8
    c258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c25c:	f000 f81a 	bl	c294 <__udivmoddi4>
    c260:	f8dd e004 	ldr.w	lr, [sp, #4]
    c264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c268:	b004      	add	sp, #16
    c26a:	4770      	bx	lr

0000c26c <__popcountsi2>:
    c26c:	0843      	lsrs	r3, r0, #1
    c26e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    c272:	1ac0      	subs	r0, r0, r3
    c274:	0883      	lsrs	r3, r0, #2
    c276:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    c27a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    c27e:	4418      	add	r0, r3
    c280:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    c284:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    c288:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    c28c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    c290:	0e00      	lsrs	r0, r0, #24
    c292:	4770      	bx	lr

0000c294 <__udivmoddi4>:
    c294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c298:	9e08      	ldr	r6, [sp, #32]
    c29a:	460d      	mov	r5, r1
    c29c:	4604      	mov	r4, r0
    c29e:	468a      	mov	sl, r1
    c2a0:	2b00      	cmp	r3, #0
    c2a2:	d17f      	bne.n	c3a4 <__udivmoddi4+0x110>
    c2a4:	428a      	cmp	r2, r1
    c2a6:	4617      	mov	r7, r2
    c2a8:	d941      	bls.n	c32e <__udivmoddi4+0x9a>
    c2aa:	fab2 f282 	clz	r2, r2
    c2ae:	b14a      	cbz	r2, c2c4 <__udivmoddi4+0x30>
    c2b0:	f1c2 0120 	rsb	r1, r2, #32
    c2b4:	fa05 f302 	lsl.w	r3, r5, r2
    c2b8:	4097      	lsls	r7, r2
    c2ba:	4094      	lsls	r4, r2
    c2bc:	fa20 f101 	lsr.w	r1, r0, r1
    c2c0:	ea41 0a03 	orr.w	sl, r1, r3
    c2c4:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c2c8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c2cc:	fa1f f987 	uxth.w	r9, r7
    c2d0:	fbba fef8 	udiv	lr, sl, r8
    c2d4:	fb08 a31e 	mls	r3, r8, lr, sl
    c2d8:	fb0e f109 	mul.w	r1, lr, r9
    c2dc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    c2e0:	4299      	cmp	r1, r3
    c2e2:	d906      	bls.n	c2f2 <__udivmoddi4+0x5e>
    c2e4:	18fb      	adds	r3, r7, r3
    c2e6:	d202      	bcs.n	c2ee <__udivmoddi4+0x5a>
    c2e8:	4299      	cmp	r1, r3
    c2ea:	f200 8124 	bhi.w	c536 <__udivmoddi4+0x2a2>
    c2ee:	f10e 3eff 	add.w	lr, lr, #4294967295
    c2f2:	1a59      	subs	r1, r3, r1
    c2f4:	b2a3      	uxth	r3, r4
    c2f6:	fbb1 f0f8 	udiv	r0, r1, r8
    c2fa:	fb08 1110 	mls	r1, r8, r0, r1
    c2fe:	fb00 f909 	mul.w	r9, r0, r9
    c302:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c306:	45a1      	cmp	r9, r4
    c308:	d905      	bls.n	c316 <__udivmoddi4+0x82>
    c30a:	193c      	adds	r4, r7, r4
    c30c:	d202      	bcs.n	c314 <__udivmoddi4+0x80>
    c30e:	45a1      	cmp	r9, r4
    c310:	f200 810e 	bhi.w	c530 <__udivmoddi4+0x29c>
    c314:	3801      	subs	r0, #1
    c316:	eba4 0409 	sub.w	r4, r4, r9
    c31a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c31e:	2100      	movs	r1, #0
    c320:	b11e      	cbz	r6, c32a <__udivmoddi4+0x96>
    c322:	40d4      	lsrs	r4, r2
    c324:	2300      	movs	r3, #0
    c326:	e9c6 4300 	strd	r4, r3, [r6]
    c32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c32e:	b902      	cbnz	r2, c332 <__udivmoddi4+0x9e>
    c330:	deff      	udf	#255	; 0xff
    c332:	fab2 f282 	clz	r2, r2
    c336:	2a00      	cmp	r2, #0
    c338:	d14f      	bne.n	c3da <__udivmoddi4+0x146>
    c33a:	1bcb      	subs	r3, r1, r7
    c33c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c340:	fa1f f887 	uxth.w	r8, r7
    c344:	2101      	movs	r1, #1
    c346:	0c25      	lsrs	r5, r4, #16
    c348:	fbb3 fcfe 	udiv	ip, r3, lr
    c34c:	fb0e 301c 	mls	r0, lr, ip, r3
    c350:	462b      	mov	r3, r5
    c352:	fb08 f90c 	mul.w	r9, r8, ip
    c356:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    c35a:	45a9      	cmp	r9, r5
    c35c:	d90a      	bls.n	c374 <__udivmoddi4+0xe0>
    c35e:	197d      	adds	r5, r7, r5
    c360:	bf2c      	ite	cs
    c362:	2301      	movcs	r3, #1
    c364:	2300      	movcc	r3, #0
    c366:	45a9      	cmp	r9, r5
    c368:	d902      	bls.n	c370 <__udivmoddi4+0xdc>
    c36a:	2b00      	cmp	r3, #0
    c36c:	f000 80d9 	beq.w	c522 <__udivmoddi4+0x28e>
    c370:	f10c 3cff 	add.w	ip, ip, #4294967295
    c374:	eba5 0509 	sub.w	r5, r5, r9
    c378:	b2a3      	uxth	r3, r4
    c37a:	fbb5 f0fe 	udiv	r0, r5, lr
    c37e:	fb0e 5510 	mls	r5, lr, r0, r5
    c382:	fb08 f800 	mul.w	r8, r8, r0
    c386:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    c38a:	45a0      	cmp	r8, r4
    c38c:	d905      	bls.n	c39a <__udivmoddi4+0x106>
    c38e:	193c      	adds	r4, r7, r4
    c390:	d202      	bcs.n	c398 <__udivmoddi4+0x104>
    c392:	45a0      	cmp	r8, r4
    c394:	f200 80c9 	bhi.w	c52a <__udivmoddi4+0x296>
    c398:	3801      	subs	r0, #1
    c39a:	eba4 0408 	sub.w	r4, r4, r8
    c39e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c3a2:	e7bd      	b.n	c320 <__udivmoddi4+0x8c>
    c3a4:	428b      	cmp	r3, r1
    c3a6:	d908      	bls.n	c3ba <__udivmoddi4+0x126>
    c3a8:	2e00      	cmp	r6, #0
    c3aa:	f000 80b1 	beq.w	c510 <__udivmoddi4+0x27c>
    c3ae:	2100      	movs	r1, #0
    c3b0:	e9c6 0500 	strd	r0, r5, [r6]
    c3b4:	4608      	mov	r0, r1
    c3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c3ba:	fab3 f183 	clz	r1, r3
    c3be:	2900      	cmp	r1, #0
    c3c0:	d146      	bne.n	c450 <__udivmoddi4+0x1bc>
    c3c2:	42ab      	cmp	r3, r5
    c3c4:	f0c0 80a7 	bcc.w	c516 <__udivmoddi4+0x282>
    c3c8:	4282      	cmp	r2, r0
    c3ca:	f240 80a4 	bls.w	c516 <__udivmoddi4+0x282>
    c3ce:	4608      	mov	r0, r1
    c3d0:	2e00      	cmp	r6, #0
    c3d2:	d0aa      	beq.n	c32a <__udivmoddi4+0x96>
    c3d4:	e9c6 4a00 	strd	r4, sl, [r6]
    c3d8:	e7a7      	b.n	c32a <__udivmoddi4+0x96>
    c3da:	f1c2 0020 	rsb	r0, r2, #32
    c3de:	4097      	lsls	r7, r2
    c3e0:	fa01 f302 	lsl.w	r3, r1, r2
    c3e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c3e8:	40c1      	lsrs	r1, r0
    c3ea:	fa24 f500 	lsr.w	r5, r4, r0
    c3ee:	fa1f f887 	uxth.w	r8, r7
    c3f2:	4094      	lsls	r4, r2
    c3f4:	431d      	orrs	r5, r3
    c3f6:	fbb1 f0fe 	udiv	r0, r1, lr
    c3fa:	0c2b      	lsrs	r3, r5, #16
    c3fc:	fb0e 1110 	mls	r1, lr, r0, r1
    c400:	fb00 fc08 	mul.w	ip, r0, r8
    c404:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c408:	459c      	cmp	ip, r3
    c40a:	d909      	bls.n	c420 <__udivmoddi4+0x18c>
    c40c:	18fb      	adds	r3, r7, r3
    c40e:	bf2c      	ite	cs
    c410:	2101      	movcs	r1, #1
    c412:	2100      	movcc	r1, #0
    c414:	459c      	cmp	ip, r3
    c416:	d902      	bls.n	c41e <__udivmoddi4+0x18a>
    c418:	2900      	cmp	r1, #0
    c41a:	f000 8095 	beq.w	c548 <__udivmoddi4+0x2b4>
    c41e:	3801      	subs	r0, #1
    c420:	eba3 030c 	sub.w	r3, r3, ip
    c424:	b2ad      	uxth	r5, r5
    c426:	fbb3 f1fe 	udiv	r1, r3, lr
    c42a:	fb0e 3311 	mls	r3, lr, r1, r3
    c42e:	fb01 fc08 	mul.w	ip, r1, r8
    c432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    c436:	45ac      	cmp	ip, r5
    c438:	d905      	bls.n	c446 <__udivmoddi4+0x1b2>
    c43a:	197d      	adds	r5, r7, r5
    c43c:	d202      	bcs.n	c444 <__udivmoddi4+0x1b0>
    c43e:	45ac      	cmp	ip, r5
    c440:	f200 8089 	bhi.w	c556 <__udivmoddi4+0x2c2>
    c444:	3901      	subs	r1, #1
    c446:	eba5 030c 	sub.w	r3, r5, ip
    c44a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c44e:	e77a      	b.n	c346 <__udivmoddi4+0xb2>
    c450:	f1c1 0420 	rsb	r4, r1, #32
    c454:	408b      	lsls	r3, r1
    c456:	fa02 f701 	lsl.w	r7, r2, r1
    c45a:	fa05 fc01 	lsl.w	ip, r5, r1
    c45e:	40e2      	lsrs	r2, r4
    c460:	fa20 f804 	lsr.w	r8, r0, r4
    c464:	40e5      	lsrs	r5, r4
    c466:	fa00 fe01 	lsl.w	lr, r0, r1
    c46a:	4313      	orrs	r3, r2
    c46c:	ea48 020c 	orr.w	r2, r8, ip
    c470:	ea4f 4813 	mov.w	r8, r3, lsr #16
    c474:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    c478:	fa1f f983 	uxth.w	r9, r3
    c47c:	fbb5 faf8 	udiv	sl, r5, r8
    c480:	fb08 551a 	mls	r5, r8, sl, r5
    c484:	fb0a f009 	mul.w	r0, sl, r9
    c488:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
    c48c:	4560      	cmp	r0, ip
    c48e:	d90a      	bls.n	c4a6 <__udivmoddi4+0x212>
    c490:	eb13 0c0c 	adds.w	ip, r3, ip
    c494:	bf2c      	ite	cs
    c496:	2501      	movcs	r5, #1
    c498:	2500      	movcc	r5, #0
    c49a:	4560      	cmp	r0, ip
    c49c:	d901      	bls.n	c4a2 <__udivmoddi4+0x20e>
    c49e:	2d00      	cmp	r5, #0
    c4a0:	d055      	beq.n	c54e <__udivmoddi4+0x2ba>
    c4a2:	f10a 3aff 	add.w	sl, sl, #4294967295
    c4a6:	ebac 0c00 	sub.w	ip, ip, r0
    c4aa:	b292      	uxth	r2, r2
    c4ac:	fbbc f0f8 	udiv	r0, ip, r8
    c4b0:	fb08 cc10 	mls	ip, r8, r0, ip
    c4b4:	fb00 f909 	mul.w	r9, r0, r9
    c4b8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c4bc:	45e1      	cmp	r9, ip
    c4be:	d905      	bls.n	c4cc <__udivmoddi4+0x238>
    c4c0:	eb13 0c0c 	adds.w	ip, r3, ip
    c4c4:	d201      	bcs.n	c4ca <__udivmoddi4+0x236>
    c4c6:	45e1      	cmp	r9, ip
    c4c8:	d83b      	bhi.n	c542 <__udivmoddi4+0x2ae>
    c4ca:	3801      	subs	r0, #1
    c4cc:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c4d0:	ebac 0c09 	sub.w	ip, ip, r9
    c4d4:	fba0 8907 	umull	r8, r9, r0, r7
    c4d8:	45cc      	cmp	ip, r9
    c4da:	4645      	mov	r5, r8
    c4dc:	464a      	mov	r2, r9
    c4de:	d302      	bcc.n	c4e6 <__udivmoddi4+0x252>
    c4e0:	d106      	bne.n	c4f0 <__udivmoddi4+0x25c>
    c4e2:	45c6      	cmp	lr, r8
    c4e4:	d204      	bcs.n	c4f0 <__udivmoddi4+0x25c>
    c4e6:	3801      	subs	r0, #1
    c4e8:	ebb8 0507 	subs.w	r5, r8, r7
    c4ec:	eb69 0203 	sbc.w	r2, r9, r3
    c4f0:	b32e      	cbz	r6, c53e <__udivmoddi4+0x2aa>
    c4f2:	ebbe 0305 	subs.w	r3, lr, r5
    c4f6:	eb6c 0c02 	sbc.w	ip, ip, r2
    c4fa:	fa23 f201 	lsr.w	r2, r3, r1
    c4fe:	fa0c f404 	lsl.w	r4, ip, r4
    c502:	fa2c f301 	lsr.w	r3, ip, r1
    c506:	2100      	movs	r1, #0
    c508:	4314      	orrs	r4, r2
    c50a:	e9c6 4300 	strd	r4, r3, [r6]
    c50e:	e70c      	b.n	c32a <__udivmoddi4+0x96>
    c510:	4631      	mov	r1, r6
    c512:	4630      	mov	r0, r6
    c514:	e709      	b.n	c32a <__udivmoddi4+0x96>
    c516:	1a84      	subs	r4, r0, r2
    c518:	eb65 0303 	sbc.w	r3, r5, r3
    c51c:	2001      	movs	r0, #1
    c51e:	469a      	mov	sl, r3
    c520:	e756      	b.n	c3d0 <__udivmoddi4+0x13c>
    c522:	f1ac 0c02 	sub.w	ip, ip, #2
    c526:	443d      	add	r5, r7
    c528:	e724      	b.n	c374 <__udivmoddi4+0xe0>
    c52a:	3802      	subs	r0, #2
    c52c:	443c      	add	r4, r7
    c52e:	e734      	b.n	c39a <__udivmoddi4+0x106>
    c530:	3802      	subs	r0, #2
    c532:	443c      	add	r4, r7
    c534:	e6ef      	b.n	c316 <__udivmoddi4+0x82>
    c536:	f1ae 0e02 	sub.w	lr, lr, #2
    c53a:	443b      	add	r3, r7
    c53c:	e6d9      	b.n	c2f2 <__udivmoddi4+0x5e>
    c53e:	4631      	mov	r1, r6
    c540:	e6f3      	b.n	c32a <__udivmoddi4+0x96>
    c542:	3802      	subs	r0, #2
    c544:	449c      	add	ip, r3
    c546:	e7c1      	b.n	c4cc <__udivmoddi4+0x238>
    c548:	3802      	subs	r0, #2
    c54a:	443b      	add	r3, r7
    c54c:	e768      	b.n	c420 <__udivmoddi4+0x18c>
    c54e:	f1aa 0a02 	sub.w	sl, sl, #2
    c552:	449c      	add	ip, r3
    c554:	e7a7      	b.n	c4a6 <__udivmoddi4+0x212>
    c556:	3902      	subs	r1, #2
    c558:	443d      	add	r5, r7
    c55a:	e774      	b.n	c446 <__udivmoddi4+0x1b2>

0000c55c <__aeabi_idiv0>:
    c55c:	4770      	bx	lr
    c55e:	bf00      	nop

0000c560 <main>:
	.storage_dev = (void *)FLASH_AREA_ID(storage),
	.mnt_point = "/lfs",
};

void main(void)
{
    c560:	b530      	push	{r4, r5, lr}
    c562:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
	struct fs_mount_t *mp = &lfs_storage_mnt;
	unsigned int id = (uintptr_t)mp->storage_dev;
    c566:	4b68      	ldr	r3, [pc, #416]	; (c708 <main+0x1a8>)
    c568:	695c      	ldr	r4, [r3, #20]
	char fname[MAX_PATH_LEN];
	struct fs_statvfs sbuf;
	const struct flash_area *pfa;
	int rc;

	snprintf(fname, sizeof(fname), "%s/boot_count", mp->mnt_point);
    c56a:	68db      	ldr	r3, [r3, #12]
    c56c:	4a67      	ldr	r2, [pc, #412]	; (c70c <main+0x1ac>)
    c56e:	21ff      	movs	r1, #255	; 0xff
    c570:	a892      	add	r0, sp, #584	; 0x248
    c572:	f003 fa3d 	bl	f9f0 <snprintf>

	rc = flash_area_open(id, &pfa);
    c576:	a98d      	add	r1, sp, #564	; 0x234
    c578:	b2e0      	uxtb	r0, r4
    c57a:	f001 ffcd 	bl	e518 <flash_area_open>
	if (rc < 0) {
    c57e:	1e02      	subs	r2, r0, #0
    c580:	db74      	blt.n	c66c <main+0x10c>
		       id, rc);
		return;
	}

	printk("Area %u at 0x%x on %s for %u bytes\n",
	       id, (unsigned int)pfa->fa_off, pfa->fa_dev_name,
    c582:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    c584:	685a      	ldr	r2, [r3, #4]
	       (unsigned int)pfa->fa_size);
    c586:	6899      	ldr	r1, [r3, #8]
	printk("Area %u at 0x%x on %s for %u bytes\n",
    c588:	68db      	ldr	r3, [r3, #12]
    c58a:	9100      	str	r1, [sp, #0]
    c58c:	4621      	mov	r1, r4
    c58e:	4860      	ldr	r0, [pc, #384]	; (c710 <main+0x1b0>)
    c590:	f009 f9d7 	bl	15942 <printk>
		printk("Erasing flash area ... ");
		rc = flash_area_erase(pfa, 0, pfa->fa_size);
		printk("%d\n", rc);
	}

	flash_area_close(pfa);
    c594:	988d      	ldr	r0, [sp, #564]	; 0x234
    c596:	f00a fa57 	bl	16a48 <flash_area_close>

	rc = fs_mount(mp);
    c59a:	485b      	ldr	r0, [pc, #364]	; (c708 <main+0x1a8>)
    c59c:	f003 fdf4 	bl	10188 <fs_mount>
	if (rc < 0) {
    c5a0:	1e02      	subs	r2, r0, #0
    c5a2:	db68      	blt.n	c676 <main+0x116>
		printk("FAIL: mount id %u at %s: %d\n",
		       (unsigned int)mp->storage_dev, mp->mnt_point,
		       rc);
		return;
	}
	printk("%s mount: %d\n", mp->mnt_point, rc);
    c5a4:	4c58      	ldr	r4, [pc, #352]	; (c708 <main+0x1a8>)
    c5a6:	68e1      	ldr	r1, [r4, #12]
    c5a8:	485a      	ldr	r0, [pc, #360]	; (c714 <main+0x1b4>)
    c5aa:	f009 f9ca 	bl	15942 <printk>

	rc = fs_statvfs(mp->mnt_point, &sbuf);
    c5ae:	a98e      	add	r1, sp, #568	; 0x238
    c5b0:	68e0      	ldr	r0, [r4, #12]
    c5b2:	f003 fd83 	bl	100bc <fs_statvfs>
	if (rc < 0) {
    c5b6:	1e01      	subs	r1, r0, #0
    c5b8:	db65      	blt.n	c686 <main+0x126>
		printk("FAIL: statvfs: %d\n", rc);
		goto out;
	}

	printk("%s: bsize = %lu ; frsize = %lu ;"
    c5ba:	9b91      	ldr	r3, [sp, #580]	; 0x244
    c5bc:	9301      	str	r3, [sp, #4]
    c5be:	9b90      	ldr	r3, [sp, #576]	; 0x240
    c5c0:	9300      	str	r3, [sp, #0]
    c5c2:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
    c5c4:	9a8e      	ldr	r2, [sp, #568]	; 0x238
    c5c6:	4950      	ldr	r1, [pc, #320]	; (c708 <main+0x1a8>)
    c5c8:	68c9      	ldr	r1, [r1, #12]
    c5ca:	4853      	ldr	r0, [pc, #332]	; (c718 <main+0x1b8>)
    c5cc:	f009 f9b9 	bl	15942 <printk>
	       sbuf.f_bsize, sbuf.f_frsize,
	       sbuf.f_blocks, sbuf.f_bfree);

	struct fs_dirent dirent;

	rc = fs_stat(fname, &dirent);
    c5d0:	a94b      	add	r1, sp, #300	; 0x12c
    c5d2:	a892      	add	r0, sp, #584	; 0x248
    c5d4:	f003 fd0c 	bl	fff0 <fs_stat>
    c5d8:	4604      	mov	r4, r0
	printk("%s stat: %d\n", fname, rc);
    c5da:	4602      	mov	r2, r0
    c5dc:	a992      	add	r1, sp, #584	; 0x248
    c5de:	484f      	ldr	r0, [pc, #316]	; (c71c <main+0x1bc>)
    c5e0:	f009 f9af 	bl	15942 <printk>
	if (rc >= 0) {
    c5e4:	2c00      	cmp	r4, #0
    c5e6:	da52      	bge.n	c68e <main+0x12e>
		printk("\tfn '%s' siz %u\n", dirent.name, dirent.size);
	}

	struct fs_file_t file;

	rc = fs_open(&file, fname, FS_O_CREATE | FS_O_RDWR);
    c5e8:	2213      	movs	r2, #19
    c5ea:	a992      	add	r1, sp, #584	; 0x248
    c5ec:	a848      	add	r0, sp, #288	; 0x120
    c5ee:	f003 faa7 	bl	fb40 <fs_open>
	if (rc < 0) {
    c5f2:	1e02      	subs	r2, r0, #0
    c5f4:	db52      	blt.n	c69c <main+0x13c>
		printk("FAIL: open %s: %d\n", fname, rc);
		goto out;
	}

	uint32_t boot_count = 0;
    c5f6:	2400      	movs	r4, #0
    c5f8:	9447      	str	r4, [sp, #284]	; 0x11c

	if (rc >= 0) {
		rc = fs_read(&file, &boot_count, sizeof(boot_count));
    c5fa:	2204      	movs	r2, #4
    c5fc:	a947      	add	r1, sp, #284	; 0x11c
    c5fe:	a848      	add	r0, sp, #288	; 0x120
    c600:	f003 fb34 	bl	fc6c <fs_read>
    c604:	4603      	mov	r3, r0
		printk("%s read count %u: %d\n", fname, boot_count, rc);
    c606:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    c608:	a992      	add	r1, sp, #584	; 0x248
    c60a:	4845      	ldr	r0, [pc, #276]	; (c720 <main+0x1c0>)
    c60c:	f009 f999 	bl	15942 <printk>
		rc = fs_seek(&file, 0, FS_SEEK_SET);
    c610:	4622      	mov	r2, r4
    c612:	4621      	mov	r1, r4
    c614:	a848      	add	r0, sp, #288	; 0x120
    c616:	f003 fb7d 	bl	fd14 <fs_seek>
    c61a:	4602      	mov	r2, r0
		printk("%s seek start: %d\n", fname, rc);
    c61c:	a992      	add	r1, sp, #584	; 0x248
    c61e:	4841      	ldr	r0, [pc, #260]	; (c724 <main+0x1c4>)
    c620:	f009 f98f 	bl	15942 <printk>

	}

	boot_count += 1;
    c624:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    c626:	3301      	adds	r3, #1
    c628:	9347      	str	r3, [sp, #284]	; 0x11c
	rc = fs_write(&file, &boot_count, sizeof(boot_count));
    c62a:	2204      	movs	r2, #4
    c62c:	a947      	add	r1, sp, #284	; 0x11c
    c62e:	a848      	add	r0, sp, #288	; 0x120
    c630:	f003 fb46 	bl	fcc0 <fs_write>
    c634:	4603      	mov	r3, r0
	printk("%s write new boot count %u: %d\n", fname,
    c636:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    c638:	a992      	add	r1, sp, #584	; 0x248
    c63a:	483b      	ldr	r0, [pc, #236]	; (c728 <main+0x1c8>)
    c63c:	f009 f981 	bl	15942 <printk>
	       boot_count, rc);

	rc = fs_close(&file);
    c640:	a848      	add	r0, sp, #288	; 0x120
    c642:	f003 fae7 	bl	fc14 <fs_close>
    c646:	4602      	mov	r2, r0
	printk("%s close: %d\n", fname, rc);
    c648:	a992      	add	r1, sp, #584	; 0x248
    c64a:	4838      	ldr	r0, [pc, #224]	; (c72c <main+0x1cc>)
    c64c:	f009 f979 	bl	15942 <printk>

	struct fs_dir_t dir = { 0 };
    c650:	9445      	str	r4, [sp, #276]	; 0x114
    c652:	9446      	str	r4, [sp, #280]	; 0x118

	rc = fs_opendir(&dir, mp->mnt_point);
    c654:	4d2c      	ldr	r5, [pc, #176]	; (c708 <main+0x1a8>)
    c656:	68e9      	ldr	r1, [r5, #12]
    c658:	a845      	add	r0, sp, #276	; 0x114
    c65a:	f003 fb85 	bl	fd68 <fs_opendir>
    c65e:	4604      	mov	r4, r0
	printk("%s opendir: %d\n", mp->mnt_point, rc);
    c660:	4602      	mov	r2, r0
    c662:	68e9      	ldr	r1, [r5, #12]
    c664:	4832      	ldr	r0, [pc, #200]	; (c730 <main+0x1d0>)
    c666:	f009 f96c 	bl	15942 <printk>

	while (rc >= 0) {
    c66a:	e035      	b.n	c6d8 <main+0x178>
		printk("FAIL: unable to find flash area %u: %d\n",
    c66c:	4621      	mov	r1, r4
    c66e:	4831      	ldr	r0, [pc, #196]	; (c734 <main+0x1d4>)
    c670:	f009 f967 	bl	15942 <printk>
		return;
    c674:	e026      	b.n	c6c4 <main+0x164>
		       (unsigned int)mp->storage_dev, mp->mnt_point,
    c676:	4924      	ldr	r1, [pc, #144]	; (c708 <main+0x1a8>)
		printk("FAIL: mount id %u at %s: %d\n",
    c678:	4613      	mov	r3, r2
    c67a:	68ca      	ldr	r2, [r1, #12]
    c67c:	6949      	ldr	r1, [r1, #20]
    c67e:	482e      	ldr	r0, [pc, #184]	; (c738 <main+0x1d8>)
    c680:	f009 f95f 	bl	15942 <printk>
		return;
    c684:	e01e      	b.n	c6c4 <main+0x164>
		printk("FAIL: statvfs: %d\n", rc);
    c686:	482d      	ldr	r0, [pc, #180]	; (c73c <main+0x1dc>)
    c688:	f009 f95b 	bl	15942 <printk>
		goto out;
    c68c:	e011      	b.n	c6b2 <main+0x152>
		printk("\tfn '%s' siz %u\n", dirent.name, dirent.size);
    c68e:	9a8c      	ldr	r2, [sp, #560]	; 0x230
    c690:	f20d 112d 	addw	r1, sp, #301	; 0x12d
    c694:	482a      	ldr	r0, [pc, #168]	; (c740 <main+0x1e0>)
    c696:	f009 f954 	bl	15942 <printk>
    c69a:	e7a5      	b.n	c5e8 <main+0x88>
		printk("FAIL: open %s: %d\n", fname, rc);
    c69c:	a992      	add	r1, sp, #584	; 0x248
    c69e:	4829      	ldr	r0, [pc, #164]	; (c744 <main+0x1e4>)
    c6a0:	f009 f94f 	bl	15942 <printk>
		goto out;
    c6a4:	e005      	b.n	c6b2 <main+0x152>
		rc = fs_readdir(&dir, &ent);
		if (rc < 0) {
			break;
		}
		if (ent.name[0] == 0) {
			printk("End of files\n");
    c6a6:	4828      	ldr	r0, [pc, #160]	; (c748 <main+0x1e8>)
    c6a8:	f009 f94b 	bl	15942 <printk>
		       (ent.type == FS_DIR_ENTRY_FILE) ? 'F' : 'D',
		       ent.size,
		       ent.name);
	}

	(void)fs_closedir(&dir);
    c6ac:	a845      	add	r0, sp, #276	; 0x114
    c6ae:	f003 fc71 	bl	ff94 <fs_closedir>

out:
	rc = fs_unmount(mp);
    c6b2:	4c15      	ldr	r4, [pc, #84]	; (c708 <main+0x1a8>)
    c6b4:	4620      	mov	r0, r4
    c6b6:	f003 fe39 	bl	1032c <fs_unmount>
    c6ba:	4602      	mov	r2, r0
	printk("%s unmount: %d\n", mp->mnt_point, rc);
    c6bc:	68e1      	ldr	r1, [r4, #12]
    c6be:	4823      	ldr	r0, [pc, #140]	; (c74c <main+0x1ec>)
    c6c0:	f009 f93f 	bl	15942 <printk>
}
    c6c4:	f50d 7d53 	add.w	sp, sp, #844	; 0x34c
    c6c8:	bd30      	pop	{r4, r5, pc}
		printk("  %c %u %s\n",
    c6ca:	2144      	movs	r1, #68	; 0x44
    c6cc:	f10d 030d 	add.w	r3, sp, #13
    c6d0:	9a44      	ldr	r2, [sp, #272]	; 0x110
    c6d2:	481f      	ldr	r0, [pc, #124]	; (c750 <main+0x1f0>)
    c6d4:	f009 f935 	bl	15942 <printk>
	while (rc >= 0) {
    c6d8:	2c00      	cmp	r4, #0
    c6da:	dbe7      	blt.n	c6ac <main+0x14c>
		struct fs_dirent ent = { 0 };
    c6dc:	f44f 7284 	mov.w	r2, #264	; 0x108
    c6e0:	2100      	movs	r1, #0
    c6e2:	a803      	add	r0, sp, #12
    c6e4:	f00a fc80 	bl	16fe8 <memset>
		rc = fs_readdir(&dir, &ent);
    c6e8:	a903      	add	r1, sp, #12
    c6ea:	a845      	add	r0, sp, #276	; 0x114
    c6ec:	f003 fbc4 	bl	fe78 <fs_readdir>
		if (rc < 0) {
    c6f0:	1e04      	subs	r4, r0, #0
    c6f2:	dbdb      	blt.n	c6ac <main+0x14c>
		if (ent.name[0] == 0) {
    c6f4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c6f8:	2b00      	cmp	r3, #0
    c6fa:	d0d4      	beq.n	c6a6 <main+0x146>
		       (ent.type == FS_DIR_ENTRY_FILE) ? 'F' : 'D',
    c6fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
		printk("  %c %u %s\n",
    c700:	2b00      	cmp	r3, #0
    c702:	d1e2      	bne.n	c6ca <main+0x16a>
    c704:	2146      	movs	r1, #70	; 0x46
    c706:	e7e1      	b.n	c6cc <main+0x16c>
    c708:	20010000 	.word	0x20010000
    c70c:	00019628 	.word	0x00019628
    c710:	00019660 	.word	0x00019660
    c714:	000196a4 	.word	0x000196a4
    c718:	000196c8 	.word	0x000196c8
    c71c:	00019708 	.word	0x00019708
    c720:	00019740 	.word	0x00019740
    c724:	00019758 	.word	0x00019758
    c728:	0001976c 	.word	0x0001976c
    c72c:	0001978c 	.word	0x0001978c
    c730:	0001979c 	.word	0x0001979c
    c734:	00019638 	.word	0x00019638
    c738:	00019684 	.word	0x00019684
    c73c:	000196b4 	.word	0x000196b4
    c740:	00019718 	.word	0x00019718
    c744:	0001972c 	.word	0x0001972c
    c748:	000197ac 	.word	0x000197ac
    c74c:	000197c8 	.word	0x000197c8
    c750:	000197bc 	.word	0x000197bc

0000c754 <sys_mem_pool_free>:
{
	struct sys_mem_pool_block *blk;
	struct sys_mem_pool *p;
	int lock_ret;

	if (ptr == NULL) {
    c754:	b320      	cbz	r0, c7a0 <sys_mem_pool_free+0x4c>
{
    c756:	b570      	push	{r4, r5, r6, lr}
    c758:	4605      	mov	r5, r0
		return;
	}

	ptr = (char *)ptr - WB_UP(sizeof(struct sys_mem_pool_block));
	blk = (struct sys_mem_pool_block *)ptr;
	p = blk->pool;
    c75a:	f850 4c08 	ldr.w	r4, [r0, #-8]
	k_mutex_init(&mutex->kernel_mutex);
}

static inline int sys_mutex_lock(struct sys_mutex *mutex, k_timeout_t timeout)
{
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
    c75e:	f104 0614 	add.w	r6, r4, #20
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    c762:	f04f 32ff 	mov.w	r2, #4294967295
    c766:	f04f 33ff 	mov.w	r3, #4294967295
    c76a:	4630      	mov	r0, r6
    c76c:	f007 fe8c 	bl	14488 <z_impl_k_mutex_lock>

	lock_ret = sys_mutex_lock(&p->mutex, K_FOREVER);
	CHECKIF(lock_ret != 0) {
    c770:	b100      	cbz	r0, c774 <sys_mem_pool_free+0x20>
		return;
	}
	z_sys_mem_pool_block_free(&p->base, blk->level, blk->block);
	sys_mutex_unlock(&p->mutex);
}
    c772:	bd70      	pop	{r4, r5, r6, pc}
	z_sys_mem_pool_block_free(&p->base, blk->level, blk->block);
    c774:	f815 1c04 	ldrb.w	r1, [r5, #-4]
    c778:	f855 2c04 	ldr.w	r2, [r5, #-4]
    c77c:	0912      	lsrs	r2, r2, #4
    c77e:	f001 010f 	and.w	r1, r1, #15
    c782:	4620      	mov	r0, r4
    c784:	f008 fec6 	bl	15514 <z_sys_mem_pool_block_free>
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
    c788:	6a23      	ldr	r3, [r4, #32]
    c78a:	2b00      	cmp	r3, #0
    c78c:	d0f1      	beq.n	c772 <sys_mem_pool_free+0x1e>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
    c78e:	69e2      	ldr	r2, [r4, #28]
    c790:	4b04      	ldr	r3, [pc, #16]	; (c7a4 <sys_mem_pool_free+0x50>)
    c792:	689b      	ldr	r3, [r3, #8]
    c794:	429a      	cmp	r2, r3
    c796:	d1ec      	bne.n	c772 <sys_mem_pool_free+0x1e>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    c798:	4630      	mov	r0, r6
    c79a:	f007 feff 	bl	1459c <z_impl_k_mutex_unlock>
		return -EPERM;
	}

	k_mutex_unlock(&mutex->kernel_mutex);
	return 0;
    c79e:	e7e8      	b.n	c772 <sys_mem_pool_free+0x1e>
    c7a0:	4770      	bx	lr
    c7a2:	bf00      	nop
    c7a4:	20010924 	.word	0x20010924

0000c7a8 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
    c7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7ac:	b089      	sub	sp, #36	; 0x24
    c7ae:	4692      	mov	sl, r2
    c7b0:	469b      	mov	fp, r3
    c7b2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    c7b6:	9301      	str	r3, [sp, #4]
    c7b8:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    c7bc:	2414      	movs	r4, #20
    c7be:	9700      	str	r7, [sp, #0]
    c7c0:	460f      	mov	r7, r1
    c7c2:	4606      	mov	r6, r0
    c7c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
    c7c6:	ea5a 030b 	orrs.w	r3, sl, fp
    c7ca:	d018      	beq.n	c7fe <print_digits+0x56>
		buf[i] = "0123456789abcdef"[num % base];
    c7cc:	ea4f 79e5 	mov.w	r9, r5, asr #31
    c7d0:	462a      	mov	r2, r5
    c7d2:	464b      	mov	r3, r9
    c7d4:	4650      	mov	r0, sl
    c7d6:	4659      	mov	r1, fp
    c7d8:	f7ff fd30 	bl	c23c <__aeabi_uldivmod>
    c7dc:	4b27      	ldr	r3, [pc, #156]	; (c87c <print_digits+0xd4>)
    c7de:	4413      	add	r3, r2
    c7e0:	781a      	ldrb	r2, [r3, #0]
    c7e2:	ab08      	add	r3, sp, #32
    c7e4:	4423      	add	r3, r4
    c7e6:	f803 2c18 	strb.w	r2, [r3, #-24]
		num /= base;
    c7ea:	462a      	mov	r2, r5
    c7ec:	464b      	mov	r3, r9
    c7ee:	4650      	mov	r0, sl
    c7f0:	4659      	mov	r1, fp
    c7f2:	f7ff fd23 	bl	c23c <__aeabi_uldivmod>
    c7f6:	4682      	mov	sl, r0
    c7f8:	468b      	mov	fp, r1
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    c7fa:	3c01      	subs	r4, #1
    c7fc:	e7e3      	b.n	c7c6 <print_digits+0x1e>
    c7fe:	4635      	mov	r5, r6
    c800:	463e      	mov	r6, r7
    c802:	9f00      	ldr	r7, [sp, #0]
	}

	if (i == DIGITS_BUFLEN - 1) {
    c804:	2c14      	cmp	r4, #20
    c806:	d00b      	beq.n	c820 <print_digits+0x78>
		buf[i] = '0';
	} else {
		i++;
    c808:	3401      	adds	r4, #1
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    c80a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c80c:	eb04 0803 	add.w	r8, r4, r3
    c810:	f1b8 0f15 	cmp.w	r8, #21
    c814:	d00a      	beq.n	c82c <print_digits+0x84>
    c816:	f1a8 0815 	sub.w	r8, r8, #21
    c81a:	46a1      	mov	r9, r4
    c81c:	9c01      	ldr	r4, [sp, #4]
    c81e:	e00f      	b.n	c840 <print_digits+0x98>
		buf[i] = '0';
    c820:	2230      	movs	r2, #48	; 0x30
    c822:	ab08      	add	r3, sp, #32
    c824:	4423      	add	r3, r4
    c826:	f803 2c18 	strb.w	r2, [r3, #-24]
    c82a:	e7ee      	b.n	c80a <print_digits+0x62>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    c82c:	f04f 0800 	mov.w	r8, #0
    c830:	46a1      	mov	r9, r4
    c832:	9c01      	ldr	r4, [sp, #4]
    c834:	e004      	b.n	c840 <print_digits+0x98>

	for (/**/; pad > 0 && pad_before; pad--) {
		out(pad_char, ctx);
    c836:	4631      	mov	r1, r6
    c838:	4638      	mov	r0, r7
    c83a:	47a8      	blx	r5
	for (/**/; pad > 0 && pad_before; pad--) {
    c83c:	f108 38ff 	add.w	r8, r8, #4294967295
    c840:	f1b8 0f00 	cmp.w	r8, #0
    c844:	dd03      	ble.n	c84e <print_digits+0xa6>
    c846:	2c00      	cmp	r4, #0
    c848:	d1f5      	bne.n	c836 <print_digits+0x8e>
    c84a:	464c      	mov	r4, r9
    c84c:	e000      	b.n	c850 <print_digits+0xa8>
    c84e:	464c      	mov	r4, r9
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
    c850:	2c14      	cmp	r4, #20
    c852:	d807      	bhi.n	c864 <print_digits+0xbc>
		out(buf[i], ctx);
    c854:	ab08      	add	r3, sp, #32
    c856:	4423      	add	r3, r4
    c858:	4631      	mov	r1, r6
    c85a:	f813 0c18 	ldrb.w	r0, [r3, #-24]
    c85e:	47a8      	blx	r5
	for (/**/; i < DIGITS_BUFLEN; i++) {
    c860:	3401      	adds	r4, #1
    c862:	e7f5      	b.n	c850 <print_digits+0xa8>
	}
	for (/**/; pad > 0; pad--) {
    c864:	f1b8 0f00 	cmp.w	r8, #0
    c868:	dd05      	ble.n	c876 <print_digits+0xce>
		out(pad_char, ctx);
    c86a:	4631      	mov	r1, r6
    c86c:	4638      	mov	r0, r7
    c86e:	47a8      	blx	r5
	for (/**/; pad > 0; pad--) {
    c870:	f108 38ff 	add.w	r8, r8, #4294967295
    c874:	e7f6      	b.n	c864 <print_digits+0xbc>
	}
}
    c876:	b009      	add	sp, #36	; 0x24
    c878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c87c:	000197e0 	.word	0x000197e0

0000c880 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    c880:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c882:	680b      	ldr	r3, [r1, #0]
    c884:	3301      	adds	r3, #1
    c886:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c888:	4b01      	ldr	r3, [pc, #4]	; (c890 <char_out+0x10>)
    c88a:	681b      	ldr	r3, [r3, #0]
    c88c:	4798      	blx	r3
}
    c88e:	bd08      	pop	{r3, pc}
    c890:	20010120 	.word	0x20010120

0000c894 <__printk_hook_install>:
	_char_out = fn;
    c894:	4b01      	ldr	r3, [pc, #4]	; (c89c <__printk_hook_install+0x8>)
    c896:	6018      	str	r0, [r3, #0]
}
    c898:	4770      	bx	lr
    c89a:	bf00      	nop
    c89c:	20010120 	.word	0x20010120

0000c8a0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    c8a0:	b500      	push	{lr}
    c8a2:	b083      	sub	sp, #12
    c8a4:	4602      	mov	r2, r0
    c8a6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    c8a8:	2100      	movs	r1, #0
    c8aa:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    c8ac:	a901      	add	r1, sp, #4
    c8ae:	4803      	ldr	r0, [pc, #12]	; (c8bc <vprintk+0x1c>)
    c8b0:	f008 febc 	bl	1562c <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    c8b4:	b003      	add	sp, #12
    c8b6:	f85d fb04 	ldr.w	pc, [sp], #4
    c8ba:	bf00      	nop
    c8bc:	0000c881 	.word	0x0000c881

0000c8c0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    c8c0:	b510      	push	{r4, lr}
    c8c2:	b084      	sub	sp, #16
    c8c4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    c8c6:	9001      	str	r0, [sp, #4]
    c8c8:	9102      	str	r1, [sp, #8]
    c8ca:	2100      	movs	r1, #0
    c8cc:	9103      	str	r1, [sp, #12]

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    c8ce:	a901      	add	r1, sp, #4
    c8d0:	4805      	ldr	r0, [pc, #20]	; (c8e8 <vsnprintk+0x28>)
    c8d2:	f008 feab 	bl	1562c <z_vprintk>

	if (ctx.count < ctx.max) {
    c8d6:	9b03      	ldr	r3, [sp, #12]
    c8d8:	9a02      	ldr	r2, [sp, #8]
    c8da:	4293      	cmp	r3, r2
    c8dc:	da01      	bge.n	c8e2 <vsnprintk+0x22>
		str[ctx.count] = '\0';
    c8de:	2200      	movs	r2, #0
    c8e0:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    c8e2:	9803      	ldr	r0, [sp, #12]
    c8e4:	b004      	add	sp, #16
    c8e6:	bd10      	pop	{r4, pc}
    c8e8:	000155fd 	.word	0x000155fd

0000c8ec <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    c8ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c8f0:	b083      	sub	sp, #12
    c8f2:	4604      	mov	r4, r0
    c8f4:	4608      	mov	r0, r1
    c8f6:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c8f8:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    c8fa:	f013 0f08 	tst.w	r3, #8
    c8fe:	d105      	bne.n	c90c <process_event+0x20>
    c900:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    c904:	2300      	movs	r3, #0
    c906:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    c908:	9301      	str	r3, [sp, #4]
}
    c90a:	e069      	b.n	c9e0 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    c90c:	2901      	cmp	r1, #1
    c90e:	d009      	beq.n	c924 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    c910:	f043 0320 	orr.w	r3, r3, #32
    c914:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    c916:	f385 8811 	msr	BASEPRI, r5
    c91a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    c91e:	b003      	add	sp, #12
    c920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    c924:	f043 0310 	orr.w	r3, r3, #16
    c928:	8323      	strh	r3, [r4, #24]
    c92a:	e7f4      	b.n	c916 <process_event+0x2a>
			evt = process_recheck(mgr);
    c92c:	4620      	mov	r0, r4
    c92e:	f009 f84b 	bl	159c8 <process_recheck>
    c932:	e057      	b.n	c9e4 <process_event+0xf8>
			res = mgr->last_res;
    c934:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    c938:	464a      	mov	r2, r9
    c93a:	4669      	mov	r1, sp
    c93c:	4620      	mov	r0, r4
    c93e:	f009 f85c 	bl	159fa <process_complete>
		onoff_transition_fn transit = NULL;
    c942:	2700      	movs	r7, #0
    c944:	e05a      	b.n	c9fc <process_event+0x110>
			transit = mgr->transitions->start;
    c946:	6923      	ldr	r3, [r4, #16]
    c948:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    c94a:	2106      	movs	r1, #6
    c94c:	4620      	mov	r0, r4
    c94e:	f009 f814 	bl	1597a <set_state>
		res = 0;
    c952:	f04f 0900 	mov.w	r9, #0
    c956:	e051      	b.n	c9fc <process_event+0x110>
			transit = mgr->transitions->stop;
    c958:	6923      	ldr	r3, [r4, #16]
    c95a:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    c95c:	2104      	movs	r1, #4
    c95e:	4620      	mov	r0, r4
    c960:	f009 f80b 	bl	1597a <set_state>
		res = 0;
    c964:	f04f 0900 	mov.w	r9, #0
    c968:	e048      	b.n	c9fc <process_event+0x110>
			transit = mgr->transitions->reset;
    c96a:	6923      	ldr	r3, [r4, #16]
    c96c:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    c96e:	2105      	movs	r1, #5
    c970:	4620      	mov	r0, r4
    c972:	f009 f802 	bl	1597a <set_state>
		res = 0;
    c976:	f04f 0900 	mov.w	r9, #0
    c97a:	e03f      	b.n	c9fc <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    c97c:	2200      	movs	r2, #0
    c97e:	e046      	b.n	ca0e <process_event+0x122>
    c980:	2200      	movs	r2, #0
    c982:	e044      	b.n	ca0e <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    c984:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    c988:	8323      	strh	r3, [r4, #24]
    c98a:	f385 8811 	msr	BASEPRI, r5
    c98e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    c992:	2900      	cmp	r1, #0
    c994:	d144      	bne.n	ca20 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    c996:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    c998:	b12b      	cbz	r3, c9a6 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    c99a:	464b      	mov	r3, r9
    c99c:	4642      	mov	r2, r8
    c99e:	4669      	mov	r1, sp
    c9a0:	4620      	mov	r0, r4
    c9a2:	f009 f8a0 	bl	15ae6 <notify_all>
			if (transit != NULL) {
    c9a6:	b117      	cbz	r7, c9ae <process_event+0xc2>
				transit(mgr, transition_complete);
    c9a8:	4925      	ldr	r1, [pc, #148]	; (ca40 <process_event+0x154>)
    c9aa:	4620      	mov	r0, r4
    c9ac:	47b8      	blx	r7
	__asm__ volatile(
    c9ae:	f04f 0320 	mov.w	r3, #32
    c9b2:	f3ef 8511 	mrs	r5, BASEPRI
    c9b6:	f383 8811 	msr	BASEPRI, r3
    c9ba:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    c9be:	8b23      	ldrh	r3, [r4, #24]
    c9c0:	f023 0308 	bic.w	r3, r3, #8
    c9c4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    c9c6:	8b23      	ldrh	r3, [r4, #24]
    c9c8:	f013 0f10 	tst.w	r3, #16
    c9cc:	d02e      	beq.n	ca2c <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    c9ce:	f023 0310 	bic.w	r3, r3, #16
    c9d2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    c9d4:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    c9d6:	8b26      	ldrh	r6, [r4, #24]
    c9d8:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    c9dc:	2800      	cmp	r0, #0
    c9de:	d09a      	beq.n	c916 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    c9e0:	2802      	cmp	r0, #2
    c9e2:	d0a3      	beq.n	c92c <process_event+0x40>
		if (evt == EVT_NOP) {
    c9e4:	2800      	cmp	r0, #0
    c9e6:	d096      	beq.n	c916 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    c9e8:	2801      	cmp	r0, #1
    c9ea:	d0a3      	beq.n	c934 <process_event+0x48>
		} else if (evt == EVT_START) {
    c9ec:	2803      	cmp	r0, #3
    c9ee:	d0aa      	beq.n	c946 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    c9f0:	2804      	cmp	r0, #4
    c9f2:	d0b1      	beq.n	c958 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    c9f4:	2805      	cmp	r0, #5
    c9f6:	d0b8      	beq.n	c96a <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    c9f8:	2700      	movs	r7, #0
		res = 0;
    c9fa:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    c9fc:	8b23      	ldrh	r3, [r4, #24]
    c9fe:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ca02:	45b0      	cmp	r8, r6
    ca04:	d0ba      	beq.n	c97c <process_event+0x90>
    ca06:	68a2      	ldr	r2, [r4, #8]
    ca08:	2a00      	cmp	r2, #0
    ca0a:	d0b9      	beq.n	c980 <process_event+0x94>
    ca0c:	2201      	movs	r2, #1
		if (do_monitors
    ca0e:	4611      	mov	r1, r2
    ca10:	2a00      	cmp	r2, #0
    ca12:	d1b7      	bne.n	c984 <process_event+0x98>
    ca14:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    ca16:	2a00      	cmp	r2, #0
    ca18:	d1b4      	bne.n	c984 <process_event+0x98>
		    || (transit != NULL)) {
    ca1a:	2f00      	cmp	r7, #0
    ca1c:	d1b2      	bne.n	c984 <process_event+0x98>
    ca1e:	e7d2      	b.n	c9c6 <process_event+0xda>
				notify_monitors(mgr, state, res);
    ca20:	464a      	mov	r2, r9
    ca22:	4641      	mov	r1, r8
    ca24:	4620      	mov	r0, r4
    ca26:	f008 ffb0 	bl	1598a <notify_monitors>
    ca2a:	e7b4      	b.n	c996 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    ca2c:	f013 0f20 	tst.w	r3, #32
    ca30:	d004      	beq.n	ca3c <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ca32:	f023 0320 	bic.w	r3, r3, #32
    ca36:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    ca38:	2002      	movs	r0, #2
    ca3a:	e7cc      	b.n	c9d6 <process_event+0xea>
		evt = EVT_NOP;
    ca3c:	2000      	movs	r0, #0
    ca3e:	e7ca      	b.n	c9d6 <process_event+0xea>
    ca40:	00015b15 	.word	0x00015b15

0000ca44 <_ldiv5>:
 * six.  This was tested exhaustively through the first ~10B values in
 * the input space, and for ~2e12 (4 hours runtime) random inputs
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
    ca44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t hi;
	uint64_t rem = *v, quot = 0U, q;
    ca48:	6805      	ldr	r5, [r0, #0]
    ca4a:	6846      	ldr	r6, [r0, #4]

	/*
	 * Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2U;
    ca4c:	3502      	adds	r5, #2
    ca4e:	f146 0600 	adc.w	r6, r6, #0

	for (i = 0; i < 3; i++) {
    ca52:	f04f 0c00 	mov.w	ip, #0
	uint64_t rem = *v, quot = 0U, q;
    ca56:	4667      	mov	r7, ip
    ca58:	46e6      	mov	lr, ip
	for (i = 0; i < 3; i++) {
    ca5a:	e02c      	b.n	cab6 <_ldiv5+0x72>
		hi = rem >> shifts[i];
    ca5c:	4b1a      	ldr	r3, [pc, #104]	; (cac8 <_ldiv5+0x84>)
    ca5e:	f813 400c 	ldrb.w	r4, [r3, ip]
    ca62:	f1c4 0120 	rsb	r1, r4, #32
    ca66:	f1a4 0320 	sub.w	r3, r4, #32
    ca6a:	fa25 f204 	lsr.w	r2, r5, r4
    ca6e:	fa06 f101 	lsl.w	r1, r6, r1
    ca72:	430a      	orrs	r2, r1
    ca74:	fa26 f303 	lsr.w	r3, r6, r3
    ca78:	431a      	orrs	r2, r3
		q = (uint64_t)(hi / 5U) << shifts[i];
    ca7a:	4b14      	ldr	r3, [pc, #80]	; (cacc <_ldiv5+0x88>)
    ca7c:	fba3 2302 	umull	r2, r3, r3, r2
    ca80:	089b      	lsrs	r3, r3, #2
    ca82:	f1a4 0820 	sub.w	r8, r4, #32
    ca86:	f1c4 0220 	rsb	r2, r4, #32
    ca8a:	fa03 f108 	lsl.w	r1, r3, r8
    ca8e:	fa23 f202 	lsr.w	r2, r3, r2
    ca92:	4311      	orrs	r1, r2
    ca94:	40a3      	lsls	r3, r4
		rem -= q * 5U;
    ca96:	ea4f 0881 	mov.w	r8, r1, lsl #2
    ca9a:	009a      	lsls	r2, r3, #2
    ca9c:	ea48 7493 	orr.w	r4, r8, r3, lsr #30
    caa0:	18d2      	adds	r2, r2, r3
    caa2:	eb41 0404 	adc.w	r4, r1, r4
    caa6:	1aad      	subs	r5, r5, r2
    caa8:	eb66 0604 	sbc.w	r6, r6, r4
		quot += q;
    caac:	18ff      	adds	r7, r7, r3
    caae:	eb4e 0e01 	adc.w	lr, lr, r1
	for (i = 0; i < 3; i++) {
    cab2:	f10c 0c01 	add.w	ip, ip, #1
    cab6:	f1bc 0f02 	cmp.w	ip, #2
    caba:	ddcf      	ble.n	ca5c <_ldiv5+0x18>
	}

	*v = quot;
    cabc:	6007      	str	r7, [r0, #0]
    cabe:	f8c0 e004 	str.w	lr, [r0, #4]
}
    cac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cac6:	bf00      	nop
    cac8:	00019800 	.word	0x00019800
    cacc:	cccccccd 	.word	0xcccccccd

0000cad0 <_to_float>:
struct zero_padding { int predot, postdot, trail; };

static int _to_float(char *buf, uint64_t double_temp, char c,
		     bool falt, bool fplus, bool fspace, int precision,
		     struct zero_padding *zp)
{
    cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cad4:	b089      	sub	sp, #36	; 0x24
    cad6:	4686      	mov	lr, r0
    cad8:	9000      	str	r0, [sp, #0]
    cada:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
    cade:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    cae2:	9101      	str	r1, [sp, #4]
    cae4:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
    cae8:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
    caec:	9d16      	ldr	r5, [sp, #88]	; 0x58
	uint64_t fract;
	uint64_t ltemp;
	bool prune_zero;
	char *start = buf;

	exp = double_temp >> 52 & 0x7ff;
    caee:	f3c3 540a 	ubfx	r4, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    caf2:	02d9      	lsls	r1, r3, #11
    caf4:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
    caf8:	02d0      	lsls	r0, r2, #11
    cafa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cafe:	9004      	str	r0, [sp, #16]
    cb00:	9105      	str	r1, [sp, #20]
	sign = !!(double_temp & HIGHBIT64);

	if (sign) {
    cb02:	2a00      	cmp	r2, #0
    cb04:	f173 0300 	sbcs.w	r3, r3, #0
    cb08:	db05      	blt.n	cb16 <_to_float+0x46>
		*buf++ = '-';
	} else if (fplus) {
    cb0a:	b396      	cbz	r6, cb72 <_to_float+0xa2>
		*buf++ = '+';
    cb0c:	9e00      	ldr	r6, [sp, #0]
    cb0e:	232b      	movs	r3, #43	; 0x2b
    cb10:	f806 3b01 	strb.w	r3, [r6], #1
    cb14:	e003      	b.n	cb1e <_to_float+0x4e>
		*buf++ = '-';
    cb16:	4676      	mov	r6, lr
    cb18:	232d      	movs	r3, #45	; 0x2d
    cb1a:	f806 3b01 	strb.w	r3, [r6], #1
	} else if (fspace) {
		*buf++ = ' ';
	}

	if (exp == 0x7ff) {
    cb1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    cb22:	429c      	cmp	r4, r3
    cb24:	d02f      	beq.n	cb86 <_to_float+0xb6>
		}
		*buf = 0;
		return buf - start;
	}

	if (c == 'F') {
    cb26:	2f46      	cmp	r7, #70	; 0x46
    cb28:	d059      	beq.n	cbde <_to_float+0x10e>
		c = 'f';
	}

	if ((exp | fract) != 0) {
    cb2a:	9b04      	ldr	r3, [sp, #16]
    cb2c:	ea44 0a03 	orr.w	sl, r4, r3
    cb30:	9905      	ldr	r1, [sp, #20]
    cb32:	17e3      	asrs	r3, r4, #31
    cb34:	ea43 0b01 	orr.w	fp, r3, r1
    cb38:	ea5a 030b 	orrs.w	r3, sl, fp
    cb3c:	d007      	beq.n	cb4e <_to_float+0x7e>
		if (exp == 0) {
    cb3e:	2c00      	cmp	r4, #0
    cb40:	d04f      	beq.n	cbe2 <_to_float+0x112>
			/* this is a denormal */
			while (((fract <<= 1) & HIGHBIT64) == 0) {
				exp--;
			}
		}
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    cb42:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= HIGHBIT64;
    cb46:	9b05      	ldr	r3, [sp, #20]
    cb48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cb4c:	9305      	str	r3, [sp, #20]
		c = 'f';
    cb4e:	f04f 0800 	mov.w	r8, #0
	}

	decexp = 0;
	while (exp <= -3) {
    cb52:	f114 0f02 	cmn.w	r4, #2
    cb56:	da7b      	bge.n	cc50 <_to_float+0x180>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    cb58:	9804      	ldr	r0, [sp, #16]
    cb5a:	9905      	ldr	r1, [sp, #20]
    cb5c:	2300      	movs	r3, #0
    cb5e:	2b00      	cmp	r3, #0
    cb60:	bf08      	it	eq
    cb62:	f1b1 3f33 	cmpeq.w	r1, #858993459	; 0x33333333
    cb66:	d34b      	bcc.n	cc00 <_to_float+0x130>
			_rlrshift(&fract);
    cb68:	a804      	add	r0, sp, #16
    cb6a:	f009 fbc6 	bl	162fa <_rlrshift>
			exp++;
    cb6e:	3401      	adds	r4, #1
    cb70:	e7f2      	b.n	cb58 <_to_float+0x88>
	} else if (fspace) {
    cb72:	f1bc 0f00 	cmp.w	ip, #0
    cb76:	d004      	beq.n	cb82 <_to_float+0xb2>
		*buf++ = ' ';
    cb78:	9e00      	ldr	r6, [sp, #0]
    cb7a:	2320      	movs	r3, #32
    cb7c:	f806 3b01 	strb.w	r3, [r6], #1
    cb80:	e7cd      	b.n	cb1e <_to_float+0x4e>
    cb82:	9e00      	ldr	r6, [sp, #0]
    cb84:	e7cb      	b.n	cb1e <_to_float+0x4e>
		if (!fract) {
    cb86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    cb8a:	4313      	orrs	r3, r2
    cb8c:	d116      	bne.n	cbbc <_to_float+0xec>
extern "C" {
#endif

static inline int isupper(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    cb8e:	3f41      	subs	r7, #65	; 0x41
			if (isupper((int)c)) {
    cb90:	2f19      	cmp	r7, #25
    cb92:	d80b      	bhi.n	cbac <_to_float+0xdc>
				*buf++ = 'I';
    cb94:	2349      	movs	r3, #73	; 0x49
    cb96:	7033      	strb	r3, [r6, #0]
				*buf++ = 'N';
    cb98:	234e      	movs	r3, #78	; 0x4e
    cb9a:	7073      	strb	r3, [r6, #1]
				*buf++ = 'F';
    cb9c:	1cf3      	adds	r3, r6, #3
    cb9e:	2246      	movs	r2, #70	; 0x46
    cba0:	70b2      	strb	r2, [r6, #2]
		*buf = 0;
    cba2:	2200      	movs	r2, #0
    cba4:	701a      	strb	r2, [r3, #0]
		return buf - start;
    cba6:	9a00      	ldr	r2, [sp, #0]
    cba8:	1a98      	subs	r0, r3, r2
    cbaa:	e142      	b.n	ce32 <_to_float+0x362>
				*buf++ = 'i';
    cbac:	2369      	movs	r3, #105	; 0x69
    cbae:	7033      	strb	r3, [r6, #0]
				*buf++ = 'n';
    cbb0:	236e      	movs	r3, #110	; 0x6e
    cbb2:	7073      	strb	r3, [r6, #1]
				*buf++ = 'f';
    cbb4:	1cf3      	adds	r3, r6, #3
    cbb6:	2266      	movs	r2, #102	; 0x66
    cbb8:	70b2      	strb	r2, [r6, #2]
    cbba:	e7f2      	b.n	cba2 <_to_float+0xd2>
    cbbc:	3f41      	subs	r7, #65	; 0x41
			if (isupper((int)c)) {
    cbbe:	2f19      	cmp	r7, #25
    cbc0:	d806      	bhi.n	cbd0 <_to_float+0x100>
				*buf++ = 'N';
    cbc2:	224e      	movs	r2, #78	; 0x4e
    cbc4:	7032      	strb	r2, [r6, #0]
				*buf++ = 'A';
    cbc6:	2341      	movs	r3, #65	; 0x41
    cbc8:	7073      	strb	r3, [r6, #1]
				*buf++ = 'N';
    cbca:	1cf3      	adds	r3, r6, #3
    cbcc:	70b2      	strb	r2, [r6, #2]
    cbce:	e7e8      	b.n	cba2 <_to_float+0xd2>
				*buf++ = 'n';
    cbd0:	226e      	movs	r2, #110	; 0x6e
    cbd2:	7032      	strb	r2, [r6, #0]
				*buf++ = 'a';
    cbd4:	2361      	movs	r3, #97	; 0x61
    cbd6:	7073      	strb	r3, [r6, #1]
				*buf++ = 'n';
    cbd8:	1cf3      	adds	r3, r6, #3
    cbda:	70b2      	strb	r2, [r6, #2]
    cbdc:	e7e1      	b.n	cba2 <_to_float+0xd2>
		c = 'f';
    cbde:	2766      	movs	r7, #102	; 0x66
    cbe0:	e7a3      	b.n	cb2a <_to_float+0x5a>
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    cbe2:	9b04      	ldr	r3, [sp, #16]
    cbe4:	9a05      	ldr	r2, [sp, #20]
    cbe6:	eb13 0803 	adds.w	r8, r3, r3
    cbea:	eb42 0902 	adc.w	r9, r2, r2
    cbee:	e9cd 8904 	strd	r8, r9, [sp, #16]
    cbf2:	f1b8 0f00 	cmp.w	r8, #0
    cbf6:	f179 0300 	sbcs.w	r3, r9, #0
    cbfa:	dba2      	blt.n	cb42 <_to_float+0x72>
				exp--;
    cbfc:	3c01      	subs	r4, #1
    cbfe:	e7f0      	b.n	cbe2 <_to_float+0x112>
		}
		fract *= 5U;
    cc00:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    cc04:	0083      	lsls	r3, r0, #2
    cc06:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
    cc0a:	1818      	adds	r0, r3, r0
    cc0c:	eb42 0101 	adc.w	r1, r2, r1
    cc10:	9004      	str	r0, [sp, #16]
    cc12:	9105      	str	r1, [sp, #20]
		exp++;
    cc14:	3401      	adds	r4, #1
		decexp--;
    cc16:	f108 38ff 	add.w	r8, r8, #4294967295

		while ((fract >> 32) <= (MAXFP1 / 2)) {
    cc1a:	9b04      	ldr	r3, [sp, #16]
    cc1c:	9a05      	ldr	r2, [sp, #20]
    cc1e:	2100      	movs	r1, #0
    cc20:	2900      	cmp	r1, #0
    cc22:	bf08      	it	eq
    cc24:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
    cc28:	d293      	bcs.n	cb52 <_to_float+0x82>
			fract <<= 1;
    cc2a:	18db      	adds	r3, r3, r3
    cc2c:	4152      	adcs	r2, r2
    cc2e:	9304      	str	r3, [sp, #16]
    cc30:	9205      	str	r2, [sp, #20]
			exp--;
    cc32:	3c01      	subs	r4, #1
    cc34:	e7f1      	b.n	cc1a <_to_float+0x14a>
	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
		decexp++;
		while ((fract >> 32) <= (MAXFP1 / 2)) {
			fract <<= 1;
    cc36:	18db      	adds	r3, r3, r3
    cc38:	4152      	adcs	r2, r2
    cc3a:	9304      	str	r3, [sp, #16]
    cc3c:	9205      	str	r2, [sp, #20]
			exp--;
    cc3e:	3c01      	subs	r4, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    cc40:	9b04      	ldr	r3, [sp, #16]
    cc42:	9a05      	ldr	r2, [sp, #20]
    cc44:	2100      	movs	r1, #0
    cc46:	2900      	cmp	r1, #0
    cc48:	bf08      	it	eq
    cc4a:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
    cc4e:	d3f2      	bcc.n	cc36 <_to_float+0x166>
	while (exp > 0) {
    cc50:	2c00      	cmp	r4, #0
    cc52:	dd0a      	ble.n	cc6a <_to_float+0x19a>
		_ldiv5(&fract);
    cc54:	a804      	add	r0, sp, #16
    cc56:	f7ff fef5 	bl	ca44 <_ldiv5>
		exp--;
    cc5a:	3c01      	subs	r4, #1
		decexp++;
    cc5c:	f108 0801 	add.w	r8, r8, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    cc60:	e7ee      	b.n	cc40 <_to_float+0x170>
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
    cc62:	a804      	add	r0, sp, #16
    cc64:	f009 fb49 	bl	162fa <_rlrshift>
		exp++;
    cc68:	3401      	adds	r4, #1
	while (exp < (0 + 4)) {
    cc6a:	2c03      	cmp	r4, #3
    cc6c:	ddf9      	ble.n	cc62 <_to_float+0x192>
	}

	if (precision < 0) {
    cc6e:	2d00      	cmp	r5, #0
    cc70:	db13      	blt.n	cc9a <_to_float+0x1ca>
		precision = 6;		/* Default precision if none given */
	}

	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
    cc72:	2f67      	cmp	r7, #103	; 0x67
    cc74:	d013      	beq.n	cc9e <_to_float+0x1ce>
    cc76:	2f47      	cmp	r7, #71	; 0x47
    cc78:	d011      	beq.n	cc9e <_to_float+0x1ce>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    cc7a:	f04f 0a00 	mov.w	sl, #0
		if (!falt && (precision > 0)) {
			prune_zero = true;
		}
	}

	if (c == 'f') {
    cc7e:	2f66      	cmp	r7, #102	; 0x66
    cc80:	d027      	beq.n	ccd2 <_to_float+0x202>
		exp = precision + decexp;
		if (exp < 0) {
			exp = 0;
		}
	} else {
		exp = precision + 1;
    cc82:	1c6c      	adds	r4, r5, #1
	}
	digit_count = 16;
    cc84:	2310      	movs	r3, #16
    cc86:	9307      	str	r3, [sp, #28]
	if (exp > 16) {
    cc88:	429c      	cmp	r4, r3
    cc8a:	dd00      	ble.n	cc8e <_to_float+0x1be>
		exp = 16;
    cc8c:	461c      	mov	r4, r3
	}

	ltemp = 0x0800000000000000;
    cc8e:	2200      	movs	r2, #0
    cc90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    cc94:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while (exp--) {
    cc98:	e029      	b.n	ccee <_to_float+0x21e>
		precision = 6;		/* Default precision if none given */
    cc9a:	2506      	movs	r5, #6
    cc9c:	e7e9      	b.n	cc72 <_to_float+0x1a2>
		if (decexp < (-4 + 1) || decexp > precision) {
    cc9e:	f118 0f03 	cmn.w	r8, #3
    cca2:	db01      	blt.n	cca8 <_to_float+0x1d8>
    cca4:	4545      	cmp	r5, r8
    cca6:	da0b      	bge.n	ccc0 <_to_float+0x1f0>
			c += 'e' - 'g';
    cca8:	3f02      	subs	r7, #2
    ccaa:	b2ff      	uxtb	r7, r7
			if (precision > 0) {
    ccac:	2d00      	cmp	r5, #0
    ccae:	dd00      	ble.n	ccb2 <_to_float+0x1e2>
				precision--;
    ccb0:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    ccb2:	9b01      	ldr	r3, [sp, #4]
    ccb4:	b953      	cbnz	r3, cccc <_to_float+0x1fc>
    ccb6:	2d00      	cmp	r5, #0
    ccb8:	dd06      	ble.n	ccc8 <_to_float+0x1f8>
			prune_zero = true;
    ccba:	f04f 0a01 	mov.w	sl, #1
    ccbe:	e7de      	b.n	cc7e <_to_float+0x1ae>
			precision -= decexp;
    ccc0:	eba5 0508 	sub.w	r5, r5, r8
			c = 'f';
    ccc4:	2766      	movs	r7, #102	; 0x66
    ccc6:	e7f4      	b.n	ccb2 <_to_float+0x1e2>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    ccc8:	469a      	mov	sl, r3
    ccca:	e7d8      	b.n	cc7e <_to_float+0x1ae>
    cccc:	f04f 0a00 	mov.w	sl, #0
    ccd0:	e7d5      	b.n	cc7e <_to_float+0x1ae>
		if (exp < 0) {
    ccd2:	eb15 0408 	adds.w	r4, r5, r8
    ccd6:	d5d5      	bpl.n	cc84 <_to_float+0x1b4>
	digit_count = 16;
    ccd8:	2310      	movs	r3, #16
    ccda:	9307      	str	r3, [sp, #28]
			exp = 0;
    ccdc:	2400      	movs	r4, #0
    ccde:	e7d6      	b.n	cc8e <_to_float+0x1be>
		_ldiv5(&ltemp);
    cce0:	a802      	add	r0, sp, #8
    cce2:	f7ff feaf 	bl	ca44 <_ldiv5>
		_rlrshift(&ltemp);
    cce6:	a802      	add	r0, sp, #8
    cce8:	f009 fb07 	bl	162fa <_rlrshift>
	while (exp--) {
    ccec:	464c      	mov	r4, r9
    ccee:	f104 39ff 	add.w	r9, r4, #4294967295
    ccf2:	2c00      	cmp	r4, #0
    ccf4:	d1f4      	bne.n	cce0 <_to_float+0x210>
	}

	fract += ltemp;
    ccf6:	9b04      	ldr	r3, [sp, #16]
    ccf8:	9a02      	ldr	r2, [sp, #8]
    ccfa:	189b      	adds	r3, r3, r2
    ccfc:	9a05      	ldr	r2, [sp, #20]
    ccfe:	9903      	ldr	r1, [sp, #12]
    cd00:	eb41 0202 	adc.w	r2, r1, r2
    cd04:	9304      	str	r3, [sp, #16]
    cd06:	9205      	str	r2, [sp, #20]
	if ((fract >> 32) & 0xF0000000) {
    cd08:	f002 4070 	and.w	r0, r2, #4026531840	; 0xf0000000
    cd0c:	2100      	movs	r1, #0
    cd0e:	ea50 0301 	orrs.w	r3, r0, r1
    cd12:	d109      	bne.n	cd28 <_to_float+0x258>
		_ldiv5(&fract);
		_rlrshift(&fract);
		decexp++;
	}

	if (c == 'f') {
    cd14:	2f66      	cmp	r7, #102	; 0x66
    cd16:	f040 808f 	bne.w	ce38 <_to_float+0x368>
		if (decexp > 0) {
    cd1a:	f1b8 0f00 	cmp.w	r8, #0
    cd1e:	dc14      	bgt.n	cd4a <_to_float+0x27a>
				decexp--;
			}
			zp->predot = decexp;
			decexp = 0;
		} else {
			*buf++ = '0';
    cd20:	2330      	movs	r3, #48	; 0x30
    cd22:	f806 3b01 	strb.w	r3, [r6], #1
    cd26:	e01a      	b.n	cd5e <_to_float+0x28e>
		_ldiv5(&fract);
    cd28:	a804      	add	r0, sp, #16
    cd2a:	f7ff fe8b 	bl	ca44 <_ldiv5>
		_rlrshift(&fract);
    cd2e:	a804      	add	r0, sp, #16
    cd30:	f009 fae3 	bl	162fa <_rlrshift>
		decexp++;
    cd34:	f108 0801 	add.w	r8, r8, #1
    cd38:	e7ec      	b.n	cd14 <_to_float+0x244>
				*buf++ = _get_digit(&fract, &digit_count);
    cd3a:	a907      	add	r1, sp, #28
    cd3c:	a804      	add	r0, sp, #16
    cd3e:	f009 faee 	bl	1631e <_get_digit>
    cd42:	f806 0b01 	strb.w	r0, [r6], #1
				decexp--;
    cd46:	f108 38ff 	add.w	r8, r8, #4294967295
			while (decexp > 0 && digit_count > 0) {
    cd4a:	f1b8 0f00 	cmp.w	r8, #0
    cd4e:	dd02      	ble.n	cd56 <_to_float+0x286>
    cd50:	9b07      	ldr	r3, [sp, #28]
    cd52:	2b00      	cmp	r3, #0
    cd54:	dcf1      	bgt.n	cd3a <_to_float+0x26a>
			zp->predot = decexp;
    cd56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cd58:	f8c3 8000 	str.w	r8, [r3]
			decexp = 0;
    cd5c:	46a0      	mov	r8, r4
		}
		if (falt || (precision > 0)) {
    cd5e:	9b01      	ldr	r3, [sp, #4]
    cd60:	b90b      	cbnz	r3, cd66 <_to_float+0x296>
    cd62:	2d00      	cmp	r5, #0
    cd64:	dd13      	ble.n	cd8e <_to_float+0x2be>
			*buf++ = '.';
    cd66:	4633      	mov	r3, r6
    cd68:	222e      	movs	r2, #46	; 0x2e
    cd6a:	f803 2b01 	strb.w	r2, [r3], #1
		}
		if (decexp < 0 && precision > 0) {
    cd6e:	f1b8 0f00 	cmp.w	r8, #0
    cd72:	da17      	bge.n	cda4 <_to_float+0x2d4>
    cd74:	2d00      	cmp	r5, #0
    cd76:	dd15      	ble.n	cda4 <_to_float+0x2d4>
			zp->postdot = -decexp;
    cd78:	f1c8 0200 	rsb	r2, r8, #0
    cd7c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    cd7e:	604a      	str	r2, [r1, #4]
			if (zp->postdot > precision) {
    cd80:	42aa      	cmp	r2, r5
    cd82:	dd00      	ble.n	cd86 <_to_float+0x2b6>
				zp->postdot = precision;
    cd84:	604d      	str	r5, [r1, #4]
			}
			precision -= zp->postdot;
    cd86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cd88:	6852      	ldr	r2, [r2, #4]
    cd8a:	1aad      	subs	r5, r5, r2
    cd8c:	e00a      	b.n	cda4 <_to_float+0x2d4>
    cd8e:	4633      	mov	r3, r6
    cd90:	e7ed      	b.n	cd6e <_to_float+0x29e>
		}
		while (precision > 0 && digit_count > 0) {
			*buf++ = _get_digit(&fract, &digit_count);
    cd92:	461c      	mov	r4, r3
    cd94:	a907      	add	r1, sp, #28
    cd96:	a804      	add	r0, sp, #16
    cd98:	f009 fac1 	bl	1631e <_get_digit>
    cd9c:	f804 0b01 	strb.w	r0, [r4], #1
			precision--;
    cda0:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    cda2:	4623      	mov	r3, r4
		while (precision > 0 && digit_count > 0) {
    cda4:	2d00      	cmp	r5, #0
    cda6:	dd02      	ble.n	cdae <_to_float+0x2de>
    cda8:	9a07      	ldr	r2, [sp, #28]
    cdaa:	2a00      	cmp	r2, #0
    cdac:	dcf1      	bgt.n	cd92 <_to_float+0x2c2>
		}
		zp->trail = precision;
    cdae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cdb0:	6095      	str	r5, [r2, #8]
			precision--;
		}
		zp->trail = precision;
	}

	if (prune_zero) {
    cdb2:	f1ba 0f00 	cmp.w	sl, #0
    cdb6:	d00a      	beq.n	cdce <_to_float+0x2fe>
		zp->trail = 0;
    cdb8:	2200      	movs	r2, #0
    cdba:	9917      	ldr	r1, [sp, #92]	; 0x5c
    cdbc:	608a      	str	r2, [r1, #8]
		while (*--buf == '0')
    cdbe:	461a      	mov	r2, r3
    cdc0:	4613      	mov	r3, r2
    cdc2:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    cdc6:	2930      	cmp	r1, #48	; 0x30
    cdc8:	d0fa      	beq.n	cdc0 <_to_float+0x2f0>
			;
		if (*buf != '.') {
    cdca:	292e      	cmp	r1, #46	; 0x2e
    cdcc:	d058      	beq.n	ce80 <_to_float+0x3b0>
			buf++;
		}
	}

	if ((c == 'e') || (c == 'E')) {
    cdce:	2f65      	cmp	r7, #101	; 0x65
    cdd0:	d001      	beq.n	cdd6 <_to_float+0x306>
    cdd2:	2f45      	cmp	r7, #69	; 0x45
    cdd4:	d129      	bne.n	ce2a <_to_float+0x35a>
		*buf++ = c;
    cdd6:	701f      	strb	r7, [r3, #0]
		if (decexp < 0) {
    cdd8:	f1b8 0f00 	cmp.w	r8, #0
    cddc:	db52      	blt.n	ce84 <_to_float+0x3b4>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
    cdde:	1c99      	adds	r1, r3, #2
    cde0:	222b      	movs	r2, #43	; 0x2b
    cde2:	705a      	strb	r2, [r3, #1]
		}
		if (decexp >= 100) {
    cde4:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    cde8:	dd0d      	ble.n	ce06 <_to_float+0x336>
			*buf++ = (decexp / 100) + '0';
    cdea:	4a29      	ldr	r2, [pc, #164]	; (ce90 <_to_float+0x3c0>)
    cdec:	fb82 3208 	smull	r3, r2, r2, r8
    cdf0:	ea4f 73e8 	mov.w	r3, r8, asr #31
    cdf4:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    cdf8:	f103 0230 	add.w	r2, r3, #48	; 0x30
    cdfc:	f801 2b01 	strb.w	r2, [r1], #1
			decexp %= 100;
    ce00:	2264      	movs	r2, #100	; 0x64
    ce02:	fb02 8813 	mls	r8, r2, r3, r8
		}
		*buf++ = (decexp / 10) + '0';
    ce06:	4b23      	ldr	r3, [pc, #140]	; (ce94 <_to_float+0x3c4>)
    ce08:	fb83 2308 	smull	r2, r3, r3, r8
    ce0c:	ea4f 72e8 	mov.w	r2, r8, asr #31
    ce10:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
    ce14:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ce18:	460b      	mov	r3, r1
    ce1a:	f803 0b02 	strb.w	r0, [r3], #2
		decexp %= 10;
    ce1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ce22:	eba8 0242 	sub.w	r2, r8, r2, lsl #1
		*buf++ = decexp + '0';
    ce26:	3230      	adds	r2, #48	; 0x30
    ce28:	704a      	strb	r2, [r1, #1]
	}
	*buf = 0;
    ce2a:	2200      	movs	r2, #0
    ce2c:	701a      	strb	r2, [r3, #0]

	return buf - start;
    ce2e:	9a00      	ldr	r2, [sp, #0]
    ce30:	1a98      	subs	r0, r3, r2
}
    ce32:	b009      	add	sp, #36	; 0x24
    ce34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*buf = _get_digit(&fract, &digit_count);
    ce38:	a907      	add	r1, sp, #28
    ce3a:	a804      	add	r0, sp, #16
    ce3c:	f009 fa6f 	bl	1631e <_get_digit>
    ce40:	4633      	mov	r3, r6
    ce42:	f803 0b01 	strb.w	r0, [r3], #1
		if (*buf++ != '0') {
    ce46:	2830      	cmp	r0, #48	; 0x30
    ce48:	d001      	beq.n	ce4e <_to_float+0x37e>
			decexp--;
    ce4a:	f108 38ff 	add.w	r8, r8, #4294967295
		if (falt || (precision > 0)) {
    ce4e:	9a01      	ldr	r2, [sp, #4]
    ce50:	b90a      	cbnz	r2, ce56 <_to_float+0x386>
    ce52:	2d00      	cmp	r5, #0
    ce54:	dd0c      	ble.n	ce70 <_to_float+0x3a0>
			*buf++ = '.';
    ce56:	1cb3      	adds	r3, r6, #2
    ce58:	222e      	movs	r2, #46	; 0x2e
    ce5a:	7072      	strb	r2, [r6, #1]
    ce5c:	e008      	b.n	ce70 <_to_float+0x3a0>
			*buf++ = _get_digit(&fract, &digit_count);
    ce5e:	461c      	mov	r4, r3
    ce60:	a907      	add	r1, sp, #28
    ce62:	a804      	add	r0, sp, #16
    ce64:	f009 fa5b 	bl	1631e <_get_digit>
    ce68:	f804 0b01 	strb.w	r0, [r4], #1
			precision--;
    ce6c:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    ce6e:	4623      	mov	r3, r4
		while (precision > 0 && digit_count > 0) {
    ce70:	2d00      	cmp	r5, #0
    ce72:	dd02      	ble.n	ce7a <_to_float+0x3aa>
    ce74:	9a07      	ldr	r2, [sp, #28]
    ce76:	2a00      	cmp	r2, #0
    ce78:	dcf1      	bgt.n	ce5e <_to_float+0x38e>
		zp->trail = precision;
    ce7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    ce7c:	6095      	str	r5, [r2, #8]
    ce7e:	e798      	b.n	cdb2 <_to_float+0x2e2>
		while (*--buf == '0')
    ce80:	4613      	mov	r3, r2
    ce82:	e7a4      	b.n	cdce <_to_float+0x2fe>
			decexp = -decexp;
    ce84:	f1c8 0800 	rsb	r8, r8, #0
			*buf++ = '-';
    ce88:	1c99      	adds	r1, r3, #2
    ce8a:	222d      	movs	r2, #45	; 0x2d
    ce8c:	705a      	strb	r2, [r3, #1]
    ce8e:	e7a9      	b.n	cde4 <_to_float+0x314>
    ce90:	51eb851f 	.word	0x51eb851f
    ce94:	66666667 	.word	0x66666667

0000ce98 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    ce98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce9c:	b099      	sub	sp, #100	; 0x64
    ce9e:	4606      	mov	r6, r0
    cea0:	460d      	mov	r5, r1
    cea2:	920d      	str	r2, [sp, #52]	; 0x34
    cea4:	930c      	str	r3, [sp, #48]	; 0x30
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    cea6:	2400      	movs	r4, #0

	while ((c = *format++)) {
    cea8:	e000      	b.n	ceac <z_prf+0x14>
		if (c != '%') {
			PUTC(c);
			count++;
    ceaa:	3401      	adds	r4, #1
	while ((c = *format++)) {
    ceac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ceae:	1c5a      	adds	r2, r3, #1
    ceb0:	920d      	str	r2, [sp, #52]	; 0x34
    ceb2:	7818      	ldrb	r0, [r3, #0]
    ceb4:	b138      	cbz	r0, cec6 <z_prf+0x2e>
		if (c != '%') {
    ceb6:	2825      	cmp	r0, #37	; 0x25
    ceb8:	d018      	beq.n	ceec <z_prf+0x54>
			PUTC(c);
    ceba:	4629      	mov	r1, r5
    cebc:	47b0      	blx	r6
    cebe:	f1b0 3fff 	cmp.w	r0, #4294967295
    cec2:	d1f2      	bne.n	ceaa <z_prf+0x12>
    cec4:	4604      	mov	r4, r0
		}
	}
	return count;

#undef PUTC
}
    cec6:	4620      	mov	r0, r4
    cec8:	b019      	add	sp, #100	; 0x64
    ceca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					fplus = true;
    cece:	f04f 0801 	mov.w	r8, #1
					break;
    ced2:	e013      	b.n	cefc <z_prf+0x64>
					fspace = true;
    ced4:	2301      	movs	r3, #1
    ced6:	9307      	str	r3, [sp, #28]
					break;
    ced8:	e010      	b.n	cefc <z_prf+0x64>
					falt = true;
    ceda:	2301      	movs	r3, #1
    cedc:	9308      	str	r3, [sp, #32]
					break;
    cede:	e00d      	b.n	cefc <z_prf+0x64>
					fzero = true;
    cee0:	f04f 0901 	mov.w	r9, #1
					break;
    cee4:	e00a      	b.n	cefc <z_prf+0x64>
					fminus = true;
    cee6:	f04f 0a01 	mov.w	sl, #1
    ceea:	e007      	b.n	cefc <z_prf+0x64>
			fminus = fplus = fspace = falt = fzero = false;
    ceec:	f04f 0900 	mov.w	r9, #0
    cef0:	f8cd 901c 	str.w	r9, [sp, #28]
    cef4:	46c8      	mov	r8, r9
    cef6:	46ca      	mov	sl, r9
    cef8:	f8cd 9020 	str.w	r9, [sp, #32]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    cefc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cefe:	1c5a      	adds	r2, r3, #1
    cf00:	920d      	str	r2, [sp, #52]	; 0x34
    cf02:	781f      	ldrb	r7, [r3, #0]
    cf04:	4639      	mov	r1, r7
    cf06:	48c5      	ldr	r0, [pc, #788]	; (d21c <z_prf+0x384>)
    cf08:	f009 fffa 	bl	16f00 <strchr>
    cf0c:	b370      	cbz	r0, cf6c <z_prf+0xd4>
				switch (c) {
    cf0e:	2f00      	cmp	r7, #0
    cf10:	d0d9      	beq.n	cec6 <z_prf+0x2e>
    cf12:	2f30      	cmp	r7, #48	; 0x30
    cf14:	d8f2      	bhi.n	cefc <z_prf+0x64>
    cf16:	2f20      	cmp	r7, #32
    cf18:	d3f0      	bcc.n	cefc <z_prf+0x64>
    cf1a:	3f20      	subs	r7, #32
    cf1c:	2f10      	cmp	r7, #16
    cf1e:	d8ed      	bhi.n	cefc <z_prf+0x64>
    cf20:	a301      	add	r3, pc, #4	; (adr r3, cf28 <z_prf+0x90>)
    cf22:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
    cf26:	bf00      	nop
    cf28:	0000ced5 	.word	0x0000ced5
    cf2c:	0000cefd 	.word	0x0000cefd
    cf30:	0000cefd 	.word	0x0000cefd
    cf34:	0000cedb 	.word	0x0000cedb
    cf38:	0000cefd 	.word	0x0000cefd
    cf3c:	0000cefd 	.word	0x0000cefd
    cf40:	0000cefd 	.word	0x0000cefd
    cf44:	0000cefd 	.word	0x0000cefd
    cf48:	0000cefd 	.word	0x0000cefd
    cf4c:	0000cefd 	.word	0x0000cefd
    cf50:	0000cefd 	.word	0x0000cefd
    cf54:	0000cecf 	.word	0x0000cecf
    cf58:	0000cefd 	.word	0x0000cefd
    cf5c:	0000cee7 	.word	0x0000cee7
    cf60:	0000cefd 	.word	0x0000cefd
    cf64:	0000cefd 	.word	0x0000cefd
    cf68:	0000cee1 	.word	0x0000cee1
			if (c == '*') {
    cf6c:	2f2a      	cmp	r7, #42	; 0x2a
    cf6e:	f000 8119 	beq.w	d1a4 <z_prf+0x30c>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    cf72:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
			} else if (!isdigit((int)c)) {
    cf76:	2b09      	cmp	r3, #9
    cf78:	f240 8125 	bls.w	d1c6 <z_prf+0x32e>
				width = 0;
    cf7c:	2300      	movs	r3, #0
    cf7e:	930a      	str	r3, [sp, #40]	; 0x28
			if (c == '.') {
    cf80:	2f2e      	cmp	r7, #46	; 0x2e
    cf82:	f000 8129 	beq.w	d1d8 <z_prf+0x340>
			precision = -1;
    cf86:	f04f 3bff 	mov.w	fp, #4294967295
			if (strchr("hlz", c) != NULL) {
    cf8a:	9709      	str	r7, [sp, #36]	; 0x24
    cf8c:	4639      	mov	r1, r7
    cf8e:	48a4      	ldr	r0, [pc, #656]	; (d220 <z_prf+0x388>)
    cf90:	f009 ffb6 	bl	16f00 <strchr>
    cf94:	2800      	cmp	r0, #0
    cf96:	f000 813d 	beq.w	d214 <z_prf+0x37c>
				c = *format++;
    cf9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf9c:	1c5a      	adds	r2, r3, #1
    cf9e:	920d      	str	r2, [sp, #52]	; 0x34
    cfa0:	781f      	ldrb	r7, [r3, #0]
				} else if (i == 'h' && c == 'h') {
    cfa2:	9909      	ldr	r1, [sp, #36]	; 0x24
    cfa4:	2968      	cmp	r1, #104	; 0x68
    cfa6:	f000 812c 	beq.w	d202 <z_prf+0x36a>
			zero.predot = zero.postdot = zero.trail = 0;
    cfaa:	2300      	movs	r3, #0
    cfac:	9310      	str	r3, [sp, #64]	; 0x40
    cfae:	930f      	str	r3, [sp, #60]	; 0x3c
    cfb0:	930e      	str	r3, [sp, #56]	; 0x38
			switch (c) {
    cfb2:	970b      	str	r7, [sp, #44]	; 0x2c
    cfb4:	2f78      	cmp	r7, #120	; 0x78
    cfb6:	f200 825b 	bhi.w	d470 <z_prf+0x5d8>
    cfba:	a301      	add	r3, pc, #4	; (adr r3, cfc0 <z_prf+0x128>)
    cfbc:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
    cfc0:	0000cec7 	.word	0x0000cec7
    cfc4:	0000d471 	.word	0x0000d471
    cfc8:	0000d471 	.word	0x0000d471
    cfcc:	0000d471 	.word	0x0000d471
    cfd0:	0000d471 	.word	0x0000d471
    cfd4:	0000d471 	.word	0x0000d471
    cfd8:	0000d471 	.word	0x0000d471
    cfdc:	0000d471 	.word	0x0000d471
    cfe0:	0000d471 	.word	0x0000d471
    cfe4:	0000d471 	.word	0x0000d471
    cfe8:	0000d471 	.word	0x0000d471
    cfec:	0000d471 	.word	0x0000d471
    cff0:	0000d471 	.word	0x0000d471
    cff4:	0000d471 	.word	0x0000d471
    cff8:	0000d471 	.word	0x0000d471
    cffc:	0000d471 	.word	0x0000d471
    d000:	0000d471 	.word	0x0000d471
    d004:	0000d471 	.word	0x0000d471
    d008:	0000d471 	.word	0x0000d471
    d00c:	0000d471 	.word	0x0000d471
    d010:	0000d471 	.word	0x0000d471
    d014:	0000d471 	.word	0x0000d471
    d018:	0000d471 	.word	0x0000d471
    d01c:	0000d471 	.word	0x0000d471
    d020:	0000d471 	.word	0x0000d471
    d024:	0000d471 	.word	0x0000d471
    d028:	0000d471 	.word	0x0000d471
    d02c:	0000d471 	.word	0x0000d471
    d030:	0000d471 	.word	0x0000d471
    d034:	0000d471 	.word	0x0000d471
    d038:	0000d471 	.word	0x0000d471
    d03c:	0000d471 	.word	0x0000d471
    d040:	0000d471 	.word	0x0000d471
    d044:	0000d471 	.word	0x0000d471
    d048:	0000d471 	.word	0x0000d471
    d04c:	0000d471 	.word	0x0000d471
    d050:	0000d471 	.word	0x0000d471
    d054:	0000d45f 	.word	0x0000d45f
    d058:	0000d471 	.word	0x0000d471
    d05c:	0000d471 	.word	0x0000d471
    d060:	0000d471 	.word	0x0000d471
    d064:	0000d471 	.word	0x0000d471
    d068:	0000d471 	.word	0x0000d471
    d06c:	0000d471 	.word	0x0000d471
    d070:	0000d471 	.word	0x0000d471
    d074:	0000d471 	.word	0x0000d471
    d078:	0000d471 	.word	0x0000d471
    d07c:	0000d471 	.word	0x0000d471
    d080:	0000d471 	.word	0x0000d471
    d084:	0000d471 	.word	0x0000d471
    d088:	0000d471 	.word	0x0000d471
    d08c:	0000d471 	.word	0x0000d471
    d090:	0000d471 	.word	0x0000d471
    d094:	0000d471 	.word	0x0000d471
    d098:	0000d471 	.word	0x0000d471
    d09c:	0000d471 	.word	0x0000d471
    d0a0:	0000d471 	.word	0x0000d471
    d0a4:	0000d471 	.word	0x0000d471
    d0a8:	0000d471 	.word	0x0000d471
    d0ac:	0000d471 	.word	0x0000d471
    d0b0:	0000d471 	.word	0x0000d471
    d0b4:	0000d471 	.word	0x0000d471
    d0b8:	0000d471 	.word	0x0000d471
    d0bc:	0000d471 	.word	0x0000d471
    d0c0:	0000d471 	.word	0x0000d471
    d0c4:	0000d471 	.word	0x0000d471
    d0c8:	0000d471 	.word	0x0000d471
    d0cc:	0000d471 	.word	0x0000d471
    d0d0:	0000d471 	.word	0x0000d471
    d0d4:	0000d2e1 	.word	0x0000d2e1
    d0d8:	0000d2e1 	.word	0x0000d2e1
    d0dc:	0000d2e1 	.word	0x0000d2e1
    d0e0:	0000d471 	.word	0x0000d471
    d0e4:	0000d471 	.word	0x0000d471
    d0e8:	0000d471 	.word	0x0000d471
    d0ec:	0000d471 	.word	0x0000d471
    d0f0:	0000d471 	.word	0x0000d471
    d0f4:	0000d471 	.word	0x0000d471
    d0f8:	0000d471 	.word	0x0000d471
    d0fc:	0000d471 	.word	0x0000d471
    d100:	0000d471 	.word	0x0000d471
    d104:	0000d471 	.word	0x0000d471
    d108:	0000d471 	.word	0x0000d471
    d10c:	0000d471 	.word	0x0000d471
    d110:	0000d471 	.word	0x0000d471
    d114:	0000d471 	.word	0x0000d471
    d118:	0000d471 	.word	0x0000d471
    d11c:	0000d471 	.word	0x0000d471
    d120:	0000d3f5 	.word	0x0000d3f5
    d124:	0000d471 	.word	0x0000d471
    d128:	0000d471 	.word	0x0000d471
    d12c:	0000d471 	.word	0x0000d471
    d130:	0000d471 	.word	0x0000d471
    d134:	0000d471 	.word	0x0000d471
    d138:	0000d471 	.word	0x0000d471
    d13c:	0000d471 	.word	0x0000d471
    d140:	0000d471 	.word	0x0000d471
    d144:	0000d471 	.word	0x0000d471
    d148:	0000d471 	.word	0x0000d471
    d14c:	0000d225 	.word	0x0000d225
    d150:	0000d28f 	.word	0x0000d28f
    d154:	0000d2e1 	.word	0x0000d2e1
    d158:	0000d2e1 	.word	0x0000d2e1
    d15c:	0000d2e1 	.word	0x0000d2e1
    d160:	0000d471 	.word	0x0000d471
    d164:	0000d28f 	.word	0x0000d28f
    d168:	0000d471 	.word	0x0000d471
    d16c:	0000d471 	.word	0x0000d471
    d170:	0000d471 	.word	0x0000d471
    d174:	0000d471 	.word	0x0000d471
    d178:	0000d359 	.word	0x0000d359
    d17c:	0000d3f5 	.word	0x0000d3f5
    d180:	0000d3ab 	.word	0x0000d3ab
    d184:	0000d471 	.word	0x0000d471
    d188:	0000d471 	.word	0x0000d471
    d18c:	0000d3c7 	.word	0x0000d3c7
    d190:	0000d471 	.word	0x0000d471
    d194:	0000d3f5 	.word	0x0000d3f5
    d198:	0000d471 	.word	0x0000d471
    d19c:	0000d471 	.word	0x0000d471
    d1a0:	0000d3f5 	.word	0x0000d3f5
				width = va_arg(vargs, int);
    d1a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d1a6:	1d1a      	adds	r2, r3, #4
    d1a8:	920c      	str	r2, [sp, #48]	; 0x30
    d1aa:	681b      	ldr	r3, [r3, #0]
    d1ac:	930a      	str	r3, [sp, #40]	; 0x28
				if (width < 0) {
    d1ae:	2b00      	cmp	r3, #0
    d1b0:	db04      	blt.n	d1bc <z_prf+0x324>
				c = *format++;
    d1b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d1b4:	1c5a      	adds	r2, r3, #1
    d1b6:	920d      	str	r2, [sp, #52]	; 0x34
    d1b8:	781f      	ldrb	r7, [r3, #0]
    d1ba:	e6e1      	b.n	cf80 <z_prf+0xe8>
					width = -width;
    d1bc:	425b      	negs	r3, r3
    d1be:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
    d1c0:	f04f 0a01 	mov.w	sl, #1
    d1c4:	e7f5      	b.n	d1b2 <z_prf+0x31a>
				width = _atoi(&format);	/* Find width */
    d1c6:	a80d      	add	r0, sp, #52	; 0x34
    d1c8:	f009 f8c5 	bl	16356 <_atoi>
    d1cc:	900a      	str	r0, [sp, #40]	; 0x28
				c = *format++;
    d1ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d1d0:	1c5a      	adds	r2, r3, #1
    d1d2:	920d      	str	r2, [sp, #52]	; 0x34
    d1d4:	781f      	ldrb	r7, [r3, #0]
    d1d6:	e6d3      	b.n	cf80 <z_prf+0xe8>
				c = *format++;
    d1d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d1da:	1c5a      	adds	r2, r3, #1
    d1dc:	920d      	str	r2, [sp, #52]	; 0x34
    d1de:	781b      	ldrb	r3, [r3, #0]
				if (c == '*') {
    d1e0:	2b2a      	cmp	r3, #42	; 0x2a
    d1e2:	d109      	bne.n	d1f8 <z_prf+0x360>
					precision = va_arg(vargs, int);
    d1e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d1e6:	1d1a      	adds	r2, r3, #4
    d1e8:	920c      	str	r2, [sp, #48]	; 0x30
    d1ea:	f8d3 b000 	ldr.w	fp, [r3]
				c = *format++;
    d1ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d1f0:	1c5a      	adds	r2, r3, #1
    d1f2:	920d      	str	r2, [sp, #52]	; 0x34
    d1f4:	781f      	ldrb	r7, [r3, #0]
    d1f6:	e6c8      	b.n	cf8a <z_prf+0xf2>
					precision = _atoi(&format);
    d1f8:	a80d      	add	r0, sp, #52	; 0x34
    d1fa:	f009 f8ac 	bl	16356 <_atoi>
    d1fe:	4683      	mov	fp, r0
    d200:	e7f5      	b.n	d1ee <z_prf+0x356>
				} else if (i == 'h' && c == 'h') {
    d202:	2f68      	cmp	r7, #104	; 0x68
    d204:	f47f aed1 	bne.w	cfaa <z_prf+0x112>
					c = *format++;
    d208:	1c9a      	adds	r2, r3, #2
    d20a:	920d      	str	r2, [sp, #52]	; 0x34
    d20c:	785f      	ldrb	r7, [r3, #1]
					i = 'H';
    d20e:	2348      	movs	r3, #72	; 0x48
    d210:	9309      	str	r3, [sp, #36]	; 0x24
    d212:	e6ca      	b.n	cfaa <z_prf+0x112>
			i = 0;
    d214:	2300      	movs	r3, #0
    d216:	9309      	str	r3, [sp, #36]	; 0x24
    d218:	e6c7      	b.n	cfaa <z_prf+0x112>
    d21a:	bf00      	nop
    d21c:	000197f4 	.word	0x000197f4
    d220:	000197fc 	.word	0x000197fc
				buf[0] = va_arg(vargs, int);
    d224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d226:	1d1a      	adds	r2, r3, #4
    d228:	920c      	str	r2, [sp, #48]	; 0x30
    d22a:	681b      	ldr	r3, [r3, #0]
    d22c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			prefix = 0;
    d230:	f04f 0800 	mov.w	r8, #0
				clen = 1;
    d234:	2301      	movs	r3, #1
    d236:	9308      	str	r3, [sp, #32]
				precision = 0;
    d238:	46c3      	mov	fp, r8
			cptr = buf;
    d23a:	af11      	add	r7, sp, #68	; 0x44
			if (precision >= 0) {
    d23c:	f1bb 0f00 	cmp.w	fp, #0
    d240:	f2c0 813b 	blt.w	d4ba <z_prf+0x622>
				zero_head = precision - clen + prefix;
    d244:	9b08      	ldr	r3, [sp, #32]
    d246:	ebab 0903 	sub.w	r9, fp, r3
    d24a:	44c1      	add	r9, r8
			if (zero_head < 0) {
    d24c:	f1b9 0f00 	cmp.w	r9, #0
    d250:	f2c0 813e 	blt.w	d4d0 <z_prf+0x638>
			width -= clen + zero_head;
    d254:	9b08      	ldr	r3, [sp, #32]
    d256:	eb03 0b09 	add.w	fp, r3, r9
    d25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d25c:	eba3 0b0b 	sub.w	fp, r3, fp
			if (!fminus && width > 0) {
    d260:	f1ba 0f00 	cmp.w	sl, #0
    d264:	f040 8137 	bne.w	d4d6 <z_prf+0x63e>
    d268:	f1bb 0f00 	cmp.w	fp, #0
    d26c:	f340 8133 	ble.w	d4d6 <z_prf+0x63e>
				count += width;
    d270:	445c      	add	r4, fp
				while (width-- > 0) {
    d272:	465b      	mov	r3, fp
    d274:	2b00      	cmp	r3, #0
    d276:	f10b 3bff 	add.w	fp, fp, #4294967295
    d27a:	f340 812c 	ble.w	d4d6 <z_prf+0x63e>
					PUTC(' ');
    d27e:	4629      	mov	r1, r5
    d280:	2020      	movs	r0, #32
    d282:	47b0      	blx	r6
    d284:	f1b0 3fff 	cmp.w	r0, #4294967295
    d288:	d1f3      	bne.n	d272 <z_prf+0x3da>
    d28a:	4604      	mov	r4, r0
    d28c:	e61b      	b.n	cec6 <z_prf+0x2e>
				switch (i) {
    d28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d290:	2b6c      	cmp	r3, #108	; 0x6c
    d292:	d006      	beq.n	d2a2 <z_prf+0x40a>
    d294:	2b7a      	cmp	r3, #122	; 0x7a
    d296:	d01e      	beq.n	d2d6 <z_prf+0x43e>
					val = va_arg(vargs, int);
    d298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d29a:	1d1a      	adds	r2, r3, #4
    d29c:	920c      	str	r2, [sp, #48]	; 0x30
    d29e:	681f      	ldr	r7, [r3, #0]
					break;
    d2a0:	e003      	b.n	d2aa <z_prf+0x412>
					val = va_arg(vargs, long);
    d2a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d2a4:	1d1a      	adds	r2, r3, #4
    d2a6:	920c      	str	r2, [sp, #48]	; 0x30
    d2a8:	681f      	ldr	r7, [r3, #0]
				clen = _to_dec(buf, val, fplus, fspace);
    d2aa:	9b07      	ldr	r3, [sp, #28]
    d2ac:	4642      	mov	r2, r8
    d2ae:	4639      	mov	r1, r7
    d2b0:	a811      	add	r0, sp, #68	; 0x44
    d2b2:	f009 f805 	bl	162c0 <_to_dec>
    d2b6:	9008      	str	r0, [sp, #32]
				if (fplus || fspace || val < 0) {
    d2b8:	f1b8 0f00 	cmp.w	r8, #0
    d2bc:	f040 80e8 	bne.w	d490 <z_prf+0x5f8>
    d2c0:	9b07      	ldr	r3, [sp, #28]
    d2c2:	2b00      	cmp	r3, #0
    d2c4:	f040 80e8 	bne.w	d498 <z_prf+0x600>
    d2c8:	2f00      	cmp	r7, #0
    d2ca:	f2c0 80e9 	blt.w	d4a0 <z_prf+0x608>
			prefix = 0;
    d2ce:	f04f 0800 	mov.w	r8, #0
			cptr = buf;
    d2d2:	af11      	add	r7, sp, #68	; 0x44
    d2d4:	e7b2      	b.n	d23c <z_prf+0x3a4>
					val = va_arg(vargs, ssize_t);
    d2d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d2d8:	1d1a      	adds	r2, r3, #4
    d2da:	920c      	str	r2, [sp, #48]	; 0x30
    d2dc:	681f      	ldr	r7, [r3, #0]
					break;
    d2de:	e7e4      	b.n	d2aa <z_prf+0x412>
				u.d = va_arg(vargs, double);
    d2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d2e2:	3307      	adds	r3, #7
    d2e4:	f023 0307 	bic.w	r3, r3, #7
    d2e8:	f103 0208 	add.w	r2, r3, #8
    d2ec:	920c      	str	r2, [sp, #48]	; 0x30
    d2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
				clen = _to_float(buf, double_val, c, falt,
    d2f2:	a90e      	add	r1, sp, #56	; 0x38
    d2f4:	9105      	str	r1, [sp, #20]
    d2f6:	f8cd b010 	str.w	fp, [sp, #16]
    d2fa:	9907      	ldr	r1, [sp, #28]
    d2fc:	9103      	str	r1, [sp, #12]
    d2fe:	f8cd 8008 	str.w	r8, [sp, #8]
    d302:	9808      	ldr	r0, [sp, #32]
    d304:	9001      	str	r0, [sp, #4]
    d306:	9700      	str	r7, [sp, #0]
    d308:	a811      	add	r0, sp, #68	; 0x44
    d30a:	f7ff fbe1 	bl	cad0 <_to_float>
				if (fplus || fspace || (buf[0] == '-')) {
    d30e:	f1b8 0f00 	cmp.w	r8, #0
    d312:	d108      	bne.n	d326 <z_prf+0x48e>
    d314:	9907      	ldr	r1, [sp, #28]
    d316:	b9e1      	cbnz	r1, d352 <z_prf+0x4ba>
    d318:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    d31c:	2b2d      	cmp	r3, #45	; 0x2d
    d31e:	d104      	bne.n	d32a <z_prf+0x492>
					prefix = 1;
    d320:	f04f 0801 	mov.w	r8, #1
    d324:	e001      	b.n	d32a <z_prf+0x492>
    d326:	f04f 0801 	mov.w	r8, #1
				clen += zero.predot + zero.postdot + zero.trail;
    d32a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d32c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d32e:	4413      	add	r3, r2
    d330:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d332:	4413      	add	r3, r2
    d334:	4403      	add	r3, r0
    d336:	9308      	str	r3, [sp, #32]
				if (!isdigit((int)buf[prefix])) {
    d338:	ab18      	add	r3, sp, #96	; 0x60
    d33a:	4443      	add	r3, r8
    d33c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    d340:	3b30      	subs	r3, #48	; 0x30
    d342:	2b09      	cmp	r3, #9
    d344:	d901      	bls.n	d34a <z_prf+0x4b2>
					fzero = false;
    d346:	f04f 0900 	mov.w	r9, #0
				precision = -1;
    d34a:	f04f 3bff 	mov.w	fp, #4294967295
			cptr = buf;
    d34e:	af11      	add	r7, sp, #68	; 0x44
    d350:	e774      	b.n	d23c <z_prf+0x3a4>
					prefix = 1;
    d352:	f04f 0801 	mov.w	r8, #1
    d356:	e7e8      	b.n	d32a <z_prf+0x492>
				switch (i) {
    d358:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d35a:	2b6c      	cmp	r3, #108	; 0x6c
    d35c:	d019      	beq.n	d392 <z_prf+0x4fa>
    d35e:	dc09      	bgt.n	d374 <z_prf+0x4dc>
    d360:	2b48      	cmp	r3, #72	; 0x48
    d362:	d010      	beq.n	d386 <z_prf+0x4ee>
    d364:	2b68      	cmp	r3, #104	; 0x68
    d366:	d11a      	bne.n	d39e <z_prf+0x506>
					*va_arg(vargs, short *) = count;
    d368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d36a:	1d1a      	adds	r2, r3, #4
    d36c:	920c      	str	r2, [sp, #48]	; 0x30
    d36e:	681b      	ldr	r3, [r3, #0]
    d370:	801c      	strh	r4, [r3, #0]
					break;
    d372:	e59b      	b.n	ceac <z_prf+0x14>
    d374:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d376:	2b7a      	cmp	r3, #122	; 0x7a
    d378:	d111      	bne.n	d39e <z_prf+0x506>
					*va_arg(vargs, ssize_t *) = count;
    d37a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d37c:	1d1a      	adds	r2, r3, #4
    d37e:	920c      	str	r2, [sp, #48]	; 0x30
    d380:	681b      	ldr	r3, [r3, #0]
    d382:	601c      	str	r4, [r3, #0]
					break;
    d384:	e592      	b.n	ceac <z_prf+0x14>
					*va_arg(vargs, char *) = count;
    d386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d388:	1d1a      	adds	r2, r3, #4
    d38a:	920c      	str	r2, [sp, #48]	; 0x30
    d38c:	681b      	ldr	r3, [r3, #0]
    d38e:	701c      	strb	r4, [r3, #0]
					break;
    d390:	e58c      	b.n	ceac <z_prf+0x14>
					*va_arg(vargs, long *) = count;
    d392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d394:	1d1a      	adds	r2, r3, #4
    d396:	920c      	str	r2, [sp, #48]	; 0x30
    d398:	681b      	ldr	r3, [r3, #0]
    d39a:	601c      	str	r4, [r3, #0]
					break;
    d39c:	e586      	b.n	ceac <z_prf+0x14>
					*va_arg(vargs, int *) = count;
    d39e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d3a0:	1d1a      	adds	r2, r3, #4
    d3a2:	920c      	str	r2, [sp, #48]	; 0x30
    d3a4:	681b      	ldr	r3, [r3, #0]
    d3a6:	601c      	str	r4, [r3, #0]
				continue;
    d3a8:	e580      	b.n	ceac <z_prf+0x14>
				val = (uintptr_t) va_arg(vargs, void *);
    d3aa:	990c      	ldr	r1, [sp, #48]	; 0x30
    d3ac:	1d0b      	adds	r3, r1, #4
    d3ae:	930c      	str	r3, [sp, #48]	; 0x30
				clen = _to_hex(buf, val, true, 'x');
    d3b0:	2378      	movs	r3, #120	; 0x78
    d3b2:	2201      	movs	r2, #1
    d3b4:	6809      	ldr	r1, [r1, #0]
    d3b6:	a811      	add	r0, sp, #68	; 0x44
    d3b8:	f008 ff52 	bl	16260 <_to_hex>
    d3bc:	9008      	str	r0, [sp, #32]
				prefix = 2;
    d3be:	f04f 0802 	mov.w	r8, #2
			cptr = buf;
    d3c2:	af11      	add	r7, sp, #68	; 0x44
				break;
    d3c4:	e73a      	b.n	d23c <z_prf+0x3a4>
				cptr = va_arg(vargs, char *);
    d3c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d3c8:	1d1a      	adds	r2, r3, #4
    d3ca:	920c      	str	r2, [sp, #48]	; 0x30
    d3cc:	681f      	ldr	r7, [r3, #0]
				if (precision < 0) {
    d3ce:	f1bb 0f00 	cmp.w	fp, #0
    d3d2:	db07      	blt.n	d3e4 <z_prf+0x54c>
				for (clen = 0; clen < precision; clen++) {
    d3d4:	2300      	movs	r3, #0
    d3d6:	459b      	cmp	fp, r3
    d3d8:	dd07      	ble.n	d3ea <z_prf+0x552>
					if (cptr[clen] == '\0') {
    d3da:	5cfa      	ldrb	r2, [r7, r3]
    d3dc:	2a00      	cmp	r2, #0
    d3de:	d063      	beq.n	d4a8 <z_prf+0x610>
				for (clen = 0; clen < precision; clen++) {
    d3e0:	3301      	adds	r3, #1
    d3e2:	e7f8      	b.n	d3d6 <z_prf+0x53e>
					precision = INT_MAX;
    d3e4:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    d3e8:	e7f4      	b.n	d3d4 <z_prf+0x53c>
    d3ea:	9308      	str	r3, [sp, #32]
			prefix = 0;
    d3ec:	f04f 0800 	mov.w	r8, #0
				precision = 0;
    d3f0:	46c3      	mov	fp, r8
    d3f2:	e723      	b.n	d23c <z_prf+0x3a4>
				switch (i) {
    d3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d3f6:	2b6c      	cmp	r3, #108	; 0x6c
    d3f8:	d006      	beq.n	d408 <z_prf+0x570>
    d3fa:	2b7a      	cmp	r3, #122	; 0x7a
    d3fc:	d019      	beq.n	d432 <z_prf+0x59a>
					val = va_arg(vargs, unsigned int);
    d3fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d400:	1d1a      	adds	r2, r3, #4
    d402:	920c      	str	r2, [sp, #48]	; 0x30
    d404:	6819      	ldr	r1, [r3, #0]
					break;
    d406:	e003      	b.n	d410 <z_prf+0x578>
					val = va_arg(vargs, unsigned long);
    d408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d40a:	1d1a      	adds	r2, r3, #4
    d40c:	920c      	str	r2, [sp, #48]	; 0x30
    d40e:	6819      	ldr	r1, [r3, #0]
				if (c == 'o') {
    d410:	2f6f      	cmp	r7, #111	; 0x6f
    d412:	d013      	beq.n	d43c <z_prf+0x5a4>
				} else if (c == 'u') {
    d414:	2f75      	cmp	r7, #117	; 0x75
    d416:	d01a      	beq.n	d44e <z_prf+0x5b6>
					clen = _to_hex(buf, val, falt, c);
    d418:	463b      	mov	r3, r7
    d41a:	9f08      	ldr	r7, [sp, #32]
    d41c:	463a      	mov	r2, r7
    d41e:	a811      	add	r0, sp, #68	; 0x44
    d420:	f008 ff1e 	bl	16260 <_to_hex>
    d424:	9008      	str	r0, [sp, #32]
					if (falt) {
    d426:	2f00      	cmp	r7, #0
    d428:	d143      	bne.n	d4b2 <z_prf+0x61a>
			prefix = 0;
    d42a:	f04f 0800 	mov.w	r8, #0
			cptr = buf;
    d42e:	af11      	add	r7, sp, #68	; 0x44
    d430:	e704      	b.n	d23c <z_prf+0x3a4>
					val = va_arg(vargs, size_t);
    d432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d434:	1d1a      	adds	r2, r3, #4
    d436:	920c      	str	r2, [sp, #48]	; 0x30
    d438:	6819      	ldr	r1, [r3, #0]
					break;
    d43a:	e7e9      	b.n	d410 <z_prf+0x578>
					clen = _to_octal(buf, val, falt);
    d43c:	9a08      	ldr	r2, [sp, #32]
    d43e:	a811      	add	r0, sp, #68	; 0x44
    d440:	f008 ff28 	bl	16294 <_to_octal>
    d444:	9008      	str	r0, [sp, #32]
			prefix = 0;
    d446:	f04f 0800 	mov.w	r8, #0
			cptr = buf;
    d44a:	af11      	add	r7, sp, #68	; 0x44
    d44c:	e6f6      	b.n	d23c <z_prf+0x3a4>
					clen = _to_udec(buf, val);
    d44e:	a811      	add	r0, sp, #68	; 0x44
    d450:	f008 ff31 	bl	162b6 <_to_udec>
    d454:	9008      	str	r0, [sp, #32]
			prefix = 0;
    d456:	f04f 0800 	mov.w	r8, #0
			cptr = buf;
    d45a:	af11      	add	r7, sp, #68	; 0x44
    d45c:	e6ee      	b.n	d23c <z_prf+0x3a4>
				PUTC('%');
    d45e:	4629      	mov	r1, r5
    d460:	2025      	movs	r0, #37	; 0x25
    d462:	47b0      	blx	r6
    d464:	f1b0 3fff 	cmp.w	r0, #4294967295
    d468:	f000 80e1 	beq.w	d62e <z_prf+0x796>
				count++;
    d46c:	3401      	adds	r4, #1
				continue;
    d46e:	e51d      	b.n	ceac <z_prf+0x14>
				PUTC('%');
    d470:	4629      	mov	r1, r5
    d472:	2025      	movs	r0, #37	; 0x25
    d474:	47b0      	blx	r6
    d476:	f1b0 3fff 	cmp.w	r0, #4294967295
    d47a:	f000 80da 	beq.w	d632 <z_prf+0x79a>
				PUTC(c);
    d47e:	4629      	mov	r1, r5
    d480:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d482:	47b0      	blx	r6
    d484:	f1b0 3fff 	cmp.w	r0, #4294967295
    d488:	f000 80d5 	beq.w	d636 <z_prf+0x79e>
				count += 2;
    d48c:	3402      	adds	r4, #2
				continue;
    d48e:	e50d      	b.n	ceac <z_prf+0x14>
					prefix = 1;
    d490:	f04f 0801 	mov.w	r8, #1
			cptr = buf;
    d494:	af11      	add	r7, sp, #68	; 0x44
    d496:	e6d1      	b.n	d23c <z_prf+0x3a4>
					prefix = 1;
    d498:	f04f 0801 	mov.w	r8, #1
			cptr = buf;
    d49c:	af11      	add	r7, sp, #68	; 0x44
    d49e:	e6cd      	b.n	d23c <z_prf+0x3a4>
					prefix = 1;
    d4a0:	f04f 0801 	mov.w	r8, #1
			cptr = buf;
    d4a4:	af11      	add	r7, sp, #68	; 0x44
    d4a6:	e6c9      	b.n	d23c <z_prf+0x3a4>
    d4a8:	9308      	str	r3, [sp, #32]
			prefix = 0;
    d4aa:	f04f 0800 	mov.w	r8, #0
				precision = 0;
    d4ae:	46c3      	mov	fp, r8
    d4b0:	e6c4      	b.n	d23c <z_prf+0x3a4>
						prefix = 2;
    d4b2:	f04f 0802 	mov.w	r8, #2
			cptr = buf;
    d4b6:	af11      	add	r7, sp, #68	; 0x44
    d4b8:	e6c0      	b.n	d23c <z_prf+0x3a4>
			} else if (fzero) {
    d4ba:	f1b9 0f00 	cmp.w	r9, #0
    d4be:	d004      	beq.n	d4ca <z_prf+0x632>
				zero_head = width - clen;
    d4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d4c2:	9a08      	ldr	r2, [sp, #32]
    d4c4:	eba3 0902 	sub.w	r9, r3, r2
    d4c8:	e6c0      	b.n	d24c <z_prf+0x3b4>
				zero_head = 0;
    d4ca:	f04f 0900 	mov.w	r9, #0
    d4ce:	e6c1      	b.n	d254 <z_prf+0x3bc>
				zero_head = 0;
    d4d0:	f04f 0900 	mov.w	r9, #0
    d4d4:	e6be      	b.n	d254 <z_prf+0x3bc>
			clen -= prefix;
    d4d6:	9b08      	ldr	r3, [sp, #32]
    d4d8:	eba3 0a08 	sub.w	sl, r3, r8
			count += prefix;
    d4dc:	eb04 0308 	add.w	r3, r4, r8
    d4e0:	461c      	mov	r4, r3
			while (prefix-- > 0) {
    d4e2:	4643      	mov	r3, r8
    d4e4:	2b00      	cmp	r3, #0
    d4e6:	f108 38ff 	add.w	r8, r8, #4294967295
    d4ea:	dd08      	ble.n	d4fe <z_prf+0x666>
				PUTC(*cptr++);
    d4ec:	4629      	mov	r1, r5
    d4ee:	f817 0b01 	ldrb.w	r0, [r7], #1
    d4f2:	47b0      	blx	r6
    d4f4:	f1b0 3fff 	cmp.w	r0, #4294967295
    d4f8:	d1f3      	bne.n	d4e2 <z_prf+0x64a>
    d4fa:	4604      	mov	r4, r0
    d4fc:	e4e3      	b.n	cec6 <z_prf+0x2e>
			count += zero_head;
    d4fe:	4623      	mov	r3, r4
    d500:	444b      	add	r3, r9
    d502:	4698      	mov	r8, r3
			while (zero_head-- > 0) {
    d504:	464b      	mov	r3, r9
    d506:	2b00      	cmp	r3, #0
    d508:	f109 39ff 	add.w	r9, r9, #4294967295
    d50c:	dd07      	ble.n	d51e <z_prf+0x686>
				PUTC('0');
    d50e:	4629      	mov	r1, r5
    d510:	2030      	movs	r0, #48	; 0x30
    d512:	47b0      	blx	r6
    d514:	f1b0 3fff 	cmp.w	r0, #4294967295
    d518:	d1f4      	bne.n	d504 <z_prf+0x66c>
    d51a:	4604      	mov	r4, r0
    d51c:	e4d3      	b.n	cec6 <z_prf+0x2e>
			count += clen;
    d51e:	44d0      	add	r8, sl
			if (zero.predot) {
    d520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d522:	b933      	cbnz	r3, d532 <z_prf+0x69a>
			if (zero.postdot) {
    d524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d526:	bb1b      	cbnz	r3, d570 <z_prf+0x6d8>
			if (zero.trail) {
    d528:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d52a:	2b00      	cmp	r3, #0
    d52c:	d05c      	beq.n	d5e8 <z_prf+0x750>
				c = *cptr;
    d52e:	783b      	ldrb	r3, [r7, #0]
				while (isdigit((int)c) || c == '.') {
    d530:	e043      	b.n	d5ba <z_prf+0x722>
				c = *cptr;
    d532:	7838      	ldrb	r0, [r7, #0]
    d534:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
				while (isdigit((int)c)) {
    d538:	2b09      	cmp	r3, #9
    d53a:	d809      	bhi.n	d550 <z_prf+0x6b8>
					PUTC(c);
    d53c:	4629      	mov	r1, r5
    d53e:	47b0      	blx	r6
    d540:	f1b0 3fff 	cmp.w	r0, #4294967295
    d544:	d079      	beq.n	d63a <z_prf+0x7a2>
					clen--;
    d546:	f10a 3aff 	add.w	sl, sl, #4294967295
					c = *++cptr;
    d54a:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    d54e:	e7f1      	b.n	d534 <z_prf+0x69c>
				clen -= zero.predot;
    d550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d552:	ebaa 0a03 	sub.w	sl, sl, r3
				while (zero.predot-- > 0) {
    d556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d558:	1e5a      	subs	r2, r3, #1
    d55a:	920e      	str	r2, [sp, #56]	; 0x38
    d55c:	2b00      	cmp	r3, #0
    d55e:	dde1      	ble.n	d524 <z_prf+0x68c>
					PUTC('0');
    d560:	4629      	mov	r1, r5
    d562:	2030      	movs	r0, #48	; 0x30
    d564:	47b0      	blx	r6
    d566:	f1b0 3fff 	cmp.w	r0, #4294967295
    d56a:	d1f4      	bne.n	d556 <z_prf+0x6be>
    d56c:	4604      	mov	r4, r0
    d56e:	e4aa      	b.n	cec6 <z_prf+0x2e>
					c = *cptr++;
    d570:	783c      	ldrb	r4, [r7, #0]
    d572:	3701      	adds	r7, #1
					PUTC(c);
    d574:	4629      	mov	r1, r5
    d576:	4620      	mov	r0, r4
    d578:	47b0      	blx	r6
    d57a:	f1b0 3fff 	cmp.w	r0, #4294967295
    d57e:	d05e      	beq.n	d63e <z_prf+0x7a6>
					clen--;
    d580:	f10a 3aff 	add.w	sl, sl, #4294967295
				} while (c != '.');
    d584:	2c2e      	cmp	r4, #46	; 0x2e
    d586:	d1f3      	bne.n	d570 <z_prf+0x6d8>
				clen -= zero.postdot;
    d588:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d58a:	ebaa 0a03 	sub.w	sl, sl, r3
				while (zero.postdot-- > 0) {
    d58e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d590:	1e5a      	subs	r2, r3, #1
    d592:	920f      	str	r2, [sp, #60]	; 0x3c
    d594:	2b00      	cmp	r3, #0
    d596:	ddc7      	ble.n	d528 <z_prf+0x690>
					PUTC('0');
    d598:	4629      	mov	r1, r5
    d59a:	2030      	movs	r0, #48	; 0x30
    d59c:	47b0      	blx	r6
    d59e:	f1b0 3fff 	cmp.w	r0, #4294967295
    d5a2:	d1f4      	bne.n	d58e <z_prf+0x6f6>
    d5a4:	4604      	mov	r4, r0
    d5a6:	e48e      	b.n	cec6 <z_prf+0x2e>
					PUTC(c);
    d5a8:	4629      	mov	r1, r5
    d5aa:	47b0      	blx	r6
    d5ac:	f1b0 3fff 	cmp.w	r0, #4294967295
    d5b0:	d047      	beq.n	d642 <z_prf+0x7aa>
					clen--;
    d5b2:	f10a 3aff 	add.w	sl, sl, #4294967295
					c = *++cptr;
    d5b6:	f817 3f01 	ldrb.w	r3, [r7, #1]!
				while (isdigit((int)c) || c == '.') {
    d5ba:	4618      	mov	r0, r3
    d5bc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d5c0:	2a09      	cmp	r2, #9
    d5c2:	d9f1      	bls.n	d5a8 <z_prf+0x710>
    d5c4:	2b2e      	cmp	r3, #46	; 0x2e
    d5c6:	d0ef      	beq.n	d5a8 <z_prf+0x710>
				clen -= zero.trail;
    d5c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5ca:	ebaa 0a03 	sub.w	sl, sl, r3
				while (zero.trail-- > 0) {
    d5ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5d0:	1e5a      	subs	r2, r3, #1
    d5d2:	9210      	str	r2, [sp, #64]	; 0x40
    d5d4:	2b00      	cmp	r3, #0
    d5d6:	dd07      	ble.n	d5e8 <z_prf+0x750>
					PUTC('0');
    d5d8:	4629      	mov	r1, r5
    d5da:	2030      	movs	r0, #48	; 0x30
    d5dc:	47b0      	blx	r6
    d5de:	f1b0 3fff 	cmp.w	r0, #4294967295
    d5e2:	d1f4      	bne.n	d5ce <z_prf+0x736>
    d5e4:	4604      	mov	r4, r0
    d5e6:	e46e      	b.n	cec6 <z_prf+0x2e>
			while (clen-- > 0) {
    d5e8:	4653      	mov	r3, sl
    d5ea:	2b00      	cmp	r3, #0
    d5ec:	f10a 3aff 	add.w	sl, sl, #4294967295
    d5f0:	dd08      	ble.n	d604 <z_prf+0x76c>
				PUTC(*cptr++);
    d5f2:	4629      	mov	r1, r5
    d5f4:	f817 0b01 	ldrb.w	r0, [r7], #1
    d5f8:	47b0      	blx	r6
    d5fa:	f1b0 3fff 	cmp.w	r0, #4294967295
    d5fe:	d1f3      	bne.n	d5e8 <z_prf+0x750>
    d600:	4604      	mov	r4, r0
    d602:	e460      	b.n	cec6 <z_prf+0x2e>
			if (width > 0) {
    d604:	f1bb 0f00 	cmp.w	fp, #0
    d608:	dc01      	bgt.n	d60e <z_prf+0x776>
			count += clen;
    d60a:	4644      	mov	r4, r8
    d60c:	e44e      	b.n	ceac <z_prf+0x14>
				count += width;
    d60e:	eb0b 0408 	add.w	r4, fp, r8
				while (width-- > 0) {
    d612:	465b      	mov	r3, fp
    d614:	2b00      	cmp	r3, #0
    d616:	f10b 3bff 	add.w	fp, fp, #4294967295
    d61a:	f77f ac47 	ble.w	ceac <z_prf+0x14>
					PUTC(' ');
    d61e:	4629      	mov	r1, r5
    d620:	2020      	movs	r0, #32
    d622:	47b0      	blx	r6
    d624:	f1b0 3fff 	cmp.w	r0, #4294967295
    d628:	d1f3      	bne.n	d612 <z_prf+0x77a>
    d62a:	4604      	mov	r4, r0
    d62c:	e44b      	b.n	cec6 <z_prf+0x2e>
				PUTC('%');
    d62e:	4604      	mov	r4, r0
    d630:	e449      	b.n	cec6 <z_prf+0x2e>
				PUTC('%');
    d632:	4604      	mov	r4, r0
    d634:	e447      	b.n	cec6 <z_prf+0x2e>
				PUTC(c);
    d636:	4604      	mov	r4, r0
    d638:	e445      	b.n	cec6 <z_prf+0x2e>
    d63a:	4604      	mov	r4, r0
    d63c:	e443      	b.n	cec6 <z_prf+0x2e>
    d63e:	4604      	mov	r4, r0
    d640:	e441      	b.n	cec6 <z_prf+0x2e>
    d642:	4604      	mov	r4, r0
    d644:	e43f      	b.n	cec6 <z_prf+0x2e>
    d646:	bf00      	nop

0000d648 <nordicsemi_nrf91_init>:
    d648:	f04f 0220 	mov.w	r2, #32
    d64c:	f3ef 8311 	mrs	r3, BASEPRI
    d650:	f382 8811 	msr	BASEPRI, r2
    d654:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    d658:	4a04      	ldr	r2, [pc, #16]	; (d66c <nordicsemi_nrf91_init+0x24>)
    d65a:	2101      	movs	r1, #1
    d65c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    d660:	f383 8811 	msr	BASEPRI, r3
    d664:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    d668:	2000      	movs	r0, #0
    d66a:	4770      	bx	lr
    d66c:	40039000 	.word	0x40039000

0000d670 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    d670:	b130      	cbz	r0, d680 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    d672:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    d674:	0180      	lsls	r0, r0, #6
    d676:	4b03      	ldr	r3, [pc, #12]	; (d684 <arch_busy_wait+0x14>)
    d678:	f043 0301 	orr.w	r3, r3, #1
    d67c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    d67e:	bd08      	pop	{r3, pc}
    d680:	4770      	bx	lr
    d682:	bf00      	nop
    d684:	00019620 	.word	0x00019620

0000d688 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    d688:	4b05      	ldr	r3, [pc, #20]	; (d6a0 <is_rodata+0x18>)
    d68a:	4298      	cmp	r0, r3
    d68c:	d304      	bcc.n	d698 <is_rodata+0x10>
    d68e:	4b05      	ldr	r3, [pc, #20]	; (d6a4 <is_rodata+0x1c>)
    d690:	4298      	cmp	r0, r3
    d692:	d303      	bcc.n	d69c <is_rodata+0x14>
    d694:	2000      	movs	r0, #0
    d696:	4770      	bx	lr
    d698:	2000      	movs	r0, #0
    d69a:	4770      	bx	lr
    d69c:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    d69e:	4770      	bx	lr
    d6a0:	000192f4 	.word	0x000192f4
    d6a4:	0001a690 	.word	0x0001a690

0000d6a8 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    d6a8:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    d6aa:	4b06      	ldr	r3, [pc, #24]	; (d6c4 <thread_set+0x1c>)
    d6ac:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    d6ae:	b118      	cbz	r0, d6b8 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    d6b0:	4b05      	ldr	r3, [pc, #20]	; (d6c8 <thread_set+0x20>)
    d6b2:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    d6b4:	2b09      	cmp	r3, #9
    d6b6:	dc00      	bgt.n	d6ba <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    d6b8:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d6ba:	4804      	ldr	r0, [pc, #16]	; (d6cc <thread_set+0x24>)
    d6bc:	f007 fb98 	bl	14df0 <z_impl_k_sem_give>
}
    d6c0:	e7fa      	b.n	d6b8 <thread_set+0x10>
    d6c2:	bf00      	nop
    d6c4:	200104b8 	.word	0x200104b8
    d6c8:	20010488 	.word	0x20010488
    d6cc:	20010218 	.word	0x20010218

0000d6d0 <log_process_thread_timer_expiry_fn>:
	__ASSERT_NO_MSG(false);
}
#endif /* !defined(CONFIG_USERSPACE) */

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    d6d0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    d6d2:	4802      	ldr	r0, [pc, #8]	; (d6dc <log_process_thread_timer_expiry_fn+0xc>)
    d6d4:	f007 fb8c 	bl	14df0 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    d6d8:	bd08      	pop	{r3, pc}
    d6da:	bf00      	nop
    d6dc:	20010218 	.word	0x20010218

0000d6e0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    d6e0:	b530      	push	{r4, r5, lr}
    d6e2:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    d6e4:	2200      	movs	r2, #0
    d6e6:	490f      	ldr	r1, [pc, #60]	; (d724 <enable_logger+0x44>)
    d6e8:	480f      	ldr	r0, [pc, #60]	; (d728 <enable_logger+0x48>)
    d6ea:	f00b fdcd 	bl	19288 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d6ee:	4d0f      	ldr	r5, [pc, #60]	; (d72c <enable_logger+0x4c>)
    d6f0:	2200      	movs	r2, #0
    d6f2:	2300      	movs	r3, #0
    d6f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d6f8:	2400      	movs	r4, #0
    d6fa:	9404      	str	r4, [sp, #16]
    d6fc:	230e      	movs	r3, #14
    d6fe:	9303      	str	r3, [sp, #12]
    d700:	9402      	str	r4, [sp, #8]
    d702:	9401      	str	r4, [sp, #4]
    d704:	9400      	str	r4, [sp, #0]
    d706:	4b0a      	ldr	r3, [pc, #40]	; (d730 <enable_logger+0x50>)
    d708:	f44f 7240 	mov.w	r2, #768	; 0x300
    d70c:	4909      	ldr	r1, [pc, #36]	; (d734 <enable_logger+0x54>)
    d70e:	4628      	mov	r0, r5
    d710:	f00b fcef 	bl	190f2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    d714:	4908      	ldr	r1, [pc, #32]	; (d738 <enable_logger+0x58>)
    d716:	4628      	mov	r0, r5
    d718:	f00b fcda 	bl	190d0 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    d71c:	4620      	mov	r0, r4
    d71e:	b009      	add	sp, #36	; 0x24
    d720:	bd30      	pop	{r4, r5, pc}
    d722:	bf00      	nop
    d724:	0000d6d1 	.word	0x0000d6d1
    d728:	20010228 	.word	0x20010228
    d72c:	20010260 	.word	0x20010260
    d730:	0000dbf1 	.word	0x0000dbf1
    d734:	20010970 	.word	0x20010970
    d738:	00019808 	.word	0x00019808

0000d73c <log_core_init>:
{
    d73c:	b508      	push	{r3, lr}
		log_msg_pool_init();
    d73e:	f000 fc6b 	bl	e018 <log_msg_pool_init>
		log_list_init(&list);
    d742:	4808      	ldr	r0, [pc, #32]	; (d764 <log_core_init+0x28>)
    d744:	f008 fe20 	bl	16388 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    d748:	2304      	movs	r3, #4
    d74a:	2228      	movs	r2, #40	; 0x28
    d74c:	4906      	ldr	r1, [pc, #24]	; (d768 <log_core_init+0x2c>)
    d74e:	4807      	ldr	r0, [pc, #28]	; (d76c <log_core_init+0x30>)
    d750:	f00b fb1d 	bl	18d8e <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    d754:	4b06      	ldr	r3, [pc, #24]	; (d770 <log_core_init+0x34>)
    d756:	4a07      	ldr	r2, [pc, #28]	; (d774 <log_core_init+0x38>)
    d758:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    d75a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d75e:	f000 fe6f 	bl	e440 <log_output_timestamp_freq_set>
}
    d762:	bd08      	pop	{r3, pc}
    d764:	20010494 	.word	0x20010494
    d768:	20011db0 	.word	0x20011db0
    d76c:	2001049c 	.word	0x2001049c
    d770:	20010124 	.word	0x20010124
    d774:	000163bd 	.word	0x000163bd

0000d778 <dropped_notify>:
{
    d778:	b538      	push	{r3, r4, r5, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d77a:	4b10      	ldr	r3, [pc, #64]	; (d7bc <dropped_notify+0x44>)
    d77c:	2400      	movs	r4, #0
    d77e:	e8d3 5fef 	ldaex	r5, [r3]
    d782:	e8c3 4fe2 	stlex	r2, r4, [r3]
    d786:	2a00      	cmp	r2, #0
    d788:	d001      	beq.n	d78e <dropped_notify+0x16>
    d78a:	e7f8      	b.n	d77e <dropped_notify+0x6>
	for (int i = 0; i < log_backend_count_get(); i++) {
    d78c:	3401      	adds	r4, #1
    d78e:	4b0c      	ldr	r3, [pc, #48]	; (d7c0 <dropped_notify+0x48>)
    d790:	4a0c      	ldr	r2, [pc, #48]	; (d7c4 <dropped_notify+0x4c>)
    d792:	1a9b      	subs	r3, r3, r2
    d794:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    d798:	da0f      	bge.n	d7ba <dropped_notify+0x42>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    d79a:	480a      	ldr	r0, [pc, #40]	; (d7c4 <dropped_notify+0x4c>)
    d79c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    d7a0:	6843      	ldr	r3, [r0, #4]
    d7a2:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    d7a4:	2b00      	cmp	r3, #0
    d7a6:	d0f1      	beq.n	d78c <dropped_notify+0x14>
	if (backend->api->dropped != NULL) {
    d7a8:	0123      	lsls	r3, r4, #4
    d7aa:	4a06      	ldr	r2, [pc, #24]	; (d7c4 <dropped_notify+0x4c>)
    d7ac:	58d3      	ldr	r3, [r2, r3]
    d7ae:	68db      	ldr	r3, [r3, #12]
    d7b0:	2b00      	cmp	r3, #0
    d7b2:	d0eb      	beq.n	d78c <dropped_notify+0x14>
		backend->api->dropped(backend, cnt);
    d7b4:	4629      	mov	r1, r5
    d7b6:	4798      	blx	r3
    d7b8:	e7e8      	b.n	d78c <dropped_notify+0x14>
}
    d7ba:	bd38      	pop	{r3, r4, r5, pc}
    d7bc:	2001048c 	.word	0x2001048c
    d7c0:	000195cc 	.word	0x000195cc
    d7c4:	000195bc 	.word	0x000195bc

0000d7c8 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d7c8:	4b04      	ldr	r3, [pc, #16]	; (d7dc <log_dropped+0x14>)
    d7ca:	e8d3 2fef 	ldaex	r2, [r3]
    d7ce:	3201      	adds	r2, #1
    d7d0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d7d4:	2900      	cmp	r1, #0
    d7d6:	d1f8      	bne.n	d7ca <log_dropped+0x2>
}
    d7d8:	4770      	bx	lr
    d7da:	bf00      	nop
    d7dc:	2001048c 	.word	0x2001048c

0000d7e0 <log_source_name_get>:
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    d7e0:	4b05      	ldr	r3, [pc, #20]	; (d7f8 <log_source_name_get+0x18>)
    d7e2:	4a06      	ldr	r2, [pc, #24]	; (d7fc <log_source_name_get+0x1c>)
    d7e4:	1a9b      	subs	r3, r3, r2
    d7e6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    d7ea:	d202      	bcs.n	d7f2 <log_source_name_get+0x12>
 * @param source_id Source ID.
 * @return Name.
 */
static inline const char *log_name_get(uint32_t source_id)
{
	return __log_const_start[source_id].name;
    d7ec:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    d7f0:	4770      	bx	lr
    d7f2:	2000      	movs	r0, #0
}
    d7f4:	4770      	bx	lr
    d7f6:	bf00      	nop
    d7f8:	000195bc 	.word	0x000195bc
    d7fc:	00019574 	.word	0x00019574

0000d800 <log_backend_enable>:
{
    d800:	b508      	push	{r3, lr}
	id += backend - log_backend_get(0);
    d802:	4b0b      	ldr	r3, [pc, #44]	; (d830 <log_backend_enable+0x30>)
    d804:	1ac3      	subs	r3, r0, r3
    d806:	111b      	asrs	r3, r3, #4
    d808:	3301      	adds	r3, #1
	backend->cb->id = id;
    d80a:	6842      	ldr	r2, [r0, #4]
    d80c:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    d80e:	6843      	ldr	r3, [r0, #4]
    d810:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    d812:	6843      	ldr	r3, [r0, #4]
    d814:	2201      	movs	r2, #1
    d816:	715a      	strb	r2, [r3, #5]
	if (!backend_attached) {
    d818:	4b06      	ldr	r3, [pc, #24]	; (d834 <log_backend_enable+0x34>)
    d81a:	781b      	ldrb	r3, [r3, #0]
    d81c:	b11b      	cbz	r3, d826 <log_backend_enable+0x26>
	backend_attached = true;
    d81e:	4b05      	ldr	r3, [pc, #20]	; (d834 <log_backend_enable+0x34>)
    d820:	2201      	movs	r2, #1
    d822:	701a      	strb	r2, [r3, #0]
}
    d824:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    d826:	4804      	ldr	r0, [pc, #16]	; (d838 <log_backend_enable+0x38>)
    d828:	f007 fae2 	bl	14df0 <z_impl_k_sem_give>
}
    d82c:	e7f7      	b.n	d81e <log_backend_enable+0x1e>
    d82e:	bf00      	nop
    d830:	000195bc 	.word	0x000195bc
    d834:	20010964 	.word	0x20010964
    d838:	20010218 	.word	0x20010218

0000d83c <log_init>:
{
    d83c:	b538      	push	{r3, r4, r5, lr}
    d83e:	4b13      	ldr	r3, [pc, #76]	; (d88c <log_init+0x50>)
    d840:	e8d3 2fef 	ldaex	r2, [r3]
    d844:	1c51      	adds	r1, r2, #1
    d846:	e8c3 1fe0 	stlex	r0, r1, [r3]
    d84a:	2800      	cmp	r0, #0
    d84c:	d1f8      	bne.n	d840 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    d84e:	b9da      	cbnz	r2, d888 <log_init+0x4c>
	for (i = 0; i < log_backend_count_get(); i++) {
    d850:	2400      	movs	r4, #0
    d852:	e005      	b.n	d860 <log_init+0x24>
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    d854:	2204      	movs	r2, #4
    d856:	2100      	movs	r1, #0
    d858:	4628      	mov	r0, r5
    d85a:	f7ff ffd1 	bl	d800 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    d85e:	3401      	adds	r4, #1
    d860:	4b0b      	ldr	r3, [pc, #44]	; (d890 <log_init+0x54>)
    d862:	4a0c      	ldr	r2, [pc, #48]	; (d894 <log_init+0x58>)
    d864:	1a9b      	subs	r3, r3, r2
    d866:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    d86a:	da0d      	bge.n	d888 <log_init+0x4c>
	return &__log_backends_start[idx];
    d86c:	4d09      	ldr	r5, [pc, #36]	; (d894 <log_init+0x58>)
    d86e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    d872:	7b2b      	ldrb	r3, [r5, #12]
    d874:	2b00      	cmp	r3, #0
    d876:	d0f2      	beq.n	d85e <log_init+0x22>
			if (backend->api->init != NULL) {
    d878:	0123      	lsls	r3, r4, #4
    d87a:	4a06      	ldr	r2, [pc, #24]	; (d894 <log_init+0x58>)
    d87c:	58d3      	ldr	r3, [r2, r3]
    d87e:	695b      	ldr	r3, [r3, #20]
    d880:	2b00      	cmp	r3, #0
    d882:	d0e7      	beq.n	d854 <log_init+0x18>
				backend->api->init();
    d884:	4798      	blx	r3
    d886:	e7e5      	b.n	d854 <log_init+0x18>
}
    d888:	bd38      	pop	{r3, r4, r5, pc}
    d88a:	bf00      	nop
    d88c:	20010490 	.word	0x20010490
    d890:	000195cc 	.word	0x000195cc
    d894:	000195bc 	.word	0x000195bc

0000d898 <log_strdup>:
{
    d898:	b510      	push	{r4, lr}
    d89a:	b082      	sub	sp, #8
    d89c:	4604      	mov	r4, r0
	    is_rodata(str) || _is_user_context()) {
    d89e:	f7ff fef3 	bl	d688 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    d8a2:	b9f0      	cbnz	r0, d8e2 <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    d8a4:	2200      	movs	r2, #0
    d8a6:	2300      	movs	r3, #0
    d8a8:	a901      	add	r1, sp, #4
    d8aa:	480f      	ldr	r0, [pc, #60]	; (d8e8 <log_strdup+0x50>)
    d8ac:	f006 fd8e 	bl	143cc <k_mem_slab_alloc>
	if (err != 0) {
    d8b0:	b108      	cbz	r0, d8b6 <log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    d8b2:	4c0e      	ldr	r4, [pc, #56]	; (d8ec <log_strdup+0x54>)
    d8b4:	e015      	b.n	d8e2 <log_strdup+0x4a>
	(void)atomic_set(&dup->refcount, 1);
    d8b6:	9b01      	ldr	r3, [sp, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d8b8:	2201      	movs	r2, #1
    d8ba:	e8d3 1fef 	ldaex	r1, [r3]
    d8be:	e8c3 2fe0 	stlex	r0, r2, [r3]
    d8c2:	2800      	cmp	r0, #0
    d8c4:	d1f9      	bne.n	d8ba <log_strdup+0x22>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    d8c6:	221f      	movs	r2, #31
    d8c8:	4621      	mov	r1, r4
    d8ca:	9801      	ldr	r0, [sp, #4]
    d8cc:	3004      	adds	r0, #4
    d8ce:	f009 fafd 	bl	16ecc <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    d8d2:	9c01      	ldr	r4, [sp, #4]
    d8d4:	237e      	movs	r3, #126	; 0x7e
    d8d6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    d8da:	2300      	movs	r3, #0
    d8dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return dup->buf;
    d8e0:	3404      	adds	r4, #4
}
    d8e2:	4620      	mov	r0, r4
    d8e4:	b002      	add	sp, #8
    d8e6:	bd10      	pop	{r4, pc}
    d8e8:	2001049c 	.word	0x2001049c
    d8ec:	00019810 	.word	0x00019810

0000d8f0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    d8f0:	b138      	cbz	r0, d902 <log_is_strdup+0x12>
    d8f2:	4a07      	ldr	r2, [pc, #28]	; (d910 <log_is_strdup+0x20>)
    d8f4:	4290      	cmp	r0, r2
    d8f6:	d306      	bcc.n	d906 <log_is_strdup+0x16>
    d8f8:	32a0      	adds	r2, #160	; 0xa0
    d8fa:	4290      	cmp	r0, r2
    d8fc:	d305      	bcc.n	d90a <log_is_strdup+0x1a>
    d8fe:	2000      	movs	r0, #0
    d900:	4770      	bx	lr
    d902:	2000      	movs	r0, #0
    d904:	4770      	bx	lr
    d906:	2000      	movs	r0, #0
    d908:	4770      	bx	lr
    d90a:	2001      	movs	r0, #1
}
    d90c:	4770      	bx	lr
    d90e:	bf00      	nop
    d910:	20011db0 	.word	0x20011db0

0000d914 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d914:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    d916:	f013 0f01 	tst.w	r3, #1
    d91a:	d000      	beq.n	d91e <detect_missed_strdup+0xa>
    d91c:	4770      	bx	lr
{
    d91e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d922:	b083      	sub	sp, #12
    d924:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
    d926:	f008 fe26 	bl	16576 <log_msg_str_get>
    d92a:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    d92c:	4630      	mov	r0, r6
    d92e:	f008 fe0d 	bl	1654c <log_msg_nargs_get>
    d932:	4601      	mov	r1, r0
    d934:	4638      	mov	r0, r7
    d936:	f008 fd45 	bl	163c4 <z_log_get_s_mask>
    d93a:	4605      	mov	r5, r0
	while (mask) {
    d93c:	e004      	b.n	d948 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
    d93e:	2301      	movs	r3, #1
    d940:	fa03 f404 	lsl.w	r4, r3, r4
    d944:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    d948:	b375      	cbz	r5, d9a8 <detect_missed_strdup+0x94>
		idx = 31 - __builtin_clz(mask);
    d94a:	fab5 f485 	clz	r4, r5
    d94e:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    d952:	4621      	mov	r1, r4
    d954:	4630      	mov	r0, r6
    d956:	f008 fdfc 	bl	16552 <log_msg_arg_get>
    d95a:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    d95c:	f7ff fe94 	bl	d688 <is_rodata>
    d960:	2800      	cmp	r0, #0
    d962:	d1ec      	bne.n	d93e <detect_missed_strdup+0x2a>
    d964:	4648      	mov	r0, r9
    d966:	f7ff ffc3 	bl	d8f0 <log_is_strdup>
    d96a:	2800      	cmp	r0, #0
    d96c:	d1e7      	bne.n	d93e <detect_missed_strdup+0x2a>
    d96e:	4b10      	ldr	r3, [pc, #64]	; (d9b0 <detect_missed_strdup+0x9c>)
    d970:	4599      	cmp	r9, r3
    d972:	d0e4      	beq.n	d93e <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
    d974:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    d976:	f3c1 1189 	ubfx	r1, r1, #6, #10
    d97a:	f7ff ff31 	bl	d7e0 <log_source_name_get>
    d97e:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    d980:	2301      	movs	r3, #1
    d982:	f363 0802 	bfi	r8, r3, #0, #3
    d986:	f36f 08c5 	bfc	r8, #3, #3
    d98a:	4b0a      	ldr	r3, [pc, #40]	; (d9b4 <detect_missed_strdup+0xa0>)
    d98c:	490a      	ldr	r1, [pc, #40]	; (d9b8 <detect_missed_strdup+0xa4>)
    d98e:	1a5b      	subs	r3, r3, r1
    d990:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    d994:	f363 188f 	bfi	r8, r3, #6, #10
    d998:	f8ad 8000 	strh.w	r8, [sp]
    d99c:	463b      	mov	r3, r7
    d99e:	4621      	mov	r1, r4
    d9a0:	4806      	ldr	r0, [pc, #24]	; (d9bc <detect_missed_strdup+0xa8>)
    d9a2:	f000 f877 	bl	da94 <log_3>
    d9a6:	e7ca      	b.n	d93e <detect_missed_strdup+0x2a>
}
    d9a8:	b003      	add	sp, #12
    d9aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d9ae:	bf00      	nop
    d9b0:	00019810 	.word	0x00019810
    d9b4:	0001958c 	.word	0x0001958c
    d9b8:	00019574 	.word	0x00019574
    d9bc:	0001982c 	.word	0x0001982c

0000d9c0 <msg_process>:
{
    d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9c2:	4606      	mov	r6, r0
	if (!bypass) {
    d9c4:	bb19      	cbnz	r1, da0e <msg_process+0x4e>
		    !panic_mode) {
    d9c6:	4b14      	ldr	r3, [pc, #80]	; (da18 <msg_process+0x58>)
    d9c8:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    d9ca:	b10b      	cbz	r3, d9d0 <msg_process+0x10>
{
    d9cc:	2400      	movs	r4, #0
    d9ce:	e003      	b.n	d9d8 <msg_process+0x18>
			detect_missed_strdup(msg);
    d9d0:	f7ff ffa0 	bl	d914 <detect_missed_strdup>
    d9d4:	e7fa      	b.n	d9cc <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
    d9d6:	3401      	adds	r4, #1
    d9d8:	4b10      	ldr	r3, [pc, #64]	; (da1c <msg_process+0x5c>)
    d9da:	4a11      	ldr	r2, [pc, #68]	; (da20 <msg_process+0x60>)
    d9dc:	1a9b      	subs	r3, r3, r2
    d9de:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    d9e2:	da14      	bge.n	da0e <msg_process+0x4e>
    d9e4:	4d0e      	ldr	r5, [pc, #56]	; (da20 <msg_process+0x60>)
    d9e6:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    d9ea:	686b      	ldr	r3, [r5, #4]
    d9ec:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    d9ee:	2b00      	cmp	r3, #0
    d9f0:	d0f1      	beq.n	d9d6 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
    d9f2:	4631      	mov	r1, r6
    d9f4:	4628      	mov	r0, r5
    d9f6:	f008 fcdf 	bl	163b8 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    d9fa:	2800      	cmp	r0, #0
    d9fc:	d0eb      	beq.n	d9d6 <msg_process+0x16>
	backend->api->put(backend, msg);
    d9fe:	0127      	lsls	r7, r4, #4
    da00:	4b07      	ldr	r3, [pc, #28]	; (da20 <msg_process+0x60>)
    da02:	59db      	ldr	r3, [r3, r7]
    da04:	681b      	ldr	r3, [r3, #0]
    da06:	4631      	mov	r1, r6
    da08:	4628      	mov	r0, r5
    da0a:	4798      	blx	r3
}
    da0c:	e7e3      	b.n	d9d6 <msg_process+0x16>
	log_msg_put(msg);
    da0e:	4630      	mov	r0, r6
    da10:	f008 fdb3 	bl	1657a <log_msg_put>
}
    da14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da16:	bf00      	nop
    da18:	20010965 	.word	0x20010965
    da1c:	000195cc 	.word	0x000195cc
    da20:	000195bc 	.word	0x000195bc

0000da24 <z_impl_log_process>:
{
    da24:	b538      	push	{r3, r4, r5, lr}
    da26:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    da28:	4b16      	ldr	r3, [pc, #88]	; (da84 <z_impl_log_process+0x60>)
    da2a:	781b      	ldrb	r3, [r3, #0]
    da2c:	b903      	cbnz	r3, da30 <z_impl_log_process+0xc>
    da2e:	b320      	cbz	r0, da7a <z_impl_log_process+0x56>
	__asm__ volatile(
    da30:	f04f 0320 	mov.w	r3, #32
    da34:	f3ef 8511 	mrs	r5, BASEPRI
    da38:	f383 8811 	msr	BASEPRI, r3
    da3c:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    da40:	4811      	ldr	r0, [pc, #68]	; (da88 <z_impl_log_process+0x64>)
    da42:	f008 fcb1 	bl	163a8 <log_list_head_get>
	__asm__ volatile(
    da46:	f385 8811 	msr	BASEPRI, r5
    da4a:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    da4e:	b150      	cbz	r0, da66 <z_impl_log_process+0x42>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    da50:	4b0e      	ldr	r3, [pc, #56]	; (da8c <z_impl_log_process+0x68>)
    da52:	e8d3 2fef 	ldaex	r2, [r3]
    da56:	3a01      	subs	r2, #1
    da58:	e8c3 2fe1 	stlex	r1, r2, [r3]
    da5c:	2900      	cmp	r1, #0
    da5e:	d1f8      	bne.n	da52 <z_impl_log_process+0x2e>
		msg_process(msg, bypass);
    da60:	4621      	mov	r1, r4
    da62:	f7ff ffad 	bl	d9c0 <msg_process>
	if (!bypass && dropped_cnt) {
    da66:	b914      	cbnz	r4, da6e <z_impl_log_process+0x4a>
    da68:	4b09      	ldr	r3, [pc, #36]	; (da90 <z_impl_log_process+0x6c>)
    da6a:	681b      	ldr	r3, [r3, #0]
    da6c:	b933      	cbnz	r3, da7c <z_impl_log_process+0x58>
	return (log_list_head_peek(&list) != NULL);
    da6e:	4806      	ldr	r0, [pc, #24]	; (da88 <z_impl_log_process+0x64>)
    da70:	f008 fc98 	bl	163a4 <log_list_head_peek>
    da74:	3800      	subs	r0, #0
    da76:	bf18      	it	ne
    da78:	2001      	movne	r0, #1
}
    da7a:	bd38      	pop	{r3, r4, r5, pc}
		dropped_notify();
    da7c:	f7ff fe7c 	bl	d778 <dropped_notify>
    da80:	e7f5      	b.n	da6e <z_impl_log_process+0x4a>
    da82:	bf00      	nop
    da84:	20010964 	.word	0x20010964
    da88:	20010494 	.word	0x20010494
    da8c:	20010488 	.word	0x20010488
    da90:	2001048c 	.word	0x2001048c

0000da94 <log_3>:
{
    da94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da98:	b082      	sub	sp, #8
    da9a:	4680      	mov	r8, r0
    da9c:	460f      	mov	r7, r1
    da9e:	4616      	mov	r6, r2
    daa0:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    daa2:	f000 fadd 	bl	e060 <log_msg_chunk_alloc>

	if (msg != NULL) {
    daa6:	4604      	mov	r4, r0
    daa8:	b140      	cbz	r0, dabc <log_3+0x28>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    daaa:	2301      	movs	r3, #1
    daac:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    daae:	2200      	movs	r2, #0
    dab0:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    dab2:	f04f 0300 	mov.w	r3, #0
    dab6:	f362 0300 	bfi	r3, r2, #0, #1
    daba:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    dabc:	b14c      	cbz	r4, dad2 <log_3+0x3e>
		msg->str = str;
    dabe:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    dac2:	7a63      	ldrb	r3, [r4, #9]
    dac4:	2203      	movs	r2, #3
    dac6:	f362 1307 	bfi	r3, r2, #4, #4
    daca:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    dacc:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    dace:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    dad0:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    dad2:	b364      	cbz	r4, db2e <log_3+0x9a>
	msg->hdr.ids = src_level;
    dad4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    dad8:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    dada:	4b28      	ldr	r3, [pc, #160]	; (db7c <log_3+0xe8>)
    dadc:	681b      	ldr	r3, [r3, #0]
    dade:	4798      	blx	r3
    dae0:	60e0      	str	r0, [r4, #12]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    dae2:	4b27      	ldr	r3, [pc, #156]	; (db80 <log_3+0xec>)
    dae4:	e8d3 2fef 	ldaex	r2, [r3]
    dae8:	3201      	adds	r2, #1
    daea:	e8c3 2fe1 	stlex	r1, r2, [r3]
    daee:	2900      	cmp	r1, #0
    daf0:	d1f8      	bne.n	dae4 <log_3+0x50>
	__asm__ volatile(
    daf2:	f04f 0320 	mov.w	r3, #32
    daf6:	f3ef 8511 	mrs	r5, BASEPRI
    dafa:	f383 8811 	msr	BASEPRI, r3
    dafe:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    db02:	4621      	mov	r1, r4
    db04:	481f      	ldr	r0, [pc, #124]	; (db84 <log_3+0xf0>)
    db06:	f008 fc43 	bl	16390 <log_list_add_tail>
	__asm__ volatile(
    db0a:	f385 8811 	msr	BASEPRI, r5
    db0e:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    db12:	4b1d      	ldr	r3, [pc, #116]	; (db88 <log_3+0xf4>)
    db14:	781b      	ldrb	r3, [r3, #0]
    db16:	b96b      	cbnz	r3, db34 <log_3+0xa0>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    db18:	4b1c      	ldr	r3, [pc, #112]	; (db8c <log_3+0xf8>)
    db1a:	681b      	ldr	r3, [r3, #0]
    db1c:	b11b      	cbz	r3, db26 <log_3+0x92>
    db1e:	4a18      	ldr	r2, [pc, #96]	; (db80 <log_3+0xec>)
    db20:	6812      	ldr	r2, [r2, #0]
    db22:	2a01      	cmp	r2, #1
    db24:	d016      	beq.n	db54 <log_3+0xc0>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    db26:	4a16      	ldr	r2, [pc, #88]	; (db80 <log_3+0xec>)
    db28:	6812      	ldr	r2, [r2, #0]
    db2a:	2a0a      	cmp	r2, #10
    db2c:	d01d      	beq.n	db6a <log_3+0xd6>
}
    db2e:	b002      	add	sp, #8
    db30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    db34:	f04f 0320 	mov.w	r3, #32
    db38:	f3ef 8411 	mrs	r4, BASEPRI
    db3c:	f383 8811 	msr	BASEPRI, r3
    db40:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    db44:	2000      	movs	r0, #0
    db46:	f7ff ff6d 	bl	da24 <z_impl_log_process>
	__asm__ volatile(
    db4a:	f384 8811 	msr	BASEPRI, r4
    db4e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    db52:	e7ec      	b.n	db2e <log_3+0x9a>
	z_impl_k_timer_start(timer, duration, period);
    db54:	2200      	movs	r2, #0
    db56:	2300      	movs	r3, #0
    db58:	e9cd 2300 	strd	r2, r3, [sp]
    db5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    db60:	2300      	movs	r3, #0
    db62:	480b      	ldr	r0, [pc, #44]	; (db90 <log_3+0xfc>)
    db64:	f007 fba4 	bl	152b0 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    db68:	e7e1      	b.n	db2e <log_3+0x9a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    db6a:	2b00      	cmp	r3, #0
    db6c:	d0df      	beq.n	db2e <log_3+0x9a>
	z_impl_k_timer_stop(timer);
    db6e:	4808      	ldr	r0, [pc, #32]	; (db90 <log_3+0xfc>)
    db70:	f00b fb96 	bl	192a0 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    db74:	4807      	ldr	r0, [pc, #28]	; (db94 <log_3+0x100>)
    db76:	f007 f93b 	bl	14df0 <z_impl_k_sem_give>
}
    db7a:	e7d8      	b.n	db2e <log_3+0x9a>
    db7c:	20010124 	.word	0x20010124
    db80:	20010488 	.word	0x20010488
    db84:	20010494 	.word	0x20010494
    db88:	20010965 	.word	0x20010965
    db8c:	200104b8 	.word	0x200104b8
    db90:	20010228 	.word	0x20010228
    db94:	20010218 	.word	0x20010218

0000db98 <z_impl_log_panic>:
	if (panic_mode) {
    db98:	4b12      	ldr	r3, [pc, #72]	; (dbe4 <z_impl_log_panic+0x4c>)
    db9a:	781b      	ldrb	r3, [r3, #0]
    db9c:	b103      	cbz	r3, dba0 <z_impl_log_panic+0x8>
    db9e:	4770      	bx	lr
{
    dba0:	b510      	push	{r4, lr}
	log_init();
    dba2:	f7ff fe4b 	bl	d83c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    dba6:	2400      	movs	r4, #0
    dba8:	e000      	b.n	dbac <z_impl_log_panic+0x14>
    dbaa:	3401      	adds	r4, #1
    dbac:	4b0e      	ldr	r3, [pc, #56]	; (dbe8 <z_impl_log_panic+0x50>)
    dbae:	4a0f      	ldr	r2, [pc, #60]	; (dbec <z_impl_log_panic+0x54>)
    dbb0:	1a9b      	subs	r3, r3, r2
    dbb2:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    dbb6:	da0c      	bge.n	dbd2 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    dbb8:	480c      	ldr	r0, [pc, #48]	; (dbec <z_impl_log_panic+0x54>)
    dbba:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    dbbe:	6843      	ldr	r3, [r0, #4]
    dbc0:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    dbc2:	2b00      	cmp	r3, #0
    dbc4:	d0f1      	beq.n	dbaa <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    dbc6:	0123      	lsls	r3, r4, #4
    dbc8:	4a08      	ldr	r2, [pc, #32]	; (dbec <z_impl_log_panic+0x54>)
    dbca:	58d3      	ldr	r3, [r2, r3]
    dbcc:	691b      	ldr	r3, [r3, #16]
    dbce:	4798      	blx	r3
}
    dbd0:	e7eb      	b.n	dbaa <z_impl_log_panic+0x12>
    dbd2:	2000      	movs	r0, #0
    dbd4:	f7ff ff26 	bl	da24 <z_impl_log_process>
		while (log_process(false) == true) {
    dbd8:	2800      	cmp	r0, #0
    dbda:	d1fa      	bne.n	dbd2 <z_impl_log_panic+0x3a>
	panic_mode = true;
    dbdc:	4b01      	ldr	r3, [pc, #4]	; (dbe4 <z_impl_log_panic+0x4c>)
    dbde:	2201      	movs	r2, #1
    dbe0:	701a      	strb	r2, [r3, #0]
}
    dbe2:	bd10      	pop	{r4, pc}
    dbe4:	20010965 	.word	0x20010965
    dbe8:	000195cc 	.word	0x000195cc
    dbec:	000195bc 	.word	0x000195bc

0000dbf0 <log_process_thread_func>:
{
    dbf0:	b508      	push	{r3, lr}
	log_init();
    dbf2:	f7ff fe23 	bl	d83c <log_init>
	return z_impl_k_current_get();
    dbf6:	f007 f8f5 	bl	14de4 <z_impl_k_current_get>
	thread_set(k_current_get());
    dbfa:	f7ff fd55 	bl	d6a8 <thread_set>
    dbfe:	e006      	b.n	dc0e <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    dc00:	f04f 32ff 	mov.w	r2, #4294967295
    dc04:	f04f 33ff 	mov.w	r3, #4294967295
    dc08:	4804      	ldr	r0, [pc, #16]	; (dc1c <log_process_thread_func+0x2c>)
    dc0a:	f007 f913 	bl	14e34 <z_impl_k_sem_take>
    dc0e:	2000      	movs	r0, #0
    dc10:	f7ff ff08 	bl	da24 <z_impl_log_process>
		if (log_process(false) == false) {
    dc14:	2800      	cmp	r0, #0
    dc16:	d1fa      	bne.n	dc0e <log_process_thread_func+0x1e>
    dc18:	e7f2      	b.n	dc00 <log_process_thread_func+0x10>
    dc1a:	bf00      	nop
    dc1c:	20010218 	.word	0x20010218

0000dc20 <log_1>:
{
    dc20:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc22:	b083      	sub	sp, #12
    dc24:	4606      	mov	r6, r0
    dc26:	460d      	mov	r5, r1
    dc28:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    dc2a:	f000 fa19 	bl	e060 <log_msg_chunk_alloc>
	if (msg != NULL) {
    dc2e:	4604      	mov	r4, r0
    dc30:	b140      	cbz	r0, dc44 <log_1+0x24>
		msg->hdr.ref_cnt = 1;
    dc32:	2301      	movs	r3, #1
    dc34:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    dc36:	2100      	movs	r1, #0
    dc38:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    dc3a:	f04f 0300 	mov.w	r3, #0
    dc3e:	f361 0300 	bfi	r3, r1, #0, #1
    dc42:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    dc44:	b134      	cbz	r4, dc54 <log_1+0x34>
		msg->str = str;
    dc46:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    dc48:	7a63      	ldrb	r3, [r4, #9]
    dc4a:	2201      	movs	r2, #1
    dc4c:	f362 1307 	bfi	r3, r2, #4, #4
    dc50:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    dc52:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    dc54:	b354      	cbz	r4, dcac <log_1+0x8c>
	msg->hdr.ids = src_level;
    dc56:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    dc58:	4b27      	ldr	r3, [pc, #156]	; (dcf8 <log_1+0xd8>)
    dc5a:	681b      	ldr	r3, [r3, #0]
    dc5c:	4798      	blx	r3
    dc5e:	60e0      	str	r0, [r4, #12]
    dc60:	4b26      	ldr	r3, [pc, #152]	; (dcfc <log_1+0xdc>)
    dc62:	e8d3 2fef 	ldaex	r2, [r3]
    dc66:	3201      	adds	r2, #1
    dc68:	e8c3 2fe1 	stlex	r1, r2, [r3]
    dc6c:	2900      	cmp	r1, #0
    dc6e:	d1f8      	bne.n	dc62 <log_1+0x42>
	__asm__ volatile(
    dc70:	f04f 0320 	mov.w	r3, #32
    dc74:	f3ef 8511 	mrs	r5, BASEPRI
    dc78:	f383 8811 	msr	BASEPRI, r3
    dc7c:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    dc80:	4621      	mov	r1, r4
    dc82:	481f      	ldr	r0, [pc, #124]	; (dd00 <log_1+0xe0>)
    dc84:	f008 fb84 	bl	16390 <log_list_add_tail>
	__asm__ volatile(
    dc88:	f385 8811 	msr	BASEPRI, r5
    dc8c:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    dc90:	4b1c      	ldr	r3, [pc, #112]	; (dd04 <log_1+0xe4>)
    dc92:	781b      	ldrb	r3, [r3, #0]
    dc94:	b963      	cbnz	r3, dcb0 <log_1+0x90>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    dc96:	4b1c      	ldr	r3, [pc, #112]	; (dd08 <log_1+0xe8>)
    dc98:	681b      	ldr	r3, [r3, #0]
    dc9a:	b11b      	cbz	r3, dca4 <log_1+0x84>
    dc9c:	4a17      	ldr	r2, [pc, #92]	; (dcfc <log_1+0xdc>)
    dc9e:	6812      	ldr	r2, [r2, #0]
    dca0:	2a01      	cmp	r2, #1
    dca2:	d015      	beq.n	dcd0 <log_1+0xb0>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    dca4:	4a15      	ldr	r2, [pc, #84]	; (dcfc <log_1+0xdc>)
    dca6:	6812      	ldr	r2, [r2, #0]
    dca8:	2a0a      	cmp	r2, #10
    dcaa:	d01c      	beq.n	dce6 <log_1+0xc6>
}
    dcac:	b003      	add	sp, #12
    dcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm__ volatile(
    dcb0:	f04f 0320 	mov.w	r3, #32
    dcb4:	f3ef 8411 	mrs	r4, BASEPRI
    dcb8:	f383 8811 	msr	BASEPRI, r3
    dcbc:	f3bf 8f6f 	isb	sy
    dcc0:	2000      	movs	r0, #0
    dcc2:	f7ff feaf 	bl	da24 <z_impl_log_process>
	__asm__ volatile(
    dcc6:	f384 8811 	msr	BASEPRI, r4
    dcca:	f3bf 8f6f 	isb	sy
}
    dcce:	e7ed      	b.n	dcac <log_1+0x8c>
	z_impl_k_timer_start(timer, duration, period);
    dcd0:	2200      	movs	r2, #0
    dcd2:	2300      	movs	r3, #0
    dcd4:	e9cd 2300 	strd	r2, r3, [sp]
    dcd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    dcdc:	2300      	movs	r3, #0
    dcde:	480b      	ldr	r0, [pc, #44]	; (dd0c <log_1+0xec>)
    dce0:	f007 fae6 	bl	152b0 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    dce4:	e7e2      	b.n	dcac <log_1+0x8c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    dce6:	2b00      	cmp	r3, #0
    dce8:	d0e0      	beq.n	dcac <log_1+0x8c>
	z_impl_k_timer_stop(timer);
    dcea:	4808      	ldr	r0, [pc, #32]	; (dd0c <log_1+0xec>)
    dcec:	f00b fad8 	bl	192a0 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    dcf0:	4807      	ldr	r0, [pc, #28]	; (dd10 <log_1+0xf0>)
    dcf2:	f007 f87d 	bl	14df0 <z_impl_k_sem_give>
}
    dcf6:	e7d9      	b.n	dcac <log_1+0x8c>
    dcf8:	20010124 	.word	0x20010124
    dcfc:	20010488 	.word	0x20010488
    dd00:	20010494 	.word	0x20010494
    dd04:	20010965 	.word	0x20010965
    dd08:	200104b8 	.word	0x200104b8
    dd0c:	20010228 	.word	0x20010228
    dd10:	20010218 	.word	0x20010218

0000dd14 <log_2>:
{
    dd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd18:	b082      	sub	sp, #8
    dd1a:	4607      	mov	r7, r0
    dd1c:	460e      	mov	r6, r1
    dd1e:	4615      	mov	r5, r2
    dd20:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    dd22:	f000 f99d 	bl	e060 <log_msg_chunk_alloc>
	if (msg != NULL) {
    dd26:	4604      	mov	r4, r0
    dd28:	b140      	cbz	r0, dd3c <log_2+0x28>
		msg->hdr.ref_cnt = 1;
    dd2a:	2301      	movs	r3, #1
    dd2c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    dd2e:	2200      	movs	r2, #0
    dd30:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    dd32:	f04f 0300 	mov.w	r3, #0
    dd36:	f362 0300 	bfi	r3, r2, #0, #1
    dd3a:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    dd3c:	b13c      	cbz	r4, dd4e <log_2+0x3a>
		msg->str = str;
    dd3e:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    dd40:	7a63      	ldrb	r3, [r4, #9]
    dd42:	2202      	movs	r2, #2
    dd44:	f362 1307 	bfi	r3, r2, #4, #4
    dd48:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    dd4a:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    dd4c:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    dd4e:	b35c      	cbz	r4, dda8 <log_2+0x94>
	msg->hdr.ids = src_level;
    dd50:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    dd54:	4b28      	ldr	r3, [pc, #160]	; (ddf8 <log_2+0xe4>)
    dd56:	681b      	ldr	r3, [r3, #0]
    dd58:	4798      	blx	r3
    dd5a:	60e0      	str	r0, [r4, #12]
    dd5c:	4b27      	ldr	r3, [pc, #156]	; (ddfc <log_2+0xe8>)
    dd5e:	e8d3 2fef 	ldaex	r2, [r3]
    dd62:	3201      	adds	r2, #1
    dd64:	e8c3 2fe1 	stlex	r1, r2, [r3]
    dd68:	2900      	cmp	r1, #0
    dd6a:	d1f8      	bne.n	dd5e <log_2+0x4a>
	__asm__ volatile(
    dd6c:	f04f 0320 	mov.w	r3, #32
    dd70:	f3ef 8511 	mrs	r5, BASEPRI
    dd74:	f383 8811 	msr	BASEPRI, r3
    dd78:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    dd7c:	4621      	mov	r1, r4
    dd7e:	4820      	ldr	r0, [pc, #128]	; (de00 <log_2+0xec>)
    dd80:	f008 fb06 	bl	16390 <log_list_add_tail>
	__asm__ volatile(
    dd84:	f385 8811 	msr	BASEPRI, r5
    dd88:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    dd8c:	4b1d      	ldr	r3, [pc, #116]	; (de04 <log_2+0xf0>)
    dd8e:	781b      	ldrb	r3, [r3, #0]
    dd90:	b96b      	cbnz	r3, ddae <log_2+0x9a>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    dd92:	4b1d      	ldr	r3, [pc, #116]	; (de08 <log_2+0xf4>)
    dd94:	681b      	ldr	r3, [r3, #0]
    dd96:	b11b      	cbz	r3, dda0 <log_2+0x8c>
    dd98:	4a18      	ldr	r2, [pc, #96]	; (ddfc <log_2+0xe8>)
    dd9a:	6812      	ldr	r2, [r2, #0]
    dd9c:	2a01      	cmp	r2, #1
    dd9e:	d016      	beq.n	ddce <log_2+0xba>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    dda0:	4a16      	ldr	r2, [pc, #88]	; (ddfc <log_2+0xe8>)
    dda2:	6812      	ldr	r2, [r2, #0]
    dda4:	2a0a      	cmp	r2, #10
    dda6:	d01d      	beq.n	dde4 <log_2+0xd0>
}
    dda8:	b002      	add	sp, #8
    ddaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    ddae:	f04f 0320 	mov.w	r3, #32
    ddb2:	f3ef 8411 	mrs	r4, BASEPRI
    ddb6:	f383 8811 	msr	BASEPRI, r3
    ddba:	f3bf 8f6f 	isb	sy
    ddbe:	2000      	movs	r0, #0
    ddc0:	f7ff fe30 	bl	da24 <z_impl_log_process>
	__asm__ volatile(
    ddc4:	f384 8811 	msr	BASEPRI, r4
    ddc8:	f3bf 8f6f 	isb	sy
}
    ddcc:	e7ec      	b.n	dda8 <log_2+0x94>
	z_impl_k_timer_start(timer, duration, period);
    ddce:	2200      	movs	r2, #0
    ddd0:	2300      	movs	r3, #0
    ddd2:	e9cd 2300 	strd	r2, r3, [sp]
    ddd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ddda:	2300      	movs	r3, #0
    dddc:	480b      	ldr	r0, [pc, #44]	; (de0c <log_2+0xf8>)
    ddde:	f007 fa67 	bl	152b0 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    dde2:	e7e1      	b.n	dda8 <log_2+0x94>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    dde4:	2b00      	cmp	r3, #0
    dde6:	d0df      	beq.n	dda8 <log_2+0x94>
	z_impl_k_timer_stop(timer);
    dde8:	4808      	ldr	r0, [pc, #32]	; (de0c <log_2+0xf8>)
    ddea:	f00b fa59 	bl	192a0 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    ddee:	4808      	ldr	r0, [pc, #32]	; (de10 <log_2+0xfc>)
    ddf0:	f006 fffe 	bl	14df0 <z_impl_k_sem_give>
}
    ddf4:	e7d8      	b.n	dda8 <log_2+0x94>
    ddf6:	bf00      	nop
    ddf8:	20010124 	.word	0x20010124
    ddfc:	20010488 	.word	0x20010488
    de00:	20010494 	.word	0x20010494
    de04:	20010965 	.word	0x20010965
    de08:	200104b8 	.word	0x200104b8
    de0c:	20010228 	.word	0x20010228
    de10:	20010218 	.word	0x20010218

0000de14 <log_n>:
{
    de14:	b530      	push	{r4, r5, lr}
    de16:	b083      	sub	sp, #12
    de18:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    de1a:	f008 fbee 	bl	165fa <log_msg_create_n>
		if (msg == NULL) {
    de1e:	b358      	cbz	r0, de78 <log_n+0x64>
    de20:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
    de22:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
    de24:	4b27      	ldr	r3, [pc, #156]	; (dec4 <log_n+0xb0>)
    de26:	681b      	ldr	r3, [r3, #0]
    de28:	4798      	blx	r3
    de2a:	60e8      	str	r0, [r5, #12]
    de2c:	4b26      	ldr	r3, [pc, #152]	; (dec8 <log_n+0xb4>)
    de2e:	e8d3 2fef 	ldaex	r2, [r3]
    de32:	3201      	adds	r2, #1
    de34:	e8c3 2fe1 	stlex	r1, r2, [r3]
    de38:	2900      	cmp	r1, #0
    de3a:	d1f8      	bne.n	de2e <log_n+0x1a>
	__asm__ volatile(
    de3c:	f04f 0320 	mov.w	r3, #32
    de40:	f3ef 8411 	mrs	r4, BASEPRI
    de44:	f383 8811 	msr	BASEPRI, r3
    de48:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    de4c:	4629      	mov	r1, r5
    de4e:	481f      	ldr	r0, [pc, #124]	; (decc <log_n+0xb8>)
    de50:	f008 fa9e 	bl	16390 <log_list_add_tail>
	__asm__ volatile(
    de54:	f384 8811 	msr	BASEPRI, r4
    de58:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    de5c:	4b1c      	ldr	r3, [pc, #112]	; (ded0 <log_n+0xbc>)
    de5e:	781b      	ldrb	r3, [r3, #0]
    de60:	b963      	cbnz	r3, de7c <log_n+0x68>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    de62:	4b1c      	ldr	r3, [pc, #112]	; (ded4 <log_n+0xc0>)
    de64:	681b      	ldr	r3, [r3, #0]
    de66:	b11b      	cbz	r3, de70 <log_n+0x5c>
    de68:	4a17      	ldr	r2, [pc, #92]	; (dec8 <log_n+0xb4>)
    de6a:	6812      	ldr	r2, [r2, #0]
    de6c:	2a01      	cmp	r2, #1
    de6e:	d015      	beq.n	de9c <log_n+0x88>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    de70:	4a15      	ldr	r2, [pc, #84]	; (dec8 <log_n+0xb4>)
    de72:	6812      	ldr	r2, [r2, #0]
    de74:	2a0a      	cmp	r2, #10
    de76:	d01c      	beq.n	deb2 <log_n+0x9e>
}
    de78:	b003      	add	sp, #12
    de7a:	bd30      	pop	{r4, r5, pc}
	__asm__ volatile(
    de7c:	f04f 0320 	mov.w	r3, #32
    de80:	f3ef 8411 	mrs	r4, BASEPRI
    de84:	f383 8811 	msr	BASEPRI, r3
    de88:	f3bf 8f6f 	isb	sy
    de8c:	2000      	movs	r0, #0
    de8e:	f7ff fdc9 	bl	da24 <z_impl_log_process>
	__asm__ volatile(
    de92:	f384 8811 	msr	BASEPRI, r4
    de96:	f3bf 8f6f 	isb	sy
}
    de9a:	e7ed      	b.n	de78 <log_n+0x64>
	z_impl_k_timer_start(timer, duration, period);
    de9c:	2200      	movs	r2, #0
    de9e:	2300      	movs	r3, #0
    dea0:	e9cd 2300 	strd	r2, r3, [sp]
    dea4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    dea8:	2300      	movs	r3, #0
    deaa:	480b      	ldr	r0, [pc, #44]	; (ded8 <log_n+0xc4>)
    deac:	f007 fa00 	bl	152b0 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    deb0:	e7e2      	b.n	de78 <log_n+0x64>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    deb2:	2b00      	cmp	r3, #0
    deb4:	d0e0      	beq.n	de78 <log_n+0x64>
	z_impl_k_timer_stop(timer);
    deb6:	4808      	ldr	r0, [pc, #32]	; (ded8 <log_n+0xc4>)
    deb8:	f00b f9f2 	bl	192a0 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    debc:	4807      	ldr	r0, [pc, #28]	; (dedc <log_n+0xc8>)
    debe:	f006 ff97 	bl	14df0 <z_impl_k_sem_give>
}
    dec2:	e7d9      	b.n	de78 <log_n+0x64>
    dec4:	20010124 	.word	0x20010124
    dec8:	20010488 	.word	0x20010488
    decc:	20010494 	.word	0x20010494
    ded0:	20010965 	.word	0x20010965
    ded4:	200104b8 	.word	0x200104b8
    ded8:	20010228 	.word	0x20010228
    dedc:	20010218 	.word	0x20010218

0000dee0 <log_0>:
{
    dee0:	b570      	push	{r4, r5, r6, lr}
    dee2:	b082      	sub	sp, #8
    dee4:	4605      	mov	r5, r0
    dee6:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    dee8:	f000 f8ba 	bl	e060 <log_msg_chunk_alloc>
	if (msg != NULL) {
    deec:	4604      	mov	r4, r0
    deee:	b140      	cbz	r0, df02 <log_0+0x22>
		msg->hdr.ref_cnt = 1;
    def0:	2301      	movs	r3, #1
    def2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    def4:	2200      	movs	r2, #0
    def6:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    def8:	f04f 0300 	mov.w	r3, #0
    defc:	f362 0300 	bfi	r3, r2, #0, #1
    df00:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    df02:	b104      	cbz	r4, df06 <log_0+0x26>
		msg->str = str;
    df04:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    df06:	b354      	cbz	r4, df5e <log_0+0x7e>
	msg->hdr.ids = src_level;
    df08:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    df0a:	4b28      	ldr	r3, [pc, #160]	; (dfac <log_0+0xcc>)
    df0c:	681b      	ldr	r3, [r3, #0]
    df0e:	4798      	blx	r3
    df10:	60e0      	str	r0, [r4, #12]
    df12:	4b27      	ldr	r3, [pc, #156]	; (dfb0 <log_0+0xd0>)
    df14:	e8d3 2fef 	ldaex	r2, [r3]
    df18:	3201      	adds	r2, #1
    df1a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    df1e:	2900      	cmp	r1, #0
    df20:	d1f8      	bne.n	df14 <log_0+0x34>
	__asm__ volatile(
    df22:	f04f 0320 	mov.w	r3, #32
    df26:	f3ef 8511 	mrs	r5, BASEPRI
    df2a:	f383 8811 	msr	BASEPRI, r3
    df2e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    df32:	4621      	mov	r1, r4
    df34:	481f      	ldr	r0, [pc, #124]	; (dfb4 <log_0+0xd4>)
    df36:	f008 fa2b 	bl	16390 <log_list_add_tail>
	__asm__ volatile(
    df3a:	f385 8811 	msr	BASEPRI, r5
    df3e:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    df42:	4b1d      	ldr	r3, [pc, #116]	; (dfb8 <log_0+0xd8>)
    df44:	781b      	ldrb	r3, [r3, #0]
    df46:	b963      	cbnz	r3, df62 <log_0+0x82>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    df48:	4b1c      	ldr	r3, [pc, #112]	; (dfbc <log_0+0xdc>)
    df4a:	681b      	ldr	r3, [r3, #0]
    df4c:	b11b      	cbz	r3, df56 <log_0+0x76>
    df4e:	4a18      	ldr	r2, [pc, #96]	; (dfb0 <log_0+0xd0>)
    df50:	6812      	ldr	r2, [r2, #0]
    df52:	2a01      	cmp	r2, #1
    df54:	d015      	beq.n	df82 <log_0+0xa2>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    df56:	4a16      	ldr	r2, [pc, #88]	; (dfb0 <log_0+0xd0>)
    df58:	6812      	ldr	r2, [r2, #0]
    df5a:	2a0a      	cmp	r2, #10
    df5c:	d01c      	beq.n	df98 <log_0+0xb8>
}
    df5e:	b002      	add	sp, #8
    df60:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    df62:	f04f 0320 	mov.w	r3, #32
    df66:	f3ef 8411 	mrs	r4, BASEPRI
    df6a:	f383 8811 	msr	BASEPRI, r3
    df6e:	f3bf 8f6f 	isb	sy
    df72:	2000      	movs	r0, #0
    df74:	f7ff fd56 	bl	da24 <z_impl_log_process>
	__asm__ volatile(
    df78:	f384 8811 	msr	BASEPRI, r4
    df7c:	f3bf 8f6f 	isb	sy
}
    df80:	e7ed      	b.n	df5e <log_0+0x7e>
	z_impl_k_timer_start(timer, duration, period);
    df82:	2200      	movs	r2, #0
    df84:	2300      	movs	r3, #0
    df86:	e9cd 2300 	strd	r2, r3, [sp]
    df8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    df8e:	2300      	movs	r3, #0
    df90:	480b      	ldr	r0, [pc, #44]	; (dfc0 <log_0+0xe0>)
    df92:	f007 f98d 	bl	152b0 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    df96:	e7e2      	b.n	df5e <log_0+0x7e>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    df98:	2b00      	cmp	r3, #0
    df9a:	d0e0      	beq.n	df5e <log_0+0x7e>
	z_impl_k_timer_stop(timer);
    df9c:	4808      	ldr	r0, [pc, #32]	; (dfc0 <log_0+0xe0>)
    df9e:	f00b f97f 	bl	192a0 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    dfa2:	4808      	ldr	r0, [pc, #32]	; (dfc4 <log_0+0xe4>)
    dfa4:	f006 ff24 	bl	14df0 <z_impl_k_sem_give>
}
    dfa8:	e7d9      	b.n	df5e <log_0+0x7e>
    dfaa:	bf00      	nop
    dfac:	20010124 	.word	0x20010124
    dfb0:	20010488 	.word	0x20010488
    dfb4:	20010494 	.word	0x20010494
    dfb8:	20010965 	.word	0x20010965
    dfbc:	200104b8 	.word	0x200104b8
    dfc0:	20010228 	.word	0x20010228
    dfc4:	20010218 	.word	0x20010218

0000dfc8 <log_free>:
{
    dfc8:	b500      	push	{lr}
    dfca:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    dfcc:	3804      	subs	r0, #4
    dfce:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    dfd0:	e8d0 3fef 	ldaex	r3, [r0]
    dfd4:	1e5a      	subs	r2, r3, #1
    dfd6:	e8c0 2fe1 	stlex	r1, r2, [r0]
    dfda:	2900      	cmp	r1, #0
    dfdc:	d1f8      	bne.n	dfd0 <log_free+0x8>
	if (atomic_dec(&dup->refcount) == 1) {
    dfde:	2b01      	cmp	r3, #1
    dfe0:	d002      	beq.n	dfe8 <log_free+0x20>
}
    dfe2:	b003      	add	sp, #12
    dfe4:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    dfe8:	a901      	add	r1, sp, #4
    dfea:	4802      	ldr	r0, [pc, #8]	; (dff4 <log_free+0x2c>)
    dfec:	f006 fa24 	bl	14438 <k_mem_slab_free>
}
    dff0:	e7f7      	b.n	dfe2 <log_free+0x1a>
    dff2:	bf00      	nop
    dff4:	2001049c 	.word	0x2001049c

0000dff8 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    dff8:	b510      	push	{r4, lr}
    dffa:	b082      	sub	sp, #8
    dffc:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    dffe:	9b01      	ldr	r3, [sp, #4]
    e000:	b133      	cbz	r3, e010 <cont_free+0x18>
		next = cont->next;
    e002:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    e004:	a901      	add	r1, sp, #4
    e006:	4803      	ldr	r0, [pc, #12]	; (e014 <cont_free+0x1c>)
    e008:	f006 fa16 	bl	14438 <k_mem_slab_free>
		cont = next;
    e00c:	9401      	str	r4, [sp, #4]
    e00e:	e7f6      	b.n	dffe <cont_free+0x6>
	}
}
    e010:	b002      	add	sp, #8
    e012:	bd10      	pop	{r4, pc}
    e014:	200104bc 	.word	0x200104bc

0000e018 <log_msg_pool_init>:
{
    e018:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    e01a:	2320      	movs	r3, #32
    e01c:	461a      	mov	r2, r3
    e01e:	4902      	ldr	r1, [pc, #8]	; (e028 <log_msg_pool_init+0x10>)
    e020:	4802      	ldr	r0, [pc, #8]	; (e02c <log_msg_pool_init+0x14>)
    e022:	f00a feb4 	bl	18d8e <k_mem_slab_init>
}
    e026:	bd08      	pop	{r3, pc}
    e028:	20011e50 	.word	0x20011e50
    e02c:	200104bc 	.word	0x200104bc

0000e030 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    e030:	b510      	push	{r4, lr}
    e032:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    e034:	2300      	movs	r3, #0
    e036:	9301      	str	r3, [sp, #4]
    e038:	2001      	movs	r0, #1
    e03a:	f7ff fcf3 	bl	da24 <z_impl_log_process>
    e03e:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
    e040:	f7ff fbc2 	bl	d7c8 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    e044:	2200      	movs	r2, #0
    e046:	2300      	movs	r3, #0
    e048:	a901      	add	r1, sp, #4
    e04a:	4804      	ldr	r0, [pc, #16]	; (e05c <log_msg_no_space_handle+0x2c>)
    e04c:	f006 f9be 	bl	143cc <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    e050:	b108      	cbz	r0, e056 <log_msg_no_space_handle+0x26>
    e052:	2c00      	cmp	r4, #0
    e054:	d1f0      	bne.n	e038 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    e056:	9801      	ldr	r0, [sp, #4]
    e058:	b002      	add	sp, #8
    e05a:	bd10      	pop	{r4, pc}
    e05c:	200104bc 	.word	0x200104bc

0000e060 <log_msg_chunk_alloc>:
{
    e060:	b500      	push	{lr}
    e062:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    e064:	2300      	movs	r3, #0
    e066:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    e068:	f008 f9cd 	bl	16406 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    e06c:	b150      	cbz	r0, e084 <log_msg_chunk_alloc+0x24>
    e06e:	2200      	movs	r2, #0
    e070:	2300      	movs	r3, #0
    e072:	a901      	add	r1, sp, #4
    e074:	4807      	ldr	r0, [pc, #28]	; (e094 <log_msg_chunk_alloc+0x34>)
    e076:	f006 f9a9 	bl	143cc <k_mem_slab_alloc>
	if (err != 0) {
    e07a:	b930      	cbnz	r0, e08a <log_msg_chunk_alloc+0x2a>
}
    e07c:	9801      	ldr	r0, [sp, #4]
    e07e:	b003      	add	sp, #12
    e080:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    e084:	2200      	movs	r2, #0
    e086:	2300      	movs	r3, #0
    e088:	e7f3      	b.n	e072 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    e08a:	f7ff ffd1 	bl	e030 <log_msg_no_space_handle>
    e08e:	9001      	str	r0, [sp, #4]
    e090:	e7f4      	b.n	e07c <log_msg_chunk_alloc+0x1c>
    e092:	bf00      	nop
    e094:	200104bc 	.word	0x200104bc

0000e098 <msg_free>:
{
    e098:	b5f0      	push	{r4, r5, r6, r7, lr}
    e09a:	b083      	sub	sp, #12
    e09c:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    e09e:	4604      	mov	r4, r0
    e0a0:	f008 fa54 	bl	1654c <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    e0a4:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    e0a6:	f013 0f01 	tst.w	r3, #1
    e0aa:	d101      	bne.n	e0b0 <msg_free+0x18>
    e0ac:	4606      	mov	r6, r0
    e0ae:	bb50      	cbnz	r0, e106 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    e0b0:	9b01      	ldr	r3, [sp, #4]
    e0b2:	7a1a      	ldrb	r2, [r3, #8]
    e0b4:	f012 0f02 	tst.w	r2, #2
    e0b8:	d128      	bne.n	e10c <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    e0ba:	a901      	add	r1, sp, #4
    e0bc:	4815      	ldr	r0, [pc, #84]	; (e114 <msg_free+0x7c>)
    e0be:	f006 f9bb 	bl	14438 <k_mem_slab_free>
}
    e0c2:	b003      	add	sp, #12
    e0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    e0c6:	9801      	ldr	r0, [sp, #4]
    e0c8:	f008 fa55 	bl	16576 <log_msg_str_get>
    e0cc:	4631      	mov	r1, r6
    e0ce:	f008 f979 	bl	163c4 <z_log_get_s_mask>
					if (smask == 0) {
    e0d2:	4607      	mov	r7, r0
    e0d4:	b988      	cbnz	r0, e0fa <msg_free+0x62>
    e0d6:	e7eb      	b.n	e0b0 <msg_free+0x18>
					log_free(buf);
    e0d8:	4628      	mov	r0, r5
    e0da:	f7ff ff75 	bl	dfc8 <log_free>
		for (i = 0; i < nargs; i++) {
    e0de:	3401      	adds	r4, #1
    e0e0:	42b4      	cmp	r4, r6
    e0e2:	d2e5      	bcs.n	e0b0 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    e0e4:	4621      	mov	r1, r4
    e0e6:	9801      	ldr	r0, [sp, #4]
    e0e8:	f008 fa33 	bl	16552 <log_msg_arg_get>
    e0ec:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    e0ee:	f7ff fbff 	bl	d8f0 <log_is_strdup>
    e0f2:	2800      	cmp	r0, #0
    e0f4:	d0f3      	beq.n	e0de <msg_free+0x46>
				if (smask == 0) {
    e0f6:	2f00      	cmp	r7, #0
    e0f8:	d0e5      	beq.n	e0c6 <msg_free+0x2e>
				if (smask & BIT(i)) {
    e0fa:	fa27 f304 	lsr.w	r3, r7, r4
    e0fe:	f013 0f01 	tst.w	r3, #1
    e102:	d0ec      	beq.n	e0de <msg_free+0x46>
    e104:	e7e8      	b.n	e0d8 <msg_free+0x40>
		uint32_t smask = 0;
    e106:	2700      	movs	r7, #0
		for (i = 0; i < nargs; i++) {
    e108:	463c      	mov	r4, r7
    e10a:	e7e9      	b.n	e0e0 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    e10c:	6958      	ldr	r0, [r3, #20]
    e10e:	f7ff ff73 	bl	dff8 <cont_free>
    e112:	e7d2      	b.n	e0ba <msg_free+0x22>
    e114:	200104bc 	.word	0x200104bc

0000e118 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    e118:	b40e      	push	{r1, r2, r3}
    e11a:	b500      	push	{lr}
    e11c:	b082      	sub	sp, #8
    e11e:	4601      	mov	r1, r0
    e120:	ab03      	add	r3, sp, #12
    e122:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    e126:	9301      	str	r3, [sp, #4]
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    e128:	4804      	ldr	r0, [pc, #16]	; (e13c <print_formatted+0x24>)
    e12a:	f007 fa7f 	bl	1562c <z_vprintk>
#endif
	va_end(args);

	return length;
}
    e12e:	2000      	movs	r0, #0
    e130:	b002      	add	sp, #8
    e132:	f85d eb04 	ldr.w	lr, [sp], #4
    e136:	b003      	add	sp, #12
    e138:	4770      	bx	lr
    e13a:	bf00      	nop
    e13c:	0001699b 	.word	0x0001699b

0000e140 <timestamp_print>:
	log_output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *log_output,
			   uint32_t flags, uint32_t timestamp)
{
    e140:	b5f0      	push	{r4, r5, r6, r7, lr}
    e142:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    e144:	f011 0f44 	tst.w	r1, #68	; 0x44
    e148:	d005      	beq.n	e156 <timestamp_print+0x16>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    e14a:	4b1a      	ldr	r3, [pc, #104]	; (e1b4 <timestamp_print+0x74>)
    e14c:	681c      	ldr	r4, [r3, #0]
    e14e:	b934      	cbnz	r4, e15e <timestamp_print+0x1e>
			length = print_formatted(log_output,
						 "[%02d:%02d:%02d.%03d,%03d] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    e150:	2000      	movs	r0, #0
	}

	return length;
}
    e152:	b005      	add	sp, #20
    e154:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    e156:	4918      	ldr	r1, [pc, #96]	; (e1b8 <timestamp_print+0x78>)
    e158:	f7ff ffde 	bl	e118 <print_formatted>
    e15c:	e7f9      	b.n	e152 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    e15e:	4b17      	ldr	r3, [pc, #92]	; (e1bc <timestamp_print+0x7c>)
    e160:	6819      	ldr	r1, [r3, #0]
    e162:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    e166:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    e16a:	4a15      	ldr	r2, [pc, #84]	; (e1c0 <timestamp_print+0x80>)
    e16c:	fba2 3205 	umull	r3, r2, r2, r5
    e170:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    e172:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    e176:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    e17a:	4b12      	ldr	r3, [pc, #72]	; (e1c4 <timestamp_print+0x84>)
    e17c:	fba3 7306 	umull	r7, r3, r3, r6
    e180:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    e182:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    e186:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    e18a:	fb05 f101 	mul.w	r1, r5, r1
    e18e:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    e192:	fb07 1114 	mls	r1, r7, r4, r1
    e196:	fb05 f101 	mul.w	r1, r5, r1
    e19a:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(log_output,
    e19e:	9402      	str	r4, [sp, #8]
    e1a0:	9701      	str	r7, [sp, #4]
    e1a2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    e1a6:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    e1aa:	9100      	str	r1, [sp, #0]
    e1ac:	4906      	ldr	r1, [pc, #24]	; (e1c8 <timestamp_print+0x88>)
    e1ae:	f7ff ffb3 	bl	e118 <print_formatted>
    e1b2:	e7ce      	b.n	e152 <timestamp_print+0x12>
    e1b4:	200104d8 	.word	0x200104d8
    e1b8:	00019870 	.word	0x00019870
    e1bc:	200104dc 	.word	0x200104dc
    e1c0:	91a2b3c5 	.word	0x91a2b3c5
    e1c4:	88888889 	.word	0x88888889
    e1c8:	0001987c 	.word	0x0001987c

0000e1cc <color_print>:

static void color_print(const struct log_output *log_output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    e1cc:	b161      	cbz	r1, e1e8 <color_print+0x1c>
{
    e1ce:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    e1d0:	b12a      	cbz	r2, e1de <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    e1d2:	4a06      	ldr	r2, [pc, #24]	; (e1ec <color_print+0x20>)
    e1d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    e1d8:	b912      	cbnz	r2, e1e0 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    e1da:	4a05      	ldr	r2, [pc, #20]	; (e1f0 <color_print+0x24>)
    e1dc:	e000      	b.n	e1e0 <color_print+0x14>
    e1de:	4a04      	ldr	r2, [pc, #16]	; (e1f0 <color_print+0x24>)
		print_formatted(log_output, "%s", log_color);
    e1e0:	4904      	ldr	r1, [pc, #16]	; (e1f4 <color_print+0x28>)
    e1e2:	f7ff ff99 	bl	e118 <print_formatted>
	}
}
    e1e6:	bd08      	pop	{r3, pc}
    e1e8:	4770      	bx	lr
    e1ea:	bf00      	nop
    e1ec:	000198f0 	.word	0x000198f0
    e1f0:	00019898 	.word	0x00019898
    e1f4:	0001a1c4 	.word	0x0001a1c4

0000e1f8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    e1f8:	f011 0f10 	tst.w	r1, #16
    e1fc:	d10b      	bne.n	e216 <newline_print+0x1e>
{
    e1fe:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    e200:	f011 0f20 	tst.w	r1, #32
    e204:	d003      	beq.n	e20e <newline_print+0x16>
		print_formatted(ctx, "\n");
    e206:	4904      	ldr	r1, [pc, #16]	; (e218 <newline_print+0x20>)
    e208:	f7ff ff86 	bl	e118 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    e20c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    e20e:	4903      	ldr	r1, [pc, #12]	; (e21c <newline_print+0x24>)
    e210:	f7ff ff82 	bl	e118 <print_formatted>
    e214:	e7fa      	b.n	e20c <newline_print+0x14>
    e216:	4770      	bx	lr
    e218:	00019798 	.word	0x00019798
    e21c:	0001a3d8 	.word	0x0001a3d8

0000e220 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    e220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e224:	4605      	mov	r5, r0
    e226:	460f      	mov	r7, r1
    e228:	4616      	mov	r6, r2
    e22a:	4698      	mov	r8, r3
	newline_print(log_output, flags);
    e22c:	9906      	ldr	r1, [sp, #24]
    e22e:	f7ff ffe3 	bl	e1f8 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    e232:	2400      	movs	r4, #0
    e234:	4544      	cmp	r4, r8
    e236:	da05      	bge.n	e244 <hexdump_line_print+0x24>
		print_formatted(log_output, " ");
    e238:	4923      	ldr	r1, [pc, #140]	; (e2c8 <hexdump_line_print+0xa8>)
    e23a:	4628      	mov	r0, r5
    e23c:	f7ff ff6c 	bl	e118 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    e240:	3401      	adds	r4, #1
    e242:	e7f7      	b.n	e234 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e244:	2400      	movs	r4, #0
    e246:	e009      	b.n	e25c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
    e248:	491f      	ldr	r1, [pc, #124]	; (e2c8 <hexdump_line_print+0xa8>)
    e24a:	4628      	mov	r0, r5
    e24c:	f7ff ff64 	bl	e118 <print_formatted>
    e250:	e00b      	b.n	e26a <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
    e252:	491e      	ldr	r1, [pc, #120]	; (e2cc <hexdump_line_print+0xac>)
    e254:	4628      	mov	r0, r5
    e256:	f7ff ff5f 	bl	e118 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e25a:	3401      	adds	r4, #1
    e25c:	2c0f      	cmp	r4, #15
    e25e:	dc0c      	bgt.n	e27a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    e260:	2c00      	cmp	r4, #0
    e262:	dd02      	ble.n	e26a <hexdump_line_print+0x4a>
    e264:	f014 0f07 	tst.w	r4, #7
    e268:	d0ee      	beq.n	e248 <hexdump_line_print+0x28>
		if (i < length) {
    e26a:	42b4      	cmp	r4, r6
    e26c:	d2f1      	bcs.n	e252 <hexdump_line_print+0x32>
			print_formatted(log_output, "%02x ", data[i]);
    e26e:	5d3a      	ldrb	r2, [r7, r4]
    e270:	4917      	ldr	r1, [pc, #92]	; (e2d0 <hexdump_line_print+0xb0>)
    e272:	4628      	mov	r0, r5
    e274:	f7ff ff50 	bl	e118 <print_formatted>
    e278:	e7ef      	b.n	e25a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(log_output, "|");
    e27a:	4916      	ldr	r1, [pc, #88]	; (e2d4 <hexdump_line_print+0xb4>)
    e27c:	4628      	mov	r0, r5
    e27e:	f7ff ff4b 	bl	e118 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e282:	2400      	movs	r4, #0
    e284:	e009      	b.n	e29a <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
    e286:	4910      	ldr	r1, [pc, #64]	; (e2c8 <hexdump_line_print+0xa8>)
    e288:	4628      	mov	r0, r5
    e28a:	f7ff ff45 	bl	e118 <print_formatted>
    e28e:	e00b      	b.n	e2a8 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(log_output, "%c",
    e290:	4911      	ldr	r1, [pc, #68]	; (e2d8 <hexdump_line_print+0xb8>)
    e292:	4628      	mov	r0, r5
    e294:	f7ff ff40 	bl	e118 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    e298:	3401      	adds	r4, #1
    e29a:	2c0f      	cmp	r4, #15
    e29c:	dc12      	bgt.n	e2c4 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    e29e:	2c00      	cmp	r4, #0
    e2a0:	dd02      	ble.n	e2a8 <hexdump_line_print+0x88>
    e2a2:	f014 0f07 	tst.w	r4, #7
    e2a6:	d0ee      	beq.n	e286 <hexdump_line_print+0x66>
		if (i < length) {
    e2a8:	42b4      	cmp	r4, r6
    e2aa:	d206      	bcs.n	e2ba <hexdump_line_print+0x9a>
			char c = (char)data[i];
    e2ac:	5d3a      	ldrb	r2, [r7, r4]
	return (int)((((unsigned)c) >= ' ') &&
    e2ae:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    e2b2:	2b5e      	cmp	r3, #94	; 0x5e
    e2b4:	d9ec      	bls.n	e290 <hexdump_line_print+0x70>
    e2b6:	222e      	movs	r2, #46	; 0x2e
    e2b8:	e7ea      	b.n	e290 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
    e2ba:	4903      	ldr	r1, [pc, #12]	; (e2c8 <hexdump_line_print+0xa8>)
    e2bc:	4628      	mov	r0, r5
    e2be:	f7ff ff2b 	bl	e118 <print_formatted>
    e2c2:	e7e9      	b.n	e298 <hexdump_line_print+0x78>
		}
	}
}
    e2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2c8:	000198c4 	.word	0x000198c4
    e2cc:	000198a8 	.word	0x000198a8
    e2d0:	000198a0 	.word	0x000198a0
    e2d4:	000198ac 	.word	0x000198ac
    e2d8:	000198b0 	.word	0x000198b0

0000e2dc <ids_print>:
{
    e2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2de:	4604      	mov	r4, r0
    e2e0:	4616      	mov	r6, r2
    e2e2:	461d      	mov	r5, r3
	if (level_on) {
    e2e4:	b949      	cbnz	r1, e2fa <ids_print+0x1e>
	int total = 0;
    e2e6:	2700      	movs	r7, #0
	total += print_formatted(log_output,
    e2e8:	b186      	cbz	r6, e30c <ids_print+0x30>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    e2ea:	2301      	movs	r3, #1
    e2ec:	9a07      	ldr	r2, [sp, #28]
    e2ee:	4093      	lsls	r3, r2
				(func_on &&
    e2f0:	f013 0f10 	tst.w	r3, #16
    e2f4:	d116      	bne.n	e324 <ids_print+0x48>
	total += print_formatted(log_output,
    e2f6:	4e0c      	ldr	r6, [pc, #48]	; (e328 <ids_print+0x4c>)
    e2f8:	e009      	b.n	e30e <ids_print+0x32>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    e2fa:	4b0c      	ldr	r3, [pc, #48]	; (e32c <ids_print+0x50>)
    e2fc:	9a07      	ldr	r2, [sp, #28]
    e2fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    e302:	490b      	ldr	r1, [pc, #44]	; (e330 <ids_print+0x54>)
    e304:	f7ff ff08 	bl	e118 <print_formatted>
    e308:	4607      	mov	r7, r0
    e30a:	e7ed      	b.n	e2e8 <ids_print+0xc>
	total += print_formatted(log_output,
    e30c:	4e06      	ldr	r6, [pc, #24]	; (e328 <ids_print+0x4c>)
    e30e:	9906      	ldr	r1, [sp, #24]
    e310:	4628      	mov	r0, r5
    e312:	f7ff fa65 	bl	d7e0 <log_source_name_get>
    e316:	4602      	mov	r2, r0
    e318:	4631      	mov	r1, r6
    e31a:	4620      	mov	r0, r4
    e31c:	f7ff fefc 	bl	e118 <print_formatted>
}
    e320:	4438      	add	r0, r7
    e322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	total += print_formatted(log_output,
    e324:	4e03      	ldr	r6, [pc, #12]	; (e334 <ids_print+0x58>)
    e326:	e7f2      	b.n	e30e <ids_print+0x32>
    e328:	000198b4 	.word	0x000198b4
    e32c:	0001992c 	.word	0x0001992c
    e330:	000198c0 	.word	0x000198c0
    e334:	000198bc 	.word	0x000198bc

0000e338 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *log_output,
			  int prefix_offset, uint32_t flags)
{
    e338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e33c:	b089      	sub	sp, #36	; 0x24
    e33e:	4607      	mov	r7, r0
    e340:	460e      	mov	r6, r1
    e342:	4691      	mov	r9, r2
    e344:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(log_output, "%s", log_msg_str_get(msg));
    e346:	f008 f916 	bl	16576 <log_msg_str_get>
    e34a:	4602      	mov	r2, r0
    e34c:	490e      	ldr	r1, [pc, #56]	; (e388 <hexdump_print+0x50>)
    e34e:	4630      	mov	r0, r6
    e350:	f7ff fee2 	bl	e118 <print_formatted>
	uint32_t offset = 0U;
    e354:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
    e356:	2510      	movs	r5, #16
    e358:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    e35a:	4623      	mov	r3, r4
    e35c:	aa03      	add	r2, sp, #12
    e35e:	eb0d 0105 	add.w	r1, sp, r5
    e362:	4638      	mov	r0, r7
    e364:	f008 f95d 	bl	16622 <log_msg_hexdump_data_get>

		if (length) {
    e368:	9a03      	ldr	r2, [sp, #12]
    e36a:	b152      	cbz	r2, e382 <hexdump_print+0x4a>
			hexdump_line_print(log_output, buf, length,
    e36c:	f8cd 8000 	str.w	r8, [sp]
    e370:	464b      	mov	r3, r9
    e372:	eb0d 0105 	add.w	r1, sp, r5
    e376:	4630      	mov	r0, r6
    e378:	f7ff ff52 	bl	e220 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
    e37c:	9d03      	ldr	r5, [sp, #12]
    e37e:	442c      	add	r4, r5
		length = sizeof(buf);
    e380:	e7e9      	b.n	e356 <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
    e382:	b009      	add	sp, #36	; 0x24
    e384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e388:	0001a1c4 	.word	0x0001a1c4

0000e38c <raw_string_print>:

static void raw_string_print(struct log_msg *msg,
			     const struct log_output *log_output)
{
    e38c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e38e:	b083      	sub	sp, #12
    e390:	4606      	mov	r6, r0
    e392:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(log_output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
    e394:	2700      	movs	r7, #0
	size_t offset = 0;
    e396:	463d      	mov	r5, r7
    e398:	e00d      	b.n	e3b6 <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
		log_output->control_block->offset = length;

		if (length != 0) {
			eol = (log_output->buf[length - 1] == '\n');
    e39a:	68a2      	ldr	r2, [r4, #8]
    e39c:	4413      	add	r3, r2
    e39e:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    e3a2:	2f0a      	cmp	r7, #10
    e3a4:	bf14      	ite	ne
    e3a6:	2700      	movne	r7, #0
    e3a8:	2701      	moveq	r7, #1
		}

		log_output_flush(log_output);
    e3aa:	4620      	mov	r0, r4
    e3ac:	f008 fae8 	bl	16980 <log_output_flush>
		offset += length;
    e3b0:	9b01      	ldr	r3, [sp, #4]
    e3b2:	441d      	add	r5, r3
	} while (length > 0);
    e3b4:	b173      	cbz	r3, e3d4 <raw_string_print+0x48>
		length = log_output->size;
    e3b6:	68e3      	ldr	r3, [r4, #12]
    e3b8:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    e3ba:	462b      	mov	r3, r5
    e3bc:	aa01      	add	r2, sp, #4
    e3be:	68a1      	ldr	r1, [r4, #8]
    e3c0:	4630      	mov	r0, r6
    e3c2:	f008 f92e 	bl	16622 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    e3c6:	6863      	ldr	r3, [r4, #4]
    e3c8:	9a01      	ldr	r2, [sp, #4]
    e3ca:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    e3cc:	9b01      	ldr	r3, [sp, #4]
    e3ce:	2b00      	cmp	r3, #0
    e3d0:	d0eb      	beq.n	e3aa <raw_string_print+0x1e>
    e3d2:	e7e2      	b.n	e39a <raw_string_print+0xe>

	if (eol) {
    e3d4:	b90f      	cbnz	r7, e3da <raw_string_print+0x4e>
		print_formatted(log_output, "\r");
	}
}
    e3d6:	b003      	add	sp, #12
    e3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(log_output, "\r");
    e3da:	4902      	ldr	r1, [pc, #8]	; (e3e4 <raw_string_print+0x58>)
    e3dc:	4620      	mov	r0, r4
    e3de:	f7ff fe9b 	bl	e118 <print_formatted>
}
    e3e2:	e7f8      	b.n	e3d6 <raw_string_print+0x4a>
    e3e4:	000198c8 	.word	0x000198c8

0000e3e8 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    e3e8:	b570      	push	{r4, r5, r6, lr}
    e3ea:	b082      	sub	sp, #8
    e3ec:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
    e3ee:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    e3f0:	f242 730f 	movw	r3, #9999	; 0x270f
    e3f4:	428b      	cmp	r3, r1
    e3f6:	bf28      	it	cs
    e3f8:	460b      	movcs	r3, r1
    e3fa:	4a0e      	ldr	r2, [pc, #56]	; (e434 <log_output_dropped_process+0x4c>)
    e3fc:	2105      	movs	r1, #5
    e3fe:	4668      	mov	r0, sp
    e400:	f007 faad 	bl	1595e <snprintk>
    e404:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     log_output->control_block->ctx);
    e406:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    e408:	685b      	ldr	r3, [r3, #4]
    e40a:	220b      	movs	r2, #11
    e40c:	490a      	ldr	r1, [pc, #40]	; (e438 <log_output_dropped_process+0x50>)
    e40e:	4628      	mov	r0, r5
    e410:	f008 f90f 	bl	16632 <buffer_write>
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    e414:	6863      	ldr	r3, [r4, #4]
    e416:	685b      	ldr	r3, [r3, #4]
    e418:	4632      	mov	r2, r6
    e41a:	4669      	mov	r1, sp
    e41c:	4628      	mov	r0, r5
    e41e:	f008 f908 	bl	16632 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     log_output->control_block->ctx);
    e422:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    e424:	685b      	ldr	r3, [r3, #4]
    e426:	221b      	movs	r2, #27
    e428:	4904      	ldr	r1, [pc, #16]	; (e43c <log_output_dropped_process+0x54>)
    e42a:	4628      	mov	r0, r5
    e42c:	f008 f901 	bl	16632 <buffer_write>
}
    e430:	b002      	add	sp, #8
    e432:	bd70      	pop	{r4, r5, r6, pc}
    e434:	000198cc 	.word	0x000198cc
    e438:	00019920 	.word	0x00019920
    e43c:	00019904 	.word	0x00019904

0000e440 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    e440:	4b07      	ldr	r3, [pc, #28]	; (e460 <log_output_timestamp_freq_set+0x20>)
    e442:	2201      	movs	r2, #1
    e444:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    e446:	4b07      	ldr	r3, [pc, #28]	; (e464 <log_output_timestamp_freq_set+0x24>)
    e448:	4298      	cmp	r0, r3
    e44a:	d905      	bls.n	e458 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    e44c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    e44e:	4a04      	ldr	r2, [pc, #16]	; (e460 <log_output_timestamp_freq_set+0x20>)
    e450:	6813      	ldr	r3, [r2, #0]
    e452:	005b      	lsls	r3, r3, #1
    e454:	6013      	str	r3, [r2, #0]
    e456:	e7f6      	b.n	e446 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    e458:	4b03      	ldr	r3, [pc, #12]	; (e468 <log_output_timestamp_freq_set+0x28>)
    e45a:	6018      	str	r0, [r3, #0]
}
    e45c:	4770      	bx	lr
    e45e:	bf00      	nop
    e460:	200104dc 	.word	0x200104dc
    e464:	000f4240 	.word	0x000f4240
    e468:	200104d8 	.word	0x200104d8

0000e46c <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    e46c:	b570      	push	{r4, r5, r6, lr}
    e46e:	4606      	mov	r6, r0
    e470:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
    e472:	2400      	movs	r4, #0
    e474:	42ac      	cmp	r4, r5
    e476:	d207      	bcs.n	e488 <char_out+0x1c>
		uart_poll_out(uart_dev, data[i]);
    e478:	4b04      	ldr	r3, [pc, #16]	; (e48c <char_out+0x20>)
    e47a:	6818      	ldr	r0, [r3, #0]
    e47c:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    e47e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    e480:	685b      	ldr	r3, [r3, #4]
    e482:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    e484:	3401      	adds	r4, #1
    e486:	e7f5      	b.n	e474 <char_out+0x8>
	}

	return length;
}
    e488:	4628      	mov	r0, r5
    e48a:	bd70      	pop	{r4, r5, r6, pc}
    e48c:	200104f4 	.word	0x200104f4

0000e490 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    e490:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    e492:	4803      	ldr	r0, [pc, #12]	; (e4a0 <log_backend_uart_init+0x10>)
    e494:	f005 fd80 	bl	13f98 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    e498:	4b02      	ldr	r3, [pc, #8]	; (e4a4 <log_backend_uart_init+0x14>)
    e49a:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
}
    e49c:	bd08      	pop	{r3, pc}
    e49e:	bf00      	nop
    e4a0:	00019940 	.word	0x00019940
    e4a4:	200104f4 	.word	0x200104f4

0000e4a8 <panic>:

static void panic(struct log_backend const *const backend)
{
    e4a8:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    e4aa:	4802      	ldr	r0, [pc, #8]	; (e4b4 <panic+0xc>)
    e4ac:	f008 fa68 	bl	16980 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    e4b0:	bd08      	pop	{r3, pc}
    e4b2:	bf00      	nop
    e4b4:	00019974 	.word	0x00019974

0000e4b8 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    e4b8:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    e4ba:	4802      	ldr	r0, [pc, #8]	; (e4c4 <dropped+0xc>)
    e4bc:	f7ff ff94 	bl	e3e8 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_uart, cnt);
}
    e4c0:	bd08      	pop	{r3, pc}
    e4c2:	bf00      	nop
    e4c4:	00019974 	.word	0x00019974

0000e4c8 <put>:
{
    e4c8:	b510      	push	{r4, lr}
    e4ca:	460c      	mov	r4, r1
	log_msg_get(msg);
    e4cc:	4608      	mov	r0, r1
    e4ce:	f008 f834 	bl	1653a <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    e4d2:	220f      	movs	r2, #15
    e4d4:	4621      	mov	r1, r4
    e4d6:	4803      	ldr	r0, [pc, #12]	; (e4e4 <put+0x1c>)
    e4d8:	f008 fa77 	bl	169ca <log_output_msg_process>
	log_msg_put(msg);
    e4dc:	4620      	mov	r0, r4
    e4de:	f008 f84c 	bl	1657a <log_msg_put>
}
    e4e2:	bd10      	pop	{r4, pc}
    e4e4:	00019974 	.word	0x00019974

0000e4e8 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
    e4e8:	b410      	push	{r4}
    e4ea:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
    e4ec:	2300      	movs	r3, #0
    e4ee:	4a08      	ldr	r2, [pc, #32]	; (e510 <get_flash_area_from_id+0x28>)
    e4f0:	6812      	ldr	r2, [r2, #0]
    e4f2:	429a      	cmp	r2, r3
    e4f4:	dd09      	ble.n	e50a <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
    e4f6:	011a      	lsls	r2, r3, #4
    e4f8:	4906      	ldr	r1, [pc, #24]	; (e514 <get_flash_area_from_id+0x2c>)
    e4fa:	6809      	ldr	r1, [r1, #0]
    e4fc:	eb01 1003 	add.w	r0, r1, r3, lsl #4
    e500:	5c8a      	ldrb	r2, [r1, r2]
    e502:	42a2      	cmp	r2, r4
    e504:	d002      	beq.n	e50c <get_flash_area_from_id+0x24>
	for (int i = 0; i < flash_map_entries; i++) {
    e506:	3301      	adds	r3, #1
    e508:	e7f1      	b.n	e4ee <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
    e50a:	2000      	movs	r0, #0
}
    e50c:	bc10      	pop	{r4}
    e50e:	4770      	bx	lr
    e510:	000199c8 	.word	0x000199c8
    e514:	20010128 	.word	0x20010128

0000e518 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    e518:	4b08      	ldr	r3, [pc, #32]	; (e53c <flash_area_open+0x24>)
    e51a:	681b      	ldr	r3, [r3, #0]
    e51c:	b13b      	cbz	r3, e52e <flash_area_open+0x16>
{
    e51e:	b510      	push	{r4, lr}
    e520:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    e522:	f7ff ffe1 	bl	e4e8 <get_flash_area_from_id>
	if (area == NULL) {
    e526:	b128      	cbz	r0, e534 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    e528:	6020      	str	r0, [r4, #0]
	return 0;
    e52a:	2000      	movs	r0, #0
}
    e52c:	bd10      	pop	{r4, pc}
		return -EACCES;
    e52e:	f06f 000c 	mvn.w	r0, #12
}
    e532:	4770      	bx	lr
		return -ENOENT;
    e534:	f06f 0001 	mvn.w	r0, #1
    e538:	e7f8      	b.n	e52c <flash_area_open+0x14>
    e53a:	bf00      	nop
    e53c:	20010128 	.word	0x20010128

0000e540 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    e540:	b510      	push	{r4, lr}
    e542:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    e544:	280a      	cmp	r0, #10
    e546:	d007      	beq.n	e558 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    e548:	4b07      	ldr	r3, [pc, #28]	; (e568 <console_out+0x28>)
    e54a:	6818      	ldr	r0, [r3, #0]
    e54c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    e54e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    e550:	685b      	ldr	r3, [r3, #4]
    e552:	4798      	blx	r3

	return c;
}
    e554:	4620      	mov	r0, r4
    e556:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    e558:	4b03      	ldr	r3, [pc, #12]	; (e568 <console_out+0x28>)
    e55a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    e55c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    e55e:	685b      	ldr	r3, [r3, #4]
    e560:	210d      	movs	r1, #13
    e562:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    e564:	e7f0      	b.n	e548 <console_out+0x8>
    e566:	bf00      	nop
    e568:	200104f8 	.word	0x200104f8

0000e56c <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    e56c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    e56e:	4c04      	ldr	r4, [pc, #16]	; (e580 <uart_console_hook_install+0x14>)
    e570:	4620      	mov	r0, r4
    e572:	f001 fa37 	bl	f9e4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    e576:	4620      	mov	r0, r4
    e578:	f7fe f98c 	bl	c894 <__printk_hook_install>
}
    e57c:	bd10      	pop	{r4, pc}
    e57e:	bf00      	nop
    e580:	0000e541 	.word	0x0000e541

0000e584 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    e584:	b508      	push	{r3, lr}
    e586:	4804      	ldr	r0, [pc, #16]	; (e598 <uart_console_init+0x14>)
    e588:	f005 fd06 	bl	13f98 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    e58c:	4b03      	ldr	r3, [pc, #12]	; (e59c <uart_console_init+0x18>)
    e58e:	6018      	str	r0, [r3, #0]

	uart_console_hook_install();
    e590:	f7ff ffec 	bl	e56c <uart_console_hook_install>

	return 0;
}
    e594:	2000      	movs	r0, #0
    e596:	bd08      	pop	{r3, pc}
    e598:	00019940 	.word	0x00019940
    e59c:	200104f8 	.word	0x200104f8

0000e5a0 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    e5a0:	4800      	ldr	r0, [pc, #0]	; (e5a4 <get_hf_flags+0x4>)
    e5a2:	4770      	bx	lr
    e5a4:	2001054c 	.word	0x2001054c

0000e5a8 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
    e5a8:	4b03      	ldr	r3, [pc, #12]	; (e5b8 <get_subsys+0x10>)
    e5aa:	1ac0      	subs	r0, r0, r3
    e5ac:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    e5ae:	4b03      	ldr	r3, [pc, #12]	; (e5bc <get_subsys+0x14>)
    e5b0:	fb03 f000 	mul.w	r0, r3, r0
    e5b4:	4770      	bx	lr
    e5b6:	bf00      	nop
    e5b8:	2001050c 	.word	0x2001050c
    e5bc:	b6db6db7 	.word	0xb6db6db7

0000e5c0 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    e5c0:	b538      	push	{r3, r4, r5, lr}
    e5c2:	4605      	mov	r5, r0
    e5c4:	460c      	mov	r4, r1
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
    e5c6:	f7ff ffef 	bl	e5a8 <get_subsys>
    e5ca:	4601      	mov	r1, r0
    e5cc:	2240      	movs	r2, #64	; 0x40
    e5ce:	4803      	ldr	r0, [pc, #12]	; (e5dc <onoff_stop+0x1c>)
    e5d0:	f008 fb36 	bl	16c40 <stop>
    e5d4:	4601      	mov	r1, r0
	notify(mgr, res);
    e5d6:	4628      	mov	r0, r5
    e5d8:	47a0      	blx	r4
}
    e5da:	bd38      	pop	{r3, r4, r5, pc}
    e5dc:	20010168 	.word	0x20010168

0000e5e0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    e5e0:	b530      	push	{r4, r5, lr}
    e5e2:	b085      	sub	sp, #20
    e5e4:	4605      	mov	r5, r0
    e5e6:	460c      	mov	r4, r1
	struct clock_control_async_data data = {
    e5e8:	2300      	movs	r3, #0
    e5ea:	9301      	str	r3, [sp, #4]
    e5ec:	4b08      	ldr	r3, [pc, #32]	; (e610 <onoff_start+0x30>)
    e5ee:	9302      	str	r3, [sp, #8]
    e5f0:	9103      	str	r1, [sp, #12]
		.cb = onoff_started_callback,
		.user_data = notify
	};
	int err;

	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
    e5f2:	f7ff ffd9 	bl	e5a8 <get_subsys>
    e5f6:	4601      	mov	r1, r0
    e5f8:	2340      	movs	r3, #64	; 0x40
    e5fa:	aa01      	add	r2, sp, #4
    e5fc:	4805      	ldr	r0, [pc, #20]	; (e614 <onoff_start+0x34>)
    e5fe:	f008 fb39 	bl	16c74 <async_start>
			  &data, CTX_ONOFF);
	if (err < 0) {
    e602:	1e01      	subs	r1, r0, #0
    e604:	db01      	blt.n	e60a <onoff_start+0x2a>
		notify(mgr, err);
	}
}
    e606:	b005      	add	sp, #20
    e608:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    e60a:	4628      	mov	r0, r5
    e60c:	47a0      	blx	r4
}
    e60e:	e7fa      	b.n	e606 <onoff_start+0x26>
    e610:	00016cbb 	.word	0x00016cbb
    e614:	20010168 	.word	0x20010168

0000e618 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    e618:	b508      	push	{r3, lr}
	const struct device *dev = DEVICE_GET(clock_nrf);

	switch (event) {
    e61a:	b110      	cbz	r0, e622 <clock_event_handler+0xa>
    e61c:	2801      	cmp	r0, #1
    e61e:	d00d      	beq.n	e63c <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    e620:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    e622:	2100      	movs	r1, #0
    e624:	4808      	ldr	r0, [pc, #32]	; (e648 <clock_event_handler+0x30>)
    e626:	f008 fa92 	bl	16b4e <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    e62a:	6883      	ldr	r3, [r0, #8]
    e62c:	f013 0f07 	tst.w	r3, #7
    e630:	d1f6      	bne.n	e620 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    e632:	2100      	movs	r1, #0
    e634:	4804      	ldr	r0, [pc, #16]	; (e648 <clock_event_handler+0x30>)
    e636:	f008 faf1 	bl	16c1c <clkstarted_handle>
    e63a:	e7f1      	b.n	e620 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    e63c:	2101      	movs	r1, #1
    e63e:	4802      	ldr	r0, [pc, #8]	; (e648 <clock_event_handler+0x30>)
    e640:	f008 faec 	bl	16c1c <clkstarted_handle>
}
    e644:	e7ec      	b.n	e620 <clock_event_handler+0x8>
    e646:	bf00      	nop
    e648:	20010168 	.word	0x20010168

0000e64c <api_blocking_start>:
{
    e64c:	b510      	push	{r4, lr}
    e64e:	b088      	sub	sp, #32
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    e650:	ab04      	add	r3, sp, #16
    e652:	9304      	str	r3, [sp, #16]
    e654:	9305      	str	r3, [sp, #20]
    e656:	2200      	movs	r2, #0
    e658:	9206      	str	r2, [sp, #24]
    e65a:	2401      	movs	r4, #1
    e65c:	9407      	str	r4, [sp, #28]
	struct clock_control_async_data data = {
    e65e:	9201      	str	r2, [sp, #4]
    e660:	4a07      	ldr	r2, [pc, #28]	; (e680 <api_blocking_start+0x34>)
    e662:	9202      	str	r2, [sp, #8]
    e664:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, &data);
    e666:	aa01      	add	r2, sp, #4
    e668:	f008 fb22 	bl	16cb0 <api_start>
	if (err < 0) {
    e66c:	2800      	cmp	r0, #0
    e66e:	db05      	blt.n	e67c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    e670:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e674:	2300      	movs	r3, #0
    e676:	a804      	add	r0, sp, #16
    e678:	f006 fbdc 	bl	14e34 <z_impl_k_sem_take>
}
    e67c:	b008      	add	sp, #32
    e67e:	bd10      	pop	{r4, pc}
    e680:	00016ccb 	.word	0x00016ccb

0000e684 <generic_hfclk_start>:
{
    e684:	b510      	push	{r4, lr}
	__asm__ volatile(
    e686:	f04f 0320 	mov.w	r3, #32
    e68a:	f3ef 8411 	mrs	r4, BASEPRI
    e68e:	f383 8811 	msr	BASEPRI, r3
    e692:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    e696:	4a13      	ldr	r2, [pc, #76]	; (e6e4 <generic_hfclk_start+0x60>)
    e698:	6813      	ldr	r3, [r2, #0]
    e69a:	f043 0302 	orr.w	r3, r3, #2
    e69e:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    e6a0:	f013 0f01 	tst.w	r3, #1
    e6a4:	d108      	bne.n	e6b8 <generic_hfclk_start+0x34>
	bool already_started = false;
    e6a6:	2300      	movs	r3, #0
	__asm__ volatile(
    e6a8:	f384 8811 	msr	BASEPRI, r4
    e6ac:	f3bf 8f6f 	isb	sy
	if (already_started) {
    e6b0:	b993      	cbnz	r3, e6d8 <generic_hfclk_start+0x54>
	hfclk_start();
    e6b2:	f008 fb1e 	bl	16cf2 <hfclk_start>
}
    e6b6:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    e6b8:	4b0b      	ldr	r3, [pc, #44]	; (e6e8 <generic_hfclk_start+0x64>)
    e6ba:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    e6be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    e6c2:	f012 0f01 	tst.w	r2, #1
    e6c6:	d101      	bne.n	e6cc <generic_hfclk_start+0x48>
	bool already_started = false;
    e6c8:	2300      	movs	r3, #0
    e6ca:	e7ed      	b.n	e6a8 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    e6cc:	f7ff ff68 	bl	e5a0 <get_hf_flags>
    e6d0:	f008 fa91 	bl	16bf6 <set_on_state>
			already_started = true;
    e6d4:	2301      	movs	r3, #1
    e6d6:	e7e7      	b.n	e6a8 <generic_hfclk_start+0x24>
		clkstarted_handle(DEVICE_GET(clock_nrf),
    e6d8:	2100      	movs	r1, #0
    e6da:	4804      	ldr	r0, [pc, #16]	; (e6ec <generic_hfclk_start+0x68>)
    e6dc:	f008 fa9e 	bl	16c1c <clkstarted_handle>
		return;
    e6e0:	e7e9      	b.n	e6b6 <generic_hfclk_start+0x32>
    e6e2:	bf00      	nop
    e6e4:	2001055c 	.word	0x2001055c
    e6e8:	40005000 	.word	0x40005000
    e6ec:	20010168 	.word	0x20010168

0000e6f0 <generic_hfclk_stop>:
{
    e6f0:	b508      	push	{r3, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e6f2:	4b08      	ldr	r3, [pc, #32]	; (e714 <generic_hfclk_stop+0x24>)
    e6f4:	e8d3 2fef 	ldaex	r2, [r3]
    e6f8:	f022 0102 	bic.w	r1, r2, #2
    e6fc:	e8c3 1fe0 	stlex	r0, r1, [r3]
    e700:	2800      	cmp	r0, #0
    e702:	d1f7      	bne.n	e6f4 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    e704:	f012 0f01 	tst.w	r2, #1
    e708:	d000      	beq.n	e70c <generic_hfclk_stop+0x1c>
}
    e70a:	bd08      	pop	{r3, pc}
	hfclk_stop();
    e70c:	f008 fae7 	bl	16cde <hfclk_stop>
    e710:	e7fb      	b.n	e70a <generic_hfclk_stop+0x1a>
    e712:	bf00      	nop
    e714:	2001055c 	.word	0x2001055c

0000e718 <clk_init>:

static int clk_init(const struct device *dev)
{
    e718:	b570      	push	{r4, r5, r6, lr}
    e71a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e71c:	2200      	movs	r2, #0
    e71e:	2101      	movs	r1, #1
    e720:	2005      	movs	r0, #5
    e722:	f000 fa25 	bl	eb70 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    e726:	2005      	movs	r0, #5
    e728:	f000 fa04 	bl	eb34 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
    e72c:	4811      	ldr	r0, [pc, #68]	; (e774 <clk_init+0x5c>)
    e72e:	f002 fddd 	bl	112ec <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    e732:	4b11      	ldr	r3, [pc, #68]	; (e778 <clk_init+0x60>)
    e734:	4298      	cmp	r0, r3
    e736:	d11a      	bne.n	e76e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    e738:	f009 f8fc 	bl	17934 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    e73c:	2400      	movs	r4, #0
    e73e:	e003      	b.n	e748 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e740:	2301      	movs	r3, #1
    e742:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    e744:	441c      	add	r4, r3
    e746:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    e748:	2c01      	cmp	r4, #1
    e74a:	d80e      	bhi.n	e76a <clk_init+0x52>
						get_sub_data(dev, i);
    e74c:	4621      	mov	r1, r4
    e74e:	4630      	mov	r0, r6
    e750:	f008 f9fd 	bl	16b4e <get_sub_data>
    e754:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    e756:	4621      	mov	r1, r4
    e758:	4630      	mov	r0, r6
    e75a:	f008 fa05 	bl	16b68 <get_onoff_manager>
    e75e:	4907      	ldr	r1, [pc, #28]	; (e77c <clk_init+0x64>)
    e760:	f007 f9e6 	bl	15b30 <onoff_manager_init>
		if (err < 0) {
    e764:	2800      	cmp	r0, #0
    e766:	daeb      	bge.n	e740 <clk_init+0x28>
    e768:	e000      	b.n	e76c <clk_init+0x54>
	}

	return 0;
    e76a:	2000      	movs	r0, #0
}
    e76c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    e76e:	f06f 0004 	mvn.w	r0, #4
    e772:	e7fb      	b.n	e76c <clk_init+0x54>
    e774:	0000e619 	.word	0x0000e619
    e778:	0bad0000 	.word	0x0bad0000
    e77c:	00019a28 	.word	0x00019a28

0000e780 <lfclk_spinwait>:
{
    e780:	b570      	push	{r4, r5, r6, lr}
    e782:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    e784:	2801      	cmp	r0, #1
    e786:	d106      	bne.n	e796 <lfclk_spinwait+0x16>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    e788:	4b32      	ldr	r3, [pc, #200]	; (e854 <lfclk_spinwait+0xd4>)
    e78a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    e78e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    e792:	2b02      	cmp	r3, #2
    e794:	d03c      	beq.n	e810 <lfclk_spinwait+0x90>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    e796:	f00a fc91 	bl	190bc <k_is_in_isr>
    e79a:	b920      	cbnz	r0, e7a6 <lfclk_spinwait+0x26>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    e79c:	4b2e      	ldr	r3, [pc, #184]	; (e858 <lfclk_spinwait+0xd8>)
    e79e:	781b      	ldrb	r3, [r3, #0]
    e7a0:	b193      	cbz	r3, e7c8 <lfclk_spinwait+0x48>
    e7a2:	2300      	movs	r3, #0
    e7a4:	e000      	b.n	e7a8 <lfclk_spinwait+0x28>
    e7a6:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    e7a8:	461c      	mov	r4, r3
    e7aa:	b17b      	cbz	r3, e7cc <lfclk_spinwait+0x4c>
	__asm__ volatile(
    e7ac:	f04f 0320 	mov.w	r3, #32
    e7b0:	f3ef 8611 	mrs	r6, BASEPRI
    e7b4:	f383 8811 	msr	BASEPRI, r3
    e7b8:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    e7bc:	b994      	cbnz	r4, e7e4 <lfclk_spinwait+0x64>
    p_reg->INTENCLR = mask;
    e7be:	4b25      	ldr	r3, [pc, #148]	; (e854 <lfclk_spinwait+0xd4>)
    e7c0:	2202      	movs	r2, #2
    e7c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    e7c6:	e00d      	b.n	e7e4 <lfclk_spinwait+0x64>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    e7c8:	2301      	movs	r3, #1
    e7ca:	e7ed      	b.n	e7a8 <lfclk_spinwait+0x28>
	int key = isr_mode ? irq_lock() : 0;
    e7cc:	2600      	movs	r6, #0
    e7ce:	e7f5      	b.n	e7bc <lfclk_spinwait+0x3c>
			if (isr_mode) {
    e7d0:	b1fc      	cbz	r4, e812 <lfclk_spinwait+0x92>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    e7d2:	4630      	mov	r0, r6
    e7d4:	f000 fa2e 	bl	ec34 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    e7d8:	4b1e      	ldr	r3, [pc, #120]	; (e854 <lfclk_spinwait+0xd4>)
    e7da:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    e7de:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    e7e0:	2b01      	cmp	r3, #1
    e7e2:	d01b      	beq.n	e81c <lfclk_spinwait+0x9c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e7e4:	4a1b      	ldr	r2, [pc, #108]	; (e854 <lfclk_spinwait+0xd4>)
    e7e6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    e7ea:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e7ee:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    e7f2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    e7f6:	d125      	bne.n	e844 <lfclk_spinwait+0xc4>
    return false;
    e7f8:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    e7fa:	2a00      	cmp	r2, #0
    e7fc:	d0e8      	beq.n	e7d0 <lfclk_spinwait+0x50>
    e7fe:	2b02      	cmp	r3, #2
    e800:	d001      	beq.n	e806 <lfclk_spinwait+0x86>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    e802:	2d01      	cmp	r5, #1
    e804:	d1e4      	bne.n	e7d0 <lfclk_spinwait+0x50>
	if (isr_mode) {
    e806:	b1fc      	cbz	r4, e848 <lfclk_spinwait+0xc8>
	__asm__ volatile(
    e808:	f386 8811 	msr	BASEPRI, r6
    e80c:	f3bf 8f6f 	isb	sy
}
    e810:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    e812:	2021      	movs	r0, #33	; 0x21
    e814:	2100      	movs	r1, #0
    e816:	f006 fab9 	bl	14d8c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    e81a:	e7dd      	b.n	e7d8 <lfclk_spinwait+0x58>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e81c:	4b0f      	ldr	r3, [pc, #60]	; (e85c <lfclk_spinwait+0xdc>)
    e81e:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    e820:	2b00      	cmp	r3, #0
    e822:	d0df      	beq.n	e7e4 <lfclk_spinwait+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e824:	4b0d      	ldr	r3, [pc, #52]	; (e85c <lfclk_spinwait+0xdc>)
    e826:	2200      	movs	r2, #0
    e828:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    e82a:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    e82c:	4b09      	ldr	r3, [pc, #36]	; (e854 <lfclk_spinwait+0xd4>)
    e82e:	2202      	movs	r2, #2
    e830:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e834:	4b0a      	ldr	r3, [pc, #40]	; (e860 <lfclk_spinwait+0xe0>)
    e836:	2220      	movs	r2, #32
    e838:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e83c:	4b09      	ldr	r3, [pc, #36]	; (e864 <lfclk_spinwait+0xe4>)
    e83e:	2201      	movs	r2, #1
    e840:	601a      	str	r2, [r3, #0]
}
    e842:	e7cf      	b.n	e7e4 <lfclk_spinwait+0x64>
                return true;
    e844:	2201      	movs	r2, #1
    e846:	e7d8      	b.n	e7fa <lfclk_spinwait+0x7a>
    p_reg->INTENSET = mask;
    e848:	4b02      	ldr	r3, [pc, #8]	; (e854 <lfclk_spinwait+0xd4>)
    e84a:	2202      	movs	r2, #2
    e84c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    e850:	e7de      	b.n	e810 <lfclk_spinwait+0x90>
    e852:	bf00      	nop
    e854:	40005000 	.word	0x40005000
    e858:	20010969 	.word	0x20010969
    e85c:	40005104 	.word	0x40005104
    e860:	e000e100 	.word	0xe000e100
    e864:	40005008 	.word	0x40005008

0000e868 <z_nrf_clock_control_lf_on>:
{
    e868:	b510      	push	{r4, lr}
    e86a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e86c:	4b0e      	ldr	r3, [pc, #56]	; (e8a8 <z_nrf_clock_control_lf_on+0x40>)
    e86e:	2101      	movs	r1, #1
    e870:	e8d3 2fef 	ldaex	r2, [r3]
    e874:	e8c3 1fe0 	stlex	r0, r1, [r3]
    e878:	2800      	cmp	r0, #0
    e87a:	d1f9      	bne.n	e870 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    e87c:	b11a      	cbz	r2, e886 <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    e87e:	1e63      	subs	r3, r4, #1
    e880:	2b01      	cmp	r3, #1
    e882:	d90c      	bls.n	e89e <z_nrf_clock_control_lf_on+0x36>
}
    e884:	bd10      	pop	{r4, pc}
				get_onoff_manager(DEVICE_GET(clock_nrf),
    e886:	4809      	ldr	r0, [pc, #36]	; (e8ac <z_nrf_clock_control_lf_on+0x44>)
    e888:	f008 f96e 	bl	16b68 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    e88c:	4908      	ldr	r1, [pc, #32]	; (e8b0 <z_nrf_clock_control_lf_on+0x48>)
    e88e:	2300      	movs	r3, #0
    e890:	604b      	str	r3, [r1, #4]
    e892:	60cb      	str	r3, [r1, #12]
    e894:	2301      	movs	r3, #1
    e896:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    e898:	f007 f966 	bl	15b68 <onoff_request>
    e89c:	e7ef      	b.n	e87e <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    e89e:	4620      	mov	r0, r4
    e8a0:	f7ff ff6e 	bl	e780 <lfclk_spinwait>
		break;
    e8a4:	e7ee      	b.n	e884 <z_nrf_clock_control_lf_on+0x1c>
    e8a6:	bf00      	nop
    e8a8:	20010560 	.word	0x20010560
    e8ac:	20010168 	.word	0x20010168
    e8b0:	200104fc 	.word	0x200104fc

0000e8b4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    e8b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    e8b8:	4b01      	ldr	r3, [pc, #4]	; (e8c0 <_flash_used+0x8>)
    e8ba:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
}
    e8be:	4770      	bx	lr
    e8c0:	40015000 	.word	0x40015000

0000e8c4 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    e8c4:	4b01      	ldr	r3, [pc, #4]	; (e8cc <get_comparator+0x8>)
    e8c6:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540

static uint32_t get_comparator(void)
{
	return nrf_rtc_cc_get(RTC, 0);
}
    e8ca:	4770      	bx	lr
    e8cc:	40015000 	.word	0x40015000

0000e8d0 <event_clear>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e8d0:	4b02      	ldr	r3, [pc, #8]	; (e8dc <event_clear+0xc>)
    e8d2:	2200      	movs	r2, #0
    e8d4:	601a      	str	r2, [r3, #0]
    e8d6:	681b      	ldr	r3, [r3, #0]

static void event_clear(void)
{
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
}
    e8d8:	4770      	bx	lr
    e8da:	bf00      	nop
    e8dc:	40015140 	.word	0x40015140

0000e8e0 <event_enable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    e8e0:	4b02      	ldr	r3, [pc, #8]	; (e8ec <event_enable+0xc>)
    e8e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e8e6:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

static void event_enable(void)
{
	nrf_rtc_event_enable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
    e8ea:	4770      	bx	lr
    e8ec:	40015000 	.word	0x40015000

0000e8f0 <int_disable>:
    p_reg->INTENCLR = mask;
    e8f0:	4b02      	ldr	r3, [pc, #8]	; (e8fc <int_disable+0xc>)
    e8f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e8f6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

static void int_disable(void)
{
	nrf_rtc_int_disable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
    e8fa:	4770      	bx	lr
    e8fc:	40015000 	.word	0x40015000

0000e900 <int_enable>:
    p_reg->INTENSET = mask;
    e900:	4b02      	ldr	r3, [pc, #8]	; (e90c <int_enable+0xc>)
    e902:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e906:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

static void int_enable(void)
{
	nrf_rtc_int_enable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
    e90a:	4770      	bx	lr
    e90c:	40015000 	.word	0x40015000

0000e910 <counter>:
     return p_reg->COUNTER;
    e910:	4b01      	ldr	r3, [pc, #4]	; (e918 <counter+0x8>)
    e912:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    e916:	4770      	bx	lr
    e918:	40015000 	.word	0x40015000

0000e91c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    e91c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(arg);
	event_clear();
    e91e:	f7ff ffd7 	bl	e8d0 <event_clear>

	uint32_t t = get_comparator();
    e922:	f7ff ffcf 	bl	e8c4 <get_comparator>
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    e926:	4d05      	ldr	r5, [pc, #20]	; (e93c <rtc_nrf_isr+0x20>)
    e928:	682c      	ldr	r4, [r5, #0]
    e92a:	4621      	mov	r1, r4
    e92c:	f008 f9e8 	bl	16d00 <counter_sub>

	last_count += dticks * CYC_PER_TICK;
    e930:	4404      	add	r4, r0
    e932:	602c      	str	r4, [r5, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    e934:	f006 fc10 	bl	15158 <z_clock_announce>
}
    e938:	bd38      	pop	{r3, r4, r5, pc}
    e93a:	bf00      	nop
    e93c:	20010564 	.word	0x20010564

0000e940 <prevent_false_prev_evt>:
{
    e940:	b538      	push	{r3, r4, r5, lr}
	uint32_t now = counter();
    e942:	f7ff ffe5 	bl	e910 <counter>
    e946:	4604      	mov	r4, r0
	prev_val = get_comparator();
    e948:	f7ff ffbc 	bl	e8c4 <get_comparator>
    e94c:	4605      	mov	r5, r0
	event_clear();
    e94e:	f7ff ffbf 	bl	e8d0 <event_clear>
	set_comparator(now);
    e952:	4620      	mov	r0, r4
    e954:	f7ff ffae 	bl	e8b4 <set_comparator>
	event_enable();
    e958:	f7ff ffc2 	bl	e8e0 <event_enable>
	if (counter_sub(prev_val, now) == 1) {
    e95c:	4621      	mov	r1, r4
    e95e:	4628      	mov	r0, r5
    e960:	f008 f9ce 	bl	16d00 <counter_sub>
    e964:	2801      	cmp	r0, #1
    e966:	d005      	beq.n	e974 <prevent_false_prev_evt+0x34>
    e968:	4b05      	ldr	r3, [pc, #20]	; (e980 <prevent_false_prev_evt+0x40>)
    e96a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    e96e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    e972:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_busy_wait(usec_to_wait);
    e974:	200f      	movs	r0, #15
    e976:	f00a fba7 	bl	190c8 <z_impl_k_busy_wait>
		event_clear();
    e97a:	f7ff ffa9 	bl	e8d0 <event_clear>
    e97e:	e7f3      	b.n	e968 <prevent_false_prev_evt+0x28>
    e980:	e000e100 	.word	0xe000e100

0000e984 <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
    e984:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    e986:	4d0f      	ldr	r5, [pc, #60]	; (e9c4 <z_clock_driver_init+0x40>)
    e988:	2400      	movs	r4, #0
    e98a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    e98e:	f7ff ff9f 	bl	e8d0 <event_clear>
    e992:	4b0d      	ldr	r3, [pc, #52]	; (e9c8 <z_clock_driver_init+0x44>)
    e994:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    e998:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();
    e99c:	f7ff ffb0 	bl	e900 <int_enable>

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    e9a0:	4622      	mov	r2, r4
    e9a2:	2101      	movs	r1, #1
    e9a4:	2015      	movs	r0, #21
    e9a6:	f000 f8e3 	bl	eb70 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    e9aa:	2015      	movs	r0, #21
    e9ac:	f000 f8c2 	bl	eb34 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    e9b0:	2301      	movs	r3, #1
    e9b2:	4a06      	ldr	r2, [pc, #24]	; (e9cc <z_clock_driver_init+0x48>)
    e9b4:	6013      	str	r3, [r2, #0]
    e9b6:	602b      	str	r3, [r5, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    e9b8:	2002      	movs	r0, #2
    e9ba:	f7ff ff55 	bl	e868 <z_nrf_clock_control_lf_on>

	return 0;
}
    e9be:	4620      	mov	r0, r4
    e9c0:	bd38      	pop	{r3, r4, r5, pc}
    e9c2:	bf00      	nop
    e9c4:	40015000 	.word	0x40015000
    e9c8:	e000e100 	.word	0xe000e100
    e9cc:	40015008 	.word	0x40015008

0000e9d0 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    e9d0:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    e9d2:	f1b0 3fff 	cmp.w	r0, #4294967295
    e9d6:	d01e      	beq.n	ea16 <z_clock_set_timeout+0x46>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    e9d8:	1e44      	subs	r4, r0, #1
    e9da:	4b11      	ldr	r3, [pc, #68]	; (ea20 <z_clock_set_timeout+0x50>)
    e9dc:	429c      	cmp	r4, r3
    e9de:	dc01      	bgt.n	e9e4 <z_clock_set_timeout+0x14>
    e9e0:	2c00      	cmp	r4, #0
    e9e2:	dd1b      	ble.n	ea1c <z_clock_set_timeout+0x4c>
    e9e4:	4b0e      	ldr	r3, [pc, #56]	; (ea20 <z_clock_set_timeout+0x50>)
    e9e6:	429c      	cmp	r4, r3
    e9e8:	dd00      	ble.n	e9ec <z_clock_set_timeout+0x1c>
    e9ea:	4c0e      	ldr	r4, [pc, #56]	; (ea24 <z_clock_set_timeout+0x54>)

	uint32_t unannounced = counter_sub(counter(), last_count);
    e9ec:	f7ff ff90 	bl	e910 <counter>
    e9f0:	4b0d      	ldr	r3, [pc, #52]	; (ea28 <z_clock_set_timeout+0x58>)
    e9f2:	681d      	ldr	r5, [r3, #0]
    e9f4:	4629      	mov	r1, r5
    e9f6:	f008 f983 	bl	16d00 <counter_sub>
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    e9fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    e9fe:	d300      	bcc.n	ea02 <z_clock_set_timeout+0x32>
		ticks = 0;
    ea00:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    ea02:	4420      	add	r0, r4
    ea04:	3001      	adds	r0, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    ea06:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ea0a:	d300      	bcc.n	ea0e <z_clock_set_timeout+0x3e>
		cyc = MAX_CYCLES;
    ea0c:	4805      	ldr	r0, [pc, #20]	; (ea24 <z_clock_set_timeout+0x54>)
	}

	cyc += last_count;
	set_protected_absolute_alarm(cyc);
    ea0e:	4428      	add	r0, r5
    ea10:	f008 f9ac 	bl	16d6c <set_protected_absolute_alarm>
}
    ea14:	bd38      	pop	{r3, r4, r5, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    ea16:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    ea1a:	e7dd      	b.n	e9d8 <z_clock_set_timeout+0x8>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    ea1c:	2400      	movs	r4, #0
    ea1e:	e7e5      	b.n	e9ec <z_clock_set_timeout+0x1c>
    ea20:	007ffffe 	.word	0x007ffffe
    ea24:	007fffff 	.word	0x007fffff
    ea28:	20010564 	.word	0x20010564

0000ea2c <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
    ea2c:	b510      	push	{r4, lr}
	__asm__ volatile(
    ea2e:	f04f 0320 	mov.w	r3, #32
    ea32:	f3ef 8411 	mrs	r4, BASEPRI
    ea36:	f383 8811 	msr	BASEPRI, r3
    ea3a:	f3bf 8f6f 	isb	sy
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    ea3e:	f7ff ff67 	bl	e910 <counter>
    ea42:	4b04      	ldr	r3, [pc, #16]	; (ea54 <z_clock_elapsed+0x28>)
    ea44:	6819      	ldr	r1, [r3, #0]
    ea46:	f008 f95b 	bl	16d00 <counter_sub>
	__asm__ volatile(
    ea4a:	f384 8811 	msr	BASEPRI, r4
    ea4e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    ea52:	bd10      	pop	{r4, pc}
    ea54:	20010564 	.word	0x20010564

0000ea58 <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
    ea58:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    ea5a:	f04f 0320 	mov.w	r3, #32
    ea5e:	f3ef 8511 	mrs	r5, BASEPRI
    ea62:	f383 8811 	msr	BASEPRI, r3
    ea66:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    ea6a:	f7ff ff51 	bl	e910 <counter>
    ea6e:	4b05      	ldr	r3, [pc, #20]	; (ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>)
    ea70:	681c      	ldr	r4, [r3, #0]
    ea72:	4621      	mov	r1, r4
    ea74:	f008 f944 	bl	16d00 <counter_sub>
    ea78:	4420      	add	r0, r4
	__asm__ volatile(
    ea7a:	f385 8811 	msr	BASEPRI, r5
    ea7e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    ea82:	bd38      	pop	{r3, r4, r5, pc}
    ea84:	20010564 	.word	0x20010564

0000ea88 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    ea88:	4a09      	ldr	r2, [pc, #36]	; (eab0 <arch_swap+0x28>)
    ea8a:	6893      	ldr	r3, [r2, #8]
    ea8c:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    ea8e:	4909      	ldr	r1, [pc, #36]	; (eab4 <arch_swap+0x2c>)
    ea90:	6809      	ldr	r1, [r1, #0]
    ea92:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    ea94:	4908      	ldr	r1, [pc, #32]	; (eab8 <arch_swap+0x30>)
    ea96:	684b      	ldr	r3, [r1, #4]
    ea98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    ea9c:	604b      	str	r3, [r1, #4]
    ea9e:	2300      	movs	r3, #0
    eaa0:	f383 8811 	msr	BASEPRI, r3
    eaa4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    eaa8:	6893      	ldr	r3, [r2, #8]
}
    eaaa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    eaac:	4770      	bx	lr
    eaae:	bf00      	nop
    eab0:	20010924 	.word	0x20010924
    eab4:	0001a56c 	.word	0x0001a56c
    eab8:	e000ed00 	.word	0xe000ed00

0000eabc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    eabc:	4913      	ldr	r1, [pc, #76]	; (eb0c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    eabe:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    eac0:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    eac4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    eac6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    eaca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    eace:	2020      	movs	r0, #32
    msr BASEPRI, r0
    ead0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ead4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ead8:	4f0d      	ldr	r7, [pc, #52]	; (eb10 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    eada:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    eade:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    eae0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    eae2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    eae4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    eae6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    eae8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    eaea:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    eaee:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    eaf2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    eaf6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    eafa:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    eafe:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    eb00:	f008 f956 	bl	16db0 <configure_builtin_stack_guard>
    pop {r2, lr}
    eb04:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    eb08:	4770      	bx	lr
    eb0a:	0000      	.short	0x0000
    ldr r1, =_kernel
    eb0c:	20010924 	.word	0x20010924
    ldr v4, =_SCS_ICSR
    eb10:	e000ed04 	.word	0xe000ed04

0000eb14 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    eb14:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    eb18:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    eb1a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    eb1e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    eb22:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    eb24:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    eb28:	2902      	cmp	r1, #2
    beq _oops
    eb2a:	d0ff      	beq.n	eb2c <_oops>

0000eb2c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    eb2c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    eb2e:	f008 f94f 	bl	16dd0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    eb32:	bd01      	pop	{r0, pc}

0000eb34 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    eb34:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    eb36:	2b00      	cmp	r3, #0
    eb38:	db08      	blt.n	eb4c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    eb3a:	f000 001f 	and.w	r0, r0, #31
    eb3e:	095b      	lsrs	r3, r3, #5
    eb40:	2201      	movs	r2, #1
    eb42:	fa02 f000 	lsl.w	r0, r2, r0
    eb46:	4a02      	ldr	r2, [pc, #8]	; (eb50 <arch_irq_enable+0x1c>)
    eb48:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    eb4c:	4770      	bx	lr
    eb4e:	bf00      	nop
    eb50:	e000e100 	.word	0xe000e100

0000eb54 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    eb54:	0942      	lsrs	r2, r0, #5
    eb56:	4b05      	ldr	r3, [pc, #20]	; (eb6c <arch_irq_is_enabled+0x18>)
    eb58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    eb5c:	f000 001f 	and.w	r0, r0, #31
    eb60:	2301      	movs	r3, #1
    eb62:	fa03 f000 	lsl.w	r0, r3, r0
}
    eb66:	4010      	ands	r0, r2
    eb68:	4770      	bx	lr
    eb6a:	bf00      	nop
    eb6c:	e000e100 	.word	0xe000e100

0000eb70 <z_arm_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    eb70:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    eb72:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    eb74:	2b00      	cmp	r3, #0
    eb76:	db08      	blt.n	eb8a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    eb78:	0149      	lsls	r1, r1, #5
    eb7a:	b2c9      	uxtb	r1, r1
    eb7c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    eb80:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    eb84:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    eb88:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    eb8a:	f000 000f 	and.w	r0, r0, #15
    eb8e:	0149      	lsls	r1, r1, #5
    eb90:	b2c9      	uxtb	r1, r1
    eb92:	4b01      	ldr	r3, [pc, #4]	; (eb98 <z_arm_irq_priority_set+0x28>)
    eb94:	5419      	strb	r1, [r3, r0]
}
    eb96:	4770      	bx	lr
    eb98:	e000ed14 	.word	0xe000ed14

0000eb9c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    eb9c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    eb9e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    eba2:	490c      	ldr	r1, [pc, #48]	; (ebd4 <arch_new_thread+0x38>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    eba4:	f021 0101 	bic.w	r1, r1, #1
    eba8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    ebac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    ebb0:	9b01      	ldr	r3, [sp, #4]
    ebb2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    ebb6:	9b02      	ldr	r3, [sp, #8]
    ebb8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    ebbc:	9b03      	ldr	r3, [sp, #12]
    ebbe:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    ebc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    ebc6:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    ebca:	6584      	str	r4, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    ebcc:	2300      	movs	r3, #0
    ebce:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    ebd0:	bc10      	pop	{r4}
    ebd2:	4770      	bx	lr
    ebd4:	00015c21 	.word	0x00015c21

0000ebd8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    ebd8:	b508      	push	{r3, lr}
    ebda:	4604      	mov	r4, r0
    ebdc:	460e      	mov	r6, r1
    ebde:	4615      	mov	r5, r2
	z_arm_prepare_switch_to_main();
    ebe0:	f008 f8e2 	bl	16da8 <z_arm_prepare_switch_to_main>

	_current = main_thread;
    ebe4:	4b08      	ldr	r3, [pc, #32]	; (ec08 <arch_switch_to_main_thread+0x30>)
    ebe6:	609c      	str	r4, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    ebe8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    ebea:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    ebee:	4628      	mov	r0, r5
    ebf0:	f386 8809 	msr	PSP, r6
    ebf4:	2100      	movs	r1, #0
    ebf6:	b663      	cpsie	if
    ebf8:	f381 8811 	msr	BASEPRI, r1
    ebfc:	f3bf 8f6f 	isb	sy
    ec00:	2200      	movs	r2, #0
    ec02:	2300      	movs	r3, #0
    ec04:	f007 f80c 	bl	15c20 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    ec08:	20010924 	.word	0x20010924

0000ec0c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    ec0c:	4901      	ldr	r1, [pc, #4]	; (ec14 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    ec0e:	2210      	movs	r2, #16
	str	r2, [r1]
    ec10:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    ec12:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    ec14:	e000ed10 	.word	0xe000ed10

0000ec18 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    ec18:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    ec1a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    ec1c:	f380 8811 	msr	BASEPRI, r0
	isb
    ec20:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    ec24:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    ec28:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    ec2a:	b662      	cpsie	i
	isb
    ec2c:	f3bf 8f6f 	isb	sy

	bx	lr
    ec30:	4770      	bx	lr
    ec32:	bf00      	nop

0000ec34 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    ec34:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    ec36:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    ec38:	f381 8811 	msr	BASEPRI, r1

	wfe
    ec3c:	bf20      	wfe

	msr	BASEPRI, r0
    ec3e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    ec42:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    ec44:	4770      	bx	lr
    ec46:	bf00      	nop

0000ec48 <esf_dump>:
#include <kernel.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

static void esf_dump(const z_arch_esf_t *esf)
{
    ec48:	b570      	push	{r4, r5, r6, lr}
    ec4a:	b082      	sub	sp, #8
    ec4c:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    ec4e:	2601      	movs	r6, #1
    ec50:	f04f 0300 	mov.w	r3, #0
    ec54:	f366 0302 	bfi	r3, r6, #0, #3
    ec58:	f36f 03c5 	bfc	r3, #3, #3
    ec5c:	4d1c      	ldr	r5, [pc, #112]	; (ecd0 <esf_dump+0x88>)
    ec5e:	4a1d      	ldr	r2, [pc, #116]	; (ecd4 <esf_dump+0x8c>)
    ec60:	1aad      	subs	r5, r5, r2
    ec62:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    ec66:	f365 138f 	bfi	r3, r5, #6, #10
    ec6a:	f8ad 3000 	strh.w	r3, [sp]
    ec6e:	6883      	ldr	r3, [r0, #8]
    ec70:	6842      	ldr	r2, [r0, #4]
    ec72:	6801      	ldr	r1, [r0, #0]
    ec74:	4818      	ldr	r0, [pc, #96]	; (ecd8 <esf_dump+0x90>)
    ec76:	f7fe ff0d 	bl	da94 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    ec7a:	f04f 0300 	mov.w	r3, #0
    ec7e:	f366 0302 	bfi	r3, r6, #0, #3
    ec82:	f36f 03c5 	bfc	r3, #3, #3
    ec86:	f365 138f 	bfi	r3, r5, #6, #10
    ec8a:	f8ad 3000 	strh.w	r3, [sp]
    ec8e:	6963      	ldr	r3, [r4, #20]
    ec90:	6922      	ldr	r2, [r4, #16]
    ec92:	68e1      	ldr	r1, [r4, #12]
    ec94:	4811      	ldr	r0, [pc, #68]	; (ecdc <esf_dump+0x94>)
    ec96:	f7fe fefd 	bl	da94 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    ec9a:	f04f 0200 	mov.w	r2, #0
    ec9e:	f366 0202 	bfi	r2, r6, #0, #3
    eca2:	f36f 02c5 	bfc	r2, #3, #3
    eca6:	f365 128f 	bfi	r2, r5, #6, #10
    ecaa:	69e1      	ldr	r1, [r4, #28]
    ecac:	480c      	ldr	r0, [pc, #48]	; (ece0 <esf_dump+0x98>)
    ecae:	f7fe ffb7 	bl	dc20 <log_1>
			callee->v4, callee->v5, callee->v6);
		LOG_ERR("r10/v7: 0x%08x  r11/v8: 0x%08x    psp:  0x%08x",
			callee->v7, callee->v8, callee->psp);
	}
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    ecb2:	f04f 0200 	mov.w	r2, #0
    ecb6:	f366 0202 	bfi	r2, r6, #0, #3
    ecba:	f36f 02c5 	bfc	r2, #3, #3
    ecbe:	f365 128f 	bfi	r2, r5, #6, #10
    ecc2:	69a1      	ldr	r1, [r4, #24]
    ecc4:	4807      	ldr	r0, [pc, #28]	; (ece4 <esf_dump+0x9c>)
    ecc6:	f7fe ffab 	bl	dc20 <log_1>
		esf->basic.pc);
}
    ecca:	b002      	add	sp, #8
    eccc:	bd70      	pop	{r4, r5, r6, pc}
    ecce:	bf00      	nop
    ecd0:	0001959c 	.word	0x0001959c
    ecd4:	00019574 	.word	0x00019574
    ecd8:	00019a40 	.word	0x00019a40
    ecdc:	00019a70 	.word	0x00019a70
    ece0:	00019aa0 	.word	0x00019aa0
    ece4:	00019ab0 	.word	0x00019ab0

0000ece8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    ece8:	bf30      	wfi
    b z_SysNmiOnReset
    ecea:	f7ff bffd 	b.w	ece8 <z_SysNmiOnReset>
    ecee:	bf00      	nop

0000ecf0 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    ecf0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ecf2:	4b0e      	ldr	r3, [pc, #56]	; (ed2c <z_arm_prep_c+0x3c>)
    ecf4:	4a0e      	ldr	r2, [pc, #56]	; (ed30 <z_arm_prep_c+0x40>)
    ecf6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    ecfa:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    ecfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ed00:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    ed04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    ed08:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    ed0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    ed10:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    ed14:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    ed18:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    ed1c:	f005 faae 	bl	1427c <z_bss_zero>
	z_data_copy();
    ed20:	f005 fab8 	bl	14294 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    ed24:	f000 fc04 	bl	f530 <z_arm_interrupt_init>
	z_cstart();
    ed28:	f005 faf2 	bl	14310 <z_cstart>
    ed2c:	e000ed00 	.word	0xe000ed00
    ed30:	0000c000 	.word	0x0000c000

0000ed34 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    ed34:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    ed36:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    ed38:	4a0b      	ldr	r2, [pc, #44]	; (ed68 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    ed3a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    ed3c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    ed3e:	bf1e      	ittt	ne
	movne	r1, #0
    ed40:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    ed42:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    ed44:	f009 ff76 	blne	18c34 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    ed48:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    ed4a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    ed4e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    ed52:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    ed56:	4905      	ldr	r1, [pc, #20]	; (ed6c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    ed58:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    ed5a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    ed5c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    ed5e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    ed62:	4903      	ldr	r1, [pc, #12]	; (ed70 <_isr_wrapper+0x3c>)
	bx r1
    ed64:	4708      	bx	r1
    ed66:	0000      	.short	0x0000
	ldr r2, =_kernel
    ed68:	20010924 	.word	0x20010924
	ldr r1, =_sw_isr_table
    ed6c:	0001936c 	.word	0x0001936c
	ldr r1, =z_arm_int_exit
    ed70:	0000f515 	.word	0x0000f515

0000ed74 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    ed74:	f007 fb04 	bl	16380 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ed78:	2020      	movs	r0, #32
    msr BASEPRI, r0
    ed7a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    ed7e:	4808      	ldr	r0, [pc, #32]	; (eda0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    ed80:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    ed84:	1840      	adds	r0, r0, r1
    msr PSP, r0
    ed86:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    ed8a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    ed8e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    ed90:	4308      	orrs	r0, r1
    msr CONTROL, r0
    ed92:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    ed96:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    ed9a:	f7ff ffa9 	bl	ecf0 <z_arm_prep_c>
    ed9e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    eda0:	200115b0 	.word	0x200115b0

0000eda4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    eda4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    eda8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    edac:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    edae:	4672      	mov	r2, lr
	bl z_arm_fault
    edb0:	f000 fb2e 	bl	f410 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    edb4:	bd01      	pop	{r0, pc}
    edb6:	bf00      	nop

0000edb8 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    edb8:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    edba:	f04f 0100 	mov.w	r1, #0
    edbe:	2301      	movs	r3, #1
    edc0:	f363 0102 	bfi	r1, r3, #0, #3
    edc4:	f36f 01c5 	bfc	r1, #3, #3
    edc8:	4b5a      	ldr	r3, [pc, #360]	; (ef34 <usage_fault+0x17c>)
    edca:	4a5b      	ldr	r2, [pc, #364]	; (ef38 <usage_fault+0x180>)
    edcc:	1a9b      	subs	r3, r3, r2
    edce:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    edd2:	f363 118f 	bfi	r1, r3, #6, #10
    edd6:	4859      	ldr	r0, [pc, #356]	; (ef3c <usage_fault+0x184>)
    edd8:	f7ff f882 	bl	dee0 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    eddc:	4b58      	ldr	r3, [pc, #352]	; (ef40 <usage_fault+0x188>)
    edde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ede0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    ede4:	d126      	bne.n	ee34 <usage_fault+0x7c>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    ede6:	4b56      	ldr	r3, [pc, #344]	; (ef40 <usage_fault+0x188>)
    ede8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    edea:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    edee:	d133      	bne.n	ee58 <usage_fault+0xa0>
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    edf0:	4b53      	ldr	r3, [pc, #332]	; (ef40 <usage_fault+0x188>)
    edf2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    edf4:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    edf8:	d140      	bne.n	ee7c <usage_fault+0xc4>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    edfa:	4b51      	ldr	r3, [pc, #324]	; (ef40 <usage_fault+0x188>)
    edfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    edfe:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    ee02:	d14e      	bne.n	eea2 <usage_fault+0xea>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    ee04:	4b4e      	ldr	r3, [pc, #312]	; (ef40 <usage_fault+0x188>)
    ee06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ee08:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    ee0c:	d15b      	bne.n	eec6 <usage_fault+0x10e>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    ee0e:	4b4c      	ldr	r3, [pc, #304]	; (ef40 <usage_fault+0x188>)
    ee10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ee12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    ee16:	d168      	bne.n	eeea <usage_fault+0x132>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    ee18:	4b49      	ldr	r3, [pc, #292]	; (ef40 <usage_fault+0x188>)
    ee1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ee1c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    ee20:	d175      	bne.n	ef0e <usage_fault+0x156>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    ee22:	4a47      	ldr	r2, [pc, #284]	; (ef40 <usage_fault+0x188>)
    ee24:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ee26:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    ee2a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    ee2e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    ee30:	4620      	mov	r0, r4
    ee32:	bd10      	pop	{r4, pc}
		PR_FAULT_INFO("  Division by zero");
    ee34:	f04f 0100 	mov.w	r1, #0
    ee38:	2301      	movs	r3, #1
    ee3a:	f363 0102 	bfi	r1, r3, #0, #3
    ee3e:	f36f 01c5 	bfc	r1, #3, #3
    ee42:	4b3c      	ldr	r3, [pc, #240]	; (ef34 <usage_fault+0x17c>)
    ee44:	4a3c      	ldr	r2, [pc, #240]	; (ef38 <usage_fault+0x180>)
    ee46:	1a9b      	subs	r3, r3, r2
    ee48:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    ee4c:	f363 118f 	bfi	r1, r3, #6, #10
    ee50:	483c      	ldr	r0, [pc, #240]	; (ef44 <usage_fault+0x18c>)
    ee52:	f7ff f845 	bl	dee0 <log_0>
    ee56:	e7c6      	b.n	ede6 <usage_fault+0x2e>
		PR_FAULT_INFO("  Unaligned memory access");
    ee58:	f04f 0100 	mov.w	r1, #0
    ee5c:	2301      	movs	r3, #1
    ee5e:	f363 0102 	bfi	r1, r3, #0, #3
    ee62:	f36f 01c5 	bfc	r1, #3, #3
    ee66:	4b33      	ldr	r3, [pc, #204]	; (ef34 <usage_fault+0x17c>)
    ee68:	4a33      	ldr	r2, [pc, #204]	; (ef38 <usage_fault+0x180>)
    ee6a:	1a9b      	subs	r3, r3, r2
    ee6c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    ee70:	f363 118f 	bfi	r1, r3, #6, #10
    ee74:	4834      	ldr	r0, [pc, #208]	; (ef48 <usage_fault+0x190>)
    ee76:	f7ff f833 	bl	dee0 <log_0>
    ee7a:	e7b9      	b.n	edf0 <usage_fault+0x38>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    ee7c:	f04f 0100 	mov.w	r1, #0
    ee80:	2301      	movs	r3, #1
    ee82:	f363 0102 	bfi	r1, r3, #0, #3
    ee86:	f36f 01c5 	bfc	r1, #3, #3
    ee8a:	4b2a      	ldr	r3, [pc, #168]	; (ef34 <usage_fault+0x17c>)
    ee8c:	4a2a      	ldr	r2, [pc, #168]	; (ef38 <usage_fault+0x180>)
    ee8e:	1a9b      	subs	r3, r3, r2
    ee90:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    ee94:	f363 118f 	bfi	r1, r3, #6, #10
    ee98:	482c      	ldr	r0, [pc, #176]	; (ef4c <usage_fault+0x194>)
    ee9a:	f7ff f821 	bl	dee0 <log_0>
		reason = K_ERR_STACK_CHK_FAIL;
    ee9e:	2402      	movs	r4, #2
    eea0:	e7ab      	b.n	edfa <usage_fault+0x42>
		PR_FAULT_INFO("  No coprocessor instructions");
    eea2:	f04f 0100 	mov.w	r1, #0
    eea6:	2301      	movs	r3, #1
    eea8:	f363 0102 	bfi	r1, r3, #0, #3
    eeac:	f36f 01c5 	bfc	r1, #3, #3
    eeb0:	4b20      	ldr	r3, [pc, #128]	; (ef34 <usage_fault+0x17c>)
    eeb2:	4a21      	ldr	r2, [pc, #132]	; (ef38 <usage_fault+0x180>)
    eeb4:	1a9b      	subs	r3, r3, r2
    eeb6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    eeba:	f363 118f 	bfi	r1, r3, #6, #10
    eebe:	4824      	ldr	r0, [pc, #144]	; (ef50 <usage_fault+0x198>)
    eec0:	f7ff f80e 	bl	dee0 <log_0>
    eec4:	e79e      	b.n	ee04 <usage_fault+0x4c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    eec6:	f04f 0100 	mov.w	r1, #0
    eeca:	2301      	movs	r3, #1
    eecc:	f363 0102 	bfi	r1, r3, #0, #3
    eed0:	f36f 01c5 	bfc	r1, #3, #3
    eed4:	4b17      	ldr	r3, [pc, #92]	; (ef34 <usage_fault+0x17c>)
    eed6:	4a18      	ldr	r2, [pc, #96]	; (ef38 <usage_fault+0x180>)
    eed8:	1a9b      	subs	r3, r3, r2
    eeda:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    eede:	f363 118f 	bfi	r1, r3, #6, #10
    eee2:	481c      	ldr	r0, [pc, #112]	; (ef54 <usage_fault+0x19c>)
    eee4:	f7fe fffc 	bl	dee0 <log_0>
    eee8:	e791      	b.n	ee0e <usage_fault+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    eeea:	f04f 0100 	mov.w	r1, #0
    eeee:	2301      	movs	r3, #1
    eef0:	f363 0102 	bfi	r1, r3, #0, #3
    eef4:	f36f 01c5 	bfc	r1, #3, #3
    eef8:	4b0e      	ldr	r3, [pc, #56]	; (ef34 <usage_fault+0x17c>)
    eefa:	4a0f      	ldr	r2, [pc, #60]	; (ef38 <usage_fault+0x180>)
    eefc:	1a9b      	subs	r3, r3, r2
    eefe:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    ef02:	f363 118f 	bfi	r1, r3, #6, #10
    ef06:	4814      	ldr	r0, [pc, #80]	; (ef58 <usage_fault+0x1a0>)
    ef08:	f7fe ffea 	bl	dee0 <log_0>
    ef0c:	e784      	b.n	ee18 <usage_fault+0x60>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    ef0e:	f04f 0100 	mov.w	r1, #0
    ef12:	2301      	movs	r3, #1
    ef14:	f363 0102 	bfi	r1, r3, #0, #3
    ef18:	f36f 01c5 	bfc	r1, #3, #3
    ef1c:	4b05      	ldr	r3, [pc, #20]	; (ef34 <usage_fault+0x17c>)
    ef1e:	4a06      	ldr	r2, [pc, #24]	; (ef38 <usage_fault+0x180>)
    ef20:	1a9b      	subs	r3, r3, r2
    ef22:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    ef26:	f363 118f 	bfi	r1, r3, #6, #10
    ef2a:	480c      	ldr	r0, [pc, #48]	; (ef5c <usage_fault+0x1a4>)
    ef2c:	f7fe ffd8 	bl	dee0 <log_0>
    ef30:	e777      	b.n	ee22 <usage_fault+0x6a>
    ef32:	bf00      	nop
    ef34:	0001959c 	.word	0x0001959c
    ef38:	00019574 	.word	0x00019574
    ef3c:	00019ae0 	.word	0x00019ae0
    ef40:	e000ed00 	.word	0xe000ed00
    ef44:	00019af8 	.word	0x00019af8
    ef48:	00019b0c 	.word	0x00019b0c
    ef4c:	00019b28 	.word	0x00019b28
    ef50:	00019b54 	.word	0x00019b54
    ef54:	00019b74 	.word	0x00019b74
    ef58:	00019b9c 	.word	0x00019b9c
    ef5c:	00019bb8 	.word	0x00019bb8

0000ef60 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(const z_arch_esf_t *esf)
{
    ef60:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_FAULT_INFO(
    ef62:	f04f 0100 	mov.w	r1, #0
    ef66:	2301      	movs	r3, #1
    ef68:	f363 0102 	bfi	r1, r3, #0, #3
    ef6c:	f36f 01c5 	bfc	r1, #3, #3
    ef70:	4b05      	ldr	r3, [pc, #20]	; (ef88 <debug_monitor+0x28>)
    ef72:	4a06      	ldr	r2, [pc, #24]	; (ef8c <debug_monitor+0x2c>)
    ef74:	1a9b      	subs	r3, r3, r2
    ef76:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    ef7a:	f363 118f 	bfi	r1, r3, #6, #10
    ef7e:	4804      	ldr	r0, [pc, #16]	; (ef90 <debug_monitor+0x30>)
    ef80:	f7fe ffae 	bl	dee0 <log_0>
		"***** Debug monitor exception (not implemented) *****");
}
    ef84:	bd08      	pop	{r3, pc}
    ef86:	bf00      	nop
    ef88:	0001959c 	.word	0x0001959c
    ef8c:	00019574 	.word	0x00019574
    ef90:	00019be4 	.word	0x00019be4

0000ef94 <mem_manage_fault>:
{
    ef94:	b570      	push	{r4, r5, r6, lr}
    ef96:	4605      	mov	r5, r0
    ef98:	460e      	mov	r6, r1
    ef9a:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    ef9c:	f04f 0100 	mov.w	r1, #0
    efa0:	2301      	movs	r3, #1
    efa2:	f363 0102 	bfi	r1, r3, #0, #3
    efa6:	f36f 01c5 	bfc	r1, #3, #3
    efaa:	4b53      	ldr	r3, [pc, #332]	; (f0f8 <mem_manage_fault+0x164>)
    efac:	4a53      	ldr	r2, [pc, #332]	; (f0fc <mem_manage_fault+0x168>)
    efae:	1a9b      	subs	r3, r3, r2
    efb0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    efb4:	f363 118f 	bfi	r1, r3, #6, #10
    efb8:	4851      	ldr	r0, [pc, #324]	; (f100 <mem_manage_fault+0x16c>)
    efba:	f7fe ff91 	bl	dee0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    efbe:	4b51      	ldr	r3, [pc, #324]	; (f104 <mem_manage_fault+0x170>)
    efc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    efc2:	f013 0f10 	tst.w	r3, #16
    efc6:	d11f      	bne.n	f008 <mem_manage_fault+0x74>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    efc8:	4b4e      	ldr	r3, [pc, #312]	; (f104 <mem_manage_fault+0x170>)
    efca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    efcc:	f013 0f08 	tst.w	r3, #8
    efd0:	d12c      	bne.n	f02c <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    efd2:	4b4c      	ldr	r3, [pc, #304]	; (f104 <mem_manage_fault+0x170>)
    efd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    efd6:	f013 0f02 	tst.w	r3, #2
    efda:	d139      	bne.n	f050 <mem_manage_fault+0xbc>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    efdc:	4b49      	ldr	r3, [pc, #292]	; (f104 <mem_manage_fault+0x170>)
    efde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    efe0:	f013 0f01 	tst.w	r3, #1
    efe4:	d164      	bne.n	f0b0 <mem_manage_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    efe6:	4b47      	ldr	r3, [pc, #284]	; (f104 <mem_manage_fault+0x170>)
    efe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    efea:	f013 0f20 	tst.w	r3, #32
    efee:	d171      	bne.n	f0d4 <mem_manage_fault+0x140>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    eff0:	4b44      	ldr	r3, [pc, #272]	; (f104 <mem_manage_fault+0x170>)
    eff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    eff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    eff6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    effa:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    effc:	4628      	mov	r0, r5
    effe:	f007 fef3 	bl	16de8 <memory_fault_recoverable>
    f002:	7020      	strb	r0, [r4, #0]
}
    f004:	2000      	movs	r0, #0
    f006:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    f008:	f04f 0100 	mov.w	r1, #0
    f00c:	2301      	movs	r3, #1
    f00e:	f363 0102 	bfi	r1, r3, #0, #3
    f012:	f36f 01c5 	bfc	r1, #3, #3
    f016:	4b38      	ldr	r3, [pc, #224]	; (f0f8 <mem_manage_fault+0x164>)
    f018:	4a38      	ldr	r2, [pc, #224]	; (f0fc <mem_manage_fault+0x168>)
    f01a:	1a9b      	subs	r3, r3, r2
    f01c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f020:	f363 118f 	bfi	r1, r3, #6, #10
    f024:	4838      	ldr	r0, [pc, #224]	; (f108 <mem_manage_fault+0x174>)
    f026:	f7fe ff5b 	bl	dee0 <log_0>
    f02a:	e7cd      	b.n	efc8 <mem_manage_fault+0x34>
		PR_FAULT_INFO("  Unstacking error");
    f02c:	f04f 0100 	mov.w	r1, #0
    f030:	2301      	movs	r3, #1
    f032:	f363 0102 	bfi	r1, r3, #0, #3
    f036:	f36f 01c5 	bfc	r1, #3, #3
    f03a:	4b2f      	ldr	r3, [pc, #188]	; (f0f8 <mem_manage_fault+0x164>)
    f03c:	4a2f      	ldr	r2, [pc, #188]	; (f0fc <mem_manage_fault+0x168>)
    f03e:	1a9b      	subs	r3, r3, r2
    f040:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f044:	f363 118f 	bfi	r1, r3, #6, #10
    f048:	4830      	ldr	r0, [pc, #192]	; (f10c <mem_manage_fault+0x178>)
    f04a:	f7fe ff49 	bl	dee0 <log_0>
    f04e:	e7c0      	b.n	efd2 <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Data Access Violation");
    f050:	f04f 0100 	mov.w	r1, #0
    f054:	2301      	movs	r3, #1
    f056:	f363 0102 	bfi	r1, r3, #0, #3
    f05a:	f36f 01c5 	bfc	r1, #3, #3
    f05e:	4b26      	ldr	r3, [pc, #152]	; (f0f8 <mem_manage_fault+0x164>)
    f060:	4a26      	ldr	r2, [pc, #152]	; (f0fc <mem_manage_fault+0x168>)
    f062:	1a9b      	subs	r3, r3, r2
    f064:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f068:	f363 118f 	bfi	r1, r3, #6, #10
    f06c:	4828      	ldr	r0, [pc, #160]	; (f110 <mem_manage_fault+0x17c>)
    f06e:	f7fe ff37 	bl	dee0 <log_0>
		mmfar = SCB->MMFAR;
    f072:	4b24      	ldr	r3, [pc, #144]	; (f104 <mem_manage_fault+0x170>)
    f074:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    f076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f078:	f013 0f80 	tst.w	r3, #128	; 0x80
    f07c:	d0ae      	beq.n	efdc <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    f07e:	f04f 0200 	mov.w	r2, #0
    f082:	2301      	movs	r3, #1
    f084:	f363 0202 	bfi	r2, r3, #0, #3
    f088:	f36f 02c5 	bfc	r2, #3, #3
    f08c:	4b1a      	ldr	r3, [pc, #104]	; (f0f8 <mem_manage_fault+0x164>)
    f08e:	481b      	ldr	r0, [pc, #108]	; (f0fc <mem_manage_fault+0x168>)
    f090:	1a1b      	subs	r3, r3, r0
    f092:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f096:	f363 128f 	bfi	r2, r3, #6, #10
    f09a:	481e      	ldr	r0, [pc, #120]	; (f114 <mem_manage_fault+0x180>)
    f09c:	f7fe fdc0 	bl	dc20 <log_1>
			if (from_hard_fault) {
    f0a0:	2e00      	cmp	r6, #0
    f0a2:	d09b      	beq.n	efdc <mem_manage_fault+0x48>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    f0a4:	4a17      	ldr	r2, [pc, #92]	; (f104 <mem_manage_fault+0x170>)
    f0a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f0a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f0ac:	6293      	str	r3, [r2, #40]	; 0x28
    f0ae:	e795      	b.n	efdc <mem_manage_fault+0x48>
		PR_FAULT_INFO("  Instruction Access Violation");
    f0b0:	f04f 0100 	mov.w	r1, #0
    f0b4:	2301      	movs	r3, #1
    f0b6:	f363 0102 	bfi	r1, r3, #0, #3
    f0ba:	f36f 01c5 	bfc	r1, #3, #3
    f0be:	4b0e      	ldr	r3, [pc, #56]	; (f0f8 <mem_manage_fault+0x164>)
    f0c0:	4a0e      	ldr	r2, [pc, #56]	; (f0fc <mem_manage_fault+0x168>)
    f0c2:	1a9b      	subs	r3, r3, r2
    f0c4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f0c8:	f363 118f 	bfi	r1, r3, #6, #10
    f0cc:	4812      	ldr	r0, [pc, #72]	; (f118 <mem_manage_fault+0x184>)
    f0ce:	f7fe ff07 	bl	dee0 <log_0>
    f0d2:	e788      	b.n	efe6 <mem_manage_fault+0x52>
		PR_FAULT_INFO(
    f0d4:	f04f 0100 	mov.w	r1, #0
    f0d8:	2301      	movs	r3, #1
    f0da:	f363 0102 	bfi	r1, r3, #0, #3
    f0de:	f36f 01c5 	bfc	r1, #3, #3
    f0e2:	4b05      	ldr	r3, [pc, #20]	; (f0f8 <mem_manage_fault+0x164>)
    f0e4:	4a05      	ldr	r2, [pc, #20]	; (f0fc <mem_manage_fault+0x168>)
    f0e6:	1a9b      	subs	r3, r3, r2
    f0e8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f0ec:	f363 118f 	bfi	r1, r3, #6, #10
    f0f0:	480a      	ldr	r0, [pc, #40]	; (f11c <mem_manage_fault+0x188>)
    f0f2:	f7fe fef5 	bl	dee0 <log_0>
    f0f6:	e77b      	b.n	eff0 <mem_manage_fault+0x5c>
    f0f8:	0001959c 	.word	0x0001959c
    f0fc:	00019574 	.word	0x00019574
    f100:	00019c1c 	.word	0x00019c1c
    f104:	e000ed00 	.word	0xe000ed00
    f108:	00019c34 	.word	0x00019c34
    f10c:	00019c68 	.word	0x00019c68
    f110:	00019c7c 	.word	0x00019c7c
    f114:	00019c94 	.word	0x00019c94
    f118:	00019cac 	.word	0x00019cac
    f11c:	00019ccc 	.word	0x00019ccc

0000f120 <bus_fault>:
{
    f120:	b570      	push	{r4, r5, r6, lr}
    f122:	4605      	mov	r5, r0
    f124:	460e      	mov	r6, r1
    f126:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
    f128:	f04f 0100 	mov.w	r1, #0
    f12c:	2301      	movs	r3, #1
    f12e:	f363 0102 	bfi	r1, r3, #0, #3
    f132:	f36f 01c5 	bfc	r1, #3, #3
    f136:	4b5f      	ldr	r3, [pc, #380]	; (f2b4 <bus_fault+0x194>)
    f138:	4a5f      	ldr	r2, [pc, #380]	; (f2b8 <bus_fault+0x198>)
    f13a:	1a9b      	subs	r3, r3, r2
    f13c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f140:	f363 118f 	bfi	r1, r3, #6, #10
    f144:	485d      	ldr	r0, [pc, #372]	; (f2bc <bus_fault+0x19c>)
    f146:	f7fe fecb 	bl	dee0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    f14a:	4b5d      	ldr	r3, [pc, #372]	; (f2c0 <bus_fault+0x1a0>)
    f14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f14e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    f152:	d124      	bne.n	f19e <bus_fault+0x7e>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    f154:	4b5a      	ldr	r3, [pc, #360]	; (f2c0 <bus_fault+0x1a0>)
    f156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f158:	f413 6f00 	tst.w	r3, #2048	; 0x800
    f15c:	d131      	bne.n	f1c2 <bus_fault+0xa2>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    f15e:	4b58      	ldr	r3, [pc, #352]	; (f2c0 <bus_fault+0x1a0>)
    f160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f162:	f413 7f00 	tst.w	r3, #512	; 0x200
    f166:	d13e      	bne.n	f1e6 <bus_fault+0xc6>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    f168:	4b55      	ldr	r3, [pc, #340]	; (f2c0 <bus_fault+0x1a0>)
    f16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f16c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    f170:	d169      	bne.n	f246 <bus_fault+0x126>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    f172:	4b53      	ldr	r3, [pc, #332]	; (f2c0 <bus_fault+0x1a0>)
    f174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f176:	f413 7f80 	tst.w	r3, #256	; 0x100
    f17a:	d176      	bne.n	f26a <bus_fault+0x14a>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    f17c:	4b50      	ldr	r3, [pc, #320]	; (f2c0 <bus_fault+0x1a0>)
    f17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f180:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    f184:	f040 8083 	bne.w	f28e <bus_fault+0x16e>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    f188:	4a4d      	ldr	r2, [pc, #308]	; (f2c0 <bus_fault+0x1a0>)
    f18a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f18c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    f190:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    f192:	4628      	mov	r0, r5
    f194:	f007 fe28 	bl	16de8 <memory_fault_recoverable>
    f198:	7020      	strb	r0, [r4, #0]
}
    f19a:	2000      	movs	r0, #0
    f19c:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    f19e:	f04f 0100 	mov.w	r1, #0
    f1a2:	2301      	movs	r3, #1
    f1a4:	f363 0102 	bfi	r1, r3, #0, #3
    f1a8:	f36f 01c5 	bfc	r1, #3, #3
    f1ac:	4b41      	ldr	r3, [pc, #260]	; (f2b4 <bus_fault+0x194>)
    f1ae:	4a42      	ldr	r2, [pc, #264]	; (f2b8 <bus_fault+0x198>)
    f1b0:	1a9b      	subs	r3, r3, r2
    f1b2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f1b6:	f363 118f 	bfi	r1, r3, #6, #10
    f1ba:	4842      	ldr	r0, [pc, #264]	; (f2c4 <bus_fault+0x1a4>)
    f1bc:	f7fe fe90 	bl	dee0 <log_0>
    f1c0:	e7c8      	b.n	f154 <bus_fault+0x34>
		PR_FAULT_INFO("  Unstacking error");
    f1c2:	f04f 0100 	mov.w	r1, #0
    f1c6:	2301      	movs	r3, #1
    f1c8:	f363 0102 	bfi	r1, r3, #0, #3
    f1cc:	f36f 01c5 	bfc	r1, #3, #3
    f1d0:	4b38      	ldr	r3, [pc, #224]	; (f2b4 <bus_fault+0x194>)
    f1d2:	4a39      	ldr	r2, [pc, #228]	; (f2b8 <bus_fault+0x198>)
    f1d4:	1a9b      	subs	r3, r3, r2
    f1d6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f1da:	f363 118f 	bfi	r1, r3, #6, #10
    f1de:	483a      	ldr	r0, [pc, #232]	; (f2c8 <bus_fault+0x1a8>)
    f1e0:	f7fe fe7e 	bl	dee0 <log_0>
    f1e4:	e7bb      	b.n	f15e <bus_fault+0x3e>
		PR_FAULT_INFO("  Precise data bus error");
    f1e6:	f04f 0100 	mov.w	r1, #0
    f1ea:	2301      	movs	r3, #1
    f1ec:	f363 0102 	bfi	r1, r3, #0, #3
    f1f0:	f36f 01c5 	bfc	r1, #3, #3
    f1f4:	4b2f      	ldr	r3, [pc, #188]	; (f2b4 <bus_fault+0x194>)
    f1f6:	4a30      	ldr	r2, [pc, #192]	; (f2b8 <bus_fault+0x198>)
    f1f8:	1a9b      	subs	r3, r3, r2
    f1fa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f1fe:	f363 118f 	bfi	r1, r3, #6, #10
    f202:	4832      	ldr	r0, [pc, #200]	; (f2cc <bus_fault+0x1ac>)
    f204:	f7fe fe6c 	bl	dee0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    f208:	4b2d      	ldr	r3, [pc, #180]	; (f2c0 <bus_fault+0x1a0>)
    f20a:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    f20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f20e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    f212:	d0a9      	beq.n	f168 <bus_fault+0x48>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    f214:	f04f 0200 	mov.w	r2, #0
    f218:	2301      	movs	r3, #1
    f21a:	f363 0202 	bfi	r2, r3, #0, #3
    f21e:	f36f 02c5 	bfc	r2, #3, #3
    f222:	4b24      	ldr	r3, [pc, #144]	; (f2b4 <bus_fault+0x194>)
    f224:	4824      	ldr	r0, [pc, #144]	; (f2b8 <bus_fault+0x198>)
    f226:	1a1b      	subs	r3, r3, r0
    f228:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f22c:	f363 128f 	bfi	r2, r3, #6, #10
    f230:	4827      	ldr	r0, [pc, #156]	; (f2d0 <bus_fault+0x1b0>)
    f232:	f7fe fcf5 	bl	dc20 <log_1>
			if (from_hard_fault) {
    f236:	2e00      	cmp	r6, #0
    f238:	d096      	beq.n	f168 <bus_fault+0x48>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    f23a:	4a21      	ldr	r2, [pc, #132]	; (f2c0 <bus_fault+0x1a0>)
    f23c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f23e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    f242:	6293      	str	r3, [r2, #40]	; 0x28
    f244:	e790      	b.n	f168 <bus_fault+0x48>
		PR_FAULT_INFO("  Imprecise data bus error");
    f246:	f04f 0100 	mov.w	r1, #0
    f24a:	2301      	movs	r3, #1
    f24c:	f363 0102 	bfi	r1, r3, #0, #3
    f250:	f36f 01c5 	bfc	r1, #3, #3
    f254:	4b17      	ldr	r3, [pc, #92]	; (f2b4 <bus_fault+0x194>)
    f256:	4a18      	ldr	r2, [pc, #96]	; (f2b8 <bus_fault+0x198>)
    f258:	1a9b      	subs	r3, r3, r2
    f25a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f25e:	f363 118f 	bfi	r1, r3, #6, #10
    f262:	481c      	ldr	r0, [pc, #112]	; (f2d4 <bus_fault+0x1b4>)
    f264:	f7fe fe3c 	bl	dee0 <log_0>
    f268:	e783      	b.n	f172 <bus_fault+0x52>
		PR_FAULT_INFO("  Instruction bus error");
    f26a:	f04f 0100 	mov.w	r1, #0
    f26e:	2301      	movs	r3, #1
    f270:	f363 0102 	bfi	r1, r3, #0, #3
    f274:	f36f 01c5 	bfc	r1, #3, #3
    f278:	4b0e      	ldr	r3, [pc, #56]	; (f2b4 <bus_fault+0x194>)
    f27a:	4a0f      	ldr	r2, [pc, #60]	; (f2b8 <bus_fault+0x198>)
    f27c:	1a9b      	subs	r3, r3, r2
    f27e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f282:	f363 118f 	bfi	r1, r3, #6, #10
    f286:	4814      	ldr	r0, [pc, #80]	; (f2d8 <bus_fault+0x1b8>)
    f288:	f7fe fe2a 	bl	dee0 <log_0>
    f28c:	e77c      	b.n	f188 <bus_fault+0x68>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f28e:	f04f 0100 	mov.w	r1, #0
    f292:	2301      	movs	r3, #1
    f294:	f363 0102 	bfi	r1, r3, #0, #3
    f298:	f36f 01c5 	bfc	r1, #3, #3
    f29c:	4b05      	ldr	r3, [pc, #20]	; (f2b4 <bus_fault+0x194>)
    f29e:	4a06      	ldr	r2, [pc, #24]	; (f2b8 <bus_fault+0x198>)
    f2a0:	1a9b      	subs	r3, r3, r2
    f2a2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f2a6:	f363 118f 	bfi	r1, r3, #6, #10
    f2aa:	480c      	ldr	r0, [pc, #48]	; (f2dc <bus_fault+0x1bc>)
    f2ac:	f7fe fe18 	bl	dee0 <log_0>
    f2b0:	e76a      	b.n	f188 <bus_fault+0x68>
    f2b2:	bf00      	nop
    f2b4:	0001959c 	.word	0x0001959c
    f2b8:	00019574 	.word	0x00019574
    f2bc:	00019cfc 	.word	0x00019cfc
    f2c0:	e000ed00 	.word	0xe000ed00
    f2c4:	00019d14 	.word	0x00019d14
    f2c8:	00019c68 	.word	0x00019c68
    f2cc:	00019d28 	.word	0x00019d28
    f2d0:	00019d44 	.word	0x00019d44
    f2d4:	00019d5c 	.word	0x00019d5c
    f2d8:	00019d78 	.word	0x00019d78
    f2dc:	00019ccc 	.word	0x00019ccc

0000f2e0 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    f2e0:	b570      	push	{r4, r5, r6, lr}
    f2e2:	4605      	mov	r5, r0
    f2e4:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    f2e6:	f04f 0100 	mov.w	r1, #0
    f2ea:	2301      	movs	r3, #1
    f2ec:	f363 0102 	bfi	r1, r3, #0, #3
    f2f0:	f36f 01c5 	bfc	r1, #3, #3
    f2f4:	4b2b      	ldr	r3, [pc, #172]	; (f3a4 <hard_fault+0xc4>)
    f2f6:	4a2c      	ldr	r2, [pc, #176]	; (f3a8 <hard_fault+0xc8>)
    f2f8:	1a9b      	subs	r3, r3, r2
    f2fa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f2fe:	f363 118f 	bfi	r1, r3, #6, #10
    f302:	482a      	ldr	r0, [pc, #168]	; (f3ac <hard_fault+0xcc>)
    f304:	f7fe fdec 	bl	dee0 <log_0>
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    f308:	2300      	movs	r3, #0
    f30a:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    f30c:	4b28      	ldr	r3, [pc, #160]	; (f3b0 <hard_fault+0xd0>)
    f30e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    f310:	f016 0602 	ands.w	r6, r6, #2
    f314:	d105      	bne.n	f322 <hard_fault+0x42>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    f316:	4b26      	ldr	r3, [pc, #152]	; (f3b0 <hard_fault+0xd0>)
    f318:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    f31a:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    f31e:	d113      	bne.n	f348 <hard_fault+0x68>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    f320:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("  Bus fault on vector table read");
    f322:	f04f 0100 	mov.w	r1, #0
    f326:	2301      	movs	r3, #1
    f328:	f363 0102 	bfi	r1, r3, #0, #3
    f32c:	f36f 01c5 	bfc	r1, #3, #3
    f330:	4b1c      	ldr	r3, [pc, #112]	; (f3a4 <hard_fault+0xc4>)
    f332:	4a1d      	ldr	r2, [pc, #116]	; (f3a8 <hard_fault+0xc8>)
    f334:	1a9b      	subs	r3, r3, r2
    f336:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f33a:	f363 118f 	bfi	r1, r3, #6, #10
    f33e:	481d      	ldr	r0, [pc, #116]	; (f3b4 <hard_fault+0xd4>)
    f340:	f7fe fdce 	bl	dee0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f344:	2000      	movs	r0, #0
    f346:	e7eb      	b.n	f320 <hard_fault+0x40>
		PR_EXC("  Fault escalation (see below)");
    f348:	f04f 0100 	mov.w	r1, #0
    f34c:	2301      	movs	r3, #1
    f34e:	f363 0102 	bfi	r1, r3, #0, #3
    f352:	f36f 01c5 	bfc	r1, #3, #3
    f356:	4b13      	ldr	r3, [pc, #76]	; (f3a4 <hard_fault+0xc4>)
    f358:	4a13      	ldr	r2, [pc, #76]	; (f3a8 <hard_fault+0xc8>)
    f35a:	1a9b      	subs	r3, r3, r2
    f35c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f360:	f363 118f 	bfi	r1, r3, #6, #10
    f364:	4814      	ldr	r0, [pc, #80]	; (f3b8 <hard_fault+0xd8>)
    f366:	f7fe fdbb 	bl	dee0 <log_0>
		if (SCB_MMFSR != 0) {
    f36a:	4b14      	ldr	r3, [pc, #80]	; (f3bc <hard_fault+0xdc>)
    f36c:	781b      	ldrb	r3, [r3, #0]
    f36e:	b943      	cbnz	r3, f382 <hard_fault+0xa2>
		} else if (SCB_BFSR != 0) {
    f370:	4b13      	ldr	r3, [pc, #76]	; (f3c0 <hard_fault+0xe0>)
    f372:	781b      	ldrb	r3, [r3, #0]
    f374:	b95b      	cbnz	r3, f38e <hard_fault+0xae>
		} else if (SCB_UFSR != 0) {
    f376:	4b13      	ldr	r3, [pc, #76]	; (f3c4 <hard_fault+0xe4>)
    f378:	881b      	ldrh	r3, [r3, #0]
    f37a:	b29b      	uxth	r3, r3
    f37c:	b96b      	cbnz	r3, f39a <hard_fault+0xba>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f37e:	4630      	mov	r0, r6
	return reason;
    f380:	e7ce      	b.n	f320 <hard_fault+0x40>
			reason = mem_manage_fault(esf, 1, recoverable);
    f382:	4622      	mov	r2, r4
    f384:	2101      	movs	r1, #1
    f386:	4628      	mov	r0, r5
    f388:	f7ff fe04 	bl	ef94 <mem_manage_fault>
    f38c:	e7c8      	b.n	f320 <hard_fault+0x40>
			reason = bus_fault(esf, 1, recoverable);
    f38e:	4622      	mov	r2, r4
    f390:	2101      	movs	r1, #1
    f392:	4628      	mov	r0, r5
    f394:	f7ff fec4 	bl	f120 <bus_fault>
    f398:	e7c2      	b.n	f320 <hard_fault+0x40>
			reason = usage_fault(esf);
    f39a:	4628      	mov	r0, r5
    f39c:	f7ff fd0c 	bl	edb8 <usage_fault>
    f3a0:	e7be      	b.n	f320 <hard_fault+0x40>
    f3a2:	bf00      	nop
    f3a4:	0001959c 	.word	0x0001959c
    f3a8:	00019574 	.word	0x00019574
    f3ac:	00019d90 	.word	0x00019d90
    f3b0:	e000ed00 	.word	0xe000ed00
    f3b4:	00019da8 	.word	0x00019da8
    f3b8:	00019dcc 	.word	0x00019dcc
    f3bc:	e000ed28 	.word	0xe000ed28
    f3c0:	e000ed29 	.word	0xe000ed29
    f3c4:	e000ed2a 	.word	0xe000ed2a

0000f3c8 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    f3c8:	b508      	push	{r3, lr}
    f3ca:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    f3cc:	f04f 0300 	mov.w	r3, #0
    f3d0:	2101      	movs	r1, #1
    f3d2:	f361 0302 	bfi	r3, r1, #0, #3
    f3d6:	f36f 03c5 	bfc	r3, #3, #3
    f3da:	4808      	ldr	r0, [pc, #32]	; (f3fc <reserved_exception+0x34>)
    f3dc:	4908      	ldr	r1, [pc, #32]	; (f400 <reserved_exception+0x38>)
    f3de:	1a40      	subs	r0, r0, r1
    f3e0:	f3c0 00c9 	ubfx	r0, r0, #3, #10
    f3e4:	f360 138f 	bfi	r3, r0, #6, #10
    f3e8:	2a0f      	cmp	r2, #15
    f3ea:	dc05      	bgt.n	f3f8 <reserved_exception+0x30>
    f3ec:	4905      	ldr	r1, [pc, #20]	; (f404 <reserved_exception+0x3c>)
    f3ee:	3a10      	subs	r2, #16
    f3f0:	4805      	ldr	r0, [pc, #20]	; (f408 <reserved_exception+0x40>)
    f3f2:	f7fe fc8f 	bl	dd14 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    f3f6:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    f3f8:	4904      	ldr	r1, [pc, #16]	; (f40c <reserved_exception+0x44>)
    f3fa:	e7f8      	b.n	f3ee <reserved_exception+0x26>
    f3fc:	0001959c 	.word	0x0001959c
    f400:	00019574 	.word	0x00019574
    f404:	00019dec 	.word	0x00019dec
    f408:	00019e20 	.word	0x00019e20
    f40c:	00019e04 	.word	0x00019e04

0000f410 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    f410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f414:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f416:	4b35      	ldr	r3, [pc, #212]	; (f4ec <z_arm_fault+0xdc>)
    f418:	685d      	ldr	r5, [r3, #4]
    f41a:	f3c5 0508 	ubfx	r5, r5, #0, #9
    f41e:	2300      	movs	r3, #0
    f420:	f383 8811 	msr	BASEPRI, r3
    f424:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    f428:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    f42c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    f430:	d12c      	bne.n	f48c <z_arm_fault+0x7c>
    f432:	4606      	mov	r6, r0
    f434:	4689      	mov	r9, r1
    f436:	4614      	mov	r4, r2
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    f438:	f012 0f01 	tst.w	r2, #1
    f43c:	d129      	bne.n	f492 <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    f43e:	f012 0f40 	tst.w	r2, #64	; 0x40
    f442:	d106      	bne.n	f452 <z_arm_fault+0x42>
	bool alternative_state_exc = false;
    f444:	2700      	movs	r7, #0
	if (!alternative_state_exc) {
    f446:	bb3f      	cbnz	r7, f498 <z_arm_fault+0x88>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    f448:	f014 0f08 	tst.w	r4, #8
    f44c:	d01b      	beq.n	f486 <z_arm_fault+0x76>
			ptr_esf =  (z_arch_esf_t *)psp;
    f44e:	46c8      	mov	r8, r9
    f450:	e023      	b.n	f49a <z_arm_fault+0x8a>
		PR_FAULT_INFO("Exception occurred in Secure State");
    f452:	f04f 0100 	mov.w	r1, #0
    f456:	2301      	movs	r3, #1
    f458:	f363 0102 	bfi	r1, r3, #0, #3
    f45c:	f36f 01c5 	bfc	r1, #3, #3
    f460:	4b23      	ldr	r3, [pc, #140]	; (f4f0 <z_arm_fault+0xe0>)
    f462:	4a24      	ldr	r2, [pc, #144]	; (f4f4 <z_arm_fault+0xe4>)
    f464:	1a9b      	subs	r3, r3, r2
    f466:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f46a:	f363 118f 	bfi	r1, r3, #6, #10
    f46e:	4822      	ldr	r0, [pc, #136]	; (f4f8 <z_arm_fault+0xe8>)
    f470:	f7fe fd36 	bl	dee0 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    f474:	f014 0f04 	tst.w	r4, #4
    f478:	d002      	beq.n	f480 <z_arm_fault+0x70>
			ptr_esf = (z_arch_esf_t *)psp;
    f47a:	46c8      	mov	r8, r9
		alternative_state_exc = true;
    f47c:	2701      	movs	r7, #1
    f47e:	e7e2      	b.n	f446 <z_arm_fault+0x36>
			ptr_esf = (z_arch_esf_t *)msp;
    f480:	46b0      	mov	r8, r6
		alternative_state_exc = true;
    f482:	2701      	movs	r7, #1
    f484:	e7df      	b.n	f446 <z_arm_fault+0x36>
			ptr_esf = (z_arch_esf_t *)msp;
    f486:	46b0      	mov	r8, r6
			*nested_exc = true;
    f488:	2701      	movs	r7, #1
    f48a:	e006      	b.n	f49a <z_arm_fault+0x8a>
	*nested_exc = false;
    f48c:	2700      	movs	r7, #0
		return NULL;
    f48e:	46b8      	mov	r8, r7
    f490:	e003      	b.n	f49a <z_arm_fault+0x8a>
	*nested_exc = false;
    f492:	2700      	movs	r7, #0
		return NULL;
    f494:	46b8      	mov	r8, r7
    f496:	e000      	b.n	f49a <z_arm_fault+0x8a>
	*nested_exc = false;
    f498:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    f49a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    f49e:	4629      	mov	r1, r5
    f4a0:	4640      	mov	r0, r8
    f4a2:	f007 fca3 	bl	16dec <fault_handle>
    f4a6:	4604      	mov	r4, r0
	if (recoverable) {
    f4a8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    f4ac:	b113      	cbz	r3, f4b4 <z_arm_fault+0xa4>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    f4ae:	b00b      	add	sp, #44	; 0x2c
    f4b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    f4b4:	2220      	movs	r2, #32
    f4b6:	4641      	mov	r1, r8
    f4b8:	a801      	add	r0, sp, #4
    f4ba:	f007 fd71 	bl	16fa0 <memcpy>
	if (nested_exc) {
    f4be:	b14f      	cbz	r7, f4d4 <z_arm_fault+0xc4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    f4c0:	9b08      	ldr	r3, [sp, #32]
    f4c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    f4c6:	b95a      	cbnz	r2, f4e0 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    f4c8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    f4cc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    f4d0:	9308      	str	r3, [sp, #32]
    f4d2:	e005      	b.n	f4e0 <z_arm_fault+0xd0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    f4d4:	9b08      	ldr	r3, [sp, #32]
    f4d6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    f4da:	f023 0301 	bic.w	r3, r3, #1
    f4de:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    f4e0:	a901      	add	r1, sp, #4
    f4e2:	4620      	mov	r0, r4
    f4e4:	f007 fc68 	bl	16db8 <z_arm_fatal_error>
    f4e8:	e7e1      	b.n	f4ae <z_arm_fault+0x9e>
    f4ea:	bf00      	nop
    f4ec:	e000ed00 	.word	0xe000ed00
    f4f0:	0001959c 	.word	0x0001959c
    f4f4:	00019574 	.word	0x00019574
    f4f8:	00019e34 	.word	0x00019e34

0000f4fc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    f4fc:	4b04      	ldr	r3, [pc, #16]	; (f510 <z_arm_fault_init+0x14>)
    f4fe:	695a      	ldr	r2, [r3, #20]
    f500:	f042 0210 	orr.w	r2, r2, #16
    f504:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    f506:	695a      	ldr	r2, [r3, #20]
    f508:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    f50c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    f50e:	4770      	bx	lr
    f510:	e000ed00 	.word	0xe000ed00

0000f514 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    f514:	4b04      	ldr	r3, [pc, #16]	; (f528 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    f516:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    f518:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    f51a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    f51c:	d003      	beq.n	f526 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    f51e:	4903      	ldr	r1, [pc, #12]	; (f52c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    f520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    f524:	600a      	str	r2, [r1, #0]

0000f526 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    f526:	4770      	bx	lr
	ldr r3, =_kernel
    f528:	20010924 	.word	0x20010924
	ldr r1, =_SCS_ICSR
    f52c:	e000ed04 	.word	0xe000ed04

0000f530 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    f530:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    f532:	e006      	b.n	f542 <z_arm_interrupt_init+0x12>
    f534:	f002 010f 	and.w	r1, r2, #15
    f538:	4b09      	ldr	r3, [pc, #36]	; (f560 <z_arm_interrupt_init+0x30>)
    f53a:	440b      	add	r3, r1
    f53c:	2120      	movs	r1, #32
    f53e:	7619      	strb	r1, [r3, #24]
    f540:	3201      	adds	r2, #1
    f542:	2a40      	cmp	r2, #64	; 0x40
    f544:	dc0a      	bgt.n	f55c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    f546:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    f548:	2b00      	cmp	r3, #0
    f54a:	dbf3      	blt.n	f534 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f54c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    f550:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    f554:	2120      	movs	r1, #32
    f556:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    f55a:	e7f1      	b.n	f540 <z_arm_interrupt_init+0x10>
	}
}
    f55c:	4770      	bx	lr
    f55e:	bf00      	nop
    f560:	e000ecfc 	.word	0xe000ecfc

0000f564 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    f564:	b510      	push	{r4, lr}
    f566:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
    f568:	f005 fa76 	bl	14a58 <z_thread_single_abort>

	if (_current == thread) {
    f56c:	4b11      	ldr	r3, [pc, #68]	; (f5b4 <z_impl_k_thread_abort+0x50>)
    f56e:	689b      	ldr	r3, [r3, #8]
    f570:	42a3      	cmp	r3, r4
    f572:	d00a      	beq.n	f58a <z_impl_k_thread_abort+0x26>
	__asm__ volatile(
    f574:	f04f 0320 	mov.w	r3, #32
    f578:	f3ef 8011 	mrs	r0, BASEPRI
    f57c:	f383 8811 	msr	BASEPRI, r3
    f580:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    f584:	f009 fc6e 	bl	18e64 <z_reschedule_irqlock>
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    f588:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f58a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    f58e:	b12b      	cbz	r3, f59c <z_impl_k_thread_abort+0x38>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f590:	4a09      	ldr	r2, [pc, #36]	; (f5b8 <z_impl_k_thread_abort+0x54>)
    f592:	6853      	ldr	r3, [r2, #4]
    f594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f598:	6053      	str	r3, [r2, #4]
    f59a:	e7eb      	b.n	f574 <z_impl_k_thread_abort+0x10>
    f59c:	f04f 0320 	mov.w	r3, #32
    f5a0:	f3ef 8011 	mrs	r0, BASEPRI
    f5a4:	f383 8811 	msr	BASEPRI, r3
    f5a8:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    f5ac:	f7ff fa6c 	bl	ea88 <arch_swap>
}

static inline void z_swap_unlocked(void)
{
	(void) z_swap_irqlock(arch_irq_lock());
}
    f5b0:	e7e0      	b.n	f574 <z_impl_k_thread_abort+0x10>
    f5b2:	bf00      	nop
    f5b4:	20010924 	.word	0x20010924
    f5b8:	e000ed00 	.word	0xe000ed00

0000f5bc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    f5bc:	b530      	push	{r4, r5, lr}
    f5be:	b089      	sub	sp, #36	; 0x24
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
		{
		.start = (uint32_t)&_ramfunc_ram_start,
    f5c0:	4b0f      	ldr	r3, [pc, #60]	; (f600 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    f5c2:	9305      	str	r3, [sp, #20]
		.size = (uint32_t)&_ramfunc_ram_size,
    f5c4:	4b0f      	ldr	r3, [pc, #60]	; (f604 <z_arm_configure_static_mpu_regions+0x48>)
		const struct k_mem_partition ramfunc_region =
    f5c6:	9306      	str	r3, [sp, #24]
    f5c8:	2306      	movs	r3, #6
    f5ca:	f8ad 301c 	strh.w	r3, [sp, #28]
    f5ce:	2501      	movs	r5, #1
    f5d0:	f8ad 501e 	strh.w	r5, [sp, #30]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    f5d4:	ab05      	add	r3, sp, #20
    f5d6:	9304      	str	r3, [sp, #16]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    f5d8:	4c0b      	ldr	r4, [pc, #44]	; (f608 <z_arm_configure_static_mpu_regions+0x4c>)
    f5da:	4623      	mov	r3, r4
    f5dc:	4a0b      	ldr	r2, [pc, #44]	; (f60c <z_arm_configure_static_mpu_regions+0x50>)
    f5de:	4629      	mov	r1, r5
    f5e0:	a804      	add	r0, sp, #16
    f5e2:	f007 fc54 	bl	16e8e <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    f5e6:	2300      	movs	r3, #0
    f5e8:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    f5ea:	4b09      	ldr	r3, [pc, #36]	; (f610 <z_arm_configure_static_mpu_regions+0x54>)
	const struct k_mem_partition dyn_region_areas[] = {
    f5ec:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    f5ee:	1ae4      	subs	r4, r4, r3
	const struct k_mem_partition dyn_region_areas[] = {
    f5f0:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    f5f2:	4629      	mov	r1, r5
    f5f4:	a801      	add	r0, sp, #4
    f5f6:	f007 fc4e 	bl	16e96 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    f5fa:	b009      	add	sp, #36	; 0x24
    f5fc:	bd30      	pop	{r4, r5, pc}
    f5fe:	bf00      	nop
    f600:	20010000 	.word	0x20010000
    f604:	00000000 	.word	0x00000000
    f608:	20040000 	.word	0x20040000
    f60c:	20010000 	.word	0x20010000
    f610:	20010228 	.word	0x20010228

0000f614 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    f614:	4b01      	ldr	r3, [pc, #4]	; (f61c <mpu_init+0x8>)
    f616:	4a02      	ldr	r2, [pc, #8]	; (f620 <mpu_init+0xc>)
    f618:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    f61a:	4770      	bx	lr
    f61c:	e000ed90 	.word	0xe000ed90
    f620:	0044ffaa 	.word	0x0044ffaa

0000f624 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    f624:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    f626:	680b      	ldr	r3, [r1, #0]
    f628:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    f62c:	7a0c      	ldrb	r4, [r1, #8]
    f62e:	f004 031f 	and.w	r3, r4, #31
    f632:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    f634:	68cb      	ldr	r3, [r1, #12]
    f636:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    f63a:	0964      	lsrs	r4, r4, #5
    f63c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    f640:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    f644:	4902      	ldr	r1, [pc, #8]	; (f650 <region_init+0x2c>)
    f646:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    f648:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    f64a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    f64c:	bc10      	pop	{r4}
    f64e:	4770      	bx	lr
    f650:	e000ed90 	.word	0xe000ed90

0000f654 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    f654:	b510      	push	{r4, lr}
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    f656:	280f      	cmp	r0, #15
    f658:	d804      	bhi.n	f664 <region_allocate_and_init+0x10>
    f65a:	4604      	mov	r4, r0
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    f65c:	f7ff ffe2 	bl	f624 <region_init>

	return index;
}
    f660:	4620      	mov	r0, r4
    f662:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    f664:	f04f 0200 	mov.w	r2, #0
    f668:	2301      	movs	r3, #1
    f66a:	f363 0202 	bfi	r2, r3, #0, #3
    f66e:	f36f 02c5 	bfc	r2, #3, #3
    f672:	4b07      	ldr	r3, [pc, #28]	; (f690 <region_allocate_and_init+0x3c>)
    f674:	4907      	ldr	r1, [pc, #28]	; (f694 <region_allocate_and_init+0x40>)
    f676:	1a5b      	subs	r3, r3, r1
    f678:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f67c:	f363 128f 	bfi	r2, r3, #6, #10
    f680:	4601      	mov	r1, r0
    f682:	4805      	ldr	r0, [pc, #20]	; (f698 <region_allocate_and_init+0x44>)
    f684:	f7fe facc 	bl	dc20 <log_1>
		return -EINVAL;
    f688:	f06f 0415 	mvn.w	r4, #21
    f68c:	e7e8      	b.n	f660 <region_allocate_and_init+0xc>
    f68e:	bf00      	nop
    f690:	00019594 	.word	0x00019594
    f694:	00019574 	.word	0x00019574
    f698:	00019e5c 	.word	0x00019e5c

0000f69c <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    f69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6a0:	b087      	sub	sp, #28
    f6a2:	4680      	mov	r8, r0
    f6a4:	468b      	mov	fp, r1
    f6a6:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    f6a8:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    f6aa:	2500      	movs	r5, #0
    f6ac:	e062      	b.n	f774 <mpu_configure_regions_and_partition+0xd8>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    f6ae:	f04f 0200 	mov.w	r2, #0
    f6b2:	2301      	movs	r3, #1
    f6b4:	f363 0202 	bfi	r2, r3, #0, #3
    f6b8:	f36f 02c5 	bfc	r2, #3, #3
    f6bc:	4b6b      	ldr	r3, [pc, #428]	; (f86c <mpu_configure_regions_and_partition+0x1d0>)
    f6be:	496c      	ldr	r1, [pc, #432]	; (f870 <mpu_configure_regions_and_partition+0x1d4>)
    f6c0:	1a5b      	subs	r3, r3, r1
    f6c2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f6c6:	f363 128f 	bfi	r2, r3, #6, #10
    f6ca:	4629      	mov	r1, r5
    f6cc:	4869      	ldr	r0, [pc, #420]	; (f874 <mpu_configure_regions_and_partition+0x1d8>)
    f6ce:	f7fe faa7 	bl	dc20 <log_1>
			return -EINVAL;
    f6d2:	f06f 0415 	mvn.w	r4, #21
    f6d6:	e016      	b.n	f706 <mpu_configure_regions_and_partition+0x6a>
	return -EINVAL;
    f6d8:	f06f 0615 	mvn.w	r6, #21
    f6dc:	e067      	b.n	f7ae <mpu_configure_regions_and_partition+0x112>
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    f6de:	f04f 0200 	mov.w	r2, #0
    f6e2:	2301      	movs	r3, #1
    f6e4:	f363 0202 	bfi	r2, r3, #0, #3
    f6e8:	f36f 02c5 	bfc	r2, #3, #3
    f6ec:	4b5f      	ldr	r3, [pc, #380]	; (f86c <mpu_configure_regions_and_partition+0x1d0>)
    f6ee:	4960      	ldr	r1, [pc, #384]	; (f870 <mpu_configure_regions_and_partition+0x1d4>)
    f6f0:	1a5b      	subs	r3, r3, r1
    f6f2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f6f6:	f363 128f 	bfi	r2, r3, #6, #10
    f6fa:	4631      	mov	r1, r6
    f6fc:	485e      	ldr	r0, [pc, #376]	; (f878 <mpu_configure_regions_and_partition+0x1dc>)
    f6fe:	f7fe fa8f 	bl	dc20 <log_1>
				u_reg_index);
			return -EINVAL;
    f702:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    f706:	4620      	mov	r0, r4
    f708:	b007      	add	sp, #28
    f70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((regions[i]->start == u_reg_base) &&
    f70e:	45ba      	cmp	sl, r7
    f710:	d166      	bne.n	f7e0 <mpu_configure_regions_and_partition+0x144>
			mpu_configure_region(u_reg_index, regions[i]);
    f712:	b2f0      	uxtb	r0, r6
    f714:	f007 fba0 	bl	16e58 <mpu_configure_region>
    f718:	e02b      	b.n	f772 <mpu_configure_regions_and_partition+0xd6>
	MPU->RNR = index;
    f71a:	4a58      	ldr	r2, [pc, #352]	; (f87c <mpu_configure_regions_and_partition+0x1e0>)
    f71c:	f8c2 c008 	str.w	ip, [r2, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    f720:	68d3      	ldr	r3, [r2, #12]
    f722:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    f726:	f020 001f 	bic.w	r0, r0, #31
    f72a:	4318      	orrs	r0, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    f72c:	60d0      	str	r0, [r2, #12]
				mpu_configure_region(reg_index, regions[i]);
    f72e:	f858 1009 	ldr.w	r1, [r8, r9]
    f732:	b2e0      	uxtb	r0, r4
    f734:	f007 fb90 	bl	16e58 <mpu_configure_region>
    f738:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    f73a:	f110 0f16 	cmn.w	r0, #22
    f73e:	d0e2      	beq.n	f706 <mpu_configure_regions_and_partition+0x6a>
			reg_index++;
    f740:	3401      	adds	r4, #1
    f742:	e016      	b.n	f772 <mpu_configure_regions_and_partition+0xd6>
				regions[i]->start - 1);
    f744:	3b01      	subs	r3, #1
	MPU->RNR = index;
    f746:	494d      	ldr	r1, [pc, #308]	; (f87c <mpu_configure_regions_and_partition+0x1e0>)
    f748:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f74c:	690a      	ldr	r2, [r1, #16]
    f74e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    f752:	f023 031f 	bic.w	r3, r3, #31
    f756:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f758:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, regions[i]);
    f75a:	f858 1009 	ldr.w	r1, [r8, r9]
    f75e:	b2e0      	uxtb	r0, r4
    f760:	f007 fb7a 	bl	16e58 <mpu_configure_region>
    f764:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    f766:	f110 0f16 	cmn.w	r0, #22
    f76a:	d0cc      	beq.n	f706 <mpu_configure_regions_and_partition+0x6a>
			reg_index++;
    f76c:	3401      	adds	r4, #1
    f76e:	e000      	b.n	f772 <mpu_configure_regions_and_partition+0xd6>
			reg_index++;
    f770:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    f772:	3501      	adds	r5, #1
    f774:	455d      	cmp	r5, fp
    f776:	dac6      	bge.n	f706 <mpu_configure_regions_and_partition+0x6a>
		if (regions[i]->size == 0U) {
    f778:	ea4f 0985 	mov.w	r9, r5, lsl #2
    f77c:	f858 6025 	ldr.w	r6, [r8, r5, lsl #2]
    f780:	6877      	ldr	r7, [r6, #4]
    f782:	2f00      	cmp	r7, #0
    f784:	d0f5      	beq.n	f772 <mpu_configure_regions_and_partition+0xd6>
		if (do_sanity_check &&
    f786:	9b01      	ldr	r3, [sp, #4]
    f788:	b123      	cbz	r3, f794 <mpu_configure_regions_and_partition+0xf8>
			(!mpu_partition_is_valid(regions[i]))) {
    f78a:	4630      	mov	r0, r6
    f78c:	f007 fb52 	bl	16e34 <mpu_partition_is_valid>
		if (do_sanity_check &&
    f790:	2800      	cmp	r0, #0
    f792:	d08c      	beq.n	f6ae <mpu_configure_regions_and_partition+0x12>
			get_region_index(regions[i]->start, regions[i]->size);
    f794:	f8d6 a000 	ldr.w	sl, [r6]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    f798:	4650      	mov	r0, sl
    f79a:	f007 fb80 	bl	16e9e <arm_cmse_mpu_region_get>
    f79e:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    f7a0:	eb07 000a 	add.w	r0, r7, sl
    f7a4:	3801      	subs	r0, #1
    f7a6:	f007 fb7a 	bl	16e9e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    f7aa:	4286      	cmp	r6, r0
    f7ac:	d194      	bne.n	f6d8 <mpu_configure_regions_and_partition+0x3c>
		if ((u_reg_index == -EINVAL) ||
    f7ae:	f116 0f16 	cmn.w	r6, #22
    f7b2:	d094      	beq.n	f6de <mpu_configure_regions_and_partition+0x42>
			(u_reg_index > (reg_index - 1))) {
    f7b4:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    f7b6:	42b3      	cmp	r3, r6
    f7b8:	db91      	blt.n	f6de <mpu_configure_regions_and_partition+0x42>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    f7ba:	46b4      	mov	ip, r6
	MPU->RNR = index;
    f7bc:	4b2f      	ldr	r3, [pc, #188]	; (f87c <mpu_configure_regions_and_partition+0x1e0>)
    f7be:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    f7c0:	68da      	ldr	r2, [r3, #12]
    f7c2:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = index;
    f7c6:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    f7c8:	691f      	ldr	r7, [r3, #16]
    f7ca:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    f7ce:	f858 1009 	ldr.w	r1, [r8, r9]
    f7d2:	680b      	ldr	r3, [r1, #0]
    f7d4:	6848      	ldr	r0, [r1, #4]
    f7d6:	4418      	add	r0, r3
    f7d8:	f100 3aff 	add.w	sl, r0, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    f7dc:	4293      	cmp	r3, r2
    f7de:	d096      	beq.n	f70e <mpu_configure_regions_and_partition+0x72>
		} else if (regions[i]->start == u_reg_base) {
    f7e0:	4293      	cmp	r3, r2
    f7e2:	d09a      	beq.n	f71a <mpu_configure_regions_and_partition+0x7e>
		} else if (reg_last == u_reg_last) {
    f7e4:	45ba      	cmp	sl, r7
    f7e6:	d0ad      	beq.n	f744 <mpu_configure_regions_and_partition+0xa8>
				regions[i]->start - 1);
    f7e8:	3b01      	subs	r3, #1
	MPU->RNR = index;
    f7ea:	4924      	ldr	r1, [pc, #144]	; (f87c <mpu_configure_regions_and_partition+0x1e0>)
    f7ec:	4666      	mov	r6, ip
    f7ee:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f7f2:	690a      	ldr	r2, [r1, #16]
    f7f4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    f7f8:	f023 031f 	bic.w	r3, r3, #31
    f7fc:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f7fe:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, regions[i]);
    f800:	f858 1009 	ldr.w	r1, [r8, r9]
    f804:	b2e0      	uxtb	r0, r4
    f806:	f007 fb27 	bl	16e58 <mpu_configure_region>
    f80a:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    f80c:	f110 0f16 	cmn.w	r0, #22
    f810:	f43f af79 	beq.w	f706 <mpu_configure_regions_and_partition+0x6a>
			reg_index++;
    f814:	3001      	adds	r0, #1
	MPU->RNR = index;
    f816:	4b19      	ldr	r3, [pc, #100]	; (f87c <mpu_configure_regions_and_partition+0x1e0>)
    f818:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
    f81a:	68d9      	ldr	r1, [r3, #12]
    f81c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    f820:	f361 0204 	bfi	r2, r1, #0, #5
    f824:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    f828:	691b      	ldr	r3, [r3, #16]
    f82a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    f82e:	b2d2      	uxtb	r2, r2
    f830:	f363 1247 	bfi	r2, r3, #5, #3
    f834:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i]->start +
    f838:	f858 2009 	ldr.w	r2, [r8, r9]
    f83c:	6811      	ldr	r1, [r2, #0]
				regions[i]->size;
    f83e:	6854      	ldr	r4, [r2, #4]
			fill_region.base = regions[i]->start +
    f840:	4421      	add	r1, r4
    f842:	9102      	str	r1, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    f844:	6813      	ldr	r3, [r2, #0]
    f846:	4423      	add	r3, r4
    f848:	f023 031f 	bic.w	r3, r3, #31
    f84c:	eba7 070a 	sub.w	r7, r7, sl
    f850:	441f      	add	r7, r3
    f852:	3f01      	subs	r7, #1
    f854:	f027 071f 	bic.w	r7, r7, #31
			fill_region.attr.r_limit =
    f858:	9705      	str	r7, [sp, #20]
				region_allocate_and_init(reg_index,
    f85a:	a902      	add	r1, sp, #8
    f85c:	b2c0      	uxtb	r0, r0
    f85e:	f7ff fef9 	bl	f654 <region_allocate_and_init>
    f862:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    f864:	f110 0f16 	cmn.w	r0, #22
    f868:	d182      	bne.n	f770 <mpu_configure_regions_and_partition+0xd4>
    f86a:	e74c      	b.n	f706 <mpu_configure_regions_and_partition+0x6a>
    f86c:	00019594 	.word	0x00019594
    f870:	00019574 	.word	0x00019574
    f874:	00019e84 	.word	0x00019e84
    f878:	00019ea8 	.word	0x00019ea8
    f87c:	e000ed90 	.word	0xe000ed90

0000f880 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    f880:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    f882:	4c03      	ldr	r4, [pc, #12]	; (f890 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    f884:	2301      	movs	r3, #1
    f886:	7822      	ldrb	r2, [r4, #0]
    f888:	f7ff ff08 	bl	f69c <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    f88c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    f88e:	bd10      	pop	{r4, pc}
    f890:	20010967 	.word	0x20010967

0000f894 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct k_mem_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    f894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f898:	4607      	mov	r7, r0
    f89a:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    f89c:	2400      	movs	r4, #0
    f89e:	e003      	b.n	f8a8 <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
    f8a0:	f06f 0515 	mvn.w	r5, #21
    f8a4:	e017      	b.n	f8d6 <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
    f8a6:	3401      	adds	r4, #1
    f8a8:	45a0      	cmp	r8, r4
    f8aa:	dd3c      	ble.n	f926 <mpu_mark_areas_for_dynamic_regions+0x92>
		if (dyn_region_areas[i].size == 0U) {
    f8ac:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    f8b0:	009a      	lsls	r2, r3, #2
    f8b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    f8b6:	685e      	ldr	r6, [r3, #4]
    f8b8:	2e00      	cmp	r6, #0
    f8ba:	d0f4      	beq.n	f8a6 <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    f8bc:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    f8c0:	4648      	mov	r0, r9
    f8c2:	f007 faec 	bl	16e9e <arm_cmse_mpu_region_get>
    f8c6:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    f8c8:	eb06 0009 	add.w	r0, r6, r9
    f8cc:	3801      	subs	r0, #1
    f8ce:	f007 fae6 	bl	16e9e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    f8d2:	4285      	cmp	r5, r0
    f8d4:	d1e4      	bne.n	f8a0 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
    f8d6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    f8da:	4a16      	ldr	r2, [pc, #88]	; (f934 <mpu_mark_areas_for_dynamic_regions+0xa0>)
    f8dc:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    f8e0:	f115 0f16 	cmn.w	r5, #22
    f8e4:	d020      	beq.n	f928 <mpu_mark_areas_for_dynamic_regions+0x94>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    f8e6:	4b14      	ldr	r3, [pc, #80]	; (f938 <mpu_mark_areas_for_dynamic_regions+0xa4>)
    f8e8:	781b      	ldrb	r3, [r3, #0]
    f8ea:	42ab      	cmp	r3, r5
    f8ec:	dd1f      	ble.n	f92e <mpu_mark_areas_for_dynamic_regions+0x9a>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    f8ee:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    f8f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
    f8f6:	4a11      	ldr	r2, [pc, #68]	; (f93c <mpu_mark_areas_for_dynamic_regions+0xa8>)
    f8f8:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
    f8fa:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
    f8fc:	68d5      	ldr	r5, [r2, #12]
    f8fe:	7b18      	ldrb	r0, [r3, #12]
    f900:	f365 0004 	bfi	r0, r5, #0, #5
    f904:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    f906:	6910      	ldr	r0, [r2, #16]
    f908:	f3c0 0042 	ubfx	r0, r0, #1, #3
    f90c:	7b1d      	ldrb	r5, [r3, #12]
    f90e:	f360 1547 	bfi	r5, r0, #5, #3
    f912:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    f914:	68d1      	ldr	r1, [r2, #12]
    f916:	f021 011f 	bic.w	r1, r1, #31
    f91a:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    f91c:	6912      	ldr	r2, [r2, #16]
    f91e:	f022 021f 	bic.w	r2, r2, #31
    f922:	611a      	str	r2, [r3, #16]
}
    f924:	e7bf      	b.n	f8a6 <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    f926:	2500      	movs	r5, #0
}
    f928:	4628      	mov	r0, r5
    f92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    f92e:	f06f 0515 	mvn.w	r5, #21
    f932:	e7f9      	b.n	f928 <mpu_mark_areas_for_dynamic_regions+0x94>
    f934:	20010568 	.word	0x20010568
    f938:	20010967 	.word	0x20010967
    f93c:	e000ed90 	.word	0xe000ed90

0000f940 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    f940:	4b03      	ldr	r3, [pc, #12]	; (f950 <arm_core_mpu_enable+0x10>)
    f942:	2205      	movs	r2, #5
    f944:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    f946:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f94a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    f94e:	4770      	bx	lr
    f950:	e000ed90 	.word	0xe000ed90

0000f954 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    f954:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    f958:	4b01      	ldr	r3, [pc, #4]	; (f960 <arm_core_mpu_disable+0xc>)
    f95a:	2200      	movs	r2, #0
    f95c:	605a      	str	r2, [r3, #4]
}
    f95e:	4770      	bx	lr
    f960:	e000ed90 	.word	0xe000ed90

0000f964 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    f964:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    f966:	4b0e      	ldr	r3, [pc, #56]	; (f9a0 <arm_mpu_init+0x3c>)
    f968:	681d      	ldr	r5, [r3, #0]
    f96a:	2d10      	cmp	r5, #16
    f96c:	d815      	bhi.n	f99a <arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    f96e:	f7ff fff1 	bl	f954 <arm_core_mpu_disable>
#if defined(CONFIG_NOCACHE_MEMORY)
	SCB_CleanInvalidateDCache();
#endif

	/* Architecture-specific configuration */
	mpu_init();
    f972:	f7ff fe4f 	bl	f614 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    f976:	2400      	movs	r4, #0
    f978:	42a5      	cmp	r5, r4
    f97a:	d908      	bls.n	f98e <arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    f97c:	4b08      	ldr	r3, [pc, #32]	; (f9a0 <arm_mpu_init+0x3c>)
    f97e:	6859      	ldr	r1, [r3, #4]
    f980:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    f984:	4620      	mov	r0, r4
    f986:	f7ff fe4d 	bl	f624 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    f98a:	3401      	adds	r4, #1
    f98c:	e7f4      	b.n	f978 <arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    f98e:	4b05      	ldr	r3, [pc, #20]	; (f9a4 <arm_mpu_init+0x40>)
    f990:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    f992:	f7ff ffd5 	bl	f940 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    f996:	2000      	movs	r0, #0
}
    f998:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    f99a:	f04f 30ff 	mov.w	r0, #4294967295
    f99e:	e7fb      	b.n	f998 <arm_mpu_init+0x34>
    f9a0:	00019f08 	.word	0x00019f08
    f9a4:	20010967 	.word	0x20010967

0000f9a8 <malloc>:
}

SYS_INIT(malloc_prepare, APPLICATION, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT);
#else /* No malloc arena */
void *malloc(size_t size)
{
    f9a8:	b508      	push	{r3, lr}
	ARG_UNUSED(size);

	LOG_ERR("CONFIG_MINIMAL_LIBC_MALLOC_ARENA_SIZE is 0");
    f9aa:	f04f 0100 	mov.w	r1, #0
    f9ae:	2301      	movs	r3, #1
    f9b0:	f363 0102 	bfi	r1, r3, #0, #3
    f9b4:	f36f 01c5 	bfc	r1, #3, #3
    f9b8:	4b07      	ldr	r3, [pc, #28]	; (f9d8 <malloc+0x30>)
    f9ba:	4a08      	ldr	r2, [pc, #32]	; (f9dc <malloc+0x34>)
    f9bc:	1a9b      	subs	r3, r3, r2
    f9be:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    f9c2:	f363 118f 	bfi	r1, r3, #6, #10
    f9c6:	4806      	ldr	r0, [pc, #24]	; (f9e0 <malloc+0x38>)
    f9c8:	f7fe fa8a 	bl	dee0 <log_0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    f9cc:	f004 fb0e 	bl	13fec <z_impl_z_errno>
	errno = ENOMEM;
    f9d0:	230c      	movs	r3, #12
    f9d2:	6003      	str	r3, [r0, #0]

	return NULL;
}
    f9d4:	2000      	movs	r0, #0
    f9d6:	bd08      	pop	{r3, pc}
    f9d8:	0001959c 	.word	0x0001959c
    f9dc:	00019574 	.word	0x00019574
    f9e0:	00019ecc 	.word	0x00019ecc

0000f9e4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    f9e4:	4b01      	ldr	r3, [pc, #4]	; (f9ec <__stdout_hook_install+0x8>)
    f9e6:	6018      	str	r0, [r3, #0]
}
    f9e8:	4770      	bx	lr
    f9ea:	bf00      	nop
    f9ec:	2001012c 	.word	0x2001012c

0000f9f0 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    f9f0:	b40c      	push	{r2, r3}
    f9f2:	b500      	push	{lr}
    f9f4:	b085      	sub	sp, #20

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    f9f6:	460b      	mov	r3, r1
    f9f8:	b909      	cbnz	r1, f9fe <snprintf+0xe>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    f9fa:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
    f9fe:	9001      	str	r0, [sp, #4]
	p.len = (int) len;
    fa00:	9302      	str	r3, [sp, #8]

	va_start(vargs, format);
    fa02:	ab07      	add	r3, sp, #28
    fa04:	9303      	str	r3, [sp, #12]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    fa06:	9a06      	ldr	r2, [sp, #24]
    fa08:	a901      	add	r1, sp, #4
    fa0a:	4805      	ldr	r0, [pc, #20]	; (fa20 <snprintf+0x30>)
    fa0c:	f7fd fa44 	bl	ce98 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    fa10:	9b01      	ldr	r3, [sp, #4]
    fa12:	2200      	movs	r2, #0
    fa14:	701a      	strb	r2, [r3, #0]
	return r;
}
    fa16:	b005      	add	sp, #20
    fa18:	f85d eb04 	ldr.w	lr, [sp], #4
    fa1c:	b002      	add	sp, #8
    fa1e:	4770      	bx	lr
    fa20:	00017061 	.word	0x00017061

0000fa24 <registry_add>:
static int registry_add(int type,
			const struct fs_file_system_t *fstp)
{
	int rv = -ENOSPC;

	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    fa24:	2300      	movs	r3, #0
    fa26:	2b01      	cmp	r3, #1
    fa28:	d80e      	bhi.n	fa48 <registry_add+0x24>
		struct registry_entry *ep = &registry[i];

		if (ep->fstp == NULL) {
    fa2a:	4a09      	ldr	r2, [pc, #36]	; (fa50 <registry_add+0x2c>)
    fa2c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    fa30:	6852      	ldr	r2, [r2, #4]
    fa32:	b10a      	cbz	r2, fa38 <registry_add+0x14>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    fa34:	3301      	adds	r3, #1
    fa36:	e7f6      	b.n	fa26 <registry_add+0x2>
			ep->type = type;
    fa38:	4a05      	ldr	r2, [pc, #20]	; (fa50 <registry_add+0x2c>)
    fa3a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			ep->fstp = fstp;
    fa3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    fa42:	6059      	str	r1, [r3, #4]
			rv = 0;
    fa44:	2000      	movs	r0, #0
			break;
    fa46:	4770      	bx	lr
	int rv = -ENOSPC;
    fa48:	f06f 001b 	mvn.w	r0, #27
		}
	}

	return rv;
}
    fa4c:	4770      	bx	lr
    fa4e:	bf00      	nop
    fa50:	20010598 	.word	0x20010598

0000fa54 <registry_find>:

static struct registry_entry *registry_find(int type)
{
    fa54:	4601      	mov	r1, r0
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    fa56:	2300      	movs	r3, #0
    fa58:	e000      	b.n	fa5c <registry_find+0x8>
    fa5a:	3301      	adds	r3, #1
    fa5c:	2b01      	cmp	r3, #1
    fa5e:	d80b      	bhi.n	fa78 <registry_find+0x24>
		struct registry_entry *ep = &registry[i];
    fa60:	4806      	ldr	r0, [pc, #24]	; (fa7c <registry_find+0x28>)
    fa62:	eb00 00c3 	add.w	r0, r0, r3, lsl #3

		if ((ep->fstp != NULL) && (ep->type == type)) {
    fa66:	6842      	ldr	r2, [r0, #4]
    fa68:	2a00      	cmp	r2, #0
    fa6a:	d0f6      	beq.n	fa5a <registry_find+0x6>
    fa6c:	4a03      	ldr	r2, [pc, #12]	; (fa7c <registry_find+0x28>)
    fa6e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    fa72:	428a      	cmp	r2, r1
    fa74:	d1f1      	bne.n	fa5a <registry_find+0x6>
    fa76:	e000      	b.n	fa7a <registry_find+0x26>
			return ep;
		}
	}
	return NULL;
    fa78:	2000      	movs	r0, #0
}
    fa7a:	4770      	bx	lr
    fa7c:	20010598 	.word	0x20010598

0000fa80 <fs_get_mnt_point>:
	return (ep != NULL) ? ep->fstp : NULL;
}

static int fs_get_mnt_point(struct fs_mount_t **mnt_pntp,
			    const char *name, size_t *match_len)
{
    fa80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa84:	4683      	mov	fp, r0
    fa86:	460f      	mov	r7, r1
    fa88:	4692      	mov	sl, r2
	struct fs_mount_t *mnt_p = NULL, *itr;
	size_t longest_match = 0;
	size_t len, name_len = strlen(name);
    fa8a:	4608      	mov	r0, r1
    fa8c:	f007 fa44 	bl	16f18 <strlen>
    fa90:	4680      	mov	r8, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    fa92:	f04f 32ff 	mov.w	r2, #4294967295
    fa96:	f04f 33ff 	mov.w	r3, #4294967295
    fa9a:	4820      	ldr	r0, [pc, #128]	; (fb1c <fs_get_mnt_point+0x9c>)
    fa9c:	f004 fcf4 	bl	14488 <z_impl_k_mutex_lock>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    faa0:	4b1f      	ldr	r3, [pc, #124]	; (fb20 <fs_get_mnt_point+0xa0>)
    faa2:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    faa4:	429c      	cmp	r4, r3
    faa6:	d01d      	beq.n	fae4 <fs_get_mnt_point+0x64>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    faa8:	2600      	movs	r6, #0
    faaa:	46b1      	mov	r9, r6
    faac:	e00c      	b.n	fac8 <fs_get_mnt_point+0x48>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
			continue;
		}

		/* Check for mount point match */
		if (strncmp(name, itr->mnt_point, len) == 0) {
    faae:	462a      	mov	r2, r5
    fab0:	68e1      	ldr	r1, [r4, #12]
    fab2:	4638      	mov	r0, r7
    fab4:	f007 fa42 	bl	16f3c <strncmp>
    fab8:	b908      	cbnz	r0, fabe <fs_get_mnt_point+0x3e>
			mnt_p = itr;
			longest_match = len;
    faba:	462e      	mov	r6, r5
			mnt_p = itr;
    fabc:	46a1      	mov	r9, r4
    fabe:	4b18      	ldr	r3, [pc, #96]	; (fb20 <fs_get_mnt_point+0xa0>)
    fac0:	685b      	ldr	r3, [r3, #4]
    fac2:	429c      	cmp	r4, r3
    fac4:	d010      	beq.n	fae8 <fs_get_mnt_point+0x68>
    fac6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    fac8:	b184      	cbz	r4, faec <fs_get_mnt_point+0x6c>
		len = itr->mountp_len;
    faca:	69a5      	ldr	r5, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
    facc:	42ae      	cmp	r6, r5
    face:	d8f6      	bhi.n	fabe <fs_get_mnt_point+0x3e>
    fad0:	45a8      	cmp	r8, r5
    fad2:	d3f4      	bcc.n	fabe <fs_get_mnt_point+0x3e>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
    fad4:	2d01      	cmp	r5, #1
    fad6:	d9ea      	bls.n	faae <fs_get_mnt_point+0x2e>
    fad8:	5d7b      	ldrb	r3, [r7, r5]
    fada:	2b2f      	cmp	r3, #47	; 0x2f
    fadc:	d0e7      	beq.n	faae <fs_get_mnt_point+0x2e>
    fade:	2b00      	cmp	r3, #0
    fae0:	d0e5      	beq.n	faae <fs_get_mnt_point+0x2e>
    fae2:	e7ec      	b.n	fabe <fs_get_mnt_point+0x3e>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fae4:	2400      	movs	r4, #0
    fae6:	e7df      	b.n	faa8 <fs_get_mnt_point+0x28>
	return (node == list->tail) ? NULL : node->next;
    fae8:	2400      	movs	r4, #0
    faea:	e7ed      	b.n	fac8 <fs_get_mnt_point+0x48>
	return z_impl_k_mutex_unlock(mutex);
    faec:	480b      	ldr	r0, [pc, #44]	; (fb1c <fs_get_mnt_point+0x9c>)
    faee:	f004 fd55 	bl	1459c <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&mutex);

	if (mnt_p == NULL) {
    faf2:	f1b9 0f00 	cmp.w	r9, #0
    faf6:	d00b      	beq.n	fb10 <fs_get_mnt_point+0x90>
		return -ENOENT;
	}

	*mnt_pntp = mnt_p;
    faf8:	f8cb 9000 	str.w	r9, [fp]
	if (match_len)
    fafc:	f1ba 0f00 	cmp.w	sl, #0
    fb00:	d009      	beq.n	fb16 <fs_get_mnt_point+0x96>
		*match_len = mnt_p->mountp_len;
    fb02:	f8d9 3018 	ldr.w	r3, [r9, #24]
    fb06:	f8ca 3000 	str.w	r3, [sl]

	return 0;
    fb0a:	2000      	movs	r0, #0
}
    fb0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOENT;
    fb10:	f06f 0001 	mvn.w	r0, #1
    fb14:	e7fa      	b.n	fb0c <fs_get_mnt_point+0x8c>
	return 0;
    fb16:	2000      	movs	r0, #0
    fb18:	e7f8      	b.n	fb0c <fs_get_mnt_point+0x8c>
    fb1a:	bf00      	nop
    fb1c:	20010584 	.word	0x20010584
    fb20:	2001057c 	.word	0x2001057c

0000fb24 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
    fb24:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
    fb26:	4804      	ldr	r0, [pc, #16]	; (fb38 <fs_init+0x14>)
    fb28:	f009 f953 	bl	18dd2 <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
    fb2c:	4b03      	ldr	r3, [pc, #12]	; (fb3c <fs_init+0x18>)
    fb2e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    fb30:	605b      	str	r3, [r3, #4]
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
    fb32:	2000      	movs	r0, #0
    fb34:	bd08      	pop	{r3, pc}
    fb36:	bf00      	nop
    fb38:	20010584 	.word	0x20010584
    fb3c:	2001057c 	.word	0x2001057c

0000fb40 <fs_open>:
{
    fb40:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb42:	b083      	sub	sp, #12
    fb44:	4605      	mov	r5, r0
	zfp->flags = flags;
    fb46:	7202      	strb	r2, [r0, #8]
	if ((file_name == NULL) ||
    fb48:	b1f1      	cbz	r1, fb88 <fs_open+0x48>
    fb4a:	4616      	mov	r6, r2
    fb4c:	460f      	mov	r7, r1
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
    fb4e:	4608      	mov	r0, r1
    fb50:	f007 f9e2 	bl	16f18 <strlen>
	if ((file_name == NULL) ||
    fb54:	2801      	cmp	r0, #1
    fb56:	d917      	bls.n	fb88 <fs_open+0x48>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
    fb58:	783b      	ldrb	r3, [r7, #0]
    fb5a:	2b2f      	cmp	r3, #47	; 0x2f
    fb5c:	d114      	bne.n	fb88 <fs_open+0x48>
	rc = fs_get_mnt_point(&mp, file_name, NULL);
    fb5e:	2200      	movs	r2, #0
    fb60:	4639      	mov	r1, r7
    fb62:	a801      	add	r0, sp, #4
    fb64:	f7ff ff8c 	bl	fa80 <fs_get_mnt_point>
	if (rc < 0) {
    fb68:	1e04      	subs	r4, r0, #0
    fb6a:	db21      	blt.n	fbb0 <fs_open+0x70>
	zfp->mp = mp;
    fb6c:	9b01      	ldr	r3, [sp, #4]
    fb6e:	606b      	str	r3, [r5, #4]
	if (zfp->mp->fs->open != NULL) {
    fb70:	69db      	ldr	r3, [r3, #28]
    fb72:	681b      	ldr	r3, [r3, #0]
    fb74:	b12b      	cbz	r3, fb82 <fs_open+0x42>
		rc = zfp->mp->fs->open(zfp, file_name, flags);
    fb76:	4632      	mov	r2, r6
    fb78:	4639      	mov	r1, r7
    fb7a:	4628      	mov	r0, r5
    fb7c:	4798      	blx	r3
		if (rc < 0) {
    fb7e:	1e04      	subs	r4, r0, #0
    fb80:	db29      	blt.n	fbd6 <fs_open+0x96>
}
    fb82:	4620      	mov	r0, r4
    fb84:	b003      	add	sp, #12
    fb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("invalid file name!!");
    fb88:	f04f 0100 	mov.w	r1, #0
    fb8c:	2301      	movs	r3, #1
    fb8e:	f363 0102 	bfi	r1, r3, #0, #3
    fb92:	f36f 01c5 	bfc	r1, #3, #3
    fb96:	4b19      	ldr	r3, [pc, #100]	; (fbfc <fs_open+0xbc>)
    fb98:	4a19      	ldr	r2, [pc, #100]	; (fc00 <fs_open+0xc0>)
    fb9a:	1a9b      	subs	r3, r3, r2
    fb9c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    fba0:	f363 118f 	bfi	r1, r3, #6, #10
    fba4:	4817      	ldr	r0, [pc, #92]	; (fc04 <fs_open+0xc4>)
    fba6:	f7fe f99b 	bl	dee0 <log_0>
		return -EINVAL;
    fbaa:	f06f 0415 	mvn.w	r4, #21
    fbae:	e7e8      	b.n	fb82 <fs_open+0x42>
		LOG_ERR("%s:mount point not found!!", __func__);
    fbb0:	f04f 0200 	mov.w	r2, #0
    fbb4:	2301      	movs	r3, #1
    fbb6:	f363 0202 	bfi	r2, r3, #0, #3
    fbba:	f36f 02c5 	bfc	r2, #3, #3
    fbbe:	4b0f      	ldr	r3, [pc, #60]	; (fbfc <fs_open+0xbc>)
    fbc0:	490f      	ldr	r1, [pc, #60]	; (fc00 <fs_open+0xc0>)
    fbc2:	1a5b      	subs	r3, r3, r1
    fbc4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    fbc8:	f363 128f 	bfi	r2, r3, #6, #10
    fbcc:	490e      	ldr	r1, [pc, #56]	; (fc08 <fs_open+0xc8>)
    fbce:	480f      	ldr	r0, [pc, #60]	; (fc0c <fs_open+0xcc>)
    fbd0:	f7fe f826 	bl	dc20 <log_1>
		return rc;
    fbd4:	e7d5      	b.n	fb82 <fs_open+0x42>
			LOG_ERR("file open error (%d)", rc);
    fbd6:	f04f 0200 	mov.w	r2, #0
    fbda:	2301      	movs	r3, #1
    fbdc:	f363 0202 	bfi	r2, r3, #0, #3
    fbe0:	f36f 02c5 	bfc	r2, #3, #3
    fbe4:	4b05      	ldr	r3, [pc, #20]	; (fbfc <fs_open+0xbc>)
    fbe6:	4906      	ldr	r1, [pc, #24]	; (fc00 <fs_open+0xc0>)
    fbe8:	1a5b      	subs	r3, r3, r1
    fbea:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    fbee:	f363 128f 	bfi	r2, r3, #6, #10
    fbf2:	4621      	mov	r1, r4
    fbf4:	4806      	ldr	r0, [pc, #24]	; (fc10 <fs_open+0xd0>)
    fbf6:	f7fe f813 	bl	dc20 <log_1>
			return rc;
    fbfa:	e7c2      	b.n	fb82 <fs_open+0x42>
    fbfc:	0001957c 	.word	0x0001957c
    fc00:	00019574 	.word	0x00019574
    fc04:	00019f30 	.word	0x00019f30
    fc08:	0001a12c 	.word	0x0001a12c
    fc0c:	00019f44 	.word	0x00019f44
    fc10:	00019f60 	.word	0x00019f60

0000fc14 <fs_close>:
{
    fc14:	b538      	push	{r3, r4, r5, lr}
	if (zfp->mp == NULL) {
    fc16:	6843      	ldr	r3, [r0, #4]
    fc18:	b303      	cbz	r3, fc5c <fs_close+0x48>
    fc1a:	4604      	mov	r4, r0
	if (zfp->mp->fs->close != NULL) {
    fc1c:	69db      	ldr	r3, [r3, #28]
    fc1e:	69db      	ldr	r3, [r3, #28]
    fc20:	b1cb      	cbz	r3, fc56 <fs_close+0x42>
		rc = zfp->mp->fs->close(zfp);
    fc22:	4798      	blx	r3
		if (rc < 0) {
    fc24:	1e05      	subs	r5, r0, #0
    fc26:	db03      	blt.n	fc30 <fs_close+0x1c>
	zfp->mp = NULL;
    fc28:	2300      	movs	r3, #0
    fc2a:	6063      	str	r3, [r4, #4]
}
    fc2c:	4628      	mov	r0, r5
    fc2e:	bd38      	pop	{r3, r4, r5, pc}
			LOG_ERR("file close error (%d)", rc);
    fc30:	f04f 0200 	mov.w	r2, #0
    fc34:	2301      	movs	r3, #1
    fc36:	f363 0202 	bfi	r2, r3, #0, #3
    fc3a:	f36f 02c5 	bfc	r2, #3, #3
    fc3e:	4b08      	ldr	r3, [pc, #32]	; (fc60 <fs_close+0x4c>)
    fc40:	4908      	ldr	r1, [pc, #32]	; (fc64 <fs_close+0x50>)
    fc42:	1a5b      	subs	r3, r3, r1
    fc44:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    fc48:	f363 128f 	bfi	r2, r3, #6, #10
    fc4c:	4629      	mov	r1, r5
    fc4e:	4806      	ldr	r0, [pc, #24]	; (fc68 <fs_close+0x54>)
    fc50:	f7fd ffe6 	bl	dc20 <log_1>
			return rc;
    fc54:	e7ea      	b.n	fc2c <fs_close+0x18>
	int rc = -EINVAL;
    fc56:	f06f 0515 	mvn.w	r5, #21
    fc5a:	e7e5      	b.n	fc28 <fs_close+0x14>
		return 0;
    fc5c:	2500      	movs	r5, #0
    fc5e:	e7e5      	b.n	fc2c <fs_close+0x18>
    fc60:	0001957c 	.word	0x0001957c
    fc64:	00019574 	.word	0x00019574
    fc68:	00019f78 	.word	0x00019f78

0000fc6c <fs_read>:
{
    fc6c:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    fc6e:	6843      	ldr	r3, [r0, #4]
    fc70:	b1d3      	cbz	r3, fca8 <fs_read+0x3c>
	if (zfp->mp->fs->read != NULL) {
    fc72:	69db      	ldr	r3, [r3, #28]
    fc74:	685b      	ldr	r3, [r3, #4]
    fc76:	b1d3      	cbz	r3, fcae <fs_read+0x42>
		rc = zfp->mp->fs->read(zfp, ptr, size);
    fc78:	4798      	blx	r3
		if (rc < 0) {
    fc7a:	1e04      	subs	r4, r0, #0
    fc7c:	db01      	blt.n	fc82 <fs_read+0x16>
}
    fc7e:	4620      	mov	r0, r4
    fc80:	bd10      	pop	{r4, pc}
			LOG_ERR("file read error (%d)", rc);
    fc82:	f04f 0200 	mov.w	r2, #0
    fc86:	2301      	movs	r3, #1
    fc88:	f363 0202 	bfi	r2, r3, #0, #3
    fc8c:	f36f 02c5 	bfc	r2, #3, #3
    fc90:	4b08      	ldr	r3, [pc, #32]	; (fcb4 <fs_read+0x48>)
    fc92:	4909      	ldr	r1, [pc, #36]	; (fcb8 <fs_read+0x4c>)
    fc94:	1a5b      	subs	r3, r3, r1
    fc96:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    fc9a:	f363 128f 	bfi	r2, r3, #6, #10
    fc9e:	4621      	mov	r1, r4
    fca0:	4806      	ldr	r0, [pc, #24]	; (fcbc <fs_read+0x50>)
    fca2:	f7fd ffbd 	bl	dc20 <log_1>
    fca6:	e7ea      	b.n	fc7e <fs_read+0x12>
		return -EBADF;
    fca8:	f06f 0408 	mvn.w	r4, #8
    fcac:	e7e7      	b.n	fc7e <fs_read+0x12>
	int rc = -EINVAL;
    fcae:	f06f 0415 	mvn.w	r4, #21
    fcb2:	e7e4      	b.n	fc7e <fs_read+0x12>
    fcb4:	0001957c 	.word	0x0001957c
    fcb8:	00019574 	.word	0x00019574
    fcbc:	00019f90 	.word	0x00019f90

0000fcc0 <fs_write>:
{
    fcc0:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    fcc2:	6843      	ldr	r3, [r0, #4]
    fcc4:	b1d3      	cbz	r3, fcfc <fs_write+0x3c>
	if (zfp->mp->fs->write != NULL) {
    fcc6:	69db      	ldr	r3, [r3, #28]
    fcc8:	689b      	ldr	r3, [r3, #8]
    fcca:	b1d3      	cbz	r3, fd02 <fs_write+0x42>
		rc = zfp->mp->fs->write(zfp, ptr, size);
    fccc:	4798      	blx	r3
		if (rc < 0) {
    fcce:	1e04      	subs	r4, r0, #0
    fcd0:	db01      	blt.n	fcd6 <fs_write+0x16>
}
    fcd2:	4620      	mov	r0, r4
    fcd4:	bd10      	pop	{r4, pc}
			LOG_ERR("file write error (%d)", rc);
    fcd6:	f04f 0200 	mov.w	r2, #0
    fcda:	2301      	movs	r3, #1
    fcdc:	f363 0202 	bfi	r2, r3, #0, #3
    fce0:	f36f 02c5 	bfc	r2, #3, #3
    fce4:	4b08      	ldr	r3, [pc, #32]	; (fd08 <fs_write+0x48>)
    fce6:	4909      	ldr	r1, [pc, #36]	; (fd0c <fs_write+0x4c>)
    fce8:	1a5b      	subs	r3, r3, r1
    fcea:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    fcee:	f363 128f 	bfi	r2, r3, #6, #10
    fcf2:	4621      	mov	r1, r4
    fcf4:	4806      	ldr	r0, [pc, #24]	; (fd10 <fs_write+0x50>)
    fcf6:	f7fd ff93 	bl	dc20 <log_1>
    fcfa:	e7ea      	b.n	fcd2 <fs_write+0x12>
		return -EBADF;
    fcfc:	f06f 0408 	mvn.w	r4, #8
    fd00:	e7e7      	b.n	fcd2 <fs_write+0x12>
	int rc = -EINVAL;
    fd02:	f06f 0415 	mvn.w	r4, #21
    fd06:	e7e4      	b.n	fcd2 <fs_write+0x12>
    fd08:	0001957c 	.word	0x0001957c
    fd0c:	00019574 	.word	0x00019574
    fd10:	00019fa8 	.word	0x00019fa8

0000fd14 <fs_seek>:
{
    fd14:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    fd16:	6843      	ldr	r3, [r0, #4]
    fd18:	b1d3      	cbz	r3, fd50 <fs_seek+0x3c>
	if (zfp->mp->fs->lseek != NULL) {
    fd1a:	69db      	ldr	r3, [r3, #28]
    fd1c:	68db      	ldr	r3, [r3, #12]
    fd1e:	b1d3      	cbz	r3, fd56 <fs_seek+0x42>
		rc = zfp->mp->fs->lseek(zfp, offset, whence);
    fd20:	4798      	blx	r3
		if (rc < 0) {
    fd22:	1e04      	subs	r4, r0, #0
    fd24:	db01      	blt.n	fd2a <fs_seek+0x16>
}
    fd26:	4620      	mov	r0, r4
    fd28:	bd10      	pop	{r4, pc}
			LOG_ERR("file seek error (%d)", rc);
    fd2a:	f04f 0200 	mov.w	r2, #0
    fd2e:	2301      	movs	r3, #1
    fd30:	f363 0202 	bfi	r2, r3, #0, #3
    fd34:	f36f 02c5 	bfc	r2, #3, #3
    fd38:	4b08      	ldr	r3, [pc, #32]	; (fd5c <fs_seek+0x48>)
    fd3a:	4909      	ldr	r1, [pc, #36]	; (fd60 <fs_seek+0x4c>)
    fd3c:	1a5b      	subs	r3, r3, r1
    fd3e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    fd42:	f363 128f 	bfi	r2, r3, #6, #10
    fd46:	4621      	mov	r1, r4
    fd48:	4806      	ldr	r0, [pc, #24]	; (fd64 <fs_seek+0x50>)
    fd4a:	f7fd ff69 	bl	dc20 <log_1>
    fd4e:	e7ea      	b.n	fd26 <fs_seek+0x12>
		return -EBADF;
    fd50:	f06f 0408 	mvn.w	r4, #8
    fd54:	e7e7      	b.n	fd26 <fs_seek+0x12>
	int rc = -EINVAL;
    fd56:	f06f 0415 	mvn.w	r4, #21
    fd5a:	e7e4      	b.n	fd26 <fs_seek+0x12>
    fd5c:	0001957c 	.word	0x0001957c
    fd60:	00019574 	.word	0x00019574
    fd64:	00019fc0 	.word	0x00019fc0

0000fd68 <fs_opendir>:
{
    fd68:	b570      	push	{r4, r5, r6, lr}
    fd6a:	b082      	sub	sp, #8
	if ((abs_path == NULL) ||
    fd6c:	2900      	cmp	r1, #0
    fd6e:	d034      	beq.n	fdda <fs_opendir+0x72>
    fd70:	4606      	mov	r6, r0
    fd72:	460d      	mov	r5, r1
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
    fd74:	4608      	mov	r0, r1
    fd76:	f007 f8cf 	bl	16f18 <strlen>
	if ((abs_path == NULL) ||
    fd7a:	b370      	cbz	r0, fdda <fs_opendir+0x72>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
    fd7c:	782b      	ldrb	r3, [r5, #0]
    fd7e:	2b2f      	cmp	r3, #47	; 0x2f
    fd80:	d12b      	bne.n	fdda <fs_opendir+0x72>
	if (strcmp(abs_path, "/") == 0) {
    fd82:	4934      	ldr	r1, [pc, #208]	; (fe54 <fs_opendir+0xec>)
    fd84:	4628      	mov	r0, r5
    fd86:	f007 f8cf 	bl	16f28 <strcmp>
    fd8a:	4604      	mov	r4, r0
    fd8c:	2800      	cmp	r0, #0
    fd8e:	d038      	beq.n	fe02 <fs_opendir+0x9a>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
    fd90:	2200      	movs	r2, #0
    fd92:	4629      	mov	r1, r5
    fd94:	a801      	add	r0, sp, #4
    fd96:	f7ff fe73 	bl	fa80 <fs_get_mnt_point>
	if (rc < 0) {
    fd9a:	1e04      	subs	r4, r0, #0
    fd9c:	db47      	blt.n	fe2e <fs_opendir+0xc6>
	zdp->mp = mp;
    fd9e:	9b01      	ldr	r3, [sp, #4]
    fda0:	6073      	str	r3, [r6, #4]
	if (zdp->mp->fs->opendir != NULL) {
    fda2:	69db      	ldr	r3, [r3, #28]
    fda4:	6a1b      	ldr	r3, [r3, #32]
    fda6:	2b00      	cmp	r3, #0
    fda8:	d03c      	beq.n	fe24 <fs_opendir+0xbc>
		rc = zdp->mp->fs->opendir(zdp, abs_path);
    fdaa:	4629      	mov	r1, r5
    fdac:	4630      	mov	r0, r6
    fdae:	4798      	blx	r3
		if (rc < 0) {
    fdb0:	1e04      	subs	r4, r0, #0
    fdb2:	da37      	bge.n	fe24 <fs_opendir+0xbc>
			LOG_ERR("directory open error (%d)", rc);
    fdb4:	f04f 0200 	mov.w	r2, #0
    fdb8:	2301      	movs	r3, #1
    fdba:	f363 0202 	bfi	r2, r3, #0, #3
    fdbe:	f36f 02c5 	bfc	r2, #3, #3
    fdc2:	4b25      	ldr	r3, [pc, #148]	; (fe58 <fs_opendir+0xf0>)
    fdc4:	4925      	ldr	r1, [pc, #148]	; (fe5c <fs_opendir+0xf4>)
    fdc6:	1a5b      	subs	r3, r3, r1
    fdc8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    fdcc:	f363 128f 	bfi	r2, r3, #6, #10
    fdd0:	4621      	mov	r1, r4
    fdd2:	4823      	ldr	r0, [pc, #140]	; (fe60 <fs_opendir+0xf8>)
    fdd4:	f7fd ff24 	bl	dc20 <log_1>
    fdd8:	e024      	b.n	fe24 <fs_opendir+0xbc>
		LOG_ERR("invalid file name!!");
    fdda:	f04f 0100 	mov.w	r1, #0
    fdde:	2301      	movs	r3, #1
    fde0:	f363 0102 	bfi	r1, r3, #0, #3
    fde4:	f36f 01c5 	bfc	r1, #3, #3
    fde8:	4b1b      	ldr	r3, [pc, #108]	; (fe58 <fs_opendir+0xf0>)
    fdea:	4a1c      	ldr	r2, [pc, #112]	; (fe5c <fs_opendir+0xf4>)
    fdec:	1a9b      	subs	r3, r3, r2
    fdee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    fdf2:	f363 118f 	bfi	r1, r3, #6, #10
    fdf6:	481b      	ldr	r0, [pc, #108]	; (fe64 <fs_opendir+0xfc>)
    fdf8:	f7fe f872 	bl	dee0 <log_0>
		return -EINVAL;
    fdfc:	f06f 0415 	mvn.w	r4, #21
    fe00:	e010      	b.n	fe24 <fs_opendir+0xbc>
	return z_impl_k_mutex_lock(mutex, timeout);
    fe02:	f04f 32ff 	mov.w	r2, #4294967295
    fe06:	f04f 33ff 	mov.w	r3, #4294967295
    fe0a:	4817      	ldr	r0, [pc, #92]	; (fe68 <fs_opendir+0x100>)
    fe0c:	f004 fb3c 	bl	14488 <z_impl_k_mutex_lock>
		zdp->mp = NULL;
    fe10:	2300      	movs	r3, #0
    fe12:	6073      	str	r3, [r6, #4]
	return list->head == list;
    fe14:	4a15      	ldr	r2, [pc, #84]	; (fe6c <fs_opendir+0x104>)
    fe16:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fe18:	4293      	cmp	r3, r2
    fe1a:	d006      	beq.n	fe2a <fs_opendir+0xc2>
		zdp->dirp = sys_dlist_peek_head(&fs_mnt_list);
    fe1c:	6033      	str	r3, [r6, #0]
	return z_impl_k_mutex_unlock(mutex);
    fe1e:	4812      	ldr	r0, [pc, #72]	; (fe68 <fs_opendir+0x100>)
    fe20:	f004 fbbc 	bl	1459c <z_impl_k_mutex_unlock>
}
    fe24:	4620      	mov	r0, r4
    fe26:	b002      	add	sp, #8
    fe28:	bd70      	pop	{r4, r5, r6, pc}
    fe2a:	2300      	movs	r3, #0
    fe2c:	e7f6      	b.n	fe1c <fs_opendir+0xb4>
		LOG_ERR("%s:mount point not found!!", __func__);
    fe2e:	f04f 0200 	mov.w	r2, #0
    fe32:	2301      	movs	r3, #1
    fe34:	f363 0202 	bfi	r2, r3, #0, #3
    fe38:	f36f 02c5 	bfc	r2, #3, #3
    fe3c:	4b06      	ldr	r3, [pc, #24]	; (fe58 <fs_opendir+0xf0>)
    fe3e:	4907      	ldr	r1, [pc, #28]	; (fe5c <fs_opendir+0xf4>)
    fe40:	1a5b      	subs	r3, r3, r1
    fe42:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    fe46:	f363 128f 	bfi	r2, r3, #6, #10
    fe4a:	4909      	ldr	r1, [pc, #36]	; (fe70 <fs_opendir+0x108>)
    fe4c:	4809      	ldr	r0, [pc, #36]	; (fe74 <fs_opendir+0x10c>)
    fe4e:	f7fd fee7 	bl	dc20 <log_1>
		return rc;
    fe52:	e7e7      	b.n	fe24 <fs_opendir+0xbc>
    fe54:	00019fd8 	.word	0x00019fd8
    fe58:	0001957c 	.word	0x0001957c
    fe5c:	00019574 	.word	0x00019574
    fe60:	00019fdc 	.word	0x00019fdc
    fe64:	00019f30 	.word	0x00019f30
    fe68:	20010584 	.word	0x20010584
    fe6c:	2001057c 	.word	0x2001057c
    fe70:	0001a134 	.word	0x0001a134
    fe74:	00019f44 	.word	0x00019f44

0000fe78 <fs_readdir>:
{
    fe78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe7a:	4606      	mov	r6, r0
    fe7c:	460c      	mov	r4, r1
	if (zdp->mp) {
    fe7e:	6847      	ldr	r7, [r0, #4]
    fe80:	2f00      	cmp	r7, #0
    fe82:	d034      	beq.n	feee <fs_readdir+0x76>
		if (zdp->mp->fs->readdir != NULL) {
    fe84:	69fb      	ldr	r3, [r7, #28]
    fe86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fe88:	b373      	cbz	r3, fee8 <fs_readdir+0x70>
				rc = zdp->mp->fs->readdir(zdp, entry);
    fe8a:	6873      	ldr	r3, [r6, #4]
    fe8c:	69db      	ldr	r3, [r3, #28]
    fe8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fe90:	4621      	mov	r1, r4
    fe92:	4630      	mov	r0, r6
    fe94:	4798      	blx	r3
				if (rc < 0) {
    fe96:	1e05      	subs	r5, r0, #0
    fe98:	db11      	blt.n	febe <fs_readdir+0x46>
				if (entry->name[0] == 0) {
    fe9a:	7863      	ldrb	r3, [r4, #1]
    fe9c:	b17b      	cbz	r3, febe <fs_readdir+0x46>
				if (entry->type != FS_DIR_ENTRY_DIR) {
    fe9e:	7823      	ldrb	r3, [r4, #0]
    fea0:	2b01      	cmp	r3, #1
    fea2:	d10c      	bne.n	febe <fs_readdir+0x46>
				if ((strcmp(entry->name, ".") != 0)
    fea4:	1c67      	adds	r7, r4, #1
    fea6:	4934      	ldr	r1, [pc, #208]	; (ff78 <fs_readdir+0x100>)
    fea8:	4638      	mov	r0, r7
    feaa:	f007 f83d 	bl	16f28 <strcmp>
    feae:	2800      	cmp	r0, #0
    feb0:	d0eb      	beq.n	fe8a <fs_readdir+0x12>
				    && (strcmp(entry->name, "..") != 0)) {
    feb2:	4932      	ldr	r1, [pc, #200]	; (ff7c <fs_readdir+0x104>)
    feb4:	4638      	mov	r0, r7
    feb6:	f007 f837 	bl	16f28 <strcmp>
    feba:	2800      	cmp	r0, #0
    febc:	d0e5      	beq.n	fe8a <fs_readdir+0x12>
			if (rc < 0) {
    febe:	2d00      	cmp	r5, #0
    fec0:	da54      	bge.n	ff6c <fs_readdir+0xf4>
				LOG_ERR("directory read error (%d)", rc);
    fec2:	f04f 0200 	mov.w	r2, #0
    fec6:	2301      	movs	r3, #1
    fec8:	f363 0202 	bfi	r2, r3, #0, #3
    fecc:	f36f 02c5 	bfc	r2, #3, #3
    fed0:	4b2b      	ldr	r3, [pc, #172]	; (ff80 <fs_readdir+0x108>)
    fed2:	492c      	ldr	r1, [pc, #176]	; (ff84 <fs_readdir+0x10c>)
    fed4:	1a5b      	subs	r3, r3, r1
    fed6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    feda:	f363 128f 	bfi	r2, r3, #6, #10
    fede:	4629      	mov	r1, r5
    fee0:	4829      	ldr	r0, [pc, #164]	; (ff88 <fs_readdir+0x110>)
    fee2:	f7fd fe9d 	bl	dc20 <log_1>
    fee6:	e041      	b.n	ff6c <fs_readdir+0xf4>
		int rc = -EINVAL;
    fee8:	f06f 0515 	mvn.w	r5, #21
		return rc;
    feec:	e03e      	b.n	ff6c <fs_readdir+0xf4>
	if (zdp->dirp == NULL) {
    feee:	6803      	ldr	r3, [r0, #0]
    fef0:	b1a3      	cbz	r3, ff1c <fs_readdir+0xa4>
	return z_impl_k_mutex_lock(mutex, timeout);
    fef2:	f04f 32ff 	mov.w	r2, #4294967295
    fef6:	f04f 33ff 	mov.w	r3, #4294967295
    fefa:	4824      	ldr	r0, [pc, #144]	; (ff8c <fs_readdir+0x114>)
    fefc:	f004 fac4 	bl	14488 <z_impl_k_mutex_lock>
	return list->head == list;
    ff00:	4b23      	ldr	r3, [pc, #140]	; (ff90 <fs_readdir+0x118>)
    ff02:	681d      	ldr	r5, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ff04:	429d      	cmp	r5, r3
    ff06:	d023      	beq.n	ff50 <fs_readdir+0xd8>
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    ff08:	b325      	cbz	r5, ff54 <fs_readdir+0xdc>
		if (node == zdp->dirp) {
    ff0a:	6833      	ldr	r3, [r6, #0]
    ff0c:	429d      	cmp	r5, r3
    ff0e:	d009      	beq.n	ff24 <fs_readdir+0xac>
	return (node == list->tail) ? NULL : node->next;
    ff10:	4b1f      	ldr	r3, [pc, #124]	; (ff90 <fs_readdir+0x118>)
    ff12:	685b      	ldr	r3, [r3, #4]
    ff14:	429d      	cmp	r5, r3
    ff16:	d022      	beq.n	ff5e <fs_readdir+0xe6>
    ff18:	682d      	ldr	r5, [r5, #0]
    ff1a:	e7f5      	b.n	ff08 <fs_readdir+0x90>
		entry->name[0] = 0;
    ff1c:	2000      	movs	r0, #0
    ff1e:	7048      	strb	r0, [r1, #1]
		return 0;
    ff20:	4605      	mov	r5, r0
    ff22:	e023      	b.n	ff6c <fs_readdir+0xf4>
			entry->type = FS_DIR_ENTRY_DIR;
    ff24:	4620      	mov	r0, r4
    ff26:	2301      	movs	r3, #1
    ff28:	f800 3b01 	strb.w	r3, [r0], #1
			strncpy(entry->name, mnt->mnt_point + 1,
    ff2c:	68e9      	ldr	r1, [r5, #12]
    ff2e:	f44f 7280 	mov.w	r2, #256	; 0x100
    ff32:	4419      	add	r1, r3
    ff34:	f006 ffca 	bl	16ecc <strncpy>
			entry->name[sizeof(entry->name) - 1] = 0;
    ff38:	2300      	movs	r3, #0
    ff3a:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
			entry->size = 0;
    ff3e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    ff42:	4b13      	ldr	r3, [pc, #76]	; (ff90 <fs_readdir+0x118>)
    ff44:	685b      	ldr	r3, [r3, #4]
    ff46:	429d      	cmp	r5, r3
    ff48:	d007      	beq.n	ff5a <fs_readdir+0xe2>
    ff4a:	682f      	ldr	r7, [r5, #0]
			found = true;
    ff4c:	2401      	movs	r4, #1
    ff4e:	e007      	b.n	ff60 <fs_readdir+0xe8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ff50:	463d      	mov	r5, r7
    ff52:	e7d9      	b.n	ff08 <fs_readdir+0x90>
	sys_dnode_t *node, *next = NULL;
    ff54:	462f      	mov	r7, r5
	bool found = false;
    ff56:	2400      	movs	r4, #0
    ff58:	e002      	b.n	ff60 <fs_readdir+0xe8>
			found = true;
    ff5a:	2401      	movs	r4, #1
    ff5c:	e000      	b.n	ff60 <fs_readdir+0xe8>
	bool found = false;
    ff5e:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    ff60:	480a      	ldr	r0, [pc, #40]	; (ff8c <fs_readdir+0x114>)
    ff62:	f004 fb1b 	bl	1459c <z_impl_k_mutex_unlock>
	if (!found) {
    ff66:	b11c      	cbz	r4, ff70 <fs_readdir+0xf8>
	zdp->dirp = next;
    ff68:	6037      	str	r7, [r6, #0]
	return 0;
    ff6a:	2500      	movs	r5, #0
}
    ff6c:	4628      	mov	r0, r5
    ff6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOENT;
    ff70:	f06f 0501 	mvn.w	r5, #1
    ff74:	e7fa      	b.n	ff6c <fs_readdir+0xf4>
    ff76:	bf00      	nop
    ff78:	00019ff8 	.word	0x00019ff8
    ff7c:	00019ffc 	.word	0x00019ffc
    ff80:	0001957c 	.word	0x0001957c
    ff84:	00019574 	.word	0x00019574
    ff88:	0001a000 	.word	0x0001a000
    ff8c:	20010584 	.word	0x20010584
    ff90:	2001057c 	.word	0x2001057c

0000ff94 <fs_closedir>:
{
    ff94:	b538      	push	{r3, r4, r5, lr}
    ff96:	4604      	mov	r4, r0
	if (zdp->mp == NULL) {
    ff98:	6843      	ldr	r3, [r0, #4]
    ff9a:	b14b      	cbz	r3, ffb0 <fs_closedir+0x1c>
	if (zdp->mp->fs->closedir != NULL) {
    ff9c:	69db      	ldr	r3, [r3, #28]
    ff9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ffa0:	b1e3      	cbz	r3, ffdc <fs_closedir+0x48>
		rc = zdp->mp->fs->closedir(zdp);
    ffa2:	4798      	blx	r3
		if (rc < 0) {
    ffa4:	1e05      	subs	r5, r0, #0
    ffa6:	db06      	blt.n	ffb6 <fs_closedir+0x22>
	zdp->mp = NULL;
    ffa8:	2300      	movs	r3, #0
    ffaa:	6063      	str	r3, [r4, #4]
}
    ffac:	4628      	mov	r0, r5
    ffae:	bd38      	pop	{r3, r4, r5, pc}
		zdp->dirp = NULL;
    ffb0:	2500      	movs	r5, #0
    ffb2:	6005      	str	r5, [r0, #0]
		return 0;
    ffb4:	e7fa      	b.n	ffac <fs_closedir+0x18>
			LOG_ERR("directory close error (%d)", rc);
    ffb6:	f04f 0200 	mov.w	r2, #0
    ffba:	2301      	movs	r3, #1
    ffbc:	f363 0202 	bfi	r2, r3, #0, #3
    ffc0:	f36f 02c5 	bfc	r2, #3, #3
    ffc4:	4b07      	ldr	r3, [pc, #28]	; (ffe4 <fs_closedir+0x50>)
    ffc6:	4908      	ldr	r1, [pc, #32]	; (ffe8 <fs_closedir+0x54>)
    ffc8:	1a5b      	subs	r3, r3, r1
    ffca:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    ffce:	f363 128f 	bfi	r2, r3, #6, #10
    ffd2:	4629      	mov	r1, r5
    ffd4:	4805      	ldr	r0, [pc, #20]	; (ffec <fs_closedir+0x58>)
    ffd6:	f7fd fe23 	bl	dc20 <log_1>
			return rc;
    ffda:	e7e7      	b.n	ffac <fs_closedir+0x18>
	int rc = -EINVAL;
    ffdc:	f06f 0515 	mvn.w	r5, #21
    ffe0:	e7e2      	b.n	ffa8 <fs_closedir+0x14>
    ffe2:	bf00      	nop
    ffe4:	0001957c 	.word	0x0001957c
    ffe8:	00019574 	.word	0x00019574
    ffec:	0001a01c 	.word	0x0001a01c

0000fff0 <fs_stat>:
{
    fff0:	b570      	push	{r4, r5, r6, lr}
    fff2:	b082      	sub	sp, #8
	if ((abs_path == NULL) ||
    fff4:	b1d8      	cbz	r0, 1002e <fs_stat+0x3e>
    fff6:	460e      	mov	r6, r1
    fff8:	4605      	mov	r5, r0
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    fffa:	f006 ff8d 	bl	16f18 <strlen>
	if ((abs_path == NULL) ||
    fffe:	2801      	cmp	r0, #1
   10000:	d915      	bls.n	1002e <fs_stat+0x3e>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
   10002:	782b      	ldrb	r3, [r5, #0]
   10004:	2b2f      	cmp	r3, #47	; 0x2f
   10006:	d112      	bne.n	1002e <fs_stat+0x3e>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
   10008:	2200      	movs	r2, #0
   1000a:	4629      	mov	r1, r5
   1000c:	a801      	add	r0, sp, #4
   1000e:	f7ff fd37 	bl	fa80 <fs_get_mnt_point>
	if (rc < 0) {
   10012:	1e04      	subs	r4, r0, #0
   10014:	db1f      	blt.n	10056 <fs_stat+0x66>
	if (mp->fs->stat != NULL) {
   10016:	9801      	ldr	r0, [sp, #4]
   10018:	69c3      	ldr	r3, [r0, #28]
   1001a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1001c:	b123      	cbz	r3, 10028 <fs_stat+0x38>
		rc = mp->fs->stat(mp, abs_path, entry);
   1001e:	4632      	mov	r2, r6
   10020:	4629      	mov	r1, r5
   10022:	4798      	blx	r3
		if (rc < 0) {
   10024:	1e04      	subs	r4, r0, #0
   10026:	db29      	blt.n	1007c <fs_stat+0x8c>
}
   10028:	4620      	mov	r0, r4
   1002a:	b002      	add	sp, #8
   1002c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("invalid file name!!");
   1002e:	f04f 0100 	mov.w	r1, #0
   10032:	2301      	movs	r3, #1
   10034:	f363 0102 	bfi	r1, r3, #0, #3
   10038:	f36f 01c5 	bfc	r1, #3, #3
   1003c:	4b19      	ldr	r3, [pc, #100]	; (100a4 <fs_stat+0xb4>)
   1003e:	4a1a      	ldr	r2, [pc, #104]	; (100a8 <fs_stat+0xb8>)
   10040:	1a9b      	subs	r3, r3, r2
   10042:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   10046:	f363 118f 	bfi	r1, r3, #6, #10
   1004a:	4818      	ldr	r0, [pc, #96]	; (100ac <fs_stat+0xbc>)
   1004c:	f7fd ff48 	bl	dee0 <log_0>
		return -EINVAL;
   10050:	f06f 0415 	mvn.w	r4, #21
   10054:	e7e8      	b.n	10028 <fs_stat+0x38>
		LOG_ERR("%s:mount point not found!!", __func__);
   10056:	f04f 0200 	mov.w	r2, #0
   1005a:	2301      	movs	r3, #1
   1005c:	f363 0202 	bfi	r2, r3, #0, #3
   10060:	f36f 02c5 	bfc	r2, #3, #3
   10064:	4b0f      	ldr	r3, [pc, #60]	; (100a4 <fs_stat+0xb4>)
   10066:	4910      	ldr	r1, [pc, #64]	; (100a8 <fs_stat+0xb8>)
   10068:	1a5b      	subs	r3, r3, r1
   1006a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   1006e:	f363 128f 	bfi	r2, r3, #6, #10
   10072:	490f      	ldr	r1, [pc, #60]	; (100b0 <fs_stat+0xc0>)
   10074:	480f      	ldr	r0, [pc, #60]	; (100b4 <fs_stat+0xc4>)
   10076:	f7fd fdd3 	bl	dc20 <log_1>
		return rc;
   1007a:	e7d5      	b.n	10028 <fs_stat+0x38>
			LOG_ERR("failed get file or dir stat (%d)", rc);
   1007c:	f04f 0200 	mov.w	r2, #0
   10080:	2301      	movs	r3, #1
   10082:	f363 0202 	bfi	r2, r3, #0, #3
   10086:	f36f 02c5 	bfc	r2, #3, #3
   1008a:	4b06      	ldr	r3, [pc, #24]	; (100a4 <fs_stat+0xb4>)
   1008c:	4906      	ldr	r1, [pc, #24]	; (100a8 <fs_stat+0xb8>)
   1008e:	1a5b      	subs	r3, r3, r1
   10090:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   10094:	f363 128f 	bfi	r2, r3, #6, #10
   10098:	4621      	mov	r1, r4
   1009a:	4807      	ldr	r0, [pc, #28]	; (100b8 <fs_stat+0xc8>)
   1009c:	f7fd fdc0 	bl	dc20 <log_1>
   100a0:	e7c2      	b.n	10028 <fs_stat+0x38>
   100a2:	bf00      	nop
   100a4:	0001957c 	.word	0x0001957c
   100a8:	00019574 	.word	0x00019574
   100ac:	00019f30 	.word	0x00019f30
   100b0:	0001a140 	.word	0x0001a140
   100b4:	00019f44 	.word	0x00019f44
   100b8:	0001a038 	.word	0x0001a038

000100bc <fs_statvfs>:
{
   100bc:	b570      	push	{r4, r5, r6, lr}
   100be:	b082      	sub	sp, #8
	if ((abs_path == NULL) ||
   100c0:	b1d8      	cbz	r0, 100fa <fs_statvfs+0x3e>
   100c2:	460e      	mov	r6, r1
   100c4:	4605      	mov	r5, r0
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
   100c6:	f006 ff27 	bl	16f18 <strlen>
	if ((abs_path == NULL) ||
   100ca:	2801      	cmp	r0, #1
   100cc:	d915      	bls.n	100fa <fs_statvfs+0x3e>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
   100ce:	782b      	ldrb	r3, [r5, #0]
   100d0:	2b2f      	cmp	r3, #47	; 0x2f
   100d2:	d112      	bne.n	100fa <fs_statvfs+0x3e>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
   100d4:	2200      	movs	r2, #0
   100d6:	4629      	mov	r1, r5
   100d8:	a801      	add	r0, sp, #4
   100da:	f7ff fcd1 	bl	fa80 <fs_get_mnt_point>
	if (rc < 0) {
   100de:	1e04      	subs	r4, r0, #0
   100e0:	db1f      	blt.n	10122 <fs_statvfs+0x66>
	if (mp->fs->statvfs != NULL) {
   100e2:	9801      	ldr	r0, [sp, #4]
   100e4:	69c3      	ldr	r3, [r0, #28]
   100e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   100e8:	b123      	cbz	r3, 100f4 <fs_statvfs+0x38>
		rc = mp->fs->statvfs(mp, abs_path, stat);
   100ea:	4632      	mov	r2, r6
   100ec:	4629      	mov	r1, r5
   100ee:	4798      	blx	r3
		if (rc < 0) {
   100f0:	1e04      	subs	r4, r0, #0
   100f2:	db29      	blt.n	10148 <fs_statvfs+0x8c>
}
   100f4:	4620      	mov	r0, r4
   100f6:	b002      	add	sp, #8
   100f8:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("invalid file name!!");
   100fa:	f04f 0100 	mov.w	r1, #0
   100fe:	2301      	movs	r3, #1
   10100:	f363 0102 	bfi	r1, r3, #0, #3
   10104:	f36f 01c5 	bfc	r1, #3, #3
   10108:	4b19      	ldr	r3, [pc, #100]	; (10170 <fs_statvfs+0xb4>)
   1010a:	4a1a      	ldr	r2, [pc, #104]	; (10174 <fs_statvfs+0xb8>)
   1010c:	1a9b      	subs	r3, r3, r2
   1010e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   10112:	f363 118f 	bfi	r1, r3, #6, #10
   10116:	4818      	ldr	r0, [pc, #96]	; (10178 <fs_statvfs+0xbc>)
   10118:	f7fd fee2 	bl	dee0 <log_0>
		return -EINVAL;
   1011c:	f06f 0415 	mvn.w	r4, #21
   10120:	e7e8      	b.n	100f4 <fs_statvfs+0x38>
		LOG_ERR("%s:mount point not found!!", __func__);
   10122:	f04f 0200 	mov.w	r2, #0
   10126:	2301      	movs	r3, #1
   10128:	f363 0202 	bfi	r2, r3, #0, #3
   1012c:	f36f 02c5 	bfc	r2, #3, #3
   10130:	4b0f      	ldr	r3, [pc, #60]	; (10170 <fs_statvfs+0xb4>)
   10132:	4910      	ldr	r1, [pc, #64]	; (10174 <fs_statvfs+0xb8>)
   10134:	1a5b      	subs	r3, r3, r1
   10136:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   1013a:	f363 128f 	bfi	r2, r3, #6, #10
   1013e:	490f      	ldr	r1, [pc, #60]	; (1017c <fs_statvfs+0xc0>)
   10140:	480f      	ldr	r0, [pc, #60]	; (10180 <fs_statvfs+0xc4>)
   10142:	f7fd fd6d 	bl	dc20 <log_1>
		return rc;
   10146:	e7d5      	b.n	100f4 <fs_statvfs+0x38>
			LOG_ERR("failed get file or dir stat (%d)", rc);
   10148:	f04f 0200 	mov.w	r2, #0
   1014c:	2301      	movs	r3, #1
   1014e:	f363 0202 	bfi	r2, r3, #0, #3
   10152:	f36f 02c5 	bfc	r2, #3, #3
   10156:	4b06      	ldr	r3, [pc, #24]	; (10170 <fs_statvfs+0xb4>)
   10158:	4906      	ldr	r1, [pc, #24]	; (10174 <fs_statvfs+0xb8>)
   1015a:	1a5b      	subs	r3, r3, r1
   1015c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   10160:	f363 128f 	bfi	r2, r3, #6, #10
   10164:	4621      	mov	r1, r4
   10166:	4807      	ldr	r0, [pc, #28]	; (10184 <fs_statvfs+0xc8>)
   10168:	f7fd fd5a 	bl	dc20 <log_1>
   1016c:	e7c2      	b.n	100f4 <fs_statvfs+0x38>
   1016e:	bf00      	nop
   10170:	0001957c 	.word	0x0001957c
   10174:	00019574 	.word	0x00019574
   10178:	00019f30 	.word	0x00019f30
   1017c:	0001a148 	.word	0x0001a148
   10180:	00019f44 	.word	0x00019f44
   10184:	0001a038 	.word	0x0001a038

00010188 <fs_mount>:
{
   10188:	b570      	push	{r4, r5, r6, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
   1018a:	b318      	cbz	r0, 101d4 <fs_mount+0x4c>
   1018c:	4604      	mov	r4, r0
   1018e:	68c3      	ldr	r3, [r0, #12]
   10190:	b303      	cbz	r3, 101d4 <fs_mount+0x4c>
	return z_impl_k_mutex_lock(mutex, timeout);
   10192:	f04f 32ff 	mov.w	r2, #4294967295
   10196:	f04f 33ff 	mov.w	r3, #4294967295
   1019a:	485a      	ldr	r0, [pc, #360]	; (10304 <fs_mount+0x17c>)
   1019c:	f004 f974 	bl	14488 <z_impl_k_mutex_lock>
	fs = fs_type_get(mp->type);
   101a0:	68a0      	ldr	r0, [r4, #8]
   101a2:	f006 ff6a 	bl	1707a <fs_type_get>
	if (fs == NULL) {
   101a6:	4606      	mov	r6, r0
   101a8:	b340      	cbz	r0, 101fc <fs_mount+0x74>
	mp->mountp_len = strlen(mp->mnt_point);
   101aa:	68e0      	ldr	r0, [r4, #12]
   101ac:	f006 feb4 	bl	16f18 <strlen>
   101b0:	61a0      	str	r0, [r4, #24]
	if ((mp->mnt_point[0] != '/') ||
   101b2:	68e0      	ldr	r0, [r4, #12]
   101b4:	7803      	ldrb	r3, [r0, #0]
   101b6:	2b2f      	cmp	r3, #47	; 0x2f
   101b8:	d134      	bne.n	10224 <fs_mount+0x9c>
			(strlen(mp->mnt_point) <= 1)) {
   101ba:	f006 fead 	bl	16f18 <strlen>
	if ((mp->mnt_point[0] != '/') ||
   101be:	2801      	cmp	r0, #1
   101c0:	d930      	bls.n	10224 <fs_mount+0x9c>
	if (fs->mount == NULL) {
   101c2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   101c4:	2b00      	cmp	r3, #0
   101c6:	d045      	beq.n	10254 <fs_mount+0xcc>
	return list->head == list;
   101c8:	4b4f      	ldr	r3, [pc, #316]	; (10308 <fs_mount+0x180>)
   101ca:	681d      	ldr	r5, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   101cc:	429d      	cmp	r5, r3
   101ce:	d15a      	bne.n	10286 <fs_mount+0xfe>
   101d0:	2500      	movs	r5, #0
   101d2:	e058      	b.n	10286 <fs_mount+0xfe>
		LOG_ERR("mount point not initialized!!");
   101d4:	f04f 0100 	mov.w	r1, #0
   101d8:	2301      	movs	r3, #1
   101da:	f363 0102 	bfi	r1, r3, #0, #3
   101de:	f36f 01c5 	bfc	r1, #3, #3
   101e2:	4b4a      	ldr	r3, [pc, #296]	; (1030c <fs_mount+0x184>)
   101e4:	4a4a      	ldr	r2, [pc, #296]	; (10310 <fs_mount+0x188>)
   101e6:	1a9b      	subs	r3, r3, r2
   101e8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   101ec:	f363 118f 	bfi	r1, r3, #6, #10
   101f0:	4848      	ldr	r0, [pc, #288]	; (10314 <fs_mount+0x18c>)
   101f2:	f7fd fe75 	bl	dee0 <log_0>
		return -EINVAL;
   101f6:	f06f 0515 	mvn.w	r5, #21
   101fa:	e029      	b.n	10250 <fs_mount+0xc8>
		LOG_ERR("requested file system type not registered!!");
   101fc:	f04f 0100 	mov.w	r1, #0
   10200:	2301      	movs	r3, #1
   10202:	f363 0102 	bfi	r1, r3, #0, #3
   10206:	f36f 01c5 	bfc	r1, #3, #3
   1020a:	4b40      	ldr	r3, [pc, #256]	; (1030c <fs_mount+0x184>)
   1020c:	4a40      	ldr	r2, [pc, #256]	; (10310 <fs_mount+0x188>)
   1020e:	1a9b      	subs	r3, r3, r2
   10210:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   10214:	f363 118f 	bfi	r1, r3, #6, #10
   10218:	483f      	ldr	r0, [pc, #252]	; (10318 <fs_mount+0x190>)
   1021a:	f7fd fe61 	bl	dee0 <log_0>
		rc = -ENOENT;
   1021e:	f06f 0501 	mvn.w	r5, #1
		goto mount_err;
   10222:	e012      	b.n	1024a <fs_mount+0xc2>
		LOG_ERR("invalid mount point!!");
   10224:	f04f 0100 	mov.w	r1, #0
   10228:	2301      	movs	r3, #1
   1022a:	f363 0102 	bfi	r1, r3, #0, #3
   1022e:	f36f 01c5 	bfc	r1, #3, #3
   10232:	4b36      	ldr	r3, [pc, #216]	; (1030c <fs_mount+0x184>)
   10234:	4a36      	ldr	r2, [pc, #216]	; (10310 <fs_mount+0x188>)
   10236:	1a9b      	subs	r3, r3, r2
   10238:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   1023c:	f363 118f 	bfi	r1, r3, #6, #10
   10240:	4836      	ldr	r0, [pc, #216]	; (1031c <fs_mount+0x194>)
   10242:	f7fd fe4d 	bl	dee0 <log_0>
		rc = -EINVAL;
   10246:	f06f 0515 	mvn.w	r5, #21
	return z_impl_k_mutex_unlock(mutex);
   1024a:	482e      	ldr	r0, [pc, #184]	; (10304 <fs_mount+0x17c>)
   1024c:	f004 f9a6 	bl	1459c <z_impl_k_mutex_unlock>
}
   10250:	4628      	mov	r0, r5
   10252:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("fs ops functions not set!!");
   10254:	f04f 0100 	mov.w	r1, #0
   10258:	2301      	movs	r3, #1
   1025a:	f363 0102 	bfi	r1, r3, #0, #3
   1025e:	f36f 01c5 	bfc	r1, #3, #3
   10262:	4b2a      	ldr	r3, [pc, #168]	; (1030c <fs_mount+0x184>)
   10264:	4a2a      	ldr	r2, [pc, #168]	; (10310 <fs_mount+0x188>)
   10266:	1a9b      	subs	r3, r3, r2
   10268:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   1026c:	f363 118f 	bfi	r1, r3, #6, #10
   10270:	482b      	ldr	r0, [pc, #172]	; (10320 <fs_mount+0x198>)
   10272:	f7fd fe35 	bl	dee0 <log_0>
		rc = -EINVAL;
   10276:	f06f 0515 	mvn.w	r5, #21
		goto mount_err;
   1027a:	e7e6      	b.n	1024a <fs_mount+0xc2>
	return (node == list->tail) ? NULL : node->next;
   1027c:	4b22      	ldr	r3, [pc, #136]	; (10308 <fs_mount+0x180>)
   1027e:	685b      	ldr	r3, [r3, #4]
   10280:	429d      	cmp	r5, r3
   10282:	d01f      	beq.n	102c4 <fs_mount+0x13c>
   10284:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
   10286:	b1ed      	cbz	r5, 102c4 <fs_mount+0x13c>
		if (mp->mountp_len != itr->mountp_len) {
   10288:	69a2      	ldr	r2, [r4, #24]
   1028a:	69ab      	ldr	r3, [r5, #24]
   1028c:	429a      	cmp	r2, r3
   1028e:	d1f5      	bne.n	1027c <fs_mount+0xf4>
		if (strncmp(mp->mnt_point, itr->mnt_point,
   10290:	68e9      	ldr	r1, [r5, #12]
   10292:	68e0      	ldr	r0, [r4, #12]
   10294:	f006 fe52 	bl	16f3c <strncmp>
   10298:	2800      	cmp	r0, #0
   1029a:	d1ef      	bne.n	1027c <fs_mount+0xf4>
			LOG_ERR("mount Point already exists!!");
   1029c:	f04f 0100 	mov.w	r1, #0
   102a0:	2301      	movs	r3, #1
   102a2:	f363 0102 	bfi	r1, r3, #0, #3
   102a6:	f36f 01c5 	bfc	r1, #3, #3
   102aa:	4b18      	ldr	r3, [pc, #96]	; (1030c <fs_mount+0x184>)
   102ac:	4a18      	ldr	r2, [pc, #96]	; (10310 <fs_mount+0x188>)
   102ae:	1a9b      	subs	r3, r3, r2
   102b0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   102b4:	f363 118f 	bfi	r1, r3, #6, #10
   102b8:	481a      	ldr	r0, [pc, #104]	; (10324 <fs_mount+0x19c>)
   102ba:	f7fd fe11 	bl	dee0 <log_0>
			rc = -EBUSY;
   102be:	f06f 050f 	mvn.w	r5, #15
			goto mount_err;
   102c2:	e7c2      	b.n	1024a <fs_mount+0xc2>
	rc = fs->mount(mp);
   102c4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   102c6:	4620      	mov	r0, r4
   102c8:	4798      	blx	r3
	if (rc < 0) {
   102ca:	1e05      	subs	r5, r0, #0
   102cc:	db07      	blt.n	102de <fs_mount+0x156>
	mp->fs = fs;
   102ce:	61e6      	str	r6, [r4, #28]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   102d0:	4b0d      	ldr	r3, [pc, #52]	; (10308 <fs_mount+0x180>)
   102d2:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   102d4:	685a      	ldr	r2, [r3, #4]
   102d6:	6062      	str	r2, [r4, #4]

	list->tail->next = node;
   102d8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   102da:	605c      	str	r4, [r3, #4]
}
   102dc:	e7b5      	b.n	1024a <fs_mount+0xc2>
		LOG_ERR("fs mount error (%d)", rc);
   102de:	f04f 0200 	mov.w	r2, #0
   102e2:	2301      	movs	r3, #1
   102e4:	f363 0202 	bfi	r2, r3, #0, #3
   102e8:	f36f 02c5 	bfc	r2, #3, #3
   102ec:	4b07      	ldr	r3, [pc, #28]	; (1030c <fs_mount+0x184>)
   102ee:	4908      	ldr	r1, [pc, #32]	; (10310 <fs_mount+0x188>)
   102f0:	1a5b      	subs	r3, r3, r1
   102f2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   102f6:	f363 128f 	bfi	r2, r3, #6, #10
   102fa:	4629      	mov	r1, r5
   102fc:	480a      	ldr	r0, [pc, #40]	; (10328 <fs_mount+0x1a0>)
   102fe:	f7fd fc8f 	bl	dc20 <log_1>
		goto mount_err;
   10302:	e7a2      	b.n	1024a <fs_mount+0xc2>
   10304:	20010584 	.word	0x20010584
   10308:	2001057c 	.word	0x2001057c
   1030c:	0001957c 	.word	0x0001957c
   10310:	00019574 	.word	0x00019574
   10314:	0001a05c 	.word	0x0001a05c
   10318:	0001a07c 	.word	0x0001a07c
   1031c:	0001a0a8 	.word	0x0001a0a8
   10320:	0001a0c0 	.word	0x0001a0c0
   10324:	0001a0dc 	.word	0x0001a0dc
   10328:	0001a0fc 	.word	0x0001a0fc

0001032c <fs_unmount>:
{
   1032c:	b538      	push	{r3, r4, r5, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL) ||
   1032e:	b318      	cbz	r0, 10378 <fs_unmount+0x4c>
   10330:	4604      	mov	r4, r0
   10332:	68c0      	ldr	r0, [r0, #12]
   10334:	b300      	cbz	r0, 10378 <fs_unmount+0x4c>
				(strlen(mp->mnt_point) <= 1)) {
   10336:	f006 fdef 	bl	16f18 <strlen>
	if ((mp == NULL) || (mp->mnt_point == NULL) ||
   1033a:	2801      	cmp	r0, #1
   1033c:	d91c      	bls.n	10378 <fs_unmount+0x4c>
	return z_impl_k_mutex_lock(mutex, timeout);
   1033e:	f04f 32ff 	mov.w	r2, #4294967295
   10342:	f04f 33ff 	mov.w	r3, #4294967295
   10346:	482a      	ldr	r0, [pc, #168]	; (103f0 <fs_unmount+0xc4>)
   10348:	f004 f89e 	bl	14488 <z_impl_k_mutex_lock>
	if ((mp->fs == NULL) || mp->fs->unmount == NULL) {
   1034c:	69e3      	ldr	r3, [r4, #28]
   1034e:	b33b      	cbz	r3, 103a0 <fs_unmount+0x74>
   10350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10352:	b32b      	cbz	r3, 103a0 <fs_unmount+0x74>
	rc = mp->fs->unmount(mp);
   10354:	4620      	mov	r0, r4
   10356:	4798      	blx	r3
	if (rc < 0) {
   10358:	1e05      	subs	r5, r0, #0
   1035a:	db35      	blt.n	103c8 <fs_unmount+0x9c>
	mp->fs = NULL;
   1035c:	2300      	movs	r3, #0
   1035e:	61e3      	str	r3, [r4, #28]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   10360:	6861      	ldr	r1, [r4, #4]
   10362:	6822      	ldr	r2, [r4, #0]
   10364:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
   10366:	6861      	ldr	r1, [r4, #4]
   10368:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   1036a:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   1036c:	6063      	str	r3, [r4, #4]
	return z_impl_k_mutex_unlock(mutex);
   1036e:	4820      	ldr	r0, [pc, #128]	; (103f0 <fs_unmount+0xc4>)
   10370:	f004 f914 	bl	1459c <z_impl_k_mutex_unlock>
}
   10374:	4628      	mov	r0, r5
   10376:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("invalid mount point!!");
   10378:	f04f 0100 	mov.w	r1, #0
   1037c:	2301      	movs	r3, #1
   1037e:	f363 0102 	bfi	r1, r3, #0, #3
   10382:	f36f 01c5 	bfc	r1, #3, #3
   10386:	4b1b      	ldr	r3, [pc, #108]	; (103f4 <fs_unmount+0xc8>)
   10388:	4a1b      	ldr	r2, [pc, #108]	; (103f8 <fs_unmount+0xcc>)
   1038a:	1a9b      	subs	r3, r3, r2
   1038c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   10390:	f363 118f 	bfi	r1, r3, #6, #10
   10394:	4819      	ldr	r0, [pc, #100]	; (103fc <fs_unmount+0xd0>)
   10396:	f7fd fda3 	bl	dee0 <log_0>
		return -EINVAL;
   1039a:	f06f 0515 	mvn.w	r5, #21
   1039e:	e7e9      	b.n	10374 <fs_unmount+0x48>
		LOG_ERR("fs ops functions not set!!");
   103a0:	f04f 0100 	mov.w	r1, #0
   103a4:	2301      	movs	r3, #1
   103a6:	f363 0102 	bfi	r1, r3, #0, #3
   103aa:	f36f 01c5 	bfc	r1, #3, #3
   103ae:	4b11      	ldr	r3, [pc, #68]	; (103f4 <fs_unmount+0xc8>)
   103b0:	4a11      	ldr	r2, [pc, #68]	; (103f8 <fs_unmount+0xcc>)
   103b2:	1a9b      	subs	r3, r3, r2
   103b4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   103b8:	f363 118f 	bfi	r1, r3, #6, #10
   103bc:	4810      	ldr	r0, [pc, #64]	; (10400 <fs_unmount+0xd4>)
   103be:	f7fd fd8f 	bl	dee0 <log_0>
		rc = -EINVAL;
   103c2:	f06f 0515 	mvn.w	r5, #21
		goto unmount_err;
   103c6:	e7d2      	b.n	1036e <fs_unmount+0x42>
		LOG_ERR("fs unmount error (%d)", rc);
   103c8:	f04f 0200 	mov.w	r2, #0
   103cc:	2301      	movs	r3, #1
   103ce:	f363 0202 	bfi	r2, r3, #0, #3
   103d2:	f36f 02c5 	bfc	r2, #3, #3
   103d6:	4b07      	ldr	r3, [pc, #28]	; (103f4 <fs_unmount+0xc8>)
   103d8:	4907      	ldr	r1, [pc, #28]	; (103f8 <fs_unmount+0xcc>)
   103da:	1a5b      	subs	r3, r3, r1
   103dc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   103e0:	f363 128f 	bfi	r2, r3, #6, #10
   103e4:	4629      	mov	r1, r5
   103e6:	4807      	ldr	r0, [pc, #28]	; (10404 <fs_unmount+0xd8>)
   103e8:	f7fd fc1a 	bl	dc20 <log_1>
		goto unmount_err;
   103ec:	e7bf      	b.n	1036e <fs_unmount+0x42>
   103ee:	bf00      	nop
   103f0:	20010584 	.word	0x20010584
   103f4:	0001957c 	.word	0x0001957c
   103f8:	00019574 	.word	0x00019574
   103fc:	0001a0a8 	.word	0x0001a0a8
   10400:	0001a0c0 	.word	0x0001a0c0
   10404:	0001a110 	.word	0x0001a110

00010408 <fs_register>:
{
   10408:	b538      	push	{r3, r4, r5, lr}
   1040a:	4604      	mov	r4, r0
   1040c:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1040e:	f04f 32ff 	mov.w	r2, #4294967295
   10412:	f04f 33ff 	mov.w	r3, #4294967295
   10416:	480a      	ldr	r0, [pc, #40]	; (10440 <fs_register+0x38>)
   10418:	f004 f836 	bl	14488 <z_impl_k_mutex_lock>
	if (fs_type_get(type) != NULL) {
   1041c:	4620      	mov	r0, r4
   1041e:	f006 fe2c 	bl	1707a <fs_type_get>
   10422:	b948      	cbnz	r0, 10438 <fs_register+0x30>
		rc = registry_add(type, fs);
   10424:	4629      	mov	r1, r5
   10426:	4620      	mov	r0, r4
   10428:	f7ff fafc 	bl	fa24 <registry_add>
   1042c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1042e:	4804      	ldr	r0, [pc, #16]	; (10440 <fs_register+0x38>)
   10430:	f004 f8b4 	bl	1459c <z_impl_k_mutex_unlock>
}
   10434:	4620      	mov	r0, r4
   10436:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
   10438:	f06f 0444 	mvn.w	r4, #68	; 0x44
   1043c:	e7f7      	b.n	1042e <fs_register+0x26>
   1043e:	bf00      	nop
   10440:	20010584 	.word	0x20010584

00010444 <fs_impl_strip_prefix>:
const char *fs_impl_strip_prefix(const char *path,
				 const struct fs_mount_t *mp)
{
	static const char *const root = "/";

	if ((path == NULL) || (mp == NULL)) {
   10444:	4603      	mov	r3, r0
   10446:	b128      	cbz	r0, 10454 <fs_impl_strip_prefix+0x10>
   10448:	b129      	cbz	r1, 10456 <fs_impl_strip_prefix+0x12>
		return path;
	}

	path += mp->mountp_len;
   1044a:	698a      	ldr	r2, [r1, #24]
   1044c:	4410      	add	r0, r2
	return *path ? path : root;
   1044e:	5c9b      	ldrb	r3, [r3, r2]
   10450:	b113      	cbz	r3, 10458 <fs_impl_strip_prefix+0x14>
   10452:	4770      	bx	lr
   10454:	4770      	bx	lr
   10456:	4770      	bx	lr
   10458:	4800      	ldr	r0, [pc, #0]	; (1045c <fs_impl_strip_prefix+0x18>)
}
   1045a:	4770      	bx	lr
   1045c:	00019fd8 	.word	0x00019fd8

00010460 <littlefs_init>:
	.stat = littlefs_stat,
	.statvfs = littlefs_statvfs,
};

static int littlefs_init(const struct device *dev)
{
   10460:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);
	return fs_register(FS_LITTLEFS, &littlefs_fs);
   10462:	4902      	ldr	r1, [pc, #8]	; (1046c <littlefs_init+0xc>)
   10464:	2001      	movs	r0, #1
   10466:	f7ff ffcf 	bl	10408 <fs_register>
}
   1046a:	bd08      	pop	{r3, pc}
   1046c:	0001a2a0 	.word	0x0001a2a0

00010470 <get_block_size>:
{
   10470:	b500      	push	{lr}
   10472:	b083      	sub	sp, #12
	struct get_page_ctx ctx = {
   10474:	9000      	str	r0, [sp, #0]
   10476:	2300      	movs	r3, #0
   10478:	9301      	str	r3, [sp, #4]
	const struct device *dev = flash_area_get_device(fa);
   1047a:	f006 fb63 	bl	16b44 <flash_area_get_device>
	flash_page_foreach(dev, get_page_cb, &ctx);
   1047e:	466a      	mov	r2, sp
   10480:	4903      	ldr	r1, [pc, #12]	; (10490 <get_block_size+0x20>)
   10482:	f007 f93f 	bl	17704 <flash_page_foreach>
}
   10486:	9801      	ldr	r0, [sp, #4]
   10488:	b003      	add	sp, #12
   1048a:	f85d fb04 	ldr.w	pc, [sp], #4
   1048e:	bf00      	nop
   10490:	00017163 	.word	0x00017163

00010494 <release_file_data>:
{
   10494:	b510      	push	{r4, lr}
   10496:	4604      	mov	r4, r0
	struct lfs_file_data *fdp = fp->filep;
   10498:	6800      	ldr	r0, [r0, #0]
	if (fdp->config.buffer) {
   1049a:	6d43      	ldr	r3, [r0, #84]	; 0x54
   1049c:	b113      	cbz	r3, 104a4 <release_file_data+0x10>
		k_mem_pool_free(&fdp->cache_block);
   1049e:	3060      	adds	r0, #96	; 0x60
   104a0:	f008 ff1f 	bl	192e2 <k_mem_pool_free>
	k_mem_slab_free(&file_data_pool, &fp->filep);
   104a4:	4621      	mov	r1, r4
   104a6:	4803      	ldr	r0, [pc, #12]	; (104b4 <release_file_data+0x20>)
   104a8:	f003 ffc6 	bl	14438 <k_mem_slab_free>
	fp->filep = NULL;
   104ac:	2300      	movs	r3, #0
   104ae:	6023      	str	r3, [r4, #0]
}
   104b0:	bd10      	pop	{r4, pc}
   104b2:	bf00      	nop
   104b4:	200101cc 	.word	0x200101cc

000104b8 <littlefs_open>:
{
   104b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   104bc:	b082      	sub	sp, #8
   104be:	4604      	mov	r4, r0
   104c0:	460f      	mov	r7, r1
	struct fs_littlefs *fs = fp->mp->fs_data;
   104c2:	6843      	ldr	r3, [r0, #4]
   104c4:	f8d3 8010 	ldr.w	r8, [r3, #16]
	int flags = lfs_flags_from_zephyr(zflags);
   104c8:	4610      	mov	r0, r2
   104ca:	f006 fe3c 	bl	17146 <lfs_flags_from_zephyr>
   104ce:	4681      	mov	r9, r0
	int ret = k_mem_slab_alloc(&file_data_pool, &fp->filep, K_NO_WAIT);
   104d0:	2200      	movs	r2, #0
   104d2:	2300      	movs	r3, #0
   104d4:	4621      	mov	r1, r4
   104d6:	4824      	ldr	r0, [pc, #144]	; (10568 <littlefs_open+0xb0>)
   104d8:	f003 ff78 	bl	143cc <k_mem_slab_alloc>
	if (ret != 0) {
   104dc:	4603      	mov	r3, r0
   104de:	b118      	cbz	r0, 104e8 <littlefs_open+0x30>
}
   104e0:	4618      	mov	r0, r3
   104e2:	b002      	add	sp, #8
   104e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct lfs_file_data *fdp = fp->filep;
   104e8:	6826      	ldr	r6, [r4, #0]
	memset(fdp, 0, sizeof(*fdp));
   104ea:	2268      	movs	r2, #104	; 0x68
   104ec:	2100      	movs	r1, #0
   104ee:	4630      	mov	r0, r6
   104f0:	f006 fd7a 	bl	16fe8 <memset>
			       lfs->cfg->cache_size, K_NO_WAIT);
   104f4:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
	ret = k_mem_pool_alloc(&file_cache_pool, &fdp->cache_block,
   104f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   104fa:	2000      	movs	r0, #0
   104fc:	2100      	movs	r1, #0
   104fe:	e9cd 0100 	strd	r0, r1, [sp]
   10502:	f106 0160 	add.w	r1, r6, #96	; 0x60
   10506:	4819      	ldr	r0, [pc, #100]	; (1056c <littlefs_open+0xb4>)
   10508:	f008 fc09 	bl	18d1e <k_mem_pool_alloc>
	if (ret != 0) {
   1050c:	4605      	mov	r5, r0
   1050e:	b130      	cbz	r0, 1051e <littlefs_open+0x66>
	if (ret < 0) {
   10510:	2d00      	cmp	r5, #0
   10512:	db24      	blt.n	1055e <littlefs_open+0xa6>
	return lfs_to_errno(ret);
   10514:	4628      	mov	r0, r5
   10516:	f006 fdb8 	bl	1708a <lfs_to_errno>
   1051a:	4603      	mov	r3, r0
   1051c:	e7e0      	b.n	104e0 <littlefs_open+0x28>
	fdp->config.buffer = fdp->cache_block.data;
   1051e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   10520:	46b2      	mov	sl, r6
   10522:	f84a 3f54 	str.w	r3, [sl, #84]!
	path = fs_impl_strip_prefix(path, fp->mp);
   10526:	6861      	ldr	r1, [r4, #4]
   10528:	4638      	mov	r0, r7
   1052a:	f7ff ff8b 	bl	10444 <fs_impl_strip_prefix>
   1052e:	4605      	mov	r5, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   10530:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   10534:	f04f 32ff 	mov.w	r2, #4294967295
   10538:	f04f 33ff 	mov.w	r3, #4294967295
   1053c:	4638      	mov	r0, r7
   1053e:	f003 ffa3 	bl	14488 <z_impl_k_mutex_lock>
	ret = lfs_file_opencfg(&fs->lfs, &fdp->file,
   10542:	f8cd a000 	str.w	sl, [sp]
   10546:	464b      	mov	r3, r9
   10548:	462a      	mov	r2, r5
   1054a:	4631      	mov	r1, r6
   1054c:	f108 0070 	add.w	r0, r8, #112	; 0x70
   10550:	f003 f96e 	bl	13830 <lfs_file_opencfg>
   10554:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   10556:	4638      	mov	r0, r7
   10558:	f004 f820 	bl	1459c <z_impl_k_mutex_unlock>
}
   1055c:	e7d8      	b.n	10510 <littlefs_open+0x58>
		release_file_data(fp);
   1055e:	4620      	mov	r0, r4
   10560:	f7ff ff98 	bl	10494 <release_file_data>
   10564:	e7d6      	b.n	10514 <littlefs_open+0x5c>
   10566:	bf00      	nop
   10568:	200101cc 	.word	0x200101cc
   1056c:	20010130 	.word	0x20010130

00010570 <littlefs_closedir>:
{
   10570:	b570      	push	{r4, r5, r6, lr}
   10572:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
   10574:	6843      	ldr	r3, [r0, #4]
   10576:	691d      	ldr	r5, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   10578:	f105 06ec 	add.w	r6, r5, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1057c:	f04f 32ff 	mov.w	r2, #4294967295
   10580:	f04f 33ff 	mov.w	r3, #4294967295
   10584:	4630      	mov	r0, r6
   10586:	f003 ff7f 	bl	14488 <z_impl_k_mutex_lock>
	int ret = lfs_dir_close(&fs->lfs, dp->dirp);
   1058a:	6821      	ldr	r1, [r4, #0]
   1058c:	f105 0070 	add.w	r0, r5, #112	; 0x70
   10590:	f007 ffbc 	bl	1850c <lfs_dir_close>
   10594:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   10596:	4630      	mov	r0, r6
   10598:	f004 f800 	bl	1459c <z_impl_k_mutex_unlock>
	k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
   1059c:	4621      	mov	r1, r4
   1059e:	4803      	ldr	r0, [pc, #12]	; (105ac <littlefs_closedir+0x3c>)
   105a0:	f003 ff4a 	bl	14438 <k_mem_slab_free>
	return lfs_to_errno(ret);
   105a4:	4628      	mov	r0, r5
   105a6:	f006 fd70 	bl	1708a <lfs_to_errno>
}
   105aa:	bd70      	pop	{r4, r5, r6, pc}
   105ac:	200101e8 	.word	0x200101e8

000105b0 <littlefs_unmount>:
{
   105b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   105b2:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
   105b4:	6904      	ldr	r4, [r0, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   105b6:	f104 07ec 	add.w	r7, r4, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   105ba:	f04f 32ff 	mov.w	r2, #4294967295
   105be:	f04f 33ff 	mov.w	r3, #4294967295
   105c2:	4638      	mov	r0, r7
   105c4:	f003 ff60 	bl	14488 <z_impl_k_mutex_lock>
	lfs_unmount(&fs->lfs);
   105c8:	f104 0070 	add.w	r0, r4, #112	; 0x70
   105cc:	f007 ffcc 	bl	18568 <lfs_unmount>
	flash_area_close(fs->area);
   105d0:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   105d4:	f006 fa38 	bl	16a48 <flash_area_close>
	fs->area = NULL;
   105d8:	2600      	movs	r6, #0
   105da:	f8c4 60e8 	str.w	r6, [r4, #232]	; 0xe8
	return z_impl_k_mutex_unlock(mutex);
   105de:	4638      	mov	r0, r7
   105e0:	f003 ffdc 	bl	1459c <z_impl_k_mutex_unlock>
	LOG_INF("%s unmounted", log_strdup(mountp->mnt_point));
   105e4:	f04f 0400 	mov.w	r4, #0
   105e8:	2303      	movs	r3, #3
   105ea:	f363 0402 	bfi	r4, r3, #0, #3
   105ee:	f366 04c5 	bfi	r4, r6, #3, #3
   105f2:	4b08      	ldr	r3, [pc, #32]	; (10614 <littlefs_unmount+0x64>)
   105f4:	4a08      	ldr	r2, [pc, #32]	; (10618 <littlefs_unmount+0x68>)
   105f6:	1a9b      	subs	r3, r3, r2
   105f8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   105fc:	f363 148f 	bfi	r4, r3, #6, #10
   10600:	68e8      	ldr	r0, [r5, #12]
   10602:	f7fd f949 	bl	d898 <log_strdup>
   10606:	4601      	mov	r1, r0
   10608:	4622      	mov	r2, r4
   1060a:	4804      	ldr	r0, [pc, #16]	; (1061c <littlefs_unmount+0x6c>)
   1060c:	f7fd fb08 	bl	dc20 <log_1>
}
   10610:	4630      	mov	r0, r6
   10612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10614:	00019584 	.word	0x00019584
   10618:	00019574 	.word	0x00019574
   1061c:	0001a154 	.word	0x0001a154

00010620 <littlefs_opendir>:
{
   10620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10622:	4604      	mov	r4, r0
   10624:	460d      	mov	r5, r1
	struct fs_littlefs *fs = dp->mp->fs_data;
   10626:	6843      	ldr	r3, [r0, #4]
   10628:	691e      	ldr	r6, [r3, #16]
	if (k_mem_slab_alloc(&lfs_dir_pool, &dp->dirp, K_NO_WAIT) != 0) {
   1062a:	2200      	movs	r2, #0
   1062c:	2300      	movs	r3, #0
   1062e:	4601      	mov	r1, r0
   10630:	4817      	ldr	r0, [pc, #92]	; (10690 <littlefs_opendir+0x70>)
   10632:	f003 fecb 	bl	143cc <k_mem_slab_alloc>
   10636:	bb10      	cbnz	r0, 1067e <littlefs_opendir+0x5e>
	memset(dp->dirp, 0, sizeof(struct lfs_dir));
   10638:	2234      	movs	r2, #52	; 0x34
   1063a:	2100      	movs	r1, #0
   1063c:	6820      	ldr	r0, [r4, #0]
   1063e:	f006 fcd3 	bl	16fe8 <memset>
	path = fs_impl_strip_prefix(path, dp->mp);
   10642:	6861      	ldr	r1, [r4, #4]
   10644:	4628      	mov	r0, r5
   10646:	f7ff fefd 	bl	10444 <fs_impl_strip_prefix>
   1064a:	4605      	mov	r5, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1064c:	f106 07ec 	add.w	r7, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   10650:	f04f 32ff 	mov.w	r2, #4294967295
   10654:	f04f 33ff 	mov.w	r3, #4294967295
   10658:	4638      	mov	r0, r7
   1065a:	f003 ff15 	bl	14488 <z_impl_k_mutex_lock>
	int ret = lfs_dir_open(&fs->lfs, dp->dirp, path);
   1065e:	462a      	mov	r2, r5
   10660:	6821      	ldr	r1, [r4, #0]
   10662:	f106 0070 	add.w	r0, r6, #112	; 0x70
   10666:	f001 fdbb 	bl	121e0 <lfs_dir_open>
   1066a:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   1066c:	4638      	mov	r0, r7
   1066e:	f003 ff95 	bl	1459c <z_impl_k_mutex_unlock>
	if (ret < 0) {
   10672:	2d00      	cmp	r5, #0
   10674:	db06      	blt.n	10684 <littlefs_opendir+0x64>
	return lfs_to_errno(ret);
   10676:	4628      	mov	r0, r5
   10678:	f006 fd07 	bl	1708a <lfs_to_errno>
}
   1067c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   1067e:	f06f 000b 	mvn.w	r0, #11
   10682:	e7fb      	b.n	1067c <littlefs_opendir+0x5c>
		k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
   10684:	4621      	mov	r1, r4
   10686:	4802      	ldr	r0, [pc, #8]	; (10690 <littlefs_opendir+0x70>)
   10688:	f003 fed6 	bl	14438 <k_mem_slab_free>
   1068c:	e7f3      	b.n	10676 <littlefs_opendir+0x56>
   1068e:	bf00      	nop
   10690:	200101e8 	.word	0x200101e8

00010694 <littlefs_mount>:
{
   10694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10698:	b08b      	sub	sp, #44	; 0x2c
   1069a:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
   1069c:	6904      	ldr	r4, [r0, #16]
	unsigned int area_id = (uintptr_t)mountp->storage_dev;
   1069e:	6947      	ldr	r7, [r0, #20]
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
   106a0:	f04f 0c00 	mov.w	ip, #0
   106a4:	2303      	movs	r3, #3
   106a6:	f363 0c02 	bfi	ip, r3, #0, #3
   106aa:	f36f 0cc5 	bfc	ip, #3, #3
   106ae:	4bb0      	ldr	r3, [pc, #704]	; (10970 <littlefs_mount+0x2dc>)
   106b0:	4ab0      	ldr	r2, [pc, #704]	; (10974 <littlefs_mount+0x2e0>)
   106b2:	1a9b      	subs	r3, r3, r2
   106b4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   106b8:	f363 1c8f 	bfi	ip, r3, #6, #10
   106bc:	4bae      	ldr	r3, [pc, #696]	; (10978 <littlefs_mount+0x2e4>)
   106be:	ae05      	add	r6, sp, #20
   106c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   106c2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   106c6:	4663      	mov	r3, ip
   106c8:	2204      	movs	r2, #4
   106ca:	4631      	mov	r1, r6
   106cc:	48ab      	ldr	r0, [pc, #684]	; (1097c <littlefs_mount+0x2e8>)
   106ce:	f7fd fba1 	bl	de14 <log_n>
	if (fs->area) {
   106d2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   106d6:	2b00      	cmp	r3, #0
   106d8:	f040 8146 	bne.w	10968 <littlefs_mount+0x2d4>
	k_mutex_init(&fs->mutex);
   106dc:	f104 06ec 	add.w	r6, r4, #236	; 0xec
	return z_impl_k_mutex_init(mutex);
   106e0:	4630      	mov	r0, r6
   106e2:	f008 fb76 	bl	18dd2 <z_impl_k_mutex_init>
	return z_impl_k_mutex_lock(mutex, timeout);
   106e6:	f04f 32ff 	mov.w	r2, #4294967295
   106ea:	f04f 33ff 	mov.w	r3, #4294967295
   106ee:	4630      	mov	r0, r6
   106f0:	f003 feca 	bl	14488 <z_impl_k_mutex_lock>
	ret = flash_area_open(area_id, &fs->area);
   106f4:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
   106f8:	b2f8      	uxtb	r0, r7
   106fa:	f7fd ff0d 	bl	e518 <flash_area_open>
	if ((ret < 0) || (fs->area == NULL)) {
   106fe:	2800      	cmp	r0, #0
   10700:	db26      	blt.n	10750 <littlefs_mount+0xbc>
   10702:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   10706:	b318      	cbz	r0, 10750 <littlefs_mount+0xbc>
	dev = flash_area_get_device(fs->area);
   10708:	f006 fa1c 	bl	16b44 <flash_area_get_device>
	if (dev == NULL) {
   1070c:	9003      	str	r0, [sp, #12]
   1070e:	2800      	cmp	r0, #0
   10710:	d03c      	beq.n	1078c <littlefs_mount+0xf8>
	lfs_size_t read_size = lcp->read_size;
   10712:	f8d4 a014 	ldr.w	sl, [r4, #20]
	if (read_size == 0) {
   10716:	f1ba 0f00 	cmp.w	sl, #0
   1071a:	d101      	bne.n	10720 <littlefs_mount+0x8c>
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
   1071c:	f04f 0a10 	mov.w	sl, #16
	lfs_size_t prog_size = lcp->prog_size;
   10720:	f8d4 9018 	ldr.w	r9, [r4, #24]
	if (prog_size == 0) {
   10724:	f1b9 0f00 	cmp.w	r9, #0
   10728:	d101      	bne.n	1072e <littlefs_mount+0x9a>
		prog_size = CONFIG_FS_LITTLEFS_PROG_SIZE;
   1072a:	f04f 0910 	mov.w	r9, #16
	lfs_size_t block_size = lcp->block_size;
   1072e:	69e7      	ldr	r7, [r4, #28]
	if (block_size == 0) {
   10730:	2f00      	cmp	r7, #0
   10732:	d042      	beq.n	107ba <littlefs_mount+0x126>
	if (block_size == 0) {
   10734:	2f00      	cmp	r7, #0
   10736:	f000 8114 	beq.w	10962 <littlefs_mount+0x2ce>
	int32_t block_cycles = lcp->block_cycles;
   1073a:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
	if (block_cycles == 0) {
   1073e:	f1bb 0f00 	cmp.w	fp, #0
   10742:	d040      	beq.n	107c6 <littlefs_mount+0x132>
	if (block_cycles <= 0) {
   10744:	f1bb 0f00 	cmp.w	fp, #0
   10748:	dc3f      	bgt.n	107ca <littlefs_mount+0x136>
		block_cycles = -1;
   1074a:	f04f 3bff 	mov.w	fp, #4294967295
   1074e:	e03c      	b.n	107ca <littlefs_mount+0x136>
		LOG_ERR("can't open flash area %d", area_id);
   10750:	f04f 0200 	mov.w	r2, #0
   10754:	2301      	movs	r3, #1
   10756:	f363 0202 	bfi	r2, r3, #0, #3
   1075a:	f36f 02c5 	bfc	r2, #3, #3
   1075e:	4b84      	ldr	r3, [pc, #528]	; (10970 <littlefs_mount+0x2dc>)
   10760:	4984      	ldr	r1, [pc, #528]	; (10974 <littlefs_mount+0x2e0>)
   10762:	1a5b      	subs	r3, r3, r1
   10764:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   10768:	f363 128f 	bfi	r2, r3, #6, #10
   1076c:	4639      	mov	r1, r7
   1076e:	4884      	ldr	r0, [pc, #528]	; (10980 <littlefs_mount+0x2ec>)
   10770:	f7fd fa56 	bl	dc20 <log_1>
		ret = -ENODEV;
   10774:	f06f 0712 	mvn.w	r7, #18
		fs->area = NULL;
   10778:	2300      	movs	r3, #0
   1077a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	return z_impl_k_mutex_unlock(mutex);
   1077e:	4630      	mov	r0, r6
   10780:	f003 ff0c 	bl	1459c <z_impl_k_mutex_unlock>
}
   10784:	4638      	mov	r0, r7
   10786:	b00b      	add	sp, #44	; 0x2c
   10788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("can't get flash device: %s", fs->area->fa_dev_name);
   1078c:	f04f 0200 	mov.w	r2, #0
   10790:	2301      	movs	r3, #1
   10792:	f363 0202 	bfi	r2, r3, #0, #3
   10796:	f36f 02c5 	bfc	r2, #3, #3
   1079a:	4b75      	ldr	r3, [pc, #468]	; (10970 <littlefs_mount+0x2dc>)
   1079c:	4975      	ldr	r1, [pc, #468]	; (10974 <littlefs_mount+0x2e0>)
   1079e:	1a5b      	subs	r3, r3, r1
   107a0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   107a4:	f363 128f 	bfi	r2, r3, #6, #10
   107a8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   107ac:	68d9      	ldr	r1, [r3, #12]
   107ae:	4875      	ldr	r0, [pc, #468]	; (10984 <littlefs_mount+0x2f0>)
   107b0:	f7fd fa36 	bl	dc20 <log_1>
		ret = -ENODEV;
   107b4:	f06f 0712 	mvn.w	r7, #18
   107b8:	e7de      	b.n	10778 <littlefs_mount+0xe4>
		block_size = get_block_size(fs->area);
   107ba:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   107be:	f7ff fe57 	bl	10470 <get_block_size>
   107c2:	4607      	mov	r7, r0
   107c4:	e7b6      	b.n	10734 <littlefs_mount+0xa0>
		block_cycles = CONFIG_FS_LITTLEFS_BLOCK_CYCLES;
   107c6:	f44f 7b00 	mov.w	fp, #512	; 0x200
	lfs_size_t cache_size = lcp->cache_size;
   107ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   107cc:	9300      	str	r3, [sp, #0]
	if (cache_size == 0) {
   107ce:	b90b      	cbnz	r3, 107d4 <littlefs_mount+0x140>
		cache_size = CONFIG_FS_LITTLEFS_CACHE_SIZE;
   107d0:	2340      	movs	r3, #64	; 0x40
   107d2:	9300      	str	r3, [sp, #0]
	lfs_size_t lookahead_size = lcp->lookahead_size;
   107d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   107d6:	9301      	str	r3, [sp, #4]
	if (lookahead_size == 0) {
   107d8:	b90b      	cbnz	r3, 107de <littlefs_mount+0x14a>
		lookahead_size = CONFIG_FS_LITTLEFS_LOOKAHEAD_SIZE;
   107da:	2320      	movs	r3, #32
   107dc:	9301      	str	r3, [sp, #4]
	lfs_size_t block_count = fs->area->fa_size / block_size;
   107de:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
   107e2:	688b      	ldr	r3, [r1, #8]
   107e4:	fbb3 f3f7 	udiv	r3, r3, r7
   107e8:	9302      	str	r3, [sp, #8]
	LOG_INF("FS at %s:0x%x is %u 0x%x-byte blocks with %u cycle",
   107ea:	f04f 0300 	mov.w	r3, #0
   107ee:	2003      	movs	r0, #3
   107f0:	f360 0302 	bfi	r3, r0, #0, #3
   107f4:	f36f 03c5 	bfc	r3, #3, #3
   107f8:	4a5d      	ldr	r2, [pc, #372]	; (10970 <littlefs_mount+0x2dc>)
   107fa:	485e      	ldr	r0, [pc, #376]	; (10974 <littlefs_mount+0x2e0>)
   107fc:	eba2 0800 	sub.w	r8, r2, r0
   10800:	f3c8 08c9 	ubfx	r8, r8, #3, #10
   10804:	f368 138f 	bfi	r3, r8, #6, #10
   10808:	9803      	ldr	r0, [sp, #12]
   1080a:	6802      	ldr	r2, [r0, #0]
   1080c:	9205      	str	r2, [sp, #20]
   1080e:	684a      	ldr	r2, [r1, #4]
   10810:	9206      	str	r2, [sp, #24]
   10812:	9a02      	ldr	r2, [sp, #8]
   10814:	9207      	str	r2, [sp, #28]
   10816:	9708      	str	r7, [sp, #32]
   10818:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   1081c:	2205      	movs	r2, #5
   1081e:	a905      	add	r1, sp, #20
   10820:	4859      	ldr	r0, [pc, #356]	; (10988 <littlefs_mount+0x2f4>)
   10822:	f7fd faf7 	bl	de14 <log_n>
	LOG_INF("sizes: rd %u ; pr %u ; ca %u ; la %u",
   10826:	f04f 0300 	mov.w	r3, #0
   1082a:	2003      	movs	r0, #3
   1082c:	f360 0302 	bfi	r3, r0, #0, #3
   10830:	f36f 03c5 	bfc	r3, #3, #3
   10834:	f368 138f 	bfi	r3, r8, #6, #10
   10838:	f8cd a014 	str.w	sl, [sp, #20]
   1083c:	f8cd 9018 	str.w	r9, [sp, #24]
   10840:	9900      	ldr	r1, [sp, #0]
   10842:	9107      	str	r1, [sp, #28]
   10844:	9801      	ldr	r0, [sp, #4]
   10846:	9008      	str	r0, [sp, #32]
   10848:	2204      	movs	r2, #4
   1084a:	f10d 0c14 	add.w	ip, sp, #20
   1084e:	4661      	mov	r1, ip
   10850:	484e      	ldr	r0, [pc, #312]	; (1098c <littlefs_mount+0x2f8>)
   10852:	f7fd fadf 	bl	de14 <log_n>
	lcp->context = (void *)fs->area;
   10856:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   1085a:	6023      	str	r3, [r4, #0]
	lcp->read = lfs_api_read;
   1085c:	4b4c      	ldr	r3, [pc, #304]	; (10990 <littlefs_mount+0x2fc>)
   1085e:	6063      	str	r3, [r4, #4]
	lcp->prog = lfs_api_prog;
   10860:	4b4c      	ldr	r3, [pc, #304]	; (10994 <littlefs_mount+0x300>)
   10862:	60a3      	str	r3, [r4, #8]
	lcp->erase = lfs_api_erase;
   10864:	4b4c      	ldr	r3, [pc, #304]	; (10998 <littlefs_mount+0x304>)
   10866:	60e3      	str	r3, [r4, #12]
	lcp->sync = lfs_api_sync;
   10868:	4b4c      	ldr	r3, [pc, #304]	; (1099c <littlefs_mount+0x308>)
   1086a:	6123      	str	r3, [r4, #16]
	lcp->read_size = read_size;
   1086c:	f8c4 a014 	str.w	sl, [r4, #20]
	lcp->prog_size = prog_size;
   10870:	f8c4 9018 	str.w	r9, [r4, #24]
	lcp->block_size = block_size;
   10874:	61e7      	str	r7, [r4, #28]
	lcp->block_count = block_count;
   10876:	9a02      	ldr	r2, [sp, #8]
   10878:	6222      	str	r2, [r4, #32]
	lcp->block_cycles = block_cycles;
   1087a:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
	lcp->cache_size = cache_size;
   1087e:	9900      	ldr	r1, [sp, #0]
   10880:	62a1      	str	r1, [r4, #40]	; 0x28
	lcp->lookahead_size = lookahead_size;
   10882:	9801      	ldr	r0, [sp, #4]
   10884:	62e0      	str	r0, [r4, #44]	; 0x2c
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   10886:	f104 0870 	add.w	r8, r4, #112	; 0x70
   1088a:	4621      	mov	r1, r4
   1088c:	4640      	mov	r0, r8
   1088e:	f001 fd43 	bl	12318 <lfs_mount>
	if (ret < 0) {
   10892:	1e07      	subs	r7, r0, #0
   10894:	db19      	blt.n	108ca <littlefs_mount+0x236>
	LOG_INF("%s mounted", log_strdup(mountp->mnt_point));
   10896:	f04f 0800 	mov.w	r8, #0
   1089a:	2303      	movs	r3, #3
   1089c:	f363 0802 	bfi	r8, r3, #0, #3
   108a0:	f36f 08c5 	bfc	r8, #3, #3
   108a4:	4b32      	ldr	r3, [pc, #200]	; (10970 <littlefs_mount+0x2dc>)
   108a6:	4a33      	ldr	r2, [pc, #204]	; (10974 <littlefs_mount+0x2e0>)
   108a8:	1a9b      	subs	r3, r3, r2
   108aa:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   108ae:	f363 188f 	bfi	r8, r3, #6, #10
   108b2:	68e8      	ldr	r0, [r5, #12]
   108b4:	f7fc fff0 	bl	d898 <log_strdup>
   108b8:	4601      	mov	r1, r0
   108ba:	4642      	mov	r2, r8
   108bc:	4838      	ldr	r0, [pc, #224]	; (109a0 <littlefs_mount+0x30c>)
   108be:	f7fd f9af 	bl	dc20 <log_1>
	if (ret < 0) {
   108c2:	2f00      	cmp	r7, #0
   108c4:	f6bf af5b 	bge.w	1077e <littlefs_mount+0xea>
   108c8:	e756      	b.n	10778 <littlefs_mount+0xe4>
		LOG_WRN("can't mount (LFS %d); formatting", ret);
   108ca:	f04f 0200 	mov.w	r2, #0
   108ce:	2302      	movs	r3, #2
   108d0:	f363 0202 	bfi	r2, r3, #0, #3
   108d4:	f36f 02c5 	bfc	r2, #3, #3
   108d8:	4b25      	ldr	r3, [pc, #148]	; (10970 <littlefs_mount+0x2dc>)
   108da:	4926      	ldr	r1, [pc, #152]	; (10974 <littlefs_mount+0x2e0>)
   108dc:	1a5b      	subs	r3, r3, r1
   108de:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   108e2:	f363 128f 	bfi	r2, r3, #6, #10
   108e6:	4639      	mov	r1, r7
   108e8:	482e      	ldr	r0, [pc, #184]	; (109a4 <littlefs_mount+0x310>)
   108ea:	f7fd f999 	bl	dc20 <log_1>
		ret = lfs_format(&fs->lfs, &fs->cfg);
   108ee:	4621      	mov	r1, r4
   108f0:	4640      	mov	r0, r8
   108f2:	f003 fa89 	bl	13e08 <lfs_format>
		if (ret < 0) {
   108f6:	1e07      	subs	r7, r0, #0
   108f8:	db1c      	blt.n	10934 <littlefs_mount+0x2a0>
		ret = lfs_mount(&fs->lfs, &fs->cfg);
   108fa:	4621      	mov	r1, r4
   108fc:	4640      	mov	r0, r8
   108fe:	f001 fd0b 	bl	12318 <lfs_mount>
		if (ret < 0) {
   10902:	1e07      	subs	r7, r0, #0
   10904:	dac7      	bge.n	10896 <littlefs_mount+0x202>
			LOG_ERR("remount after format failed (LFS %d)", ret);
   10906:	f04f 0200 	mov.w	r2, #0
   1090a:	2301      	movs	r3, #1
   1090c:	f363 0202 	bfi	r2, r3, #0, #3
   10910:	f36f 02c5 	bfc	r2, #3, #3
   10914:	4b16      	ldr	r3, [pc, #88]	; (10970 <littlefs_mount+0x2dc>)
   10916:	4917      	ldr	r1, [pc, #92]	; (10974 <littlefs_mount+0x2e0>)
   10918:	1a5b      	subs	r3, r3, r1
   1091a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   1091e:	f363 128f 	bfi	r2, r3, #6, #10
   10922:	4639      	mov	r1, r7
   10924:	4820      	ldr	r0, [pc, #128]	; (109a8 <littlefs_mount+0x314>)
   10926:	f7fd f97b 	bl	dc20 <log_1>
			ret = lfs_to_errno(ret);
   1092a:	4638      	mov	r0, r7
   1092c:	f006 fbad 	bl	1708a <lfs_to_errno>
   10930:	4607      	mov	r7, r0
			goto out;
   10932:	e7c6      	b.n	108c2 <littlefs_mount+0x22e>
			LOG_ERR("format failed (LFS %d)", ret);
   10934:	f04f 0200 	mov.w	r2, #0
   10938:	2301      	movs	r3, #1
   1093a:	f363 0202 	bfi	r2, r3, #0, #3
   1093e:	f36f 02c5 	bfc	r2, #3, #3
   10942:	4b0b      	ldr	r3, [pc, #44]	; (10970 <littlefs_mount+0x2dc>)
   10944:	490b      	ldr	r1, [pc, #44]	; (10974 <littlefs_mount+0x2e0>)
   10946:	1a5b      	subs	r3, r3, r1
   10948:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   1094c:	f363 128f 	bfi	r2, r3, #6, #10
   10950:	4639      	mov	r1, r7
   10952:	4816      	ldr	r0, [pc, #88]	; (109ac <littlefs_mount+0x318>)
   10954:	f7fd f964 	bl	dc20 <log_1>
			ret = lfs_to_errno(ret);
   10958:	4638      	mov	r0, r7
   1095a:	f006 fb96 	bl	1708a <lfs_to_errno>
   1095e:	4607      	mov	r7, r0
			goto out;
   10960:	e7af      	b.n	108c2 <littlefs_mount+0x22e>
		ret = -EINVAL;
   10962:	f06f 0715 	mvn.w	r7, #21
   10966:	e707      	b.n	10778 <littlefs_mount+0xe4>
		return -EBUSY;
   10968:	f06f 070f 	mvn.w	r7, #15
   1096c:	e70a      	b.n	10784 <littlefs_mount+0xf0>
   1096e:	bf00      	nop
   10970:	00019584 	.word	0x00019584
   10974:	00019574 	.word	0x00019574
   10978:	000195d0 	.word	0x000195d0
   1097c:	0001a164 	.word	0x0001a164
   10980:	0001a190 	.word	0x0001a190
   10984:	0001a1ac 	.word	0x0001a1ac
   10988:	0001a1c8 	.word	0x0001a1c8
   1098c:	0001a1fc 	.word	0x0001a1fc
   10990:	000171f3 	.word	0x000171f3
   10994:	000171d9 	.word	0x000171d9
   10998:	000171c5 	.word	0x000171c5
   1099c:	00017143 	.word	0x00017143
   109a0:	0001a288 	.word	0x0001a288
   109a4:	0001a224 	.word	0x0001a224
   109a8:	0001a260 	.word	0x0001a260
   109ac:	0001a248 	.word	0x0001a248

000109b0 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
   109b0:	b470      	push	{r4, r5, r6}
	return port->config;
   109b2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   109b4:	685e      	ldr	r6, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   109b6:	4b30      	ldr	r3, [pc, #192]	; (10a78 <gpio_nrfx_config+0xc8>)
   109b8:	4013      	ands	r3, r2
   109ba:	4830      	ldr	r0, [pc, #192]	; (10a7c <gpio_nrfx_config+0xcc>)
   109bc:	4283      	cmp	r3, r0
   109be:	d027      	beq.n	10a10 <gpio_nrfx_config+0x60>
   109c0:	d812      	bhi.n	109e8 <gpio_nrfx_config+0x38>
   109c2:	2b06      	cmp	r3, #6
   109c4:	d026      	beq.n	10a14 <gpio_nrfx_config+0x64>
   109c6:	d904      	bls.n	109d2 <gpio_nrfx_config+0x22>
   109c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   109cc:	d109      	bne.n	109e2 <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
   109ce:	2001      	movs	r0, #1
   109d0:	e016      	b.n	10a00 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   109d2:	b30b      	cbz	r3, 10a18 <gpio_nrfx_config+0x68>
   109d4:	2b02      	cmp	r3, #2
   109d6:	d101      	bne.n	109dc <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
   109d8:	2004      	movs	r0, #4
   109da:	e011      	b.n	10a00 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   109dc:	f06f 0015 	mvn.w	r0, #21
   109e0:	e03c      	b.n	10a5c <gpio_nrfx_config+0xac>
   109e2:	f06f 0015 	mvn.w	r0, #21
   109e6:	e039      	b.n	10a5c <gpio_nrfx_config+0xac>
   109e8:	4825      	ldr	r0, [pc, #148]	; (10a80 <gpio_nrfx_config+0xd0>)
   109ea:	4283      	cmp	r3, r0
   109ec:	d016      	beq.n	10a1c <gpio_nrfx_config+0x6c>
   109ee:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   109f2:	d101      	bne.n	109f8 <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
   109f4:	2003      	movs	r0, #3
   109f6:	e003      	b.n	10a00 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   109f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   109fc:	d139      	bne.n	10a72 <gpio_nrfx_config+0xc2>
		drive = NRF_GPIO_PIN_S0H1;
   109fe:	2002      	movs	r0, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
   10a00:	f012 0f10 	tst.w	r2, #16
   10a04:	d10c      	bne.n	10a20 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
   10a06:	f012 0f20 	tst.w	r2, #32
   10a0a:	d029      	beq.n	10a60 <gpio_nrfx_config+0xb0>
		pull = NRF_GPIO_PIN_PULLDOWN;
   10a0c:	2401      	movs	r4, #1
   10a0e:	e008      	b.n	10a22 <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
   10a10:	2007      	movs	r0, #7
   10a12:	e7f5      	b.n	10a00 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
   10a14:	2006      	movs	r0, #6
   10a16:	e7f3      	b.n	10a00 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10a18:	2000      	movs	r0, #0
   10a1a:	e7f1      	b.n	10a00 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
   10a1c:	2005      	movs	r0, #5
   10a1e:	e7ef      	b.n	10a00 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
   10a20:	2403      	movs	r4, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
   10a22:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   10a26:	f412 7f80 	tst.w	r2, #256	; 0x100
   10a2a:	bf0c      	ite	eq
   10a2c:	2501      	moveq	r5, #1
   10a2e:	2500      	movne	r5, #0

	if ((flags & GPIO_OUTPUT) != 0) {
   10a30:	f412 7f00 	tst.w	r2, #512	; 0x200
   10a34:	d005      	beq.n	10a42 <gpio_nrfx_config+0x92>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   10a36:	f412 6f00 	tst.w	r2, #2048	; 0x800
   10a3a:	d013      	beq.n	10a64 <gpio_nrfx_config+0xb4>
			nrf_gpio_port_out_set(reg, BIT(pin));
   10a3c:	2201      	movs	r2, #1
   10a3e:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   10a40:	60b2      	str	r2, [r6, #8]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   10a42:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   10a46:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   10a4a:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10a4e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10a52:	3180      	adds	r1, #128	; 0x80
   10a54:	4a0b      	ldr	r2, [pc, #44]	; (10a84 <gpio_nrfx_config+0xd4>)
   10a56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
   10a5a:	2000      	movs	r0, #0
}
   10a5c:	bc70      	pop	{r4, r5, r6}
   10a5e:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
   10a60:	2400      	movs	r4, #0
   10a62:	e7de      	b.n	10a22 <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   10a64:	f412 6f80 	tst.w	r2, #1024	; 0x400
   10a68:	d0eb      	beq.n	10a42 <gpio_nrfx_config+0x92>
			nrf_gpio_port_out_clear(reg, BIT(pin));
   10a6a:	2201      	movs	r2, #1
   10a6c:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   10a6e:	60f2      	str	r2, [r6, #12]
}
   10a70:	e7e7      	b.n	10a42 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10a72:	f06f 0015 	mvn.w	r0, #21
   10a76:	e7f1      	b.n	10a5c <gpio_nrfx_config+0xac>
   10a78:	00f00006 	.word	0x00f00006
   10a7c:	00100006 	.word	0x00100006
   10a80:	00400002 	.word	0x00400002
   10a84:	40842500 	.word	0x40842500

00010a88 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
   10a88:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
   10a8a:	68c5      	ldr	r5, [r0, #12]
	return port->config;
   10a8c:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
   10a8e:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   10a90:	696a      	ldr	r2, [r5, #20]
   10a92:	69ab      	ldr	r3, [r5, #24]
   10a94:	4313      	orrs	r3, r2
   10a96:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
   10a9a:	2201      	movs	r2, #1
	uint32_t pin = 0U;
   10a9c:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
   10a9e:	e011      	b.n	10ac4 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
   10aa0:	f04f 0c02 	mov.w	ip, #2
    *p_pin = pin_number & 0x1F;
   10aa4:	f003 031f 	and.w	r3, r3, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10aa8:	4f0f      	ldr	r7, [pc, #60]	; (10ae8 <cfg_level_pins+0x60>)
   10aaa:	3380      	adds	r3, #128	; 0x80
   10aac:	f857 4023 	ldr.w	r4, [r7, r3, lsl #2]
   10ab0:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10ab4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   10ab8:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
   10abc:	ea21 0102 	bic.w	r1, r1, r2
		}
		++pin;
   10ac0:	3001      	adds	r0, #1
		bit <<= 1;
   10ac2:	0052      	lsls	r2, r2, #1
	while (level_pins) {
   10ac4:	b171      	cbz	r1, 10ae4 <cfg_level_pins+0x5c>
		if (level_pins & bit) {
   10ac6:	420a      	tst	r2, r1
   10ac8:	d0fa      	beq.n	10ac0 <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10aca:	7a34      	ldrb	r4, [r6, #8]
   10acc:	f000 031f 	and.w	r3, r0, #31
   10ad0:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10ad4:	692c      	ldr	r4, [r5, #16]
   10ad6:	40c4      	lsrs	r4, r0
   10ad8:	f014 0f01 	tst.w	r4, #1
   10adc:	d1e0      	bne.n	10aa0 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
   10ade:	f04f 0c03 	mov.w	ip, #3
   10ae2:	e7df      	b.n	10aa4 <cfg_level_pins+0x1c>
	}
}
   10ae4:	bcf0      	pop	{r4, r5, r6, r7}
   10ae6:	4770      	bx	lr
   10ae8:	40842500 	.word	0x40842500

00010aec <check_level_trigger_pins>:
 * @param port Pointer to GPIO port device.
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port)
{
   10aec:	b470      	push	{r4, r5, r6}
	return port->data;
   10aee:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   10af0:	6840      	ldr	r0, [r0, #4]
	uint32_t out = data->pin_int_en;
   10af2:	68da      	ldr	r2, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   10af4:	6959      	ldr	r1, [r3, #20]
   10af6:	699c      	ldr	r4, [r3, #24]
   10af8:	4321      	orrs	r1, r4
   10afa:	ea22 0201 	bic.w	r2, r2, r1
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   10afe:	6841      	ldr	r1, [r0, #4]
    return p_reg->IN;
   10b00:	6909      	ldr	r1, [r1, #16]

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   10b02:	6918      	ldr	r0, [r3, #16]
   10b04:	4048      	eors	r0, r1

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
   10b06:	ea22 0000 	bic.w	r0, r2, r0
	/* Disable sense detection on all pins that use it, whether
	 * they appear to have triggered or not.  This ensures
	 * nobody's requesting DETECT.
	 */
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
   10b0a:	2301      	movs	r3, #1
	uint32_t pin = 0U;
   10b0c:	2400      	movs	r4, #0

	while (level_pins) {
   10b0e:	e001      	b.n	10b14 <check_level_trigger_pins+0x28>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			level_pins &= ~bit;
		}
		++pin;
   10b10:	3401      	adds	r4, #1
		bit <<= 1;
   10b12:	005b      	lsls	r3, r3, #1
	while (level_pins) {
   10b14:	b172      	cbz	r2, 10b34 <check_level_trigger_pins+0x48>
		if (level_pins & bit) {
   10b16:	421a      	tst	r2, r3
   10b18:	d0fa      	beq.n	10b10 <check_level_trigger_pins+0x24>
    *p_pin = pin_number & 0x1F;
   10b1a:	f004 011f 	and.w	r1, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10b1e:	4e06      	ldr	r6, [pc, #24]	; (10b38 <check_level_trigger_pins+0x4c>)
   10b20:	3180      	adds	r1, #128	; 0x80
   10b22:	f856 5021 	ldr.w	r5, [r6, r1, lsl #2]
   10b26:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10b2a:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
			level_pins &= ~bit;
   10b2e:	ea22 0203 	bic.w	r2, r2, r3
   10b32:	e7ed      	b.n	10b10 <check_level_trigger_pins+0x24>
	}

	return out;
}
   10b34:	bc70      	pop	{r4, r5, r6}
   10b36:	4770      	bx	lr
   10b38:	40842500 	.word	0x40842500

00010b3c <gpiote_event_handler>:
#ifdef CONFIG_GPIO_NRF_P1
DEVICE_DECLARE(gpio_nrfx_p1);
#endif

static void gpiote_event_handler(void)
{
   10b3c:	b570      	push	{r4, r5, r6, lr}
   10b3e:	b082      	sub	sp, #8
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   10b40:	2300      	movs	r3, #0
   10b42:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE bool nrf_gpiote_event_check(NRF_GPIOTE_Type const * p_reg,
                                              nrf_gpiote_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10b44:	4b2d      	ldr	r3, [pc, #180]	; (10bfc <gpiote_event_handler+0xc0>)
   10b46:	681c      	ldr	r4, [r3, #0]
	bool port_event = nrf_gpiote_event_check(NRF_GPIOTE,
						 NRF_GPIOTE_EVENT_PORT);

	if (port_event) {
   10b48:	b90c      	cbnz	r4, 10b4e <gpiote_event_handler+0x12>
{
   10b4a:	2100      	movs	r1, #0
   10b4c:	e009      	b.n	10b62 <gpiote_event_handler+0x26>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
   10b4e:	482c      	ldr	r0, [pc, #176]	; (10c00 <gpiote_event_handler+0xc4>)
   10b50:	f7ff ffcc 	bl	10aec <check_level_trigger_pins>
		fired_triggers[0] =
   10b54:	9001      	str	r0, [sp, #4]
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10b56:	4b29      	ldr	r3, [pc, #164]	; (10bfc <gpiote_event_handler+0xc0>)
   10b58:	2200      	movs	r2, #0
   10b5a:	601a      	str	r2, [r3, #0]
   10b5c:	681b      	ldr	r3, [r3, #0]
    nrf_event_readback((void *)nrf_gpiote_event_address_get(p_reg, event));
}
   10b5e:	e7f4      	b.n	10b4a <gpiote_event_handler+0xe>
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10b60:	3101      	adds	r1, #1
   10b62:	2907      	cmp	r1, #7
   10b64:	d826      	bhi.n	10bb4 <gpiote_event_handler+0x78>
		nrf_gpiote_event_t evt =
   10b66:	f101 0340 	add.w	r3, r1, #64	; 0x40
   10b6a:	009b      	lsls	r3, r3, #2
   10b6c:	b29a      	uxth	r2, r3
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   10b6e:	2301      	movs	r3, #1
   10b70:	408b      	lsls	r3, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   10b72:	4824      	ldr	r0, [pc, #144]	; (10c04 <gpiote_event_handler+0xc8>)
   10b74:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
   10b78:	4203      	tst	r3, r0
   10b7a:	d0f1      	beq.n	10b60 <gpiote_event_handler+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10b7c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   10b80:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   10b84:	681b      	ldr	r3, [r3, #0]
   10b86:	2b00      	cmp	r3, #0
   10b88:	d0ea      	beq.n	10b60 <gpiote_event_handler+0x24>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10b8a:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   10b8e:	481d      	ldr	r0, [pc, #116]	; (10c04 <gpiote_event_handler+0xc8>)
   10b90:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   10b94:	f3c0 2004 	ubfx	r0, r0, #8, #5
		    nrf_gpiote_event_check(NRF_GPIOTE, evt)) {
			uint32_t abs_pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, i);
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   10b98:	2301      	movs	r3, #1
   10b9a:	fa03 f000 	lsl.w	r0, r3, r0
   10b9e:	9b01      	ldr	r3, [sp, #4]
   10ba0:	4303      	orrs	r3, r0
   10ba2:	9301      	str	r3, [sp, #4]
    return ((uint32_t)p_reg + event);
   10ba4:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   10ba8:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10bac:	2200      	movs	r2, #0
   10bae:	601a      	str	r2, [r3, #0]
   10bb0:	681b      	ldr	r3, [r3, #0]
}
   10bb2:	e7d5      	b.n	10b60 <gpiote_event_handler+0x24>
			nrf_gpiote_event_clear(NRF_GPIOTE, evt);
		}
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
   10bb4:	9e01      	ldr	r6, [sp, #4]
   10bb6:	b916      	cbnz	r6, 10bbe <gpiote_event_handler+0x82>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
	}
#endif

	if (port_event) {
   10bb8:	b9dc      	cbnz	r4, 10bf2 <gpiote_event_handler+0xb6>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
#endif
	}
}
   10bba:	b002      	add	sp, #8
   10bbc:	bd70      	pop	{r4, r5, r6, pc}
   10bbe:	4b12      	ldr	r3, [pc, #72]	; (10c08 <gpiote_event_handler+0xcc>)
   10bc0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10bc2:	b119      	cbz	r1, 10bcc <gpiote_event_handler+0x90>
   10bc4:	460d      	mov	r5, r1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   10bc6:	b149      	cbz	r1, 10bdc <gpiote_event_handler+0xa0>
	return node->next;
   10bc8:	680d      	ldr	r5, [r1, #0]
   10bca:	e007      	b.n	10bdc <gpiote_event_handler+0xa0>
   10bcc:	460d      	mov	r5, r1
   10bce:	e005      	b.n	10bdc <gpiote_event_handler+0xa0>
   10bd0:	b16d      	cbz	r5, 10bee <gpiote_event_handler+0xb2>
   10bd2:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   10bd4:	b105      	cbz	r5, 10bd8 <gpiote_event_handler+0x9c>
	return node->next;
   10bd6:	682b      	ldr	r3, [r5, #0]
   10bd8:	4629      	mov	r1, r5
   10bda:	461d      	mov	r5, r3
   10bdc:	2900      	cmp	r1, #0
   10bde:	d0eb      	beq.n	10bb8 <gpiote_event_handler+0x7c>
		if (cb->pin_mask & pins) {
   10be0:	688a      	ldr	r2, [r1, #8]
   10be2:	4032      	ands	r2, r6
   10be4:	d0f4      	beq.n	10bd0 <gpiote_event_handler+0x94>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   10be6:	684b      	ldr	r3, [r1, #4]
   10be8:	4805      	ldr	r0, [pc, #20]	; (10c00 <gpiote_event_handler+0xc4>)
   10bea:	4798      	blx	r3
   10bec:	e7f0      	b.n	10bd0 <gpiote_event_handler+0x94>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10bee:	462b      	mov	r3, r5
   10bf0:	e7f2      	b.n	10bd8 <gpiote_event_handler+0x9c>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
   10bf2:	4803      	ldr	r0, [pc, #12]	; (10c00 <gpiote_event_handler+0xc4>)
   10bf4:	f7ff ff48 	bl	10a88 <cfg_level_pins>
}
   10bf8:	e7df      	b.n	10bba <gpiote_event_handler+0x7e>
   10bfa:	bf00      	nop
   10bfc:	4003117c 	.word	0x4003117c
   10c00:	200101a8 	.word	0x200101a8
   10c04:	40031000 	.word	0x40031000
   10c08:	200108e4 	.word	0x200108e4

00010c0c <gpiote_pin_cleanup>:
{
   10c0c:	b430      	push	{r4, r5}
    return p_reg->INTENSET & mask;
   10c0e:	4b17      	ldr	r3, [pc, #92]	; (10c6c <gpiote_pin_cleanup+0x60>)
   10c10:	f8d3 5304 	ldr.w	r5, [r3, #772]	; 0x304
   10c14:	b2ed      	uxtb	r5, r5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10c16:	2300      	movs	r3, #0
   10c18:	e000      	b.n	10c1c <gpiote_pin_cleanup+0x10>
   10c1a:	3301      	adds	r3, #1
   10c1c:	2b07      	cmp	r3, #7
   10c1e:	d822      	bhi.n	10c66 <gpiote_pin_cleanup+0x5a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10c20:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   10c24:	4c11      	ldr	r4, [pc, #68]	; (10c6c <gpiote_pin_cleanup+0x60>)
   10c26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   10c2a:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   10c2e:	4291      	cmp	r1, r2
   10c30:	d1f3      	bne.n	10c1a <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
   10c32:	fa25 f203 	lsr.w	r2, r5, r3
   10c36:	f012 0f01 	tst.w	r2, #1
   10c3a:	d0ee      	beq.n	10c1a <gpiote_pin_cleanup+0xe>
			(void)atomic_and(mask, ~BIT(i));
   10c3c:	2201      	movs	r2, #1
   10c3e:	409a      	lsls	r2, r3
   10c40:	43d1      	mvns	r1, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10c42:	e8d0 4fef 	ldaex	r4, [r0]
   10c46:	400c      	ands	r4, r1
   10c48:	e8c0 4fe5 	stlex	r5, r4, [r0]
   10c4c:	2d00      	cmp	r5, #0
   10c4e:	d1f8      	bne.n	10c42 <gpiote_pin_cleanup+0x36>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   10c50:	4906      	ldr	r1, [pc, #24]	; (10c6c <gpiote_pin_cleanup+0x60>)
   10c52:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   10c56:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   10c5a:	f020 0001 	bic.w	r0, r0, #1
   10c5e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->INTENCLR = mask;
   10c62:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
}
   10c66:	bc30      	pop	{r4, r5}
   10c68:	4770      	bx	lr
   10c6a:	bf00      	nop
   10c6c:	40031000 	.word	0x40031000

00010c70 <gpiote_channel_alloc>:
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   10c70:	2300      	movs	r3, #0
   10c72:	2b07      	cmp	r3, #7
   10c74:	d842      	bhi.n	10cfc <gpiote_channel_alloc+0x8c>
{
   10c76:	b470      	push	{r4, r5, r6}
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   10c78:	2401      	movs	r4, #1
   10c7a:	409c      	lsls	r4, r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10c7c:	e8d0 5fef 	ldaex	r5, [r0]
   10c80:	ea45 0604 	orr.w	r6, r5, r4
   10c84:	e8c0 6fec 	stlex	ip, r6, [r0]
   10c88:	f1bc 0f00 	cmp.w	ip, #0
   10c8c:	d1f6      	bne.n	10c7c <gpiote_channel_alloc+0xc>
		if ((prev & BIT(channel)) == 0) {
   10c8e:	40dd      	lsrs	r5, r3
   10c90:	f015 0f01 	tst.w	r5, #1
   10c94:	d007      	beq.n	10ca6 <gpiote_channel_alloc+0x36>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   10c96:	3301      	adds	r3, #1
   10c98:	b2db      	uxtb	r3, r3
   10c9a:	2b07      	cmp	r3, #7
   10c9c:	d9ec      	bls.n	10c78 <gpiote_channel_alloc+0x8>
	return -ENODEV;
   10c9e:	f06f 0012 	mvn.w	r0, #18
}
   10ca2:	bc70      	pop	{r4, r5, r6}
   10ca4:	4770      	bx	lr
			nrf_gpiote_event_t evt =
   10ca6:	f103 0040 	add.w	r0, r3, #64	; 0x40
   10caa:	0080      	lsls	r0, r0, #2
   10cac:	b280      	uxth	r0, r0
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10cae:	4d15      	ldr	r5, [pc, #84]	; (10d04 <gpiote_channel_alloc+0x94>)
   10cb0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   10cb4:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
   10cb8:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   10cbc:	f426 7640 	bic.w	r6, r6, #768	; 0x300
   10cc0:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10cc4:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
   10cc8:	0209      	lsls	r1, r1, #8
   10cca:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   10cce:	0412      	lsls	r2, r2, #16
   10cd0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10cd4:	430a      	orrs	r2, r1
   10cd6:	4332      	orrs	r2, r6
   10cd8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    return ((uint32_t)p_reg + event);
   10cdc:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
   10ce0:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10ce4:	2000      	movs	r0, #0
   10ce6:	6010      	str	r0, [r2, #0]
   10ce8:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   10cea:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   10cee:	f042 0201 	orr.w	r2, r2, #1
   10cf2:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    p_reg->INTENSET = mask;
   10cf6:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
			return 0;
   10cfa:	e7d2      	b.n	10ca2 <gpiote_channel_alloc+0x32>
	return -ENODEV;
   10cfc:	f06f 0012 	mvn.w	r0, #18
}
   10d00:	4770      	bx	lr
   10d02:	bf00      	nop
   10d04:	40031000 	.word	0x40031000

00010d08 <gpiote_pin_int_cfg>:
{
   10d08:	b570      	push	{r4, r5, r6, lr}
   10d0a:	460c      	mov	r4, r1
	return port->data;
   10d0c:	68c6      	ldr	r6, [r0, #12]
	return port->config;
   10d0e:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10d10:	7a1b      	ldrb	r3, [r3, #8]
   10d12:	f001 051f 	and.w	r5, r1, #31
   10d16:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	gpiote_pin_cleanup(&gpiote_alloc_mask, abs_pin);
   10d1a:	4629      	mov	r1, r5
   10d1c:	4821      	ldr	r0, [pc, #132]	; (10da4 <gpiote_pin_int_cfg+0x9c>)
   10d1e:	f7ff ff75 	bl	10c0c <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
   10d22:	f005 021f 	and.w	r2, r5, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10d26:	4920      	ldr	r1, [pc, #128]	; (10da8 <gpiote_pin_int_cfg+0xa0>)
   10d28:	f102 0080 	add.w	r0, r2, #128	; 0x80
   10d2c:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   10d30:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10d34:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
   10d38:	68f3      	ldr	r3, [r6, #12]
   10d3a:	40e3      	lsrs	r3, r4
   10d3c:	f013 0f01 	tst.w	r3, #1
   10d40:	d02e      	beq.n	10da0 <gpiote_pin_int_cfg+0x98>
		if (data->trig_edge & BIT(pin)) {
   10d42:	6973      	ldr	r3, [r6, #20]
   10d44:	40e3      	lsrs	r3, r4
   10d46:	f013 0f01 	tst.w	r3, #1
   10d4a:	d014      	beq.n	10d76 <gpiote_pin_int_cfg+0x6e>
			if (data->double_edge & BIT(pin)) {
   10d4c:	69b3      	ldr	r3, [r6, #24]
   10d4e:	40e3      	lsrs	r3, r4
   10d50:	f013 0f01 	tst.w	r3, #1
   10d54:	d107      	bne.n	10d66 <gpiote_pin_int_cfg+0x5e>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   10d56:	6931      	ldr	r1, [r6, #16]
   10d58:	fa21 f404 	lsr.w	r4, r1, r4
   10d5c:	f014 0f01 	tst.w	r4, #1
   10d60:	d007      	beq.n	10d72 <gpiote_pin_int_cfg+0x6a>
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
   10d62:	2201      	movs	r2, #1
   10d64:	e000      	b.n	10d68 <gpiote_pin_int_cfg+0x60>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   10d66:	2203      	movs	r2, #3
			res = gpiote_channel_alloc(&gpiote_alloc_mask,
   10d68:	4629      	mov	r1, r5
   10d6a:	480e      	ldr	r0, [pc, #56]	; (10da4 <gpiote_pin_int_cfg+0x9c>)
   10d6c:	f7ff ff80 	bl	10c70 <gpiote_channel_alloc>
   10d70:	e017      	b.n	10da2 <gpiote_pin_int_cfg+0x9a>
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   10d72:	2202      	movs	r2, #2
   10d74:	e7f8      	b.n	10d68 <gpiote_pin_int_cfg+0x60>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10d76:	6931      	ldr	r1, [r6, #16]
   10d78:	fa21 f404 	lsr.w	r4, r1, r4
   10d7c:	f014 0f01 	tst.w	r4, #1
   10d80:	d10c      	bne.n	10d9c <gpiote_pin_int_cfg+0x94>
	return NRF_GPIO_PIN_SENSE_LOW;
   10d82:	2003      	movs	r0, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10d84:	4908      	ldr	r1, [pc, #32]	; (10da8 <gpiote_pin_int_cfg+0xa0>)
   10d86:	3280      	adds	r2, #128	; 0x80
   10d88:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   10d8c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10d90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   10d94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	int res = 0;
   10d98:	2000      	movs	r0, #0
}
   10d9a:	e002      	b.n	10da2 <gpiote_pin_int_cfg+0x9a>
		return NRF_GPIO_PIN_SENSE_HIGH;
   10d9c:	2002      	movs	r0, #2
   10d9e:	e7f1      	b.n	10d84 <gpiote_pin_int_cfg+0x7c>
	int res = 0;
   10da0:	2000      	movs	r0, #0
}
   10da2:	bd70      	pop	{r4, r5, r6, pc}
   10da4:	20010900 	.word	0x20010900
   10da8:	40842500 	.word	0x40842500

00010dac <gpio_nrfx_pin_interrupt_configure>:
{
   10dac:	b570      	push	{r4, r5, r6, lr}
	return port->data;
   10dae:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   10db0:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   10db2:	7a2e      	ldrb	r6, [r5, #8]
   10db4:	f001 051f 	and.w	r5, r1, #31
   10db8:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if ((mode == GPIO_INT_MODE_EDGE) &&
   10dbc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   10dc0:	d025      	beq.n	10e0e <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   10dc2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   10dc6:	d02e      	beq.n	10e26 <gpio_nrfx_pin_interrupt_configure+0x7a>
   10dc8:	68e5      	ldr	r5, [r4, #12]
   10dca:	2601      	movs	r6, #1
   10dcc:	408e      	lsls	r6, r1
   10dce:	4335      	orrs	r5, r6
   10dd0:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   10dd2:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   10dd6:	d02c      	beq.n	10e32 <gpio_nrfx_pin_interrupt_configure+0x86>
   10dd8:	6962      	ldr	r2, [r4, #20]
   10dda:	2501      	movs	r5, #1
   10ddc:	408d      	lsls	r5, r1
   10dde:	ea22 0205 	bic.w	r2, r2, r5
   10de2:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   10de4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   10de8:	d028      	beq.n	10e3c <gpio_nrfx_pin_interrupt_configure+0x90>
   10dea:	69a2      	ldr	r2, [r4, #24]
   10dec:	2501      	movs	r5, #1
   10dee:	408d      	lsls	r5, r1
   10df0:	ea22 0205 	bic.w	r2, r2, r5
   10df4:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   10df6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   10dfa:	d024      	beq.n	10e46 <gpio_nrfx_pin_interrupt_configure+0x9a>
   10dfc:	6923      	ldr	r3, [r4, #16]
   10dfe:	2201      	movs	r2, #1
   10e00:	408a      	lsls	r2, r1
   10e02:	ea23 0302 	bic.w	r3, r3, r2
   10e06:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
   10e08:	f7ff ff7e 	bl	10d08 <gpiote_pin_int_cfg>
}
   10e0c:	bd70      	pop	{r4, r5, r6, pc}
    *p_pin = pin_number & 0x1F;
   10e0e:	f005 051f 	and.w	r5, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   10e12:	3580      	adds	r5, #128	; 0x80
   10e14:	4e0e      	ldr	r6, [pc, #56]	; (10e50 <gpio_nrfx_pin_interrupt_configure+0xa4>)
   10e16:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   10e1a:	f015 0f01 	tst.w	r5, #1
   10e1e:	d0d0      	beq.n	10dc2 <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
   10e20:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10e24:	e7f2      	b.n	10e0c <gpio_nrfx_pin_interrupt_configure+0x60>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   10e26:	68e5      	ldr	r5, [r4, #12]
   10e28:	2601      	movs	r6, #1
   10e2a:	408e      	lsls	r6, r1
   10e2c:	ea25 0506 	bic.w	r5, r5, r6
   10e30:	e7ce      	b.n	10dd0 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   10e32:	6962      	ldr	r2, [r4, #20]
   10e34:	2501      	movs	r5, #1
   10e36:	408d      	lsls	r5, r1
   10e38:	432a      	orrs	r2, r5
   10e3a:	e7d2      	b.n	10de2 <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   10e3c:	69a2      	ldr	r2, [r4, #24]
   10e3e:	2501      	movs	r5, #1
   10e40:	408d      	lsls	r5, r1
   10e42:	432a      	orrs	r2, r5
   10e44:	e7d6      	b.n	10df4 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   10e46:	6923      	ldr	r3, [r4, #16]
   10e48:	2201      	movs	r2, #1
   10e4a:	408a      	lsls	r2, r1
   10e4c:	4313      	orrs	r3, r2
   10e4e:	e7da      	b.n	10e06 <gpio_nrfx_pin_interrupt_configure+0x5a>
   10e50:	40842500 	.word	0x40842500

00010e54 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   10e54:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   10e56:	4b0b      	ldr	r3, [pc, #44]	; (10e84 <gpio_nrfx_init+0x30>)
   10e58:	781b      	ldrb	r3, [r3, #0]
   10e5a:	b10b      	cbz	r3, 10e60 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   10e5c:	2000      	movs	r0, #0
   10e5e:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
   10e60:	4b08      	ldr	r3, [pc, #32]	; (10e84 <gpio_nrfx_init+0x30>)
   10e62:	2201      	movs	r2, #1
   10e64:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   10e66:	2200      	movs	r2, #0
   10e68:	2105      	movs	r1, #5
   10e6a:	2031      	movs	r0, #49	; 0x31
   10e6c:	f7fd fe80 	bl	eb70 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
   10e70:	2031      	movs	r0, #49	; 0x31
   10e72:	f7fd fe5f 	bl	eb34 <arch_irq_enable>
   10e76:	4b04      	ldr	r3, [pc, #16]	; (10e88 <gpio_nrfx_init+0x34>)
   10e78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   10e7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   10e80:	e7ec      	b.n	10e5c <gpio_nrfx_init+0x8>
   10e82:	bf00      	nop
   10e84:	20010968 	.word	0x20010968
   10e88:	40031000 	.word	0x40031000

00010e8c <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   10e8c:	4b03      	ldr	r3, [pc, #12]	; (10e9c <nvmc_wait_ready+0x10>)
   10e8e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
   10e92:	f013 0f01 	tst.w	r3, #1
   10e96:	d0f9      	beq.n	10e8c <nvmc_wait_ready>
	}
}
   10e98:	4770      	bx	lr
   10e9a:	bf00      	nop
   10e9c:	40039000 	.word	0x40039000

00010ea0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   10ea0:	4b02      	ldr	r3, [pc, #8]	; (10eac <flash_nrf_pages_layout+0xc>)
   10ea2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   10ea4:	2301      	movs	r3, #1
   10ea6:	6013      	str	r3, [r2, #0]
}
   10ea8:	4770      	bx	lr
   10eaa:	bf00      	nop
   10eac:	20010904 	.word	0x20010904

00010eb0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   10eb0:	4800      	ldr	r0, [pc, #0]	; (10eb4 <flash_nrf_get_parameters+0x4>)
   10eb2:	4770      	bx	lr
   10eb4:	0001a338 	.word	0x0001a338

00010eb8 <flash_nrf_erase>:
{
   10eb8:	b570      	push	{r4, r5, r6, lr}
   10eba:	460c      	mov	r4, r1
   10ebc:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   10ebe:	f006 fd6e 	bl	1799e <nrfx_nvmc_flash_page_size_get>
   10ec2:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
   10ec4:	f006 fd67 	bl	17996 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   10ec8:	42a0      	cmp	r0, r4
   10eca:	d925      	bls.n	10f18 <flash_nrf_erase+0x60>
   10ecc:	2c00      	cmp	r4, #0
   10ece:	db27      	blt.n	10f20 <flash_nrf_erase+0x68>
	    addr < 0 ||
   10ed0:	4285      	cmp	r5, r0
   10ed2:	d828      	bhi.n	10f26 <flash_nrf_erase+0x6e>
	    (addr) + len > flash_size) {
   10ed4:	192b      	adds	r3, r5, r4
	    len > flash_size ||
   10ed6:	4298      	cmp	r0, r3
   10ed8:	d328      	bcc.n	10f2c <flash_nrf_erase+0x74>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   10eda:	fbb4 f3f6 	udiv	r3, r4, r6
   10ede:	fb06 4313 	mls	r3, r6, r3, r4
   10ee2:	bb33      	cbnz	r3, 10f32 <flash_nrf_erase+0x7a>
   10ee4:	fbb5 f3f6 	udiv	r3, r5, r6
   10ee8:	fb06 5313 	mls	r3, r6, r3, r5
   10eec:	bb23      	cbnz	r3, 10f38 <flash_nrf_erase+0x80>
		if (!n_pages) {
   10eee:	42ae      	cmp	r6, r5
   10ef0:	d901      	bls.n	10ef6 <flash_nrf_erase+0x3e>
			return 0;
   10ef2:	2400      	movs	r4, #0
   10ef4:	e012      	b.n	10f1c <flash_nrf_erase+0x64>
	return z_impl_k_sem_take(sem, timeout);
   10ef6:	4e12      	ldr	r6, [pc, #72]	; (10f40 <flash_nrf_erase+0x88>)
   10ef8:	f04f 32ff 	mov.w	r2, #4294967295
   10efc:	f04f 33ff 	mov.w	r3, #4294967295
   10f00:	4630      	mov	r0, r6
   10f02:	f003 ff97 	bl	14e34 <z_impl_k_sem_take>
		ret = erase(addr, size);
   10f06:	4629      	mov	r1, r5
   10f08:	4620      	mov	r0, r4
   10f0a:	f006 fba3 	bl	17654 <erase>
   10f0e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   10f10:	4630      	mov	r0, r6
   10f12:	f003 ff6d 	bl	14df0 <z_impl_k_sem_give>
	return ret;
   10f16:	e001      	b.n	10f1c <flash_nrf_erase+0x64>
		return -EINVAL;
   10f18:	f06f 0415 	mvn.w	r4, #21
}
   10f1c:	4620      	mov	r0, r4
   10f1e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   10f20:	f06f 0415 	mvn.w	r4, #21
   10f24:	e7fa      	b.n	10f1c <flash_nrf_erase+0x64>
   10f26:	f06f 0415 	mvn.w	r4, #21
   10f2a:	e7f7      	b.n	10f1c <flash_nrf_erase+0x64>
   10f2c:	f06f 0415 	mvn.w	r4, #21
   10f30:	e7f4      	b.n	10f1c <flash_nrf_erase+0x64>
			return -EINVAL;
   10f32:	f06f 0415 	mvn.w	r4, #21
   10f36:	e7f1      	b.n	10f1c <flash_nrf_erase+0x64>
   10f38:	f06f 0415 	mvn.w	r4, #21
   10f3c:	e7ee      	b.n	10f1c <flash_nrf_erase+0x64>
   10f3e:	bf00      	nop
   10f40:	2001090c 	.word	0x2001090c

00010f44 <flash_nrf_write>:
{
   10f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f46:	460c      	mov	r4, r1
   10f48:	4616      	mov	r6, r2
   10f4a:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
   10f4c:	f006 fd23 	bl	17996 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   10f50:	4284      	cmp	r4, r0
   10f52:	d221      	bcs.n	10f98 <flash_nrf_write+0x54>
   10f54:	2c00      	cmp	r4, #0
   10f56:	db23      	blt.n	10fa0 <flash_nrf_write+0x5c>
	    addr < 0 ||
   10f58:	4285      	cmp	r5, r0
   10f5a:	d824      	bhi.n	10fa6 <flash_nrf_write+0x62>
	    (addr) + len > flash_size) {
   10f5c:	192b      	adds	r3, r5, r4
	    len > flash_size ||
   10f5e:	4298      	cmp	r0, r3
   10f60:	d324      	bcc.n	10fac <flash_nrf_write+0x68>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   10f62:	f014 0f03 	tst.w	r4, #3
   10f66:	d124      	bne.n	10fb2 <flash_nrf_write+0x6e>
   10f68:	f015 0f03 	tst.w	r5, #3
   10f6c:	d124      	bne.n	10fb8 <flash_nrf_write+0x74>
	if (!len) {
   10f6e:	b90d      	cbnz	r5, 10f74 <flash_nrf_write+0x30>
		return 0;
   10f70:	2400      	movs	r4, #0
   10f72:	e013      	b.n	10f9c <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
   10f74:	4f12      	ldr	r7, [pc, #72]	; (10fc0 <flash_nrf_write+0x7c>)
   10f76:	f04f 32ff 	mov.w	r2, #4294967295
   10f7a:	f04f 33ff 	mov.w	r3, #4294967295
   10f7e:	4638      	mov	r0, r7
   10f80:	f003 ff58 	bl	14e34 <z_impl_k_sem_take>
		ret = write(addr, data, len);
   10f84:	462a      	mov	r2, r5
   10f86:	4631      	mov	r1, r6
   10f88:	4620      	mov	r0, r4
   10f8a:	f006 fb82 	bl	17692 <write>
   10f8e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   10f90:	4638      	mov	r0, r7
   10f92:	f003 ff2d 	bl	14df0 <z_impl_k_sem_give>
	return ret;
   10f96:	e001      	b.n	10f9c <flash_nrf_write+0x58>
		return -EINVAL;
   10f98:	f06f 0415 	mvn.w	r4, #21
}
   10f9c:	4620      	mov	r0, r4
   10f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   10fa0:	f06f 0415 	mvn.w	r4, #21
   10fa4:	e7fa      	b.n	10f9c <flash_nrf_write+0x58>
   10fa6:	f06f 0415 	mvn.w	r4, #21
   10faa:	e7f7      	b.n	10f9c <flash_nrf_write+0x58>
   10fac:	f06f 0415 	mvn.w	r4, #21
   10fb0:	e7f4      	b.n	10f9c <flash_nrf_write+0x58>
		return -EINVAL;
   10fb2:	f06f 0415 	mvn.w	r4, #21
   10fb6:	e7f1      	b.n	10f9c <flash_nrf_write+0x58>
   10fb8:	f06f 0415 	mvn.w	r4, #21
   10fbc:	e7ee      	b.n	10f9c <flash_nrf_write+0x58>
   10fbe:	bf00      	nop
   10fc0:	2001090c 	.word	0x2001090c

00010fc4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   10fc4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   10fc6:	2201      	movs	r2, #1
   10fc8:	4611      	mov	r1, r2
   10fca:	4806      	ldr	r0, [pc, #24]	; (10fe4 <nrf_flash_init+0x20>)
   10fcc:	f008 f85e 	bl	1908c <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   10fd0:	f006 fce9 	bl	179a6 <nrfx_nvmc_flash_page_count_get>
   10fd4:	4c04      	ldr	r4, [pc, #16]	; (10fe8 <nrf_flash_init+0x24>)
   10fd6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   10fd8:	f006 fce1 	bl	1799e <nrfx_nvmc_flash_page_size_get>
   10fdc:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   10fde:	2000      	movs	r0, #0
   10fe0:	bd10      	pop	{r4, pc}
   10fe2:	bf00      	nop
   10fe4:	2001090c 	.word	0x2001090c
   10fe8:	20010904 	.word	0x20010904

00010fec <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   10fec:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
   10fee:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   10ff0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   10ff4:	d06f      	beq.n	110d6 <baudrate_set+0xea>
   10ff6:	d83a      	bhi.n	1106e <baudrate_set+0x82>
   10ff8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   10ffc:	d06e      	beq.n	110dc <baudrate_set+0xf0>
   10ffe:	d90a      	bls.n	11016 <baudrate_set+0x2a>
   11000:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   11004:	d075      	beq.n	110f2 <baudrate_set+0x106>
   11006:	d924      	bls.n	11052 <baudrate_set+0x66>
   11008:	f647 2312 	movw	r3, #31250	; 0x7a12
   1100c:	4299      	cmp	r1, r3
   1100e:	d12b      	bne.n	11068 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11010:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11014:	e013      	b.n	1103e <baudrate_set+0x52>
	switch (baudrate) {
   11016:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1101a:	d061      	beq.n	110e0 <baudrate_set+0xf4>
   1101c:	d907      	bls.n	1102e <baudrate_set+0x42>
   1101e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   11022:	d063      	beq.n	110ec <baudrate_set+0x100>
   11024:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   11028:	d110      	bne.n	1104c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1102a:	4b3c      	ldr	r3, [pc, #240]	; (1111c <baudrate_set+0x130>)
   1102c:	e007      	b.n	1103e <baudrate_set+0x52>
	switch (baudrate) {
   1102e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   11032:	d058      	beq.n	110e6 <baudrate_set+0xfa>
   11034:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   11038:	d105      	bne.n	11046 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1103a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1103e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   11042:	2000      	movs	r0, #0
   11044:	4770      	bx	lr
	switch (baudrate) {
   11046:	f06f 0015 	mvn.w	r0, #21
   1104a:	4770      	bx	lr
   1104c:	f06f 0015 	mvn.w	r0, #21
   11050:	4770      	bx	lr
   11052:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   11056:	d04e      	beq.n	110f6 <baudrate_set+0x10a>
   11058:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   1105c:	d101      	bne.n	11062 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1105e:	4b30      	ldr	r3, [pc, #192]	; (11120 <baudrate_set+0x134>)
   11060:	e7ed      	b.n	1103e <baudrate_set+0x52>
	switch (baudrate) {
   11062:	f06f 0015 	mvn.w	r0, #21
   11066:	4770      	bx	lr
   11068:	f06f 0015 	mvn.w	r0, #21
   1106c:	4770      	bx	lr
   1106e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   11072:	d042      	beq.n	110fa <baudrate_set+0x10e>
   11074:	d909      	bls.n	1108a <baudrate_set+0x9e>
   11076:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1107a:	d046      	beq.n	1110a <baudrate_set+0x11e>
   1107c:	d91f      	bls.n	110be <baudrate_set+0xd2>
   1107e:	4b29      	ldr	r3, [pc, #164]	; (11124 <baudrate_set+0x138>)
   11080:	4299      	cmp	r1, r3
   11082:	d148      	bne.n	11116 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11084:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11088:	e7d9      	b.n	1103e <baudrate_set+0x52>
	switch (baudrate) {
   1108a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1108e:	d037      	beq.n	11100 <baudrate_set+0x114>
   11090:	d905      	bls.n	1109e <baudrate_set+0xb2>
   11092:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   11096:	d10f      	bne.n	110b8 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11098:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1109c:	e7cf      	b.n	1103e <baudrate_set+0x52>
	switch (baudrate) {
   1109e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   110a2:	4299      	cmp	r1, r3
   110a4:	d02e      	beq.n	11104 <baudrate_set+0x118>
   110a6:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   110aa:	d102      	bne.n	110b2 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   110ac:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   110b0:	e7c5      	b.n	1103e <baudrate_set+0x52>
	switch (baudrate) {
   110b2:	f06f 0015 	mvn.w	r0, #21
   110b6:	4770      	bx	lr
   110b8:	f06f 0015 	mvn.w	r0, #21
   110bc:	4770      	bx	lr
   110be:	4b1a      	ldr	r3, [pc, #104]	; (11128 <baudrate_set+0x13c>)
   110c0:	4299      	cmp	r1, r3
   110c2:	d025      	beq.n	11110 <baudrate_set+0x124>
   110c4:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   110c8:	d102      	bne.n	110d0 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   110ca:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   110ce:	e7b6      	b.n	1103e <baudrate_set+0x52>
	switch (baudrate) {
   110d0:	f06f 0015 	mvn.w	r0, #21
   110d4:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   110d6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   110da:	e7b0      	b.n	1103e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   110dc:	4b13      	ldr	r3, [pc, #76]	; (1112c <baudrate_set+0x140>)
   110de:	e7ae      	b.n	1103e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   110e0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   110e4:	e7ab      	b.n	1103e <baudrate_set+0x52>
	switch (baudrate) {
   110e6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   110ea:	e7a8      	b.n	1103e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   110ec:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   110f0:	e7a5      	b.n	1103e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   110f2:	4b0f      	ldr	r3, [pc, #60]	; (11130 <baudrate_set+0x144>)
   110f4:	e7a3      	b.n	1103e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   110f6:	4b0f      	ldr	r3, [pc, #60]	; (11134 <baudrate_set+0x148>)
   110f8:	e7a1      	b.n	1103e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   110fa:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   110fe:	e79e      	b.n	1103e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   11100:	4b0d      	ldr	r3, [pc, #52]	; (11138 <baudrate_set+0x14c>)
   11102:	e79c      	b.n	1103e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   11104:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   11108:	e799      	b.n	1103e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1110a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1110e:	e796      	b.n	1103e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11110:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11114:	e793      	b.n	1103e <baudrate_set+0x52>
	switch (baudrate) {
   11116:	f06f 0015 	mvn.w	r0, #21
}
   1111a:	4770      	bx	lr
   1111c:	0013b000 	.word	0x0013b000
   11120:	004ea000 	.word	0x004ea000
   11124:	000f4240 	.word	0x000f4240
   11128:	0003d090 	.word	0x0003d090
   1112c:	00275000 	.word	0x00275000
   11130:	0075c000 	.word	0x0075c000
   11134:	003af000 	.word	0x003af000
   11138:	013a9000 	.word	0x013a9000

0001113c <uarte_instance_init>:
};

static int uarte_instance_init(const struct device *dev,
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
   1113c:	b570      	push	{r4, r5, r6, lr}
   1113e:	460c      	mov	r4, r1
	return dev->config;
   11140:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11142:	681d      	ldr	r5, [r3, #0]
	return dev->data;
   11144:	68c6      	ldr	r6, [r0, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   11146:	2300      	movs	r3, #0
   11148:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1114c:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
   1114e:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   11150:	f003 021f 	and.w	r2, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11154:	2301      	movs	r3, #1
   11156:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   11158:	4a2a      	ldr	r2, [pc, #168]	; (11204 <uarte_instance_init+0xc8>)
   1115a:	6093      	str	r3, [r2, #8]
	nrf_gpio_cfg_output(config->pseltxd);
   1115c:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   1115e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11162:	3380      	adds	r3, #128	; 0x80
   11164:	2103      	movs	r1, #3
   11166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1116a:	6863      	ldr	r3, [r4, #4]
   1116c:	f1b3 3fff 	cmp.w	r3, #4294967295
   11170:	d005      	beq.n	1117e <uarte_instance_init+0x42>
    *p_pin = pin_number & 0x1F;
   11172:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11176:	3380      	adds	r3, #128	; 0x80
   11178:	2100      	movs	r1, #0
   1117a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1117e:	6822      	ldr	r2, [r4, #0]
   11180:	6863      	ldr	r3, [r4, #4]
    p_reg->PSEL.TXD = pseltxd;
   11182:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   11186:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1118a:	68a3      	ldr	r3, [r4, #8]
   1118c:	f1b3 3fff 	cmp.w	r3, #4294967295
   11190:	d006      	beq.n	111a0 <uarte_instance_init+0x64>
    *p_pin = pin_number & 0x1F;
   11192:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11196:	3380      	adds	r3, #128	; 0x80
   11198:	4a1a      	ldr	r2, [pc, #104]	; (11204 <uarte_instance_init+0xc8>)
   1119a:	2100      	movs	r1, #0
   1119c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   111a0:	68e3      	ldr	r3, [r4, #12]
   111a2:	f1b3 3fff 	cmp.w	r3, #4294967295
   111a6:	d00d      	beq.n	111c4 <uarte_instance_init+0x88>
    *p_pin = pin_number & 0x1F;
   111a8:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   111ac:	2201      	movs	r2, #1
   111ae:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   111b2:	4a14      	ldr	r2, [pc, #80]	; (11204 <uarte_instance_init+0xc8>)
   111b4:	6093      	str	r3, [r2, #8]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
   111b6:	68e3      	ldr	r3, [r4, #12]
    *p_pin = pin_number & 0x1F;
   111b8:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   111bc:	3380      	adds	r3, #128	; 0x80
   111be:	2103      	movs	r1, #3
   111c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   111c4:	68e2      	ldr	r2, [r4, #12]
   111c6:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.RTS = pselrts;
   111c8:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   111cc:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
   111d0:	68c1      	ldr	r1, [r0, #12]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   111d2:	3104      	adds	r1, #4
   111d4:	f006 fac0 	bl	17758 <uarte_nrfx_configure>
	if (err) {
   111d8:	b990      	cbnz	r0, 11200 <uarte_instance_init+0xc4>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   111da:	2308      	movs	r3, #8
   111dc:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   111e0:	6863      	ldr	r3, [r4, #4]
   111e2:	f1b3 3fff 	cmp.w	r3, #4294967295
   111e6:	d00b      	beq.n	11200 <uarte_instance_init+0xc4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   111e8:	2300      	movs	r3, #0
   111ea:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   111ee:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   111f2:	3610      	adds	r6, #16

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   111f4:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   111f8:	2301      	movs	r3, #1
   111fa:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   111fe:	602b      	str	r3, [r5, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   11200:	bd70      	pop	{r4, r5, r6, pc}
   11202:	bf00      	nop
   11204:	40842500 	.word	0x40842500

00011208 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   11208:	b530      	push	{r4, r5, lr}
   1120a:	b085      	sub	sp, #20
   1120c:	4605      	mov	r5, r0
   1120e:	4b06      	ldr	r3, [pc, #24]	; (11228 <uarte_0_init+0x20>)
   11210:	466c      	mov	r4, sp
   11212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   11218:	2200      	movs	r2, #0
   1121a:	4621      	mov	r1, r4
   1121c:	4628      	mov	r0, r5
   1121e:	f7ff ff8d 	bl	1113c <uarte_instance_init>
   11222:	b005      	add	sp, #20
   11224:	bd30      	pop	{r4, r5, pc}
   11226:	bf00      	nop
   11228:	000195e0 	.word	0x000195e0

0001122c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1122c:	b530      	push	{r4, r5, lr}
   1122e:	b085      	sub	sp, #20
   11230:	4605      	mov	r5, r0
   11232:	466c      	mov	r4, sp
   11234:	4b05      	ldr	r3, [pc, #20]	; (1124c <uarte_1_init+0x20>)
   11236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1123c:	2200      	movs	r2, #0
   1123e:	4621      	mov	r1, r4
   11240:	4628      	mov	r0, r5
   11242:	f7ff ff7b 	bl	1113c <uarte_instance_init>
   11246:	b005      	add	sp, #20
   11248:	bd30      	pop	{r4, r5, pc}
   1124a:	bf00      	nop
   1124c:	000195f0 	.word	0x000195f0

00011250 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   11250:	b570      	push	{r4, r5, r6, lr}
   11252:	b084      	sub	sp, #16
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);
   11254:	481d      	ldr	r0, [pc, #116]	; (112cc <check_ext_api_requests+0x7c>)
   11256:	f006 fb57 	bl	17908 <skip_ext_apis>
   1125a:	4604      	mov	r4, r0

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1125c:	2600      	movs	r6, #0
   1125e:	e00a      	b.n	11276 <check_ext_api_requests+0x26>
	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
		== 0) {
		return ext_api;
	}
	return NULL;
   11260:	2500      	movs	r5, #0
   11262:	e01a      	b.n	1129a <check_ext_api_requests+0x4a>
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   11264:	481a      	ldr	r0, [pc, #104]	; (112d0 <check_ext_api_requests+0x80>)
   11266:	f004 fb6c 	bl	15942 <printk>
				"fulfilled.\r\n");
			*ext_api_req->ext_api = NULL;
   1126a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1126c:	2200      	movs	r2, #0
   1126e:	601a      	str	r2, [r3, #0]
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
   11270:	68e3      	ldr	r3, [r4, #12]
   11272:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11274:	3601      	adds	r6, #1
   11276:	4b15      	ldr	r3, [pc, #84]	; (112cc <check_ext_api_requests+0x7c>)
   11278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1127a:	42b3      	cmp	r3, r6
   1127c:	d922      	bls.n	112c4 <check_ext_api_requests+0x74>
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   1127e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11280:	681d      	ldr	r5, [r3, #0]
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   11282:	ab01      	add	r3, sp, #4
   11284:	4a13      	ldr	r2, [pc, #76]	; (112d4 <check_ext_api_requests+0x84>)
   11286:	ca07      	ldmia	r2, {r0, r1, r2}
   11288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1128c:	220c      	movs	r2, #12
   1128e:	4619      	mov	r1, r3
   11290:	4628      	mov	r0, r5
   11292:	f005 fe6e 	bl	16f72 <memcmp>
   11296:	2800      	cmp	r0, #0
   11298:	d1e2      	bne.n	11260 <check_ext_api_requests+0x10>
   1129a:	b135      	cbz	r5, 112aa <check_ext_api_requests+0x5a>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1129c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1129e:	4621      	mov	r1, r4
   112a0:	6818      	ldr	r0, [r3, #0]
   112a2:	f006 fb15 	bl	178d0 <ext_api_satisfies_req>
   112a6:	2800      	cmp	r0, #0
   112a8:	d1e2      	bne.n	11270 <check_ext_api_requests+0x20>
		} else if (ext_api_req->required) {
   112aa:	6a23      	ldr	r3, [r4, #32]
   112ac:	2b00      	cmp	r3, #0
   112ae:	d0d9      	beq.n	11264 <check_ext_api_requests+0x14>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   112b0:	4809      	ldr	r0, [pc, #36]	; (112d8 <check_ext_api_requests+0x88>)
   112b2:	f004 fb46 	bl	15942 <printk>
			k_panic();
   112b6:	4040      	eors	r0, r0
   112b8:	f380 8811 	msr	BASEPRI, r0
   112bc:	f04f 0004 	mov.w	r0, #4
   112c0:	df02      	svc	2
   112c2:	e7d5      	b.n	11270 <check_ext_api_requests+0x20>
	}

	return 0;
}
   112c4:	2000      	movs	r0, #0
   112c6:	b004      	add	sp, #16
   112c8:	bd70      	pop	{r4, r5, r6, pc}
   112ca:	bf00      	nop
   112cc:	0000c200 	.word	0x0000c200
   112d0:	0001a3a8 	.word	0x0001a3a8
   112d4:	0001960c 	.word	0x0001960c
   112d8:	0001a37c 	.word	0x0001a37c

000112dc <SystemCoreClockUpdate>:
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   112dc:	4b01      	ldr	r3, [pc, #4]	; (112e4 <SystemCoreClockUpdate+0x8>)
   112de:	4a02      	ldr	r2, [pc, #8]	; (112e8 <SystemCoreClockUpdate+0xc>)
   112e0:	601a      	str	r2, [r3, #0]
}
   112e2:	4770      	bx	lr
   112e4:	2001015c 	.word	0x2001015c
   112e8:	03d09000 	.word	0x03d09000

000112ec <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   112ec:	4b05      	ldr	r3, [pc, #20]	; (11304 <nrfx_clock_init+0x18>)
   112ee:	791b      	ldrb	r3, [r3, #4]
   112f0:	b92b      	cbnz	r3, 112fe <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   112f2:	4b04      	ldr	r3, [pc, #16]	; (11304 <nrfx_clock_init+0x18>)
   112f4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   112f6:	2201      	movs	r2, #1
   112f8:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   112fa:	4803      	ldr	r0, [pc, #12]	; (11308 <nrfx_clock_init+0x1c>)
   112fc:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   112fe:	4803      	ldr	r0, [pc, #12]	; (1130c <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   11300:	4770      	bx	lr
   11302:	bf00      	nop
   11304:	2001091c 	.word	0x2001091c
   11308:	0bad0000 	.word	0x0bad0000
   1130c:	0bad000c 	.word	0x0bad000c

00011310 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   11310:	b110      	cbz	r0, 11318 <nrfx_clock_start+0x8>
   11312:	2801      	cmp	r0, #1
   11314:	d021      	beq.n	1135a <nrfx_clock_start+0x4a>
   11316:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   11318:	4a15      	ldr	r2, [pc, #84]	; (11370 <nrfx_clock_start+0x60>)
   1131a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   1131e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   11322:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   11326:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1132a:	d10f      	bne.n	1134c <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1132c:	4b10      	ldr	r3, [pc, #64]	; (11370 <nrfx_clock_start+0x60>)
   1132e:	2201      	movs	r2, #1
   11330:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11334:	4b0f      	ldr	r3, [pc, #60]	; (11374 <nrfx_clock_start+0x64>)
   11336:	2200      	movs	r2, #0
   11338:	601a      	str	r2, [r3, #0]
   1133a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1133c:	4b0c      	ldr	r3, [pc, #48]	; (11370 <nrfx_clock_start+0x60>)
   1133e:	2202      	movs	r2, #2
   11340:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11344:	3308      	adds	r3, #8
   11346:	2201      	movs	r2, #1
   11348:	601a      	str	r2, [r3, #0]
}
   1134a:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1134c:	2b02      	cmp	r3, #2
   1134e:	d1ed      	bne.n	1132c <nrfx_clock_start+0x1c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   11350:	4b07      	ldr	r3, [pc, #28]	; (11370 <nrfx_clock_start+0x60>)
   11352:	2202      	movs	r2, #2
   11354:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   11358:	e7ec      	b.n	11334 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1135a:	4b07      	ldr	r3, [pc, #28]	; (11378 <nrfx_clock_start+0x68>)
   1135c:	2200      	movs	r2, #0
   1135e:	601a      	str	r2, [r3, #0]
   11360:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   11362:	4b03      	ldr	r3, [pc, #12]	; (11370 <nrfx_clock_start+0x60>)
   11364:	2201      	movs	r2, #1
   11366:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1136a:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1136c:	4770      	bx	lr
   1136e:	bf00      	nop
   11370:	40005000 	.word	0x40005000
   11374:	40005104 	.word	0x40005104
   11378:	40005100 	.word	0x40005100

0001137c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1137c:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1137e:	4604      	mov	r4, r0
   11380:	b110      	cbz	r0, 11388 <nrfx_clock_stop+0xc>
   11382:	2801      	cmp	r0, #1
   11384:	d011      	beq.n	113aa <nrfx_clock_stop+0x2e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   11386:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   11388:	4b35      	ldr	r3, [pc, #212]	; (11460 <nrfx_clock_stop+0xe4>)
   1138a:	2202      	movs	r2, #2
   1138c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11390:	f503 7382 	add.w	r3, r3, #260	; 0x104
   11394:	2200      	movs	r2, #0
   11396:	601a      	str	r2, [r3, #0]
   11398:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1139a:	4b32      	ldr	r3, [pc, #200]	; (11464 <nrfx_clock_stop+0xe8>)
   1139c:	2201      	movs	r2, #1
   1139e:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   113a0:	2c01      	cmp	r4, #1
   113a2:	d00e      	beq.n	113c2 <nrfx_clock_stop+0x46>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   113a4:	f242 7510 	movw	r5, #10000	; 0x2710
   113a8:	e047      	b.n	1143a <nrfx_clock_stop+0xbe>
    p_reg->INTENCLR = mask;
   113aa:	2301      	movs	r3, #1
   113ac:	4a2c      	ldr	r2, [pc, #176]	; (11460 <nrfx_clock_stop+0xe4>)
   113ae:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   113b2:	f502 7280 	add.w	r2, r2, #256	; 0x100
   113b6:	2100      	movs	r1, #0
   113b8:	6011      	str	r1, [r2, #0]
   113ba:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   113bc:	4a2a      	ldr	r2, [pc, #168]	; (11468 <nrfx_clock_stop+0xec>)
   113be:	6013      	str	r3, [r2, #0]
}
   113c0:	e7ee      	b.n	113a0 <nrfx_clock_stop+0x24>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   113c2:	4625      	mov	r5, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   113c4:	f242 7610 	movw	r6, #10000	; 0x2710
   113c8:	e013      	b.n	113f2 <nrfx_clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   113ca:	4b25      	ldr	r3, [pc, #148]	; (11460 <nrfx_clock_stop+0xe4>)
   113cc:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
   113d0:	f005 0503 	and.w	r5, r5, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   113d4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   113d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   113dc:	d11b      	bne.n	11416 <nrfx_clock_stop+0x9a>
    return false;
   113de:	2300      	movs	r3, #0
   113e0:	2b00      	cmp	r3, #0
   113e2:	d0d0      	beq.n	11386 <nrfx_clock_stop+0xa>
   113e4:	2d01      	cmp	r5, #1
   113e6:	d1ce      	bne.n	11386 <nrfx_clock_stop+0xa>
   113e8:	2001      	movs	r0, #1
   113ea:	f006 fa9f 	bl	1792c <nrfx_busy_wait>
   113ee:	3e01      	subs	r6, #1
   113f0:	d0c9      	beq.n	11386 <nrfx_clock_stop+0xa>
    switch (domain)
   113f2:	2c00      	cmp	r4, #0
   113f4:	d0e9      	beq.n	113ca <nrfx_clock_stop+0x4e>
   113f6:	2c01      	cmp	r4, #1
   113f8:	d001      	beq.n	113fe <nrfx_clock_stop+0x82>
   113fa:	2300      	movs	r3, #0
   113fc:	e7f0      	b.n	113e0 <nrfx_clock_stop+0x64>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   113fe:	4b18      	ldr	r3, [pc, #96]	; (11460 <nrfx_clock_stop+0xe4>)
   11400:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
   11404:	f005 0501 	and.w	r5, r5, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   11408:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   1140c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   11410:	d103      	bne.n	1141a <nrfx_clock_stop+0x9e>
    return false;
   11412:	2300      	movs	r3, #0
   11414:	e7e4      	b.n	113e0 <nrfx_clock_stop+0x64>
                return true;
   11416:	2301      	movs	r3, #1
   11418:	e7e2      	b.n	113e0 <nrfx_clock_stop+0x64>
                return true;
   1141a:	2301      	movs	r3, #1
   1141c:	e7e0      	b.n	113e0 <nrfx_clock_stop+0x64>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1141e:	4b10      	ldr	r3, [pc, #64]	; (11460 <nrfx_clock_stop+0xe4>)
   11420:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   11424:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   11428:	d115      	bne.n	11456 <nrfx_clock_stop+0xda>
    return false;
   1142a:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1142c:	2b00      	cmp	r3, #0
   1142e:	d0aa      	beq.n	11386 <nrfx_clock_stop+0xa>
   11430:	2001      	movs	r0, #1
   11432:	f006 fa7b 	bl	1792c <nrfx_busy_wait>
   11436:	3d01      	subs	r5, #1
   11438:	d0a5      	beq.n	11386 <nrfx_clock_stop+0xa>
    switch (domain)
   1143a:	2c00      	cmp	r4, #0
   1143c:	d0ef      	beq.n	1141e <nrfx_clock_stop+0xa2>
   1143e:	2c01      	cmp	r4, #1
   11440:	d001      	beq.n	11446 <nrfx_clock_stop+0xca>
   11442:	2300      	movs	r3, #0
   11444:	e7f2      	b.n	1142c <nrfx_clock_stop+0xb0>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   11446:	4b06      	ldr	r3, [pc, #24]	; (11460 <nrfx_clock_stop+0xe4>)
   11448:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   1144c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   11450:	d103      	bne.n	1145a <nrfx_clock_stop+0xde>
    return false;
   11452:	2300      	movs	r3, #0
   11454:	e7ea      	b.n	1142c <nrfx_clock_stop+0xb0>
                return true;
   11456:	2301      	movs	r3, #1
   11458:	e7e8      	b.n	1142c <nrfx_clock_stop+0xb0>
                return true;
   1145a:	2301      	movs	r3, #1
   1145c:	e7e6      	b.n	1142c <nrfx_clock_stop+0xb0>
   1145e:	bf00      	nop
   11460:	40005000 	.word	0x40005000
   11464:	4000500c 	.word	0x4000500c
   11468:	40005004 	.word	0x40005004

0001146c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1146c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1146e:	4b17      	ldr	r3, [pc, #92]	; (114cc <nrfx_power_clock_irq_handler+0x60>)
   11470:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   11472:	b153      	cbz	r3, 1148a <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11474:	4b15      	ldr	r3, [pc, #84]	; (114cc <nrfx_power_clock_irq_handler+0x60>)
   11476:	2000      	movs	r0, #0
   11478:	6018      	str	r0, [r3, #0]
   1147a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1147c:	4b14      	ldr	r3, [pc, #80]	; (114d0 <nrfx_power_clock_irq_handler+0x64>)
   1147e:	2201      	movs	r2, #1
   11480:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   11484:	4b13      	ldr	r3, [pc, #76]	; (114d4 <nrfx_power_clock_irq_handler+0x68>)
   11486:	681b      	ldr	r3, [r3, #0]
   11488:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1148a:	4b13      	ldr	r3, [pc, #76]	; (114d8 <nrfx_power_clock_irq_handler+0x6c>)
   1148c:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1148e:	b1a3      	cbz	r3, 114ba <nrfx_power_clock_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11490:	4b11      	ldr	r3, [pc, #68]	; (114d8 <nrfx_power_clock_irq_handler+0x6c>)
   11492:	2200      	movs	r2, #0
   11494:	601a      	str	r2, [r3, #0]
   11496:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   11498:	4a0d      	ldr	r2, [pc, #52]	; (114d0 <nrfx_power_clock_irq_handler+0x64>)
   1149a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   1149e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   114a2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   114a6:	2b01      	cmp	r3, #1
   114a8:	d008      	beq.n	114bc <nrfx_power_clock_irq_handler+0x50>
    p_reg->INTENCLR = mask;
   114aa:	4b09      	ldr	r3, [pc, #36]	; (114d0 <nrfx_power_clock_irq_handler+0x64>)
   114ac:	2202      	movs	r2, #2
   114ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   114b2:	4b08      	ldr	r3, [pc, #32]	; (114d4 <nrfx_power_clock_irq_handler+0x68>)
   114b4:	681b      	ldr	r3, [r3, #0]
   114b6:	2001      	movs	r0, #1
   114b8:	4798      	blx	r3
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   114ba:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   114bc:	4b04      	ldr	r3, [pc, #16]	; (114d0 <nrfx_power_clock_irq_handler+0x64>)
   114be:	2202      	movs	r2, #2
   114c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   114c4:	3308      	adds	r3, #8
   114c6:	2201      	movs	r2, #1
   114c8:	601a      	str	r2, [r3, #0]
}
   114ca:	e7f6      	b.n	114ba <nrfx_power_clock_irq_handler+0x4e>
   114cc:	40005100 	.word	0x40005100
   114d0:	40005000 	.word	0x40005000
   114d4:	2001091c 	.word	0x2001091c
   114d8:	40005104 	.word	0x40005104

000114dc <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   114dc:	4b02      	ldr	r3, [pc, #8]	; (114e8 <nvmc_readonly_mode_set+0xc>)
   114de:	2200      	movs	r2, #0
   114e0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
   114e4:	4770      	bx	lr
   114e6:	bf00      	nop
   114e8:	40039000 	.word	0x40039000

000114ec <nvmc_write_mode_set>:
   114ec:	4b02      	ldr	r3, [pc, #8]	; (114f8 <nvmc_write_mode_set+0xc>)
   114ee:	2201      	movs	r2, #1
   114f0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
   114f4:	4770      	bx	lr
   114f6:	bf00      	nop
   114f8:	40039000 	.word	0x40039000

000114fc <nvmc_erase_mode_set>:
   114fc:	4b02      	ldr	r3, [pc, #8]	; (11508 <nvmc_erase_mode_set+0xc>)
   114fe:	2202      	movs	r2, #2
   11500:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
   11504:	4770      	bx	lr
   11506:	bf00      	nop
   11508:	40039000 	.word	0x40039000

0001150c <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   1150c:	4b04      	ldr	r3, [pc, #16]	; (11520 <nvmc_word_write+0x14>)
   1150e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   11512:	f013 0f01 	tst.w	r3, #1
   11516:	d0f9      	beq.n	1150c <nvmc_word_write>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   11518:	6001      	str	r1, [r0, #0]
   1151a:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1151e:	4770      	bx	lr
   11520:	40039000 	.word	0x40039000

00011524 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   11524:	b510      	push	{r4, lr}
   11526:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   11528:	f006 fa1d 	bl	17966 <is_page_aligned_check>
   1152c:	b908      	cbnz	r0, 11532 <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
   1152e:	4808      	ldr	r0, [pc, #32]	; (11550 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
   11530:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
   11532:	f7ff ffe3 	bl	114fc <nvmc_erase_mode_set>
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   11536:	f04f 33ff 	mov.w	r3, #4294967295
   1153a:	6023      	str	r3, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1153c:	4b05      	ldr	r3, [pc, #20]	; (11554 <nrfx_nvmc_page_erase+0x30>)
   1153e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   11542:	f013 0f01 	tst.w	r3, #1
   11546:	d0f9      	beq.n	1153c <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
   11548:	f7ff ffc8 	bl	114dc <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
   1154c:	4802      	ldr	r0, [pc, #8]	; (11558 <nrfx_nvmc_page_erase+0x34>)
   1154e:	e7ef      	b.n	11530 <nrfx_nvmc_page_erase+0xc>
   11550:	0bad000a 	.word	0x0bad000a
   11554:	40039000 	.word	0x40039000
   11558:	0bad0000 	.word	0x0bad0000

0001155c <lfs_dir_traverse_filter>:

    return 0;
}

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
   1155c:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
   1155e:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
   11562:	d01c      	beq.n	1159e <lfs_dir_traverse_filter+0x42>
   11564:	4a19      	ldr	r2, [pc, #100]	; (115cc <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
   11566:	6803      	ldr	r3, [r0, #0]
   11568:	ea83 0401 	eor.w	r4, r3, r1
   1156c:	4214      	tst	r4, r2
   1156e:	d024      	beq.n	115ba <lfs_dir_traverse_filter+0x5e>
    return ((int32_t)(tag << 22) >> 22) == -1;
   11570:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
   11574:	f1b2 3fff 	cmp.w	r2, #4294967295
   11578:	d022      	beq.n	115c0 <lfs_dir_traverse_filter+0x64>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
   1157a:	4c14      	ldr	r4, [pc, #80]	; (115cc <lfs_dir_traverse_filter+0x70>)
   1157c:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
   1157e:	4a14      	ldr	r2, [pc, #80]	; (115d0 <lfs_dir_traverse_filter+0x74>)
   11580:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
   11582:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
   11586:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
   1158a:	4294      	cmp	r4, r2
   1158c:	d01a      	beq.n	115c4 <lfs_dir_traverse_filter+0x68>
    return (tag & 0x70000000) >> 20;
   1158e:	0d0a      	lsrs	r2, r1, #20
   11590:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
   11594:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   11598:	d003      	beq.n	115a2 <lfs_dir_traverse_filter+0x46>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
   1159a:	2000      	movs	r0, #0
   1159c:	e00e      	b.n	115bc <lfs_dir_traverse_filter+0x60>
            : LFS_MKTAG(0x700, 0x3ff, 0);
   1159e:	4a0d      	ldr	r2, [pc, #52]	; (115d4 <lfs_dir_traverse_filter+0x78>)
   115a0:	e7e1      	b.n	11566 <lfs_dir_traverse_filter+0xa>
    return (tag & 0x000ffc00) >> 10;
   115a2:	f3c1 2189 	ubfx	r1, r1, #10, #10
   115a6:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
   115aa:	428c      	cmp	r4, r1
   115ac:	d30c      	bcc.n	115c8 <lfs_dir_traverse_filter+0x6c>
    return (int8_t)lfs_tag_chunk(tag);
   115ae:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   115b0:	eb03 2382 	add.w	r3, r3, r2, lsl #10
   115b4:	6003      	str	r3, [r0, #0]
    return false;
   115b6:	2000      	movs	r0, #0
   115b8:	e000      	b.n	115bc <lfs_dir_traverse_filter+0x60>
        return true;
   115ba:	2001      	movs	r0, #1
}
   115bc:	bc10      	pop	{r4}
   115be:	4770      	bx	lr
        return true;
   115c0:	2001      	movs	r0, #1
   115c2:	e7fb      	b.n	115bc <lfs_dir_traverse_filter+0x60>
   115c4:	2001      	movs	r0, #1
   115c6:	e7f9      	b.n	115bc <lfs_dir_traverse_filter+0x60>
    return false;
   115c8:	2000      	movs	r0, #0
   115ca:	e7f7      	b.n	115bc <lfs_dir_traverse_filter+0x60>
   115cc:	7ffffc00 	.word	0x7ffffc00
   115d0:	000ffc00 	.word	0x000ffc00
   115d4:	700ffc00 	.word	0x700ffc00

000115d8 <lfs_fs_prepmove>:
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
   115d8:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   115da:	6b04      	ldr	r4, [r0, #48]	; 0x30
   115dc:	4b10      	ldr	r3, [pc, #64]	; (11620 <lfs_fs_prepmove+0x48>)
   115de:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
   115e0:	f240 34ff 	movw	r4, #1023	; 0x3ff
   115e4:	42a1      	cmp	r1, r4
   115e6:	d014      	beq.n	11612 <lfs_fs_prepmove+0x3a>
   115e8:	028c      	lsls	r4, r1, #10
   115ea:	f044 449f 	orr.w	r4, r4, #1333788672	; 0x4f800000
   115ee:	f444 04e0 	orr.w	r4, r4, #7340032	; 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   115f2:	4323      	orrs	r3, r4
   115f4:	6303      	str	r3, [r0, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   115f6:	f240 33ff 	movw	r3, #1023	; 0x3ff
   115fa:	4299      	cmp	r1, r3
   115fc:	d00b      	beq.n	11616 <lfs_fs_prepmove+0x3e>
   115fe:	6813      	ldr	r3, [r2, #0]
   11600:	6343      	str	r3, [r0, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   11602:	f240 33ff 	movw	r3, #1023	; 0x3ff
   11606:	4299      	cmp	r1, r3
   11608:	d007      	beq.n	1161a <lfs_fs_prepmove+0x42>
   1160a:	6853      	ldr	r3, [r2, #4]
   1160c:	6383      	str	r3, [r0, #56]	; 0x38
}
   1160e:	bc10      	pop	{r4}
   11610:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
   11612:	2400      	movs	r4, #0
   11614:	e7ed      	b.n	115f2 <lfs_fs_prepmove+0x1a>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   11616:	2300      	movs	r3, #0
   11618:	e7f2      	b.n	11600 <lfs_fs_prepmove+0x28>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   1161a:	2300      	movs	r3, #0
   1161c:	e7f6      	b.n	1160c <lfs_fs_prepmove+0x34>
   1161e:	bf00      	nop
   11620:	800003ff 	.word	0x800003ff

00011624 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   11624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11628:	b097      	sub	sp, #92	; 0x5c
   1162a:	4615      	mov	r5, r2
   1162c:	9309      	str	r3, [sp, #36]	; 0x24
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   1162e:	6812      	ldr	r2, [r2, #0]
   11630:	6e83      	ldr	r3, [r0, #104]	; 0x68
   11632:	6a1b      	ldr	r3, [r3, #32]
   11634:	429a      	cmp	r2, r3
   11636:	f080 828f 	bcs.w	11b58 <lfs_dir_fetchmatch+0x534>
   1163a:	4683      	mov	fp, r0
   1163c:	4689      	mov	r9, r1
   1163e:	686a      	ldr	r2, [r5, #4]
   11640:	4293      	cmp	r3, r2
   11642:	f240 828d 	bls.w	11b60 <lfs_dir_fetchmatch+0x53c>
    uint32_t revs[2] = {0, 0};
   11646:	2600      	movs	r6, #0
   11648:	9612      	str	r6, [sp, #72]	; 0x48
   1164a:	9613      	str	r6, [sp, #76]	; 0x4c
    for (int i = 0; i < 2; i++) {
   1164c:	4634      	mov	r4, r6
   1164e:	e000      	b.n	11652 <lfs_dir_fetchmatch+0x2e>
   11650:	3401      	adds	r4, #1
   11652:	2c01      	cmp	r4, #1
   11654:	dc2b      	bgt.n	116ae <lfs_dir_fetchmatch+0x8a>
                pair[i], 0, &revs[i], sizeof(revs[i]));
   11656:	00a7      	lsls	r7, r4, #2
   11658:	ab12      	add	r3, sp, #72	; 0x48
   1165a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
        int err = lfs_bd_read(lfs,
   1165e:	2304      	movs	r3, #4
   11660:	9303      	str	r3, [sp, #12]
   11662:	9202      	str	r2, [sp, #8]
   11664:	2100      	movs	r1, #0
   11666:	9101      	str	r1, [sp, #4]
   11668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1166c:	9200      	str	r2, [sp, #0]
   1166e:	465a      	mov	r2, fp
   11670:	4658      	mov	r0, fp
   11672:	f006 f9ee 	bl	17a52 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
   11676:	ab16      	add	r3, sp, #88	; 0x58
   11678:	441f      	add	r7, r3
   1167a:	f857 2c10 	ldr.w	r2, [r7, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
   1167e:	4603      	mov	r3, r0
   11680:	b118      	cbz	r0, 1168a <lfs_dir_fetchmatch+0x66>
   11682:	f110 0f54 	cmn.w	r0, #84	; 0x54
   11686:	f040 826f 	bne.w	11b68 <lfs_dir_fetchmatch+0x544>
        if (err != LFS_ERR_CORRUPT &&
   1168a:	f113 0f54 	cmn.w	r3, #84	; 0x54
   1168e:	d0df      	beq.n	11650 <lfs_dir_fetchmatch+0x2c>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
   11690:	1c63      	adds	r3, r4, #1
   11692:	f003 0301 	and.w	r3, r3, #1
   11696:	bf48      	it	mi
   11698:	425b      	negmi	r3, r3
   1169a:	a916      	add	r1, sp, #88	; 0x58
   1169c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   116a0:	f853 3c10 	ldr.w	r3, [r3, #-16]
}

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
    return (int)(unsigned)(a - b);
   116a4:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
   116a6:	2a00      	cmp	r2, #0
   116a8:	ddd2      	ble.n	11650 <lfs_dir_fetchmatch+0x2c>
            r = i;
   116aa:	4626      	mov	r6, r4
   116ac:	e7d0      	b.n	11650 <lfs_dir_fetchmatch+0x2c>
    dir->pair[0] = pair[(r+0)%2];
   116ae:	2e00      	cmp	r6, #0
   116b0:	f006 0301 	and.w	r3, r6, #1
   116b4:	bfb8      	it	lt
   116b6:	425b      	neglt	r3, r3
   116b8:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   116bc:	f8c9 2000 	str.w	r2, [r9]
    dir->pair[1] = pair[(r+1)%2];
   116c0:	3601      	adds	r6, #1
   116c2:	f006 0601 	and.w	r6, r6, #1
   116c6:	bf48      	it	mi
   116c8:	4276      	negmi	r6, r6
   116ca:	960a      	str	r6, [sp, #40]	; 0x28
   116cc:	f855 2026 	ldr.w	r2, [r5, r6, lsl #2]
   116d0:	f8c9 2004 	str.w	r2, [r9, #4]
    dir->rev = revs[(r+0)%2];
   116d4:	aa16      	add	r2, sp, #88	; 0x58
   116d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   116da:	f853 3c10 	ldr.w	r3, [r3, #-16]
   116de:	f8c9 3008 	str.w	r3, [r9, #8]
    dir->off = 0; // nonzero = found some commits
   116e2:	2300      	movs	r3, #0
   116e4:	f8c9 300c 	str.w	r3, [r9, #12]
    for (int i = 0; i < 2; i++) {
   116e8:	469a      	mov	sl, r3
    lfs_stag_t besttag = -1;
   116ea:	f04f 33ff 	mov.w	r3, #4294967295
   116ee:	9305      	str	r3, [sp, #20]
    for (int i = 0; i < 2; i++) {
   116f0:	e053      	b.n	1179a <lfs_dir_fetchmatch+0x176>
                if (err == LFS_ERR_CORRUPT) {
   116f2:	f110 0f54 	cmn.w	r0, #84	; 0x54
   116f6:	f040 81b0 	bne.w	11a5a <lfs_dir_fetchmatch+0x436>
                    dir->erased = false;
   116fa:	2300      	movs	r3, #0
   116fc:	f889 3016 	strb.w	r3, [r9, #22]
                    break;
   11700:	e034      	b.n	1176c <lfs_dir_fetchmatch+0x148>
    return (tag & 0x70000000) >> 20;
   11702:	ea4f 5318 	mov.w	r3, r8, lsr #20
   11706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   1170a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1170e:	d005      	beq.n	1171c <lfs_dir_fetchmatch+0xf8>
   11710:	9b07      	ldr	r3, [sp, #28]
   11712:	f003 0301 	and.w	r3, r3, #1
   11716:	f889 3016 	strb.w	r3, [r9, #22]
                break;
   1171a:	e027      	b.n	1176c <lfs_dir_fetchmatch+0x148>
                        dir->off % lfs->cfg->prog_size == 0);
   1171c:	f8d9 100c 	ldr.w	r1, [r9, #12]
   11720:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
   11724:	699a      	ldr	r2, [r3, #24]
   11726:	fbb1 f3f2 	udiv	r3, r1, r2
   1172a:	fb02 1313 	mls	r3, r2, r3, r1
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   1172e:	2b00      	cmp	r3, #0
   11730:	d1ee      	bne.n	11710 <lfs_dir_fetchmatch+0xec>
   11732:	2301      	movs	r3, #1
   11734:	9307      	str	r3, [sp, #28]
   11736:	e7eb      	b.n	11710 <lfs_dir_fetchmatch+0xec>
                dir->erased = false;
   11738:	2300      	movs	r3, #0
   1173a:	f889 3016 	strb.w	r3, [r9, #22]
                break;
   1173e:	e015      	b.n	1176c <lfs_dir_fetchmatch+0x148>
                err = lfs_bd_read(lfs,
   11740:	2204      	movs	r2, #4
   11742:	9203      	str	r2, [sp, #12]
   11744:	aa0d      	add	r2, sp, #52	; 0x34
   11746:	9202      	str	r2, [sp, #8]
   11748:	1d32      	adds	r2, r6, #4
   1174a:	9201      	str	r2, [sp, #4]
   1174c:	f8d9 2000 	ldr.w	r2, [r9]
   11750:	9200      	str	r2, [sp, #0]
   11752:	465a      	mov	r2, fp
   11754:	2100      	movs	r1, #0
   11756:	4658      	mov	r0, fp
   11758:	f006 f97b 	bl	17a52 <lfs_bd_read>
                if (err) {
   1175c:	2800      	cmp	r0, #0
   1175e:	d136      	bne.n	117ce <lfs_dir_fetchmatch+0x1aa>
                dcrc = lfs_fromle32(dcrc);
   11760:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                if (crc != dcrc) {
   11762:	42a3      	cmp	r3, r4
   11764:	d03c      	beq.n	117e0 <lfs_dir_fetchmatch+0x1bc>
                    dir->erased = false;
   11766:	2300      	movs	r3, #0
   11768:	f889 3016 	strb.w	r3, [r9, #22]
        if (dir->off > 0) {
   1176c:	f8d9 300c 	ldr.w	r3, [r9, #12]
   11770:	2b00      	cmp	r3, #0
   11772:	f040 8175 	bne.w	11a60 <lfs_dir_fetchmatch+0x43c>
    lfs_block_t t = pair[0];
   11776:	f8d9 3000 	ldr.w	r3, [r9]
    pair[0] = pair[1];
   1177a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1177e:	f8c9 2000 	str.w	r2, [r9]
    pair[1] = t;
   11782:	f8c9 3004 	str.w	r3, [r9, #4]
        dir->rev = revs[(r+1)%2];
   11786:	aa16      	add	r2, sp, #88	; 0x58
   11788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1178a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1178e:	f853 3c10 	ldr.w	r3, [r3, #-16]
   11792:	f8c9 3008 	str.w	r3, [r9, #8]
    for (int i = 0; i < 2; i++) {
   11796:	f10a 0a01 	add.w	sl, sl, #1
   1179a:	f1ba 0f01 	cmp.w	sl, #1
   1179e:	f300 81b6 	bgt.w	11b0e <lfs_dir_fetchmatch+0x4ea>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
   117a2:	4abc      	ldr	r2, [pc, #752]	; (11a94 <lfs_dir_fetchmatch+0x470>)
   117a4:	ab0e      	add	r3, sp, #56	; 0x38
   117a6:	e892 0003 	ldmia.w	r2, {r0, r1}
   117aa:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   117ae:	2204      	movs	r2, #4
   117b0:	f109 0108 	add.w	r1, r9, #8
   117b4:	f04f 30ff 	mov.w	r0, #4294967295
   117b8:	f002 fb90 	bl	13edc <lfs_crc>
   117bc:	4604      	mov	r4, r0
        lfs_stag_t tempbesttag = besttag;
   117be:	9b05      	ldr	r3, [sp, #20]
   117c0:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
   117c2:	2600      	movs	r6, #0
   117c4:	960b      	str	r6, [sp, #44]	; 0x2c
        uint16_t tempcount = 0;
   117c6:	9606      	str	r6, [sp, #24]
        lfs_tag_t ptag = 0xffffffff;
   117c8:	f04f 38ff 	mov.w	r8, #4294967295
   117cc:	e066      	b.n	1189c <lfs_dir_fetchmatch+0x278>
                    if (err == LFS_ERR_CORRUPT) {
   117ce:	f110 0f54 	cmn.w	r0, #84	; 0x54
   117d2:	d103      	bne.n	117dc <lfs_dir_fetchmatch+0x1b8>
                        dir->erased = false;
   117d4:	2300      	movs	r3, #0
   117d6:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
   117da:	e7c7      	b.n	1176c <lfs_dir_fetchmatch+0x148>
                    return err;
   117dc:	9005      	str	r0, [sp, #20]
   117de:	e1b7      	b.n	11b50 <lfs_dir_fetchmatch+0x52c>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
   117e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x0ff00000) >> 20;
   117e2:	ea4f 5813 	mov.w	r8, r3, lsr #20
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
   117e6:	ea85 78c8 	eor.w	r8, r5, r8, lsl #31
                lfs->seed ^= crc;
   117ea:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
   117ee:	4062      	eors	r2, r4
   117f0:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
    return ((int32_t)(tag << 22) >> 22) == -1;
   117f4:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   117f8:	f1b2 3fff 	cmp.w	r2, #4294967295
   117fc:	bf08      	it	eq
   117fe:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
   11800:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   11804:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
   11806:	4433      	add	r3, r6
   11808:	f8c9 300c 	str.w	r3, [r9, #12]
                dir->etag = ptag;
   1180c:	f8c9 8010 	str.w	r8, [r9, #16]
                dir->count = tempcount;
   11810:	9b06      	ldr	r3, [sp, #24]
   11812:	f8a9 3014 	strh.w	r3, [r9, #20]
                dir->tail[0] = temptail[0];
   11816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11818:	f8c9 3018 	str.w	r3, [r9, #24]
                dir->tail[1] = temptail[1];
   1181c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1181e:	f8c9 301c 	str.w	r3, [r9, #28]
                dir->split = tempsplit;
   11822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11824:	f889 3017 	strb.w	r3, [r9, #23]
                besttag = tempbesttag;
   11828:	9b08      	ldr	r3, [sp, #32]
   1182a:	9305      	str	r3, [sp, #20]
                crc = 0xffffffff;
   1182c:	f04f 34ff 	mov.w	r4, #4294967295
   11830:	e034      	b.n	1189c <lfs_dir_fetchmatch+0x278>
                    if (err == LFS_ERR_CORRUPT) {
   11832:	f110 0f54 	cmn.w	r0, #84	; 0x54
   11836:	d10f      	bne.n	11858 <lfs_dir_fetchmatch+0x234>
                        dir->erased = false;
   11838:	2300      	movs	r3, #0
   1183a:	f889 3016 	strb.w	r3, [r9, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
   1183e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
   11840:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
   11842:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
   11846:	d109      	bne.n	1185c <lfs_dir_fetchmatch+0x238>
    return (tag & 0x000ffc00) >> 10;
   11848:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
   1184c:	9a06      	ldr	r2, [sp, #24]
   1184e:	429a      	cmp	r2, r3
   11850:	d80c      	bhi.n	1186c <lfs_dir_fetchmatch+0x248>
                    tempcount = lfs_tag_id(tag) + 1;
   11852:	3301      	adds	r3, #1
   11854:	9306      	str	r3, [sp, #24]
   11856:	e009      	b.n	1186c <lfs_dir_fetchmatch+0x248>
                    return err;
   11858:	9005      	str	r0, [sp, #20]
   1185a:	e179      	b.n	11b50 <lfs_dir_fetchmatch+0x52c>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
   1185c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   11860:	f000 8090 	beq.w	11984 <lfs_dir_fetchmatch+0x360>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
   11864:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
   11868:	f000 80b5 	beq.w	119d6 <lfs_dir_fetchmatch+0x3b2>
            if ((fmask & tag) == (fmask & ftag)) {
   1186c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1186e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11870:	404b      	eors	r3, r1
   11872:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11874:	4213      	tst	r3, r2
   11876:	d110      	bne.n	1189a <lfs_dir_fetchmatch+0x276>
                        dir->pair[0], off+sizeof(tag)});
   11878:	f8d9 3000 	ldr.w	r3, [r9]
                int res = cb(data, tag, &(struct lfs_diskoff){
   1187c:	9314      	str	r3, [sp, #80]	; 0x50
                        dir->pair[0], off+sizeof(tag)});
   1187e:	1d33      	adds	r3, r6, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
   11880:	9315      	str	r3, [sp, #84]	; 0x54
   11882:	aa14      	add	r2, sp, #80	; 0x50
   11884:	9823      	ldr	r0, [sp, #140]	; 0x8c
   11886:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11888:	4798      	blx	r3
                if (res < 0) {
   1188a:	2800      	cmp	r0, #0
   1188c:	f2c0 80c2 	blt.w	11a14 <lfs_dir_fetchmatch+0x3f0>
                if (res == LFS_CMP_EQ) {
   11890:	2800      	cmp	r0, #0
   11892:	f040 80c8 	bne.w	11a26 <lfs_dir_fetchmatch+0x402>
                    tempbesttag = tag;
   11896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11898:	9308      	str	r3, [sp, #32]
            ptag = tag;
   1189a:	46a8      	mov	r8, r5
    return ((int32_t)(tag << 22) >> 22) == -1;
   1189c:	f348 0309 	sbfx	r3, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   118a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   118a4:	bf14      	ite	ne
   118a6:	4643      	movne	r3, r8
   118a8:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
   118ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   118b0:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
   118b2:	441e      	add	r6, r3
            int err = lfs_bd_read(lfs,
   118b4:	465f      	mov	r7, fp
                    NULL, &lfs->rcache, lfs->cfg->block_size,
   118b6:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
            int err = lfs_bd_read(lfs,
   118ba:	69db      	ldr	r3, [r3, #28]
   118bc:	2204      	movs	r2, #4
   118be:	9203      	str	r2, [sp, #12]
   118c0:	aa0c      	add	r2, sp, #48	; 0x30
   118c2:	9202      	str	r2, [sp, #8]
   118c4:	9601      	str	r6, [sp, #4]
   118c6:	f8d9 2000 	ldr.w	r2, [r9]
   118ca:	9200      	str	r2, [sp, #0]
   118cc:	465a      	mov	r2, fp
   118ce:	2100      	movs	r1, #0
   118d0:	4658      	mov	r0, fp
   118d2:	f006 f8be 	bl	17a52 <lfs_bd_read>
            if (err) {
   118d6:	9007      	str	r0, [sp, #28]
   118d8:	2800      	cmp	r0, #0
   118da:	f47f af0a 	bne.w	116f2 <lfs_dir_fetchmatch+0xce>
            crc = lfs_crc(crc, &tag, sizeof(tag));
   118de:	2204      	movs	r2, #4
   118e0:	a90c      	add	r1, sp, #48	; 0x30
   118e2:	4620      	mov	r0, r4
   118e4:	f002 fafa 	bl	13edc <lfs_crc>
   118e8:	4604      	mov	r4, r0
            tag = lfs_frombe32(tag) ^ ptag;
   118ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
   118ec:	ba2d      	rev	r5, r5
   118ee:	ea88 0505 	eor.w	r5, r8, r5
   118f2:	950c      	str	r5, [sp, #48]	; 0x30
            if (!lfs_tag_isvalid(tag)) {
   118f4:	2d00      	cmp	r5, #0
   118f6:	f6ff af04 	blt.w	11702 <lfs_dir_fetchmatch+0xde>
    return ((int32_t)(tag << 22) >> 22) == -1;
   118fa:	f345 0209 	sbfx	r2, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   118fe:	f1b2 3fff 	cmp.w	r2, #4294967295
   11902:	bf14      	ite	ne
   11904:	462a      	movne	r2, r5
   11906:	1c6a      	addeq	r2, r5, #1
    return tag & 0x000003ff;
   11908:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   1190c:	3204      	adds	r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
   1190e:	4432      	add	r2, r6
   11910:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
   11914:	69db      	ldr	r3, [r3, #28]
   11916:	429a      	cmp	r2, r3
   11918:	f63f af0e 	bhi.w	11738 <lfs_dir_fetchmatch+0x114>
    return (tag & 0x70000000) >> 20;
   1191c:	0d2a      	lsrs	r2, r5, #20
   1191e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
   11922:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
   11926:	f43f af0b 	beq.w	11740 <lfs_dir_fetchmatch+0x11c>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   1192a:	f04f 0804 	mov.w	r8, #4
   1192e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
   11930:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   11934:	f1b2 3fff 	cmp.w	r2, #4294967295
   11938:	bf08      	it	eq
   1193a:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
   1193c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   11940:	3304      	adds	r3, #4
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   11942:	4598      	cmp	r8, r3
   11944:	f4bf af7b 	bcs.w	1183e <lfs_dir_fetchmatch+0x21a>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
   11948:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
   1194c:	69db      	ldr	r3, [r3, #28]
   1194e:	2201      	movs	r2, #1
   11950:	9203      	str	r2, [sp, #12]
   11952:	aa0d      	add	r2, sp, #52	; 0x34
   11954:	9202      	str	r2, [sp, #8]
   11956:	eb08 0206 	add.w	r2, r8, r6
   1195a:	9201      	str	r2, [sp, #4]
   1195c:	f8d9 2000 	ldr.w	r2, [r9]
   11960:	9200      	str	r2, [sp, #0]
   11962:	463a      	mov	r2, r7
   11964:	2100      	movs	r1, #0
   11966:	4658      	mov	r0, fp
   11968:	f006 f873 	bl	17a52 <lfs_bd_read>
                if (err) {
   1196c:	2800      	cmp	r0, #0
   1196e:	f47f af60 	bne.w	11832 <lfs_dir_fetchmatch+0x20e>
                crc = lfs_crc(crc, &dat, 1);
   11972:	2201      	movs	r2, #1
   11974:	a90d      	add	r1, sp, #52	; 0x34
   11976:	4620      	mov	r0, r4
   11978:	f002 fab0 	bl	13edc <lfs_crc>
   1197c:	4604      	mov	r4, r0
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   1197e:	f108 0801 	add.w	r8, r8, #1
   11982:	e7d4      	b.n	1192e <lfs_dir_fetchmatch+0x30a>
    return (int8_t)lfs_tag_chunk(tag);
   11984:	b252      	sxtb	r2, r2
                tempcount += lfs_tag_splice(tag);
   11986:	9906      	ldr	r1, [sp, #24]
   11988:	4411      	add	r1, r2
   1198a:	b289      	uxth	r1, r1
   1198c:	9106      	str	r1, [sp, #24]
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
   1198e:	9908      	ldr	r1, [sp, #32]
   11990:	4608      	mov	r0, r1
   11992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   11996:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
   1199a:	f421 717f 	bic.w	r1, r1, #1020	; 0x3fc
   1199e:	f021 0103 	bic.w	r1, r1, #3
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
   119a2:	f041 419f 	orr.w	r1, r1, #1333788672	; 0x4f800000
   119a6:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
   119aa:	428b      	cmp	r3, r1
   119ac:	d00f      	beq.n	119ce <lfs_dir_fetchmatch+0x3aa>
                } else if (tempbesttag != -1 &&
   119ae:	9908      	ldr	r1, [sp, #32]
   119b0:	f1b1 3fff 	cmp.w	r1, #4294967295
   119b4:	f43f af5a 	beq.w	1186c <lfs_dir_fetchmatch+0x248>
    return (tag & 0x000ffc00) >> 10;
   119b8:	f3c3 2389 	ubfx	r3, r3, #10, #10
   119bc:	f3c0 2189 	ubfx	r1, r0, #10, #10
                } else if (tempbesttag != -1 &&
   119c0:	4299      	cmp	r1, r3
   119c2:	f4ff af53 	bcc.w	1186c <lfs_dir_fetchmatch+0x248>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   119c6:	eb00 2382 	add.w	r3, r0, r2, lsl #10
   119ca:	9308      	str	r3, [sp, #32]
   119cc:	e74e      	b.n	1186c <lfs_dir_fetchmatch+0x248>
                    tempbesttag |= 0x80000000;
   119ce:	f040 4300 	orr.w	r3, r0, #2147483648	; 0x80000000
   119d2:	9308      	str	r3, [sp, #32]
   119d4:	e74a      	b.n	1186c <lfs_dir_fetchmatch+0x248>
                tempsplit = (lfs_tag_chunk(tag) & 1);
   119d6:	f002 0301 	and.w	r3, r2, #1
   119da:	930b      	str	r3, [sp, #44]	; 0x2c
                        NULL, &lfs->rcache, lfs->cfg->block_size,
   119dc:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
   119e0:	69db      	ldr	r3, [r3, #28]
   119e2:	2208      	movs	r2, #8
   119e4:	9203      	str	r2, [sp, #12]
   119e6:	aa0e      	add	r2, sp, #56	; 0x38
   119e8:	9202      	str	r2, [sp, #8]
   119ea:	1d32      	adds	r2, r6, #4
   119ec:	9201      	str	r2, [sp, #4]
   119ee:	f8d9 2000 	ldr.w	r2, [r9]
   119f2:	9200      	str	r2, [sp, #0]
   119f4:	465a      	mov	r2, fp
   119f6:	2100      	movs	r1, #0
   119f8:	4658      	mov	r0, fp
   119fa:	f006 f82a 	bl	17a52 <lfs_bd_read>
                if (err) {
   119fe:	2800      	cmp	r0, #0
   11a00:	f43f af34 	beq.w	1186c <lfs_dir_fetchmatch+0x248>
                    if (err == LFS_ERR_CORRUPT) {
   11a04:	f110 0f54 	cmn.w	r0, #84	; 0x54
   11a08:	f47f af30 	bne.w	1186c <lfs_dir_fetchmatch+0x248>
                        dir->erased = false;
   11a0c:	2300      	movs	r3, #0
   11a0e:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
   11a12:	e6ab      	b.n	1176c <lfs_dir_fetchmatch+0x148>
                    if (res == LFS_ERR_CORRUPT) {
   11a14:	f110 0f54 	cmn.w	r0, #84	; 0x54
   11a18:	d103      	bne.n	11a22 <lfs_dir_fetchmatch+0x3fe>
                        dir->erased = false;
   11a1a:	2300      	movs	r3, #0
   11a1c:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
   11a20:	e6a4      	b.n	1176c <lfs_dir_fetchmatch+0x148>
                    return res;
   11a22:	9005      	str	r0, [sp, #20]
   11a24:	e094      	b.n	11b50 <lfs_dir_fetchmatch+0x52c>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
   11a26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11a28:	9b08      	ldr	r3, [sp, #32]
   11a2a:	461f      	mov	r7, r3
   11a2c:	ea82 0103 	eor.w	r1, r2, r3
   11a30:	4b19      	ldr	r3, [pc, #100]	; (11a98 <lfs_dir_fetchmatch+0x474>)
   11a32:	400b      	ands	r3, r1
   11a34:	b16b      	cbz	r3, 11a52 <lfs_dir_fetchmatch+0x42e>
                } else if (res == LFS_CMP_GT &&
   11a36:	2802      	cmp	r0, #2
   11a38:	f47f af2f 	bne.w	1189a <lfs_dir_fetchmatch+0x276>
    return (tag & 0x000ffc00) >> 10;
   11a3c:	f3c2 2389 	ubfx	r3, r2, #10, #10
   11a40:	f3c7 2789 	ubfx	r7, r7, #10, #10
                } else if (res == LFS_CMP_GT &&
   11a44:	429f      	cmp	r7, r3
   11a46:	f4ff af28 	bcc.w	1189a <lfs_dir_fetchmatch+0x276>
                    tempbesttag = tag | 0x80000000;
   11a4a:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
   11a4e:	9308      	str	r3, [sp, #32]
   11a50:	e723      	b.n	1189a <lfs_dir_fetchmatch+0x276>
                    tempbesttag = -1;
   11a52:	f04f 33ff 	mov.w	r3, #4294967295
   11a56:	9308      	str	r3, [sp, #32]
   11a58:	e71f      	b.n	1189a <lfs_dir_fetchmatch+0x276>
                return err;
   11a5a:	9b07      	ldr	r3, [sp, #28]
   11a5c:	9305      	str	r3, [sp, #20]
   11a5e:	e077      	b.n	11b50 <lfs_dir_fetchmatch+0x52c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   11a60:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
   11a64:	0d13      	lsrs	r3, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   11a66:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   11a6a:	d017      	beq.n	11a9c <lfs_dir_fetchmatch+0x478>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   11a6c:	f8db 4040 	ldr.w	r4, [fp, #64]	; 0x40
   11a70:	f8d9 1000 	ldr.w	r1, [r9]
   11a74:	428c      	cmp	r4, r1
   11a76:	d025      	beq.n	11ac4 <lfs_dir_fetchmatch+0x4a0>
   11a78:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
   11a7c:	f8d9 0004 	ldr.w	r0, [r9, #4]
   11a80:	4283      	cmp	r3, r0
   11a82:	d021      	beq.n	11ac8 <lfs_dir_fetchmatch+0x4a4>
   11a84:	4284      	cmp	r4, r0
   11a86:	d021      	beq.n	11acc <lfs_dir_fetchmatch+0x4a8>
   11a88:	4299      	cmp	r1, r3
   11a8a:	d001      	beq.n	11a90 <lfs_dir_fetchmatch+0x46c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   11a8c:	2300      	movs	r3, #0
   11a8e:	e006      	b.n	11a9e <lfs_dir_fetchmatch+0x47a>
   11a90:	2301      	movs	r3, #1
   11a92:	e004      	b.n	11a9e <lfs_dir_fetchmatch+0x47a>
   11a94:	00019618 	.word	0x00019618
   11a98:	7ffffc00 	.word	0x7ffffc00
   11a9c:	2300      	movs	r3, #0
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
   11a9e:	b1d3      	cbz	r3, 11ad6 <lfs_dir_fetchmatch+0x4b2>
    return (tag & 0x000ffc00) >> 10;
   11aa0:	f3c2 2389 	ubfx	r3, r2, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
   11aa4:	9a05      	ldr	r2, [sp, #20]
   11aa6:	4611      	mov	r1, r2
    return (tag & 0x000ffc00) >> 10;
   11aa8:	f3c2 2289 	ubfx	r2, r2, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
   11aac:	429a      	cmp	r2, r3
   11aae:	d00f      	beq.n	11ad0 <lfs_dir_fetchmatch+0x4ac>
                } else if (besttag != -1 &&
   11ab0:	9805      	ldr	r0, [sp, #20]
   11ab2:	f1b0 3fff 	cmp.w	r0, #4294967295
   11ab6:	d00e      	beq.n	11ad6 <lfs_dir_fetchmatch+0x4b2>
   11ab8:	429a      	cmp	r2, r3
   11aba:	d90c      	bls.n	11ad6 <lfs_dir_fetchmatch+0x4b2>
                    besttag -= LFS_MKTAG(0, 1, 0);
   11abc:	f5a1 6380 	sub.w	r3, r1, #1024	; 0x400
   11ac0:	9305      	str	r3, [sp, #20]
   11ac2:	e008      	b.n	11ad6 <lfs_dir_fetchmatch+0x4b2>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   11ac4:	2301      	movs	r3, #1
   11ac6:	e7ea      	b.n	11a9e <lfs_dir_fetchmatch+0x47a>
   11ac8:	2301      	movs	r3, #1
   11aca:	e7e8      	b.n	11a9e <lfs_dir_fetchmatch+0x47a>
   11acc:	2301      	movs	r3, #1
   11ace:	e7e6      	b.n	11a9e <lfs_dir_fetchmatch+0x47a>
                    besttag |= 0x80000000;
   11ad0:	f041 4300 	orr.w	r3, r1, #2147483648	; 0x80000000
   11ad4:	9305      	str	r3, [sp, #20]
            if (id) {
   11ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11ad8:	b14b      	cbz	r3, 11aee <lfs_dir_fetchmatch+0x4ca>
    return (tag & 0x000ffc00) >> 10;
   11ada:	9b05      	ldr	r3, [sp, #20]
   11adc:	f3c3 2389 	ubfx	r3, r3, #10, #10
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   11ae0:	f8b9 2014 	ldrh.w	r2, [r9, #20]
    return (a < b) ? a : b;
   11ae4:	4293      	cmp	r3, r2
   11ae6:	bf28      	it	cs
   11ae8:	4613      	movcs	r3, r2
   11aea:	9a21      	ldr	r2, [sp, #132]	; 0x84
   11aec:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
   11aee:	9b05      	ldr	r3, [sp, #20]
   11af0:	2b00      	cmp	r3, #0
   11af2:	da2d      	bge.n	11b50 <lfs_dir_fetchmatch+0x52c>
    return (tag & 0x000ffc00) >> 10;
   11af4:	f3c3 2389 	ubfx	r3, r3, #10, #10
            } else if (lfs_tag_id(besttag) < dir->count) {
   11af8:	f8b9 2014 	ldrh.w	r2, [r9, #20]
   11afc:	429a      	cmp	r2, r3
   11afe:	d903      	bls.n	11b08 <lfs_dir_fetchmatch+0x4e4>
                return LFS_ERR_NOENT;
   11b00:	f06f 0301 	mvn.w	r3, #1
   11b04:	9305      	str	r3, [sp, #20]
   11b06:	e023      	b.n	11b50 <lfs_dir_fetchmatch+0x52c>
                return 0;
   11b08:	2300      	movs	r3, #0
   11b0a:	9305      	str	r3, [sp, #20]
   11b0c:	e020      	b.n	11b50 <lfs_dir_fetchmatch+0x52c>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
   11b0e:	f04f 0300 	mov.w	r3, #0
   11b12:	2201      	movs	r2, #1
   11b14:	f362 0302 	bfi	r3, r2, #0, #3
   11b18:	f36f 03c5 	bfc	r3, #3, #3
   11b1c:	4a13      	ldr	r2, [pc, #76]	; (11b6c <lfs_dir_fetchmatch+0x548>)
   11b1e:	4914      	ldr	r1, [pc, #80]	; (11b70 <lfs_dir_fetchmatch+0x54c>)
   11b20:	1a52      	subs	r2, r2, r1
   11b22:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   11b26:	f362 138f 	bfi	r3, r2, #6, #10
   11b2a:	4a12      	ldr	r2, [pc, #72]	; (11b74 <lfs_dir_fetchmatch+0x550>)
   11b2c:	920e      	str	r2, [sp, #56]	; 0x38
   11b2e:	f240 32e5 	movw	r2, #997	; 0x3e5
   11b32:	920f      	str	r2, [sp, #60]	; 0x3c
   11b34:	f8d9 2000 	ldr.w	r2, [r9]
   11b38:	9210      	str	r2, [sp, #64]	; 0x40
   11b3a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   11b3e:	9211      	str	r2, [sp, #68]	; 0x44
   11b40:	2204      	movs	r2, #4
   11b42:	a90e      	add	r1, sp, #56	; 0x38
   11b44:	480c      	ldr	r0, [pc, #48]	; (11b78 <lfs_dir_fetchmatch+0x554>)
   11b46:	f7fc f965 	bl	de14 <log_n>
    return LFS_ERR_CORRUPT;
   11b4a:	f06f 0353 	mvn.w	r3, #83	; 0x53
   11b4e:	9305      	str	r3, [sp, #20]
}
   11b50:	9805      	ldr	r0, [sp, #20]
   11b52:	b017      	add	sp, #92	; 0x5c
   11b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
   11b58:	f06f 0353 	mvn.w	r3, #83	; 0x53
   11b5c:	9305      	str	r3, [sp, #20]
   11b5e:	e7f7      	b.n	11b50 <lfs_dir_fetchmatch+0x52c>
   11b60:	f06f 0353 	mvn.w	r3, #83	; 0x53
   11b64:	9305      	str	r3, [sp, #20]
   11b66:	e7f3      	b.n	11b50 <lfs_dir_fetchmatch+0x52c>
   11b68:	9005      	str	r0, [sp, #20]
   11b6a:	e7f1      	b.n	11b50 <lfs_dir_fetchmatch+0x52c>
   11b6c:	00019584 	.word	0x00019584
   11b70:	00019574 	.word	0x00019574
   11b74:	0001a3dc 	.word	0x0001a3dc
   11b78:	0001a404 	.word	0x0001a404

00011b7c <lfs_fs_parent>:
        lfs_mdir_t *parent) {
   11b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b7e:	b089      	sub	sp, #36	; 0x24
   11b80:	4606      	mov	r6, r0
   11b82:	460f      	mov	r7, r1
   11b84:	4614      	mov	r4, r2
    parent->tail[0] = 0;
   11b86:	2500      	movs	r5, #0
   11b88:	6195      	str	r5, [r2, #24]
    parent->tail[1] = 1;
   11b8a:	2301      	movs	r3, #1
   11b8c:	61d3      	str	r3, [r2, #28]
    while (!lfs_pair_isnull(parent->tail)) {
   11b8e:	e025      	b.n	11bdc <lfs_fs_parent+0x60>
            return LFS_ERR_CORRUPT;
   11b90:	f06f 0353 	mvn.w	r3, #83	; 0x53
   11b94:	e02e      	b.n	11bf4 <lfs_fs_parent+0x78>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   11b96:	2301      	movs	r3, #1
   11b98:	e000      	b.n	11b9c <lfs_fs_parent+0x20>
   11b9a:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
   11b9c:	bb43      	cbnz	r3, 11bf0 <lfs_fs_parent+0x74>
        if (cycle >= lfs->cfg->block_count/2) {
   11b9e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   11ba0:	6a1b      	ldr	r3, [r3, #32]
   11ba2:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
   11ba6:	d2f3      	bcs.n	11b90 <lfs_fs_parent+0x14>
        cycle += 1;
   11ba8:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   11baa:	9605      	str	r6, [sp, #20]
                    lfs, {pair[0], pair[1]}});
   11bac:	683b      	ldr	r3, [r7, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   11bae:	9306      	str	r3, [sp, #24]
   11bb0:	687b      	ldr	r3, [r7, #4]
   11bb2:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   11bb4:	ab05      	add	r3, sp, #20
   11bb6:	9303      	str	r3, [sp, #12]
   11bb8:	4b10      	ldr	r3, [pc, #64]	; (11bfc <lfs_fs_parent+0x80>)
   11bba:	9302      	str	r3, [sp, #8]
   11bbc:	2300      	movs	r3, #0
   11bbe:	9301      	str	r3, [sp, #4]
   11bc0:	4b0f      	ldr	r3, [pc, #60]	; (11c00 <lfs_fs_parent+0x84>)
   11bc2:	9300      	str	r3, [sp, #0]
   11bc4:	4b0f      	ldr	r3, [pc, #60]	; (11c04 <lfs_fs_parent+0x88>)
   11bc6:	f104 0218 	add.w	r2, r4, #24
   11bca:	4621      	mov	r1, r4
   11bcc:	4630      	mov	r0, r6
   11bce:	f7ff fd29 	bl	11624 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
   11bd2:	4603      	mov	r3, r0
   11bd4:	b110      	cbz	r0, 11bdc <lfs_fs_parent+0x60>
   11bd6:	f110 0f02 	cmn.w	r0, #2
   11bda:	d10b      	bne.n	11bf4 <lfs_fs_parent+0x78>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   11bdc:	69a3      	ldr	r3, [r4, #24]
   11bde:	f1b3 3fff 	cmp.w	r3, #4294967295
   11be2:	d0da      	beq.n	11b9a <lfs_fs_parent+0x1e>
   11be4:	69e3      	ldr	r3, [r4, #28]
   11be6:	f1b3 3fff 	cmp.w	r3, #4294967295
   11bea:	d0d4      	beq.n	11b96 <lfs_fs_parent+0x1a>
   11bec:	2300      	movs	r3, #0
   11bee:	e7d5      	b.n	11b9c <lfs_fs_parent+0x20>
    return LFS_ERR_NOENT;
   11bf0:	f06f 0301 	mvn.w	r3, #1
}
   11bf4:	4618      	mov	r0, r3
   11bf6:	b009      	add	sp, #36	; 0x24
   11bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11bfa:	bf00      	nop
   11bfc:	00017beb 	.word	0x00017beb
   11c00:	20000008 	.word	0x20000008
   11c04:	7ff003ff 	.word	0x7ff003ff

00011c08 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   11c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c0c:	b097      	sub	sp, #92	; 0x5c
   11c0e:	900b      	str	r0, [sp, #44]	; 0x2c
   11c10:	4688      	mov	r8, r1
   11c12:	4692      	mov	sl, r2
   11c14:	461d      	mov	r5, r3
   11c16:	9e20      	ldr	r6, [sp, #128]	; 0x80
   11c18:	9f21      	ldr	r7, [sp, #132]	; 0x84
   11c1a:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
   11c1e:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   11c22:	930d      	str	r3, [sp, #52]	; 0x34
   11c24:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
   11c28:	930e      	str	r3, [sp, #56]	; 0x38
   11c2a:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
   11c2e:	930c      	str	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
   11c30:	f345 0409 	sbfx	r4, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   11c34:	f1b4 3fff 	cmp.w	r4, #4294967295
   11c38:	bf14      	ite	ne
   11c3a:	462c      	movne	r4, r5
   11c3c:	1c6c      	addeq	r4, r5, #1
    return tag & 0x000003ff;
   11c3e:	f3c4 0409 	ubfx	r4, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   11c42:	3404      	adds	r4, #4
        if (off+lfs_tag_dsize(ptag) < dir->off) {
   11c44:	4454      	add	r4, sl
   11c46:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11c4a:	429c      	cmp	r4, r3
   11c4c:	d32b      	bcc.n	11ca6 <lfs_dir_traverse+0x9e>
        } else if (attrcount > 0) {
   11c4e:	2f00      	cmp	r7, #0
   11c50:	f340 80ba 	ble.w	11dc8 <lfs_dir_traverse+0x1c0>
            tag = attrs[0].tag;
   11c54:	6833      	ldr	r3, [r6, #0]
   11c56:	9313      	str	r3, [sp, #76]	; 0x4c
            buffer = attrs[0].buffer;
   11c58:	6874      	ldr	r4, [r6, #4]
            attrs += 1;
   11c5a:	3608      	adds	r6, #8
            attrcount -= 1;
   11c5c:	3f01      	subs	r7, #1
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
   11c5e:	4b5d      	ldr	r3, [pc, #372]	; (11dd4 <lfs_dir_traverse+0x1cc>)
   11c60:	ea0b 0303 	and.w	r3, fp, r3
   11c64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11c66:	9923      	ldr	r1, [sp, #140]	; 0x8c
   11c68:	404a      	eors	r2, r1
   11c6a:	ea12 0903 	ands.w	r9, r2, r3
   11c6e:	d1df      	bne.n	11c30 <lfs_dir_traverse+0x28>
    return (tag & 0x000ffc00) >> 10;
   11c70:	f3cb 2389 	ubfx	r3, fp, #10, #10
        if (lfs_tag_id(tmask) != 0) {
   11c74:	2b00      	cmp	r3, #0
   11c76:	d135      	bne.n	11ce4 <lfs_dir_traverse+0xdc>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
   11c78:	9913      	ldr	r1, [sp, #76]	; 0x4c
    return (tag & 0x7ff00000) >> 20;
   11c7a:	f3c1 530a 	ubfx	r3, r1, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
   11c7e:	2b00      	cmp	r3, #0
   11c80:	d0d6      	beq.n	11c30 <lfs_dir_traverse+0x28>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
   11c82:	f240 1201 	movw	r2, #257	; 0x101
   11c86:	4293      	cmp	r3, r2
   11c88:	d04c      	beq.n	11d24 <lfs_dir_traverse+0x11c>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
   11c8a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   11c8e:	d06d      	beq.n	11d6c <lfs_dir_traverse+0x164>
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
   11c90:	4622      	mov	r2, r4
   11c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11c94:	eb01 2183 	add.w	r1, r1, r3, lsl #10
   11c98:	9828      	ldr	r0, [sp, #160]	; 0xa0
   11c9a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   11c9c:	4798      	blx	r3
            if (err) {
   11c9e:	4603      	mov	r3, r0
   11ca0:	2800      	cmp	r0, #0
   11ca2:	d0c5      	beq.n	11c30 <lfs_dir_traverse+0x28>
   11ca4:	e091      	b.n	11dca <lfs_dir_traverse+0x1c2>
            int err = lfs_bd_read(lfs,
   11ca6:	2304      	movs	r3, #4
   11ca8:	9303      	str	r3, [sp, #12]
   11caa:	aa13      	add	r2, sp, #76	; 0x4c
   11cac:	9202      	str	r2, [sp, #8]
   11cae:	9401      	str	r4, [sp, #4]
   11cb0:	f8d8 2000 	ldr.w	r2, [r8]
   11cb4:	9200      	str	r2, [sp, #0]
   11cb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11cb8:	2100      	movs	r1, #0
   11cba:	4610      	mov	r0, r2
   11cbc:	f005 fec9 	bl	17a52 <lfs_bd_read>
            if (err) {
   11cc0:	4603      	mov	r3, r0
   11cc2:	2800      	cmp	r0, #0
   11cc4:	f040 8081 	bne.w	11dca <lfs_dir_traverse+0x1c2>
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
   11cc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return __builtin_bswap32(a);
   11cca:	ba1b      	rev	r3, r3
   11ccc:	405d      	eors	r5, r3
   11cce:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
   11cd2:	9513      	str	r5, [sp, #76]	; 0x4c
            disk.block = dir->pair[0];
   11cd4:	f8d8 3000 	ldr.w	r3, [r8]
   11cd8:	9314      	str	r3, [sp, #80]	; 0x50
            disk.off = off+sizeof(lfs_tag_t);
   11cda:	1d23      	adds	r3, r4, #4
   11cdc:	9315      	str	r3, [sp, #84]	; 0x54
            off += lfs_tag_dsize(ptag);
   11cde:	46a2      	mov	sl, r4
            buffer = &disk;
   11ce0:	ac14      	add	r4, sp, #80	; 0x50
   11ce2:	e7bc      	b.n	11c5e <lfs_dir_traverse+0x56>
            int filter = lfs_dir_traverse(lfs,
   11ce4:	ab13      	add	r3, sp, #76	; 0x4c
   11ce6:	9308      	str	r3, [sp, #32]
   11ce8:	4b3b      	ldr	r3, [pc, #236]	; (11dd8 <lfs_dir_traverse+0x1d0>)
   11cea:	9307      	str	r3, [sp, #28]
   11cec:	2300      	movs	r3, #0
   11cee:	9306      	str	r3, [sp, #24]
   11cf0:	9305      	str	r3, [sp, #20]
   11cf2:	9304      	str	r3, [sp, #16]
   11cf4:	9303      	str	r3, [sp, #12]
   11cf6:	9302      	str	r3, [sp, #8]
   11cf8:	9701      	str	r7, [sp, #4]
   11cfa:	9600      	str	r6, [sp, #0]
   11cfc:	462b      	mov	r3, r5
   11cfe:	4652      	mov	r2, sl
   11d00:	4641      	mov	r1, r8
   11d02:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11d04:	f7ff ff80 	bl	11c08 <lfs_dir_traverse>
            if (filter < 0) {
   11d08:	1e03      	subs	r3, r0, #0
   11d0a:	db5e      	blt.n	11dca <lfs_dir_traverse+0x1c2>
            if (filter) {
   11d0c:	2b00      	cmp	r3, #0
   11d0e:	d18f      	bne.n	11c30 <lfs_dir_traverse+0x28>
    return (tag & 0x000ffc00) >> 10;
   11d10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11d12:	f3c3 2389 	ubfx	r3, r3, #10, #10
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
   11d16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11d18:	429a      	cmp	r2, r3
   11d1a:	d889      	bhi.n	11c30 <lfs_dir_traverse+0x28>
   11d1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11d1e:	429a      	cmp	r2, r3
   11d20:	d8aa      	bhi.n	11c78 <lfs_dir_traverse+0x70>
   11d22:	e785      	b.n	11c30 <lfs_dir_traverse+0x28>
    return tag & 0x000003ff;
   11d24:	f3c1 0209 	ubfx	r2, r1, #0, #10
            uint16_t fromid = lfs_tag_size(tag);
   11d28:	4610      	mov	r0, r2
    return (tag & 0x000ffc00) >> 10;
   11d2a:	f3c1 2389 	ubfx	r3, r1, #10, #10
                    fromid, fromid+1, toid-fromid+diff,
   11d2e:	1a9b      	subs	r3, r3, r2
            int err = lfs_dir_traverse(lfs,
   11d30:	9928      	ldr	r1, [sp, #160]	; 0xa0
   11d32:	9108      	str	r1, [sp, #32]
   11d34:	9927      	ldr	r1, [sp, #156]	; 0x9c
   11d36:	9107      	str	r1, [sp, #28]
   11d38:	990c      	ldr	r1, [sp, #48]	; 0x30
   11d3a:	440b      	add	r3, r1
   11d3c:	b21b      	sxth	r3, r3
   11d3e:	9306      	str	r3, [sp, #24]
   11d40:	3201      	adds	r2, #1
   11d42:	9205      	str	r2, [sp, #20]
   11d44:	9004      	str	r0, [sp, #16]
   11d46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   11d4a:	9303      	str	r3, [sp, #12]
   11d4c:	4b23      	ldr	r3, [pc, #140]	; (11ddc <lfs_dir_traverse+0x1d4>)
   11d4e:	9302      	str	r3, [sp, #8]
   11d50:	2200      	movs	r2, #0
   11d52:	9201      	str	r2, [sp, #4]
   11d54:	9200      	str	r2, [sp, #0]
   11d56:	f04f 33ff 	mov.w	r3, #4294967295
   11d5a:	4621      	mov	r1, r4
   11d5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11d5e:	f7ff ff53 	bl	11c08 <lfs_dir_traverse>
            if (err) {
   11d62:	4603      	mov	r3, r0
   11d64:	2800      	cmp	r0, #0
   11d66:	f43f af63 	beq.w	11c30 <lfs_dir_traverse+0x28>
   11d6a:	e02e      	b.n	11dca <lfs_dir_traverse+0x1c2>
   11d6c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   11d70:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   11d74:	9511      	str	r5, [sp, #68]	; 0x44
   11d76:	46b2      	mov	sl, r6
   11d78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   11d7a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   11d7c:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   11d80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return tag & 0x000003ff;
   11d82:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   11d86:	4591      	cmp	r9, r2
   11d88:	d217      	bcs.n	11dba <lfs_dir_traverse+0x1b2>
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
   11d8a:	eb09 0149 	add.w	r1, r9, r9, lsl #1
   11d8e:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   11d92:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
   11d96:	f501 7140 	add.w	r1, r1, #768	; 0x300
    return (tag & 0x000ffc00) >> 10;
   11d9a:	f3c3 2389 	ubfx	r3, r3, #10, #10
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
   11d9e:	442b      	add	r3, r5
   11da0:	029b      	lsls	r3, r3, #10
   11da2:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
   11da6:	6891      	ldr	r1, [r2, #8]
   11da8:	6852      	ldr	r2, [r2, #4]
   11daa:	4319      	orrs	r1, r3
   11dac:	4640      	mov	r0, r8
   11dae:	47b0      	blx	r6
                if (err) {
   11db0:	4603      	mov	r3, r0
   11db2:	b950      	cbnz	r0, 11dca <lfs_dir_traverse+0x1c2>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   11db4:	f109 0901 	add.w	r9, r9, #1
   11db8:	e7e2      	b.n	11d80 <lfs_dir_traverse+0x178>
   11dba:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   11dbe:	9d11      	ldr	r5, [sp, #68]	; 0x44
   11dc0:	4656      	mov	r6, sl
   11dc2:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
   11dc6:	e733      	b.n	11c30 <lfs_dir_traverse+0x28>
            return 0;
   11dc8:	2300      	movs	r3, #0
}
   11dca:	4618      	mov	r0, r3
   11dcc:	b017      	add	sp, #92	; 0x5c
   11dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dd2:	bf00      	nop
   11dd4:	7ff00000 	.word	0x7ff00000
   11dd8:	0001155d 	.word	0x0001155d
   11ddc:	600ffc00 	.word	0x600ffc00

00011de0 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
   11de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11de4:	b089      	sub	sp, #36	; 0x24
   11de6:	4607      	mov	r7, r0
   11de8:	468a      	mov	sl, r1
   11dea:	4690      	mov	r8, r2
   11dec:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
   11dee:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
   11df0:	690b      	ldr	r3, [r1, #16]
   11df2:	9307      	str	r3, [sp, #28]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   11df4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
   11df6:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   11df8:	f412 6fe0 	tst.w	r2, #1792	; 0x700
   11dfc:	d010      	beq.n	11e20 <lfs_dir_getslice+0x40>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   11dfe:	6c02      	ldr	r2, [r0, #64]	; 0x40
   11e00:	6809      	ldr	r1, [r1, #0]
   11e02:	4291      	cmp	r1, r2
   11e04:	d01e      	beq.n	11e44 <lfs_dir_getslice+0x64>
   11e06:	6c44      	ldr	r4, [r0, #68]	; 0x44
   11e08:	f8da 0004 	ldr.w	r0, [sl, #4]
   11e0c:	42a0      	cmp	r0, r4
   11e0e:	d01b      	beq.n	11e48 <lfs_dir_getslice+0x68>
   11e10:	4290      	cmp	r0, r2
   11e12:	d01b      	beq.n	11e4c <lfs_dir_getslice+0x6c>
   11e14:	428c      	cmp	r4, r1
   11e16:	d001      	beq.n	11e1c <lfs_dir_getslice+0x3c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   11e18:	2200      	movs	r2, #0
   11e1a:	e002      	b.n	11e22 <lfs_dir_getslice+0x42>
   11e1c:	2201      	movs	r2, #1
   11e1e:	e000      	b.n	11e22 <lfs_dir_getslice+0x42>
   11e20:	2200      	movs	r2, #0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   11e22:	2a00      	cmp	r2, #0
   11e24:	f000 808b 	beq.w	11f3e <lfs_dir_getslice+0x15e>
    return (tag & 0x000ffc00) >> 10;
   11e28:	f3c8 2289 	ubfx	r2, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   11e2c:	2a00      	cmp	r2, #0
   11e2e:	f000 8088 	beq.w	11f42 <lfs_dir_getslice+0x162>
    return (tag & 0x000ffc00) >> 10;
   11e32:	f3c3 2389 	ubfx	r3, r3, #10, #10
   11e36:	f3cb 2289 	ubfx	r2, fp, #10, #10
            lfs_tag_id(gmask) != 0 &&
   11e3a:	429a      	cmp	r2, r3
   11e3c:	f080 8083 	bcs.w	11f46 <lfs_dir_getslice+0x166>
    lfs_stag_t gdiff = 0;
   11e40:	2600      	movs	r6, #0
   11e42:	e00b      	b.n	11e5c <lfs_dir_getslice+0x7c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   11e44:	2201      	movs	r2, #1
   11e46:	e7ec      	b.n	11e22 <lfs_dir_getslice+0x42>
   11e48:	2201      	movs	r2, #1
   11e4a:	e7ea      	b.n	11e22 <lfs_dir_getslice+0x42>
   11e4c:	2201      	movs	r2, #1
   11e4e:	e7e8      	b.n	11e22 <lfs_dir_getslice+0x42>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
   11e50:	ebab 0306 	sub.w	r3, fp, r6
   11e54:	4063      	eors	r3, r4
   11e56:	ea13 0f08 	tst.w	r3, r8
   11e5a:	d04a      	beq.n	11ef2 <lfs_dir_getslice+0x112>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
   11e5c:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
   11e5e:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   11e62:	f1b9 3fff 	cmp.w	r9, #4294967295
   11e66:	bf14      	ite	ne
   11e68:	4623      	movne	r3, r4
   11e6a:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
   11e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   11e70:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
   11e72:	3308      	adds	r3, #8
   11e74:	42ab      	cmp	r3, r5
   11e76:	d868      	bhi.n	11f4a <lfs_dir_getslice+0x16a>
        off -= lfs_tag_dsize(ntag);
   11e78:	1aad      	subs	r5, r5, r2
        int err = lfs_bd_read(lfs,
   11e7a:	9705      	str	r7, [sp, #20]
   11e7c:	2304      	movs	r3, #4
   11e7e:	9303      	str	r3, [sp, #12]
   11e80:	aa07      	add	r2, sp, #28
   11e82:	9202      	str	r2, [sp, #8]
   11e84:	9501      	str	r5, [sp, #4]
   11e86:	f8da 2000 	ldr.w	r2, [sl]
   11e8a:	9200      	str	r2, [sp, #0]
   11e8c:	463a      	mov	r2, r7
   11e8e:	2100      	movs	r1, #0
   11e90:	4638      	mov	r0, r7
   11e92:	f005 fdde 	bl	17a52 <lfs_bd_read>
        if (err) {
   11e96:	4603      	mov	r3, r0
   11e98:	2800      	cmp	r0, #0
   11e9a:	d158      	bne.n	11f4e <lfs_dir_getslice+0x16e>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
   11e9c:	9b07      	ldr	r3, [sp, #28]
   11e9e:	ba1b      	rev	r3, r3
   11ea0:	4063      	eors	r3, r4
   11ea2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   11ea6:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
   11ea8:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
   11eac:	2b00      	cmp	r3, #0
   11eae:	d0cf      	beq.n	11e50 <lfs_dir_getslice+0x70>
    return (tag & 0x70000000) >> 20;
   11eb0:	0d23      	lsrs	r3, r4, #20
   11eb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
        if (lfs_tag_id(gmask) != 0 &&
   11eb6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   11eba:	d1c9      	bne.n	11e50 <lfs_dir_getslice+0x70>
    return (tag & 0x000ffc00) >> 10;
   11ebc:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
   11ec0:	4631      	mov	r1, r6
   11ec2:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
   11ec6:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
   11eca:	4584      	cmp	ip, r0
   11ecc:	d3c0      	bcc.n	11e50 <lfs_dir_getslice+0x70>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
   11ece:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   11ed2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11ed6:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   11eda:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
   11ede:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   11ee2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   11ee6:	42a2      	cmp	r2, r4
   11ee8:	d035      	beq.n	11f56 <lfs_dir_getslice+0x176>
    return (int8_t)lfs_tag_chunk(tag);
   11eea:	b25e      	sxtb	r6, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   11eec:	eb01 2686 	add.w	r6, r1, r6, lsl #10
   11ef0:	e7ae      	b.n	11e50 <lfs_dir_getslice+0x70>
   11ef2:	46b0      	mov	r8, r6
            if (lfs_tag_isdelete(tag)) {
   11ef4:	f1b9 3fff 	cmp.w	r9, #4294967295
   11ef8:	d030      	beq.n	11f5c <lfs_dir_getslice+0x17c>
    return tag & 0x000003ff;
   11efa:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
   11efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11f00:	429e      	cmp	r6, r3
   11f02:	bf28      	it	cs
   11f04:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
   11f06:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11f08:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
   11f0a:	9603      	str	r6, [sp, #12]
   11f0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11f0e:	9202      	str	r2, [sp, #8]
   11f10:	3304      	adds	r3, #4
   11f12:	9301      	str	r3, [sp, #4]
   11f14:	f8da 3000 	ldr.w	r3, [sl]
   11f18:	9300      	str	r3, [sp, #0]
   11f1a:	4633      	mov	r3, r6
   11f1c:	9a05      	ldr	r2, [sp, #20]
   11f1e:	2100      	movs	r1, #0
   11f20:	4638      	mov	r0, r7
   11f22:	f005 fd96 	bl	17a52 <lfs_bd_read>
            if (err) {
   11f26:	4603      	mov	r3, r0
   11f28:	b988      	cbnz	r0, 11f4e <lfs_dir_getslice+0x16e>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
   11f2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11f2c:	1b9a      	subs	r2, r3, r6
   11f2e:	2100      	movs	r1, #0
   11f30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11f32:	1998      	adds	r0, r3, r6
   11f34:	f005 f858 	bl	16fe8 <memset>
            return tag + gdiff;
   11f38:	4643      	mov	r3, r8
   11f3a:	4423      	add	r3, r4
   11f3c:	e007      	b.n	11f4e <lfs_dir_getslice+0x16e>
    lfs_stag_t gdiff = 0;
   11f3e:	2600      	movs	r6, #0
   11f40:	e78c      	b.n	11e5c <lfs_dir_getslice+0x7c>
   11f42:	2600      	movs	r6, #0
   11f44:	e78a      	b.n	11e5c <lfs_dir_getslice+0x7c>
        gdiff -= LFS_MKTAG(0, 1, 0);
   11f46:	4e07      	ldr	r6, [pc, #28]	; (11f64 <lfs_dir_getslice+0x184>)
   11f48:	e788      	b.n	11e5c <lfs_dir_getslice+0x7c>
    return LFS_ERR_NOENT;
   11f4a:	f06f 0301 	mvn.w	r3, #1
}
   11f4e:	4618      	mov	r0, r3
   11f50:	b009      	add	sp, #36	; 0x24
   11f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return LFS_ERR_NOENT;
   11f56:	f06f 0301 	mvn.w	r3, #1
   11f5a:	e7f8      	b.n	11f4e <lfs_dir_getslice+0x16e>
                return LFS_ERR_NOENT;
   11f5c:	f06f 0301 	mvn.w	r3, #1
   11f60:	e7f5      	b.n	11f4e <lfs_dir_getslice+0x16e>
   11f62:	bf00      	nop
   11f64:	fffffc00 	.word	0xfffffc00

00011f68 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
   11f68:	b510      	push	{r4, lr}
   11f6a:	b086      	sub	sp, #24
   11f6c:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
   11f6e:	ab03      	add	r3, sp, #12
   11f70:	9300      	str	r3, [sp, #0]
   11f72:	4b10      	ldr	r3, [pc, #64]	; (11fb4 <lfs_dir_getgstate+0x4c>)
   11f74:	4a10      	ldr	r2, [pc, #64]	; (11fb8 <lfs_dir_getgstate+0x50>)
   11f76:	f005 ff00 	bl	17d7a <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
   11f7a:	2800      	cmp	r0, #0
   11f7c:	db04      	blt.n	11f88 <lfs_dir_getgstate+0x20>
    if (res != LFS_ERR_NOENT) {
   11f7e:	f110 0f02 	cmn.w	r0, #2
   11f82:	d005      	beq.n	11f90 <lfs_dir_getgstate+0x28>
    for (int i = 0; i < 3; i++) {
   11f84:	2300      	movs	r3, #0
   11f86:	e010      	b.n	11faa <lfs_dir_getgstate+0x42>
    if (res < 0 && res != LFS_ERR_NOENT) {
   11f88:	f110 0f02 	cmn.w	r0, #2
   11f8c:	d110      	bne.n	11fb0 <lfs_dir_getgstate+0x48>
   11f8e:	e7f6      	b.n	11f7e <lfs_dir_getgstate+0x16>
    return 0;
   11f90:	2000      	movs	r0, #0
   11f92:	e00d      	b.n	11fb0 <lfs_dir_getgstate+0x48>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   11f94:	aa06      	add	r2, sp, #24
   11f96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   11f9a:	f852 2c0c 	ldr.w	r2, [r2, #-12]
   11f9e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
   11fa2:	4051      	eors	r1, r2
   11fa4:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
   11fa8:	3301      	adds	r3, #1
   11faa:	2b02      	cmp	r3, #2
   11fac:	ddf2      	ble.n	11f94 <lfs_dir_getgstate+0x2c>
    return 0;
   11fae:	2000      	movs	r0, #0
}
   11fb0:	b006      	add	sp, #24
   11fb2:	bd10      	pop	{r4, pc}
   11fb4:	7ff0000c 	.word	0x7ff0000c
   11fb8:	7ff00000 	.word	0x7ff00000

00011fbc <lfs_dir_find>:
        const char **path, uint16_t *id) {
   11fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fc0:	b08d      	sub	sp, #52	; 0x34
   11fc2:	4683      	mov	fp, r0
   11fc4:	4688      	mov	r8, r1
   11fc6:	9207      	str	r2, [sp, #28]
    const char *name = *path;
   11fc8:	6812      	ldr	r2, [r2, #0]
   11fca:	9206      	str	r2, [sp, #24]
    if (id) {
   11fcc:	9305      	str	r3, [sp, #20]
   11fce:	b11b      	cbz	r3, 11fd8 <lfs_dir_find+0x1c>
   11fd0:	461a      	mov	r2, r3
        *id = 0x3ff;
   11fd2:	f240 33ff 	movw	r3, #1023	; 0x3ff
   11fd6:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
   11fd8:	f8db 3020 	ldr.w	r3, [fp, #32]
   11fdc:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
   11fe0:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   11fe4:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
   11fe8:	4e50      	ldr	r6, [pc, #320]	; (1212c <lfs_dir_find+0x170>)
        name += strspn(name, "/");
   11fea:	4c51      	ldr	r4, [pc, #324]	; (12130 <lfs_dir_find+0x174>)
   11fec:	4621      	mov	r1, r4
   11fee:	9d06      	ldr	r5, [sp, #24]
   11ff0:	4628      	mov	r0, r5
   11ff2:	f005 f816 	bl	17022 <strspn>
   11ff6:	462b      	mov	r3, r5
   11ff8:	4403      	add	r3, r0
   11ffa:	4699      	mov	r9, r3
        lfs_size_t namelen = strcspn(name, "/");
   11ffc:	4621      	mov	r1, r4
   11ffe:	4618      	mov	r0, r3
   12000:	f005 f81d 	bl	1703e <strcspn>
   12004:	4682      	mov	sl, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   12006:	2801      	cmp	r0, #1
   12008:	d00b      	beq.n	12022 <lfs_dir_find+0x66>
   1200a:	f1ba 0f02 	cmp.w	sl, #2
   1200e:	d013      	beq.n	12038 <lfs_dir_find+0x7c>
        const char *suffix = name + namelen;
   12010:	eb09 030a 	add.w	r3, r9, sl
   12014:	9306      	str	r3, [sp, #24]
   12016:	461c      	mov	r4, r3
        int depth = 1;
   12018:	2701      	movs	r7, #1
   1201a:	e017      	b.n	1204c <lfs_dir_find+0x90>
   1201c:	46b3      	mov	fp, r6
   1201e:	4606      	mov	r6, r0
   12020:	e7e3      	b.n	11fea <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   12022:	2201      	movs	r2, #1
   12024:	4943      	ldr	r1, [pc, #268]	; (12134 <lfs_dir_find+0x178>)
   12026:	4648      	mov	r0, r9
   12028:	f004 ffa3 	bl	16f72 <memcmp>
   1202c:	2800      	cmp	r0, #0
   1202e:	d1ec      	bne.n	1200a <lfs_dir_find+0x4e>
            name += namelen;
   12030:	eb09 030a 	add.w	r3, r9, sl
   12034:	9306      	str	r3, [sp, #24]
            goto nextname;
   12036:	e7d8      	b.n	11fea <lfs_dir_find+0x2e>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
   12038:	2202      	movs	r2, #2
   1203a:	493f      	ldr	r1, [pc, #252]	; (12138 <lfs_dir_find+0x17c>)
   1203c:	4648      	mov	r0, r9
   1203e:	f004 ff98 	bl	16f72 <memcmp>
   12042:	2800      	cmp	r0, #0
   12044:	d1e4      	bne.n	12010 <lfs_dir_find+0x54>
   12046:	e7f3      	b.n	12030 <lfs_dir_find+0x74>
                depth += 1;
   12048:	3701      	adds	r7, #1
            suffix += sufflen;
   1204a:	442c      	add	r4, r5
            suffix += strspn(suffix, "/");
   1204c:	4d38      	ldr	r5, [pc, #224]	; (12130 <lfs_dir_find+0x174>)
   1204e:	4629      	mov	r1, r5
   12050:	4620      	mov	r0, r4
   12052:	f004 ffe6 	bl	17022 <strspn>
   12056:	4404      	add	r4, r0
            sufflen = strcspn(suffix, "/");
   12058:	4629      	mov	r1, r5
   1205a:	4620      	mov	r0, r4
   1205c:	f004 ffef 	bl	1703e <strcspn>
            if (sufflen == 0) {
   12060:	4605      	mov	r5, r0
   12062:	b168      	cbz	r0, 12080 <lfs_dir_find+0xc4>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
   12064:	2802      	cmp	r0, #2
   12066:	d1ef      	bne.n	12048 <lfs_dir_find+0x8c>
   12068:	2202      	movs	r2, #2
   1206a:	4933      	ldr	r1, [pc, #204]	; (12138 <lfs_dir_find+0x17c>)
   1206c:	4620      	mov	r0, r4
   1206e:	f004 ff80 	bl	16f72 <memcmp>
   12072:	2800      	cmp	r0, #0
   12074:	d1e8      	bne.n	12048 <lfs_dir_find+0x8c>
                if (depth == 0) {
   12076:	3f01      	subs	r7, #1
   12078:	d1e7      	bne.n	1204a <lfs_dir_find+0x8e>
                    name = suffix + sufflen;
   1207a:	1963      	adds	r3, r4, r5
   1207c:	9306      	str	r3, [sp, #24]
                    goto nextname;
   1207e:	e7b4      	b.n	11fea <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
   12080:	f899 3000 	ldrb.w	r3, [r9]
   12084:	2b00      	cmp	r3, #0
   12086:	d04c      	beq.n	12122 <lfs_dir_find+0x166>
        *path = name;
   12088:	9b07      	ldr	r3, [sp, #28]
   1208a:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
   1208e:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
   12092:	2b02      	cmp	r3, #2
   12094:	d141      	bne.n	1211a <lfs_dir_find+0x15e>
    return (tag & 0x000ffc00) >> 10;
   12096:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
   1209a:	f240 33ff 	movw	r3, #1023	; 0x3ff
   1209e:	429e      	cmp	r6, r3
   120a0:	d103      	bne.n	120aa <lfs_dir_find+0xee>
   120a2:	464c      	mov	r4, r9
   120a4:	4655      	mov	r5, sl
   120a6:	465e      	mov	r6, fp
   120a8:	e02a      	b.n	12100 <lfs_dir_find+0x144>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
   120aa:	02b6      	lsls	r6, r6, #10
   120ac:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   120b0:	9300      	str	r3, [sp, #0]
   120b2:	f046 5300 	orr.w	r3, r6, #536870912	; 0x20000000
   120b6:	f043 0308 	orr.w	r3, r3, #8
   120ba:	4a20      	ldr	r2, [pc, #128]	; (1213c <lfs_dir_find+0x180>)
   120bc:	4641      	mov	r1, r8
   120be:	4658      	mov	r0, fp
   120c0:	f005 fe5b 	bl	17d7a <lfs_dir_get>
            if (res < 0) {
   120c4:	1e06      	subs	r6, r0, #0
   120c6:	db2c      	blt.n	12122 <lfs_dir_find+0x166>
   120c8:	464c      	mov	r4, r9
   120ca:	4655      	mov	r5, sl
   120cc:	465e      	mov	r6, fp
   120ce:	e017      	b.n	12100 <lfs_dir_find+0x144>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   120d0:	9b05      	ldr	r3, [sp, #20]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
   120d2:	9609      	str	r6, [sp, #36]	; 0x24
   120d4:	940a      	str	r4, [sp, #40]	; 0x28
   120d6:	950b      	str	r5, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   120d8:	aa09      	add	r2, sp, #36	; 0x24
   120da:	9203      	str	r2, [sp, #12]
   120dc:	4a18      	ldr	r2, [pc, #96]	; (12140 <lfs_dir_find+0x184>)
   120de:	9202      	str	r2, [sp, #8]
   120e0:	9301      	str	r3, [sp, #4]
   120e2:	9500      	str	r5, [sp, #0]
   120e4:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
   120e8:	463a      	mov	r2, r7
   120ea:	4641      	mov	r1, r8
   120ec:	4630      	mov	r0, r6
   120ee:	f7ff fa99 	bl	11624 <lfs_dir_fetchmatch>
            if (tag < 0) {
   120f2:	2800      	cmp	r0, #0
   120f4:	db14      	blt.n	12120 <lfs_dir_find+0x164>
            if (tag) {
   120f6:	2800      	cmp	r0, #0
   120f8:	d190      	bne.n	1201c <lfs_dir_find+0x60>
            if (!dir->split) {
   120fa:	f898 3017 	ldrb.w	r3, [r8, #23]
   120fe:	b14b      	cbz	r3, 12114 <lfs_dir_find+0x158>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   12100:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
   12104:	212f      	movs	r1, #47	; 0x2f
   12106:	4620      	mov	r0, r4
   12108:	f004 fefa 	bl	16f00 <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   1210c:	2800      	cmp	r0, #0
   1210e:	d0df      	beq.n	120d0 <lfs_dir_find+0x114>
   12110:	2300      	movs	r3, #0
   12112:	e7de      	b.n	120d2 <lfs_dir_find+0x116>
                return LFS_ERR_NOENT;
   12114:	f06f 0601 	mvn.w	r6, #1
   12118:	e003      	b.n	12122 <lfs_dir_find+0x166>
            return LFS_ERR_NOTDIR;
   1211a:	f06f 0613 	mvn.w	r6, #19
   1211e:	e000      	b.n	12122 <lfs_dir_find+0x166>
   12120:	4606      	mov	r6, r0
}
   12122:	4630      	mov	r0, r6
   12124:	b00d      	add	sp, #52	; 0x34
   12126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1212a:	bf00      	nop
   1212c:	002ffc00 	.word	0x002ffc00
   12130:	00019fd8 	.word	0x00019fd8
   12134:	00019ff8 	.word	0x00019ff8
   12138:	00019ffc 	.word	0x00019ffc
   1213c:	700ffc00 	.word	0x700ffc00
   12140:	00017ca3 	.word	0x00017ca3

00012144 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
   12144:	b5f0      	push	{r4, r5, r6, r7, lr}
   12146:	b085      	sub	sp, #20
   12148:	461d      	mov	r5, r3
    if (id == 0x3ff) {
   1214a:	f240 33ff 	movw	r3, #1023	; 0x3ff
   1214e:	429a      	cmp	r2, r3
   12150:	d02c      	beq.n	121ac <lfs_dir_getinfo+0x68>
   12152:	4604      	mov	r4, r0
   12154:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
   12156:	0297      	lsls	r7, r2, #10
   12158:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1215a:	3301      	adds	r3, #1
   1215c:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
   12160:	9100      	str	r1, [sp, #0]
   12162:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   12166:	4a1b      	ldr	r2, [pc, #108]	; (121d4 <lfs_dir_getinfo+0x90>)
   12168:	4631      	mov	r1, r6
   1216a:	f005 fe06 	bl	17d7a <lfs_dir_get>
    if (tag < 0) {
   1216e:	2800      	cmp	r0, #0
   12170:	db24      	blt.n	121bc <lfs_dir_getinfo+0x78>
    return (tag & 0x7ff00000) >> 20;
   12172:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
   12176:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   12178:	ab02      	add	r3, sp, #8
   1217a:	9300      	str	r3, [sp, #0]
   1217c:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
   12180:	f043 0308 	orr.w	r3, r3, #8
   12184:	4a14      	ldr	r2, [pc, #80]	; (121d8 <lfs_dir_getinfo+0x94>)
   12186:	4631      	mov	r1, r6
   12188:	4620      	mov	r0, r4
   1218a:	f005 fdf6 	bl	17d7a <lfs_dir_get>
    if (tag < 0) {
   1218e:	2800      	cmp	r0, #0
   12190:	db14      	blt.n	121bc <lfs_dir_getinfo+0x78>
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   12192:	4602      	mov	r2, r0
    return (tag & 0x7ff00000) >> 20;
   12194:	f3c0 500a 	ubfx	r0, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   12198:	f240 2302 	movw	r3, #514	; 0x202
   1219c:	4298      	cmp	r0, r3
   1219e:	d00f      	beq.n	121c0 <lfs_dir_getinfo+0x7c>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   121a0:	f240 2301 	movw	r3, #513	; 0x201
   121a4:	4298      	cmp	r0, r3
   121a6:	d00f      	beq.n	121c8 <lfs_dir_getinfo+0x84>
    return 0;
   121a8:	2000      	movs	r0, #0
   121aa:	e007      	b.n	121bc <lfs_dir_getinfo+0x78>
        strcpy(info->name, "/");
   121ac:	490b      	ldr	r1, [pc, #44]	; (121dc <lfs_dir_getinfo+0x98>)
   121ae:	f105 0008 	add.w	r0, r5, #8
   121b2:	f004 fe82 	bl	16eba <strcpy>
        info->type = LFS_TYPE_DIR;
   121b6:	2302      	movs	r3, #2
   121b8:	702b      	strb	r3, [r5, #0]
        return 0;
   121ba:	2000      	movs	r0, #0
}
   121bc:	b005      	add	sp, #20
   121be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
   121c0:	9b03      	ldr	r3, [sp, #12]
   121c2:	606b      	str	r3, [r5, #4]
    return 0;
   121c4:	2000      	movs	r0, #0
   121c6:	e7f9      	b.n	121bc <lfs_dir_getinfo+0x78>
    return tag & 0x000003ff;
   121c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
        info->size = lfs_tag_size(tag);
   121cc:	606a      	str	r2, [r5, #4]
    return 0;
   121ce:	2000      	movs	r0, #0
   121d0:	e7f4      	b.n	121bc <lfs_dir_getinfo+0x78>
   121d2:	bf00      	nop
   121d4:	780ffc00 	.word	0x780ffc00
   121d8:	700ffc00 	.word	0x700ffc00
   121dc:	00019fd8 	.word	0x00019fd8

000121e0 <lfs_dir_open>:
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
   121e0:	b570      	push	{r4, r5, r6, lr}
   121e2:	b086      	sub	sp, #24
   121e4:	4605      	mov	r5, r0
   121e6:	460c      	mov	r4, r1
   121e8:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
   121ea:	f101 0608 	add.w	r6, r1, #8
   121ee:	2300      	movs	r3, #0
   121f0:	aa03      	add	r2, sp, #12
   121f2:	4631      	mov	r1, r6
   121f4:	f7ff fee2 	bl	11fbc <lfs_dir_find>
    if (tag < 0) {
   121f8:	2800      	cmp	r0, #0
   121fa:	db1f      	blt.n	1223c <lfs_dir_open+0x5c>
    return (tag & 0x7ff00000) >> 20;
   121fc:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
   12200:	2b02      	cmp	r3, #2
   12202:	d12c      	bne.n	1225e <lfs_dir_open+0x7e>
    return (tag & 0x000ffc00) >> 10;
   12204:	f3c0 2089 	ubfx	r0, r0, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
   12208:	f240 33ff 	movw	r3, #1023	; 0x3ff
   1220c:	4298      	cmp	r0, r3
   1220e:	d117      	bne.n	12240 <lfs_dir_open+0x60>
        pair[0] = lfs->root[0];
   12210:	6a2b      	ldr	r3, [r5, #32]
   12212:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
   12214:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   12216:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
   12218:	aa04      	add	r2, sp, #16
   1221a:	4631      	mov	r1, r6
   1221c:	4628      	mov	r0, r5
   1221e:	f005 fd60 	bl	17ce2 <lfs_dir_fetch>
    if (err) {
   12222:	b958      	cbnz	r0, 1223c <lfs_dir_open+0x5c>
    dir->head[0] = dir->m.pair[0];
   12224:	68a3      	ldr	r3, [r4, #8]
   12226:	62e3      	str	r3, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
   12228:	68e3      	ldr	r3, [r4, #12]
   1222a:	6323      	str	r3, [r4, #48]	; 0x30
    dir->id = 0;
   1222c:	2300      	movs	r3, #0
   1222e:	80a3      	strh	r3, [r4, #4]
    dir->pos = 0;
   12230:	62a3      	str	r3, [r4, #40]	; 0x28
    dir->type = LFS_TYPE_DIR;
   12232:	2302      	movs	r3, #2
   12234:	71a3      	strb	r3, [r4, #6]
    dir->next = (lfs_dir_t*)lfs->mlist;
   12236:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12238:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)dir;
   1223a:	62ac      	str	r4, [r5, #40]	; 0x28
}
   1223c:	b006      	add	sp, #24
   1223e:	bd70      	pop	{r4, r5, r6, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
   12240:	0283      	lsls	r3, r0, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
   12242:	aa04      	add	r2, sp, #16
   12244:	9200      	str	r2, [sp, #0]
   12246:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1224a:	f043 0308 	orr.w	r3, r3, #8
   1224e:	4a05      	ldr	r2, [pc, #20]	; (12264 <lfs_dir_open+0x84>)
   12250:	4631      	mov	r1, r6
   12252:	4628      	mov	r0, r5
   12254:	f005 fd91 	bl	17d7a <lfs_dir_get>
        if (res < 0) {
   12258:	2800      	cmp	r0, #0
   1225a:	dadd      	bge.n	12218 <lfs_dir_open+0x38>
   1225c:	e7ee      	b.n	1223c <lfs_dir_open+0x5c>
        return LFS_ERR_NOTDIR;
   1225e:	f06f 0013 	mvn.w	r0, #19
   12262:	e7eb      	b.n	1223c <lfs_dir_open+0x5c>
   12264:	700ffc00 	.word	0x700ffc00

00012268 <lfs_dir_read>:
int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
   12268:	b570      	push	{r4, r5, r6, lr}
   1226a:	4605      	mov	r5, r0
   1226c:	460c      	mov	r4, r1
   1226e:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
   12270:	f44f 7284 	mov.w	r2, #264	; 0x108
   12274:	2100      	movs	r1, #0
   12276:	4630      	mov	r0, r6
   12278:	f004 feb6 	bl	16fe8 <memset>
    if (dir->pos == 0) {
   1227c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1227e:	b16b      	cbz	r3, 1229c <lfs_dir_read+0x34>
    } else if (dir->pos == 1) {
   12280:	2b01      	cmp	r3, #1
   12282:	d11d      	bne.n	122c0 <lfs_dir_read+0x58>
        info->type = LFS_TYPE_DIR;
   12284:	4630      	mov	r0, r6
   12286:	2302      	movs	r3, #2
   12288:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, "..");
   1228c:	4920      	ldr	r1, [pc, #128]	; (12310 <lfs_dir_read+0xa8>)
   1228e:	f004 fe14 	bl	16eba <strcpy>
        dir->pos += 1;
   12292:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12294:	3301      	adds	r3, #1
   12296:	62a3      	str	r3, [r4, #40]	; 0x28
        return true;
   12298:	2101      	movs	r1, #1
   1229a:	e034      	b.n	12306 <lfs_dir_read+0x9e>
        info->type = LFS_TYPE_DIR;
   1229c:	4630      	mov	r0, r6
   1229e:	2302      	movs	r3, #2
   122a0:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, ".");
   122a4:	491b      	ldr	r1, [pc, #108]	; (12314 <lfs_dir_read+0xac>)
   122a6:	f004 fe08 	bl	16eba <strcpy>
        dir->pos += 1;
   122aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   122ac:	3301      	adds	r3, #1
   122ae:	62a3      	str	r3, [r4, #40]	; 0x28
        return true;
   122b0:	2101      	movs	r1, #1
   122b2:	e028      	b.n	12306 <lfs_dir_read+0x9e>
        dir->id += 1;
   122b4:	88a3      	ldrh	r3, [r4, #4]
   122b6:	3301      	adds	r3, #1
   122b8:	80a3      	strh	r3, [r4, #4]
        if (err != LFS_ERR_NOENT) {
   122ba:	f111 0f02 	cmn.w	r1, #2
   122be:	d11e      	bne.n	122fe <lfs_dir_read+0x96>
        if (dir->id == dir->m.count) {
   122c0:	88a2      	ldrh	r2, [r4, #4]
   122c2:	8ba3      	ldrh	r3, [r4, #28]
   122c4:	429a      	cmp	r2, r3
   122c6:	d10c      	bne.n	122e2 <lfs_dir_read+0x7a>
            if (!dir->m.split) {
   122c8:	7fe3      	ldrb	r3, [r4, #31]
   122ca:	b1f3      	cbz	r3, 1230a <lfs_dir_read+0xa2>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
   122cc:	f104 0220 	add.w	r2, r4, #32
   122d0:	f104 0108 	add.w	r1, r4, #8
   122d4:	4628      	mov	r0, r5
   122d6:	f005 fd04 	bl	17ce2 <lfs_dir_fetch>
            if (err) {
   122da:	4601      	mov	r1, r0
   122dc:	b998      	cbnz	r0, 12306 <lfs_dir_read+0x9e>
            dir->id = 0;
   122de:	2300      	movs	r3, #0
   122e0:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
   122e2:	4633      	mov	r3, r6
   122e4:	88a2      	ldrh	r2, [r4, #4]
   122e6:	f104 0108 	add.w	r1, r4, #8
   122ea:	4628      	mov	r0, r5
   122ec:	f7ff ff2a 	bl	12144 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
   122f0:	4601      	mov	r1, r0
   122f2:	2800      	cmp	r0, #0
   122f4:	d0de      	beq.n	122b4 <lfs_dir_read+0x4c>
   122f6:	f110 0f02 	cmn.w	r0, #2
   122fa:	d0db      	beq.n	122b4 <lfs_dir_read+0x4c>
   122fc:	e003      	b.n	12306 <lfs_dir_read+0x9e>
    dir->pos += 1;
   122fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12300:	3301      	adds	r3, #1
   12302:	62a3      	str	r3, [r4, #40]	; 0x28
    return true;
   12304:	2101      	movs	r1, #1
}
   12306:	4608      	mov	r0, r1
   12308:	bd70      	pop	{r4, r5, r6, pc}
                return false;
   1230a:	2100      	movs	r1, #0
   1230c:	e7fb      	b.n	12306 <lfs_dir_read+0x9e>
   1230e:	bf00      	nop
   12310:	00019ffc 	.word	0x00019ffc
   12314:	00019ff8 	.word	0x00019ff8

00012318 <lfs_mount>:
int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
   12318:	b570      	push	{r4, r5, r6, lr}
   1231a:	b09a      	sub	sp, #104	; 0x68
   1231c:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
   1231e:	f005 ffe3 	bl	182e8 <lfs_init>
    if (err) {
   12322:	4606      	mov	r6, r0
   12324:	2800      	cmp	r0, #0
   12326:	f040 80eb 	bne.w	12500 <lfs_mount+0x1e8>
    lfs_mdir_t dir = {.tail = {0, 1}};
   1232a:	2500      	movs	r5, #0
   1232c:	950f      	str	r5, [sp, #60]	; 0x3c
   1232e:	9510      	str	r5, [sp, #64]	; 0x40
   12330:	9511      	str	r5, [sp, #68]	; 0x44
   12332:	9512      	str	r5, [sp, #72]	; 0x48
   12334:	9513      	str	r5, [sp, #76]	; 0x4c
   12336:	9514      	str	r5, [sp, #80]	; 0x50
   12338:	9515      	str	r5, [sp, #84]	; 0x54
   1233a:	2301      	movs	r3, #1
   1233c:	9316      	str	r3, [sp, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
   1233e:	e07e      	b.n	1243e <lfs_mount+0x126>
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
   12340:	f04f 0300 	mov.w	r3, #0
   12344:	2101      	movs	r1, #1
   12346:	f361 0302 	bfi	r3, r1, #0, #3
   1234a:	f36f 03c5 	bfc	r3, #3, #3
   1234e:	4988      	ldr	r1, [pc, #544]	; (12570 <lfs_mount+0x258>)
   12350:	4d88      	ldr	r5, [pc, #544]	; (12574 <lfs_mount+0x25c>)
   12352:	1b49      	subs	r1, r1, r5
   12354:	f3c1 01c9 	ubfx	r1, r1, #3, #10
   12358:	f361 138f 	bfi	r3, r1, #6, #10
   1235c:	4986      	ldr	r1, [pc, #536]	; (12578 <lfs_mount+0x260>)
   1235e:	9105      	str	r1, [sp, #20]
   12360:	f640 6198 	movw	r1, #3736	; 0xe98
   12364:	9106      	str	r1, [sp, #24]
   12366:	9007      	str	r0, [sp, #28]
   12368:	b292      	uxth	r2, r2
   1236a:	9208      	str	r2, [sp, #32]
   1236c:	2204      	movs	r2, #4
   1236e:	a905      	add	r1, sp, #20
   12370:	4882      	ldr	r0, [pc, #520]	; (1257c <lfs_mount+0x264>)
   12372:	f7fb fd4f 	bl	de14 <log_n>
                err = LFS_ERR_INVAL;
   12376:	f06f 0615 	mvn.w	r6, #21
                goto cleanup;
   1237a:	e0be      	b.n	124fa <lfs_mount+0x1e2>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
   1237c:	f04f 0300 	mov.w	r3, #0
   12380:	2001      	movs	r0, #1
   12382:	f360 0302 	bfi	r3, r0, #0, #3
   12386:	f36f 03c5 	bfc	r3, #3, #3
   1238a:	4879      	ldr	r0, [pc, #484]	; (12570 <lfs_mount+0x258>)
   1238c:	4d79      	ldr	r5, [pc, #484]	; (12574 <lfs_mount+0x25c>)
   1238e:	1b40      	subs	r0, r0, r5
   12390:	f3c0 00c9 	ubfx	r0, r0, #3, #10
   12394:	f360 138f 	bfi	r3, r0, #6, #10
   12398:	4877      	ldr	r0, [pc, #476]	; (12578 <lfs_mount+0x260>)
   1239a:	9005      	str	r0, [sp, #20]
   1239c:	f640 60a1 	movw	r0, #3745	; 0xea1
   123a0:	9006      	str	r0, [sp, #24]
   123a2:	9207      	str	r2, [sp, #28]
   123a4:	9108      	str	r1, [sp, #32]
   123a6:	2204      	movs	r2, #4
   123a8:	a905      	add	r1, sp, #20
   123aa:	4875      	ldr	r0, [pc, #468]	; (12580 <lfs_mount+0x268>)
   123ac:	f7fb fd32 	bl	de14 <log_n>
                    err = LFS_ERR_INVAL;
   123b0:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
   123b4:	e0a1      	b.n	124fa <lfs_mount+0x1e2>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
   123b6:	f04f 0300 	mov.w	r3, #0
   123ba:	2001      	movs	r0, #1
   123bc:	f360 0302 	bfi	r3, r0, #0, #3
   123c0:	f36f 03c5 	bfc	r3, #3, #3
   123c4:	486a      	ldr	r0, [pc, #424]	; (12570 <lfs_mount+0x258>)
   123c6:	4d6b      	ldr	r5, [pc, #428]	; (12574 <lfs_mount+0x25c>)
   123c8:	1b40      	subs	r0, r0, r5
   123ca:	f3c0 00c9 	ubfx	r0, r0, #3, #10
   123ce:	f360 138f 	bfi	r3, r0, #6, #10
   123d2:	4869      	ldr	r0, [pc, #420]	; (12578 <lfs_mount+0x260>)
   123d4:	9005      	str	r0, [sp, #20]
   123d6:	f640 60ac 	movw	r0, #3756	; 0xeac
   123da:	9006      	str	r0, [sp, #24]
   123dc:	9207      	str	r2, [sp, #28]
   123de:	9108      	str	r1, [sp, #32]
   123e0:	2204      	movs	r2, #4
   123e2:	a905      	add	r1, sp, #20
   123e4:	4867      	ldr	r0, [pc, #412]	; (12584 <lfs_mount+0x26c>)
   123e6:	f7fb fd15 	bl	de14 <log_n>
                    err = LFS_ERR_INVAL;
   123ea:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
   123ee:	e084      	b.n	124fa <lfs_mount+0x1e2>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
   123f0:	f04f 0300 	mov.w	r3, #0
   123f4:	2001      	movs	r0, #1
   123f6:	f360 0302 	bfi	r3, r0, #0, #3
   123fa:	f36f 03c5 	bfc	r3, #3, #3
   123fe:	485c      	ldr	r0, [pc, #368]	; (12570 <lfs_mount+0x258>)
   12400:	4d5c      	ldr	r5, [pc, #368]	; (12574 <lfs_mount+0x25c>)
   12402:	1b40      	subs	r0, r0, r5
   12404:	f3c0 00c9 	ubfx	r0, r0, #3, #10
   12408:	f360 138f 	bfi	r3, r0, #6, #10
   1240c:	485a      	ldr	r0, [pc, #360]	; (12578 <lfs_mount+0x260>)
   1240e:	9005      	str	r0, [sp, #20]
   12410:	f640 60b7 	movw	r0, #3767	; 0xeb7
   12414:	9006      	str	r0, [sp, #24]
   12416:	9207      	str	r2, [sp, #28]
   12418:	9108      	str	r1, [sp, #32]
   1241a:	2204      	movs	r2, #4
   1241c:	a905      	add	r1, sp, #20
   1241e:	485a      	ldr	r0, [pc, #360]	; (12588 <lfs_mount+0x270>)
   12420:	f7fb fcf8 	bl	de14 <log_n>
                    err = LFS_ERR_INVAL;
   12424:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
   12428:	e067      	b.n	124fa <lfs_mount+0x1e2>
                err = tag;
   1242a:	4606      	mov	r6, r0
   1242c:	e065      	b.n	124fa <lfs_mount+0x1e2>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
   1242e:	f104 0230 	add.w	r2, r4, #48	; 0x30
   12432:	a90f      	add	r1, sp, #60	; 0x3c
   12434:	4620      	mov	r0, r4
   12436:	f7ff fd97 	bl	11f68 <lfs_dir_getgstate>
        if (err) {
   1243a:	2800      	cmp	r0, #0
   1243c:	d165      	bne.n	1250a <lfs_mount+0x1f2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   1243e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   12440:	f1b3 3fff 	cmp.w	r3, #4294967295
   12444:	d065      	beq.n	12512 <lfs_mount+0x1fa>
   12446:	9b16      	ldr	r3, [sp, #88]	; 0x58
   12448:	f1b3 3fff 	cmp.w	r3, #4294967295
   1244c:	d05f      	beq.n	1250e <lfs_mount+0x1f6>
   1244e:	4633      	mov	r3, r6
    while (!lfs_pair_isnull(dir.tail)) {
   12450:	f013 0f01 	tst.w	r3, #1
   12454:	d15f      	bne.n	12516 <lfs_mount+0x1fe>
        if (cycle >= lfs->cfg->block_count/2) {
   12456:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   12458:	6a1b      	ldr	r3, [r3, #32]
   1245a:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
   1245e:	d24a      	bcs.n	124f6 <lfs_mount+0x1de>
        cycle += 1;
   12460:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   12462:	9417      	str	r4, [sp, #92]	; 0x5c
   12464:	4b49      	ldr	r3, [pc, #292]	; (1258c <lfs_mount+0x274>)
   12466:	9318      	str	r3, [sp, #96]	; 0x60
   12468:	2308      	movs	r3, #8
   1246a:	9319      	str	r3, [sp, #100]	; 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   1246c:	ab17      	add	r3, sp, #92	; 0x5c
   1246e:	9303      	str	r3, [sp, #12]
   12470:	4b47      	ldr	r3, [pc, #284]	; (12590 <lfs_mount+0x278>)
   12472:	9302      	str	r3, [sp, #8]
   12474:	2300      	movs	r3, #0
   12476:	9301      	str	r3, [sp, #4]
   12478:	4b46      	ldr	r3, [pc, #280]	; (12594 <lfs_mount+0x27c>)
   1247a:	9300      	str	r3, [sp, #0]
   1247c:	4b46      	ldr	r3, [pc, #280]	; (12598 <lfs_mount+0x280>)
   1247e:	aa15      	add	r2, sp, #84	; 0x54
   12480:	a90f      	add	r1, sp, #60	; 0x3c
   12482:	4620      	mov	r0, r4
   12484:	f7ff f8ce 	bl	11624 <lfs_dir_fetchmatch>
        if (tag < 0) {
   12488:	2800      	cmp	r0, #0
   1248a:	db3c      	blt.n	12506 <lfs_mount+0x1ee>
        if (tag && !lfs_tag_isdelete(tag)) {
   1248c:	2800      	cmp	r0, #0
   1248e:	d0ce      	beq.n	1242e <lfs_mount+0x116>
    return ((int32_t)(tag << 22) >> 22) == -1;
   12490:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
   12494:	f1b0 3fff 	cmp.w	r0, #4294967295
   12498:	d0c9      	beq.n	1242e <lfs_mount+0x116>
            lfs->root[0] = dir.pair[0];
   1249a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1249c:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
   1249e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   124a0:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   124a2:	ab09      	add	r3, sp, #36	; 0x24
   124a4:	9300      	str	r3, [sp, #0]
   124a6:	4b3d      	ldr	r3, [pc, #244]	; (1259c <lfs_mount+0x284>)
   124a8:	4a3b      	ldr	r2, [pc, #236]	; (12598 <lfs_mount+0x280>)
   124aa:	a90f      	add	r1, sp, #60	; 0x3c
   124ac:	4620      	mov	r0, r4
   124ae:	f005 fc64 	bl	17d7a <lfs_dir_get>
            if (tag < 0) {
   124b2:	2800      	cmp	r0, #0
   124b4:	dbb9      	blt.n	1242a <lfs_mount+0x112>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
   124b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   124b8:	0c10      	lsrs	r0, r2, #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
   124ba:	b291      	uxth	r1, r2
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
   124bc:	2802      	cmp	r0, #2
   124be:	f47f af3f 	bne.w	12340 <lfs_mount+0x28>
   124c2:	2900      	cmp	r1, #0
   124c4:	f47f af3c 	bne.w	12340 <lfs_mount+0x28>
            if (superblock.name_max) {
   124c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   124ca:	b122      	cbz	r2, 124d6 <lfs_mount+0x1be>
                if (superblock.name_max > lfs->name_max) {
   124cc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   124ce:	428a      	cmp	r2, r1
   124d0:	f63f af54 	bhi.w	1237c <lfs_mount+0x64>
                lfs->name_max = superblock.name_max;
   124d4:	66e2      	str	r2, [r4, #108]	; 0x6c
            if (superblock.file_max) {
   124d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   124d8:	b122      	cbz	r2, 124e4 <lfs_mount+0x1cc>
                if (superblock.file_max > lfs->file_max) {
   124da:	6f21      	ldr	r1, [r4, #112]	; 0x70
   124dc:	428a      	cmp	r2, r1
   124de:	f63f af6a 	bhi.w	123b6 <lfs_mount+0x9e>
                lfs->file_max = superblock.file_max;
   124e2:	6722      	str	r2, [r4, #112]	; 0x70
            if (superblock.attr_max) {
   124e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   124e6:	2a00      	cmp	r2, #0
   124e8:	d0a1      	beq.n	1242e <lfs_mount+0x116>
                if (superblock.attr_max > lfs->attr_max) {
   124ea:	6f61      	ldr	r1, [r4, #116]	; 0x74
   124ec:	428a      	cmp	r2, r1
   124ee:	f63f af7f 	bhi.w	123f0 <lfs_mount+0xd8>
                lfs->attr_max = superblock.attr_max;
   124f2:	6762      	str	r2, [r4, #116]	; 0x74
   124f4:	e79b      	b.n	1242e <lfs_mount+0x116>
            err = LFS_ERR_CORRUPT;
   124f6:	f06f 0653 	mvn.w	r6, #83	; 0x53
    lfs_unmount(lfs);
   124fa:	4620      	mov	r0, r4
   124fc:	f006 f834 	bl	18568 <lfs_unmount>
}
   12500:	4630      	mov	r0, r6
   12502:	b01a      	add	sp, #104	; 0x68
   12504:	bd70      	pop	{r4, r5, r6, pc}
            err = tag;
   12506:	4606      	mov	r6, r0
   12508:	e7f7      	b.n	124fa <lfs_mount+0x1e2>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
   1250a:	4606      	mov	r6, r0
   1250c:	e7f5      	b.n	124fa <lfs_mount+0x1e2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   1250e:	2301      	movs	r3, #1
   12510:	e79e      	b.n	12450 <lfs_mount+0x138>
   12512:	2301      	movs	r3, #1
   12514:	e79c      	b.n	12450 <lfs_mount+0x138>
   12516:	6a23      	ldr	r3, [r4, #32]
   12518:	f1b3 3fff 	cmp.w	r3, #4294967295
   1251c:	d013      	beq.n	12546 <lfs_mount+0x22e>
   1251e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12520:	f1b3 3fff 	cmp.w	r3, #4294967295
   12524:	d00d      	beq.n	12542 <lfs_mount+0x22a>
   12526:	4633      	mov	r3, r6
    if (lfs_pair_isnull(lfs->root)) {
   12528:	f013 0f01 	tst.w	r3, #1
   1252c:	d11c      	bne.n	12568 <lfs_mount+0x250>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
   1252e:	f104 0130 	add.w	r1, r4, #48	; 0x30
    for (int i = 0; i < 3; i++) {
   12532:	4633      	mov	r3, r6
   12534:	2b02      	cmp	r3, #2
   12536:	dc08      	bgt.n	1254a <lfs_mount+0x232>
        if (((uint32_t*)a)[i] != 0) {
   12538:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   1253c:	b92a      	cbnz	r2, 1254a <lfs_mount+0x232>
    for (int i = 0; i < 3; i++) {
   1253e:	3301      	adds	r3, #1
   12540:	e7f8      	b.n	12534 <lfs_mount+0x21c>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   12542:	2301      	movs	r3, #1
   12544:	e7f0      	b.n	12528 <lfs_mount+0x210>
   12546:	2301      	movs	r3, #1
   12548:	e7ee      	b.n	12528 <lfs_mount+0x210>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
   1254a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1254c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   12550:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
   12552:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   12556:	f104 0230 	add.w	r2, r4, #48	; 0x30
   1255a:	ca07      	ldmia	r2, {r0, r1, r2}
   1255c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs_alloc_reset(lfs);
   12560:	4620      	mov	r0, r4
   12562:	f005 fa47 	bl	179f4 <lfs_alloc_reset>
    return 0;
   12566:	e7cb      	b.n	12500 <lfs_mount+0x1e8>
        err = LFS_ERR_INVAL;
   12568:	f06f 0615 	mvn.w	r6, #21
   1256c:	e7c5      	b.n	124fa <lfs_mount+0x1e2>
   1256e:	bf00      	nop
   12570:	00019584 	.word	0x00019584
   12574:	00019574 	.word	0x00019574
   12578:	0001a3dc 	.word	0x0001a3dc
   1257c:	0001a430 	.word	0x0001a430
   12580:	0001a450 	.word	0x0001a450
   12584:	0001a478 	.word	0x0001a478
   12588:	0001a4a0 	.word	0x0001a4a0
   1258c:	0001a294 	.word	0x0001a294
   12590:	00017ca3 	.word	0x00017ca3
   12594:	0ff00008 	.word	0x0ff00008
   12598:	7ffffc00 	.word	0x7ffffc00
   1259c:	20100018 	.word	0x20100018

000125a0 <lfs_fs_traverseraw>:
        bool includeorphans) {
   125a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125a4:	b08f      	sub	sp, #60	; 0x3c
   125a6:	4606      	mov	r6, r0
   125a8:	460f      	mov	r7, r1
   125aa:	4690      	mov	r8, r2
   125ac:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
   125ae:	2500      	movs	r5, #0
   125b0:	9506      	str	r5, [sp, #24]
   125b2:	9507      	str	r5, [sp, #28]
   125b4:	9508      	str	r5, [sp, #32]
   125b6:	9509      	str	r5, [sp, #36]	; 0x24
   125b8:	950a      	str	r5, [sp, #40]	; 0x28
   125ba:	950b      	str	r5, [sp, #44]	; 0x2c
   125bc:	950c      	str	r5, [sp, #48]	; 0x30
   125be:	2301      	movs	r3, #1
   125c0:	930d      	str	r3, [sp, #52]	; 0x34
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   125c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   125c4:	f1b3 3fff 	cmp.w	r3, #4294967295
   125c8:	d06d      	beq.n	126a6 <lfs_fs_traverseraw+0x106>
   125ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   125cc:	f1b3 3fff 	cmp.w	r3, #4294967295
   125d0:	d067      	beq.n	126a2 <lfs_fs_traverseraw+0x102>
   125d2:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
   125d4:	2b00      	cmp	r3, #0
   125d6:	d168      	bne.n	126aa <lfs_fs_traverseraw+0x10a>
        if (cycle >= lfs->cfg->block_count/2) {
   125d8:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   125da:	6a1b      	ldr	r3, [r3, #32]
   125dc:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
   125e0:	f080 8097 	bcs.w	12712 <lfs_fs_traverseraw+0x172>
        cycle += 1;
   125e4:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
   125e6:	2400      	movs	r4, #0
   125e8:	2c01      	cmp	r4, #1
   125ea:	dc0b      	bgt.n	12604 <lfs_fs_traverseraw+0x64>
            int err = cb(data, dir.tail[i]);
   125ec:	1da3      	adds	r3, r4, #6
   125ee:	aa0e      	add	r2, sp, #56	; 0x38
   125f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   125f4:	f853 1c20 	ldr.w	r1, [r3, #-32]
   125f8:	4640      	mov	r0, r8
   125fa:	47b8      	blx	r7
            if (err) {
   125fc:	4603      	mov	r3, r0
   125fe:	b978      	cbnz	r0, 12620 <lfs_fs_traverseraw+0x80>
        for (int i = 0; i < 2; i++) {
   12600:	3401      	adds	r4, #1
   12602:	e7f1      	b.n	125e8 <lfs_fs_traverseraw+0x48>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
   12604:	aa0c      	add	r2, sp, #48	; 0x30
   12606:	a906      	add	r1, sp, #24
   12608:	4630      	mov	r0, r6
   1260a:	f005 fb6a 	bl	17ce2 <lfs_dir_fetch>
        if (err) {
   1260e:	4682      	mov	sl, r0
   12610:	2800      	cmp	r0, #0
   12612:	f040 8081 	bne.w	12718 <lfs_fs_traverseraw+0x178>
        for (uint16_t id = 0; id < dir.count; id++) {
   12616:	2400      	movs	r4, #0
   12618:	e016      	b.n	12648 <lfs_fs_traverseraw+0xa8>
                if (tag == LFS_ERR_NOENT) {
   1261a:	f113 0f02 	cmn.w	r3, #2
   1261e:	d011      	beq.n	12644 <lfs_fs_traverseraw+0xa4>
}
   12620:	4618      	mov	r0, r3
   12622:	b00f      	add	sp, #60	; 0x3c
   12624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
   12628:	f8cd 8008 	str.w	r8, [sp, #8]
   1262c:	9701      	str	r7, [sp, #4]
   1262e:	9b05      	ldr	r3, [sp, #20]
   12630:	9300      	str	r3, [sp, #0]
   12632:	9b04      	ldr	r3, [sp, #16]
   12634:	4632      	mov	r2, r6
   12636:	2100      	movs	r1, #0
   12638:	4630      	mov	r0, r6
   1263a:	f005 fed1 	bl	183e0 <lfs_ctz_traverse>
                if (err) {
   1263e:	4603      	mov	r3, r0
   12640:	2800      	cmp	r0, #0
   12642:	d1ed      	bne.n	12620 <lfs_fs_traverseraw+0x80>
        for (uint16_t id = 0; id < dir.count; id++) {
   12644:	3401      	adds	r4, #1
   12646:	b2a4      	uxth	r4, r4
   12648:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1264c:	42a3      	cmp	r3, r4
   1264e:	d9b8      	bls.n	125c2 <lfs_fs_traverseraw+0x22>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
   12650:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   12652:	aa04      	add	r2, sp, #16
   12654:	9200      	str	r2, [sp, #0]
   12656:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1265a:	f043 0308 	orr.w	r3, r3, #8
   1265e:	4a2f      	ldr	r2, [pc, #188]	; (1271c <lfs_fs_traverseraw+0x17c>)
   12660:	a906      	add	r1, sp, #24
   12662:	4630      	mov	r0, r6
   12664:	f005 fb89 	bl	17d7a <lfs_dir_get>
            if (tag < 0) {
   12668:	1e03      	subs	r3, r0, #0
   1266a:	dbd6      	blt.n	1261a <lfs_fs_traverseraw+0x7a>
    return (tag & 0x7ff00000) >> 20;
   1266c:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   12670:	f240 2202 	movw	r2, #514	; 0x202
   12674:	4293      	cmp	r3, r2
   12676:	d0d7      	beq.n	12628 <lfs_fs_traverseraw+0x88>
            } else if (includeorphans && 
   12678:	f1b9 0f00 	cmp.w	r9, #0
   1267c:	d0e2      	beq.n	12644 <lfs_fs_traverseraw+0xa4>
   1267e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   12682:	d1df      	bne.n	12644 <lfs_fs_traverseraw+0xa4>
                for (int i = 0; i < 2; i++) {
   12684:	46d3      	mov	fp, sl
   12686:	f1bb 0f01 	cmp.w	fp, #1
   1268a:	dcdb      	bgt.n	12644 <lfs_fs_traverseraw+0xa4>
                    err = cb(data, (&ctz.head)[i]);
   1268c:	ab04      	add	r3, sp, #16
   1268e:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
   12692:	4640      	mov	r0, r8
   12694:	47b8      	blx	r7
                    if (err) {
   12696:	4603      	mov	r3, r0
   12698:	2800      	cmp	r0, #0
   1269a:	d1c1      	bne.n	12620 <lfs_fs_traverseraw+0x80>
                for (int i = 0; i < 2; i++) {
   1269c:	f10b 0b01 	add.w	fp, fp, #1
   126a0:	e7f1      	b.n	12686 <lfs_fs_traverseraw+0xe6>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   126a2:	2301      	movs	r3, #1
   126a4:	e796      	b.n	125d4 <lfs_fs_traverseraw+0x34>
   126a6:	2301      	movs	r3, #1
   126a8:	e794      	b.n	125d4 <lfs_fs_traverseraw+0x34>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   126aa:	6ab4      	ldr	r4, [r6, #40]	; 0x28
   126ac:	e00f      	b.n	126ce <lfs_fs_traverseraw+0x12e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
   126ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   126b0:	f8cd 8008 	str.w	r8, [sp, #8]
   126b4:	9701      	str	r7, [sp, #4]
   126b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   126b8:	9200      	str	r2, [sp, #0]
   126ba:	4632      	mov	r2, r6
   126bc:	f104 0140 	add.w	r1, r4, #64	; 0x40
   126c0:	4630      	mov	r0, r6
   126c2:	f005 fe8d 	bl	183e0 <lfs_ctz_traverse>
            if (err) {
   126c6:	4603      	mov	r3, r0
   126c8:	b158      	cbz	r0, 126e2 <lfs_fs_traverseraw+0x142>
   126ca:	e7a9      	b.n	12620 <lfs_fs_traverseraw+0x80>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   126cc:	6824      	ldr	r4, [r4, #0]
   126ce:	b1f4      	cbz	r4, 1270e <lfs_fs_traverseraw+0x16e>
        if (f->type != LFS_TYPE_REG) {
   126d0:	79a3      	ldrb	r3, [r4, #6]
   126d2:	2b01      	cmp	r3, #1
   126d4:	d1fa      	bne.n	126cc <lfs_fs_traverseraw+0x12c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
   126d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   126d8:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
   126dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   126e0:	d0e5      	beq.n	126ae <lfs_fs_traverseraw+0x10e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
   126e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   126e4:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
   126e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   126ec:	d1ee      	bne.n	126cc <lfs_fs_traverseraw+0x12c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
   126ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   126f0:	f8cd 8008 	str.w	r8, [sp, #8]
   126f4:	9701      	str	r7, [sp, #4]
   126f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   126f8:	9200      	str	r2, [sp, #0]
   126fa:	4632      	mov	r2, r6
   126fc:	f104 0140 	add.w	r1, r4, #64	; 0x40
   12700:	4630      	mov	r0, r6
   12702:	f005 fe6d 	bl	183e0 <lfs_ctz_traverse>
            if (err) {
   12706:	4603      	mov	r3, r0
   12708:	2800      	cmp	r0, #0
   1270a:	d0df      	beq.n	126cc <lfs_fs_traverseraw+0x12c>
   1270c:	e788      	b.n	12620 <lfs_fs_traverseraw+0x80>
    return 0;
   1270e:	2300      	movs	r3, #0
   12710:	e786      	b.n	12620 <lfs_fs_traverseraw+0x80>
            return LFS_ERR_CORRUPT;
   12712:	f06f 0353 	mvn.w	r3, #83	; 0x53
   12716:	e783      	b.n	12620 <lfs_fs_traverseraw+0x80>
            return err;
   12718:	4603      	mov	r3, r0
   1271a:	e781      	b.n	12620 <lfs_fs_traverseraw+0x80>
   1271c:	700ffc00 	.word	0x700ffc00

00012720 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
   12720:	b570      	push	{r4, r5, r6, lr}
   12722:	b082      	sub	sp, #8
   12724:	4604      	mov	r4, r0
   12726:	460d      	mov	r5, r1
        while (lfs->free.i != lfs->free.size) {
   12728:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1272a:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1272c:	4293      	cmp	r3, r2
   1272e:	d02d      	beq.n	1278c <lfs_alloc+0x6c>
            lfs->free.i += 1;
   12730:	1c5a      	adds	r2, r3, #1
   12732:	65e2      	str	r2, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;
   12734:	6e22      	ldr	r2, [r4, #96]	; 0x60
   12736:	3a01      	subs	r2, #1
   12738:	6622      	str	r2, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   1273a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1273c:	0959      	lsrs	r1, r3, #5
   1273e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   12742:	f003 001f 	and.w	r0, r3, #31
   12746:	2201      	movs	r2, #1
   12748:	4082      	lsls	r2, r0
   1274a:	4211      	tst	r1, r2
   1274c:	d1ec      	bne.n	12728 <lfs_alloc+0x8>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
   1274e:	6d62      	ldr	r2, [r4, #84]	; 0x54
   12750:	4413      	add	r3, r2
   12752:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   12754:	6a11      	ldr	r1, [r2, #32]
   12756:	fbb3 f2f1 	udiv	r2, r3, r1
   1275a:	fb01 3312 	mls	r3, r1, r2, r3
   1275e:	602b      	str	r3, [r5, #0]
                while (lfs->free.i != lfs->free.size &&
   12760:	e004      	b.n	1276c <lfs_alloc+0x4c>
                    lfs->free.i += 1;
   12762:	3301      	adds	r3, #1
   12764:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
   12766:	6e23      	ldr	r3, [r4, #96]	; 0x60
   12768:	3b01      	subs	r3, #1
   1276a:	6623      	str	r3, [r4, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
   1276c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1276e:	6da2      	ldr	r2, [r4, #88]	; 0x58
   12770:	4293      	cmp	r3, r2
   12772:	d048      	beq.n	12806 <lfs_alloc+0xe6>
                        (lfs->free.buffer[lfs->free.i / 32]
   12774:	6e62      	ldr	r2, [r4, #100]	; 0x64
   12776:	0959      	lsrs	r1, r3, #5
   12778:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
                            & (1U << (lfs->free.i % 32)))) {
   1277c:	f003 001f 	and.w	r0, r3, #31
   12780:	2201      	movs	r2, #1
   12782:	4082      	lsls	r2, r0
                while (lfs->free.i != lfs->free.size &&
   12784:	4211      	tst	r1, r2
   12786:	d1ec      	bne.n	12762 <lfs_alloc+0x42>
                return 0;
   12788:	2600      	movs	r6, #0
   1278a:	e03d      	b.n	12808 <lfs_alloc+0xe8>
        if (lfs->free.ack == 0) {
   1278c:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1278e:	b309      	cbz	r1, 127d4 <lfs_alloc+0xb4>
        lfs->free.off = (lfs->free.off + lfs->free.size)
   12790:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12792:	441a      	add	r2, r3
                % lfs->cfg->block_count;
   12794:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   12796:	6a1e      	ldr	r6, [r3, #32]
   12798:	fbb2 f0f6 	udiv	r0, r2, r6
   1279c:	fb06 2210 	mls	r2, r6, r0, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
   127a0:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
   127a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   127a4:	00d2      	lsls	r2, r2, #3
   127a6:	4291      	cmp	r1, r2
   127a8:	bf28      	it	cs
   127aa:	4611      	movcs	r1, r2
   127ac:	65a1      	str	r1, [r4, #88]	; 0x58
        lfs->free.i = 0;
   127ae:	2100      	movs	r1, #0
   127b0:	65e1      	str	r1, [r4, #92]	; 0x5c
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
   127b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   127b4:	6e60      	ldr	r0, [r4, #100]	; 0x64
   127b6:	f004 fc17 	bl	16fe8 <memset>
        int err = lfs_fs_traverseraw(lfs, lfs_alloc_lookahead, lfs, true);
   127ba:	2301      	movs	r3, #1
   127bc:	4622      	mov	r2, r4
   127be:	4914      	ldr	r1, [pc, #80]	; (12810 <lfs_alloc+0xf0>)
   127c0:	4620      	mov	r0, r4
   127c2:	f7ff feed 	bl	125a0 <lfs_fs_traverseraw>
        if (err) {
   127c6:	4606      	mov	r6, r0
   127c8:	2800      	cmp	r0, #0
   127ca:	d0ad      	beq.n	12728 <lfs_alloc+0x8>
            lfs_alloc_reset(lfs);
   127cc:	4620      	mov	r0, r4
   127ce:	f005 f911 	bl	179f4 <lfs_alloc_reset>
            return err;
   127d2:	e019      	b.n	12808 <lfs_alloc+0xe8>
            LFS_ERROR("No more free space %"PRIu32,
   127d4:	2201      	movs	r2, #1
   127d6:	f362 0102 	bfi	r1, r2, #0, #3
   127da:	f36f 01c5 	bfc	r1, #3, #3
   127de:	4a0d      	ldr	r2, [pc, #52]	; (12814 <lfs_alloc+0xf4>)
   127e0:	480d      	ldr	r0, [pc, #52]	; (12818 <lfs_alloc+0xf8>)
   127e2:	1a12      	subs	r2, r2, r0
   127e4:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   127e8:	f362 118f 	bfi	r1, r2, #6, #10
   127ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
   127ee:	f8ad 1000 	strh.w	r1, [sp]
   127f2:	4413      	add	r3, r2
   127f4:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   127f8:	4908      	ldr	r1, [pc, #32]	; (1281c <lfs_alloc+0xfc>)
   127fa:	4809      	ldr	r0, [pc, #36]	; (12820 <lfs_alloc+0x100>)
   127fc:	f7fb f94a 	bl	da94 <log_3>
            return LFS_ERR_NOSPC;
   12800:	f06f 061b 	mvn.w	r6, #27
   12804:	e000      	b.n	12808 <lfs_alloc+0xe8>
                return 0;
   12806:	2600      	movs	r6, #0
}
   12808:	4630      	mov	r0, r6
   1280a:	b002      	add	sp, #8
   1280c:	bd70      	pop	{r4, r5, r6, pc}
   1280e:	bf00      	nop
   12810:	000179b9 	.word	0x000179b9
   12814:	00019584 	.word	0x00019584
   12818:	00019574 	.word	0x00019574
   1281c:	0001a3dc 	.word	0x0001a3dc
   12820:	0001a4c8 	.word	0x0001a4c8

00012824 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
   12824:	b5f0      	push	{r4, r5, r6, r7, lr}
   12826:	b089      	sub	sp, #36	; 0x24
   12828:	4605      	mov	r5, r0
   1282a:	460e      	mov	r6, r1
   1282c:	e04a      	b.n	128c4 <lfs_file_relocate+0xa0>
                err = lfs_bd_read(lfs,
   1282e:	2201      	movs	r2, #1
   12830:	9203      	str	r2, [sp, #12]
   12832:	f10d 021b 	add.w	r2, sp, #27
   12836:	9202      	str	r2, [sp, #8]
   12838:	9401      	str	r4, [sp, #4]
   1283a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   1283c:	9200      	str	r2, [sp, #0]
   1283e:	1b1b      	subs	r3, r3, r4
   12840:	462a      	mov	r2, r5
   12842:	f106 0140 	add.w	r1, r6, #64	; 0x40
   12846:	4628      	mov	r0, r5
   12848:	f005 f903 	bl	17a52 <lfs_bd_read>
                if (err) {
   1284c:	2800      	cmp	r0, #0
   1284e:	d149      	bne.n	128e4 <lfs_file_relocate+0xc0>
            err = lfs_bd_prog(lfs,
   12850:	2301      	movs	r3, #1
   12852:	9303      	str	r3, [sp, #12]
   12854:	f10d 021b 	add.w	r2, sp, #27
   12858:	9202      	str	r2, [sp, #8]
   1285a:	9401      	str	r4, [sp, #4]
   1285c:	9a07      	ldr	r2, [sp, #28]
   1285e:	9200      	str	r2, [sp, #0]
   12860:	462a      	mov	r2, r5
   12862:	f105 0110 	add.w	r1, r5, #16
   12866:	4628      	mov	r0, r5
   12868:	f005 fb6a 	bl	17f40 <lfs_bd_prog>
            if (err) {
   1286c:	bb20      	cbnz	r0, 128b8 <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
   1286e:	3401      	adds	r4, #1
   12870:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   12872:	42a3      	cmp	r3, r4
   12874:	d93c      	bls.n	128f0 <lfs_file_relocate+0xcc>
            if (file->flags & LFS_F_INLINE) {
   12876:	6b32      	ldr	r2, [r6, #48]	; 0x30
   12878:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
   1287c:	d0d7      	beq.n	1282e <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
   1287e:	88b2      	ldrh	r2, [r6, #4]
   12880:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
   12882:	2101      	movs	r1, #1
   12884:	9105      	str	r1, [sp, #20]
   12886:	f10d 011b 	add.w	r1, sp, #27
   1288a:	9104      	str	r1, [sp, #16]
   1288c:	9403      	str	r4, [sp, #12]
   1288e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   12892:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   12896:	9202      	str	r2, [sp, #8]
   12898:	4a24      	ldr	r2, [pc, #144]	; (1292c <lfs_file_relocate+0x108>)
   1289a:	9201      	str	r2, [sp, #4]
   1289c:	1b1b      	subs	r3, r3, r4
   1289e:	9300      	str	r3, [sp, #0]
   128a0:	f106 0340 	add.w	r3, r6, #64	; 0x40
   128a4:	2200      	movs	r2, #0
   128a6:	f106 0108 	add.w	r1, r6, #8
   128aa:	4628      	mov	r0, r5
   128ac:	f005 fa72 	bl	17d94 <lfs_dir_getread>
                if (err) {
   128b0:	2800      	cmp	r0, #0
   128b2:	d0cd      	beq.n	12850 <lfs_file_relocate+0x2c>
                    return err;
   128b4:	4607      	mov	r7, r0
   128b6:	e036      	b.n	12926 <lfs_file_relocate+0x102>
                if (err == LFS_ERR_CORRUPT) {
   128b8:	f110 0f54 	cmn.w	r0, #84	; 0x54
   128bc:	d114      	bne.n	128e8 <lfs_file_relocate+0xc4>
    rcache->block = LFS_BLOCK_NULL;
   128be:	f04f 33ff 	mov.w	r3, #4294967295
   128c2:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
   128c4:	a907      	add	r1, sp, #28
   128c6:	4628      	mov	r0, r5
   128c8:	f7ff ff2a 	bl	12720 <lfs_alloc>
        if (err) {
   128cc:	4607      	mov	r7, r0
   128ce:	bb50      	cbnz	r0, 12926 <lfs_file_relocate+0x102>
        err = lfs_bd_erase(lfs, nblock);
   128d0:	9907      	ldr	r1, [sp, #28]
   128d2:	4628      	mov	r0, r5
   128d4:	f005 f86b 	bl	179ae <lfs_bd_erase>
        if (err) {
   128d8:	4607      	mov	r7, r0
   128da:	b138      	cbz	r0, 128ec <lfs_file_relocate+0xc8>
            if (err == LFS_ERR_CORRUPT) {
   128dc:	f110 0f54 	cmn.w	r0, #84	; 0x54
   128e0:	d0ed      	beq.n	128be <lfs_file_relocate+0x9a>
   128e2:	e020      	b.n	12926 <lfs_file_relocate+0x102>
                    return err;
   128e4:	4607      	mov	r7, r0
   128e6:	e01e      	b.n	12926 <lfs_file_relocate+0x102>
                return err;
   128e8:	4607      	mov	r7, r0
   128ea:	e01c      	b.n	12926 <lfs_file_relocate+0x102>
        for (lfs_off_t i = 0; i < file->off; i++) {
   128ec:	2400      	movs	r4, #0
   128ee:	e7bf      	b.n	12870 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
   128f0:	6eab      	ldr	r3, [r5, #104]	; 0x68
   128f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128f4:	69e9      	ldr	r1, [r5, #28]
   128f6:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
   128f8:	f004 fb52 	bl	16fa0 <memcpy>
        file->cache.block = lfs->pcache.block;
   128fc:	692b      	ldr	r3, [r5, #16]
   128fe:	6433      	str	r3, [r6, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
   12900:	696b      	ldr	r3, [r5, #20]
   12902:	6473      	str	r3, [r6, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
   12904:	69ab      	ldr	r3, [r5, #24]
   12906:	64b3      	str	r3, [r6, #72]	; 0x48
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   12908:	6eab      	ldr	r3, [r5, #104]	; 0x68
   1290a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1290c:	21ff      	movs	r1, #255	; 0xff
   1290e:	69e8      	ldr	r0, [r5, #28]
   12910:	f004 fb6a 	bl	16fe8 <memset>
    pcache->block = LFS_BLOCK_NULL;
   12914:	f04f 33ff 	mov.w	r3, #4294967295
   12918:	612b      	str	r3, [r5, #16]
        file->block = nblock;
   1291a:	9b07      	ldr	r3, [sp, #28]
   1291c:	63b3      	str	r3, [r6, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
   1291e:	6b33      	ldr	r3, [r6, #48]	; 0x30
   12920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12924:	6333      	str	r3, [r6, #48]	; 0x30
}
   12926:	4638      	mov	r0, r7
   12928:	b009      	add	sp, #36	; 0x24
   1292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1292c:	fff7fc00 	.word	0xfff7fc00

00012930 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   12930:	b5f0      	push	{r4, r5, r6, r7, lr}
   12932:	b097      	sub	sp, #92	; 0x5c
   12934:	4605      	mov	r5, r0
   12936:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
   12938:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   1293a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1293e:	d008      	beq.n	12952 <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
   12940:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12944:	d102      	bne.n	1294c <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
   12946:	f04f 32ff 	mov.w	r2, #4294967295
   1294a:	640a      	str	r2, [r1, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
   1294c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
   12950:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
   12952:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12954:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   12958:	d05e      	beq.n	12a18 <lfs_file_flush+0xe8>
        lfs_off_t pos = file->pos;
   1295a:	6b66      	ldr	r6, [r4, #52]	; 0x34
        if (!(file->flags & LFS_F_INLINE)) {
   1295c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12960:	d148      	bne.n	129f4 <lfs_file_flush+0xc4>
            lfs_file_t orig = {
   12962:	2254      	movs	r2, #84	; 0x54
   12964:	2100      	movs	r1, #0
   12966:	a801      	add	r0, sp, #4
   12968:	f004 fb3e 	bl	16fe8 <memset>
                .ctz.head = file->ctz.head,
   1296c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            lfs_file_t orig = {
   1296e:	930b      	str	r3, [sp, #44]	; 0x2c
                .ctz.size = file->ctz.size,
   12970:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            lfs_file_t orig = {
   12972:	930c      	str	r3, [sp, #48]	; 0x30
   12974:	4b2a      	ldr	r3, [pc, #168]	; (12a20 <lfs_file_flush+0xf0>)
   12976:	930d      	str	r3, [sp, #52]	; 0x34
                .pos = file->pos,
   12978:	6b63      	ldr	r3, [r4, #52]	; 0x34
            lfs_file_t orig = {
   1297a:	930e      	str	r3, [sp, #56]	; 0x38
   1297c:	af11      	add	r7, sp, #68	; 0x44
   1297e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   12982:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
   12986:	f04f 33ff 	mov.w	r3, #4294967295
   1298a:	602b      	str	r3, [r5, #0]
}
   1298c:	e003      	b.n	12996 <lfs_file_flush+0x66>
    rcache->block = LFS_BLOCK_NULL;
   1298e:	f04f 33ff 	mov.w	r3, #4294967295
   12992:	9311      	str	r3, [sp, #68]	; 0x44
   12994:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
   12996:	6b62      	ldr	r2, [r4, #52]	; 0x34
   12998:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1299a:	429a      	cmp	r2, r3
   1299c:	d216      	bcs.n	129cc <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
   1299e:	2301      	movs	r3, #1
   129a0:	f10d 0203 	add.w	r2, sp, #3
   129a4:	a901      	add	r1, sp, #4
   129a6:	4628      	mov	r0, r5
   129a8:	f000 f83c 	bl	12a24 <lfs_file_read>
                if (res < 0) {
   129ac:	1e03      	subs	r3, r0, #0
   129ae:	db34      	blt.n	12a1a <lfs_file_flush+0xea>
                res = lfs_file_write(lfs, file, &data, 1);
   129b0:	2301      	movs	r3, #1
   129b2:	f10d 0203 	add.w	r2, sp, #3
   129b6:	4621      	mov	r1, r4
   129b8:	4628      	mov	r0, r5
   129ba:	f005 fecd 	bl	18758 <lfs_file_write>
                if (res < 0) {
   129be:	1e03      	subs	r3, r0, #0
   129c0:	db2b      	blt.n	12a1a <lfs_file_flush+0xea>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
   129c2:	682b      	ldr	r3, [r5, #0]
   129c4:	f1b3 3fff 	cmp.w	r3, #4294967295
   129c8:	d1e1      	bne.n	1298e <lfs_file_flush+0x5e>
   129ca:	e7e4      	b.n	12996 <lfs_file_flush+0x66>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
   129cc:	2301      	movs	r3, #1
   129ce:	462a      	mov	r2, r5
   129d0:	f104 0140 	add.w	r1, r4, #64	; 0x40
   129d4:	4628      	mov	r0, r5
   129d6:	f005 fa6b 	bl	17eb0 <lfs_bd_flush>
                if (err) {
   129da:	4603      	mov	r3, r0
   129dc:	b178      	cbz	r0, 129fe <lfs_file_flush+0xce>
                    if (err == LFS_ERR_CORRUPT) {
   129de:	f110 0f54 	cmn.w	r0, #84	; 0x54
   129e2:	d11a      	bne.n	12a1a <lfs_file_flush+0xea>
                err = lfs_file_relocate(lfs, file);
   129e4:	4621      	mov	r1, r4
   129e6:	4628      	mov	r0, r5
   129e8:	f7ff ff1c 	bl	12824 <lfs_file_relocate>
                if (err) {
   129ec:	4603      	mov	r3, r0
   129ee:	2800      	cmp	r0, #0
   129f0:	d0ec      	beq.n	129cc <lfs_file_flush+0x9c>
   129f2:	e012      	b.n	12a1a <lfs_file_flush+0xea>
            file->pos = lfs_max(file->pos, file->ctz.size);
   129f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
   129f6:	42b3      	cmp	r3, r6
   129f8:	bf38      	it	cc
   129fa:	4633      	movcc	r3, r6
   129fc:	6363      	str	r3, [r4, #52]	; 0x34
        file->ctz.head = file->block;
   129fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12a00:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
   12a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a04:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
   12a06:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12a08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
   12a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12a10:	6323      	str	r3, [r4, #48]	; 0x30
        file->pos = pos;
   12a12:	6366      	str	r6, [r4, #52]	; 0x34
    return 0;
   12a14:	2300      	movs	r3, #0
   12a16:	e000      	b.n	12a1a <lfs_file_flush+0xea>
   12a18:	2300      	movs	r3, #0
}
   12a1a:	4618      	mov	r0, r3
   12a1c:	b017      	add	sp, #92	; 0x5c
   12a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a20:	00200001 	.word	0x00200001

00012a24 <lfs_file_read>:
        void *buffer, lfs_size_t size) {
   12a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12a28:	b087      	sub	sp, #28
   12a2a:	4680      	mov	r8, r0
   12a2c:	460c      	mov	r4, r1
   12a2e:	4617      	mov	r7, r2
   12a30:	4699      	mov	r9, r3
    if (file->flags & LFS_F_WRITING) {
   12a32:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   12a34:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   12a38:	d109      	bne.n	12a4e <lfs_file_read+0x2a>
    if (file->pos >= file->ctz.size) {
   12a3a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   12a3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12a3e:	429a      	cmp	r2, r3
   12a40:	d276      	bcs.n	12b30 <lfs_file_read+0x10c>
    size = lfs_min(size, file->ctz.size - file->pos);
   12a42:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
   12a44:	4599      	cmp	r9, r3
   12a46:	bf28      	it	cs
   12a48:	4699      	movcs	r9, r3
    nsize = size;
   12a4a:	464e      	mov	r6, r9
    while (nsize > 0) {
   12a4c:	e03d      	b.n	12aca <lfs_file_read+0xa6>
        int err = lfs_file_flush(lfs, file);
   12a4e:	f7ff ff6f 	bl	12930 <lfs_file_flush>
        if (err) {
   12a52:	4602      	mov	r2, r0
   12a54:	2800      	cmp	r0, #0
   12a56:	d0f0      	beq.n	12a3a <lfs_file_read+0x16>
   12a58:	e06b      	b.n	12b32 <lfs_file_read+0x10e>
            if (!(file->flags & LFS_F_INLINE)) {
   12a5a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12a5e:	d041      	beq.n	12ae4 <lfs_file_read+0xc0>
                file->block = LFS_BLOCK_INLINE;
   12a60:	f06f 0301 	mvn.w	r3, #1
   12a64:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
   12a66:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a68:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_READING;
   12a6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   12a70:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   12a72:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
   12a76:	69db      	ldr	r3, [r3, #28]
   12a78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   12a7a:	1a9d      	subs	r5, r3, r2
   12a7c:	42b5      	cmp	r5, r6
   12a7e:	bf28      	it	cs
   12a80:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
   12a82:	6b21      	ldr	r1, [r4, #48]	; 0x30
   12a84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12a88:	d041      	beq.n	12b0e <lfs_file_read+0xea>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
   12a8a:	88a1      	ldrh	r1, [r4, #4]
   12a8c:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
   12a8e:	9505      	str	r5, [sp, #20]
   12a90:	9704      	str	r7, [sp, #16]
   12a92:	9203      	str	r2, [sp, #12]
   12a94:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
   12a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12a9c:	9102      	str	r1, [sp, #8]
   12a9e:	4a27      	ldr	r2, [pc, #156]	; (12b3c <lfs_file_read+0x118>)
   12aa0:	9201      	str	r2, [sp, #4]
   12aa2:	9300      	str	r3, [sp, #0]
   12aa4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12aa8:	2200      	movs	r2, #0
   12aaa:	f104 0108 	add.w	r1, r4, #8
   12aae:	4640      	mov	r0, r8
   12ab0:	f005 f970 	bl	17d94 <lfs_dir_getread>
            if (err) {
   12ab4:	4602      	mov	r2, r0
   12ab6:	2800      	cmp	r0, #0
   12ab8:	d13b      	bne.n	12b32 <lfs_file_read+0x10e>
        file->pos += diff;
   12aba:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12abc:	442b      	add	r3, r5
   12abe:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
   12ac0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12ac2:	442b      	add	r3, r5
   12ac4:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
   12ac6:	442f      	add	r7, r5
        nsize -= diff;
   12ac8:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
   12aca:	2e00      	cmp	r6, #0
   12acc:	d02e      	beq.n	12b2c <lfs_file_read+0x108>
        if (!(file->flags & LFS_F_READING) ||
   12ace:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12ad0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   12ad4:	d0c1      	beq.n	12a5a <lfs_file_read+0x36>
                file->off == lfs->cfg->block_size) {
   12ad6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   12ad8:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
   12adc:	69d2      	ldr	r2, [r2, #28]
        if (!(file->flags & LFS_F_READING) ||
   12ade:	4291      	cmp	r1, r2
   12ae0:	d1c7      	bne.n	12a72 <lfs_file_read+0x4e>
   12ae2:	e7ba      	b.n	12a5a <lfs_file_read+0x36>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   12ae4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   12ae8:	9303      	str	r3, [sp, #12]
   12aea:	f104 0338 	add.w	r3, r4, #56	; 0x38
   12aee:	9302      	str	r3, [sp, #8]
   12af0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12af2:	9301      	str	r3, [sp, #4]
   12af4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12af6:	9300      	str	r3, [sp, #0]
   12af8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12afa:	f104 0240 	add.w	r2, r4, #64	; 0x40
   12afe:	2100      	movs	r1, #0
   12b00:	4640      	mov	r0, r8
   12b02:	f005 fcb8 	bl	18476 <lfs_ctz_find>
                if (err) {
   12b06:	4602      	mov	r2, r0
   12b08:	2800      	cmp	r0, #0
   12b0a:	d0ae      	beq.n	12a6a <lfs_file_read+0x46>
   12b0c:	e011      	b.n	12b32 <lfs_file_read+0x10e>
            int err = lfs_bd_read(lfs,
   12b0e:	9503      	str	r5, [sp, #12]
   12b10:	9702      	str	r7, [sp, #8]
   12b12:	9201      	str	r2, [sp, #4]
   12b14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   12b16:	9200      	str	r2, [sp, #0]
   12b18:	f104 0240 	add.w	r2, r4, #64	; 0x40
   12b1c:	2100      	movs	r1, #0
   12b1e:	4640      	mov	r0, r8
   12b20:	f004 ff97 	bl	17a52 <lfs_bd_read>
            if (err) {
   12b24:	4602      	mov	r2, r0
   12b26:	2800      	cmp	r0, #0
   12b28:	d0c7      	beq.n	12aba <lfs_file_read+0x96>
   12b2a:	e002      	b.n	12b32 <lfs_file_read+0x10e>
    return size;
   12b2c:	464a      	mov	r2, r9
   12b2e:	e000      	b.n	12b32 <lfs_file_read+0x10e>
        return 0;
   12b30:	2200      	movs	r2, #0
}
   12b32:	4610      	mov	r0, r2
   12b34:	b007      	add	sp, #28
   12b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12b3a:	bf00      	nop
   12b3c:	fff7fc00 	.word	0xfff7fc00

00012b40 <lfs_fs_size>:
    lfs_size_t *size = p;
    *size += 1;
    return 0;
}

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
   12b40:	b500      	push	{lr}
   12b42:	b083      	sub	sp, #12
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
    lfs_size_t size = 0;
   12b44:	2300      	movs	r3, #0
   12b46:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverseraw(lfs, lfs_fs_size_count, &size, false);
   12b48:	aa01      	add	r2, sp, #4
   12b4a:	4904      	ldr	r1, [pc, #16]	; (12b5c <lfs_fs_size+0x1c>)
   12b4c:	f7ff fd28 	bl	125a0 <lfs_fs_traverseraw>
    if (err) {
   12b50:	b900      	cbnz	r0, 12b54 <lfs_fs_size+0x14>
        LFS_TRACE("lfs_fs_size -> %d", err);
        return err;
    }

    LFS_TRACE("lfs_fs_size -> %d", err);
    return size;
   12b52:	9801      	ldr	r0, [sp, #4]
}
   12b54:	b003      	add	sp, #12
   12b56:	f85d fb04 	ldr.w	pc, [sp], #4
   12b5a:	bf00      	nop
   12b5c:	00017a49 	.word	0x00017a49

00012b60 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   12b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b64:	b09b      	sub	sp, #108	; 0x6c
   12b66:	4607      	mov	r7, r0
   12b68:	468b      	mov	fp, r1
   12b6a:	4690      	mov	r8, r2
   12b6c:	4699      	mov	r9, r3
   12b6e:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
   12b72:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
   12b76:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
   12b7a:	680b      	ldr	r3, [r1, #0]
   12b7c:	9316      	str	r3, [sp, #88]	; 0x58
   12b7e:	684b      	ldr	r3, [r1, #4]
   12b80:	9317      	str	r3, [sp, #92]	; 0x5c
    while (end - begin > 1) {
   12b82:	e012      	b.n	12baa <lfs_dir_compact+0x4a>
        uint16_t split = (end - begin) / 2;
   12b84:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   12b88:	f3c4 044f 	ubfx	r4, r4, #1, #16
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
   12b8c:	442c      	add	r4, r5
   12b8e:	b2a4      	uxth	r4, r4
   12b90:	9602      	str	r6, [sp, #8]
   12b92:	9401      	str	r4, [sp, #4]
   12b94:	f8cd a000 	str.w	sl, [sp]
   12b98:	464b      	mov	r3, r9
   12b9a:	4642      	mov	r2, r8
   12b9c:	4659      	mov	r1, fp
   12b9e:	4638      	mov	r0, r7
   12ba0:	f005 ffed 	bl	18b7e <lfs_dir_split>
        if (err) {
   12ba4:	2800      	cmp	r0, #0
   12ba6:	d151      	bne.n	12c4c <lfs_dir_compact+0xec>
        end = begin + split;
   12ba8:	4626      	mov	r6, r4
    while (end - begin > 1) {
   12baa:	1b74      	subs	r4, r6, r5
   12bac:	2c01      	cmp	r4, #1
   12bae:	dd2f      	ble.n	12c10 <lfs_dir_compact+0xb0>
        lfs_size_t size = 0;
   12bb0:	2200      	movs	r2, #0
   12bb2:	9210      	str	r2, [sp, #64]	; 0x40
        int err = lfs_dir_traverse(lfs,
   12bb4:	ab10      	add	r3, sp, #64	; 0x40
   12bb6:	9308      	str	r3, [sp, #32]
   12bb8:	4bad      	ldr	r3, [pc, #692]	; (12e70 <lfs_dir_compact+0x310>)
   12bba:	9307      	str	r3, [sp, #28]
   12bbc:	426b      	negs	r3, r5
   12bbe:	b21b      	sxth	r3, r3
   12bc0:	9306      	str	r3, [sp, #24]
   12bc2:	9605      	str	r6, [sp, #20]
   12bc4:	9504      	str	r5, [sp, #16]
   12bc6:	9203      	str	r2, [sp, #12]
   12bc8:	4baa      	ldr	r3, [pc, #680]	; (12e74 <lfs_dir_compact+0x314>)
   12bca:	9302      	str	r3, [sp, #8]
   12bcc:	f8cd 9004 	str.w	r9, [sp, #4]
   12bd0:	f8cd 8000 	str.w	r8, [sp]
   12bd4:	f04f 33ff 	mov.w	r3, #4294967295
   12bd8:	4651      	mov	r1, sl
   12bda:	4638      	mov	r0, r7
   12bdc:	f7ff f814 	bl	11c08 <lfs_dir_traverse>
        if (err) {
   12be0:	2800      	cmp	r0, #0
   12be2:	f040 81a8 	bne.w	12f36 <lfs_dir_compact+0x3d6>
        if (end - begin < 0xff &&
   12be6:	2cfe      	cmp	r4, #254	; 0xfe
   12be8:	dccc      	bgt.n	12b84 <lfs_dir_compact+0x24>
                size <= lfs_min(lfs->cfg->block_size - 36,
   12bea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12bec:	69da      	ldr	r2, [r3, #28]
   12bee:	f1a2 0124 	sub.w	r1, r2, #36	; 0x24
   12bf2:	6998      	ldr	r0, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   12bf4:	eb00 0252 	add.w	r2, r0, r2, lsr #1
   12bf8:	1e53      	subs	r3, r2, #1
    return a - (a % alignment);
   12bfa:	fbb3 f2f0 	udiv	r2, r3, r0
   12bfe:	fb00 3212 	mls	r2, r0, r2, r3
   12c02:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
   12c04:	428b      	cmp	r3, r1
   12c06:	bf28      	it	cs
   12c08:	460b      	movcs	r3, r1
   12c0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
        if (end - begin < 0xff &&
   12c0c:	429a      	cmp	r2, r3
   12c0e:	d8b9      	bhi.n	12b84 <lfs_dir_compact+0x24>
    dir->rev += 1;
   12c10:	f8db 2008 	ldr.w	r2, [fp, #8]
   12c14:	3201      	adds	r2, #1
   12c16:	f8cb 2008 	str.w	r2, [fp, #8]
    if (lfs->cfg->block_cycles > 0 &&
   12c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12c1e:	2b00      	cmp	r3, #0
   12c20:	dd43      	ble.n	12caa <lfs_dir_compact+0x14a>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
   12c22:	3301      	adds	r3, #1
   12c24:	f043 0301 	orr.w	r3, r3, #1
   12c28:	fbb2 f1f3 	udiv	r1, r2, r3
   12c2c:	fb03 2311 	mls	r3, r3, r1, r2
    if (lfs->cfg->block_cycles > 0 &&
   12c30:	2b00      	cmp	r3, #0
   12c32:	d13c      	bne.n	12cae <lfs_dir_compact+0x14e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   12c34:	f8db 3000 	ldr.w	r3, [fp]
   12c38:	b1a3      	cbz	r3, 12c64 <lfs_dir_compact+0x104>
   12c3a:	f8db 2004 	ldr.w	r2, [fp, #4]
   12c3e:	2a01      	cmp	r2, #1
   12c40:	d010      	beq.n	12c64 <lfs_dir_compact+0x104>
   12c42:	2b01      	cmp	r3, #1
   12c44:	d00e      	beq.n	12c64 <lfs_dir_compact+0x104>
   12c46:	b16a      	cbz	r2, 12c64 <lfs_dir_compact+0x104>
            tired = true;
   12c48:	2401      	movs	r4, #1
   12c4a:	e049      	b.n	12ce0 <lfs_dir_compact+0x180>
   12c4c:	900b      	str	r0, [sp, #44]	; 0x2c
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
   12c4e:	f110 0f1c 	cmn.w	r0, #28
   12c52:	f040 8171 	bne.w	12f38 <lfs_dir_compact+0x3d8>
   12c56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12c58:	69db      	ldr	r3, [r3, #28]
   12c5a:	3b24      	subs	r3, #36	; 0x24
   12c5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12c5e:	4293      	cmp	r3, r2
   12c60:	d2d6      	bcs.n	12c10 <lfs_dir_compact+0xb0>
   12c62:	e169      	b.n	12f38 <lfs_dir_compact+0x3d8>
            lfs_ssize_t res = lfs_fs_size(lfs);
   12c64:	4638      	mov	r0, r7
   12c66:	f7ff ff6b 	bl	12b40 <lfs_fs_size>
            if (res < 0) {
   12c6a:	1e02      	subs	r2, r0, #0
   12c6c:	920b      	str	r2, [sp, #44]	; 0x2c
   12c6e:	f2c0 8163 	blt.w	12f38 <lfs_dir_compact+0x3d8>
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
   12c72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12c74:	6a1b      	ldr	r3, [r3, #32]
   12c76:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
   12c7a:	d301      	bcc.n	12c80 <lfs_dir_compact+0x120>
    bool relocated = false;
   12c7c:	2400      	movs	r4, #0
   12c7e:	e017      	b.n	12cb0 <lfs_dir_compact+0x150>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
   12c80:	9602      	str	r6, [sp, #8]
   12c82:	9501      	str	r5, [sp, #4]
   12c84:	f8cd a000 	str.w	sl, [sp]
   12c88:	464b      	mov	r3, r9
   12c8a:	4642      	mov	r2, r8
   12c8c:	4659      	mov	r1, fp
   12c8e:	4638      	mov	r0, r7
   12c90:	f005 ff75 	bl	18b7e <lfs_dir_split>
                if (err && err != LFS_ERR_NOSPC) {
   12c94:	900b      	str	r0, [sp, #44]	; 0x2c
   12c96:	b118      	cbz	r0, 12ca0 <lfs_dir_compact+0x140>
   12c98:	f110 0f1c 	cmn.w	r0, #28
   12c9c:	f040 814c 	bne.w	12f38 <lfs_dir_compact+0x3d8>
                if (!err) {
   12ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12ca2:	2b00      	cmp	r3, #0
   12ca4:	d1ea      	bne.n	12c7c <lfs_dir_compact+0x11c>
                    end = begin;
   12ca6:	462e      	mov	r6, r5
   12ca8:	e7e8      	b.n	12c7c <lfs_dir_compact+0x11c>
    bool relocated = false;
   12caa:	2400      	movs	r4, #0
   12cac:	e000      	b.n	12cb0 <lfs_dir_compact+0x150>
   12cae:	2400      	movs	r4, #0
                .block = dir->pair[1],
   12cb0:	f8db 1004 	ldr.w	r1, [fp, #4]
            struct lfs_commit commit = {
   12cb4:	9110      	str	r1, [sp, #64]	; 0x40
   12cb6:	2300      	movs	r3, #0
   12cb8:	9311      	str	r3, [sp, #68]	; 0x44
   12cba:	f04f 32ff 	mov.w	r2, #4294967295
   12cbe:	9212      	str	r2, [sp, #72]	; 0x48
   12cc0:	9213      	str	r2, [sp, #76]	; 0x4c
   12cc2:	9314      	str	r3, [sp, #80]	; 0x50
                .end = lfs->cfg->block_size - 8,
   12cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12cc6:	69db      	ldr	r3, [r3, #28]
   12cc8:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
   12cca:	9315      	str	r3, [sp, #84]	; 0x54
            int err = lfs_bd_erase(lfs, dir->pair[1]);
   12ccc:	4638      	mov	r0, r7
   12cce:	f004 fe6e 	bl	179ae <lfs_bd_erase>
            if (err) {
   12cd2:	900b      	str	r0, [sp, #44]	; 0x2c
   12cd4:	b340      	cbz	r0, 12d28 <lfs_dir_compact+0x1c8>
                if (err == LFS_ERR_CORRUPT) {
   12cd6:	f110 0f54 	cmn.w	r0, #84	; 0x54
   12cda:	f040 812d 	bne.w	12f38 <lfs_dir_compact+0x3d8>
                    goto relocate;
   12cde:	2400      	movs	r4, #0
    rcache->block = LFS_BLOCK_NULL;
   12ce0:	f04f 33ff 	mov.w	r3, #4294967295
   12ce4:	613b      	str	r3, [r7, #16]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   12ce6:	f8db 3000 	ldr.w	r3, [fp]
   12cea:	2b00      	cmp	r3, #0
   12cec:	f000 8107 	beq.w	12efe <lfs_dir_compact+0x39e>
   12cf0:	f8db 2004 	ldr.w	r2, [fp, #4]
   12cf4:	2a01      	cmp	r2, #1
   12cf6:	f000 8102 	beq.w	12efe <lfs_dir_compact+0x39e>
   12cfa:	2b01      	cmp	r3, #1
   12cfc:	f000 80ff 	beq.w	12efe <lfs_dir_compact+0x39e>
   12d00:	2a00      	cmp	r2, #0
   12d02:	f000 80fc 	beq.w	12efe <lfs_dir_compact+0x39e>
        int err = lfs_alloc(lfs, &dir->pair[1]);
   12d06:	f10b 0104 	add.w	r1, fp, #4
   12d0a:	4638      	mov	r0, r7
   12d0c:	f7ff fd08 	bl	12720 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
   12d10:	900b      	str	r0, [sp, #44]	; 0x2c
   12d12:	b138      	cbz	r0, 12d24 <lfs_dir_compact+0x1c4>
   12d14:	f110 0f1c 	cmn.w	r0, #28
   12d18:	f040 810e 	bne.w	12f38 <lfs_dir_compact+0x3d8>
   12d1c:	2c00      	cmp	r4, #0
   12d1e:	f000 810b 	beq.w	12f38 <lfs_dir_compact+0x3d8>
   12d22:	e7c5      	b.n	12cb0 <lfs_dir_compact+0x150>
        relocated = true;
   12d24:	2401      	movs	r4, #1
   12d26:	e7c3      	b.n	12cb0 <lfs_dir_compact+0x150>
            err = lfs_dir_commitprog(lfs, &commit,
   12d28:	2304      	movs	r3, #4
   12d2a:	f10b 0208 	add.w	r2, fp, #8
   12d2e:	a910      	add	r1, sp, #64	; 0x40
   12d30:	4638      	mov	r0, r7
   12d32:	f005 f954 	bl	17fde <lfs_dir_commitprog>
            if (err) {
   12d36:	900b      	str	r0, [sp, #44]	; 0x2c
   12d38:	b120      	cbz	r0, 12d44 <lfs_dir_compact+0x1e4>
                if (err == LFS_ERR_CORRUPT) {
   12d3a:	f110 0f54 	cmn.w	r0, #84	; 0x54
   12d3e:	f040 80fb 	bne.w	12f38 <lfs_dir_compact+0x3d8>
   12d42:	e7cc      	b.n	12cde <lfs_dir_compact+0x17e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   12d44:	9718      	str	r7, [sp, #96]	; 0x60
   12d46:	ab10      	add	r3, sp, #64	; 0x40
   12d48:	9319      	str	r3, [sp, #100]	; 0x64
            err = lfs_dir_traverse(lfs,
   12d4a:	ab18      	add	r3, sp, #96	; 0x60
   12d4c:	9308      	str	r3, [sp, #32]
   12d4e:	4b4a      	ldr	r3, [pc, #296]	; (12e78 <lfs_dir_compact+0x318>)
   12d50:	9307      	str	r3, [sp, #28]
   12d52:	426b      	negs	r3, r5
   12d54:	b21b      	sxth	r3, r3
   12d56:	9306      	str	r3, [sp, #24]
   12d58:	9605      	str	r6, [sp, #20]
   12d5a:	9504      	str	r5, [sp, #16]
   12d5c:	2200      	movs	r2, #0
   12d5e:	9203      	str	r2, [sp, #12]
   12d60:	4b44      	ldr	r3, [pc, #272]	; (12e74 <lfs_dir_compact+0x314>)
   12d62:	9302      	str	r3, [sp, #8]
   12d64:	f8cd 9004 	str.w	r9, [sp, #4]
   12d68:	f8cd 8000 	str.w	r8, [sp]
   12d6c:	f04f 33ff 	mov.w	r3, #4294967295
   12d70:	4651      	mov	r1, sl
   12d72:	4638      	mov	r0, r7
   12d74:	f7fe ff48 	bl	11c08 <lfs_dir_traverse>
            if (err) {
   12d78:	900b      	str	r0, [sp, #44]	; 0x2c
   12d7a:	b120      	cbz	r0, 12d86 <lfs_dir_compact+0x226>
                if (err == LFS_ERR_CORRUPT) {
   12d7c:	f110 0f54 	cmn.w	r0, #84	; 0x54
   12d80:	f040 80da 	bne.w	12f38 <lfs_dir_compact+0x3d8>
   12d84:	e7ab      	b.n	12cde <lfs_dir_compact+0x17e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   12d86:	f8db 3018 	ldr.w	r3, [fp, #24]
   12d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
   12d8e:	d01e      	beq.n	12dce <lfs_dir_compact+0x26e>
   12d90:	f8db 301c 	ldr.w	r3, [fp, #28]
   12d94:	f1b3 3fff 	cmp.w	r3, #4294967295
   12d98:	d017      	beq.n	12dca <lfs_dir_compact+0x26a>
   12d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if (!lfs_pair_isnull(dir->tail)) {
   12d9c:	f013 0f01 	tst.w	r3, #1
   12da0:	d017      	beq.n	12dd2 <lfs_dir_compact+0x272>
            lfs_gstate_t delta = {0};
   12da2:	2300      	movs	r3, #0
   12da4:	930d      	str	r3, [sp, #52]	; 0x34
   12da6:	930e      	str	r3, [sp, #56]	; 0x38
   12da8:	930f      	str	r3, [sp, #60]	; 0x3c
            if (!relocated) {
   12daa:	bbb4      	cbnz	r4, 12e1a <lfs_dir_compact+0x2ba>
                lfs_gstate_xor(&delta, &lfs->gdisk);
   12dac:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    for (int i = 0; i < 3; i++) {
   12db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12db2:	2b02      	cmp	r3, #2
   12db4:	dc22      	bgt.n	12dfc <lfs_dir_compact+0x29c>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   12db6:	a90d      	add	r1, sp, #52	; 0x34
   12db8:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
   12dbc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   12dc0:	4042      	eors	r2, r0
   12dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
   12dc6:	3301      	adds	r3, #1
   12dc8:	e7f3      	b.n	12db2 <lfs_dir_compact+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   12dca:	2301      	movs	r3, #1
   12dcc:	e7e6      	b.n	12d9c <lfs_dir_compact+0x23c>
   12dce:	2301      	movs	r3, #1
   12dd0:	e7e4      	b.n	12d9c <lfs_dir_compact+0x23c>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
   12dd2:	f89b 2017 	ldrb.w	r2, [fp, #23]
   12dd6:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
   12dda:	f10b 0318 	add.w	r3, fp, #24
   12dde:	4927      	ldr	r1, [pc, #156]	; (12e7c <lfs_dir_compact+0x31c>)
   12de0:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
   12de4:	a910      	add	r1, sp, #64	; 0x40
   12de6:	4638      	mov	r0, r7
   12de8:	f005 f919 	bl	1801e <lfs_dir_commitattr>
                if (err) {
   12dec:	2800      	cmp	r0, #0
   12dee:	d0d8      	beq.n	12da2 <lfs_dir_compact+0x242>
                    if (err == LFS_ERR_CORRUPT) {
   12df0:	f110 0f54 	cmn.w	r0, #84	; 0x54
   12df4:	f43f af73 	beq.w	12cde <lfs_dir_compact+0x17e>
                    return err;
   12df8:	900b      	str	r0, [sp, #44]	; 0x2c
   12dfa:	e09d      	b.n	12f38 <lfs_dir_compact+0x3d8>
                lfs_gstate_xor(&delta, &lfs->gstate);
   12dfc:	f107 0c30 	add.w	ip, r7, #48	; 0x30
    for (int i = 0; i < 3; i++) {
   12e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12e02:	2b02      	cmp	r3, #2
   12e04:	dc09      	bgt.n	12e1a <lfs_dir_compact+0x2ba>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   12e06:	a90d      	add	r1, sp, #52	; 0x34
   12e08:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
   12e0c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   12e10:	4042      	eors	r2, r0
   12e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
   12e16:	3301      	adds	r3, #1
   12e18:	e7f3      	b.n	12e02 <lfs_dir_compact+0x2a2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
   12e1a:	f107 0048 	add.w	r0, r7, #72	; 0x48
    for (int i = 0; i < 3; i++) {
   12e1e:	46a4      	mov	ip, r4
   12e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12e22:	e008      	b.n	12e36 <lfs_dir_compact+0x2d6>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   12e24:	a90d      	add	r1, sp, #52	; 0x34
   12e26:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   12e2a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   12e2e:	4062      	eors	r2, r4
   12e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
   12e34:	3301      	adds	r3, #1
   12e36:	2b02      	cmp	r3, #2
   12e38:	ddf4      	ble.n	12e24 <lfs_dir_compact+0x2c4>
   12e3a:	4664      	mov	r4, ip
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   12e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12e3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   12e42:	f023 0303 	bic.w	r3, r3, #3
   12e46:	930d      	str	r3, [sp, #52]	; 0x34
            err = lfs_dir_getgstate(lfs, dir, &delta);
   12e48:	aa0d      	add	r2, sp, #52	; 0x34
   12e4a:	4659      	mov	r1, fp
   12e4c:	4638      	mov	r0, r7
   12e4e:	f7ff f88b 	bl	11f68 <lfs_dir_getgstate>
            if (err) {
   12e52:	900b      	str	r0, [sp, #44]	; 0x2c
   12e54:	2800      	cmp	r0, #0
   12e56:	d16f      	bne.n	12f38 <lfs_dir_compact+0x3d8>
   12e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
   12e5a:	2b02      	cmp	r3, #2
   12e5c:	dc10      	bgt.n	12e80 <lfs_dir_compact+0x320>
        if (((uint32_t*)a)[i] != 0) {
   12e5e:	aa1a      	add	r2, sp, #104	; 0x68
   12e60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   12e64:	f852 2c34 	ldr.w	r2, [r2, #-52]
   12e68:	b9c2      	cbnz	r2, 12e9c <lfs_dir_compact+0x33c>
    for (int i = 0; i < 3; i++) {
   12e6a:	3301      	adds	r3, #1
   12e6c:	e7f5      	b.n	12e5a <lfs_dir_compact+0x2fa>
   12e6e:	bf00      	nop
   12e70:	00017a13 	.word	0x00017a13
   12e74:	400ffc00 	.word	0x400ffc00
   12e78:	000180db 	.word	0x000180db
   12e7c:	000ffc08 	.word	0x000ffc08
    return true;
   12e80:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
   12e82:	b96b      	cbnz	r3, 12ea0 <lfs_dir_compact+0x340>
                err = lfs_dir_commitattr(lfs, &commit,
   12e84:	ab0d      	add	r3, sp, #52	; 0x34
   12e86:	4a2e      	ldr	r2, [pc, #184]	; (12f40 <lfs_dir_compact+0x3e0>)
   12e88:	a910      	add	r1, sp, #64	; 0x40
   12e8a:	4638      	mov	r0, r7
   12e8c:	f005 f8c7 	bl	1801e <lfs_dir_commitattr>
                if (err) {
   12e90:	900b      	str	r0, [sp, #44]	; 0x2c
   12e92:	b128      	cbz	r0, 12ea0 <lfs_dir_compact+0x340>
                    if (err == LFS_ERR_CORRUPT) {
   12e94:	f110 0f54 	cmn.w	r0, #84	; 0x54
   12e98:	d14e      	bne.n	12f38 <lfs_dir_compact+0x3d8>
   12e9a:	e720      	b.n	12cde <lfs_dir_compact+0x17e>
            return false;
   12e9c:	2300      	movs	r3, #0
   12e9e:	e7f0      	b.n	12e82 <lfs_dir_compact+0x322>
            err = lfs_dir_commitcrc(lfs, &commit);
   12ea0:	a910      	add	r1, sp, #64	; 0x40
   12ea2:	4638      	mov	r0, r7
   12ea4:	f005 f92d 	bl	18102 <lfs_dir_commitcrc>
            if (err) {
   12ea8:	900b      	str	r0, [sp, #44]	; 0x2c
   12eaa:	b118      	cbz	r0, 12eb4 <lfs_dir_compact+0x354>
                if (err == LFS_ERR_CORRUPT) {
   12eac:	f110 0f54 	cmn.w	r0, #84	; 0x54
   12eb0:	d142      	bne.n	12f38 <lfs_dir_compact+0x3d8>
   12eb2:	e714      	b.n	12cde <lfs_dir_compact+0x17e>
    lfs_block_t t = pair[0];
   12eb4:	f8db 3000 	ldr.w	r3, [fp]
    pair[0] = pair[1];
   12eb8:	f8db 2004 	ldr.w	r2, [fp, #4]
   12ebc:	f8cb 2000 	str.w	r2, [fp]
    pair[1] = t;
   12ec0:	f8cb 3004 	str.w	r3, [fp, #4]
            dir->count = end - begin;
   12ec4:	1b75      	subs	r5, r6, r5
   12ec6:	f8ab 5014 	strh.w	r5, [fp, #20]
            dir->off = commit.off;
   12eca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12ecc:	f8cb 300c 	str.w	r3, [fp, #12]
            dir->etag = commit.ptag;
   12ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12ed2:	f8cb 3010 	str.w	r3, [fp, #16]
            lfs->gdelta = (lfs_gstate_t){0};
   12ed6:	2200      	movs	r2, #0
   12ed8:	64ba      	str	r2, [r7, #72]	; 0x48
   12eda:	64fa      	str	r2, [r7, #76]	; 0x4c
   12edc:	653a      	str	r2, [r7, #80]	; 0x50
            if (!relocated) {
   12ede:	b934      	cbnz	r4, 12eee <lfs_dir_compact+0x38e>
                lfs->gdisk = lfs->gstate;
   12ee0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   12ee4:	f107 0230 	add.w	r2, r7, #48	; 0x30
   12ee8:	ca07      	ldmia	r2, {r0, r1, r2}
   12eea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (relocated) {
   12eee:	b31c      	cbz	r4, 12f38 <lfs_dir_compact+0x3d8>
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
   12ef0:	465a      	mov	r2, fp
   12ef2:	a916      	add	r1, sp, #88	; 0x58
   12ef4:	4638      	mov	r0, r7
   12ef6:	f000 fba1 	bl	1363c <lfs_fs_relocate>
   12efa:	900b      	str	r0, [sp, #44]	; 0x2c
        if (err) {
   12efc:	e01c      	b.n	12f38 <lfs_dir_compact+0x3d8>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
   12efe:	f04f 0200 	mov.w	r2, #0
   12f02:	2302      	movs	r3, #2
   12f04:	f363 0202 	bfi	r2, r3, #0, #3
   12f08:	f36f 02c5 	bfc	r2, #3, #3
   12f0c:	4b0d      	ldr	r3, [pc, #52]	; (12f44 <lfs_dir_compact+0x3e4>)
   12f0e:	490e      	ldr	r1, [pc, #56]	; (12f48 <lfs_dir_compact+0x3e8>)
   12f10:	1a5b      	subs	r3, r3, r1
   12f12:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   12f16:	f363 128f 	bfi	r2, r3, #6, #10
   12f1a:	f8ad 2000 	strh.w	r2, [sp]
   12f1e:	f8db 3004 	ldr.w	r3, [fp, #4]
   12f22:	f240 629a 	movw	r2, #1690	; 0x69a
   12f26:	4909      	ldr	r1, [pc, #36]	; (12f4c <lfs_dir_compact+0x3ec>)
   12f28:	4809      	ldr	r0, [pc, #36]	; (12f50 <lfs_dir_compact+0x3f0>)
   12f2a:	f7fa fdb3 	bl	da94 <log_3>
            return LFS_ERR_NOSPC;
   12f2e:	f06f 031b 	mvn.w	r3, #27
   12f32:	930b      	str	r3, [sp, #44]	; 0x2c
   12f34:	e000      	b.n	12f38 <lfs_dir_compact+0x3d8>
   12f36:	900b      	str	r0, [sp, #44]	; 0x2c
}
   12f38:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12f3a:	b01b      	add	sp, #108	; 0x6c
   12f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f40:	7ffffc0c 	.word	0x7ffffc0c
   12f44:	00019584 	.word	0x00019584
   12f48:	00019574 	.word	0x00019574
   12f4c:	0001a3dc 	.word	0x0001a3dc
   12f50:	0001a4e8 	.word	0x0001a4e8

00012f54 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
   12f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12f58:	b0a1      	sub	sp, #132	; 0x84
   12f5a:	4680      	mov	r8, r0
   12f5c:	460d      	mov	r5, r1
   12f5e:	4617      	mov	r7, r2
   12f60:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   12f62:	6a84      	ldr	r4, [r0, #40]	; 0x28
   12f64:	e003      	b.n	12f6e <lfs_dir_commit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   12f66:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
   12f68:	2b01      	cmp	r3, #1
   12f6a:	d012      	beq.n	12f92 <lfs_dir_commit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   12f6c:	6824      	ldr	r4, [r4, #0]
   12f6e:	b354      	cbz	r4, 12fc6 <lfs_dir_commit+0x72>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
   12f70:	f104 0308 	add.w	r3, r4, #8
   12f74:	42ab      	cmp	r3, r5
   12f76:	d0f9      	beq.n	12f6c <lfs_dir_commit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   12f78:	68a3      	ldr	r3, [r4, #8]
   12f7a:	682a      	ldr	r2, [r5, #0]
   12f7c:	4293      	cmp	r3, r2
   12f7e:	d0f2      	beq.n	12f66 <lfs_dir_commit+0x12>
   12f80:	68e0      	ldr	r0, [r4, #12]
   12f82:	6869      	ldr	r1, [r5, #4]
   12f84:	4281      	cmp	r1, r0
   12f86:	d0ee      	beq.n	12f66 <lfs_dir_commit+0x12>
   12f88:	428b      	cmp	r3, r1
   12f8a:	d0ec      	beq.n	12f66 <lfs_dir_commit+0x12>
   12f8c:	4290      	cmp	r0, r2
   12f8e:	d1ed      	bne.n	12f6c <lfs_dir_commit+0x18>
   12f90:	e7e9      	b.n	12f66 <lfs_dir_commit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   12f92:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12f94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12f98:	d0e8      	beq.n	12f6c <lfs_dir_commit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
   12f9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   12f9c:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
   12fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   12fa2:	429a      	cmp	r2, r3
   12fa4:	d9e2      	bls.n	12f6c <lfs_dir_commit+0x18>
            int err = lfs_file_outline(lfs, f);
   12fa6:	4621      	mov	r1, r4
   12fa8:	4640      	mov	r0, r8
   12faa:	f005 fb1c 	bl	185e6 <lfs_file_outline>
            if (err) {
   12fae:	4606      	mov	r6, r0
   12fb0:	2800      	cmp	r0, #0
   12fb2:	f040 81e6 	bne.w	13382 <lfs_dir_commit+0x42e>
            err = lfs_file_flush(lfs, f);
   12fb6:	4621      	mov	r1, r4
   12fb8:	4640      	mov	r0, r8
   12fba:	f7ff fcb9 	bl	12930 <lfs_file_flush>
            if (err) {
   12fbe:	4606      	mov	r6, r0
   12fc0:	2800      	cmp	r0, #0
   12fc2:	d0d3      	beq.n	12f6c <lfs_dir_commit+0x18>
   12fc4:	e1dd      	b.n	13382 <lfs_dir_commit+0x42e>
    lfs_mdir_t olddir = *dir;
   12fc6:	ac16      	add	r4, sp, #88	; 0x58
   12fc8:	462e      	mov	r6, r5
   12fca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12fce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   12fd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (int i = 0; i < attrcount; i++) {
   12fd6:	2300      	movs	r3, #0
    bool hasdelete = false;
   12fd8:	461e      	mov	r6, r3
    for (int i = 0; i < attrcount; i++) {
   12fda:	e003      	b.n	12fe4 <lfs_dir_commit+0x90>
            dir->count += 1;
   12fdc:	8aaa      	ldrh	r2, [r5, #20]
   12fde:	3201      	adds	r2, #1
   12fe0:	82aa      	strh	r2, [r5, #20]
    for (int i = 0; i < attrcount; i++) {
   12fe2:	3301      	adds	r3, #1
   12fe4:	454b      	cmp	r3, r9
   12fe6:	da26      	bge.n	13036 <lfs_dir_commit+0xe2>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   12fe8:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   12fec:	eb07 04c3 	add.w	r4, r7, r3, lsl #3
   12ff0:	f857 2033 	ldr.w	r2, [r7, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
   12ff4:	0d11      	lsrs	r1, r2, #20
   12ff6:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   12ffa:	f240 4001 	movw	r0, #1025	; 0x401
   12ffe:	4282      	cmp	r2, r0
   13000:	d0ec      	beq.n	12fdc <lfs_dir_commit+0x88>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
   13002:	f240 40ff 	movw	r0, #1279	; 0x4ff
   13006:	4282      	cmp	r2, r0
   13008:	d010      	beq.n	1302c <lfs_dir_commit+0xd8>
    return (tag & 0x70000000) >> 20;
   1300a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
   1300e:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
   13012:	d1e6      	bne.n	12fe2 <lfs_dir_commit+0x8e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
   13014:	6862      	ldr	r2, [r4, #4]
   13016:	6812      	ldr	r2, [r2, #0]
   13018:	61aa      	str	r2, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
   1301a:	6862      	ldr	r2, [r4, #4]
   1301c:	6852      	ldr	r2, [r2, #4]
   1301e:	61ea      	str	r2, [r5, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
   13020:	f857 200c 	ldr.w	r2, [r7, ip]
   13024:	f3c2 5200 	ubfx	r2, r2, #20, #1
   13028:	75ea      	strb	r2, [r5, #23]
            lfs_pair_fromle32(dir->tail);
   1302a:	e7da      	b.n	12fe2 <lfs_dir_commit+0x8e>
            dir->count -= 1;
   1302c:	8aaa      	ldrh	r2, [r5, #20]
   1302e:	3a01      	subs	r2, #1
   13030:	82aa      	strh	r2, [r5, #20]
            hasdelete = true;
   13032:	2601      	movs	r6, #1
   13034:	e7d5      	b.n	12fe2 <lfs_dir_commit+0x8e>
    if (hasdelete && dir->count == 0) {
   13036:	b116      	cbz	r6, 1303e <lfs_dir_commit+0xea>
   13038:	8aab      	ldrh	r3, [r5, #20]
   1303a:	2b00      	cmp	r3, #0
   1303c:	d03c      	beq.n	130b8 <lfs_dir_commit+0x164>
    if (dir->erased || dir->count >= 0xff) {
   1303e:	7dab      	ldrb	r3, [r5, #22]
   13040:	b91b      	cbnz	r3, 1304a <lfs_dir_commit+0xf6>
   13042:	8aab      	ldrh	r3, [r5, #20]
   13044:	2bfe      	cmp	r3, #254	; 0xfe
   13046:	f240 80f1 	bls.w	1322c <lfs_dir_commit+0x2d8>
            .block = dir->pair[0],
   1304a:	682b      	ldr	r3, [r5, #0]
        struct lfs_commit commit = {
   1304c:	930e      	str	r3, [sp, #56]	; 0x38
            .off = dir->off,
   1304e:	68ea      	ldr	r2, [r5, #12]
        struct lfs_commit commit = {
   13050:	920f      	str	r2, [sp, #60]	; 0x3c
            .ptag = dir->etag,
   13052:	692b      	ldr	r3, [r5, #16]
        struct lfs_commit commit = {
   13054:	9310      	str	r3, [sp, #64]	; 0x40
   13056:	f04f 31ff 	mov.w	r1, #4294967295
   1305a:	9111      	str	r1, [sp, #68]	; 0x44
   1305c:	9212      	str	r2, [sp, #72]	; 0x48
            .end = lfs->cfg->block_size - 8,
   1305e:	f8d8 1068 	ldr.w	r1, [r8, #104]	; 0x68
   13062:	69c9      	ldr	r1, [r1, #28]
   13064:	3908      	subs	r1, #8
        struct lfs_commit commit = {
   13066:	9113      	str	r1, [sp, #76]	; 0x4c
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   13068:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
   1306c:	a90e      	add	r1, sp, #56	; 0x38
   1306e:	911f      	str	r1, [sp, #124]	; 0x7c
        int err = lfs_dir_traverse(lfs,
   13070:	a91e      	add	r1, sp, #120	; 0x78
   13072:	9108      	str	r1, [sp, #32]
   13074:	49b0      	ldr	r1, [pc, #704]	; (13338 <lfs_dir_commit+0x3e4>)
   13076:	9107      	str	r1, [sp, #28]
   13078:	2100      	movs	r1, #0
   1307a:	9106      	str	r1, [sp, #24]
   1307c:	9105      	str	r1, [sp, #20]
   1307e:	9104      	str	r1, [sp, #16]
   13080:	9103      	str	r1, [sp, #12]
   13082:	9102      	str	r1, [sp, #8]
   13084:	f8cd 9004 	str.w	r9, [sp, #4]
   13088:	9700      	str	r7, [sp, #0]
   1308a:	4629      	mov	r1, r5
   1308c:	4640      	mov	r0, r8
   1308e:	f7fe fdbb 	bl	11c08 <lfs_dir_traverse>
        if (err) {
   13092:	4606      	mov	r6, r0
   13094:	2800      	cmp	r0, #0
   13096:	d038      	beq.n	1310a <lfs_dir_commit+0x1b6>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
   13098:	f110 0f1c 	cmn.w	r0, #28
   1309c:	f000 80c6 	beq.w	1322c <lfs_dir_commit+0x2d8>
   130a0:	f110 0f54 	cmn.w	r0, #84	; 0x54
   130a4:	f000 80c2 	beq.w	1322c <lfs_dir_commit+0x2d8>
            *dir = olddir;
   130a8:	ac16      	add	r4, sp, #88	; 0x58
   130aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   130ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   130ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   130b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
   130b6:	e164      	b.n	13382 <lfs_dir_commit+0x42e>
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
   130b8:	aa0e      	add	r2, sp, #56	; 0x38
   130ba:	4629      	mov	r1, r5
   130bc:	4640      	mov	r0, r8
   130be:	f004 fe1e 	bl	17cfe <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
   130c2:	4606      	mov	r6, r0
   130c4:	b150      	cbz	r0, 130dc <lfs_dir_commit+0x188>
   130c6:	f110 0f02 	cmn.w	r0, #2
   130ca:	d007      	beq.n	130dc <lfs_dir_commit+0x188>
            *dir = olddir;
   130cc:	ac16      	add	r4, sp, #88	; 0x58
   130ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   130d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   130d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   130d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
   130da:	e152      	b.n	13382 <lfs_dir_commit+0x42e>
        if (err != LFS_ERR_NOENT && pdir.split) {
   130dc:	f116 0f02 	cmn.w	r6, #2
   130e0:	d0ad      	beq.n	1303e <lfs_dir_commit+0xea>
   130e2:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   130e6:	2b00      	cmp	r3, #0
   130e8:	d0a9      	beq.n	1303e <lfs_dir_commit+0xea>
            err = lfs_dir_drop(lfs, &pdir, dir);
   130ea:	462a      	mov	r2, r5
   130ec:	a90e      	add	r1, sp, #56	; 0x38
   130ee:	4640      	mov	r0, r8
   130f0:	f000 f94e 	bl	13390 <lfs_dir_drop>
            if (err) {
   130f4:	4606      	mov	r6, r0
   130f6:	2800      	cmp	r0, #0
   130f8:	d0a1      	beq.n	1303e <lfs_dir_commit+0xea>
                *dir = olddir;
   130fa:	ac16      	add	r4, sp, #88	; 0x58
   130fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   130fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13100:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   13104:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
   13108:	e13b      	b.n	13382 <lfs_dir_commit+0x42e>
        lfs_gstate_t delta = {0};
   1310a:	2300      	movs	r3, #0
   1310c:	930b      	str	r3, [sp, #44]	; 0x2c
   1310e:	930c      	str	r3, [sp, #48]	; 0x30
   13110:	930d      	str	r3, [sp, #52]	; 0x34
        lfs_gstate_xor(&delta, &lfs->gstate);
   13112:	f108 0430 	add.w	r4, r8, #48	; 0x30
    for (int i = 0; i < 3; i++) {
   13116:	4603      	mov	r3, r0
   13118:	e008      	b.n	1312c <lfs_dir_commit+0x1d8>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   1311a:	a90b      	add	r1, sp, #44	; 0x2c
   1311c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   13120:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   13124:	4042      	eors	r2, r0
   13126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
   1312a:	3301      	adds	r3, #1
   1312c:	2b02      	cmp	r3, #2
   1312e:	ddf4      	ble.n	1311a <lfs_dir_commit+0x1c6>
        lfs_gstate_xor(&delta, &lfs->gdisk);
   13130:	f108 043c 	add.w	r4, r8, #60	; 0x3c
    for (int i = 0; i < 3; i++) {
   13134:	4633      	mov	r3, r6
   13136:	e008      	b.n	1314a <lfs_dir_commit+0x1f6>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   13138:	a90b      	add	r1, sp, #44	; 0x2c
   1313a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   1313e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   13142:	4042      	eors	r2, r0
   13144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
   13148:	3301      	adds	r3, #1
   1314a:	2b02      	cmp	r3, #2
   1314c:	ddf4      	ble.n	13138 <lfs_dir_commit+0x1e4>
        lfs_gstate_xor(&delta, &lfs->gdelta);
   1314e:	f108 0448 	add.w	r4, r8, #72	; 0x48
    for (int i = 0; i < 3; i++) {
   13152:	4633      	mov	r3, r6
   13154:	e008      	b.n	13168 <lfs_dir_commit+0x214>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   13156:	a90b      	add	r1, sp, #44	; 0x2c
   13158:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   1315c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   13160:	4042      	eors	r2, r0
   13162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
   13166:	3301      	adds	r3, #1
   13168:	2b02      	cmp	r3, #2
   1316a:	ddf4      	ble.n	13156 <lfs_dir_commit+0x202>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   1316c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1316e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   13172:	f023 0303 	bic.w	r3, r3, #3
   13176:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
   13178:	2e02      	cmp	r6, #2
   1317a:	dc07      	bgt.n	1318c <lfs_dir_commit+0x238>
        if (((uint32_t*)a)[i] != 0) {
   1317c:	ab20      	add	r3, sp, #128	; 0x80
   1317e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   13182:	f853 3c54 	ldr.w	r3, [r3, #-84]
   13186:	b993      	cbnz	r3, 131ae <lfs_dir_commit+0x25a>
    for (int i = 0; i < 3; i++) {
   13188:	3601      	adds	r6, #1
   1318a:	e7f5      	b.n	13178 <lfs_dir_commit+0x224>
    return true;
   1318c:	2301      	movs	r3, #1
        if (!lfs_gstate_iszero(&delta)) {
   1318e:	bb33      	cbnz	r3, 131de <lfs_dir_commit+0x28a>
            err = lfs_dir_getgstate(lfs, dir, &delta);
   13190:	aa0b      	add	r2, sp, #44	; 0x2c
   13192:	4629      	mov	r1, r5
   13194:	4640      	mov	r0, r8
   13196:	f7fe fee7 	bl	11f68 <lfs_dir_getgstate>
            if (err) {
   1319a:	4606      	mov	r6, r0
   1319c:	b148      	cbz	r0, 131b2 <lfs_dir_commit+0x25e>
                *dir = olddir;
   1319e:	ac16      	add	r4, sp, #88	; 0x58
   131a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   131a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   131a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   131a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
   131ac:	e0e9      	b.n	13382 <lfs_dir_commit+0x42e>
            return false;
   131ae:	2300      	movs	r3, #0
   131b0:	e7ed      	b.n	1318e <lfs_dir_commit+0x23a>
            err = lfs_dir_commitattr(lfs, &commit,
   131b2:	ab0b      	add	r3, sp, #44	; 0x2c
   131b4:	4a61      	ldr	r2, [pc, #388]	; (1333c <lfs_dir_commit+0x3e8>)
   131b6:	a90e      	add	r1, sp, #56	; 0x38
   131b8:	4640      	mov	r0, r8
   131ba:	f004 ff30 	bl	1801e <lfs_dir_commitattr>
            if (err) {
   131be:	4606      	mov	r6, r0
   131c0:	b168      	cbz	r0, 131de <lfs_dir_commit+0x28a>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
   131c2:	f110 0f1c 	cmn.w	r0, #28
   131c6:	d031      	beq.n	1322c <lfs_dir_commit+0x2d8>
   131c8:	f110 0f54 	cmn.w	r0, #84	; 0x54
   131cc:	d02e      	beq.n	1322c <lfs_dir_commit+0x2d8>
                *dir = olddir;
   131ce:	ac16      	add	r4, sp, #88	; 0x58
   131d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   131d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   131d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   131d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
   131dc:	e0d1      	b.n	13382 <lfs_dir_commit+0x42e>
        err = lfs_dir_commitcrc(lfs, &commit);
   131de:	a90e      	add	r1, sp, #56	; 0x38
   131e0:	4640      	mov	r0, r8
   131e2:	f004 ff8e 	bl	18102 <lfs_dir_commitcrc>
        if (err) {
   131e6:	4606      	mov	r6, r0
   131e8:	b168      	cbz	r0, 13206 <lfs_dir_commit+0x2b2>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
   131ea:	f110 0f1c 	cmn.w	r0, #28
   131ee:	d01d      	beq.n	1322c <lfs_dir_commit+0x2d8>
   131f0:	f110 0f54 	cmn.w	r0, #84	; 0x54
   131f4:	d01a      	beq.n	1322c <lfs_dir_commit+0x2d8>
            *dir = olddir;
   131f6:	ac16      	add	r4, sp, #88	; 0x58
   131f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   131fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   131fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   13200:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
   13204:	e0bd      	b.n	13382 <lfs_dir_commit+0x42e>
        dir->off = commit.off;
   13206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13208:	60eb      	str	r3, [r5, #12]
        dir->etag = commit.ptag;
   1320a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1320c:	612b      	str	r3, [r5, #16]
        lfs->gdisk = lfs->gstate;
   1320e:	f108 033c 	add.w	r3, r8, #60	; 0x3c
   13212:	f108 0230 	add.w	r2, r8, #48	; 0x30
   13216:	ca07      	ldmia	r2, {r0, r1, r2}
   13218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
   1321c:	2200      	movs	r2, #0
   1321e:	f8c8 2048 	str.w	r2, [r8, #72]	; 0x48
   13222:	f8c8 204c 	str.w	r2, [r8, #76]	; 0x4c
   13226:	f8c8 2050 	str.w	r2, [r8, #80]	; 0x50
    if (dir->erased || dir->count >= 0xff) {
   1322a:	e010      	b.n	1324e <lfs_dir_commit+0x2fa>
    rcache->block = LFS_BLOCK_NULL;
   1322c:	f04f 33ff 	mov.w	r3, #4294967295
   13230:	f8c8 3010 	str.w	r3, [r8, #16]
        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
   13234:	8aab      	ldrh	r3, [r5, #20]
   13236:	9302      	str	r3, [sp, #8]
   13238:	2300      	movs	r3, #0
   1323a:	9301      	str	r3, [sp, #4]
   1323c:	9500      	str	r5, [sp, #0]
   1323e:	464b      	mov	r3, r9
   13240:	463a      	mov	r2, r7
   13242:	4629      	mov	r1, r5
   13244:	4640      	mov	r0, r8
   13246:	f7ff fc8b 	bl	12b60 <lfs_dir_compact>
        if (err) {
   1324a:	4606      	mov	r6, r0
   1324c:	b910      	cbnz	r0, 13254 <lfs_dir_commit+0x300>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   1324e:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
   13252:	e04e      	b.n	132f2 <lfs_dir_commit+0x39e>
            *dir = olddir;
   13254:	ac16      	add	r4, sp, #88	; 0x58
   13256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1325a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1325e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
   13262:	e08e      	b.n	13382 <lfs_dir_commit+0x42e>
                        d->id == lfs_tag_id(attrs[i].tag)) {
   13264:	f8bc 2004 	ldrh.w	r2, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
   13268:	f3c6 2389 	ubfx	r3, r6, #10, #10
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   1326c:	429a      	cmp	r2, r3
   1326e:	d110      	bne.n	13292 <lfs_dir_commit+0x33e>
                    d->m.pair[0] = LFS_BLOCK_NULL;
   13270:	f04f 33ff 	mov.w	r3, #4294967295
   13274:	f8cc 3008 	str.w	r3, [ip, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
   13278:	f8cc 300c 	str.w	r3, [ip, #12]
            for (int i = 0; i < attrcount; i++) {
   1327c:	3101      	adds	r1, #1
   1327e:	4549      	cmp	r1, r9
   13280:	da35      	bge.n	132ee <lfs_dir_commit+0x39a>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   13282:	f857 6031 	ldr.w	r6, [r7, r1, lsl #3]
    return (tag & 0x7ff00000) >> 20;
   13286:	f3c6 540a 	ubfx	r4, r6, #20, #11
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   1328a:	f240 43ff 	movw	r3, #1279	; 0x4ff
   1328e:	429c      	cmp	r4, r3
   13290:	d0e8      	beq.n	13264 <lfs_dir_commit+0x310>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   13292:	f240 43ff 	movw	r3, #1279	; 0x4ff
   13296:	429c      	cmp	r4, r3
   13298:	d016      	beq.n	132c8 <lfs_dir_commit+0x374>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
   1329a:	f240 4301 	movw	r3, #1025	; 0x401
   1329e:	429c      	cmp	r4, r3
   132a0:	d1ec      	bne.n	1327c <lfs_dir_commit+0x328>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
   132a2:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
   132a6:	f3c6 2689 	ubfx	r6, r6, #10, #10
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
   132aa:	42b3      	cmp	r3, r6
   132ac:	d3e6      	bcc.n	1327c <lfs_dir_commit+0x328>
                    d->id += 1;
   132ae:	3301      	adds	r3, #1
   132b0:	f8ac 3004 	strh.w	r3, [ip, #4]
                    if (d->type == LFS_TYPE_DIR) {
   132b4:	f89c 3006 	ldrb.w	r3, [ip, #6]
   132b8:	2b02      	cmp	r3, #2
   132ba:	d1df      	bne.n	1327c <lfs_dir_commit+0x328>
                        ((lfs_dir_t*)d)->pos += 1;
   132bc:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
   132c0:	3301      	adds	r3, #1
   132c2:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
   132c6:	e7d9      	b.n	1327c <lfs_dir_commit+0x328>
                        d->id > lfs_tag_id(attrs[i].tag)) {
   132c8:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
   132cc:	f3c6 2289 	ubfx	r2, r6, #10, #10
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   132d0:	4293      	cmp	r3, r2
   132d2:	d9e2      	bls.n	1329a <lfs_dir_commit+0x346>
                    d->id -= 1;
   132d4:	3b01      	subs	r3, #1
   132d6:	f8ac 3004 	strh.w	r3, [ip, #4]
                    if (d->type == LFS_TYPE_DIR) {
   132da:	f89c 3006 	ldrb.w	r3, [ip, #6]
   132de:	2b02      	cmp	r3, #2
   132e0:	d1cc      	bne.n	1327c <lfs_dir_commit+0x328>
                        ((lfs_dir_t*)d)->pos -= 1;
   132e2:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
   132e6:	3b01      	subs	r3, #1
   132e8:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
   132ec:	e7c6      	b.n	1327c <lfs_dir_commit+0x328>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   132ee:	f8dc c000 	ldr.w	ip, [ip]
   132f2:	f1bc 0f00 	cmp.w	ip, #0
   132f6:	d01c      	beq.n	13332 <lfs_dir_commit+0x3de>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
   132f8:	f10c 0308 	add.w	r3, ip, #8
   132fc:	42ab      	cmp	r3, r5
   132fe:	d0f6      	beq.n	132ee <lfs_dir_commit+0x39a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   13300:	f8dc 3008 	ldr.w	r3, [ip, #8]
   13304:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13306:	4293      	cmp	r3, r2
   13308:	d008      	beq.n	1331c <lfs_dir_commit+0x3c8>
   1330a:	f8dc 000c 	ldr.w	r0, [ip, #12]
   1330e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13310:	4288      	cmp	r0, r1
   13312:	d003      	beq.n	1331c <lfs_dir_commit+0x3c8>
   13314:	428b      	cmp	r3, r1
   13316:	d001      	beq.n	1331c <lfs_dir_commit+0x3c8>
   13318:	4282      	cmp	r2, r0
   1331a:	d1e8      	bne.n	132ee <lfs_dir_commit+0x39a>
            d->m = *dir;
   1331c:	f10c 0408 	add.w	r4, ip, #8
   13320:	462e      	mov	r6, r5
   13322:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13326:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1332a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
   1332e:	2100      	movs	r1, #0
   13330:	e7a5      	b.n	1327e <lfs_dir_commit+0x32a>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   13332:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
   13336:	e004      	b.n	13342 <lfs_dir_commit+0x3ee>
   13338:	000180db 	.word	0x000180db
   1333c:	7ffffc0c 	.word	0x7ffffc0c
   13340:	6824      	ldr	r4, [r4, #0]
   13342:	b314      	cbz	r4, 1338a <lfs_dir_commit+0x436>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   13344:	68a3      	ldr	r3, [r4, #8]
   13346:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13348:	4293      	cmp	r3, r2
   1334a:	d007      	beq.n	1335c <lfs_dir_commit+0x408>
   1334c:	68e0      	ldr	r0, [r4, #12]
   1334e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13350:	4288      	cmp	r0, r1
   13352:	d003      	beq.n	1335c <lfs_dir_commit+0x408>
   13354:	428b      	cmp	r3, r1
   13356:	d001      	beq.n	1335c <lfs_dir_commit+0x408>
   13358:	4282      	cmp	r2, r0
   1335a:	d1f1      	bne.n	13340 <lfs_dir_commit+0x3ec>
            while (d->id >= d->m.count && d->m.split) {
   1335c:	88a3      	ldrh	r3, [r4, #4]
   1335e:	8ba2      	ldrh	r2, [r4, #28]
   13360:	4293      	cmp	r3, r2
   13362:	d3ed      	bcc.n	13340 <lfs_dir_commit+0x3ec>
   13364:	7fe1      	ldrb	r1, [r4, #31]
   13366:	2900      	cmp	r1, #0
   13368:	d0ea      	beq.n	13340 <lfs_dir_commit+0x3ec>
                d->id -= d->m.count;
   1336a:	1a9b      	subs	r3, r3, r2
   1336c:	80a3      	strh	r3, [r4, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   1336e:	f104 0220 	add.w	r2, r4, #32
   13372:	f104 0108 	add.w	r1, r4, #8
   13376:	4640      	mov	r0, r8
   13378:	f004 fcb3 	bl	17ce2 <lfs_dir_fetch>
                if (err) {
   1337c:	4606      	mov	r6, r0
   1337e:	2800      	cmp	r0, #0
   13380:	d0ec      	beq.n	1335c <lfs_dir_commit+0x408>
}
   13382:	4630      	mov	r0, r6
   13384:	b021      	add	sp, #132	; 0x84
   13386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
   1338a:	2600      	movs	r6, #0
   1338c:	e7f9      	b.n	13382 <lfs_dir_commit+0x42e>
   1338e:	bf00      	nop

00013390 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
   13390:	b570      	push	{r4, r5, r6, lr}
   13392:	b082      	sub	sp, #8
   13394:	4605      	mov	r5, r0
   13396:	460e      	mov	r6, r1
   13398:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
   1339a:	f100 0248 	add.w	r2, r0, #72	; 0x48
   1339e:	4621      	mov	r1, r4
   133a0:	f7fe fde2 	bl	11f68 <lfs_dir_getgstate>
    if (err) {
   133a4:	b108      	cbz	r0, 133aa <lfs_dir_drop+0x1a>
}
   133a6:	b002      	add	sp, #8
   133a8:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
   133aa:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
   133ae:	7de3      	ldrb	r3, [r4, #23]
   133b0:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
   133b4:	4b05      	ldr	r3, [pc, #20]	; (133cc <lfs_dir_drop+0x3c>)
   133b6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   133ba:	9300      	str	r3, [sp, #0]
   133bc:	9101      	str	r1, [sp, #4]
   133be:	2301      	movs	r3, #1
   133c0:	466a      	mov	r2, sp
   133c2:	4631      	mov	r1, r6
   133c4:	4628      	mov	r0, r5
   133c6:	f7ff fdc5 	bl	12f54 <lfs_dir_commit>
    if (err) {
   133ca:	e7ec      	b.n	133a6 <lfs_dir_drop+0x16>
   133cc:	000ffc08 	.word	0x000ffc08

000133d0 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs) {
   133d0:	b570      	push	{r4, r5, r6, lr}
   133d2:	b09e      	sub	sp, #120	; 0x78
    return lfs_tag_size(a->tag);
   133d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
   133d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
   133da:	2b00      	cmp	r3, #0
   133dc:	d07d      	beq.n	134da <lfs_fs_deorphan+0x10a>
   133de:	4606      	mov	r6, r0
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
   133e0:	2300      	movs	r3, #0
   133e2:	9314      	str	r3, [sp, #80]	; 0x50
   133e4:	9315      	str	r3, [sp, #84]	; 0x54
   133e6:	9316      	str	r3, [sp, #88]	; 0x58
   133e8:	9317      	str	r3, [sp, #92]	; 0x5c
   133ea:	9318      	str	r3, [sp, #96]	; 0x60
   133ec:	9319      	str	r3, [sp, #100]	; 0x64
   133ee:	931a      	str	r3, [sp, #104]	; 0x68
   133f0:	2301      	movs	r3, #1
   133f2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   133f6:	931b      	str	r3, [sp, #108]	; 0x6c
    while (!lfs_pair_isnull(pdir.tail)) {
   133f8:	e05c      	b.n	134b4 <lfs_fs_deorphan+0xe4>
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
   133fa:	aa04      	add	r2, sp, #16
   133fc:	a91a      	add	r1, sp, #104	; 0x68
   133fe:	4630      	mov	r0, r6
   13400:	f7fe fbbc 	bl	11b7c <lfs_fs_parent>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
   13404:	1e03      	subs	r3, r0, #0
   13406:	db23      	blt.n	13450 <lfs_fs_deorphan+0x80>
            if (tag == LFS_ERR_NOENT) {
   13408:	f113 0f02 	cmn.w	r3, #2
   1340c:	d025      	beq.n	1345a <lfs_fs_deorphan+0x8a>
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
   1340e:	aa02      	add	r2, sp, #8
   13410:	9200      	str	r2, [sp, #0]
   13412:	4a34      	ldr	r2, [pc, #208]	; (134e4 <lfs_fs_deorphan+0x114>)
   13414:	a904      	add	r1, sp, #16
   13416:	4630      	mov	r0, r6
   13418:	f004 fcaf 	bl	17d7a <lfs_dir_get>
            if (res < 0) {
   1341c:	2800      	cmp	r0, #0
   1341e:	db30      	blt.n	13482 <lfs_fs_deorphan+0xb2>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
   13420:	9b02      	ldr	r3, [sp, #8]
   13422:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13424:	4293      	cmp	r3, r2
   13426:	d021      	beq.n	1346c <lfs_fs_deorphan+0x9c>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
   13428:	991b      	ldr	r1, [sp, #108]	; 0x6c
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
   1342a:	4299      	cmp	r1, r3
   1342c:	d024      	beq.n	13478 <lfs_fs_deorphan+0xa8>
            if (!lfs_pair_sync(pair, pdir.tail)) {
   1342e:	f014 0f01 	tst.w	r4, #1
   13432:	d137      	bne.n	134a4 <lfs_fs_deorphan+0xd4>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
   13434:	4b2c      	ldr	r3, [pc, #176]	; (134e8 <lfs_fs_deorphan+0x118>)
   13436:	931c      	str	r3, [sp, #112]	; 0x70
   13438:	ab02      	add	r3, sp, #8
   1343a:	931d      	str	r3, [sp, #116]	; 0x74
   1343c:	2301      	movs	r3, #1
   1343e:	aa1c      	add	r2, sp, #112	; 0x70
   13440:	a914      	add	r1, sp, #80	; 0x50
   13442:	4630      	mov	r0, r6
   13444:	f7ff fd86 	bl	12f54 <lfs_dir_commit>
                if (err) {
   13448:	4604      	mov	r4, r0
   1344a:	2800      	cmp	r0, #0
   1344c:	d146      	bne.n	134dc <lfs_fs_deorphan+0x10c>
   1344e:	e031      	b.n	134b4 <lfs_fs_deorphan+0xe4>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
   13450:	f113 0f02 	cmn.w	r3, #2
   13454:	d0d8      	beq.n	13408 <lfs_fs_deorphan+0x38>
                return tag;
   13456:	461c      	mov	r4, r3
   13458:	e040      	b.n	134dc <lfs_fs_deorphan+0x10c>
                err = lfs_dir_drop(lfs, &pdir, &dir);
   1345a:	aa0c      	add	r2, sp, #48	; 0x30
   1345c:	a914      	add	r1, sp, #80	; 0x50
   1345e:	4630      	mov	r0, r6
   13460:	f7ff ff96 	bl	13390 <lfs_dir_drop>
                if (err) {
   13464:	4604      	mov	r4, r0
   13466:	2800      	cmp	r0, #0
   13468:	d138      	bne.n	134dc <lfs_fs_deorphan+0x10c>
   1346a:	e023      	b.n	134b4 <lfs_fs_deorphan+0xe4>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
   1346c:	9803      	ldr	r0, [sp, #12]
   1346e:	991b      	ldr	r1, [sp, #108]	; 0x6c
   13470:	4288      	cmp	r0, r1
   13472:	d1d9      	bne.n	13428 <lfs_fs_deorphan+0x58>
   13474:	2401      	movs	r4, #1
   13476:	e7da      	b.n	1342e <lfs_fs_deorphan+0x5e>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
   13478:	9b03      	ldr	r3, [sp, #12]
   1347a:	4293      	cmp	r3, r2
   1347c:	d1d7      	bne.n	1342e <lfs_fs_deorphan+0x5e>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
   1347e:	2401      	movs	r4, #1
   13480:	e7d5      	b.n	1342e <lfs_fs_deorphan+0x5e>
                return res;
   13482:	4604      	mov	r4, r0
   13484:	e02a      	b.n	134dc <lfs_fs_deorphan+0x10c>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   13486:	2301      	movs	r3, #1
   13488:	e000      	b.n	1348c <lfs_fs_deorphan+0xbc>
   1348a:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(pdir.tail)) {
   1348c:	b9e3      	cbnz	r3, 134c8 <lfs_fs_deorphan+0xf8>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
   1348e:	aa1a      	add	r2, sp, #104	; 0x68
   13490:	a90c      	add	r1, sp, #48	; 0x30
   13492:	4630      	mov	r0, r6
   13494:	f004 fc25 	bl	17ce2 <lfs_dir_fetch>
        if (err) {
   13498:	4604      	mov	r4, r0
   1349a:	b9f8      	cbnz	r0, 134dc <lfs_fs_deorphan+0x10c>
        if (!pdir.split) {
   1349c:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   134a0:	2b00      	cmp	r3, #0
   134a2:	d0aa      	beq.n	133fa <lfs_fs_deorphan+0x2a>
        pdir = dir;
   134a4:	ac14      	add	r4, sp, #80	; 0x50
   134a6:	ad0c      	add	r5, sp, #48	; 0x30
   134a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   134aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   134ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   134b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   134b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   134b6:	f1b3 3fff 	cmp.w	r3, #4294967295
   134ba:	d0e6      	beq.n	1348a <lfs_fs_deorphan+0xba>
   134bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   134be:	f1b3 3fff 	cmp.w	r3, #4294967295
   134c2:	d0e0      	beq.n	13486 <lfs_fs_deorphan+0xb6>
   134c4:	2300      	movs	r3, #0
   134c6:	e7e1      	b.n	1348c <lfs_fs_deorphan+0xbc>
    return lfs_tag_size(a->tag);
   134c8:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
   134cc:	4249      	negs	r1, r1
   134ce:	b249      	sxtb	r1, r1
   134d0:	4630      	mov	r0, r6
   134d2:	f004 faac 	bl	17a2e <lfs_fs_preporphans>
    return 0;
   134d6:	2400      	movs	r4, #0
   134d8:	e000      	b.n	134dc <lfs_fs_deorphan+0x10c>
        return 0;
   134da:	2400      	movs	r4, #0
}
   134dc:	4620      	mov	r0, r4
   134de:	b01e      	add	sp, #120	; 0x78
   134e0:	bd70      	pop	{r4, r5, r6, pc}
   134e2:	bf00      	nop
   134e4:	7ffffc00 	.word	0x7ffffc00
   134e8:	600ffc08 	.word	0x600ffc08

000134ec <lfs_mkdir>:
int lfs_mkdir(lfs_t *lfs, const char *path) {
   134ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   134ee:	b0ab      	sub	sp, #172	; 0xac
   134f0:	4604      	mov	r4, r0
   134f2:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
   134f4:	f005 fac2 	bl	18a7c <lfs_fs_forceconsistency>
    if (err) {
   134f8:	4603      	mov	r3, r0
   134fa:	b110      	cbz	r0, 13502 <lfs_mkdir+0x16>
}
   134fc:	4618      	mov	r0, r3
   134fe:	b02b      	add	sp, #172	; 0xac
   13500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cwd.next = lfs->mlist;
   13502:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13504:	931c      	str	r3, [sp, #112]	; 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
   13506:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
   1350a:	aa01      	add	r2, sp, #4
   1350c:	a91e      	add	r1, sp, #120	; 0x78
   1350e:	4620      	mov	r0, r4
   13510:	f7fe fd54 	bl	11fbc <lfs_dir_find>
   13514:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
   13516:	f110 0f02 	cmn.w	r0, #2
   1351a:	d12a      	bne.n	13572 <lfs_mkdir+0x86>
   1351c:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
   13520:	f240 32ff 	movw	r2, #1023	; 0x3ff
   13524:	4291      	cmp	r1, r2
   13526:	d024      	beq.n	13572 <lfs_mkdir+0x86>
    lfs_size_t nlen = strlen(path);
   13528:	9801      	ldr	r0, [sp, #4]
   1352a:	f003 fcf5 	bl	16f18 <strlen>
   1352e:	4607      	mov	r7, r0
    if (nlen > lfs->name_max) {
   13530:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   13532:	4283      	cmp	r3, r0
   13534:	d37c      	bcc.n	13630 <lfs_mkdir+0x144>
    lfs_alloc_ack(lfs);
   13536:	4620      	mov	r0, r4
   13538:	f004 fa58 	bl	179ec <lfs_alloc_ack>
    err = lfs_dir_alloc(lfs, &dir);
   1353c:	a913      	add	r1, sp, #76	; 0x4c
   1353e:	4620      	mov	r0, r4
   13540:	f005 f816 	bl	18570 <lfs_dir_alloc>
    if (err) {
   13544:	4603      	mov	r3, r0
   13546:	2800      	cmp	r0, #0
   13548:	d1d8      	bne.n	134fc <lfs_mkdir+0x10>
    lfs_mdir_t pred = cwd.m;
   1354a:	ad0b      	add	r5, sp, #44	; 0x2c
   1354c:	ae1e      	add	r6, sp, #120	; 0x78
   1354e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13552:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   13556:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    while (pred.split) {
   1355a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1355e:	b16b      	cbz	r3, 1357c <lfs_mkdir+0x90>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
   13560:	aa11      	add	r2, sp, #68	; 0x44
   13562:	a90b      	add	r1, sp, #44	; 0x2c
   13564:	4620      	mov	r0, r4
   13566:	f004 fbbc 	bl	17ce2 <lfs_dir_fetch>
        if (err) {
   1356a:	4603      	mov	r3, r0
   1356c:	2800      	cmp	r0, #0
   1356e:	d0f4      	beq.n	1355a <lfs_mkdir+0x6e>
   13570:	e7c4      	b.n	134fc <lfs_mkdir+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
   13572:	2b00      	cmp	r3, #0
   13574:	dbc2      	blt.n	134fc <lfs_mkdir+0x10>
   13576:	f06f 0310 	mvn.w	r3, #16
   1357a:	e7bf      	b.n	134fc <lfs_mkdir+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
   1357c:	4b2e      	ldr	r3, [pc, #184]	; (13638 <lfs_mkdir+0x14c>)
   1357e:	9326      	str	r3, [sp, #152]	; 0x98
   13580:	ab11      	add	r3, sp, #68	; 0x44
   13582:	9327      	str	r3, [sp, #156]	; 0x9c
   13584:	2301      	movs	r3, #1
   13586:	aa26      	add	r2, sp, #152	; 0x98
   13588:	a913      	add	r1, sp, #76	; 0x4c
   1358a:	4620      	mov	r0, r4
   1358c:	f7ff fce2 	bl	12f54 <lfs_dir_commit>
    if (err) {
   13590:	4603      	mov	r3, r0
   13592:	2800      	cmp	r0, #0
   13594:	d1b2      	bne.n	134fc <lfs_mkdir+0x10>
    if (cwd.m.split) {
   13596:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
   1359a:	bb2b      	cbnz	r3, 135e8 <lfs_mkdir+0xfc>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
   1359c:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   135a0:	029b      	lsls	r3, r3, #10
   135a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   135a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   135aa:	9203      	str	r2, [sp, #12]
   135ac:	2200      	movs	r2, #0
   135ae:	9204      	str	r2, [sp, #16]
   135b0:	431f      	orrs	r7, r3
   135b2:	f447 1700 	orr.w	r7, r7, #2097152	; 0x200000
   135b6:	9705      	str	r7, [sp, #20]
   135b8:	9a01      	ldr	r2, [sp, #4]
   135ba:	9206      	str	r2, [sp, #24]
   135bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   135c0:	f043 0308 	orr.w	r3, r3, #8
   135c4:	9307      	str	r3, [sp, #28]
   135c6:	ab13      	add	r3, sp, #76	; 0x4c
   135c8:	9308      	str	r3, [sp, #32]
   135ca:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
   135ce:	bb6b      	cbnz	r3, 1362c <lfs_mkdir+0x140>
   135d0:	4b19      	ldr	r3, [pc, #100]	; (13638 <lfs_mkdir+0x14c>)
   135d2:	9309      	str	r3, [sp, #36]	; 0x24
   135d4:	ab13      	add	r3, sp, #76	; 0x4c
   135d6:	930a      	str	r3, [sp, #40]	; 0x28
   135d8:	2304      	movs	r3, #4
   135da:	aa03      	add	r2, sp, #12
   135dc:	a91e      	add	r1, sp, #120	; 0x78
   135de:	4620      	mov	r0, r4
   135e0:	f7ff fcb8 	bl	12f54 <lfs_dir_commit>
   135e4:	4603      	mov	r3, r0
    if (err) {
   135e6:	e789      	b.n	134fc <lfs_mkdir+0x10>
        lfs_fs_preporphans(lfs, +1);
   135e8:	2101      	movs	r1, #1
   135ea:	4620      	mov	r0, r4
   135ec:	f004 fa1f 	bl	17a2e <lfs_fs_preporphans>
        cwd.type = 0;
   135f0:	2300      	movs	r3, #0
   135f2:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
        cwd.id = 0;
   135f6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        lfs->mlist = &cwd;
   135fa:	ab1c      	add	r3, sp, #112	; 0x70
   135fc:	62a3      	str	r3, [r4, #40]	; 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
   135fe:	4b0e      	ldr	r3, [pc, #56]	; (13638 <lfs_mkdir+0x14c>)
   13600:	9328      	str	r3, [sp, #160]	; 0xa0
   13602:	ab13      	add	r3, sp, #76	; 0x4c
   13604:	9329      	str	r3, [sp, #164]	; 0xa4
   13606:	2301      	movs	r3, #1
   13608:	aa28      	add	r2, sp, #160	; 0xa0
   1360a:	a90b      	add	r1, sp, #44	; 0x2c
   1360c:	4620      	mov	r0, r4
   1360e:	f7ff fca1 	bl	12f54 <lfs_dir_commit>
        if (err) {
   13612:	4603      	mov	r3, r0
   13614:	b110      	cbz	r0, 1361c <lfs_mkdir+0x130>
            lfs->mlist = cwd.next;
   13616:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13618:	62a2      	str	r2, [r4, #40]	; 0x28
            return err;
   1361a:	e76f      	b.n	134fc <lfs_mkdir+0x10>
        lfs->mlist = cwd.next;
   1361c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1361e:	62a3      	str	r3, [r4, #40]	; 0x28
        lfs_fs_preporphans(lfs, -1);
   13620:	f04f 31ff 	mov.w	r1, #4294967295
   13624:	4620      	mov	r0, r4
   13626:	f004 fa02 	bl	17a2e <lfs_fs_preporphans>
   1362a:	e7b7      	b.n	1359c <lfs_mkdir+0xb0>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
   1362c:	2300      	movs	r3, #0
   1362e:	e7d0      	b.n	135d2 <lfs_mkdir+0xe6>
        return LFS_ERR_NAMETOOLONG;
   13630:	f06f 0323 	mvn.w	r3, #35	; 0x23
   13634:	e762      	b.n	134fc <lfs_mkdir+0x10>
   13636:	bf00      	nop
   13638:	600ffc08 	.word	0x600ffc08

0001363c <lfs_fs_relocate>:
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
   1363c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13640:	b090      	sub	sp, #64	; 0x40
   13642:	4607      	mov	r7, r0
   13644:	460c      	mov	r4, r1
   13646:	4615      	mov	r5, r2
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   13648:	680b      	ldr	r3, [r1, #0]
   1364a:	6a02      	ldr	r2, [r0, #32]
   1364c:	429a      	cmp	r2, r3
   1364e:	d007      	beq.n	13660 <lfs_fs_relocate+0x24>
   13650:	6848      	ldr	r0, [r1, #4]
   13652:	6a79      	ldr	r1, [r7, #36]	; 0x24
   13654:	4288      	cmp	r0, r1
   13656:	d003      	beq.n	13660 <lfs_fs_relocate+0x24>
   13658:	4299      	cmp	r1, r3
   1365a:	d001      	beq.n	13660 <lfs_fs_relocate+0x24>
   1365c:	4282      	cmp	r2, r0
   1365e:	d103      	bne.n	13668 <lfs_fs_relocate+0x2c>
        lfs->root[0] = newpair[0];
   13660:	682b      	ldr	r3, [r5, #0]
   13662:	623b      	str	r3, [r7, #32]
        lfs->root[1] = newpair[1];
   13664:	686b      	ldr	r3, [r5, #4]
   13666:	627b      	str	r3, [r7, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   13668:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1366a:	e007      	b.n	1367c <lfs_fs_relocate+0x40>
            d->m.pair[0] = newpair[0];
   1366c:	682a      	ldr	r2, [r5, #0]
   1366e:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
   13670:	686a      	ldr	r2, [r5, #4]
   13672:	60da      	str	r2, [r3, #12]
        if (d->type == LFS_TYPE_DIR &&
   13674:	799a      	ldrb	r2, [r3, #6]
   13676:	2a02      	cmp	r2, #2
   13678:	d00e      	beq.n	13698 <lfs_fs_relocate+0x5c>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   1367a:	681b      	ldr	r3, [r3, #0]
   1367c:	b1eb      	cbz	r3, 136ba <lfs_fs_relocate+0x7e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   1367e:	6822      	ldr	r2, [r4, #0]
   13680:	6899      	ldr	r1, [r3, #8]
   13682:	428a      	cmp	r2, r1
   13684:	d0f2      	beq.n	1366c <lfs_fs_relocate+0x30>
   13686:	6860      	ldr	r0, [r4, #4]
   13688:	68de      	ldr	r6, [r3, #12]
   1368a:	4286      	cmp	r6, r0
   1368c:	d0ee      	beq.n	1366c <lfs_fs_relocate+0x30>
   1368e:	42b2      	cmp	r2, r6
   13690:	d0ec      	beq.n	1366c <lfs_fs_relocate+0x30>
   13692:	4281      	cmp	r1, r0
   13694:	d1ee      	bne.n	13674 <lfs_fs_relocate+0x38>
   13696:	e7e9      	b.n	1366c <lfs_fs_relocate+0x30>
   13698:	6822      	ldr	r2, [r4, #0]
   1369a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1369c:	4291      	cmp	r1, r2
   1369e:	d007      	beq.n	136b0 <lfs_fs_relocate+0x74>
   136a0:	6866      	ldr	r6, [r4, #4]
   136a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
   136a4:	4286      	cmp	r6, r0
   136a6:	d003      	beq.n	136b0 <lfs_fs_relocate+0x74>
   136a8:	4290      	cmp	r0, r2
   136aa:	d001      	beq.n	136b0 <lfs_fs_relocate+0x74>
   136ac:	42b1      	cmp	r1, r6
   136ae:	d1e4      	bne.n	1367a <lfs_fs_relocate+0x3e>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
   136b0:	682a      	ldr	r2, [r5, #0]
   136b2:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
   136b4:	686a      	ldr	r2, [r5, #4]
   136b6:	631a      	str	r2, [r3, #48]	; 0x30
   136b8:	e7df      	b.n	1367a <lfs_fs_relocate+0x3e>
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
   136ba:	466a      	mov	r2, sp
   136bc:	4621      	mov	r1, r4
   136be:	4638      	mov	r0, r7
   136c0:	f7fe fa5c 	bl	11b7c <lfs_fs_parent>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
   136c4:	1e06      	subs	r6, r0, #0
   136c6:	db1a      	blt.n	136fe <lfs_fs_relocate+0xc2>
    if (tag != LFS_ERR_NOENT) {
   136c8:	f116 0f02 	cmn.w	r6, #2
   136cc:	d058      	beq.n	13780 <lfs_fs_relocate+0x144>
        lfs_fs_preporphans(lfs, +1);
   136ce:	2101      	movs	r1, #1
   136d0:	4638      	mov	r0, r7
   136d2:	f004 f9ac 	bl	17a2e <lfs_fs_preporphans>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   136d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
   136d8:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   136da:	f412 6fe0 	tst.w	r2, #1792	; 0x700
   136de:	d014      	beq.n	1370a <lfs_fs_relocate+0xce>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   136e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   136e2:	9900      	ldr	r1, [sp, #0]
   136e4:	428a      	cmp	r2, r1
   136e6:	d02f      	beq.n	13748 <lfs_fs_relocate+0x10c>
   136e8:	f8d7 c038 	ldr.w	ip, [r7, #56]	; 0x38
   136ec:	9801      	ldr	r0, [sp, #4]
   136ee:	4584      	cmp	ip, r0
   136f0:	d02c      	beq.n	1374c <lfs_fs_relocate+0x110>
   136f2:	4282      	cmp	r2, r0
   136f4:	d02c      	beq.n	13750 <lfs_fs_relocate+0x114>
   136f6:	4561      	cmp	r1, ip
   136f8:	d005      	beq.n	13706 <lfs_fs_relocate+0xca>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   136fa:	2200      	movs	r2, #0
   136fc:	e006      	b.n	1370c <lfs_fs_relocate+0xd0>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
   136fe:	f116 0f02 	cmn.w	r6, #2
   13702:	d11d      	bne.n	13740 <lfs_fs_relocate+0x104>
   13704:	e7e0      	b.n	136c8 <lfs_fs_relocate+0x8c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   13706:	2201      	movs	r2, #1
   13708:	e000      	b.n	1370c <lfs_fs_relocate+0xd0>
   1370a:	2200      	movs	r2, #0
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
   1370c:	bb12      	cbnz	r2, 13754 <lfs_fs_relocate+0x118>
        uint16_t moveid = 0x3ff;
   1370e:	f240 38ff 	movw	r8, #1023	; 0x3ff
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   13712:	2300      	movs	r3, #0
   13714:	9309      	str	r3, [sp, #36]	; 0x24
   13716:	f240 33ff 	movw	r3, #1023	; 0x3ff
   1371a:	4598      	cmp	r8, r3
   1371c:	d029      	beq.n	13772 <lfs_fs_relocate+0x136>
   1371e:	ea4f 2388 	mov.w	r3, r8, lsl #10
   13722:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   13726:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   1372a:	9308      	str	r3, [sp, #32]
   1372c:	960a      	str	r6, [sp, #40]	; 0x28
   1372e:	950b      	str	r5, [sp, #44]	; 0x2c
   13730:	2302      	movs	r3, #2
   13732:	aa08      	add	r2, sp, #32
   13734:	4669      	mov	r1, sp
   13736:	4638      	mov	r0, r7
   13738:	f7ff fc0c 	bl	12f54 <lfs_dir_commit>
        if (err) {
   1373c:	4606      	mov	r6, r0
   1373e:	b1d0      	cbz	r0, 13776 <lfs_fs_relocate+0x13a>
}
   13740:	4630      	mov	r0, r6
   13742:	b010      	add	sp, #64	; 0x40
   13744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   13748:	2201      	movs	r2, #1
   1374a:	e7df      	b.n	1370c <lfs_fs_relocate+0xd0>
   1374c:	2201      	movs	r2, #1
   1374e:	e7dd      	b.n	1370c <lfs_fs_relocate+0xd0>
   13750:	2201      	movs	r2, #1
   13752:	e7db      	b.n	1370c <lfs_fs_relocate+0xd0>
    return (tag & 0x000ffc00) >> 10;
   13754:	f3c3 2889 	ubfx	r8, r3, #10, #10
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
   13758:	2200      	movs	r2, #0
   1375a:	f240 31ff 	movw	r1, #1023	; 0x3ff
   1375e:	4638      	mov	r0, r7
   13760:	f7fd ff3a 	bl	115d8 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
   13764:	f3c6 2389 	ubfx	r3, r6, #10, #10
            if (moveid < lfs_tag_id(tag)) {
   13768:	4543      	cmp	r3, r8
   1376a:	d9d2      	bls.n	13712 <lfs_fs_relocate+0xd6>
                tag -= LFS_MKTAG(0, 1, 0);
   1376c:	f5a6 6680 	sub.w	r6, r6, #1024	; 0x400
   13770:	e7cf      	b.n	13712 <lfs_fs_relocate+0xd6>
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   13772:	2300      	movs	r3, #0
   13774:	e7d9      	b.n	1372a <lfs_fs_relocate+0xee>
        lfs_fs_preporphans(lfs, -1);
   13776:	f04f 31ff 	mov.w	r1, #4294967295
   1377a:	4638      	mov	r0, r7
   1377c:	f004 f957 	bl	17a2e <lfs_fs_preporphans>
    int err = lfs_fs_pred(lfs, oldpair, &parent);
   13780:	466a      	mov	r2, sp
   13782:	4621      	mov	r1, r4
   13784:	4638      	mov	r0, r7
   13786:	f004 faba 	bl	17cfe <lfs_fs_pred>
    if (err && err != LFS_ERR_NOENT) {
   1378a:	4606      	mov	r6, r0
   1378c:	b110      	cbz	r0, 13794 <lfs_fs_relocate+0x158>
   1378e:	f110 0f02 	cmn.w	r0, #2
   13792:	d1d5      	bne.n	13740 <lfs_fs_relocate+0x104>
    if (err != LFS_ERR_NOENT) {
   13794:	f116 0f02 	cmn.w	r6, #2
   13798:	d046      	beq.n	13828 <lfs_fs_relocate+0x1ec>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   1379a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
   1379c:	0d23      	lsrs	r3, r4, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   1379e:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   137a2:	d00f      	beq.n	137c4 <lfs_fs_relocate+0x188>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   137a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137a6:	9a00      	ldr	r2, [sp, #0]
   137a8:	4293      	cmp	r3, r2
   137aa:	d02c      	beq.n	13806 <lfs_fs_relocate+0x1ca>
   137ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   137ae:	9901      	ldr	r1, [sp, #4]
   137b0:	4288      	cmp	r0, r1
   137b2:	d02a      	beq.n	1380a <lfs_fs_relocate+0x1ce>
   137b4:	428b      	cmp	r3, r1
   137b6:	d02a      	beq.n	1380e <lfs_fs_relocate+0x1d2>
   137b8:	4282      	cmp	r2, r0
   137ba:	d001      	beq.n	137c0 <lfs_fs_relocate+0x184>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   137bc:	2300      	movs	r3, #0
   137be:	e002      	b.n	137c6 <lfs_fs_relocate+0x18a>
   137c0:	2301      	movs	r3, #1
   137c2:	e000      	b.n	137c6 <lfs_fs_relocate+0x18a>
   137c4:	2300      	movs	r3, #0
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
   137c6:	bb23      	cbnz	r3, 13812 <lfs_fs_relocate+0x1d6>
        uint16_t moveid = 0x3ff;
   137c8:	f240 34ff 	movw	r4, #1023	; 0x3ff
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   137cc:	2300      	movs	r3, #0
   137ce:	930d      	str	r3, [sp, #52]	; 0x34
   137d0:	f240 33ff 	movw	r3, #1023	; 0x3ff
   137d4:	429c      	cmp	r4, r3
   137d6:	d025      	beq.n	13824 <lfs_fs_relocate+0x1e8>
   137d8:	02a3      	lsls	r3, r4, #10
   137da:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   137de:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   137e2:	930c      	str	r3, [sp, #48]	; 0x30
   137e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   137e8:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
   137ec:	4b0f      	ldr	r3, [pc, #60]	; (1382c <lfs_fs_relocate+0x1f0>)
   137ee:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   137f2:	930e      	str	r3, [sp, #56]	; 0x38
   137f4:	950f      	str	r5, [sp, #60]	; 0x3c
   137f6:	2302      	movs	r3, #2
   137f8:	aa0c      	add	r2, sp, #48	; 0x30
   137fa:	4669      	mov	r1, sp
   137fc:	4638      	mov	r0, r7
   137fe:	f7ff fba9 	bl	12f54 <lfs_dir_commit>
   13802:	4606      	mov	r6, r0
        if (err) {
   13804:	e79c      	b.n	13740 <lfs_fs_relocate+0x104>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   13806:	2301      	movs	r3, #1
   13808:	e7dd      	b.n	137c6 <lfs_fs_relocate+0x18a>
   1380a:	2301      	movs	r3, #1
   1380c:	e7db      	b.n	137c6 <lfs_fs_relocate+0x18a>
   1380e:	2301      	movs	r3, #1
   13810:	e7d9      	b.n	137c6 <lfs_fs_relocate+0x18a>
    return (tag & 0x000ffc00) >> 10;
   13812:	f3c4 2489 	ubfx	r4, r4, #10, #10
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
   13816:	2200      	movs	r2, #0
   13818:	f240 31ff 	movw	r1, #1023	; 0x3ff
   1381c:	4638      	mov	r0, r7
   1381e:	f7fd fedb 	bl	115d8 <lfs_fs_prepmove>
   13822:	e7d3      	b.n	137cc <lfs_fs_relocate+0x190>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   13824:	2300      	movs	r3, #0
   13826:	e7dc      	b.n	137e2 <lfs_fs_relocate+0x1a6>
    return 0;
   13828:	2600      	movs	r6, #0
   1382a:	e789      	b.n	13740 <lfs_fs_relocate+0x104>
   1382c:	000ffc08 	.word	0x000ffc08

00013830 <lfs_file_opencfg>:
        const struct lfs_file_config *cfg) {
   13830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13834:	b08b      	sub	sp, #44	; 0x2c
   13836:	4607      	mov	r7, r0
   13838:	460c      	mov	r4, r1
   1383a:	9203      	str	r2, [sp, #12]
   1383c:	461e      	mov	r6, r3
    if ((flags & 3) != LFS_O_RDONLY) {
   1383e:	f003 0303 	and.w	r3, r3, #3
   13842:	2b01      	cmp	r3, #1
   13844:	d005      	beq.n	13852 <lfs_file_opencfg+0x22>
        int err = lfs_fs_forceconsistency(lfs);
   13846:	f005 f919 	bl	18a7c <lfs_fs_forceconsistency>
        if (err) {
   1384a:	4605      	mov	r5, r0
   1384c:	2800      	cmp	r0, #0
   1384e:	f040 8109 	bne.w	13a64 <lfs_file_opencfg+0x234>
    file->cfg = cfg;
   13852:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13854:	6523      	str	r3, [r4, #80]	; 0x50
    file->flags = flags | LFS_F_OPENED;
   13856:	f446 1300 	orr.w	r3, r6, #2097152	; 0x200000
   1385a:	6323      	str	r3, [r4, #48]	; 0x30
    file->pos = 0;
   1385c:	2300      	movs	r3, #0
   1385e:	6363      	str	r3, [r4, #52]	; 0x34
    file->off = 0;
   13860:	63e3      	str	r3, [r4, #60]	; 0x3c
    file->cache.buffer = NULL;
   13862:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   13864:	f104 0808 	add.w	r8, r4, #8
   13868:	1d23      	adds	r3, r4, #4
   1386a:	aa03      	add	r2, sp, #12
   1386c:	4641      	mov	r1, r8
   1386e:	4638      	mov	r0, r7
   13870:	f7fe fba4 	bl	11fbc <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
   13874:	1e05      	subs	r5, r0, #0
   13876:	db21      	blt.n	138bc <lfs_file_opencfg+0x8c>
    file->type = LFS_TYPE_REG;
   13878:	2301      	movs	r3, #1
   1387a:	71a3      	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
   1387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1387e:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)file;
   13880:	62bc      	str	r4, [r7, #40]	; 0x28
    if (tag == LFS_ERR_NOENT) {
   13882:	f115 0f02 	cmn.w	r5, #2
   13886:	d023      	beq.n	138d0 <lfs_file_opencfg+0xa0>
    } else if (flags & LFS_O_EXCL) {
   13888:	f416 7f00 	tst.w	r6, #512	; 0x200
   1388c:	f040 80e0 	bne.w	13a50 <lfs_file_opencfg+0x220>
    return (tag & 0x7ff00000) >> 20;
   13890:	f3c5 550a 	ubfx	r5, r5, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
   13894:	2d01      	cmp	r5, #1
   13896:	f040 80e9 	bne.w	13a6c <lfs_file_opencfg+0x23c>
    } else if (flags & LFS_O_TRUNC) {
   1389a:	f416 6f80 	tst.w	r6, #1024	; 0x400
   1389e:	d046      	beq.n	1392e <lfs_file_opencfg+0xfe>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   138a0:	f8b4 9004 	ldrh.w	r9, [r4, #4]
   138a4:	ea4f 2989 	mov.w	r9, r9, lsl #10
   138a8:	f049 5900 	orr.w	r9, r9, #536870912	; 0x20000000
   138ac:	f449 1980 	orr.w	r9, r9, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
   138b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   138b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   138b6:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   138b8:	2600      	movs	r6, #0
   138ba:	e05e      	b.n	1397a <lfs_file_opencfg+0x14a>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
   138bc:	f115 0f02 	cmn.w	r5, #2
   138c0:	f040 80c8 	bne.w	13a54 <lfs_file_opencfg+0x224>
   138c4:	88a2      	ldrh	r2, [r4, #4]
   138c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
   138ca:	429a      	cmp	r2, r3
   138cc:	d1d4      	bne.n	13878 <lfs_file_opencfg+0x48>
   138ce:	e0c1      	b.n	13a54 <lfs_file_opencfg+0x224>
        if (!(flags & LFS_O_CREAT)) {
   138d0:	f416 7f80 	tst.w	r6, #256	; 0x100
   138d4:	f000 80be 	beq.w	13a54 <lfs_file_opencfg+0x224>
        lfs_size_t nlen = strlen(path);
   138d8:	9803      	ldr	r0, [sp, #12]
   138da:	f003 fb1d 	bl	16f18 <strlen>
        if (nlen > lfs->name_max) {
   138de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   138e0:	4283      	cmp	r3, r0
   138e2:	d202      	bcs.n	138ea <lfs_file_opencfg+0xba>
            err = LFS_ERR_NAMETOOLONG;
   138e4:	f06f 0523 	mvn.w	r5, #35	; 0x23
   138e8:	e0b4      	b.n	13a54 <lfs_file_opencfg+0x224>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   138ea:	2300      	movs	r3, #0
   138ec:	9305      	str	r3, [sp, #20]
   138ee:	9309      	str	r3, [sp, #36]	; 0x24
   138f0:	88a3      	ldrh	r3, [r4, #4]
   138f2:	029b      	lsls	r3, r3, #10
   138f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   138f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   138fc:	9204      	str	r2, [sp, #16]
   138fe:	4318      	orrs	r0, r3
   13900:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   13904:	9006      	str	r0, [sp, #24]
   13906:	9a03      	ldr	r2, [sp, #12]
   13908:	9207      	str	r2, [sp, #28]
   1390a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1390e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13912:	9308      	str	r3, [sp, #32]
   13914:	2303      	movs	r3, #3
   13916:	aa04      	add	r2, sp, #16
   13918:	4641      	mov	r1, r8
   1391a:	4638      	mov	r0, r7
   1391c:	f7ff fb1a 	bl	12f54 <lfs_dir_commit>
        if (err) {
   13920:	b910      	cbnz	r0, 13928 <lfs_file_opencfg+0xf8>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
   13922:	f8df 915c 	ldr.w	r9, [pc, #348]	; 13a80 <lfs_file_opencfg+0x250>
   13926:	e7c7      	b.n	138b8 <lfs_file_opencfg+0x88>
            err = LFS_ERR_NAMETOOLONG;
   13928:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1392c:	e092      	b.n	13a54 <lfs_file_opencfg+0x224>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
   1392e:	88a3      	ldrh	r3, [r4, #4]
   13930:	029b      	lsls	r3, r3, #10
   13932:	f104 0228 	add.w	r2, r4, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
   13936:	9200      	str	r2, [sp, #0]
   13938:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1393c:	f043 0308 	orr.w	r3, r3, #8
   13940:	4a4d      	ldr	r2, [pc, #308]	; (13a78 <lfs_file_opencfg+0x248>)
   13942:	4641      	mov	r1, r8
   13944:	4638      	mov	r0, r7
   13946:	f004 fa18 	bl	17d7a <lfs_dir_get>
        if (tag < 0) {
   1394a:	f1b0 0900 	subs.w	r9, r0, #0
   1394e:	dab3      	bge.n	138b8 <lfs_file_opencfg+0x88>
            err = tag;
   13950:	464d      	mov	r5, r9
   13952:	e07f      	b.n	13a54 <lfs_file_opencfg+0x224>
        if ((file->flags & 3) != LFS_O_RDONLY) {
   13954:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13956:	f003 0203 	and.w	r2, r3, #3
   1395a:	2a01      	cmp	r2, #1
   1395c:	d00c      	beq.n	13978 <lfs_file_opencfg+0x148>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
   1395e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   13960:	6852      	ldr	r2, [r2, #4]
   13962:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   13966:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   1396a:	6891      	ldr	r1, [r2, #8]
   1396c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1396e:	4291      	cmp	r1, r2
   13970:	d87f      	bhi.n	13a72 <lfs_file_opencfg+0x242>
            file->flags |= LFS_F_DIRTY;
   13972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   13976:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   13978:	3601      	adds	r6, #1
   1397a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1397c:	6893      	ldr	r3, [r2, #8]
   1397e:	42b3      	cmp	r3, r6
   13980:	d920      	bls.n	139c4 <lfs_file_opencfg+0x194>
        if ((file->flags & 3) != LFS_O_WRONLY) {
   13982:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13984:	f003 0303 	and.w	r3, r3, #3
   13988:	2b02      	cmp	r3, #2
   1398a:	d0e3      	beq.n	13954 <lfs_file_opencfg+0x124>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   1398c:	6853      	ldr	r3, [r2, #4]
   1398e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   13992:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   13996:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   1399a:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1399e:	88a3      	ldrh	r3, [r4, #4]
   139a0:	029b      	lsls	r3, r3, #10
   139a2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   139a6:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   139a8:	6849      	ldr	r1, [r1, #4]
   139aa:	9100      	str	r1, [sp, #0]
   139ac:	4313      	orrs	r3, r2
   139ae:	4a33      	ldr	r2, [pc, #204]	; (13a7c <lfs_file_opencfg+0x24c>)
   139b0:	4641      	mov	r1, r8
   139b2:	4638      	mov	r0, r7
   139b4:	f004 f9e1 	bl	17d7a <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
   139b8:	1e05      	subs	r5, r0, #0
   139ba:	dacb      	bge.n	13954 <lfs_file_opencfg+0x124>
   139bc:	f115 0f02 	cmn.w	r5, #2
   139c0:	d0c8      	beq.n	13954 <lfs_file_opencfg+0x124>
   139c2:	e047      	b.n	13a54 <lfs_file_opencfg+0x224>
    if (file->cfg->buffer) {
   139c4:	6813      	ldr	r3, [r2, #0]
   139c6:	b18b      	cbz	r3, 139ec <lfs_file_opencfg+0x1bc>
        file->cache.buffer = file->cfg->buffer;
   139c8:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   139ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   139cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   139ce:	21ff      	movs	r1, #255	; 0xff
   139d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   139d2:	f003 fb09 	bl	16fe8 <memset>
    pcache->block = LFS_BLOCK_NULL;
   139d6:	f04f 33ff 	mov.w	r3, #4294967295
   139da:	6423      	str	r3, [r4, #64]	; 0x40
    return (tag & 0x7ff00000) >> 20;
   139dc:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   139e0:	f240 2301 	movw	r3, #513	; 0x201
   139e4:	429a      	cmp	r2, r3
   139e6:	d00b      	beq.n	13a00 <lfs_file_opencfg+0x1d0>
    return 0;
   139e8:	2500      	movs	r5, #0
   139ea:	e03b      	b.n	13a64 <lfs_file_opencfg+0x234>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
   139ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
#ifndef LFS_NO_MALLOC
    return malloc(size);
   139ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
   139f0:	f7fb ffda 	bl	f9a8 <malloc>
   139f4:	64e0      	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
   139f6:	2800      	cmp	r0, #0
   139f8:	d1e7      	bne.n	139ca <lfs_file_opencfg+0x19a>
            err = LFS_ERR_NOMEM;
   139fa:	f06f 050b 	mvn.w	r5, #11
   139fe:	e029      	b.n	13a54 <lfs_file_opencfg+0x224>
        file->ctz.head = LFS_BLOCK_INLINE;
   13a00:	f06f 0101 	mvn.w	r1, #1
   13a04:	62a1      	str	r1, [r4, #40]	; 0x28
    return tag & 0x000003ff;
   13a06:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
   13a0a:	62e2      	str	r2, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
   13a0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13a12:	6323      	str	r3, [r4, #48]	; 0x30
        file->cache.block = file->ctz.head;
   13a14:	6421      	str	r1, [r4, #64]	; 0x40
        file->cache.off = 0;
   13a16:	2300      	movs	r3, #0
   13a18:	6463      	str	r3, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
   13a1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   13a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13a1e:	64a3      	str	r3, [r4, #72]	; 0x48
        if (file->ctz.size > 0) {
   13a20:	b90a      	cbnz	r2, 13a26 <lfs_file_opencfg+0x1f6>
    return 0;
   13a22:	2500      	movs	r5, #0
   13a24:	e01e      	b.n	13a64 <lfs_file_opencfg+0x234>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
   13a26:	88a2      	ldrh	r2, [r4, #4]
    return (a < b) ? a : b;
   13a28:	f240 31fe 	movw	r1, #1022	; 0x3fe
   13a2c:	428b      	cmp	r3, r1
   13a2e:	bf28      	it	cs
   13a30:	460b      	movcs	r3, r1
   13a32:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
                    file->cache.buffer);
   13a36:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   13a38:	9200      	str	r2, [sp, #0]
   13a3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   13a3e:	4a0e      	ldr	r2, [pc, #56]	; (13a78 <lfs_file_opencfg+0x248>)
   13a40:	4641      	mov	r1, r8
   13a42:	4638      	mov	r0, r7
   13a44:	f004 f999 	bl	17d7a <lfs_dir_get>
            if (res < 0) {
   13a48:	1e05      	subs	r5, r0, #0
   13a4a:	db03      	blt.n	13a54 <lfs_file_opencfg+0x224>
    return 0;
   13a4c:	2500      	movs	r5, #0
   13a4e:	e009      	b.n	13a64 <lfs_file_opencfg+0x234>
        err = LFS_ERR_EXIST;
   13a50:	f06f 0510 	mvn.w	r5, #16
    file->flags |= LFS_F_ERRED;
   13a54:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13a56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   13a5a:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_file_close(lfs, file);
   13a5c:	4621      	mov	r1, r4
   13a5e:	4638      	mov	r0, r7
   13a60:	f005 f870 	bl	18b44 <lfs_file_close>
}
   13a64:	4628      	mov	r0, r5
   13a66:	b00b      	add	sp, #44	; 0x2c
   13a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
   13a6c:	f06f 0514 	mvn.w	r5, #20
   13a70:	e7f0      	b.n	13a54 <lfs_file_opencfg+0x224>
                err = LFS_ERR_NOSPC;
   13a72:	f06f 051b 	mvn.w	r5, #27
   13a76:	e7ed      	b.n	13a54 <lfs_file_opencfg+0x224>
   13a78:	700ffc00 	.word	0x700ffc00
   13a7c:	7ffffc00 	.word	0x7ffffc00
   13a80:	20100000 	.word	0x20100000

00013a84 <lfs_remove>:
int lfs_remove(lfs_t *lfs, const char *path) {
   13a84:	b570      	push	{r4, r5, r6, lr}
   13a86:	b09a      	sub	sp, #104	; 0x68
   13a88:	4604      	mov	r4, r0
   13a8a:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
   13a8c:	f004 fff6 	bl	18a7c <lfs_fs_forceconsistency>
    if (err) {
   13a90:	4603      	mov	r3, r0
   13a92:	b110      	cbz	r0, 13a9a <lfs_remove+0x16>
}
   13a94:	4618      	mov	r0, r3
   13a96:	b01a      	add	sp, #104	; 0x68
   13a98:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   13a9a:	2300      	movs	r3, #0
   13a9c:	aa03      	add	r2, sp, #12
   13a9e:	a910      	add	r1, sp, #64	; 0x40
   13aa0:	4620      	mov	r0, r4
   13aa2:	f7fe fa8b 	bl	11fbc <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
   13aa6:	1e03      	subs	r3, r0, #0
   13aa8:	db34      	blt.n	13b14 <lfs_remove+0x90>
    return (tag & 0x000ffc00) >> 10;
   13aaa:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
   13aae:	f240 32ff 	movw	r2, #1023	; 0x3ff
   13ab2:	4295      	cmp	r5, r2
   13ab4:	d02e      	beq.n	13b14 <lfs_remove+0x90>
    dir.next = lfs->mlist;
   13ab6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   13ab8:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
   13aba:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   13abe:	2e02      	cmp	r6, #2
   13ac0:	d02d      	beq.n	13b1e <lfs_remove+0x9a>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
   13ac2:	2300      	movs	r3, #0
   13ac4:	9319      	str	r3, [sp, #100]	; 0x64
   13ac6:	02ad      	lsls	r5, r5, #10
   13ac8:	f045 459f 	orr.w	r5, r5, #1333788672	; 0x4f800000
   13acc:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
   13ad0:	9518      	str	r5, [sp, #96]	; 0x60
   13ad2:	2301      	movs	r3, #1
   13ad4:	aa18      	add	r2, sp, #96	; 0x60
   13ad6:	a910      	add	r1, sp, #64	; 0x40
   13ad8:	4620      	mov	r0, r4
   13ada:	f7ff fa3b 	bl	12f54 <lfs_dir_commit>
    if (err) {
   13ade:	4603      	mov	r3, r0
   13ae0:	2800      	cmp	r0, #0
   13ae2:	d145      	bne.n	13b70 <lfs_remove+0xec>
    lfs->mlist = dir.next;
   13ae4:	9a06      	ldr	r2, [sp, #24]
   13ae6:	62a2      	str	r2, [r4, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   13ae8:	2e02      	cmp	r6, #2
   13aea:	d1d3      	bne.n	13a94 <lfs_remove+0x10>
        lfs_fs_preporphans(lfs, -1);
   13aec:	f04f 31ff 	mov.w	r1, #4294967295
   13af0:	4620      	mov	r0, r4
   13af2:	f003 ff9c 	bl	17a2e <lfs_fs_preporphans>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
   13af6:	aa10      	add	r2, sp, #64	; 0x40
   13af8:	a908      	add	r1, sp, #32
   13afa:	4620      	mov	r0, r4
   13afc:	f004 f8ff 	bl	17cfe <lfs_fs_pred>
        if (err) {
   13b00:	4603      	mov	r3, r0
   13b02:	2800      	cmp	r0, #0
   13b04:	d1c6      	bne.n	13a94 <lfs_remove+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
   13b06:	aa08      	add	r2, sp, #32
   13b08:	a910      	add	r1, sp, #64	; 0x40
   13b0a:	4620      	mov	r0, r4
   13b0c:	f7ff fc40 	bl	13390 <lfs_dir_drop>
   13b10:	4603      	mov	r3, r0
        if (err) {
   13b12:	e7bf      	b.n	13a94 <lfs_remove+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
   13b14:	2b00      	cmp	r3, #0
   13b16:	dbbd      	blt.n	13a94 <lfs_remove+0x10>
   13b18:	f06f 0315 	mvn.w	r3, #21
   13b1c:	e7ba      	b.n	13a94 <lfs_remove+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
   13b1e:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
   13b20:	aa04      	add	r2, sp, #16
   13b22:	9200      	str	r2, [sp, #0]
   13b24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   13b28:	f043 0308 	orr.w	r3, r3, #8
   13b2c:	4a12      	ldr	r2, [pc, #72]	; (13b78 <lfs_remove+0xf4>)
   13b2e:	a910      	add	r1, sp, #64	; 0x40
   13b30:	4620      	mov	r0, r4
   13b32:	f004 f922 	bl	17d7a <lfs_dir_get>
        if (res < 0) {
   13b36:	1e03      	subs	r3, r0, #0
   13b38:	dbac      	blt.n	13a94 <lfs_remove+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
   13b3a:	aa04      	add	r2, sp, #16
   13b3c:	a908      	add	r1, sp, #32
   13b3e:	4620      	mov	r0, r4
   13b40:	f004 f8cf 	bl	17ce2 <lfs_dir_fetch>
        if (err) {
   13b44:	4603      	mov	r3, r0
   13b46:	2800      	cmp	r0, #0
   13b48:	d1a4      	bne.n	13a94 <lfs_remove+0x10>
        if (dir.m.count > 0 || dir.m.split) {
   13b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13b4c:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
   13b50:	d002      	beq.n	13b58 <lfs_remove+0xd4>
            return LFS_ERR_NOTEMPTY;
   13b52:	f06f 0326 	mvn.w	r3, #38	; 0x26
   13b56:	e79d      	b.n	13a94 <lfs_remove+0x10>
        lfs_fs_preporphans(lfs, +1);
   13b58:	2101      	movs	r1, #1
   13b5a:	4620      	mov	r0, r4
   13b5c:	f003 ff67 	bl	17a2e <lfs_fs_preporphans>
        dir.type = 0;
   13b60:	2300      	movs	r3, #0
   13b62:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
   13b66:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
   13b6a:	ab06      	add	r3, sp, #24
   13b6c:	62a3      	str	r3, [r4, #40]	; 0x28
   13b6e:	e7a8      	b.n	13ac2 <lfs_remove+0x3e>
        lfs->mlist = dir.next;
   13b70:	9a06      	ldr	r2, [sp, #24]
   13b72:	62a2      	str	r2, [r4, #40]	; 0x28
        return err;
   13b74:	e78e      	b.n	13a94 <lfs_remove+0x10>
   13b76:	bf00      	nop
   13b78:	700ffc00 	.word	0x700ffc00

00013b7c <lfs_rename>:
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
   13b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b80:	b0ad      	sub	sp, #180	; 0xb4
   13b82:	4604      	mov	r4, r0
   13b84:	9103      	str	r1, [sp, #12]
   13b86:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
   13b88:	f004 ff78 	bl	18a7c <lfs_fs_forceconsistency>
    if (err) {
   13b8c:	4606      	mov	r6, r0
   13b8e:	b118      	cbz	r0, 13b98 <lfs_rename+0x1c>
}
   13b90:	4630      	mov	r0, r6
   13b92:	b02d      	add	sp, #180	; 0xb4
   13b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
   13b98:	2300      	movs	r3, #0
   13b9a:	aa03      	add	r2, sp, #12
   13b9c:	a922      	add	r1, sp, #136	; 0x88
   13b9e:	4620      	mov	r0, r4
   13ba0:	f7fe fa0c 	bl	11fbc <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
   13ba4:	1e05      	subs	r5, r0, #0
   13ba6:	f2c0 8090 	blt.w	13cca <lfs_rename+0x14e>
    return (tag & 0x000ffc00) >> 10;
   13baa:	f3c5 2889 	ubfx	r8, r5, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
   13bae:	f240 33ff 	movw	r3, #1023	; 0x3ff
   13bb2:	4598      	cmp	r8, r3
   13bb4:	f000 8089 	beq.w	13cca <lfs_rename+0x14e>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
   13bb8:	f10d 0366 	add.w	r3, sp, #102	; 0x66
   13bbc:	aa02      	add	r2, sp, #8
   13bbe:	a91a      	add	r1, sp, #104	; 0x68
   13bc0:	4620      	mov	r0, r4
   13bc2:	f7fe f9fb 	bl	11fbc <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   13bc6:	1e07      	subs	r7, r0, #0
   13bc8:	f2c0 8086 	blt.w	13cd8 <lfs_rename+0x15c>
    return (tag & 0x000ffc00) >> 10;
   13bcc:	f3c7 2289 	ubfx	r2, r7, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   13bd0:	f240 33ff 	movw	r3, #1023	; 0x3ff
   13bd4:	429a      	cmp	r2, r3
   13bd6:	d07f      	beq.n	13cd8 <lfs_rename+0x15c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   13bd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13bda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13bdc:	429a      	cmp	r2, r3
   13bde:	d008      	beq.n	13bf2 <lfs_rename+0x76>
   13be0:	9823      	ldr	r0, [sp, #140]	; 0x8c
   13be2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   13be4:	4281      	cmp	r1, r0
   13be6:	d004      	beq.n	13bf2 <lfs_rename+0x76>
   13be8:	4299      	cmp	r1, r3
   13bea:	d002      	beq.n	13bf2 <lfs_rename+0x76>
   13bec:	4290      	cmp	r0, r2
   13bee:	d000      	beq.n	13bf2 <lfs_rename+0x76>
   13bf0:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
   13bf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13bf4:	930f      	str	r3, [sp, #60]	; 0x3c
    if (prevtag == LFS_ERR_NOENT) {
   13bf6:	f117 0f02 	cmn.w	r7, #2
   13bfa:	d07e      	beq.n	13cfa <lfs_rename+0x17e>
    return (tag & 0x7ff00000) >> 20;
   13bfc:	f3c7 530a 	ubfx	r3, r7, #20, #11
   13c00:	f3c5 520a 	ubfx	r2, r5, #20, #11
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
   13c04:	429a      	cmp	r2, r3
   13c06:	f040 80f8 	bne.w	13dfa <lfs_rename+0x27e>
    } else if (samepair && newid == newoldid) {
   13c0a:	b91e      	cbnz	r6, 13c14 <lfs_rename+0x98>
   13c0c:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
   13c10:	4542      	cmp	r2, r8
   13c12:	d0bd      	beq.n	13b90 <lfs_rename+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   13c14:	2b02      	cmp	r3, #2
   13c16:	d07e      	beq.n	13d16 <lfs_rename+0x19a>
    uint16_t newoldid = lfs_tag_id(oldtag);
   13c18:	46c1      	mov	r9, r8
    if (!samepair) {
   13c1a:	2e00      	cmp	r6, #0
   13c1c:	f040 80ab 	bne.w	13d76 <lfs_rename+0x1fa>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   13c20:	2224      	movs	r2, #36	; 0x24
   13c22:	2100      	movs	r1, #0
   13c24:	a806      	add	r0, sp, #24
   13c26:	f003 f9df 	bl	16fe8 <memset>
   13c2a:	f117 0f02 	cmn.w	r7, #2
   13c2e:	f000 80a8 	beq.w	13d82 <lfs_rename+0x206>
   13c32:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   13c36:	029b      	lsls	r3, r3, #10
   13c38:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   13c3c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   13c40:	9305      	str	r3, [sp, #20]
   13c42:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
   13c46:	0292      	lsls	r2, r2, #10
   13c48:	f042 4380 	orr.w	r3, r2, #1073741824	; 0x40000000
   13c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13c50:	9307      	str	r3, [sp, #28]
    return (tag & 0x7ff00000) >> 20;
   13c52:	f3c5 530a 	ubfx	r3, r5, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   13c56:	ea42 5503 	orr.w	r5, r2, r3, lsl #20
   13c5a:	9802      	ldr	r0, [sp, #8]
   13c5c:	f003 f95c 	bl	16f18 <strlen>
   13c60:	4328      	orrs	r0, r5
   13c62:	9009      	str	r0, [sp, #36]	; 0x24
   13c64:	9b02      	ldr	r3, [sp, #8]
   13c66:	930a      	str	r3, [sp, #40]	; 0x28
   13c68:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   13c6c:	ea48 2383 	orr.w	r3, r8, r3, lsl #10
   13c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13c78:	930b      	str	r3, [sp, #44]	; 0x2c
   13c7a:	ab22      	add	r3, sp, #136	; 0x88
   13c7c:	930c      	str	r3, [sp, #48]	; 0x30
   13c7e:	2e00      	cmp	r6, #0
   13c80:	f040 8081 	bne.w	13d86 <lfs_rename+0x20a>
   13c84:	ea4f 2989 	mov.w	r9, r9, lsl #10
   13c88:	f049 439f 	orr.w	r3, r9, #1333788672	; 0x4f800000
   13c8c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   13c90:	930d      	str	r3, [sp, #52]	; 0x34
   13c92:	2305      	movs	r3, #5
   13c94:	aa05      	add	r2, sp, #20
   13c96:	a91a      	add	r1, sp, #104	; 0x68
   13c98:	4620      	mov	r0, r4
   13c9a:	f7ff f95b 	bl	12f54 <lfs_dir_commit>
    if (err) {
   13c9e:	4605      	mov	r5, r0
   13ca0:	2800      	cmp	r0, #0
   13ca2:	d172      	bne.n	13d8a <lfs_rename+0x20e>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
   13ca4:	b126      	cbz	r6, 13cb0 <lfs_rename+0x134>
    return lfs_tag_type1(a->tag);
   13ca6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
   13ca8:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
   13caa:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   13cae:	d170      	bne.n	13d92 <lfs_rename+0x216>
    lfs->mlist = prevdir.next;
   13cb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13cb2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   13cb4:	f117 0f02 	cmn.w	r7, #2
   13cb8:	f000 80a2 	beq.w	13e00 <lfs_rename+0x284>
    return (tag & 0x7ff00000) >> 20;
   13cbc:	f3c7 570a 	ubfx	r7, r7, #20, #11
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   13cc0:	2f02      	cmp	r7, #2
   13cc2:	f000 8082 	beq.w	13dca <lfs_rename+0x24e>
    return 0;
   13cc6:	462e      	mov	r6, r5
   13cc8:	e762      	b.n	13b90 <lfs_rename+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
   13cca:	2d00      	cmp	r5, #0
   13ccc:	db02      	blt.n	13cd4 <lfs_rename+0x158>
   13cce:	f06f 0615 	mvn.w	r6, #21
   13cd2:	e75d      	b.n	13b90 <lfs_rename+0x14>
   13cd4:	462e      	mov	r6, r5
   13cd6:	e75b      	b.n	13b90 <lfs_rename+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   13cd8:	f117 0f02 	cmn.w	r7, #2
   13cdc:	d106      	bne.n	13cec <lfs_rename+0x170>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
   13cde:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
   13ce2:	f240 33ff 	movw	r3, #1023	; 0x3ff
   13ce6:	429a      	cmp	r2, r3
   13ce8:	f47f af76 	bne.w	13bd8 <lfs_rename+0x5c>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
   13cec:	2f00      	cmp	r7, #0
   13cee:	db02      	blt.n	13cf6 <lfs_rename+0x17a>
   13cf0:	f06f 0615 	mvn.w	r6, #21
   13cf4:	e74c      	b.n	13b90 <lfs_rename+0x14>
   13cf6:	463e      	mov	r6, r7
   13cf8:	e74a      	b.n	13b90 <lfs_rename+0x14>
        lfs_size_t nlen = strlen(newpath);
   13cfa:	9802      	ldr	r0, [sp, #8]
   13cfc:	f003 f90c 	bl	16f18 <strlen>
        if (nlen > lfs->name_max) {
   13d00:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   13d02:	4283      	cmp	r3, r0
   13d04:	d376      	bcc.n	13df4 <lfs_rename+0x278>
        if (samepair && newid <= newoldid) {
   13d06:	bb96      	cbnz	r6, 13d6e <lfs_rename+0x1f2>
   13d08:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   13d0c:	4543      	cmp	r3, r8
   13d0e:	d830      	bhi.n	13d72 <lfs_rename+0x1f6>
            newoldid += 1;
   13d10:	f108 0901 	add.w	r9, r8, #1
   13d14:	e781      	b.n	13c1a <lfs_rename+0x9e>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
   13d16:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   13d1a:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
   13d1c:	aa05      	add	r2, sp, #20
   13d1e:	9200      	str	r2, [sp, #0]
   13d20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   13d24:	f043 0308 	orr.w	r3, r3, #8
   13d28:	4a36      	ldr	r2, [pc, #216]	; (13e04 <lfs_rename+0x288>)
   13d2a:	a91a      	add	r1, sp, #104	; 0x68
   13d2c:	4620      	mov	r0, r4
   13d2e:	f004 f824 	bl	17d7a <lfs_dir_get>
        if (res < 0) {
   13d32:	1e03      	subs	r3, r0, #0
   13d34:	db0c      	blt.n	13d50 <lfs_rename+0x1d4>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
   13d36:	aa05      	add	r2, sp, #20
   13d38:	a911      	add	r1, sp, #68	; 0x44
   13d3a:	4620      	mov	r0, r4
   13d3c:	f003 ffd1 	bl	17ce2 <lfs_dir_fetch>
        if (err) {
   13d40:	4603      	mov	r3, r0
   13d42:	b928      	cbnz	r0, 13d50 <lfs_rename+0x1d4>
        if (prevdir.m.count > 0 || prevdir.m.split) {
   13d44:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13d46:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
   13d4a:	d003      	beq.n	13d54 <lfs_rename+0x1d8>
            return LFS_ERR_NOTEMPTY;
   13d4c:	f06f 0326 	mvn.w	r3, #38	; 0x26
            return (int)res;
   13d50:	461e      	mov	r6, r3
   13d52:	e71d      	b.n	13b90 <lfs_rename+0x14>
        lfs_fs_preporphans(lfs, +1);
   13d54:	2101      	movs	r1, #1
   13d56:	4620      	mov	r0, r4
   13d58:	f003 fe69 	bl	17a2e <lfs_fs_preporphans>
        prevdir.type = 0;
   13d5c:	2300      	movs	r3, #0
   13d5e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
        prevdir.id = 0;
   13d62:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        lfs->mlist = &prevdir;
   13d66:	ab0f      	add	r3, sp, #60	; 0x3c
   13d68:	62a3      	str	r3, [r4, #40]	; 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
   13d6a:	46c1      	mov	r9, r8
   13d6c:	e755      	b.n	13c1a <lfs_rename+0x9e>
   13d6e:	46c1      	mov	r9, r8
   13d70:	e753      	b.n	13c1a <lfs_rename+0x9e>
   13d72:	46c1      	mov	r9, r8
   13d74:	e751      	b.n	13c1a <lfs_rename+0x9e>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
   13d76:	aa22      	add	r2, sp, #136	; 0x88
   13d78:	4649      	mov	r1, r9
   13d7a:	4620      	mov	r0, r4
   13d7c:	f7fd fc2c 	bl	115d8 <lfs_fs_prepmove>
   13d80:	e74e      	b.n	13c20 <lfs_rename+0xa4>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   13d82:	2300      	movs	r3, #0
   13d84:	e75c      	b.n	13c40 <lfs_rename+0xc4>
   13d86:	2300      	movs	r3, #0
   13d88:	e782      	b.n	13c90 <lfs_rename+0x114>
        lfs->mlist = prevdir.next;
   13d8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13d8c:	62a3      	str	r3, [r4, #40]	; 0x28
        return err;
   13d8e:	4606      	mov	r6, r0
   13d90:	e6fe      	b.n	13b90 <lfs_rename+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
   13d92:	2200      	movs	r2, #0
   13d94:	f240 31ff 	movw	r1, #1023	; 0x3ff
   13d98:	4620      	mov	r0, r4
   13d9a:	f7fd fc1d 	bl	115d8 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
   13d9e:	2300      	movs	r3, #0
   13da0:	932b      	str	r3, [sp, #172]	; 0xac
   13da2:	ea4f 2388 	mov.w	r3, r8, lsl #10
   13da6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   13daa:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   13dae:	932a      	str	r3, [sp, #168]	; 0xa8
   13db0:	2301      	movs	r3, #1
   13db2:	aa2a      	add	r2, sp, #168	; 0xa8
   13db4:	a922      	add	r1, sp, #136	; 0x88
   13db6:	4620      	mov	r0, r4
   13db8:	f7ff f8cc 	bl	12f54 <lfs_dir_commit>
        if (err) {
   13dbc:	4606      	mov	r6, r0
   13dbe:	2800      	cmp	r0, #0
   13dc0:	f43f af76 	beq.w	13cb0 <lfs_rename+0x134>
            lfs->mlist = prevdir.next;
   13dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13dc6:	62a3      	str	r3, [r4, #40]	; 0x28
            return err;
   13dc8:	e6e2      	b.n	13b90 <lfs_rename+0x14>
        lfs_fs_preporphans(lfs, -1);
   13dca:	f04f 31ff 	mov.w	r1, #4294967295
   13dce:	4620      	mov	r0, r4
   13dd0:	f003 fe2d 	bl	17a2e <lfs_fs_preporphans>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
   13dd4:	aa1a      	add	r2, sp, #104	; 0x68
   13dd6:	a911      	add	r1, sp, #68	; 0x44
   13dd8:	4620      	mov	r0, r4
   13dda:	f003 ff90 	bl	17cfe <lfs_fs_pred>
        if (err) {
   13dde:	4606      	mov	r6, r0
   13de0:	2800      	cmp	r0, #0
   13de2:	f47f aed5 	bne.w	13b90 <lfs_rename+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
   13de6:	aa11      	add	r2, sp, #68	; 0x44
   13de8:	a91a      	add	r1, sp, #104	; 0x68
   13dea:	4620      	mov	r0, r4
   13dec:	f7ff fad0 	bl	13390 <lfs_dir_drop>
   13df0:	4606      	mov	r6, r0
        if (err) {
   13df2:	e6cd      	b.n	13b90 <lfs_rename+0x14>
            return LFS_ERR_NAMETOOLONG;
   13df4:	f06f 0623 	mvn.w	r6, #35	; 0x23
   13df8:	e6ca      	b.n	13b90 <lfs_rename+0x14>
        return LFS_ERR_ISDIR;
   13dfa:	f06f 0614 	mvn.w	r6, #20
   13dfe:	e6c7      	b.n	13b90 <lfs_rename+0x14>
    return 0;
   13e00:	462e      	mov	r6, r5
   13e02:	e6c5      	b.n	13b90 <lfs_rename+0x14>
   13e04:	700ffc00 	.word	0x700ffc00

00013e08 <lfs_format>:
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
   13e08:	b530      	push	{r4, r5, lr}
   13e0a:	b097      	sub	sp, #92	; 0x5c
   13e0c:	4604      	mov	r4, r0
        err = lfs_init(lfs, cfg);
   13e0e:	f004 fa6b 	bl	182e8 <lfs_init>
        if (err) {
   13e12:	4605      	mov	r5, r0
   13e14:	b110      	cbz	r0, 13e1c <lfs_format+0x14>
}
   13e16:	4628      	mov	r0, r5
   13e18:	b017      	add	sp, #92	; 0x5c
   13e1a:	bd30      	pop	{r4, r5, pc}
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
   13e1c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   13e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13e20:	2100      	movs	r1, #0
   13e22:	6e60      	ldr	r0, [r4, #100]	; 0x64
   13e24:	f003 f8e0 	bl	16fe8 <memset>
        lfs->free.off = 0;
   13e28:	2200      	movs	r2, #0
   13e2a:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   13e2c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   13e2e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   13e30:	00db      	lsls	r3, r3, #3
   13e32:	6a09      	ldr	r1, [r1, #32]
   13e34:	428b      	cmp	r3, r1
   13e36:	bf28      	it	cs
   13e38:	460b      	movcs	r3, r1
   13e3a:	65a3      	str	r3, [r4, #88]	; 0x58
        lfs->free.i = 0;
   13e3c:	65e2      	str	r2, [r4, #92]	; 0x5c
        lfs_alloc_ack(lfs);
   13e3e:	4620      	mov	r0, r4
   13e40:	f003 fdd4 	bl	179ec <lfs_alloc_ack>
        err = lfs_dir_alloc(lfs, &root);
   13e44:	a906      	add	r1, sp, #24
   13e46:	4620      	mov	r0, r4
   13e48:	f004 fb92 	bl	18570 <lfs_dir_alloc>
        if (err) {
   13e4c:	4605      	mov	r5, r0
   13e4e:	b118      	cbz	r0, 13e58 <lfs_format+0x50>
    lfs_deinit(lfs);
   13e50:	4620      	mov	r0, r4
   13e52:	f004 fa30 	bl	182b6 <lfs_deinit>
    return err;
   13e56:	e7de      	b.n	13e16 <lfs_format+0xe>
        lfs_superblock_t superblock = {
   13e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   13e5c:	9300      	str	r3, [sp, #0]
            .block_size  = lfs->cfg->block_size,
   13e5e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   13e60:	69da      	ldr	r2, [r3, #28]
        lfs_superblock_t superblock = {
   13e62:	9201      	str	r2, [sp, #4]
            .block_count = lfs->cfg->block_count,
   13e64:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
   13e66:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
   13e68:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        lfs_superblock_t superblock = {
   13e6a:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
   13e6c:	6f23      	ldr	r3, [r4, #112]	; 0x70
        lfs_superblock_t superblock = {
   13e6e:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
   13e70:	6f63      	ldr	r3, [r4, #116]	; 0x74
        lfs_superblock_t superblock = {
   13e72:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   13e74:	2300      	movs	r3, #0
   13e76:	930f      	str	r3, [sp, #60]	; 0x3c
   13e78:	4b14      	ldr	r3, [pc, #80]	; (13ecc <lfs_format+0xc4>)
   13e7a:	930e      	str	r3, [sp, #56]	; 0x38
   13e7c:	4b14      	ldr	r3, [pc, #80]	; (13ed0 <lfs_format+0xc8>)
   13e7e:	9310      	str	r3, [sp, #64]	; 0x40
   13e80:	4b14      	ldr	r3, [pc, #80]	; (13ed4 <lfs_format+0xcc>)
   13e82:	9311      	str	r3, [sp, #68]	; 0x44
   13e84:	4b14      	ldr	r3, [pc, #80]	; (13ed8 <lfs_format+0xd0>)
   13e86:	9312      	str	r3, [sp, #72]	; 0x48
   13e88:	f8cd d04c 	str.w	sp, [sp, #76]	; 0x4c
   13e8c:	2303      	movs	r3, #3
   13e8e:	aa0e      	add	r2, sp, #56	; 0x38
   13e90:	a906      	add	r1, sp, #24
   13e92:	4620      	mov	r0, r4
   13e94:	f7ff f85e 	bl	12f54 <lfs_dir_commit>
        if (err) {
   13e98:	4605      	mov	r5, r0
   13e9a:	2800      	cmp	r0, #0
   13e9c:	d1d8      	bne.n	13e50 <lfs_format+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
   13e9e:	2300      	movs	r3, #0
   13ea0:	9314      	str	r3, [sp, #80]	; 0x50
   13ea2:	2301      	movs	r3, #1
   13ea4:	9315      	str	r3, [sp, #84]	; 0x54
   13ea6:	aa14      	add	r2, sp, #80	; 0x50
   13ea8:	a906      	add	r1, sp, #24
   13eaa:	4620      	mov	r0, r4
   13eac:	f003 ff19 	bl	17ce2 <lfs_dir_fetch>
        if (err) {
   13eb0:	4605      	mov	r5, r0
   13eb2:	2800      	cmp	r0, #0
   13eb4:	d1cc      	bne.n	13e50 <lfs_format+0x48>
        root.erased = false;
   13eb6:	2200      	movs	r2, #0
   13eb8:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
   13ebc:	4613      	mov	r3, r2
   13ebe:	a906      	add	r1, sp, #24
   13ec0:	4620      	mov	r0, r4
   13ec2:	f7ff f847 	bl	12f54 <lfs_dir_commit>
   13ec6:	4605      	mov	r5, r0
        if (err) {
   13ec8:	e7c2      	b.n	13e50 <lfs_format+0x48>
   13eca:	bf00      	nop
   13ecc:	40100000 	.word	0x40100000
   13ed0:	0ff00008 	.word	0x0ff00008
   13ed4:	0001a294 	.word	0x0001a294
   13ed8:	20100018 	.word	0x20100018

00013edc <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
   13edc:	b470      	push	{r4, r5, r6}
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
   13ede:	2400      	movs	r4, #0
   13ee0:	4294      	cmp	r4, r2
   13ee2:	d213      	bcs.n	13f0c <lfs_crc+0x30>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
   13ee4:	5d0b      	ldrb	r3, [r1, r4]
   13ee6:	ea83 0500 	eor.w	r5, r3, r0
   13eea:	f005 050f 	and.w	r5, r5, #15
   13eee:	4e08      	ldr	r6, [pc, #32]	; (13f10 <lfs_crc+0x34>)
   13ef0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
   13ef4:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
   13ef8:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
   13efc:	f003 030f 	and.w	r3, r3, #15
   13f00:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
   13f04:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
   13f08:	3401      	adds	r4, #1
   13f0a:	e7e9      	b.n	13ee0 <lfs_crc+0x4>
    }

    return crc;
}
   13f0c:	bc70      	pop	{r4, r5, r6}
   13f0e:	4770      	bx	lr
   13f10:	0001a518 	.word	0x0001a518

00013f14 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   13f14:	b570      	push	{r4, r5, r6, lr}
   13f16:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   13f18:	4b11      	ldr	r3, [pc, #68]	; (13f60 <z_sys_init_run_level+0x4c>)
   13f1a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   13f1e:	e000      	b.n	13f22 <z_sys_init_run_level+0xe>
   13f20:	3508      	adds	r5, #8
   13f22:	1c73      	adds	r3, r6, #1
   13f24:	4a0e      	ldr	r2, [pc, #56]	; (13f60 <z_sys_init_run_level+0x4c>)
   13f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f2a:	42ab      	cmp	r3, r5
   13f2c:	d917      	bls.n	13f5e <z_sys_init_run_level+0x4a>
		const struct device *dev = entry->dev;
   13f2e:	686c      	ldr	r4, [r5, #4]

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) != 0) && (dev != NULL)) {
   13f30:	682b      	ldr	r3, [r5, #0]
   13f32:	4620      	mov	r0, r4
   13f34:	4798      	blx	r3
   13f36:	2800      	cmp	r0, #0
   13f38:	d0f2      	beq.n	13f20 <z_sys_init_run_level+0xc>
   13f3a:	2c00      	cmp	r4, #0
   13f3c:	d0f0      	beq.n	13f20 <z_sys_init_run_level+0xc>
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
   13f3e:	4909      	ldr	r1, [pc, #36]	; (13f64 <z_sys_init_run_level+0x50>)
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   13f40:	4b09      	ldr	r3, [pc, #36]	; (13f68 <z_sys_init_run_level+0x54>)
   13f42:	1ae4      	subs	r4, r4, r3
   13f44:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   13f46:	0960      	lsrs	r0, r4, #5
   13f48:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   13f4c:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   13f50:	2201      	movs	r2, #1
   13f52:	fa02 f404 	lsl.w	r4, r2, r4
   13f56:	431c      	orrs	r4, r3
   13f58:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
}
   13f5c:	e7e0      	b.n	13f20 <z_sys_init_run_level+0xc>
		}
	}
}
   13f5e:	bd70      	pop	{r4, r5, r6, pc}
   13f60:	0001a558 	.word	0x0001a558
   13f64:	200101c8 	.word	0x200101c8
   13f68:	20010168 	.word	0x20010168

00013f6c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   13f6c:	4b08      	ldr	r3, [pc, #32]	; (13f90 <z_device_ready+0x24>)
   13f6e:	1ac0      	subs	r0, r0, r3
   13f70:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   13f72:	0942      	lsrs	r2, r0, #5
   13f74:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   13f78:	4b06      	ldr	r3, [pc, #24]	; (13f94 <z_device_ready+0x28>)
   13f7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   13f7e:	2301      	movs	r3, #1
   13f80:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   13f84:	4202      	tst	r2, r0
}
   13f86:	bf0c      	ite	eq
   13f88:	4618      	moveq	r0, r3
   13f8a:	2000      	movne	r0, #0
   13f8c:	4770      	bx	lr
   13f8e:	bf00      	nop
   13f90:	20010168 	.word	0x20010168
   13f94:	200101c8 	.word	0x200101c8

00013f98 <z_impl_device_get_binding>:
{
   13f98:	b538      	push	{r3, r4, r5, lr}
   13f9a:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   13f9c:	4c11      	ldr	r4, [pc, #68]	; (13fe4 <z_impl_device_get_binding+0x4c>)
   13f9e:	e000      	b.n	13fa2 <z_impl_device_get_binding+0xa>
   13fa0:	3410      	adds	r4, #16
   13fa2:	4b11      	ldr	r3, [pc, #68]	; (13fe8 <z_impl_device_get_binding+0x50>)
   13fa4:	429c      	cmp	r4, r3
   13fa6:	d008      	beq.n	13fba <z_impl_device_get_binding+0x22>
		if (z_device_ready(dev) && (dev->name == name)) {
   13fa8:	4620      	mov	r0, r4
   13faa:	f7ff ffdf 	bl	13f6c <z_device_ready>
   13fae:	2800      	cmp	r0, #0
   13fb0:	d0f6      	beq.n	13fa0 <z_impl_device_get_binding+0x8>
   13fb2:	6823      	ldr	r3, [r4, #0]
   13fb4:	42ab      	cmp	r3, r5
   13fb6:	d1f3      	bne.n	13fa0 <z_impl_device_get_binding+0x8>
   13fb8:	e012      	b.n	13fe0 <z_impl_device_get_binding+0x48>
	for (dev = __device_start; dev != __device_end; dev++) {
   13fba:	4c0a      	ldr	r4, [pc, #40]	; (13fe4 <z_impl_device_get_binding+0x4c>)
   13fbc:	e000      	b.n	13fc0 <z_impl_device_get_binding+0x28>
   13fbe:	3410      	adds	r4, #16
   13fc0:	4b09      	ldr	r3, [pc, #36]	; (13fe8 <z_impl_device_get_binding+0x50>)
   13fc2:	429c      	cmp	r4, r3
   13fc4:	d00b      	beq.n	13fde <z_impl_device_get_binding+0x46>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   13fc6:	4620      	mov	r0, r4
   13fc8:	f7ff ffd0 	bl	13f6c <z_device_ready>
   13fcc:	2800      	cmp	r0, #0
   13fce:	d0f6      	beq.n	13fbe <z_impl_device_get_binding+0x26>
   13fd0:	6821      	ldr	r1, [r4, #0]
   13fd2:	4628      	mov	r0, r5
   13fd4:	f002 ffa8 	bl	16f28 <strcmp>
   13fd8:	2800      	cmp	r0, #0
   13fda:	d1f0      	bne.n	13fbe <z_impl_device_get_binding+0x26>
   13fdc:	e000      	b.n	13fe0 <z_impl_device_get_binding+0x48>
	return NULL;
   13fde:	2400      	movs	r4, #0
}
   13fe0:	4620      	mov	r0, r4
   13fe2:	bd38      	pop	{r3, r4, r5, pc}
   13fe4:	20010168 	.word	0x20010168
   13fe8:	200101c8 	.word	0x200101c8

00013fec <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   13fec:	4b01      	ldr	r3, [pc, #4]	; (13ff4 <z_impl_z_errno+0x8>)
   13fee:	6898      	ldr	r0, [r3, #8]
}
   13ff0:	3064      	adds	r0, #100	; 0x64
   13ff2:	4770      	bx	lr
   13ff4:	20010924 	.word	0x20010924

00013ff8 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   13ff8:	2804      	cmp	r0, #4
   13ffa:	d80c      	bhi.n	14016 <reason_to_str+0x1e>
   13ffc:	e8df f000 	tbb	[pc, r0]
   14000:	07050d03 	.word	0x07050d03
   14004:	09          	.byte	0x09
   14005:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   14006:	4806      	ldr	r0, [pc, #24]	; (14020 <reason_to_str+0x28>)
   14008:	4770      	bx	lr
		return "Stack overflow";
   1400a:	4806      	ldr	r0, [pc, #24]	; (14024 <reason_to_str+0x2c>)
   1400c:	4770      	bx	lr
		return "Kernel oops";
   1400e:	4806      	ldr	r0, [pc, #24]	; (14028 <reason_to_str+0x30>)
   14010:	4770      	bx	lr
		return "Kernel panic";
   14012:	4806      	ldr	r0, [pc, #24]	; (1402c <reason_to_str+0x34>)
   14014:	4770      	bx	lr
	default:
		return "Unknown error";
   14016:	4806      	ldr	r0, [pc, #24]	; (14030 <reason_to_str+0x38>)
   14018:	4770      	bx	lr
		return "Unhandled interrupt";
   1401a:	4806      	ldr	r0, [pc, #24]	; (14034 <reason_to_str+0x3c>)
	}
}
   1401c:	4770      	bx	lr
   1401e:	bf00      	nop
   14020:	0001a5c0 	.word	0x0001a5c0
   14024:	0001a594 	.word	0x0001a594
   14028:	0001a5a4 	.word	0x0001a5a4
   1402c:	0001a5b0 	.word	0x0001a5b0
   14030:	0001a570 	.word	0x0001a570
   14034:	0001a580 	.word	0x0001a580

00014038 <thread_name_get>:
{
   14038:	b508      	push	{r3, lr}
	const char *thread_name = k_thread_name_get(thread);
   1403a:	f005 f84c 	bl	190d6 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1403e:	b120      	cbz	r0, 1404a <thread_name_get+0x12>
   14040:	4603      	mov	r3, r0
   14042:	7802      	ldrb	r2, [r0, #0]
   14044:	b11a      	cbz	r2, 1404e <thread_name_get+0x16>
}
   14046:	4618      	mov	r0, r3
   14048:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   1404a:	4b02      	ldr	r3, [pc, #8]	; (14054 <thread_name_get+0x1c>)
   1404c:	e7fb      	b.n	14046 <thread_name_get+0xe>
   1404e:	4b01      	ldr	r3, [pc, #4]	; (14054 <thread_name_get+0x1c>)
	return thread_name;
   14050:	e7f9      	b.n	14046 <thread_name_get+0xe>
   14052:	bf00      	nop
   14054:	0001a5d0 	.word	0x0001a5d0

00014058 <k_sys_fatal_error_handler>:
{
   14058:	b510      	push	{r4, lr}
   1405a:	4604      	mov	r4, r0
	z_impl_log_panic();
   1405c:	f7f9 fd9c 	bl	db98 <z_impl_log_panic>
	LOG_ERR("Halting system");
   14060:	f04f 0100 	mov.w	r1, #0
   14064:	2301      	movs	r3, #1
   14066:	f363 0102 	bfi	r1, r3, #0, #3
   1406a:	f36f 01c5 	bfc	r1, #3, #3
   1406e:	4b06      	ldr	r3, [pc, #24]	; (14088 <k_sys_fatal_error_handler+0x30>)
   14070:	4a06      	ldr	r2, [pc, #24]	; (1408c <k_sys_fatal_error_handler+0x34>)
   14072:	1a9b      	subs	r3, r3, r2
   14074:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   14078:	f363 118f 	bfi	r1, r3, #6, #10
   1407c:	4804      	ldr	r0, [pc, #16]	; (14090 <k_sys_fatal_error_handler+0x38>)
   1407e:	f7f9 ff2f 	bl	dee0 <log_0>
	arch_system_halt(reason);
   14082:	4620      	mov	r0, r4
   14084:	f004 fdbc 	bl	18c00 <arch_system_halt>
   14088:	0001959c 	.word	0x0001959c
   1408c:	00019574 	.word	0x00019574
   14090:	0001a5d8 	.word	0x0001a5d8

00014094 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14098:	b082      	sub	sp, #8
   1409a:	4605      	mov	r5, r0
   1409c:	460e      	mov	r6, r1
   1409e:	f04f 0320 	mov.w	r3, #32
   140a2:	f3ef 8711 	mrs	r7, BASEPRI
   140a6:	f383 8811 	msr	BASEPRI, r3
   140aa:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   140ae:	f000 fe99 	bl	14de4 <z_impl_k_current_get>
   140b2:	4604      	mov	r4, r0
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   140b4:	f04f 0800 	mov.w	r8, #0
   140b8:	2301      	movs	r3, #1
   140ba:	f363 0802 	bfi	r8, r3, #0, #3
   140be:	f36f 08c5 	bfc	r8, #3, #3
   140c2:	4b28      	ldr	r3, [pc, #160]	; (14164 <z_fatal_error+0xd0>)
   140c4:	4a28      	ldr	r2, [pc, #160]	; (14168 <z_fatal_error+0xd4>)
   140c6:	1a9b      	subs	r3, r3, r2
   140c8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   140cc:	f363 188f 	bfi	r8, r3, #6, #10
   140d0:	4628      	mov	r0, r5
   140d2:	f7ff ff91 	bl	13ff8 <reason_to_str>
   140d6:	4602      	mov	r2, r0
   140d8:	f8ad 8000 	strh.w	r8, [sp]
   140dc:	2300      	movs	r3, #0
   140de:	4629      	mov	r1, r5
   140e0:	4822      	ldr	r0, [pc, #136]	; (1416c <z_fatal_error+0xd8>)
   140e2:	f7f9 fcd7 	bl	da94 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   140e6:	b11e      	cbz	r6, 140f0 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   140e8:	69f3      	ldr	r3, [r6, #28]
   140ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
   140ee:	bb33      	cbnz	r3, 1413e <z_fatal_error+0xaa>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   140f0:	f04f 0800 	mov.w	r8, #0
   140f4:	2301      	movs	r3, #1
   140f6:	f363 0802 	bfi	r8, r3, #0, #3
   140fa:	f36f 08c5 	bfc	r8, #3, #3
   140fe:	4b19      	ldr	r3, [pc, #100]	; (14164 <z_fatal_error+0xd0>)
   14100:	4a19      	ldr	r2, [pc, #100]	; (14168 <z_fatal_error+0xd4>)
   14102:	1a9b      	subs	r3, r3, r2
   14104:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   14108:	f363 188f 	bfi	r8, r3, #6, #10
   1410c:	4620      	mov	r0, r4
   1410e:	f7ff ff93 	bl	14038 <thread_name_get>
   14112:	f7f9 fbc1 	bl	d898 <log_strdup>
   14116:	4602      	mov	r2, r0
   14118:	4643      	mov	r3, r8
   1411a:	4621      	mov	r1, r4
   1411c:	4814      	ldr	r0, [pc, #80]	; (14170 <z_fatal_error+0xdc>)
   1411e:	f7f9 fdf9 	bl	dd14 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   14122:	4631      	mov	r1, r6
   14124:	4628      	mov	r0, r5
   14126:	f7ff ff97 	bl	14058 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1412a:	f387 8811 	msr	BASEPRI, r7
   1412e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   14132:	4620      	mov	r0, r4
   14134:	f7fb fa16 	bl	f564 <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   14138:	b002      	add	sp, #8
   1413a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Fault during interrupt handling\n");
   1413e:	f04f 0100 	mov.w	r1, #0
   14142:	2301      	movs	r3, #1
   14144:	f363 0102 	bfi	r1, r3, #0, #3
   14148:	f36f 01c5 	bfc	r1, #3, #3
   1414c:	4b05      	ldr	r3, [pc, #20]	; (14164 <z_fatal_error+0xd0>)
   1414e:	4a06      	ldr	r2, [pc, #24]	; (14168 <z_fatal_error+0xd4>)
   14150:	1a9b      	subs	r3, r3, r2
   14152:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   14156:	f363 118f 	bfi	r1, r3, #6, #10
   1415a:	4806      	ldr	r0, [pc, #24]	; (14174 <z_fatal_error+0xe0>)
   1415c:	f7f9 fec0 	bl	dee0 <log_0>
   14160:	e7c6      	b.n	140f0 <z_fatal_error+0x5c>
   14162:	bf00      	nop
   14164:	0001959c 	.word	0x0001959c
   14168:	00019574 	.word	0x00019574
   1416c:	0001a5e8 	.word	0x0001a5e8
   14170:	0001a634 	.word	0x0001a634
   14174:	0001a610 	.word	0x0001a610

00014178 <set_kernel_idle_time_in_ticks>:
 */
#if !SMP_FALLBACK
static void set_kernel_idle_time_in_ticks(int32_t ticks)
{
#ifdef CONFIG_SYS_POWER_MANAGEMENT
	_kernel.idle = ticks;
   14178:	4b01      	ldr	r3, [pc, #4]	; (14180 <set_kernel_idle_time_in_ticks+0x8>)
   1417a:	6218      	str	r0, [r3, #32]
#endif
}
   1417c:	4770      	bx	lr
   1417e:	bf00      	nop
   14180:	20010924 	.word	0x20010924

00014184 <init_idle_thread>:

/* LCOV_EXCL_STOP */

#if defined(CONFIG_MULTITHREADING)
static void init_idle_thread(int i)
{
   14184:	b510      	push	{r4, lr}
   14186:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   14188:	4c0e      	ldr	r4, [pc, #56]	; (141c4 <init_idle_thread+0x40>)
   1418a:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	k_thread_stack_t *stack = z_idle_stacks[i];
   1418e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   14192:	2300      	movs	r3, #0
   14194:	9305      	str	r3, [sp, #20]
   14196:	2201      	movs	r2, #1
   14198:	9204      	str	r2, [sp, #16]
   1419a:	220f      	movs	r2, #15
   1419c:	9203      	str	r2, [sp, #12]
   1419e:	9302      	str	r3, [sp, #8]
   141a0:	9301      	str	r3, [sp, #4]
   141a2:	9300      	str	r3, [sp, #0]
   141a4:	4b08      	ldr	r3, [pc, #32]	; (141c8 <init_idle_thread+0x44>)
   141a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   141aa:	4908      	ldr	r1, [pc, #32]	; (141cc <init_idle_thread+0x48>)
   141ac:	eb01 1180 	add.w	r1, r1, r0, lsl #6
   141b0:	4620      	mov	r0, r4
   141b2:	f000 fe7b 	bl	14eac <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   141b6:	7b63      	ldrb	r3, [r4, #13]
   141b8:	f023 0304 	bic.w	r3, r3, #4
   141bc:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   141be:	b006      	add	sp, #24
   141c0:	bd10      	pop	{r4, pc}
   141c2:	bf00      	nop
   141c4:	200102e0 	.word	0x200102e0
   141c8:	00018c3d 	.word	0x00018c3d
   141cc:	20011470 	.word	0x20011470

000141d0 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
#ifdef CONFIG_MULTITHREADING
static char *prepare_multithreading(void)
{
   141d0:	b570      	push	{r4, r5, r6, lr}
   141d2:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   141d4:	f000 fd38 	bl	14c48 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   141d8:	4d1c      	ldr	r5, [pc, #112]	; (1424c <prepare_multithreading+0x7c>)
   141da:	4b1d      	ldr	r3, [pc, #116]	; (14250 <prepare_multithreading+0x80>)
   141dc:	625d      	str	r5, [r3, #36]	; 0x24
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   141de:	4b1d      	ldr	r3, [pc, #116]	; (14254 <prepare_multithreading+0x84>)
   141e0:	9305      	str	r3, [sp, #20]
   141e2:	2301      	movs	r3, #1
   141e4:	9304      	str	r3, [sp, #16]
   141e6:	2400      	movs	r4, #0
   141e8:	9403      	str	r4, [sp, #12]
   141ea:	9402      	str	r4, [sp, #8]
   141ec:	9401      	str	r4, [sp, #4]
   141ee:	9400      	str	r4, [sp, #0]
   141f0:	4b19      	ldr	r3, [pc, #100]	; (14258 <prepare_multithreading+0x88>)
   141f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   141f6:	4919      	ldr	r1, [pc, #100]	; (1425c <prepare_multithreading+0x8c>)
   141f8:	4628      	mov	r0, r5
   141fa:	f000 fe57 	bl	14eac <z_setup_new_thread>
   141fe:	4606      	mov	r6, r0
   14200:	7b6b      	ldrb	r3, [r5, #13]
   14202:	f023 0304 	bic.w	r3, r3, #4
   14206:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   14208:	4628      	mov	r0, r5
   1420a:	f004 fe63 	bl	18ed4 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1420e:	2c00      	cmp	r4, #0
   14210:	dd07      	ble.n	14222 <prepare_multithreading+0x52>
	list->head = (sys_dnode_t *)list;
   14212:	4b0f      	ldr	r3, [pc, #60]	; (14250 <prepare_multithreading+0x80>)
   14214:	f103 0218 	add.w	r2, r3, #24
   14218:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
   1421a:	61da      	str	r2, [r3, #28]
	}

	initialize_timeouts();

	return stack_ptr;
}
   1421c:	4630      	mov	r0, r6
   1421e:	b006      	add	sp, #24
   14220:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   14222:	4620      	mov	r0, r4
   14224:	f7ff ffae 	bl	14184 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   14228:	4a0d      	ldr	r2, [pc, #52]	; (14260 <prepare_multithreading+0x90>)
   1422a:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
   1422e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   14232:	4b07      	ldr	r3, [pc, #28]	; (14250 <prepare_multithreading+0x80>)
   14234:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   14238:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1423a:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1423c:	4a09      	ldr	r2, [pc, #36]	; (14264 <prepare_multithreading+0x94>)
   1423e:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
   14242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
   14246:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   14248:	3401      	adds	r4, #1
   1424a:	e7e0      	b.n	1420e <prepare_multithreading+0x3e>
   1424c:	20010360 	.word	0x20010360
   14250:	20010924 	.word	0x20010924
   14254:	0001a64c 	.word	0x0001a64c
   14258:	000142c9 	.word	0x000142c9
   1425c:	20010c70 	.word	0x20010c70
   14260:	200102e0 	.word	0x200102e0
   14264:	200115b0 	.word	0x200115b0

00014268 <switch_to_main_thread>:

static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   14268:	b508      	push	{r3, lr}
   1426a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1426c:	4a01      	ldr	r2, [pc, #4]	; (14274 <switch_to_main_thread+0xc>)
   1426e:	4802      	ldr	r0, [pc, #8]	; (14278 <switch_to_main_thread+0x10>)
   14270:	f7fa fcb2 	bl	ebd8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   14274:	000142c9 	.word	0x000142c9
   14278:	20010360 	.word	0x20010360

0001427c <z_bss_zero>:
{
   1427c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1427e:	4803      	ldr	r0, [pc, #12]	; (1428c <z_bss_zero+0x10>)
   14280:	4a03      	ldr	r2, [pc, #12]	; (14290 <z_bss_zero+0x14>)
   14282:	1a12      	subs	r2, r2, r0
   14284:	2100      	movs	r1, #0
   14286:	f002 feaf 	bl	16fe8 <memset>
}
   1428a:	bd08      	pop	{r3, pc}
   1428c:	20010228 	.word	0x20010228
   14290:	2001096c 	.word	0x2001096c

00014294 <z_data_copy>:
{
   14294:	b508      	push	{r3, lr}
		 __data_ram_end - __data_ram_start);
   14296:	4806      	ldr	r0, [pc, #24]	; (142b0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   14298:	4a06      	ldr	r2, [pc, #24]	; (142b4 <z_data_copy+0x20>)
   1429a:	1a12      	subs	r2, r2, r0
   1429c:	4906      	ldr	r1, [pc, #24]	; (142b8 <z_data_copy+0x24>)
   1429e:	f002 fe7f 	bl	16fa0 <memcpy>
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   142a2:	4a06      	ldr	r2, [pc, #24]	; (142bc <z_data_copy+0x28>)
   142a4:	4906      	ldr	r1, [pc, #24]	; (142c0 <z_data_copy+0x2c>)
   142a6:	4807      	ldr	r0, [pc, #28]	; (142c4 <z_data_copy+0x30>)
   142a8:	f002 fe7a 	bl	16fa0 <memcpy>
}
   142ac:	bd08      	pop	{r3, pc}
   142ae:	bf00      	nop
   142b0:	20010000 	.word	0x20010000
   142b4:	20010228 	.word	0x20010228
   142b8:	0001a690 	.word	0x0001a690
   142bc:	00000000 	.word	0x00000000
   142c0:	0001a690 	.word	0x0001a690
   142c4:	20010000 	.word	0x20010000

000142c8 <bg_thread_main>:
{
   142c8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   142ca:	4b0c      	ldr	r3, [pc, #48]	; (142fc <bg_thread_main+0x34>)
   142cc:	2201      	movs	r2, #1
   142ce:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   142d0:	2002      	movs	r0, #2
   142d2:	f7ff fe1f 	bl	13f14 <z_sys_init_run_level>
	printk("*** Booting Zephyr OS build %s %s ***\n",
   142d6:	4a0a      	ldr	r2, [pc, #40]	; (14300 <bg_thread_main+0x38>)
   142d8:	490a      	ldr	r1, [pc, #40]	; (14304 <bg_thread_main+0x3c>)
   142da:	480b      	ldr	r0, [pc, #44]	; (14308 <bg_thread_main+0x40>)
   142dc:	f001 fb31 	bl	15942 <printk>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   142e0:	2003      	movs	r0, #3
   142e2:	f7ff fe17 	bl	13f14 <z_sys_init_run_level>
	z_init_static_threads();
   142e6:	f000 fe11 	bl	14f0c <z_init_static_threads>
	main();
   142ea:	f7f8 f939 	bl	c560 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   142ee:	4a07      	ldr	r2, [pc, #28]	; (1430c <bg_thread_main+0x44>)
   142f0:	7b13      	ldrb	r3, [r2, #12]
   142f2:	f023 0301 	bic.w	r3, r3, #1
   142f6:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   142f8:	bd08      	pop	{r3, pc}
   142fa:	bf00      	nop
   142fc:	20010969 	.word	0x20010969
   14300:	0001a3a4 	.word	0x0001a3a4
   14304:	0001a654 	.word	0x0001a654
   14308:	0001a660 	.word	0x0001a660
   1430c:	20010360 	.word	0x20010360

00014310 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   14310:	b500      	push	{lr}
   14312:	b0a1      	sub	sp, #132	; 0x84
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   14314:	f7f9 fa12 	bl	d73c <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   14318:	4b17      	ldr	r3, [pc, #92]	; (14378 <z_cstart+0x68>)
	uint32_t msp =
   1431a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1431e:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   14322:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14326:	4c15      	ldr	r4, [pc, #84]	; (1437c <z_cstart+0x6c>)
   14328:	23e0      	movs	r3, #224	; 0xe0
   1432a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1432e:	2500      	movs	r5, #0
   14330:	77e5      	strb	r5, [r4, #31]
   14332:	7625      	strb	r5, [r4, #24]
   14334:	7665      	strb	r5, [r4, #25]
   14336:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   14338:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1433a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1433e:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   14340:	f7fb f8dc 	bl	f4fc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   14344:	f7fa fc62 	bl	ec0c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   14348:	f04f 33ff 	mov.w	r3, #4294967295
   1434c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1434e:	62e3      	str	r3, [r4, #44]	; 0x2c
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   14350:	2401      	movs	r4, #1
   14352:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   14356:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1435a:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
   1435c:	951b      	str	r5, [sp, #108]	; 0x6c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1435e:	4b08      	ldr	r3, [pc, #32]	; (14380 <z_cstart+0x70>)
   14360:	f8c3 d008 	str.w	sp, [r3, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   14364:	4628      	mov	r0, r5
   14366:	f7ff fdd5 	bl	13f14 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1436a:	4620      	mov	r0, r4
   1436c:	f7ff fdd2 	bl	13f14 <z_sys_init_run_level>
	__stack_chk_guard = stack_guard;
	__stack_chk_guard <<= 8;
#endif	/* CONFIG_STACK_CANARIES */

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   14370:	f7ff ff2e 	bl	141d0 <prepare_multithreading>
   14374:	f7ff ff78 	bl	14268 <switch_to_main_thread>
   14378:	200115b0 	.word	0x200115b0
   1437c:	e000ed00 	.word	0xe000ed00
   14380:	20010924 	.word	0x20010924

00014384 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   14384:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   14386:	4c06      	ldr	r4, [pc, #24]	; (143a0 <statics_init+0x1c>)
   14388:	4b06      	ldr	r3, [pc, #24]	; (143a4 <statics_init+0x20>)
   1438a:	429c      	cmp	r4, r3
   1438c:	d206      	bcs.n	1439c <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1438e:	68a2      	ldr	r2, [r4, #8]
   14390:	6861      	ldr	r1, [r4, #4]
   14392:	4620      	mov	r0, r4
   14394:	f004 fc5e 	bl	18c54 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   14398:	3414      	adds	r4, #20
   1439a:	e7f5      	b.n	14388 <statics_init+0x4>
	}
	return 0;
}
   1439c:	2000      	movs	r0, #0
   1439e:	bd10      	pop	{r4, pc}
   143a0:	20010204 	.word	0x20010204
   143a4:	20010218 	.word	0x20010218

000143a8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   143a8:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   143aa:	4c06      	ldr	r4, [pc, #24]	; (143c4 <init_mem_slab_module+0x1c>)
	int rc = 0;
   143ac:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   143ae:	4b06      	ldr	r3, [pc, #24]	; (143c8 <init_mem_slab_module+0x20>)
   143b0:	429c      	cmp	r4, r3
   143b2:	d206      	bcs.n	143c2 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   143b4:	4620      	mov	r0, r4
   143b6:	f004 fcd3 	bl	18d60 <create_free_list>
		if (rc < 0) {
   143ba:	2800      	cmp	r0, #0
   143bc:	db01      	blt.n	143c2 <init_mem_slab_module+0x1a>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   143be:	341c      	adds	r4, #28
   143c0:	e7f5      	b.n	143ae <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   143c2:	bd10      	pop	{r4, pc}
   143c4:	200101cc 	.word	0x200101cc
   143c8:	20010204 	.word	0x20010204

000143cc <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   143cc:	b5d0      	push	{r4, r6, r7, lr}
   143ce:	b082      	sub	sp, #8
   143d0:	460c      	mov	r4, r1
   143d2:	461f      	mov	r7, r3
	__asm__ volatile(
   143d4:	f04f 0320 	mov.w	r3, #32
   143d8:	f3ef 8111 	mrs	r1, BASEPRI
   143dc:	f383 8811 	msr	BASEPRI, r3
   143e0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   143e4:	6943      	ldr	r3, [r0, #20]
   143e6:	b16b      	cbz	r3, 14404 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   143e8:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   143ea:	6943      	ldr	r3, [r0, #20]
   143ec:	681b      	ldr	r3, [r3, #0]
   143ee:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   143f0:	6983      	ldr	r3, [r0, #24]
   143f2:	3301      	adds	r3, #1
   143f4:	6183      	str	r3, [r0, #24]
		result = 0;
   143f6:	2000      	movs	r0, #0
	__asm__ volatile(
   143f8:	f381 8811 	msr	BASEPRI, r1
   143fc:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	return result;
}
   14400:	b002      	add	sp, #8
   14402:	bdd0      	pop	{r4, r6, r7, pc}
   14404:	4616      	mov	r6, r2
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14406:	ea56 0307 	orrs.w	r3, r6, r7
   1440a:	d104      	bne.n	14416 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
   1440c:	2300      	movs	r3, #0
   1440e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   14410:	f06f 000b 	mvn.w	r0, #11
   14414:	e7f0      	b.n	143f8 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   14416:	e9cd 6700 	strd	r6, r7, [sp]
   1441a:	4602      	mov	r2, r0
   1441c:	4804      	ldr	r0, [pc, #16]	; (14430 <k_mem_slab_alloc+0x64>)
   1441e:	f000 fba7 	bl	14b70 <z_pend_curr>
		if (result == 0) {
   14422:	2800      	cmp	r0, #0
   14424:	d1ec      	bne.n	14400 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   14426:	4b03      	ldr	r3, [pc, #12]	; (14434 <k_mem_slab_alloc+0x68>)
   14428:	689b      	ldr	r3, [r3, #8]
   1442a:	695b      	ldr	r3, [r3, #20]
   1442c:	6023      	str	r3, [r4, #0]
		return result;
   1442e:	e7e7      	b.n	14400 <k_mem_slab_alloc+0x34>
   14430:	20010924 	.word	0x20010924
   14434:	20010924 	.word	0x20010924

00014438 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   14438:	b570      	push	{r4, r5, r6, lr}
   1443a:	4604      	mov	r4, r0
   1443c:	460d      	mov	r5, r1
	__asm__ volatile(
   1443e:	f04f 0320 	mov.w	r3, #32
   14442:	f3ef 8611 	mrs	r6, BASEPRI
   14446:	f383 8811 	msr	BASEPRI, r3
   1444a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1444e:	f004 fdd1 	bl	18ff4 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   14452:	b150      	cbz	r0, 1446a <k_mem_slab_free+0x32>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   14454:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   14456:	2100      	movs	r1, #0
   14458:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1445a:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   1445c:	f004 fd3a 	bl	18ed4 <z_ready_thread>
		z_reschedule(&lock, key);
   14460:	4631      	mov	r1, r6
   14462:	4808      	ldr	r0, [pc, #32]	; (14484 <k_mem_slab_free+0x4c>)
   14464:	f000 f936 	bl	146d4 <z_reschedule>
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   14468:	bd70      	pop	{r4, r5, r6, pc}
		**(char ***)mem = slab->free_list;
   1446a:	682b      	ldr	r3, [r5, #0]
   1446c:	6962      	ldr	r2, [r4, #20]
   1446e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   14470:	682b      	ldr	r3, [r5, #0]
   14472:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   14474:	69a3      	ldr	r3, [r4, #24]
   14476:	3b01      	subs	r3, #1
   14478:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1447a:	f386 8811 	msr	BASEPRI, r6
   1447e:	f3bf 8f6f 	isb	sy
}
   14482:	e7f1      	b.n	14468 <k_mem_slab_free+0x30>
   14484:	20010924 	.word	0x20010924

00014488 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   14488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1448c:	b083      	sub	sp, #12
   1448e:	4604      	mov	r4, r0
   14490:	461d      	mov	r5, r3
	__asm__ volatile(
   14492:	f04f 0320 	mov.w	r3, #32
   14496:	f3ef 8711 	mrs	r7, BASEPRI
   1449a:	f383 8811 	msr	BASEPRI, r3
   1449e:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   144a2:	68c1      	ldr	r1, [r0, #12]
   144a4:	b999      	cbnz	r1, 144ce <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   144a6:	2900      	cmp	r1, #0
   144a8:	d14f      	bne.n	1454a <z_impl_k_mutex_lock+0xc2>
   144aa:	4b3a      	ldr	r3, [pc, #232]	; (14594 <z_impl_k_mutex_lock+0x10c>)
   144ac:	689b      	ldr	r3, [r3, #8]
   144ae:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   144b2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   144b4:	3101      	adds	r1, #1
   144b6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   144b8:	4b36      	ldr	r3, [pc, #216]	; (14594 <z_impl_k_mutex_lock+0x10c>)
   144ba:	689b      	ldr	r3, [r3, #8]
   144bc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   144be:	f387 8811 	msr	BASEPRI, r7
   144c2:	f3bf 8f6f 	isb	sy
			mutex->owner_orig_prio);

		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
   144c6:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   144c8:	b003      	add	sp, #12
   144ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   144ce:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   144d0:	6882      	ldr	r2, [r0, #8]
   144d2:	4b30      	ldr	r3, [pc, #192]	; (14594 <z_impl_k_mutex_lock+0x10c>)
   144d4:	689b      	ldr	r3, [r3, #8]
   144d6:	429a      	cmp	r2, r3
   144d8:	d0e5      	beq.n	144a6 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   144da:	ea55 0106 	orrs.w	r1, r5, r6
   144de:	bf0c      	ite	eq
   144e0:	f04f 0801 	moveq.w	r8, #1
   144e4:	f04f 0800 	movne.w	r8, #0
   144e8:	d031      	beq.n	1454e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   144ea:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   144ee:	4649      	mov	r1, r9
   144f0:	f993 000e 	ldrsb.w	r0, [r3, #14]
   144f4:	f004 fc59 	bl	18daa <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   144f8:	4581      	cmp	r9, r0
   144fa:	dc2f      	bgt.n	1455c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   144fc:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   14500:	9600      	str	r6, [sp, #0]
   14502:	9501      	str	r5, [sp, #4]
   14504:	4622      	mov	r2, r4
   14506:	4639      	mov	r1, r7
   14508:	4823      	ldr	r0, [pc, #140]	; (14598 <z_impl_k_mutex_lock+0x110>)
   1450a:	f000 fb31 	bl	14b70 <z_pend_curr>
	if (got_mutex == 0) {
   1450e:	2800      	cmp	r0, #0
   14510:	d0da      	beq.n	144c8 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   14512:	f04f 0320 	mov.w	r3, #32
   14516:	f3ef 8511 	mrs	r5, BASEPRI
   1451a:	f383 8811 	msr	BASEPRI, r3
   1451e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   14522:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14524:	429c      	cmp	r4, r3
   14526:	d01f      	beq.n	14568 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   14528:	b1f3      	cbz	r3, 14568 <z_impl_k_mutex_lock+0xe0>
   1452a:	6921      	ldr	r1, [r4, #16]
   1452c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   14530:	f004 fc3b 	bl	18daa <new_prio_for_inheritance>
   14534:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   14536:	4620      	mov	r0, r4
   14538:	f004 fc40 	bl	18dbc <adjust_owner_prio>
   1453c:	b9b0      	cbnz	r0, 1456c <z_impl_k_mutex_lock+0xe4>
   1453e:	f1b9 0f00 	cmp.w	r9, #0
   14542:	d015      	beq.n	14570 <z_impl_k_mutex_lock+0xe8>
   14544:	f04f 0801 	mov.w	r8, #1
   14548:	e012      	b.n	14570 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1454a:	6923      	ldr	r3, [r4, #16]
   1454c:	e7b1      	b.n	144b2 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1454e:	f387 8811 	msr	BASEPRI, r7
   14552:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   14556:	f06f 000f 	mvn.w	r0, #15
   1455a:	e7b5      	b.n	144c8 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1455c:	4601      	mov	r1, r0
   1455e:	4620      	mov	r0, r4
   14560:	f004 fc2c 	bl	18dbc <adjust_owner_prio>
   14564:	4681      	mov	r9, r0
   14566:	e7cb      	b.n	14500 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   14568:	6921      	ldr	r1, [r4, #16]
   1456a:	e7e4      	b.n	14536 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1456c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   14570:	f1b8 0f00 	cmp.w	r8, #0
   14574:	d106      	bne.n	14584 <z_impl_k_mutex_lock+0xfc>
   14576:	f385 8811 	msr	BASEPRI, r5
   1457a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1457e:	f06f 000a 	mvn.w	r0, #10
   14582:	e7a1      	b.n	144c8 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   14584:	4629      	mov	r1, r5
   14586:	4804      	ldr	r0, [pc, #16]	; (14598 <z_impl_k_mutex_lock+0x110>)
   14588:	f000 f8a4 	bl	146d4 <z_reschedule>
	return -EAGAIN;
   1458c:	f06f 000a 	mvn.w	r0, #10
   14590:	e79a      	b.n	144c8 <z_impl_k_mutex_lock+0x40>
   14592:	bf00      	nop
   14594:	20010924 	.word	0x20010924
   14598:	20010924 	.word	0x20010924

0001459c <z_impl_k_mutex_unlock>:
{
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1459c:	6882      	ldr	r2, [r0, #8]
   1459e:	2a00      	cmp	r2, #0
   145a0:	d034      	beq.n	1460c <z_impl_k_mutex_unlock+0x70>
{
   145a2:	b538      	push	{r3, r4, r5, lr}
   145a4:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   145a6:	4b1c      	ldr	r3, [pc, #112]	; (14618 <z_impl_k_mutex_unlock+0x7c>)
   145a8:	689b      	ldr	r3, [r3, #8]
   145aa:	429a      	cmp	r2, r3
   145ac:	d131      	bne.n	14612 <z_impl_k_mutex_unlock+0x76>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   145ae:	7bda      	ldrb	r2, [r3, #15]
   145b0:	3a01      	subs	r2, #1
   145b2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   145b4:	68c3      	ldr	r3, [r0, #12]
   145b6:	2b01      	cmp	r3, #1
   145b8:	d005      	beq.n	145c6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   145ba:	3b01      	subs	r3, #1
   145bc:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   145be:	f000 f8fd 	bl	147bc <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   145c2:	2000      	movs	r0, #0
}
   145c4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   145c6:	f04f 0320 	mov.w	r3, #32
   145ca:	f3ef 8511 	mrs	r5, BASEPRI
   145ce:	f383 8811 	msr	BASEPRI, r3
   145d2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   145d6:	6901      	ldr	r1, [r0, #16]
   145d8:	f004 fbf0 	bl	18dbc <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   145dc:	4620      	mov	r0, r4
   145de:	f004 fd09 	bl	18ff4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   145e2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   145e4:	b158      	cbz	r0, 145fe <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
   145e6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   145ea:	6123      	str	r3, [r4, #16]
   145ec:	2300      	movs	r3, #0
   145ee:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   145f0:	f004 fc70 	bl	18ed4 <z_ready_thread>
		z_reschedule(&lock, key);
   145f4:	4629      	mov	r1, r5
   145f6:	4809      	ldr	r0, [pc, #36]	; (1461c <z_impl_k_mutex_unlock+0x80>)
   145f8:	f000 f86c 	bl	146d4 <z_reschedule>
   145fc:	e7df      	b.n	145be <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   145fe:	2300      	movs	r3, #0
   14600:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   14602:	f385 8811 	msr	BASEPRI, r5
   14606:	f3bf 8f6f 	isb	sy
   1460a:	e7d8      	b.n	145be <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1460c:	f06f 0015 	mvn.w	r0, #21
}
   14610:	4770      	bx	lr
		return -EPERM;
   14612:	f04f 30ff 	mov.w	r0, #4294967295
   14616:	e7d5      	b.n	145c4 <z_impl_k_mutex_unlock+0x28>
   14618:	20010924 	.word	0x20010924
   1461c:	20010924 	.word	0x20010924

00014620 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   14620:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14622:	f1b3 3fff 	cmp.w	r3, #4294967295
   14626:	bf08      	it	eq
   14628:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1462c:	d100      	bne.n	14630 <add_thread_timeout+0x10>
#ifdef CONFIG_LEGACY_TIMEOUT_API
		timeout = _TICK_ALIGN + k_ms_to_ticks_ceil32(timeout);
#endif
		z_add_thread_timeout(thread, timeout);
	}
}
   1462e:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, k_timeout_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   14630:	4902      	ldr	r1, [pc, #8]	; (1463c <add_thread_timeout+0x1c>)
   14632:	3018      	adds	r0, #24
   14634:	f000 fd00 	bl	15038 <z_add_timeout>
   14638:	e7f9      	b.n	1462e <add_thread_timeout+0xe>
   1463a:	bf00      	nop
   1463c:	00018f01 	.word	0x00018f01

00014640 <z_reset_time_slice>:
{
   14640:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   14642:	4b08      	ldr	r3, [pc, #32]	; (14664 <z_reset_time_slice+0x24>)
   14644:	681b      	ldr	r3, [r3, #0]
   14646:	b903      	cbnz	r3, 1464a <z_reset_time_slice+0xa>
}
   14648:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1464a:	f7fa f9ef 	bl	ea2c <z_clock_elapsed>
   1464e:	4603      	mov	r3, r0
   14650:	4a04      	ldr	r2, [pc, #16]	; (14664 <z_reset_time_slice+0x24>)
   14652:	6810      	ldr	r0, [r2, #0]
   14654:	4403      	add	r3, r0
   14656:	4a04      	ldr	r2, [pc, #16]	; (14668 <z_reset_time_slice+0x28>)
   14658:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1465a:	2100      	movs	r1, #0
   1465c:	f004 fdb7 	bl	191ce <z_set_timeout_expiry>
}
   14660:	e7f2      	b.n	14648 <z_reset_time_slice+0x8>
   14662:	bf00      	nop
   14664:	2001095c 	.word	0x2001095c
   14668:	20010924 	.word	0x20010924

0001466c <k_sched_time_slice_set>:
{
   1466c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14670:	4606      	mov	r6, r0
   14672:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   14674:	2300      	movs	r3, #0
	__asm__ volatile(
   14676:	f04f 0220 	mov.w	r2, #32
   1467a:	f3ef 8711 	mrs	r7, BASEPRI
   1467e:	f382 8811 	msr	BASEPRI, r2
   14682:	f3bf 8f6f 	isb	sy
   14686:	b9eb      	cbnz	r3, 146c4 <k_sched_time_slice_set+0x58>
		_current_cpu->slice_ticks = 0;
   14688:	2300      	movs	r3, #0
   1468a:	4a0f      	ldr	r2, [pc, #60]	; (146c8 <k_sched_time_slice_set+0x5c>)
   1468c:	6113      	str	r3, [r2, #16]
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1468e:	0c75      	lsrs	r5, r6, #17
   14690:	03f4      	lsls	r4, r6, #15
   14692:	f240 30e7 	movw	r0, #999	; 0x3e7
   14696:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1469a:	2300      	movs	r3, #0
   1469c:	1820      	adds	r0, r4, r0
   1469e:	f04f 0100 	mov.w	r1, #0
   146a2:	eb45 0101 	adc.w	r1, r5, r1
   146a6:	f7f7 fdc9 	bl	c23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   146aa:	4b08      	ldr	r3, [pc, #32]	; (146cc <k_sched_time_slice_set+0x60>)
   146ac:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   146ae:	4b08      	ldr	r3, [pc, #32]	; (146d0 <k_sched_time_slice_set+0x64>)
   146b0:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   146b4:	f7ff ffc4 	bl	14640 <z_reset_time_slice>
	__asm__ volatile(
   146b8:	f387 8811 	msr	BASEPRI, r7
   146bc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   146c0:	2301      	movs	r3, #1
   146c2:	e7e0      	b.n	14686 <k_sched_time_slice_set+0x1a>
}
   146c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146c8:	20010924 	.word	0x20010924
   146cc:	2001095c 	.word	0x2001095c
   146d0:	20010958 	.word	0x20010958

000146d4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   146d4:	4608      	mov	r0, r1
   146d6:	b981      	cbnz	r1, 146fa <z_reschedule+0x26>
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   146d8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   146da:	f3ef 8305 	mrs	r3, IPSR
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   146de:	b93b      	cbnz	r3, 146f0 <z_reschedule+0x1c>
	return _kernel.ready_q.cache;
   146e0:	4b08      	ldr	r3, [pc, #32]	; (14704 <z_reschedule+0x30>)
   146e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	return new_thread != _current;
   146e4:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   146e6:	429a      	cmp	r2, r3
   146e8:	d002      	beq.n	146f0 <z_reschedule+0x1c>
	ret = arch_swap(key);
   146ea:	f7fa f9cd 	bl	ea88 <arch_swap>
		z_swap(lock, key);
   146ee:	e003      	b.n	146f8 <z_reschedule+0x24>
   146f0:	f380 8811 	msr	BASEPRI, r0
   146f4:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   146f8:	bd08      	pop	{r3, pc}
   146fa:	f381 8811 	msr	BASEPRI, r1
   146fe:	f3bf 8f6f 	isb	sy
   14702:	4770      	bx	lr
   14704:	20010924 	.word	0x20010924

00014708 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   14708:	2300      	movs	r3, #0
	__asm__ volatile(
   1470a:	f04f 0220 	mov.w	r2, #32
   1470e:	f3ef 8111 	mrs	r1, BASEPRI
   14712:	f382 8811 	msr	BASEPRI, r2
   14716:	f3bf 8f6f 	isb	sy
   1471a:	b953      	cbnz	r3, 14732 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   1471c:	4b05      	ldr	r3, [pc, #20]	; (14734 <k_sched_lock+0x2c>)
   1471e:	689a      	ldr	r2, [r3, #8]
   14720:	7bd3      	ldrb	r3, [r2, #15]
   14722:	3b01      	subs	r3, #1
   14724:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   14726:	f381 8811 	msr	BASEPRI, r1
   1472a:	f3bf 8f6f 	isb	sy
   1472e:	2301      	movs	r3, #1
   14730:	e7f3      	b.n	1471a <k_sched_lock+0x12>
		z_sched_lock();
	}
}
   14732:	4770      	bx	lr
   14734:	20010924 	.word	0x20010924

00014738 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   14738:	4b0a      	ldr	r3, [pc, #40]	; (14764 <z_priq_dumb_remove+0x2c>)
   1473a:	4283      	cmp	r3, r0
   1473c:	d008      	beq.n	14750 <z_priq_dumb_remove+0x18>
	node->prev->next = node->next;
   1473e:	684a      	ldr	r2, [r1, #4]
   14740:	680b      	ldr	r3, [r1, #0]
   14742:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   14744:	684a      	ldr	r2, [r1, #4]
   14746:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   14748:	2300      	movs	r3, #0
   1474a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   1474c:	604b      	str	r3, [r1, #4]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1474e:	4770      	bx	lr
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   14750:	3b28      	subs	r3, #40	; 0x28
   14752:	689b      	ldr	r3, [r3, #8]
   14754:	428b      	cmp	r3, r1
   14756:	d1f2      	bne.n	1473e <z_priq_dumb_remove+0x6>
	uint8_t state = thread->base.thread_state;
   14758:	7b4b      	ldrb	r3, [r1, #13]
   1475a:	f013 0f1f 	tst.w	r3, #31
   1475e:	d0ee      	beq.n	1473e <z_priq_dumb_remove+0x6>
   14760:	e7f5      	b.n	1474e <z_priq_dumb_remove+0x16>
   14762:	bf00      	nop
   14764:	2001094c 	.word	0x2001094c

00014768 <update_cache>:
{
   14768:	b570      	push	{r4, r5, r6, lr}
   1476a:	4605      	mov	r5, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1476c:	4e12      	ldr	r6, [pc, #72]	; (147b8 <update_cache+0x50>)
   1476e:	f106 0028 	add.w	r0, r6, #40	; 0x28
   14772:	f004 fba8 	bl	18ec6 <z_priq_dumb_best>
   14776:	4604      	mov	r4, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   14778:	68b3      	ldr	r3, [r6, #8]
   1477a:	7b5a      	ldrb	r2, [r3, #13]
   1477c:	f012 0f20 	tst.w	r2, #32
   14780:	d002      	beq.n	14788 <update_cache+0x20>
		_current->base.thread_state |= _THREAD_DEAD;
   14782:	f042 0208 	orr.w	r2, r2, #8
   14786:	735a      	strb	r2, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   14788:	b164      	cbz	r4, 147a4 <update_cache+0x3c>
	if (preempt_ok != 0) {
   1478a:	b975      	cbnz	r5, 147aa <update_cache+0x42>
   1478c:	7b5a      	ldrb	r2, [r3, #13]
	if (z_is_thread_prevented_from_running(_current)) {
   1478e:	f012 0f1f 	tst.w	r2, #31
   14792:	d10a      	bne.n	147aa <update_cache+0x42>
	return node->next != NULL;
   14794:	69a2      	ldr	r2, [r4, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   14796:	b942      	cbnz	r2, 147aa <update_cache+0x42>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   14798:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1479a:	2a7f      	cmp	r2, #127	; 0x7f
   1479c:	d905      	bls.n	147aa <update_cache+0x42>
		_kernel.ready_q.cache = _current;
   1479e:	4a06      	ldr	r2, [pc, #24]	; (147b8 <update_cache+0x50>)
   147a0:	6253      	str	r3, [r2, #36]	; 0x24
   147a2:	e008      	b.n	147b6 <update_cache+0x4e>
	return thread ? thread : _current_cpu->idle_thread;
   147a4:	4a04      	ldr	r2, [pc, #16]	; (147b8 <update_cache+0x50>)
   147a6:	68d4      	ldr	r4, [r2, #12]
   147a8:	e7ef      	b.n	1478a <update_cache+0x22>
		if (thread != _current) {
   147aa:	42a3      	cmp	r3, r4
   147ac:	d001      	beq.n	147b2 <update_cache+0x4a>
			z_reset_time_slice();
   147ae:	f7ff ff47 	bl	14640 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   147b2:	4b01      	ldr	r3, [pc, #4]	; (147b8 <update_cache+0x50>)
   147b4:	625c      	str	r4, [r3, #36]	; 0x24
}
   147b6:	bd70      	pop	{r4, r5, r6, pc}
   147b8:	20010924 	.word	0x20010924

000147bc <k_sched_unlock>:
{
   147bc:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   147be:	2300      	movs	r3, #0
	__asm__ volatile(
   147c0:	f04f 0220 	mov.w	r2, #32
   147c4:	f3ef 8411 	mrs	r4, BASEPRI
   147c8:	f382 8811 	msr	BASEPRI, r2
   147cc:	f3bf 8f6f 	isb	sy
   147d0:	b96b      	cbnz	r3, 147ee <k_sched_unlock+0x32>
		++_current->base.sched_locked;
   147d2:	4b0c      	ldr	r3, [pc, #48]	; (14804 <k_sched_unlock+0x48>)
   147d4:	689a      	ldr	r2, [r3, #8]
   147d6:	7bd3      	ldrb	r3, [r2, #15]
   147d8:	3301      	adds	r3, #1
   147da:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   147dc:	2000      	movs	r0, #0
   147de:	f7ff ffc3 	bl	14768 <update_cache>
	__asm__ volatile(
   147e2:	f384 8811 	msr	BASEPRI, r4
   147e6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   147ea:	2301      	movs	r3, #1
   147ec:	e7f0      	b.n	147d0 <k_sched_unlock+0x14>
	__asm__ volatile(
   147ee:	f04f 0320 	mov.w	r3, #32
   147f2:	f3ef 8011 	mrs	r0, BASEPRI
   147f6:	f383 8811 	msr	BASEPRI, r3
   147fa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   147fe:	f004 fb31 	bl	18e64 <z_reschedule_irqlock>
}
   14802:	bd10      	pop	{r4, pc}
   14804:	20010924 	.word	0x20010924

00014808 <ready_thread>:
{
   14808:	b538      	push	{r3, r4, r5, lr}
   1480a:	4605      	mov	r5, r0
	uint8_t state = thread->base.thread_state;
   1480c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1480e:	f013 0f1f 	tst.w	r3, #31
   14812:	d105      	bne.n	14820 <ready_thread+0x18>
   14814:	6983      	ldr	r3, [r0, #24]
   14816:	b10b      	cbz	r3, 1481c <ready_thread+0x14>
   14818:	2300      	movs	r3, #0
   1481a:	e002      	b.n	14822 <ready_thread+0x1a>
   1481c:	2301      	movs	r3, #1
   1481e:	e000      	b.n	14822 <ready_thread+0x1a>
   14820:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
   14822:	b30b      	cbz	r3, 14868 <ready_thread+0x60>
	return list->head == list;
   14824:	4b15      	ldr	r3, [pc, #84]	; (1487c <ready_thread+0x74>)
   14826:	f853 4f28 	ldr.w	r4, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1482a:	429c      	cmp	r4, r3
   1482c:	d024      	beq.n	14878 <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1482e:	b164      	cbz	r4, 1484a <ready_thread+0x42>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
   14830:	4621      	mov	r1, r4
   14832:	4628      	mov	r0, r5
   14834:	f004 fad6 	bl	18de4 <z_is_t1_higher_prio_than_t2>
   14838:	b9b8      	cbnz	r0, 1486a <ready_thread+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1483a:	b134      	cbz	r4, 1484a <ready_thread+0x42>
	return (node == list->tail) ? NULL : node->next;
   1483c:	4b0f      	ldr	r3, [pc, #60]	; (1487c <ready_thread+0x74>)
   1483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14840:	429c      	cmp	r4, r3
   14842:	d002      	beq.n	1484a <ready_thread+0x42>
   14844:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14846:	2c00      	cmp	r4, #0
   14848:	d1f1      	bne.n	1482e <ready_thread+0x26>
	node->next = list;
   1484a:	4b0c      	ldr	r3, [pc, #48]	; (1487c <ready_thread+0x74>)
   1484c:	f103 0228 	add.w	r2, r3, #40	; 0x28
   14850:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
   14852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   14854:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   14856:	6015      	str	r5, [r2, #0]
	list->tail = node;
   14858:	62dd      	str	r5, [r3, #44]	; 0x2c
	thread->base.thread_state |= states;
   1485a:	7b6b      	ldrb	r3, [r5, #13]
   1485c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14860:	736b      	strb	r3, [r5, #13]
		update_cache(0);
   14862:	2000      	movs	r0, #0
   14864:	f7ff ff80 	bl	14768 <update_cache>
}
   14868:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = successor->prev;
   1486a:	6863      	ldr	r3, [r4, #4]
   1486c:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1486e:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
   14870:	6863      	ldr	r3, [r4, #4]
   14872:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   14874:	6065      	str	r5, [r4, #4]
}
   14876:	e7f0      	b.n	1485a <ready_thread+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14878:	2400      	movs	r4, #0
   1487a:	e7d8      	b.n	1482e <ready_thread+0x26>
   1487c:	20010924 	.word	0x20010924

00014880 <z_sched_start>:
{
   14880:	b510      	push	{r4, lr}
   14882:	f04f 0320 	mov.w	r3, #32
   14886:	f3ef 8411 	mrs	r4, BASEPRI
   1488a:	f383 8811 	msr	BASEPRI, r3
   1488e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   14892:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   14894:	f013 0f04 	tst.w	r3, #4
   14898:	d104      	bne.n	148a4 <z_sched_start+0x24>
	__asm__ volatile(
   1489a:	f384 8811 	msr	BASEPRI, r4
   1489e:	f3bf 8f6f 	isb	sy
}
   148a2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   148a4:	f023 0304 	bic.w	r3, r3, #4
   148a8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   148aa:	f7ff ffad 	bl	14808 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   148ae:	4621      	mov	r1, r4
   148b0:	4801      	ldr	r0, [pc, #4]	; (148b8 <z_sched_start+0x38>)
   148b2:	f7ff ff0f 	bl	146d4 <z_reschedule>
   148b6:	e7f4      	b.n	148a2 <z_sched_start+0x22>
   148b8:	20010958 	.word	0x20010958

000148bc <move_thread_to_end_of_prio_q>:
{
   148bc:	b538      	push	{r3, r4, r5, lr}
   148be:	4605      	mov	r5, r0
	if (z_is_thread_queued(thread)) {
   148c0:	f990 300d 	ldrsb.w	r3, [r0, #13]
   148c4:	2b00      	cmp	r3, #0
   148c6:	db27      	blt.n	14918 <move_thread_to_end_of_prio_q+0x5c>
	return list->head == list;
   148c8:	4b1a      	ldr	r3, [pc, #104]	; (14934 <move_thread_to_end_of_prio_q+0x78>)
   148ca:	f853 4f28 	ldr.w	r4, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   148ce:	429c      	cmp	r4, r3
   148d0:	d02e      	beq.n	14930 <move_thread_to_end_of_prio_q+0x74>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   148d2:	b164      	cbz	r4, 148ee <move_thread_to_end_of_prio_q+0x32>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
   148d4:	4621      	mov	r1, r4
   148d6:	4628      	mov	r0, r5
   148d8:	f004 fa84 	bl	18de4 <z_is_t1_higher_prio_than_t2>
   148dc:	bb08      	cbnz	r0, 14922 <move_thread_to_end_of_prio_q+0x66>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   148de:	b134      	cbz	r4, 148ee <move_thread_to_end_of_prio_q+0x32>
	return (node == list->tail) ? NULL : node->next;
   148e0:	4b14      	ldr	r3, [pc, #80]	; (14934 <move_thread_to_end_of_prio_q+0x78>)
   148e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   148e4:	429c      	cmp	r4, r3
   148e6:	d002      	beq.n	148ee <move_thread_to_end_of_prio_q+0x32>
   148e8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   148ea:	2c00      	cmp	r4, #0
   148ec:	d1f1      	bne.n	148d2 <move_thread_to_end_of_prio_q+0x16>
	node->next = list;
   148ee:	4b11      	ldr	r3, [pc, #68]	; (14934 <move_thread_to_end_of_prio_q+0x78>)
   148f0:	f103 0228 	add.w	r2, r3, #40	; 0x28
   148f4:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
   148f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   148f8:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   148fa:	6015      	str	r5, [r2, #0]
	list->tail = node;
   148fc:	62dd      	str	r5, [r3, #44]	; 0x2c
	thread->base.thread_state |= states;
   148fe:	7b6b      	ldrb	r3, [r5, #13]
   14900:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14904:	736b      	strb	r3, [r5, #13]
	update_cache(thread == _current);
   14906:	4b0b      	ldr	r3, [pc, #44]	; (14934 <move_thread_to_end_of_prio_q+0x78>)
   14908:	6898      	ldr	r0, [r3, #8]
   1490a:	42a8      	cmp	r0, r5
   1490c:	bf14      	ite	ne
   1490e:	2000      	movne	r0, #0
   14910:	2001      	moveq	r0, #1
   14912:	f7ff ff29 	bl	14768 <update_cache>
}
   14916:	bd38      	pop	{r3, r4, r5, pc}
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   14918:	4601      	mov	r1, r0
   1491a:	4807      	ldr	r0, [pc, #28]	; (14938 <move_thread_to_end_of_prio_q+0x7c>)
   1491c:	f7ff ff0c 	bl	14738 <z_priq_dumb_remove>
   14920:	e7d2      	b.n	148c8 <move_thread_to_end_of_prio_q+0xc>
	node->prev = successor->prev;
   14922:	6863      	ldr	r3, [r4, #4]
   14924:	606b      	str	r3, [r5, #4]
	node->next = successor;
   14926:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
   14928:	6863      	ldr	r3, [r4, #4]
   1492a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1492c:	6065      	str	r5, [r4, #4]
}
   1492e:	e7e6      	b.n	148fe <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14930:	2400      	movs	r4, #0
   14932:	e7ce      	b.n	148d2 <move_thread_to_end_of_prio_q+0x16>
   14934:	20010924 	.word	0x20010924
   14938:	2001094c 	.word	0x2001094c

0001493c <z_time_slice>:
{
   1493c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1493e:	f04f 0320 	mov.w	r3, #32
   14942:	f3ef 8411 	mrs	r4, BASEPRI
   14946:	f383 8811 	msr	BASEPRI, r3
   1494a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1494e:	4b1c      	ldr	r3, [pc, #112]	; (149c0 <z_time_slice+0x84>)
   14950:	689b      	ldr	r3, [r3, #8]
   14952:	4a1c      	ldr	r2, [pc, #112]	; (149c4 <z_time_slice+0x88>)
   14954:	6812      	ldr	r2, [r2, #0]
   14956:	4293      	cmp	r3, r2
   14958:	d01d      	beq.n	14996 <z_time_slice+0x5a>
	pending_current = NULL;
   1495a:	4a1a      	ldr	r2, [pc, #104]	; (149c4 <z_time_slice+0x88>)
   1495c:	2100      	movs	r1, #0
   1495e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   14960:	4a19      	ldr	r2, [pc, #100]	; (149c8 <z_time_slice+0x8c>)
   14962:	6812      	ldr	r2, [r2, #0]
   14964:	b322      	cbz	r2, 149b0 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   14966:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   14968:	2a7f      	cmp	r2, #127	; 0x7f
   1496a:	d821      	bhi.n	149b0 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   1496c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1496e:	f012 0f1f 	tst.w	r2, #31
   14972:	d11d      	bne.n	149b0 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   14974:	f993 100e 	ldrsb.w	r1, [r3, #14]
   14978:	4a14      	ldr	r2, [pc, #80]	; (149cc <z_time_slice+0x90>)
   1497a:	6812      	ldr	r2, [r2, #0]
   1497c:	4291      	cmp	r1, r2
   1497e:	db17      	blt.n	149b0 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   14980:	4a13      	ldr	r2, [pc, #76]	; (149d0 <z_time_slice+0x94>)
   14982:	4293      	cmp	r3, r2
   14984:	d014      	beq.n	149b0 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   14986:	4a0e      	ldr	r2, [pc, #56]	; (149c0 <z_time_slice+0x84>)
   14988:	6912      	ldr	r2, [r2, #16]
   1498a:	4282      	cmp	r2, r0
   1498c:	dd0a      	ble.n	149a4 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   1498e:	1a10      	subs	r0, r2, r0
   14990:	4b0b      	ldr	r3, [pc, #44]	; (149c0 <z_time_slice+0x84>)
   14992:	6118      	str	r0, [r3, #16]
   14994:	e00f      	b.n	149b6 <z_time_slice+0x7a>
		z_reset_time_slice();
   14996:	f7ff fe53 	bl	14640 <z_reset_time_slice>
	__asm__ volatile(
   1499a:	f384 8811 	msr	BASEPRI, r4
   1499e:	f3bf 8f6f 	isb	sy
		return;
   149a2:	e00c      	b.n	149be <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   149a4:	4618      	mov	r0, r3
   149a6:	f7ff ff89 	bl	148bc <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   149aa:	f7ff fe49 	bl	14640 <z_reset_time_slice>
   149ae:	e002      	b.n	149b6 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   149b0:	4b03      	ldr	r3, [pc, #12]	; (149c0 <z_time_slice+0x84>)
   149b2:	2200      	movs	r2, #0
   149b4:	611a      	str	r2, [r3, #16]
   149b6:	f384 8811 	msr	BASEPRI, r4
   149ba:	f3bf 8f6f 	isb	sy
}
   149be:	bd10      	pop	{r4, pc}
   149c0:	20010924 	.word	0x20010924
   149c4:	20010954 	.word	0x20010954
   149c8:	2001095c 	.word	0x2001095c
   149cc:	20010958 	.word	0x20010958
   149d0:	200102e0 	.word	0x200102e0

000149d4 <z_impl_k_thread_suspend>:
{
   149d4:	b538      	push	{r3, r4, r5, lr}
   149d6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   149d8:	3018      	adds	r0, #24
   149da:	f004 fbc4 	bl	19166 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   149de:	2300      	movs	r3, #0
	__asm__ volatile(
   149e0:	f04f 0220 	mov.w	r2, #32
   149e4:	f3ef 8511 	mrs	r5, BASEPRI
   149e8:	f382 8811 	msr	BASEPRI, r2
   149ec:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   149f0:	e010      	b.n	14a14 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   149f2:	7b63      	ldrb	r3, [r4, #13]
   149f4:	f043 0310 	orr.w	r3, r3, #16
   149f8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   149fa:	4b15      	ldr	r3, [pc, #84]	; (14a50 <z_impl_k_thread_suspend+0x7c>)
   149fc:	6898      	ldr	r0, [r3, #8]
   149fe:	42a0      	cmp	r0, r4
   14a00:	bf14      	ite	ne
   14a02:	2000      	movne	r0, #0
   14a04:	2001      	moveq	r0, #1
   14a06:	f7ff feaf 	bl	14768 <update_cache>
	__asm__ volatile(
   14a0a:	f385 8811 	msr	BASEPRI, r5
   14a0e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   14a12:	2301      	movs	r3, #1
   14a14:	b963      	cbnz	r3, 14a30 <z_impl_k_thread_suspend+0x5c>
		if (z_is_thread_queued(thread)) {
   14a16:	f994 300d 	ldrsb.w	r3, [r4, #13]
   14a1a:	2b00      	cmp	r3, #0
   14a1c:	dae9      	bge.n	149f2 <z_impl_k_thread_suspend+0x1e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   14a1e:	4621      	mov	r1, r4
   14a20:	480c      	ldr	r0, [pc, #48]	; (14a54 <z_impl_k_thread_suspend+0x80>)
   14a22:	f7ff fe89 	bl	14738 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   14a26:	7b63      	ldrb	r3, [r4, #13]
   14a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14a2c:	7363      	strb	r3, [r4, #13]
}
   14a2e:	e7e0      	b.n	149f2 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   14a30:	4b07      	ldr	r3, [pc, #28]	; (14a50 <z_impl_k_thread_suspend+0x7c>)
   14a32:	689b      	ldr	r3, [r3, #8]
   14a34:	42a3      	cmp	r3, r4
   14a36:	d000      	beq.n	14a3a <z_impl_k_thread_suspend+0x66>
}
   14a38:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   14a3a:	f04f 0320 	mov.w	r3, #32
   14a3e:	f3ef 8011 	mrs	r0, BASEPRI
   14a42:	f383 8811 	msr	BASEPRI, r3
   14a46:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   14a4a:	f004 fa0b 	bl	18e64 <z_reschedule_irqlock>
   14a4e:	e7f3      	b.n	14a38 <z_impl_k_thread_suspend+0x64>
   14a50:	20010924 	.word	0x20010924
   14a54:	2001094c 	.word	0x2001094c

00014a58 <z_thread_single_abort>:
{
   14a58:	b570      	push	{r4, r5, r6, lr}
   14a5a:	4605      	mov	r5, r0
	if (thread->fn_abort != NULL) {
   14a5c:	6e03      	ldr	r3, [r0, #96]	; 0x60
   14a5e:	b103      	cbz	r3, 14a62 <z_thread_single_abort+0xa>
		thread->fn_abort();
   14a60:	4798      	blx	r3
   14a62:	f105 0018 	add.w	r0, r5, #24
   14a66:	f004 fb7e 	bl	19166 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   14a6a:	2300      	movs	r3, #0
   14a6c:	f04f 0220 	mov.w	r2, #32
   14a70:	f3ef 8611 	mrs	r6, BASEPRI
   14a74:	f382 8811 	msr	BASEPRI, r2
   14a78:	f3bf 8f6f 	isb	sy
   14a7c:	e01f      	b.n	14abe <z_thread_single_abort+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   14a7e:	2201      	movs	r2, #1
   14a80:	e027      	b.n	14ad2 <z_thread_single_abort+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq,
   14a82:	4629      	mov	r1, r5
   14a84:	482a      	ldr	r0, [pc, #168]	; (14b30 <z_thread_single_abort+0xd8>)
   14a86:	f7ff fe57 	bl	14738 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   14a8a:	7b6b      	ldrb	r3, [r5, #13]
   14a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14a90:	736b      	strb	r3, [r5, #13]
}
   14a92:	e024      	b.n	14ade <z_thread_single_abort+0x86>
			if (z_is_thread_pending(thread)) {
   14a94:	f013 0f02 	tst.w	r3, #2
   14a98:	d029      	beq.n	14aee <z_thread_single_abort+0x96>
				_priq_wait_remove(&pended_on(thread)->waitq,
   14a9a:	4628      	mov	r0, r5
   14a9c:	f004 f9a0 	bl	18de0 <pended_on>
   14aa0:	4629      	mov	r1, r5
   14aa2:	f7ff fe49 	bl	14738 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14aa6:	7b6b      	ldrb	r3, [r5, #13]
   14aa8:	f023 0302 	bic.w	r3, r3, #2
   14aac:	736b      	strb	r3, [r5, #13]
				thread->base.pended_on = NULL;
   14aae:	2300      	movs	r3, #0
   14ab0:	60ab      	str	r3, [r5, #8]
   14ab2:	e01c      	b.n	14aee <z_thread_single_abort+0x96>
	__asm__ volatile(
   14ab4:	f386 8811 	msr	BASEPRI, r6
   14ab8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   14abc:	2301      	movs	r3, #1
   14abe:	461a      	mov	r2, r3
   14ac0:	2b00      	cmp	r3, #0
   14ac2:	d134      	bne.n	14b2e <z_thread_single_abort+0xd6>
	uint8_t state = thread->base.thread_state;
   14ac4:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   14ac6:	f013 0f1f 	tst.w	r3, #31
   14aca:	d102      	bne.n	14ad2 <z_thread_single_abort+0x7a>
	return node->next != NULL;
   14acc:	69a9      	ldr	r1, [r5, #24]
   14ace:	2900      	cmp	r1, #0
   14ad0:	d0d5      	beq.n	14a7e <z_thread_single_abort+0x26>
		if (z_is_thread_ready(thread)) {
   14ad2:	f012 0f01 	tst.w	r2, #1
   14ad6:	d0dd      	beq.n	14a94 <z_thread_single_abort+0x3c>
			if (z_is_thread_queued(thread)) {
   14ad8:	f013 0f80 	tst.w	r3, #128	; 0x80
   14adc:	d1d1      	bne.n	14a82 <z_thread_single_abort+0x2a>
			update_cache(thread == _current);
   14ade:	4b15      	ldr	r3, [pc, #84]	; (14b34 <z_thread_single_abort+0xdc>)
   14ae0:	6898      	ldr	r0, [r3, #8]
   14ae2:	42a8      	cmp	r0, r5
   14ae4:	bf14      	ite	ne
   14ae6:	2000      	movne	r0, #0
   14ae8:	2001      	moveq	r0, #1
   14aea:	f7ff fe3d 	bl	14768 <update_cache>
		thread->base.thread_state |= mask;
   14aee:	7b6b      	ldrb	r3, [r5, #13]
   14af0:	f043 0308 	orr.w	r3, r3, #8
   14af4:	736b      	strb	r3, [r5, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   14af6:	f105 0330 	add.w	r3, r5, #48	; 0x30
	return list->head == list;
   14afa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14afc:	42a3      	cmp	r3, r4
   14afe:	d0d9      	beq.n	14ab4 <z_thread_single_abort+0x5c>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   14b00:	2c00      	cmp	r4, #0
   14b02:	d0d7      	beq.n	14ab4 <z_thread_single_abort+0x5c>
   14b04:	f104 0018 	add.w	r0, r4, #24
   14b08:	f004 fb2d 	bl	19166 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   14b0c:	4620      	mov	r0, r4
   14b0e:	f004 f967 	bl	18de0 <pended_on>
   14b12:	4621      	mov	r1, r4
   14b14:	f7ff fe10 	bl	14738 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14b18:	7b63      	ldrb	r3, [r4, #13]
   14b1a:	f023 0302 	bic.w	r3, r3, #2
   14b1e:	7363      	strb	r3, [r4, #13]
			waiter->base.pended_on = NULL;
   14b20:	2300      	movs	r3, #0
   14b22:	60a3      	str	r3, [r4, #8]
   14b24:	67e3      	str	r3, [r4, #124]	; 0x7c
			ready_thread(waiter);
   14b26:	4620      	mov	r0, r4
   14b28:	f7ff fe6e 	bl	14808 <ready_thread>
   14b2c:	e7e3      	b.n	14af6 <z_thread_single_abort+0x9e>
}
   14b2e:	bd70      	pop	{r4, r5, r6, pc}
   14b30:	2001094c 	.word	0x2001094c
   14b34:	20010924 	.word	0x20010924

00014b38 <unready_thread>:
{
   14b38:	b510      	push	{r4, lr}
   14b3a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   14b3c:	f990 300d 	ldrsb.w	r3, [r0, #13]
   14b40:	2b00      	cmp	r3, #0
   14b42:	db08      	blt.n	14b56 <unready_thread+0x1e>
	update_cache(thread == _current);
   14b44:	4b08      	ldr	r3, [pc, #32]	; (14b68 <unready_thread+0x30>)
   14b46:	6898      	ldr	r0, [r3, #8]
   14b48:	42a0      	cmp	r0, r4
   14b4a:	bf14      	ite	ne
   14b4c:	2000      	movne	r0, #0
   14b4e:	2001      	moveq	r0, #1
   14b50:	f7ff fe0a 	bl	14768 <update_cache>
}
   14b54:	bd10      	pop	{r4, pc}
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   14b56:	4601      	mov	r1, r0
   14b58:	4804      	ldr	r0, [pc, #16]	; (14b6c <unready_thread+0x34>)
   14b5a:	f7ff fded 	bl	14738 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   14b5e:	7b63      	ldrb	r3, [r4, #13]
   14b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14b64:	7363      	strb	r3, [r4, #13]
}
   14b66:	e7ed      	b.n	14b44 <unready_thread+0xc>
   14b68:	20010924 	.word	0x20010924
   14b6c:	2001094c 	.word	0x2001094c

00014b70 <z_pend_curr>:
{
   14b70:	b510      	push	{r4, lr}
   14b72:	460c      	mov	r4, r1
   14b74:	4611      	mov	r1, r2
	pending_current = _current;
   14b76:	4b06      	ldr	r3, [pc, #24]	; (14b90 <z_pend_curr+0x20>)
   14b78:	6898      	ldr	r0, [r3, #8]
   14b7a:	4b06      	ldr	r3, [pc, #24]	; (14b94 <z_pend_curr+0x24>)
   14b7c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   14b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14b82:	f004 fa16 	bl	18fb2 <pend>
   14b86:	4620      	mov	r0, r4
   14b88:	f7f9 ff7e 	bl	ea88 <arch_swap>
}
   14b8c:	bd10      	pop	{r4, pc}
   14b8e:	bf00      	nop
   14b90:	20010924 	.word	0x20010924
   14b94:	20010954 	.word	0x20010954

00014b98 <z_set_prio>:
{
   14b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14b9c:	4604      	mov	r4, r0
   14b9e:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   14ba0:	2300      	movs	r3, #0
	__asm__ volatile(
   14ba2:	f04f 0220 	mov.w	r2, #32
   14ba6:	f3ef 8611 	mrs	r6, BASEPRI
   14baa:	f382 8811 	msr	BASEPRI, r2
   14bae:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   14bb2:	4698      	mov	r8, r3
   14bb4:	e008      	b.n	14bc8 <z_set_prio+0x30>
		if (need_sched) {
   14bb6:	f012 0801 	ands.w	r8, r2, #1
   14bba:	d111      	bne.n	14be0 <z_set_prio+0x48>
			thread->base.prio = prio;
   14bbc:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   14bbe:	f386 8811 	msr	BASEPRI, r6
   14bc2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   14bc6:	2301      	movs	r3, #1
   14bc8:	461a      	mov	r2, r3
   14bca:	2b00      	cmp	r3, #0
   14bcc:	d136      	bne.n	14c3c <z_set_prio+0xa4>
	uint8_t state = thread->base.thread_state;
   14bce:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   14bd0:	f013 0f1f 	tst.w	r3, #31
   14bd4:	d1ef      	bne.n	14bb6 <z_set_prio+0x1e>
	return node->next != NULL;
   14bd6:	69a3      	ldr	r3, [r4, #24]
   14bd8:	2b00      	cmp	r3, #0
   14bda:	d1ec      	bne.n	14bb6 <z_set_prio+0x1e>
   14bdc:	2201      	movs	r2, #1
   14bde:	e7ea      	b.n	14bb6 <z_set_prio+0x1e>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   14be0:	4d18      	ldr	r5, [pc, #96]	; (14c44 <z_set_prio+0xac>)
   14be2:	f105 0928 	add.w	r9, r5, #40	; 0x28
   14be6:	4621      	mov	r1, r4
   14be8:	4648      	mov	r0, r9
   14bea:	f7ff fda5 	bl	14738 <z_priq_dumb_remove>
				thread->base.prio = prio;
   14bee:	73a7      	strb	r7, [r4, #14]
	return list->head == list;
   14bf0:	6aad      	ldr	r5, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14bf2:	454d      	cmp	r5, r9
   14bf4:	d020      	beq.n	14c38 <z_set_prio+0xa0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14bf6:	b165      	cbz	r5, 14c12 <z_set_prio+0x7a>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
   14bf8:	4629      	mov	r1, r5
   14bfa:	4620      	mov	r0, r4
   14bfc:	f004 f8f2 	bl	18de4 <z_is_t1_higher_prio_than_t2>
   14c00:	b998      	cbnz	r0, 14c2a <z_set_prio+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14c02:	b135      	cbz	r5, 14c12 <z_set_prio+0x7a>
	return (node == list->tail) ? NULL : node->next;
   14c04:	4b0f      	ldr	r3, [pc, #60]	; (14c44 <z_set_prio+0xac>)
   14c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14c08:	429d      	cmp	r5, r3
   14c0a:	d002      	beq.n	14c12 <z_set_prio+0x7a>
   14c0c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14c0e:	2d00      	cmp	r5, #0
   14c10:	d1f1      	bne.n	14bf6 <z_set_prio+0x5e>
	node->next = list;
   14c12:	4b0c      	ldr	r3, [pc, #48]	; (14c44 <z_set_prio+0xac>)
   14c14:	f103 0228 	add.w	r2, r3, #40	; 0x28
   14c18:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   14c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   14c1c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   14c1e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   14c20:	62dc      	str	r4, [r3, #44]	; 0x2c
			update_cache(1);
   14c22:	2001      	movs	r0, #1
   14c24:	f7ff fda0 	bl	14768 <update_cache>
   14c28:	e7c9      	b.n	14bbe <z_set_prio+0x26>
	node->prev = successor->prev;
   14c2a:	686b      	ldr	r3, [r5, #4]
   14c2c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   14c2e:	6025      	str	r5, [r4, #0]
	successor->prev->next = node;
   14c30:	686b      	ldr	r3, [r5, #4]
   14c32:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   14c34:	606c      	str	r4, [r5, #4]
}
   14c36:	e7f4      	b.n	14c22 <z_set_prio+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14c38:	2500      	movs	r5, #0
   14c3a:	e7dc      	b.n	14bf6 <z_set_prio+0x5e>
}
   14c3c:	4640      	mov	r0, r8
   14c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14c42:	bf00      	nop
   14c44:	20010924 	.word	0x20010924

00014c48 <z_sched_init>:

	return need_sched;
}

void z_sched_init(void)
{
   14c48:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   14c4a:	4b05      	ldr	r3, [pc, #20]	; (14c60 <z_sched_init+0x18>)
   14c4c:	f103 0228 	add.w	r2, r3, #40	; 0x28
   14c50:	629a      	str	r2, [r3, #40]	; 0x28
	list->tail = (sys_dnode_t *)list;
   14c52:	62da      	str	r2, [r3, #44]	; 0x2c
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   14c54:	2100      	movs	r1, #0
   14c56:	4608      	mov	r0, r1
   14c58:	f7ff fd08 	bl	1466c <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
   14c5c:	bd08      	pop	{r3, pc}
   14c5e:	bf00      	nop
   14c60:	20010924 	.word	0x20010924

00014c64 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   14c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
   14c66:	4b2b      	ldr	r3, [pc, #172]	; (14d14 <z_impl_k_yield+0xb0>)
   14c68:	689a      	ldr	r2, [r3, #8]
   14c6a:	4b2b      	ldr	r3, [pc, #172]	; (14d18 <z_impl_k_yield+0xb4>)
   14c6c:	429a      	cmp	r2, r3
   14c6e:	d046      	beq.n	14cfe <z_impl_k_yield+0x9a>
		LOCKED(&sched_spinlock) {
   14c70:	2300      	movs	r3, #0
	__asm__ volatile(
   14c72:	f04f 0220 	mov.w	r2, #32
   14c76:	f3ef 8611 	mrs	r6, BASEPRI
   14c7a:	f382 8811 	msr	BASEPRI, r2
   14c7e:	f3bf 8f6f 	isb	sy
   14c82:	e01e      	b.n	14cc2 <z_impl_k_yield+0x5e>
	node->prev = successor->prev;
   14c84:	6863      	ldr	r3, [r4, #4]
   14c86:	606b      	str	r3, [r5, #4]
	node->next = successor;
   14c88:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
   14c8a:	6863      	ldr	r3, [r4, #4]
   14c8c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   14c8e:	6065      	str	r5, [r4, #4]
}
   14c90:	e009      	b.n	14ca6 <z_impl_k_yield+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14c92:	2400      	movs	r4, #0
   14c94:	e021      	b.n	14cda <z_impl_k_yield+0x76>
	node->next = list;
   14c96:	4b1f      	ldr	r3, [pc, #124]	; (14d14 <z_impl_k_yield+0xb0>)
   14c98:	f103 0228 	add.w	r2, r3, #40	; 0x28
   14c9c:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
   14c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   14ca0:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   14ca2:	6015      	str	r5, [r2, #0]
	list->tail = node;
   14ca4:	62dd      	str	r5, [r3, #44]	; 0x2c
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
			z_mark_thread_as_queued(_current);
   14ca6:	4b1b      	ldr	r3, [pc, #108]	; (14d14 <z_impl_k_yield+0xb0>)
   14ca8:	689a      	ldr	r2, [r3, #8]
	thread->base.thread_state |= states;
   14caa:	7b53      	ldrb	r3, [r2, #13]
   14cac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14cb0:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   14cb2:	2001      	movs	r0, #1
   14cb4:	f7ff fd58 	bl	14768 <update_cache>
	__asm__ volatile(
   14cb8:	f386 8811 	msr	BASEPRI, r6
   14cbc:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
   14cc0:	2301      	movs	r3, #1
   14cc2:	b9e3      	cbnz	r3, 14cfe <z_impl_k_yield+0x9a>
				_priq_run_remove(&_kernel.ready_q.runq,
   14cc4:	4c13      	ldr	r4, [pc, #76]	; (14d14 <z_impl_k_yield+0xb0>)
   14cc6:	f104 0728 	add.w	r7, r4, #40	; 0x28
   14cca:	68a1      	ldr	r1, [r4, #8]
   14ccc:	4638      	mov	r0, r7
   14cce:	f7ff fd33 	bl	14738 <z_priq_dumb_remove>
			_priq_run_add(&_kernel.ready_q.runq, _current);
   14cd2:	68a5      	ldr	r5, [r4, #8]
	return list->head == list;
   14cd4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14cd6:	42bc      	cmp	r4, r7
   14cd8:	d0db      	beq.n	14c92 <z_impl_k_yield+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14cda:	2c00      	cmp	r4, #0
   14cdc:	d0db      	beq.n	14c96 <z_impl_k_yield+0x32>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
   14cde:	4621      	mov	r1, r4
   14ce0:	4628      	mov	r0, r5
   14ce2:	f004 f87f 	bl	18de4 <z_is_t1_higher_prio_than_t2>
   14ce6:	2800      	cmp	r0, #0
   14ce8:	d1cc      	bne.n	14c84 <z_impl_k_yield+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14cea:	2c00      	cmp	r4, #0
   14cec:	d0d3      	beq.n	14c96 <z_impl_k_yield+0x32>
	return (node == list->tail) ? NULL : node->next;
   14cee:	4b09      	ldr	r3, [pc, #36]	; (14d14 <z_impl_k_yield+0xb0>)
   14cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14cf2:	429c      	cmp	r4, r3
   14cf4:	d0cf      	beq.n	14c96 <z_impl_k_yield+0x32>
   14cf6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14cf8:	2c00      	cmp	r4, #0
   14cfa:	d1ee      	bne.n	14cda <z_impl_k_yield+0x76>
   14cfc:	e7cb      	b.n	14c96 <z_impl_k_yield+0x32>
	__asm__ volatile(
   14cfe:	f04f 0320 	mov.w	r3, #32
   14d02:	f3ef 8011 	mrs	r0, BASEPRI
   14d06:	f383 8811 	msr	BASEPRI, r3
   14d0a:	f3bf 8f6f 	isb	sy
   14d0e:	f7f9 febb 	bl	ea88 <arch_swap>
		}
	}
	z_swap_unlocked();
}
   14d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d14:	20010924 	.word	0x20010924
   14d18:	200102e0 	.word	0x200102e0

00014d1c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
{
   14d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   14d20:	4604      	mov	r4, r0
   14d22:	b348      	cbz	r0, 14d78 <z_tick_sleep+0x5c>
	}

	k_timeout_t timeout;

#ifndef CONFIG_LEGACY_TIMEOUT_API
	timeout = Z_TIMEOUT_TICKS(ticks);
   14d24:	4606      	mov	r6, r0
   14d26:	17c7      	asrs	r7, r0, #31
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   14d28:	f004 fa7a 	bl	19220 <z_tick_get_32>
   14d2c:	4404      	add	r4, r0
   14d2e:	f04f 0320 	mov.w	r3, #32
   14d32:	f3ef 8811 	mrs	r8, BASEPRI
   14d36:	f383 8811 	msr	BASEPRI, r3
   14d3a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   14d3e:	4d10      	ldr	r5, [pc, #64]	; (14d80 <z_tick_sleep+0x64>)
   14d40:	68a8      	ldr	r0, [r5, #8]
   14d42:	4b10      	ldr	r3, [pc, #64]	; (14d84 <z_tick_sleep+0x68>)
   14d44:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   14d46:	f7ff fef7 	bl	14b38 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   14d4a:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   14d4c:	4632      	mov	r2, r6
   14d4e:	463b      	mov	r3, r7
   14d50:	490d      	ldr	r1, [pc, #52]	; (14d88 <z_tick_sleep+0x6c>)
   14d52:	3018      	adds	r0, #24
   14d54:	f000 f970 	bl	15038 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   14d58:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   14d5a:	7b53      	ldrb	r3, [r2, #13]
   14d5c:	f043 0310 	orr.w	r3, r3, #16
   14d60:	7353      	strb	r3, [r2, #13]
   14d62:	4640      	mov	r0, r8
   14d64:	f7f9 fe90 	bl	ea88 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   14d68:	f004 fa5a 	bl	19220 <z_tick_get_32>
   14d6c:	1a20      	subs	r0, r4, r0
	if (ticks > 0) {
   14d6e:	2800      	cmp	r0, #0
   14d70:	dc00      	bgt.n	14d74 <z_tick_sleep+0x58>
		return ticks;
	}
#endif

	return 0;
   14d72:	2000      	movs	r0, #0
}
   14d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   14d78:	f7ff ff74 	bl	14c64 <z_impl_k_yield>
		return 0;
   14d7c:	4620      	mov	r0, r4
   14d7e:	e7f9      	b.n	14d74 <z_tick_sleep+0x58>
   14d80:	20010924 	.word	0x20010924
   14d84:	20010954 	.word	0x20010954
   14d88:	00018f01 	.word	0x00018f01

00014d8c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   14d8c:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14d8e:	f1b1 3fff 	cmp.w	r1, #4294967295
   14d92:	bf08      	it	eq
   14d94:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   14d98:	d01a      	beq.n	14dd0 <z_impl_k_sleep+0x44>
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
   14d9a:	f7ff ffbf 	bl	14d1c <z_tick_sleep>
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
   14d9e:	4604      	mov	r4, r0
   14da0:	17c5      	asrs	r5, r0, #31
		} else {
			return (t * to_hz + off) / from_hz;
   14da2:	0169      	lsls	r1, r5, #5
   14da4:	0143      	lsls	r3, r0, #5
   14da6:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   14daa:	1a18      	subs	r0, r3, r0
   14dac:	eb62 0305 	sbc.w	r3, r2, r5
   14db0:	009a      	lsls	r2, r3, #2
   14db2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   14db6:	0081      	lsls	r1, r0, #2
   14db8:	4613      	mov	r3, r2
   14dba:	1908      	adds	r0, r1, r4
   14dbc:	eb45 0303 	adc.w	r3, r5, r3
   14dc0:	00da      	lsls	r2, r3, #3
   14dc2:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   14dc6:	00c1      	lsls	r1, r0, #3
   14dc8:	0bc8      	lsrs	r0, r1, #15
   14dca:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   14dce:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   14dd0:	4b03      	ldr	r3, [pc, #12]	; (14de0 <z_impl_k_sleep+0x54>)
   14dd2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   14dd4:	f7ff fdfe 	bl	149d4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   14dd8:	f04f 30ff 	mov.w	r0, #4294967295
   14ddc:	e7f7      	b.n	14dce <z_impl_k_sleep+0x42>
   14dde:	bf00      	nop
   14de0:	20010924 	.word	0x20010924

00014de4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   14de4:	4b01      	ldr	r3, [pc, #4]	; (14dec <z_impl_k_current_get+0x8>)
   14de6:	6898      	ldr	r0, [r3, #8]
   14de8:	4770      	bx	lr
   14dea:	bf00      	nop
   14dec:	20010924 	.word	0x20010924

00014df0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   14df0:	b538      	push	{r3, r4, r5, lr}
   14df2:	4604      	mov	r4, r0
   14df4:	f04f 0320 	mov.w	r3, #32
   14df8:	f3ef 8511 	mrs	r5, BASEPRI
   14dfc:	f383 8811 	msr	BASEPRI, r3
   14e00:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   14e04:	f004 f8f6 	bl	18ff4 <z_unpend_first_thread>

	if (thread != NULL) {
   14e08:	b140      	cbz	r0, 14e1c <z_impl_k_sem_give+0x2c>
   14e0a:	2200      	movs	r2, #0
   14e0c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   14e0e:	f004 f861 	bl	18ed4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   14e12:	4629      	mov	r1, r5
   14e14:	4806      	ldr	r0, [pc, #24]	; (14e30 <z_impl_k_sem_give+0x40>)
   14e16:	f7ff fc5d 	bl	146d4 <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   14e1a:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   14e1c:	68a3      	ldr	r3, [r4, #8]
   14e1e:	68e2      	ldr	r2, [r4, #12]
   14e20:	4293      	cmp	r3, r2
   14e22:	d003      	beq.n	14e2c <z_impl_k_sem_give+0x3c>
   14e24:	2201      	movs	r2, #1
   14e26:	4413      	add	r3, r2
   14e28:	60a3      	str	r3, [r4, #8]
}
   14e2a:	e7f2      	b.n	14e12 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   14e2c:	2200      	movs	r2, #0
   14e2e:	e7fa      	b.n	14e26 <z_impl_k_sem_give+0x36>
   14e30:	20010960 	.word	0x20010960

00014e34 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   14e34:	b530      	push	{r4, r5, lr}
   14e36:	b083      	sub	sp, #12
   14e38:	461d      	mov	r5, r3
   14e3a:	f04f 0320 	mov.w	r3, #32
   14e3e:	f3ef 8111 	mrs	r1, BASEPRI
   14e42:	f383 8811 	msr	BASEPRI, r3
   14e46:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   14e4a:	6883      	ldr	r3, [r0, #8]
   14e4c:	b143      	cbz	r3, 14e60 <z_impl_k_sem_take+0x2c>
		sem->count--;
   14e4e:	3b01      	subs	r3, #1
   14e50:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   14e52:	f381 8811 	msr	BASEPRI, r1
   14e56:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   14e5a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   14e5c:	b003      	add	sp, #12
   14e5e:	bd30      	pop	{r4, r5, pc}
   14e60:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14e62:	ea54 0305 	orrs.w	r3, r4, r5
   14e66:	d006      	beq.n	14e76 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   14e68:	e9cd 4500 	strd	r4, r5, [sp]
   14e6c:	4602      	mov	r2, r0
   14e6e:	4805      	ldr	r0, [pc, #20]	; (14e84 <z_impl_k_sem_take+0x50>)
   14e70:	f7ff fe7e 	bl	14b70 <z_pend_curr>
	return ret;
   14e74:	e7f2      	b.n	14e5c <z_impl_k_sem_take+0x28>
   14e76:	f381 8811 	msr	BASEPRI, r1
   14e7a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   14e7e:	f06f 000f 	mvn.w	r0, #15
   14e82:	e7eb      	b.n	14e5c <z_impl_k_sem_take+0x28>
   14e84:	20010960 	.word	0x20010960

00014e88 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   14e88:	b538      	push	{r3, r4, r5, lr}
   14e8a:	4614      	mov	r4, r2
   14e8c:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   14e8e:	ea54 0305 	orrs.w	r3, r4, r5
   14e92:	d102      	bne.n	14e9a <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   14e94:	f004 f921 	bl	190da <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   14e98:	bd38      	pop	{r3, r4, r5, pc}
   14e9a:	462b      	mov	r3, r5
   14e9c:	4902      	ldr	r1, [pc, #8]	; (14ea8 <schedule_new_thread+0x20>)
   14e9e:	3018      	adds	r0, #24
   14ea0:	f000 f8ca 	bl	15038 <z_add_timeout>
   14ea4:	e7f8      	b.n	14e98 <schedule_new_thread+0x10>
   14ea6:	bf00      	nop
   14ea8:	00018f01 	.word	0x00018f01

00014eac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   14eac:	b5f0      	push	{r4, r5, r6, r7, lr}
   14eae:	b085      	sub	sp, #20
   14eb0:	4604      	mov	r4, r0
   14eb2:	460e      	mov	r6, r1
   14eb4:	4615      	mov	r5, r2
   14eb6:	461f      	mov	r7, r3
	sys_dlist_init(&w->waitq);
   14eb8:	f100 0330 	add.w	r3, r0, #48	; 0x30
	list->head = (sys_dnode_t *)list;
   14ebc:	6303      	str	r3, [r0, #48]	; 0x30
	list->tail = (sys_dnode_t *)list;
   14ebe:	6343      	str	r3, [r0, #52]	; 0x34
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->base.join_waiters);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   14ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14ec2:	2204      	movs	r2, #4
   14ec4:	990d      	ldr	r1, [sp, #52]	; 0x34
   14ec6:	f004 f90c 	bl	190e2 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   14eca:	462a      	mov	r2, r5
   14ecc:	4631      	mov	r1, r6
   14ece:	4620      	mov	r0, r4
   14ed0:	f004 f8eb 	bl	190aa <setup_thread_stack>
   14ed4:	4605      	mov	r5, r0

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   14ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14ed8:	9302      	str	r3, [sp, #8]
   14eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14edc:	9301      	str	r3, [sp, #4]
   14ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14ee0:	9300      	str	r3, [sp, #0]
   14ee2:	463b      	mov	r3, r7
   14ee4:	4602      	mov	r2, r0
   14ee6:	4631      	mov	r1, r6
   14ee8:	4620      	mov	r0, r4
   14eea:	f7f9 fe57 	bl	eb9c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   14eee:	2300      	movs	r3, #0
   14ef0:	65e3      	str	r3, [r4, #92]	; 0x5c
	new_thread->fn_abort = NULL;
   14ef2:	6623      	str	r3, [r4, #96]	; 0x60
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   14ef4:	4b04      	ldr	r3, [pc, #16]	; (14f08 <z_setup_new_thread+0x5c>)
   14ef6:	689b      	ldr	r3, [r3, #8]
   14ef8:	b123      	cbz	r3, 14f04 <z_setup_new_thread+0x58>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   14efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   14efc:	6763      	str	r3, [r4, #116]	; 0x74
	sys_trace_thread_create(new_thread);

	return stack_ptr;
}
   14efe:	4628      	mov	r0, r5
   14f00:	b005      	add	sp, #20
   14f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
   14f04:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
   14f06:	e7fa      	b.n	14efe <z_setup_new_thread+0x52>
   14f08:	20010924 	.word	0x20010924

00014f0c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   14f0c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   14f10:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   14f12:	4c23      	ldr	r4, [pc, #140]	; (14fa0 <z_init_static_threads+0x94>)
   14f14:	4b23      	ldr	r3, [pc, #140]	; (14fa4 <z_init_static_threads+0x98>)
   14f16:	429c      	cmp	r4, r3
   14f18:	d215      	bcs.n	14f46 <z_init_static_threads+0x3a>
		z_setup_new_thread(
   14f1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14f1c:	9305      	str	r3, [sp, #20]
   14f1e:	6a23      	ldr	r3, [r4, #32]
   14f20:	9304      	str	r3, [sp, #16]
   14f22:	69e3      	ldr	r3, [r4, #28]
   14f24:	9303      	str	r3, [sp, #12]
   14f26:	69a3      	ldr	r3, [r4, #24]
   14f28:	9302      	str	r3, [sp, #8]
   14f2a:	6963      	ldr	r3, [r4, #20]
   14f2c:	9301      	str	r3, [sp, #4]
   14f2e:	6923      	ldr	r3, [r4, #16]
   14f30:	9300      	str	r3, [sp, #0]
   14f32:	68e3      	ldr	r3, [r4, #12]
   14f34:	68a2      	ldr	r2, [r4, #8]
   14f36:	6861      	ldr	r1, [r4, #4]
   14f38:	6820      	ldr	r0, [r4, #0]
   14f3a:	f7ff ffb7 	bl	14eac <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   14f3e:	6823      	ldr	r3, [r4, #0]
   14f40:	65dc      	str	r4, [r3, #92]	; 0x5c
	_FOREACH_STATIC_THREAD(thread_data) {
   14f42:	3430      	adds	r4, #48	; 0x30
   14f44:	e7e6      	b.n	14f14 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   14f46:	f7ff fbdf 	bl	14708 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   14f4a:	4c15      	ldr	r4, [pc, #84]	; (14fa0 <z_init_static_threads+0x94>)
   14f4c:	e01b      	b.n	14f86 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   14f4e:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   14f50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14f54:	ea4f 79e3 	mov.w	r9, r3, asr #31
   14f58:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   14f5c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   14f60:	03d8      	lsls	r0, r3, #15
   14f62:	f240 35e7 	movw	r5, #999	; 0x3e7
   14f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14f6a:	2300      	movs	r3, #0
   14f6c:	1940      	adds	r0, r0, r5
   14f6e:	f04f 0500 	mov.w	r5, #0
   14f72:	eb45 0101 	adc.w	r1, r5, r1
   14f76:	f7f7 f961 	bl	c23c <__aeabi_uldivmod>
   14f7a:	4602      	mov	r2, r0
   14f7c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   14f7e:	4630      	mov	r0, r6
   14f80:	f7ff ff82 	bl	14e88 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   14f84:	3430      	adds	r4, #48	; 0x30
   14f86:	4b07      	ldr	r3, [pc, #28]	; (14fa4 <z_init_static_threads+0x98>)
   14f88:	429c      	cmp	r4, r3
   14f8a:	d204      	bcs.n	14f96 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   14f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
   14f92:	d0f7      	beq.n	14f84 <z_init_static_threads+0x78>
   14f94:	e7db      	b.n	14f4e <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   14f96:	f7ff fc11 	bl	147bc <k_sched_unlock>
}
   14f9a:	b006      	add	sp, #24
   14f9c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   14fa0:	200101cc 	.word	0x200101cc
   14fa4:	200101cc 	.word	0x200101cc

00014fa8 <first>:
	return list->head == list;
   14fa8:	4b03      	ldr	r3, [pc, #12]	; (14fb8 <first+0x10>)
   14faa:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14fac:	4298      	cmp	r0, r3
   14fae:	d000      	beq.n	14fb2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   14fb0:	4770      	bx	lr
   14fb2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   14fb4:	e7fc      	b.n	14fb0 <first+0x8>
   14fb6:	bf00      	nop
   14fb8:	20010160 	.word	0x20010160

00014fbc <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14fbc:	b130      	cbz	r0, 14fcc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   14fbe:	4a04      	ldr	r2, [pc, #16]	; (14fd0 <next+0x14>)
   14fc0:	6852      	ldr	r2, [r2, #4]
   14fc2:	4290      	cmp	r0, r2
   14fc4:	d001      	beq.n	14fca <next+0xe>
   14fc6:	6800      	ldr	r0, [r0, #0]
   14fc8:	4770      	bx	lr
   14fca:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   14fcc:	4770      	bx	lr
   14fce:	bf00      	nop
   14fd0:	20010160 	.word	0x20010160

00014fd4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   14fd4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   14fd6:	4b04      	ldr	r3, [pc, #16]	; (14fe8 <elapsed+0x14>)
   14fd8:	681b      	ldr	r3, [r3, #0]
   14fda:	b10b      	cbz	r3, 14fe0 <elapsed+0xc>
   14fdc:	2000      	movs	r0, #0
}
   14fde:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   14fe0:	f7f9 fd24 	bl	ea2c <z_clock_elapsed>
   14fe4:	e7fb      	b.n	14fde <elapsed+0xa>
   14fe6:	bf00      	nop
   14fe8:	20010960 	.word	0x20010960

00014fec <next_timeout>:

static int32_t next_timeout(void)
{
   14fec:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   14fee:	f7ff ffdb 	bl	14fa8 <first>
   14ff2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   14ff4:	f7ff ffee 	bl	14fd4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   14ff8:	b184      	cbz	r4, 1501c <next_timeout+0x30>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   14ffa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   14ffe:	1a12      	subs	r2, r2, r0
   15000:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   15004:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   15008:	f173 0100 	sbcs.w	r1, r3, #0
   1500c:	da09      	bge.n	15022 <next_timeout+0x36>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   1500e:	4610      	mov	r0, r2
   15010:	2a00      	cmp	r2, #0
   15012:	f173 0300 	sbcs.w	r3, r3, #0
   15016:	da06      	bge.n	15026 <next_timeout+0x3a>
   15018:	2000      	movs	r0, #0
   1501a:	e004      	b.n	15026 <next_timeout+0x3a>
	int32_t ret = to == NULL ? MAX_WAIT
   1501c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   15020:	e001      	b.n	15026 <next_timeout+0x3a>
   15022:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   15026:	4b03      	ldr	r3, [pc, #12]	; (15034 <next_timeout+0x48>)
   15028:	691b      	ldr	r3, [r3, #16]
   1502a:	b113      	cbz	r3, 15032 <next_timeout+0x46>
   1502c:	4283      	cmp	r3, r0
   1502e:	da00      	bge.n	15032 <next_timeout+0x46>
		ret = _current_cpu->slice_ticks;
   15030:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   15032:	bd10      	pop	{r4, pc}
   15034:	20010924 	.word	0x20010924

00015038 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   15038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1503c:	4680      	mov	r8, r0
   1503e:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15040:	f1b3 3fff 	cmp.w	r3, #4294967295
   15044:	bf08      	it	eq
   15046:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1504a:	d07e      	beq.n	1514a <z_add_timeout+0x112>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   1504c:	1c54      	adds	r4, r2, #1
   1504e:	f143 0500 	adc.w	r5, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   15052:	f06f 0301 	mvn.w	r3, #1
   15056:	1b1e      	subs	r6, r3, r4
   15058:	f04f 3aff 	mov.w	sl, #4294967295
   1505c:	eb6a 0705 	sbc.w	r7, sl, r5
   15060:	2e00      	cmp	r6, #0
   15062:	f177 0300 	sbcs.w	r3, r7, #0
   15066:	da11      	bge.n	1508c <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   15068:	f8c8 9008 	str.w	r9, [r8, #8]
	ticks = MAX(1, ticks);
   1506c:	4626      	mov	r6, r4
   1506e:	462f      	mov	r7, r5
   15070:	2c01      	cmp	r4, #1
   15072:	f175 0300 	sbcs.w	r3, r5, #0
   15076:	db1b      	blt.n	150b0 <z_add_timeout+0x78>

	LOCKED(&timeout_lock) {
   15078:	2300      	movs	r3, #0
	__asm__ volatile(
   1507a:	f04f 0220 	mov.w	r2, #32
   1507e:	f3ef 8911 	mrs	r9, BASEPRI
   15082:	f382 8811 	msr	BASEPRI, r2
   15086:	f3bf 8f6f 	isb	sy
   1508a:	e02e      	b.n	150ea <z_add_timeout+0xb2>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1508c:	f7ff ffa2 	bl	14fd4 <elapsed>
   15090:	4b2f      	ldr	r3, [pc, #188]	; (15150 <z_add_timeout+0x118>)
   15092:	e9d3 2300 	ldrd	r2, r3, [r3]
   15096:	1812      	adds	r2, r2, r0
   15098:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1509c:	4619      	mov	r1, r3
   1509e:	18a2      	adds	r2, r4, r2
   150a0:	eb45 0101 	adc.w	r1, r5, r1
   150a4:	f06f 0301 	mvn.w	r3, #1
   150a8:	1a9c      	subs	r4, r3, r2
   150aa:	eb6a 0501 	sbc.w	r5, sl, r1
   150ae:	e7db      	b.n	15068 <z_add_timeout+0x30>
	ticks = MAX(1, ticks);
   150b0:	2601      	movs	r6, #1
   150b2:	2700      	movs	r7, #0
   150b4:	e7e0      	b.n	15078 <z_add_timeout+0x40>
		struct _timeout *t;

		to->dticks = ticks + elapsed();
		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   150b6:	ebb4 020a 	subs.w	r2, r4, sl
   150ba:	eb65 030b 	sbc.w	r3, r5, fp
   150be:	6102      	str	r2, [r0, #16]
   150c0:	6143      	str	r3, [r0, #20]
	node->prev = successor->prev;
   150c2:	6843      	ldr	r3, [r0, #4]
   150c4:	f8c8 3004 	str.w	r3, [r8, #4]
	node->next = successor;
   150c8:	f8c8 0000 	str.w	r0, [r8]
	successor->prev->next = node;
   150cc:	6843      	ldr	r3, [r0, #4]
   150ce:	f8c3 8000 	str.w	r8, [r3]
	successor->prev = node;
   150d2:	f8c0 8004 	str.w	r8, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   150d6:	b338      	cbz	r0, 15128 <z_add_timeout+0xf0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   150d8:	f7ff ff66 	bl	14fa8 <first>
   150dc:	4580      	cmp	r8, r0
   150de:	d02e      	beq.n	1513e <z_add_timeout+0x106>
	__asm__ volatile(
   150e0:	f389 8811 	msr	BASEPRI, r9
   150e4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   150e8:	2301      	movs	r3, #1
   150ea:	bb73      	cbnz	r3, 1514a <z_add_timeout+0x112>
		to->dticks = ticks + elapsed();
   150ec:	f7ff ff72 	bl	14fd4 <elapsed>
   150f0:	1832      	adds	r2, r6, r0
   150f2:	eb47 73e0 	adc.w	r3, r7, r0, asr #31
   150f6:	e9c8 2304 	strd	r2, r3, [r8, #16]
		for (t = first(); t != NULL; t = next(t)) {
   150fa:	f7ff ff55 	bl	14fa8 <first>
   150fe:	2800      	cmp	r0, #0
   15100:	d0e9      	beq.n	150d6 <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
   15102:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   15106:	e9d8 ab04 	ldrd	sl, fp, [r8, #16]
   1510a:	45a2      	cmp	sl, r4
   1510c:	eb7b 0305 	sbcs.w	r3, fp, r5
   15110:	dbd1      	blt.n	150b6 <z_add_timeout+0x7e>
			to->dticks -= t->dticks;
   15112:	ebba 0204 	subs.w	r2, sl, r4
   15116:	eb6b 0305 	sbc.w	r3, fp, r5
   1511a:	f8c8 2010 	str.w	r2, [r8, #16]
   1511e:	f8c8 3014 	str.w	r3, [r8, #20]
		for (t = first(); t != NULL; t = next(t)) {
   15122:	f7ff ff4b 	bl	14fbc <next>
   15126:	e7ea      	b.n	150fe <z_add_timeout+0xc6>
	node->next = list;
   15128:	4b0a      	ldr	r3, [pc, #40]	; (15154 <z_add_timeout+0x11c>)
   1512a:	f8c8 3000 	str.w	r3, [r8]
	node->prev = list->tail;
   1512e:	685a      	ldr	r2, [r3, #4]
   15130:	f8c8 2004 	str.w	r2, [r8, #4]
	list->tail->next = node;
   15134:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   15138:	f8c3 8004 	str.w	r8, [r3, #4]
}
   1513c:	e7cc      	b.n	150d8 <z_add_timeout+0xa0>
			z_clock_set_timeout(next_timeout(), false);
   1513e:	f7ff ff55 	bl	14fec <next_timeout>
   15142:	2100      	movs	r1, #0
   15144:	f7f9 fc44 	bl	e9d0 <z_clock_set_timeout>
   15148:	e7ca      	b.n	150e0 <z_add_timeout+0xa8>
		}
	}
}
   1514a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1514e:	bf00      	nop
   15150:	200103e0 	.word	0x200103e0
   15154:	20010160 	.word	0x20010160

00015158 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   15158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1515a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1515c:	f7ff fbee 	bl	1493c <z_time_slice>
	__asm__ volatile(
   15160:	f04f 0320 	mov.w	r3, #32
   15164:	f3ef 8511 	mrs	r5, BASEPRI
   15168:	f383 8811 	msr	BASEPRI, r3
   1516c:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   15170:	4b28      	ldr	r3, [pc, #160]	; (15214 <z_clock_announce+0xbc>)
   15172:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   15174:	f7ff ff18 	bl	14fa8 <first>
   15178:	4604      	mov	r4, r0
   1517a:	b350      	cbz	r0, 151d2 <z_clock_announce+0x7a>
   1517c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   15180:	4b24      	ldr	r3, [pc, #144]	; (15214 <z_clock_announce+0xbc>)
   15182:	681b      	ldr	r3, [r3, #0]
   15184:	17d9      	asrs	r1, r3, #31
   15186:	42b3      	cmp	r3, r6
   15188:	eb71 0207 	sbcs.w	r2, r1, r7
   1518c:	db21      	blt.n	151d2 <z_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1518e:	4a22      	ldr	r2, [pc, #136]	; (15218 <z_clock_announce+0xc0>)
   15190:	e9d2 0100 	ldrd	r0, r1, [r2]
   15194:	1980      	adds	r0, r0, r6
   15196:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1519a:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   1519e:	1b9b      	subs	r3, r3, r6
   151a0:	4a1c      	ldr	r2, [pc, #112]	; (15214 <z_clock_announce+0xbc>)
   151a2:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   151a4:	2200      	movs	r2, #0
   151a6:	2300      	movs	r3, #0
   151a8:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   151ac:	4620      	mov	r0, r4
   151ae:	f003 ffc2 	bl	19136 <remove_timeout>
	__asm__ volatile(
   151b2:	f385 8811 	msr	BASEPRI, r5
   151b6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   151ba:	68a3      	ldr	r3, [r4, #8]
   151bc:	4620      	mov	r0, r4
   151be:	4798      	blx	r3
	__asm__ volatile(
   151c0:	f04f 0320 	mov.w	r3, #32
   151c4:	f3ef 8511 	mrs	r5, BASEPRI
   151c8:	f383 8811 	msr	BASEPRI, r3
   151cc:	f3bf 8f6f 	isb	sy
   151d0:	e7d0      	b.n	15174 <z_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   151d2:	b144      	cbz	r4, 151e6 <z_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   151d4:	4b0f      	ldr	r3, [pc, #60]	; (15214 <z_clock_announce+0xbc>)
   151d6:	6819      	ldr	r1, [r3, #0]
   151d8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   151dc:	1a52      	subs	r2, r2, r1
   151de:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   151e2:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   151e6:	480c      	ldr	r0, [pc, #48]	; (15218 <z_clock_announce+0xc0>)
   151e8:	490a      	ldr	r1, [pc, #40]	; (15214 <z_clock_announce+0xbc>)
   151ea:	680c      	ldr	r4, [r1, #0]
   151ec:	e9d0 2300 	ldrd	r2, r3, [r0]
   151f0:	1912      	adds	r2, r2, r4
   151f2:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   151f6:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   151fa:	2400      	movs	r4, #0
   151fc:	600c      	str	r4, [r1, #0]

	z_clock_set_timeout(next_timeout(), false);
   151fe:	f7ff fef5 	bl	14fec <next_timeout>
   15202:	4621      	mov	r1, r4
   15204:	f7f9 fbe4 	bl	e9d0 <z_clock_set_timeout>
	__asm__ volatile(
   15208:	f385 8811 	msr	BASEPRI, r5
   1520c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   15210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15212:	bf00      	nop
   15214:	20010960 	.word	0x20010960
   15218:	200103e0 	.word	0x200103e0

0001521c <z_tick_get>:

int64_t z_tick_get(void)
{
   1521c:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   1521e:	2100      	movs	r1, #0
	__asm__ volatile(
   15220:	f04f 0320 	mov.w	r3, #32
   15224:	f3ef 8411 	mrs	r4, BASEPRI
   15228:	f383 8811 	msr	BASEPRI, r3
   1522c:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   15230:	2200      	movs	r2, #0
   15232:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   15234:	b969      	cbnz	r1, 15252 <z_tick_get+0x36>
		t = curr_tick + z_clock_elapsed();
   15236:	f7f9 fbf9 	bl	ea2c <z_clock_elapsed>
   1523a:	4b07      	ldr	r3, [pc, #28]	; (15258 <z_tick_get+0x3c>)
   1523c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15240:	1812      	adds	r2, r2, r0
   15242:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   15246:	f384 8811 	msr	BASEPRI, r4
   1524a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1524e:	2101      	movs	r1, #1
   15250:	e7f0      	b.n	15234 <z_tick_get+0x18>
	}
	return t;
}
   15252:	4610      	mov	r0, r2
   15254:	4619      	mov	r1, r3
   15256:	bd10      	pop	{r4, pc}
   15258:	200103e0 	.word	0x200103e0

0001525c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1525c:	b510      	push	{r4, lr}
   1525e:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   15260:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   15264:	ea52 0103 	orrs.w	r1, r2, r3
   15268:	d005      	beq.n	15276 <z_timer_expiration_handler+0x1a>
   1526a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1526e:	bf08      	it	eq
   15270:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   15274:	d115      	bne.n	152a2 <z_timer_expiration_handler+0x46>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   15276:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15278:	3301      	adds	r3, #1
   1527a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1527c:	6a23      	ldr	r3, [r4, #32]
   1527e:	b10b      	cbz	r3, 15284 <z_timer_expiration_handler+0x28>
		timer->expiry_fn(timer);
   15280:	4620      	mov	r0, r4
   15282:	4798      	blx	r3
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   15284:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   15288:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1528a:	42a3      	cmp	r3, r4
   1528c:	d008      	beq.n	152a0 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1528e:	b13c      	cbz	r4, 152a0 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   15290:	4620      	mov	r0, r4
   15292:	f003 fdc8 	bl	18e26 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   15296:	4620      	mov	r0, r4
   15298:	f003 fe1c 	bl	18ed4 <z_ready_thread>
   1529c:	2300      	movs	r3, #0
   1529e:	67e3      	str	r3, [r4, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
   152a0:	bd10      	pop	{r4, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   152a2:	4902      	ldr	r1, [pc, #8]	; (152ac <z_timer_expiration_handler+0x50>)
   152a4:	f7ff fec8 	bl	15038 <z_add_timeout>
   152a8:	e7e5      	b.n	15276 <z_timer_expiration_handler+0x1a>
   152aa:	bf00      	nop
   152ac:	0001525d 	.word	0x0001525d

000152b0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   152b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152b4:	b087      	sub	sp, #28
   152b6:	4614      	mov	r4, r2
   152b8:	461d      	mov	r5, r3
   152ba:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   152be:	f1b3 3fff 	cmp.w	r3, #4294967295
   152c2:	bf08      	it	eq
   152c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   152c8:	d02f      	beq.n	1532a <z_impl_k_timer_start+0x7a>
   152ca:	4606      	mov	r6, r0
   152cc:	4613      	mov	r3, r2
   152ce:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   152d0:	ea58 0109 	orrs.w	r1, r8, r9
   152d4:	d00f      	beq.n	152f6 <z_impl_k_timer_start+0x46>
   152d6:	f06f 0001 	mvn.w	r0, #1
   152da:	ebb0 0008 	subs.w	r0, r0, r8
   152de:	9000      	str	r0, [sp, #0]
   152e0:	f04f 31ff 	mov.w	r1, #4294967295
   152e4:	eb61 0009 	sbc.w	r0, r1, r9
   152e8:	9001      	str	r0, [sp, #4]
   152ea:	e9dd 0100 	ldrd	r0, r1, [sp]
   152ee:	2800      	cmp	r0, #0
   152f0:	f171 0100 	sbcs.w	r1, r1, #0
   152f4:	db1c      	blt.n	15330 <z_impl_k_timer_start+0x80>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   152f6:	f06f 0101 	mvn.w	r1, #1
   152fa:	ebb1 0a03 	subs.w	sl, r1, r3
   152fe:	f04f 31ff 	mov.w	r1, #4294967295
   15302:	eb61 0b02 	sbc.w	fp, r1, r2
   15306:	f1ba 0f00 	cmp.w	sl, #0
   1530a:	f17b 0100 	sbcs.w	r1, fp, #0
   1530e:	db23      	blt.n	15358 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   15310:	4630      	mov	r0, r6
   15312:	f003 ff28 	bl	19166 <z_abort_timeout>
	timer->period = period;
   15316:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   1531a:	2300      	movs	r3, #0
   1531c:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1531e:	4622      	mov	r2, r4
   15320:	462b      	mov	r3, r5
   15322:	4917      	ldr	r1, [pc, #92]	; (15380 <z_impl_k_timer_start+0xd0>)
   15324:	4630      	mov	r0, r6
   15326:	f7ff fe87 	bl	15038 <z_add_timeout>
		     duration);
}
   1532a:	b007      	add	sp, #28
   1532c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   15330:	f118 31ff 	adds.w	r1, r8, #4294967295
   15334:	9104      	str	r1, [sp, #16]
   15336:	f149 31ff 	adc.w	r1, r9, #4294967295
   1533a:	9105      	str	r1, [sp, #20]
   1533c:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   15340:	4638      	mov	r0, r7
   15342:	4641      	mov	r1, r8
   15344:	2f01      	cmp	r7, #1
   15346:	f178 0700 	sbcs.w	r7, r8, #0
   1534a:	db02      	blt.n	15352 <z_impl_k_timer_start+0xa2>
   1534c:	4680      	mov	r8, r0
   1534e:	4689      	mov	r9, r1
   15350:	e7d1      	b.n	152f6 <z_impl_k_timer_start+0x46>
   15352:	2001      	movs	r0, #1
   15354:	2100      	movs	r1, #0
   15356:	e7f9      	b.n	1534c <z_impl_k_timer_start+0x9c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   15358:	f113 33ff 	adds.w	r3, r3, #4294967295
   1535c:	9302      	str	r3, [sp, #8]
   1535e:	f142 33ff 	adc.w	r3, r2, #4294967295
   15362:	9303      	str	r3, [sp, #12]
   15364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   15368:	4602      	mov	r2, r0
   1536a:	460b      	mov	r3, r1
   1536c:	2800      	cmp	r0, #0
   1536e:	f171 0100 	sbcs.w	r1, r1, #0
   15372:	db02      	blt.n	1537a <z_impl_k_timer_start+0xca>
   15374:	4614      	mov	r4, r2
   15376:	461d      	mov	r5, r3
   15378:	e7ca      	b.n	15310 <z_impl_k_timer_start+0x60>
   1537a:	2200      	movs	r2, #0
   1537c:	4613      	mov	r3, r2
   1537e:	e7f9      	b.n	15374 <z_impl_k_timer_start+0xc4>
   15380:	0001525d 	.word	0x0001525d

00015384 <block_ptr>:
	return (uint8_t *)p->buf + lsz * block;
   15384:	6800      	ldr	r0, [r0, #0]
}
   15386:	fb01 0002 	mla	r0, r1, r2, r0
   1538a:	4770      	bx	lr

0001538c <get_bit_ptr>:
{
   1538c:	b410      	push	{r4}
	uint32_t *bitarray = level <= p->max_inline_level ?
   1538e:	f990 400b 	ldrsb.w	r4, [r0, #11]
		p->levels[level].bits : p->levels[level].bits_p;
   15392:	428c      	cmp	r4, r1
   15394:	db0f      	blt.n	153b6 <get_bit_ptr+0x2a>
   15396:	68c0      	ldr	r0, [r0, #12]
   15398:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1539c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	*word = &bitarray[bn / 32];
   153a0:	4610      	mov	r0, r2
   153a2:	2a00      	cmp	r2, #0
   153a4:	db0d      	blt.n	153c2 <get_bit_ptr+0x36>
   153a6:	1140      	asrs	r0, r0, #5
   153a8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   153ac:	6019      	str	r1, [r3, #0]
}
   153ae:	f002 001f 	and.w	r0, r2, #31
   153b2:	bc10      	pop	{r4}
   153b4:	4770      	bx	lr
		p->levels[level].bits : p->levels[level].bits_p;
   153b6:	68c0      	ldr	r0, [r0, #12]
   153b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   153bc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   153c0:	e7ee      	b.n	153a0 <get_bit_ptr+0x14>
	*word = &bitarray[bn / 32];
   153c2:	f102 001f 	add.w	r0, r2, #31
   153c6:	e7ee      	b.n	153a6 <get_bit_ptr+0x1a>

000153c8 <clear_alloc_bit>:
{
   153c8:	b500      	push	{lr}
   153ca:	b083      	sub	sp, #12
	int bit = get_bit_ptr(p, level, bn, &word);
   153cc:	ab01      	add	r3, sp, #4
   153ce:	f7ff ffdd 	bl	1538c <get_bit_ptr>
	*word &= ~(1<<bit);
   153d2:	9a01      	ldr	r2, [sp, #4]
   153d4:	2301      	movs	r3, #1
   153d6:	fa03 f000 	lsl.w	r0, r3, r0
   153da:	6813      	ldr	r3, [r2, #0]
   153dc:	ea23 0300 	bic.w	r3, r3, r0
   153e0:	6013      	str	r3, [r2, #0]
}
   153e2:	b003      	add	sp, #12
   153e4:	f85d fb04 	ldr.w	pc, [sp], #4

000153e8 <partner_alloc_bits>:
{
   153e8:	b500      	push	{lr}
   153ea:	b083      	sub	sp, #12
	int bit = get_bit_ptr(p, level, bn, &word);
   153ec:	ab01      	add	r3, sp, #4
   153ee:	f7ff ffcd 	bl	1538c <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   153f2:	9b01      	ldr	r3, [sp, #4]
   153f4:	681a      	ldr	r2, [r3, #0]
   153f6:	4603      	mov	r3, r0
   153f8:	2800      	cmp	r0, #0
   153fa:	db08      	blt.n	1540e <partner_alloc_bits+0x26>
   153fc:	f023 0303 	bic.w	r3, r3, #3
   15400:	fa22 f303 	lsr.w	r3, r2, r3
}
   15404:	f003 000f 	and.w	r0, r3, #15
   15408:	b003      	add	sp, #12
   1540a:	f85d fb04 	ldr.w	pc, [sp], #4
	return (*word >> (4*(bit / 4))) & 0xf;
   1540e:	1cc3      	adds	r3, r0, #3
   15410:	e7f4      	b.n	153fc <partner_alloc_bits+0x14>

00015412 <bfree_recombine>:
{
   15412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15416:	4606      	mov	r6, r0
   15418:	460f      	mov	r7, r1
   1541a:	4692      	mov	sl, r2
   1541c:	461d      	mov	r5, r3
   1541e:	f8dd 9020 	ldr.w	r9, [sp, #32]
	while (level >= 0) {
   15422:	e019      	b.n	15458 <bfree_recombine+0x46>
		return 0;
   15424:	f04f 0900 	mov.w	r9, #0
   15428:	e044      	b.n	154b4 <bfree_recombine+0xa2>
			int b = (bn & ~3) + i;
   1542a:	f025 0203 	bic.w	r2, r5, #3
			sys_dlist_remove(block_ptr(p, lsz, b));
   1542e:	4422      	add	r2, r4
   15430:	4641      	mov	r1, r8
   15432:	4630      	mov	r0, r6
   15434:	f7ff ffa6 	bl	15384 <block_ptr>
	node->prev->next = node->next;
   15438:	6842      	ldr	r2, [r0, #4]
   1543a:	6803      	ldr	r3, [r0, #0]
   1543c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1543e:	6842      	ldr	r2, [r0, #4]
   15440:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15442:	2300      	movs	r3, #0
   15444:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   15446:	6043      	str	r3, [r0, #4]
		for (i = 0; i < 4; i++) {
   15448:	3401      	adds	r4, #1
   1544a:	2c03      	cmp	r4, #3
   1544c:	dded      	ble.n	1542a <bfree_recombine+0x18>
		level = level - 1;
   1544e:	3f01      	subs	r7, #1
		bn = bn / 4;
   15450:	462b      	mov	r3, r5
   15452:	2d00      	cmp	r5, #0
   15454:	db3a      	blt.n	154cc <bfree_recombine+0xba>
   15456:	109d      	asrs	r5, r3, #2
	while (level >= 0) {
   15458:	2f00      	cmp	r7, #0
   1545a:	db39      	blt.n	154d0 <bfree_recombine+0xbe>
		int i, lsz = lsizes[level];
   1545c:	f85a 8027 	ldr.w	r8, [sl, r7, lsl #2]
		void *block = block_ptr(p, lsz, bn);
   15460:	462a      	mov	r2, r5
   15462:	4641      	mov	r1, r8
   15464:	4630      	mov	r0, r6
   15466:	f7ff ff8d 	bl	15384 <block_ptr>
   1546a:	4604      	mov	r4, r0
		clear_alloc_bit(p, level, bn);
   1546c:	462a      	mov	r2, r5
   1546e:	4639      	mov	r1, r7
   15470:	4630      	mov	r0, r6
   15472:	f7ff ffa9 	bl	153c8 <clear_alloc_bit>
		sys_dlist_append(&p->levels[level].free_list, block);
   15476:	68f3      	ldr	r3, [r6, #12]
   15478:	eb07 0247 	add.w	r2, r7, r7, lsl #1
   1547c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   15480:	1d1a      	adds	r2, r3, #4
	node->next = list;
   15482:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   15484:	689a      	ldr	r2, [r3, #8]
   15486:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   15488:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1548a:	609c      	str	r4, [r3, #8]
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1548c:	7c33      	ldrb	r3, [r6, #16]
   1548e:	f013 0f01 	tst.w	r3, #1
   15492:	d003      	beq.n	1549c <bfree_recombine+0x8a>
   15494:	f389 8811 	msr	BASEPRI, r9
   15498:	f3bf 8f6f 	isb	sy
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1549c:	7c33      	ldrb	r3, [r6, #16]
   1549e:	f013 0f01 	tst.w	r3, #1
   154a2:	d0bf      	beq.n	15424 <bfree_recombine+0x12>
	__asm__ volatile(
   154a4:	f04f 0320 	mov.w	r3, #32
   154a8:	f3ef 8911 	mrs	r9, BASEPRI
   154ac:	f383 8811 	msr	BASEPRI, r3
   154b0:	f3bf 8f6f 	isb	sy
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   154b4:	b13f      	cbz	r7, 154c6 <bfree_recombine+0xb4>
   154b6:	462a      	mov	r2, r5
   154b8:	4639      	mov	r1, r7
   154ba:	4630      	mov	r0, r6
   154bc:	f7ff ff94 	bl	153e8 <partner_alloc_bits>
   154c0:	4604      	mov	r4, r0
   154c2:	2800      	cmp	r0, #0
   154c4:	d0c1      	beq.n	1544a <bfree_recombine+0x38>
			return key;
   154c6:	4648      	mov	r0, r9
}
   154c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bn = bn / 4;
   154cc:	1ceb      	adds	r3, r5, #3
   154ce:	e7c2      	b.n	15456 <bfree_recombine+0x44>
	return -1;
   154d0:	f04f 30ff 	mov.w	r0, #4294967295
   154d4:	e7f8      	b.n	154c8 <bfree_recombine+0xb6>

000154d6 <block_free>:
{
   154d6:	b530      	push	{r4, r5, lr}
   154d8:	b083      	sub	sp, #12
   154da:	4604      	mov	r4, r0
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   154dc:	7c00      	ldrb	r0, [r0, #16]
   154de:	f010 0f01 	tst.w	r0, #1
   154e2:	d015      	beq.n	15510 <block_free+0x3a>
   154e4:	f04f 0520 	mov.w	r5, #32
   154e8:	f3ef 8011 	mrs	r0, BASEPRI
   154ec:	f385 8811 	msr	BASEPRI, r5
   154f0:	f3bf 8f6f 	isb	sy
	key = bfree_recombine(p, level, lsizes, bn, key);
   154f4:	9000      	str	r0, [sp, #0]
   154f6:	4620      	mov	r0, r4
   154f8:	f7ff ff8b 	bl	15412 <bfree_recombine>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   154fc:	7c23      	ldrb	r3, [r4, #16]
   154fe:	f013 0f01 	tst.w	r3, #1
   15502:	d003      	beq.n	1550c <block_free+0x36>
	__asm__ volatile(
   15504:	f380 8811 	msr	BASEPRI, r0
   15508:	f3bf 8f6f 	isb	sy
}
   1550c:	b003      	add	sp, #12
   1550e:	bd30      	pop	{r4, r5, pc}
		return 0;
   15510:	2000      	movs	r0, #0
   15512:	e7ef      	b.n	154f4 <block_free+0x1e>

00015514 <z_sys_mem_pool_block_free>:
{
   15514:	b5b0      	push	{r4, r5, r7, lr}
   15516:	af00      	add	r7, sp, #0
   15518:	4613      	mov	r3, r2
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1551a:	7a84      	ldrb	r4, [r0, #10]
   1551c:	00a4      	lsls	r4, r4, #2
   1551e:	3407      	adds	r4, #7
   15520:	f404 64ff 	and.w	r4, r4, #2040	; 0x7f8
   15524:	ebad 0d04 	sub.w	sp, sp, r4
   15528:	466a      	mov	r2, sp
	lsizes[0] = p->max_sz;
   1552a:	6844      	ldr	r4, [r0, #4]
   1552c:	6014      	str	r4, [r2, #0]
	for (i = 1; i <= level; i++) {
   1552e:	2501      	movs	r5, #1
   15530:	428d      	cmp	r5, r1
   15532:	d809      	bhi.n	15548 <z_sys_mem_pool_block_free+0x34>
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   15534:	1e6c      	subs	r4, r5, #1
   15536:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   1553a:	08a4      	lsrs	r4, r4, #2
   1553c:	f024 0403 	bic.w	r4, r4, #3
   15540:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
	for (i = 1; i <= level; i++) {
   15544:	3501      	adds	r5, #1
   15546:	e7f3      	b.n	15530 <z_sys_mem_pool_block_free+0x1c>
	block_free(p, level, lsizes, block);
   15548:	f7ff ffc5 	bl	154d6 <block_free>
}
   1554c:	46bd      	mov	sp, r7
   1554e:	bdb0      	pop	{r4, r5, r7, pc}

00015550 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   15550:	4602      	mov	r2, r0
   15552:	b158      	cbz	r0, 1556c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   15554:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   15556:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1555a:	2b01      	cmp	r3, #1
   1555c:	d003      	beq.n	15566 <sys_notify_validate+0x16>
   1555e:	2b03      	cmp	r3, #3
   15560:	d107      	bne.n	15572 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   15562:	6803      	ldr	r3, [r0, #0]
   15564:	b143      	cbz	r3, 15578 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   15566:	2000      	movs	r0, #0
   15568:	6090      	str	r0, [r2, #8]
   1556a:	4770      	bx	lr
		return -EINVAL;
   1556c:	f06f 0015 	mvn.w	r0, #21
   15570:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   15572:	f06f 0015 	mvn.w	r0, #21
   15576:	4770      	bx	lr
			rv = -EINVAL;
   15578:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   1557c:	4770      	bx	lr

0001557e <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1557e:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   15580:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   15582:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   15586:	6081      	str	r1, [r0, #8]
	switch (method) {
   15588:	2a03      	cmp	r2, #3
   1558a:	d103      	bne.n	15594 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1558c:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1558e:	2200      	movs	r2, #0
   15590:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   15592:	4770      	bx	lr
	sys_notify_generic_callback rv = 0;
   15594:	2000      	movs	r0, #0
   15596:	e7fa      	b.n	1558e <sys_notify_finalize+0x10>

00015598 <arch_printk_char_out>:
}
   15598:	2000      	movs	r0, #0
   1559a:	4770      	bx	lr

0001559c <print_hex>:
{
   1559c:	b570      	push	{r4, r5, r6, lr}
   1559e:	b084      	sub	sp, #16
   155a0:	f89d 4020 	ldrb.w	r4, [sp, #32]
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   155a4:	1ee5      	subs	r5, r4, #3
   155a6:	bf18      	it	ne
   155a8:	2501      	movne	r5, #1
   155aa:	2c01      	cmp	r4, #1
   155ac:	d00a      	beq.n	155c4 <print_hex+0x28>
   155ae:	2420      	movs	r4, #32
   155b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   155b2:	9603      	str	r6, [sp, #12]
   155b4:	9402      	str	r4, [sp, #8]
   155b6:	9501      	str	r5, [sp, #4]
   155b8:	2410      	movs	r4, #16
   155ba:	9400      	str	r4, [sp, #0]
   155bc:	f7f7 f8f4 	bl	c7a8 <print_digits>
}
   155c0:	b004      	add	sp, #16
   155c2:	bd70      	pop	{r4, r5, r6, pc}
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   155c4:	2430      	movs	r4, #48	; 0x30
   155c6:	e7f3      	b.n	155b0 <print_hex+0x14>

000155c8 <print_dec>:
{
   155c8:	b570      	push	{r4, r5, r6, lr}
   155ca:	b084      	sub	sp, #16
   155cc:	f89d 4020 	ldrb.w	r4, [sp, #32]
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   155d0:	1ee5      	subs	r5, r4, #3
   155d2:	bf18      	it	ne
   155d4:	2501      	movne	r5, #1
   155d6:	2c01      	cmp	r4, #1
   155d8:	d00a      	beq.n	155f0 <print_dec+0x28>
   155da:	2420      	movs	r4, #32
   155dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   155de:	9603      	str	r6, [sp, #12]
   155e0:	9402      	str	r4, [sp, #8]
   155e2:	9501      	str	r5, [sp, #4]
   155e4:	240a      	movs	r4, #10
   155e6:	9400      	str	r4, [sp, #0]
   155e8:	f7f7 f8de 	bl	c7a8 <print_digits>
}
   155ec:	b004      	add	sp, #16
   155ee:	bd70      	pop	{r4, r5, r6, pc}
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   155f0:	2430      	movs	r4, #48	; 0x30
   155f2:	e7f3      	b.n	155dc <print_dec+0x14>

000155f4 <ok64>:
}
   155f4:	2001      	movs	r0, #1
   155f6:	4770      	bx	lr

000155f8 <negative>:
}
   155f8:	0fc8      	lsrs	r0, r1, #31
   155fa:	4770      	bx	lr

000155fc <str_out>:
{
   155fc:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   155fe:	680c      	ldr	r4, [r1, #0]
   15600:	b154      	cbz	r4, 15618 <str_out+0x1c>
   15602:	688a      	ldr	r2, [r1, #8]
   15604:	684b      	ldr	r3, [r1, #4]
   15606:	429a      	cmp	r2, r3
   15608:	da06      	bge.n	15618 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   1560a:	3b01      	subs	r3, #1
   1560c:	429a      	cmp	r2, r3
   1560e:	d008      	beq.n	15622 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   15610:	1c53      	adds	r3, r2, #1
   15612:	608b      	str	r3, [r1, #8]
   15614:	54a0      	strb	r0, [r4, r2]
   15616:	e002      	b.n	1561e <str_out+0x22>
		ctx->count++;
   15618:	688b      	ldr	r3, [r1, #8]
   1561a:	3301      	adds	r3, #1
   1561c:	608b      	str	r3, [r1, #8]
}
   1561e:	bc10      	pop	{r4}
   15620:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   15622:	1c53      	adds	r3, r2, #1
   15624:	608b      	str	r3, [r1, #8]
   15626:	2300      	movs	r3, #0
   15628:	54a3      	strb	r3, [r4, r2]
   1562a:	e7f8      	b.n	1561e <str_out+0x22>

0001562c <z_vprintk>:
{
   1562c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15630:	b087      	sub	sp, #28
   15632:	4606      	mov	r6, r0
   15634:	460d      	mov	r5, r1
   15636:	4614      	mov	r4, r2
   15638:	9305      	str	r3, [sp, #20]
	char length_mod = 0;
   1563a:	2700      	movs	r7, #0
	int min_width = -1;
   1563c:	f04f 3aff 	mov.w	sl, #4294967295
	enum pad_type padding = PAD_NONE;
   15640:	46bb      	mov	fp, r7
	int might_format = 0; /* 1 if encountered a '%' */
   15642:	46b8      	mov	r8, r7
	while (*fmt) {
   15644:	e002      	b.n	1564c <z_vprintk+0x20>
				out((int)*fmt, ctx);
   15646:	4629      	mov	r1, r5
   15648:	47b0      	blx	r6
		++fmt;
   1564a:	3401      	adds	r4, #1
	while (*fmt) {
   1564c:	7820      	ldrb	r0, [r4, #0]
   1564e:	2800      	cmp	r0, #0
   15650:	f000 8174 	beq.w	1593c <z_vprintk+0x310>
		if (!might_format) {
   15654:	f1b8 0f00 	cmp.w	r8, #0
   15658:	d108      	bne.n	1566c <z_vprintk+0x40>
			if (*fmt != '%') {
   1565a:	2825      	cmp	r0, #37	; 0x25
   1565c:	d1f3      	bne.n	15646 <z_vprintk+0x1a>
				length_mod = 0;
   1565e:	2700      	movs	r7, #0
				min_width = -1;
   15660:	f04f 3aff 	mov.w	sl, #4294967295
				padding = PAD_NONE;
   15664:	46bb      	mov	fp, r7
				might_format = 1;
   15666:	f04f 0801 	mov.w	r8, #1
   1566a:	e7ee      	b.n	1564a <z_vprintk+0x1e>
			switch (*fmt) {
   1566c:	4602      	mov	r2, r0
   1566e:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   15672:	2b55      	cmp	r3, #85	; 0x55
   15674:	f200 8150 	bhi.w	15918 <z_vprintk+0x2ec>
   15678:	e8df f013 	tbh	[pc, r3, lsl #1]
   1567c:	014e0148 	.word	0x014e0148
   15680:	014e014e 	.word	0x014e014e
   15684:	014e014e 	.word	0x014e014e
   15688:	014e014e 	.word	0x014e014e
   1568c:	014e0157 	.word	0x014e0157
   15690:	0056014e 	.word	0x0056014e
   15694:	005d005d 	.word	0x005d005d
   15698:	005d005d 	.word	0x005d005d
   1569c:	005d005d 	.word	0x005d005d
   156a0:	005d005d 	.word	0x005d005d
   156a4:	014e005d 	.word	0x014e005d
   156a8:	014e014e 	.word	0x014e014e
   156ac:	014e014e 	.word	0x014e014e
   156b0:	014e014e 	.word	0x014e014e
   156b4:	014e014e 	.word	0x014e014e
   156b8:	014e014e 	.word	0x014e014e
   156bc:	014e014e 	.word	0x014e014e
   156c0:	014e014e 	.word	0x014e014e
   156c4:	014e014e 	.word	0x014e014e
   156c8:	014e014e 	.word	0x014e014e
   156cc:	014e014e 	.word	0x014e014e
   156d0:	014e014e 	.word	0x014e014e
   156d4:	014e014e 	.word	0x014e014e
   156d8:	014e014e 	.word	0x014e014e
   156dc:	014e014e 	.word	0x014e014e
   156e0:	00ed014e 	.word	0x00ed014e
   156e4:	014e014e 	.word	0x014e014e
   156e8:	014e014e 	.word	0x014e014e
   156ec:	014e014e 	.word	0x014e014e
   156f0:	014e014e 	.word	0x014e014e
   156f4:	014e014e 	.word	0x014e014e
   156f8:	0087013f 	.word	0x0087013f
   156fc:	014e014e 	.word	0x014e014e
   15700:	0070014e 	.word	0x0070014e
   15704:	014e0087 	.word	0x014e0087
   15708:	0070014e 	.word	0x0070014e
   1570c:	014e014e 	.word	0x014e014e
   15710:	00e3014e 	.word	0x00e3014e
   15714:	014e014e 	.word	0x014e014e
   15718:	014e011a 	.word	0x014e011a
   1571c:	014e0087 	.word	0x014e0087
   15720:	00ed014e 	.word	0x00ed014e
   15724:	0070014e 	.word	0x0070014e
				if (min_width < 0 && padding == PAD_NONE) {
   15728:	f1ba 0f00 	cmp.w	sl, #0
   1572c:	da03      	bge.n	15736 <z_vprintk+0x10a>
   1572e:	f1bb 0f00 	cmp.w	fp, #0
   15732:	f000 80fd 	beq.w	15930 <z_vprintk+0x304>
				if (min_width < 0) {
   15736:	f1ba 0f00 	cmp.w	sl, #0
   1573a:	db0c      	blt.n	15756 <z_vprintk+0x12a>
					min_width = 10 * min_width + *fmt - '0';
   1573c:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
   15740:	eb02 0a4a 	add.w	sl, r2, sl, lsl #1
   15744:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
				if (padding == PAD_NONE) {
   15748:	f1bb 0f00 	cmp.w	fp, #0
   1574c:	f47f af7d 	bne.w	1564a <z_vprintk+0x1e>
					padding = PAD_SPACE_BEFORE;
   15750:	f04f 0b02 	mov.w	fp, #2
				goto still_might_format;
   15754:	e779      	b.n	1564a <z_vprintk+0x1e>
					min_width = *fmt - '0';
   15756:	f1a2 0a30 	sub.w	sl, r2, #48	; 0x30
   1575a:	e7f5      	b.n	15748 <z_vprintk+0x11c>
				if (*fmt == 'h' && length_mod == 'h') {
   1575c:	2868      	cmp	r0, #104	; 0x68
   1575e:	d00b      	beq.n	15778 <z_vprintk+0x14c>
				} else if (*fmt == 'l' && length_mod == 'l') {
   15760:	286c      	cmp	r0, #108	; 0x6c
   15762:	d00e      	beq.n	15782 <z_vprintk+0x156>
				} else if (length_mod == 0) {
   15764:	b15f      	cbz	r7, 1577e <z_vprintk+0x152>
					out((int)'%', ctx);
   15766:	4629      	mov	r1, r5
   15768:	2025      	movs	r0, #37	; 0x25
   1576a:	47b0      	blx	r6
					out((int)*fmt, ctx);
   1576c:	4629      	mov	r1, r5
   1576e:	7820      	ldrb	r0, [r4, #0]
   15770:	47b0      	blx	r6
			might_format = 0;
   15772:	f04f 0800 	mov.w	r8, #0
					break;
   15776:	e768      	b.n	1564a <z_vprintk+0x1e>
				if (*fmt == 'h' && length_mod == 'h') {
   15778:	2f68      	cmp	r7, #104	; 0x68
   1577a:	d1f1      	bne.n	15760 <z_vprintk+0x134>
					length_mod = 'H';
   1577c:	2048      	movs	r0, #72	; 0x48
				goto still_might_format;
   1577e:	4607      	mov	r7, r0
   15780:	e763      	b.n	1564a <z_vprintk+0x1e>
				} else if (*fmt == 'l' && length_mod == 'l') {
   15782:	2f6c      	cmp	r7, #108	; 0x6c
   15784:	d1ee      	bne.n	15764 <z_vprintk+0x138>
					length_mod = 'L';
   15786:	204c      	movs	r0, #76	; 0x4c
   15788:	e7f9      	b.n	1577e <z_vprintk+0x152>
				if (length_mod == 'z') {
   1578a:	2f7a      	cmp	r7, #122	; 0x7a
   1578c:	d00d      	beq.n	157aa <z_vprintk+0x17e>
				} else if (length_mod == 'l') {
   1578e:	2f6c      	cmp	r7, #108	; 0x6c
   15790:	d030      	beq.n	157f4 <z_vprintk+0x1c8>
				} else if (length_mod == 'L') {
   15792:	2f4c      	cmp	r7, #76	; 0x4c
   15794:	d036      	beq.n	15804 <z_vprintk+0x1d8>
				} else if (*fmt == 'u') {
   15796:	2875      	cmp	r0, #117	; 0x75
   15798:	d04b      	beq.n	15832 <z_vprintk+0x206>
					d = va_arg(ap, int);
   1579a:	9b05      	ldr	r3, [sp, #20]
   1579c:	1d1a      	adds	r2, r3, #4
   1579e:	9205      	str	r2, [sp, #20]
   157a0:	681b      	ldr	r3, [r3, #0]
   157a2:	4698      	mov	r8, r3
   157a4:	ea4f 79e3 	mov.w	r9, r3, asr #31
   157a8:	e006      	b.n	157b8 <z_vprintk+0x18c>
					d = va_arg(ap, ssize_t);
   157aa:	9b05      	ldr	r3, [sp, #20]
   157ac:	1d1a      	adds	r2, r3, #4
   157ae:	9205      	str	r2, [sp, #20]
   157b0:	681b      	ldr	r3, [r3, #0]
   157b2:	4698      	mov	r8, r3
   157b4:	ea4f 79e3 	mov.w	r9, r3, asr #31
				if (*fmt != 'u' && negative(d)) {
   157b8:	7823      	ldrb	r3, [r4, #0]
   157ba:	2b75      	cmp	r3, #117	; 0x75
   157bc:	d00d      	beq.n	157da <z_vprintk+0x1ae>
   157be:	4640      	mov	r0, r8
   157c0:	4649      	mov	r1, r9
   157c2:	f7ff ff19 	bl	155f8 <negative>
   157c6:	b140      	cbz	r0, 157da <z_vprintk+0x1ae>
					out((int)'-', ctx);
   157c8:	4629      	mov	r1, r5
   157ca:	202d      	movs	r0, #45	; 0x2d
   157cc:	47b0      	blx	r6
					d = -d;
   157ce:	f1d8 0800 	rsbs	r8, r8, #0
   157d2:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
					min_width--;
   157d6:	f10a 3aff 	add.w	sl, sl, #4294967295
				print_dec(out, ctx, d, padding, min_width);
   157da:	f8cd a004 	str.w	sl, [sp, #4]
   157de:	f8cd b000 	str.w	fp, [sp]
   157e2:	4642      	mov	r2, r8
   157e4:	464b      	mov	r3, r9
   157e6:	4629      	mov	r1, r5
   157e8:	4630      	mov	r0, r6
   157ea:	f7ff feed 	bl	155c8 <print_dec>
			might_format = 0;
   157ee:	f04f 0800 	mov.w	r8, #0
				break;
   157f2:	e72a      	b.n	1564a <z_vprintk+0x1e>
					d = va_arg(ap, long);
   157f4:	9b05      	ldr	r3, [sp, #20]
   157f6:	1d1a      	adds	r2, r3, #4
   157f8:	9205      	str	r2, [sp, #20]
   157fa:	681b      	ldr	r3, [r3, #0]
   157fc:	4698      	mov	r8, r3
   157fe:	ea4f 79e3 	mov.w	r9, r3, asr #31
   15802:	e7d9      	b.n	157b8 <z_vprintk+0x18c>
					long long lld = va_arg(ap, long long);
   15804:	9b05      	ldr	r3, [sp, #20]
   15806:	3307      	adds	r3, #7
   15808:	f023 0307 	bic.w	r3, r3, #7
   1580c:	f103 0208 	add.w	r2, r3, #8
   15810:	9205      	str	r2, [sp, #20]
   15812:	681a      	ldr	r2, [r3, #0]
   15814:	685b      	ldr	r3, [r3, #4]
					if (!ok64(out, ctx, lld)) {
   15816:	9203      	str	r2, [sp, #12]
   15818:	9304      	str	r3, [sp, #16]
   1581a:	4629      	mov	r1, r5
   1581c:	4630      	mov	r0, r6
   1581e:	f7ff fee9 	bl	155f4 <ok64>
   15822:	2800      	cmp	r0, #0
   15824:	f000 8087 	beq.w	15936 <z_vprintk+0x30a>
					d = (printk_val_t) lld;
   15828:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1582c:	f8dd 9010 	ldr.w	r9, [sp, #16]
   15830:	e7c2      	b.n	157b8 <z_vprintk+0x18c>
					d = va_arg(ap, unsigned int);
   15832:	9b05      	ldr	r3, [sp, #20]
   15834:	1d1a      	adds	r2, r3, #4
   15836:	9205      	str	r2, [sp, #20]
   15838:	681b      	ldr	r3, [r3, #0]
   1583a:	4698      	mov	r8, r3
   1583c:	f04f 0900 	mov.w	r9, #0
   15840:	e7ba      	b.n	157b8 <z_vprintk+0x18c>
				out('0', ctx);
   15842:	4629      	mov	r1, r5
   15844:	2030      	movs	r0, #48	; 0x30
   15846:	47b0      	blx	r6
				out('x', ctx);
   15848:	4629      	mov	r1, r5
   1584a:	2078      	movs	r0, #120	; 0x78
   1584c:	47b0      	blx	r6
				min_width = sizeof(void *) * 2;
   1584e:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   15852:	f04f 0b01 	mov.w	fp, #1
				if (*fmt == 'p') {
   15856:	7823      	ldrb	r3, [r4, #0]
   15858:	2b70      	cmp	r3, #112	; 0x70
   1585a:	d009      	beq.n	15870 <z_vprintk+0x244>
				} else if (length_mod == 'l') {
   1585c:	2f6c      	cmp	r7, #108	; 0x6c
   1585e:	d017      	beq.n	15890 <z_vprintk+0x264>
				} else if (length_mod == 'L') {
   15860:	2f4c      	cmp	r7, #76	; 0x4c
   15862:	d01b      	beq.n	1589c <z_vprintk+0x270>
					x = va_arg(ap, unsigned int);
   15864:	9b05      	ldr	r3, [sp, #20]
   15866:	1d1a      	adds	r2, r3, #4
   15868:	9205      	str	r2, [sp, #20]
   1586a:	681a      	ldr	r2, [r3, #0]
   1586c:	2300      	movs	r3, #0
   1586e:	e004      	b.n	1587a <z_vprintk+0x24e>
					x = (uintptr_t)va_arg(ap, void *);
   15870:	9b05      	ldr	r3, [sp, #20]
   15872:	1d1a      	adds	r2, r3, #4
   15874:	9205      	str	r2, [sp, #20]
   15876:	681a      	ldr	r2, [r3, #0]
   15878:	2300      	movs	r3, #0
				print_hex(out, ctx, x, padding, min_width);
   1587a:	f8cd a004 	str.w	sl, [sp, #4]
   1587e:	f8cd b000 	str.w	fp, [sp]
   15882:	4629      	mov	r1, r5
   15884:	4630      	mov	r0, r6
   15886:	f7ff fe89 	bl	1559c <print_hex>
			might_format = 0;
   1588a:	f04f 0800 	mov.w	r8, #0
				break;
   1588e:	e6dc      	b.n	1564a <z_vprintk+0x1e>
					x = va_arg(ap, unsigned long);
   15890:	9b05      	ldr	r3, [sp, #20]
   15892:	1d1a      	adds	r2, r3, #4
   15894:	9205      	str	r2, [sp, #20]
   15896:	681a      	ldr	r2, [r3, #0]
   15898:	2300      	movs	r3, #0
   1589a:	e7ee      	b.n	1587a <z_vprintk+0x24e>
					x = va_arg(ap, unsigned long long);
   1589c:	9b05      	ldr	r3, [sp, #20]
   1589e:	3307      	adds	r3, #7
   158a0:	f023 0307 	bic.w	r3, r3, #7
   158a4:	f103 0208 	add.w	r2, r3, #8
   158a8:	9205      	str	r2, [sp, #20]
   158aa:	681a      	ldr	r2, [r3, #0]
   158ac:	685b      	ldr	r3, [r3, #4]
   158ae:	e7e4      	b.n	1587a <z_vprintk+0x24e>
				char *s = va_arg(ap, char *);
   158b0:	9b05      	ldr	r3, [sp, #20]
   158b2:	1d1a      	adds	r2, r3, #4
   158b4:	9205      	str	r2, [sp, #20]
   158b6:	f8d3 9000 	ldr.w	r9, [r3]
   158ba:	46c8      	mov	r8, r9
				while (*s) {
   158bc:	e003      	b.n	158c6 <z_vprintk+0x29a>
					out((int)(*s++), ctx);
   158be:	f108 0801 	add.w	r8, r8, #1
   158c2:	4629      	mov	r1, r5
   158c4:	47b0      	blx	r6
				while (*s) {
   158c6:	f898 0000 	ldrb.w	r0, [r8]
   158ca:	2800      	cmp	r0, #0
   158cc:	d1f7      	bne.n	158be <z_vprintk+0x292>
				if (padding == PAD_SPACE_AFTER) {
   158ce:	f1bb 0f03 	cmp.w	fp, #3
   158d2:	d002      	beq.n	158da <z_vprintk+0x2ae>
			might_format = 0;
   158d4:	f04f 0800 	mov.w	r8, #0
   158d8:	e6b7      	b.n	1564a <z_vprintk+0x1e>
					int remaining = min_width - (s - start);
   158da:	eba8 0309 	sub.w	r3, r8, r9
   158de:	ebaa 0303 	sub.w	r3, sl, r3
					while (remaining-- > 0) {
   158e2:	e003      	b.n	158ec <z_vprintk+0x2c0>
						out(' ', ctx);
   158e4:	4629      	mov	r1, r5
   158e6:	2020      	movs	r0, #32
   158e8:	47b0      	blx	r6
					while (remaining-- > 0) {
   158ea:	4643      	mov	r3, r8
   158ec:	f103 38ff 	add.w	r8, r3, #4294967295
   158f0:	2b00      	cmp	r3, #0
   158f2:	dcf7      	bgt.n	158e4 <z_vprintk+0x2b8>
			might_format = 0;
   158f4:	f04f 0800 	mov.w	r8, #0
   158f8:	e6a7      	b.n	1564a <z_vprintk+0x1e>
				int c = va_arg(ap, int);
   158fa:	9b05      	ldr	r3, [sp, #20]
   158fc:	1d1a      	adds	r2, r3, #4
   158fe:	9205      	str	r2, [sp, #20]
				out(c, ctx);
   15900:	4629      	mov	r1, r5
   15902:	6818      	ldr	r0, [r3, #0]
   15904:	47b0      	blx	r6
			might_format = 0;
   15906:	f04f 0800 	mov.w	r8, #0
				break;
   1590a:	e69e      	b.n	1564a <z_vprintk+0x1e>
				out((int)'%', ctx);
   1590c:	4629      	mov	r1, r5
   1590e:	2025      	movs	r0, #37	; 0x25
   15910:	47b0      	blx	r6
			might_format = 0;
   15912:	f04f 0800 	mov.w	r8, #0
				break;
   15916:	e698      	b.n	1564a <z_vprintk+0x1e>
				out((int)'%', ctx);
   15918:	4629      	mov	r1, r5
   1591a:	2025      	movs	r0, #37	; 0x25
   1591c:	47b0      	blx	r6
				out((int)*fmt, ctx);
   1591e:	4629      	mov	r1, r5
   15920:	7820      	ldrb	r0, [r4, #0]
   15922:	47b0      	blx	r6
			might_format = 0;
   15924:	f04f 0800 	mov.w	r8, #0
				break;
   15928:	e68f      	b.n	1564a <z_vprintk+0x1e>
			switch (*fmt) {
   1592a:	f04f 0b03 	mov.w	fp, #3
   1592e:	e68c      	b.n	1564a <z_vprintk+0x1e>
					padding = PAD_ZERO_BEFORE;
   15930:	f04f 0b01 	mov.w	fp, #1
   15934:	e689      	b.n	1564a <z_vprintk+0x1e>
			might_format = 0;
   15936:	f04f 0800 	mov.w	r8, #0
   1593a:	e686      	b.n	1564a <z_vprintk+0x1e>
}
   1593c:	b007      	add	sp, #28
   1593e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015942 <printk>:
{
   15942:	b40f      	push	{r0, r1, r2, r3}
   15944:	b500      	push	{lr}
   15946:	b083      	sub	sp, #12
   15948:	a904      	add	r1, sp, #16
   1594a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1594e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   15950:	f7f6 ffa6 	bl	c8a0 <vprintk>
}
   15954:	b003      	add	sp, #12
   15956:	f85d eb04 	ldr.w	lr, [sp], #4
   1595a:	b004      	add	sp, #16
   1595c:	4770      	bx	lr

0001595e <snprintk>:
{
   1595e:	b40c      	push	{r2, r3}
   15960:	b500      	push	{lr}
   15962:	b083      	sub	sp, #12
   15964:	ab04      	add	r3, sp, #16
   15966:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1596a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1596c:	f7f6 ffa8 	bl	c8c0 <vsnprintk>
}
   15970:	b003      	add	sp, #12
   15972:	f85d eb04 	ldr.w	lr, [sp], #4
   15976:	b002      	add	sp, #8
   15978:	4770      	bx	lr

0001597a <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   1597a:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1597e:	8b01      	ldrh	r1, [r0, #24]
   15980:	f021 0107 	bic.w	r1, r1, #7
   15984:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   15986:	8301      	strh	r1, [r0, #24]
}
   15988:	4770      	bx	lr

0001598a <notify_monitors>:
{
   1598a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1598e:	4606      	mov	r6, r0
   15990:	460f      	mov	r7, r1
   15992:	4690      	mov	r8, r2
	return list->head;
   15994:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   15996:	b119      	cbz	r1, 159a0 <notify_monitors+0x16>
   15998:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1599a:	b131      	cbz	r1, 159aa <notify_monitors+0x20>
	return node->next;
   1599c:	680c      	ldr	r4, [r1, #0]
   1599e:	e004      	b.n	159aa <notify_monitors+0x20>
   159a0:	460c      	mov	r4, r1
   159a2:	e002      	b.n	159aa <notify_monitors+0x20>
   159a4:	4623      	mov	r3, r4
   159a6:	4621      	mov	r1, r4
   159a8:	461c      	mov	r4, r3
   159aa:	b159      	cbz	r1, 159c4 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   159ac:	684d      	ldr	r5, [r1, #4]
   159ae:	4643      	mov	r3, r8
   159b0:	463a      	mov	r2, r7
   159b2:	4630      	mov	r0, r6
   159b4:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   159b6:	2c00      	cmp	r4, #0
   159b8:	d0f4      	beq.n	159a4 <notify_monitors+0x1a>
   159ba:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   159bc:	2c00      	cmp	r4, #0
   159be:	d0f2      	beq.n	159a6 <notify_monitors+0x1c>
	return node->next;
   159c0:	6823      	ldr	r3, [r4, #0]
   159c2:	e7f0      	b.n	159a6 <notify_monitors+0x1c>
}
   159c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000159c8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   159c8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   159ca:	f013 0307 	ands.w	r3, r3, #7
   159ce:	d103      	bne.n	159d8 <process_recheck+0x10>
	return list->head;
   159d0:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   159d2:	b10a      	cbz	r2, 159d8 <process_recheck+0x10>
		evt = EVT_START;
   159d4:	2003      	movs	r0, #3
   159d6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   159d8:	2b02      	cmp	r3, #2
   159da:	d003      	beq.n	159e4 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   159dc:	2b01      	cmp	r3, #1
   159de:	d006      	beq.n	159ee <process_recheck+0x26>
	int evt = EVT_NOP;
   159e0:	2000      	movs	r0, #0
   159e2:	4770      	bx	lr
		   && (mgr->refs == 0)) {
   159e4:	8b42      	ldrh	r2, [r0, #26]
   159e6:	2a00      	cmp	r2, #0
   159e8:	d1f8      	bne.n	159dc <process_recheck+0x14>
		evt = EVT_STOP;
   159ea:	2004      	movs	r0, #4
   159ec:	4770      	bx	lr
   159ee:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   159f0:	b10b      	cbz	r3, 159f6 <process_recheck+0x2e>
		evt = EVT_RESET;
   159f2:	2005      	movs	r0, #5
}
   159f4:	4770      	bx	lr
	int evt = EVT_NOP;
   159f6:	2000      	movs	r0, #0
   159f8:	4770      	bx	lr

000159fa <process_complete>:
{
   159fa:	b538      	push	{r3, r4, r5, lr}
   159fc:	4604      	mov	r4, r0
   159fe:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15a00:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   15a02:	2a00      	cmp	r2, #0
   15a04:	db07      	blt.n	15a16 <process_complete+0x1c>
   15a06:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   15a0a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   15a0c:	2a01      	cmp	r2, #1
   15a0e:	d90e      	bls.n	15a2e <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   15a10:	2b04      	cmp	r3, #4
   15a12:	d032      	beq.n	15a7a <process_complete+0x80>
}
   15a14:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   15a16:	e9d0 0100 	ldrd	r0, r1, [r0]
   15a1a:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   15a1e:	2300      	movs	r3, #0
   15a20:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   15a22:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   15a24:	2101      	movs	r1, #1
   15a26:	4620      	mov	r0, r4
   15a28:	f7ff ffa7 	bl	1597a <set_state>
   15a2c:	e7f2      	b.n	15a14 <process_complete+0x1a>
		*clients = mgr->clients;
   15a2e:	e9d0 0100 	ldrd	r0, r1, [r0]
   15a32:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   15a36:	2200      	movs	r2, #0
   15a38:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   15a3a:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   15a3c:	2b06      	cmp	r3, #6
   15a3e:	d117      	bne.n	15a70 <process_complete+0x76>
	return list->head;
   15a40:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   15a42:	b13b      	cbz	r3, 15a54 <process_complete+0x5a>
				mgr->refs += 1U;
   15a44:	8b62      	ldrh	r2, [r4, #26]
   15a46:	3201      	adds	r2, #1
   15a48:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   15a4a:	2b00      	cmp	r3, #0
   15a4c:	d0f9      	beq.n	15a42 <process_complete+0x48>
	return node->next;
   15a4e:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   15a50:	2b00      	cmp	r3, #0
   15a52:	d1f6      	bne.n	15a42 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   15a54:	2102      	movs	r1, #2
   15a56:	4620      	mov	r0, r4
   15a58:	f7ff ff8f 	bl	1597a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   15a5c:	4620      	mov	r0, r4
   15a5e:	f7ff ffb3 	bl	159c8 <process_recheck>
   15a62:	2800      	cmp	r0, #0
   15a64:	d0d6      	beq.n	15a14 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   15a66:	8b23      	ldrh	r3, [r4, #24]
   15a68:	f043 0320 	orr.w	r3, r3, #32
   15a6c:	8323      	strh	r3, [r4, #24]
   15a6e:	e7d1      	b.n	15a14 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   15a70:	2100      	movs	r1, #0
   15a72:	4620      	mov	r0, r4
   15a74:	f7ff ff81 	bl	1597a <set_state>
   15a78:	e7f0      	b.n	15a5c <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   15a7a:	2100      	movs	r1, #0
   15a7c:	f7ff ff7d 	bl	1597a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   15a80:	4620      	mov	r0, r4
   15a82:	f7ff ffa1 	bl	159c8 <process_recheck>
   15a86:	2800      	cmp	r0, #0
   15a88:	d0c4      	beq.n	15a14 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   15a8a:	8b23      	ldrh	r3, [r4, #24]
   15a8c:	f043 0320 	orr.w	r3, r3, #32
   15a90:	8323      	strh	r3, [r4, #24]
}
   15a92:	e7bf      	b.n	15a14 <process_complete+0x1a>

00015a94 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   15a94:	b158      	cbz	r0, 15aae <validate_args+0x1a>
{
   15a96:	b510      	push	{r4, lr}
   15a98:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   15a9a:	b159      	cbz	r1, 15ab4 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   15a9c:	1d08      	adds	r0, r1, #4
   15a9e:	f7ff fd57 	bl	15550 <sys_notify_validate>
	if ((rv == 0)
   15aa2:	b918      	cbnz	r0, 15aac <validate_args+0x18>
	    && ((cli->notify.flags
   15aa4:	68a3      	ldr	r3, [r4, #8]
   15aa6:	f033 0303 	bics.w	r3, r3, #3
   15aaa:	d106      	bne.n	15aba <validate_args+0x26>
}
   15aac:	bd10      	pop	{r4, pc}
		return -EINVAL;
   15aae:	f06f 0015 	mvn.w	r0, #21
}
   15ab2:	4770      	bx	lr
		return -EINVAL;
   15ab4:	f06f 0015 	mvn.w	r0, #21
   15ab8:	e7f8      	b.n	15aac <validate_args+0x18>
		rv = -EINVAL;
   15aba:	f06f 0015 	mvn.w	r0, #21
   15abe:	e7f5      	b.n	15aac <validate_args+0x18>

00015ac0 <notify_one>:
{
   15ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ac4:	4607      	mov	r7, r0
   15ac6:	460c      	mov	r4, r1
   15ac8:	4616      	mov	r6, r2
   15aca:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   15acc:	4619      	mov	r1, r3
   15ace:	1d20      	adds	r0, r4, #4
   15ad0:	f7ff fd55 	bl	1557e <sys_notify_finalize>
	if (cb) {
   15ad4:	b128      	cbz	r0, 15ae2 <notify_one+0x22>
   15ad6:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   15ad8:	462b      	mov	r3, r5
   15ada:	4632      	mov	r2, r6
   15adc:	4621      	mov	r1, r4
   15ade:	4638      	mov	r0, r7
   15ae0:	47c0      	blx	r8
}
   15ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015ae6 <notify_all>:
{
   15ae6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15aea:	4681      	mov	r9, r0
   15aec:	460c      	mov	r4, r1
   15aee:	4690      	mov	r8, r2
   15af0:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   15af2:	e005      	b.n	15b00 <notify_all+0x1a>
	list->tail = node;
   15af4:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   15af6:	463b      	mov	r3, r7
   15af8:	4642      	mov	r2, r8
   15afa:	4648      	mov	r0, r9
   15afc:	f7ff ffe0 	bl	15ac0 <notify_one>
	return list->head;
   15b00:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   15b02:	b129      	cbz	r1, 15b10 <notify_all+0x2a>
	return node->next;
   15b04:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   15b06:	6025      	str	r5, [r4, #0]
	return list->tail;
   15b08:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15b0a:	428e      	cmp	r6, r1
   15b0c:	d1f3      	bne.n	15af6 <notify_all+0x10>
   15b0e:	e7f1      	b.n	15af4 <notify_all+0xe>
}
   15b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015b14 <transition_complete>:
{
   15b14:	b510      	push	{r4, lr}
	__asm__ volatile(
   15b16:	f04f 0420 	mov.w	r4, #32
   15b1a:	f3ef 8211 	mrs	r2, BASEPRI
   15b1e:	f384 8811 	msr	BASEPRI, r4
   15b22:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   15b26:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   15b28:	2101      	movs	r1, #1
   15b2a:	f7f6 fedf 	bl	c8ec <process_event>
}
   15b2e:	bd10      	pop	{r4, pc}

00015b30 <onoff_manager_init>:
	if ((mgr == NULL)
   15b30:	4603      	mov	r3, r0
   15b32:	b168      	cbz	r0, 15b50 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   15b34:	b179      	cbz	r1, 15b56 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   15b36:	680a      	ldr	r2, [r1, #0]
   15b38:	b182      	cbz	r2, 15b5c <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   15b3a:	684a      	ldr	r2, [r1, #4]
   15b3c:	b18a      	cbz	r2, 15b62 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   15b3e:	2000      	movs	r0, #0
   15b40:	6018      	str	r0, [r3, #0]
   15b42:	6058      	str	r0, [r3, #4]
   15b44:	6098      	str	r0, [r3, #8]
   15b46:	60d8      	str	r0, [r3, #12]
   15b48:	6158      	str	r0, [r3, #20]
   15b4a:	6198      	str	r0, [r3, #24]
   15b4c:	6119      	str	r1, [r3, #16]
	return 0;
   15b4e:	4770      	bx	lr
		return -EINVAL;
   15b50:	f06f 0015 	mvn.w	r0, #21
   15b54:	4770      	bx	lr
   15b56:	f06f 0015 	mvn.w	r0, #21
   15b5a:	4770      	bx	lr
   15b5c:	f06f 0015 	mvn.w	r0, #21
   15b60:	4770      	bx	lr
   15b62:	f06f 0015 	mvn.w	r0, #21
}
   15b66:	4770      	bx	lr

00015b68 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   15b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b6a:	4604      	mov	r4, r0
   15b6c:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   15b6e:	f7ff ff91 	bl	15a94 <validate_args>

	if (rv < 0) {
   15b72:	1e06      	subs	r6, r0, #0
   15b74:	db37      	blt.n	15be6 <onoff_request+0x7e>
   15b76:	f04f 0320 	mov.w	r3, #32
   15b7a:	f3ef 8211 	mrs	r2, BASEPRI
   15b7e:	f383 8811 	msr	BASEPRI, r3
   15b82:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15b86:	8b25      	ldrh	r5, [r4, #24]
   15b88:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   15b8c:	8b63      	ldrh	r3, [r4, #26]
   15b8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15b92:	428b      	cmp	r3, r1
   15b94:	d02f      	beq.n	15bf6 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   15b96:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   15b98:	2d02      	cmp	r5, #2
   15b9a:	d00c      	beq.n	15bb6 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   15b9c:	b18d      	cbz	r5, 15bc2 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   15b9e:	2d04      	cmp	r5, #4
   15ba0:	d00f      	beq.n	15bc2 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   15ba2:	2d06      	cmp	r5, #6
   15ba4:	d00d      	beq.n	15bc2 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   15ba6:	2d05      	cmp	r5, #5
   15ba8:	d01f      	beq.n	15bea <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   15baa:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   15bae:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   15bb0:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   15bb2:	4608      	mov	r0, r1
   15bb4:	e00a      	b.n	15bcc <onoff_request+0x64>
		mgr->refs += 1U;
   15bb6:	3301      	adds	r3, #1
   15bb8:	8363      	strh	r3, [r4, #26]
		notify = true;
   15bba:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   15bbc:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   15bbe:	4618      	mov	r0, r3
   15bc0:	e004      	b.n	15bcc <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   15bc2:	fab5 f385 	clz	r3, r5
   15bc6:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   15bc8:	2100      	movs	r1, #0
		add_client = true;
   15bca:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   15bcc:	b128      	cbz	r0, 15bda <onoff_request+0x72>
	parent->next = child;
   15bce:	2000      	movs	r0, #0
   15bd0:	6038      	str	r0, [r7, #0]
	return list->tail;
   15bd2:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   15bd4:	b1a8      	cbz	r0, 15c02 <onoff_request+0x9a>
	parent->next = child;
   15bd6:	6007      	str	r7, [r0, #0]
	list->tail = node;
   15bd8:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   15bda:	b9ab      	cbnz	r3, 15c08 <onoff_request+0xa0>
	__asm__ volatile(
   15bdc:	f382 8811 	msr	BASEPRI, r2
   15be0:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   15be4:	b9a9      	cbnz	r1, 15c12 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   15be6:	4630      	mov	r0, r6
   15be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   15bea:	f06f 0622 	mvn.w	r6, #34	; 0x22
	bool notify = false;            /* do client notification */
   15bee:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   15bf0:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   15bf2:	4608      	mov	r0, r1
   15bf4:	e7ea      	b.n	15bcc <onoff_request+0x64>
		rv = -EAGAIN;
   15bf6:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   15bfa:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   15bfc:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   15bfe:	4608      	mov	r0, r1
   15c00:	e7e4      	b.n	15bcc <onoff_request+0x64>
   15c02:	6067      	str	r7, [r4, #4]
	list->head = node;
   15c04:	6027      	str	r7, [r4, #0]
}
   15c06:	e7e8      	b.n	15bda <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   15c08:	2102      	movs	r1, #2
   15c0a:	4620      	mov	r0, r4
   15c0c:	f7f6 fe6e 	bl	c8ec <process_event>
   15c10:	e7e9      	b.n	15be6 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   15c12:	2300      	movs	r3, #0
   15c14:	462a      	mov	r2, r5
   15c16:	4639      	mov	r1, r7
   15c18:	4620      	mov	r0, r4
   15c1a:	f7ff ff51 	bl	15ac0 <notify_one>
   15c1e:	e7e2      	b.n	15be6 <onoff_request+0x7e>

00015c20 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   15c20:	b508      	push	{r3, lr}
   15c22:	4604      	mov	r4, r0
   15c24:	4608      	mov	r0, r1
   15c26:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   15c28:	461a      	mov	r2, r3
   15c2a:	47a0      	blx	r4
	return z_impl_k_current_get();
   15c2c:	f7ff f8da 	bl	14de4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   15c30:	f7f9 fc98 	bl	f564 <z_impl_k_thread_abort>

00015c34 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   15c34:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->len);
   15c36:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   15c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15c3c:	d303      	bcc.n	15c46 <chunk_mem+0x12>
   15c3e:	2308      	movs	r3, #8
   15c40:	4419      	add	r1, r3

	CHECK(!(((size_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   15c42:	4408      	add	r0, r1
   15c44:	4770      	bx	lr
   15c46:	2304      	movs	r3, #4
   15c48:	e7fa      	b.n	15c40 <chunk_mem+0xc>

00015c4a <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   15c4a:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   15c4c:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->len);
   15c50:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   15c52:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   15c56:	d317      	bcc.n	15c88 <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
   15c58:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   15c5a:	4299      	cmp	r1, r3
   15c5c:	d016      	beq.n	15c8c <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
   15c5e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   15c62:	d320      	bcc.n	15ca6 <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
   15c64:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   15c66:	3204      	adds	r2, #4
   15c68:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   15c6c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   15c70:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   15c74:	d319      	bcc.n	15caa <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
   15c76:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
   15c78:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->len);
   15c7c:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   15c7e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   15c82:	d314      	bcc.n	15cae <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
   15c84:	6099      	str	r1, [r3, #8]
   15c86:	e00c      	b.n	15ca2 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
   15c88:	88eb      	ldrh	r3, [r5, #6]
   15c8a:	e7e6      	b.n	15c5a <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
   15c8c:	2301      	movs	r3, #1
   15c8e:	fa03 f102 	lsl.w	r1, r3, r2
   15c92:	68c3      	ldr	r3, [r0, #12]
   15c94:	ea23 0301 	bic.w	r3, r3, r1
   15c98:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   15c9a:	3204      	adds	r2, #4
   15c9c:	2300      	movs	r3, #0
   15c9e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   15ca2:	bc30      	pop	{r4, r5}
   15ca4:	4770      	bx	lr
   15ca6:	88a9      	ldrh	r1, [r5, #4]
   15ca8:	e7dd      	b.n	15c66 <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
   15caa:	80d3      	strh	r3, [r2, #6]
   15cac:	e7e4      	b.n	15c78 <free_list_remove_bidx+0x2e>
   15cae:	8099      	strh	r1, [r3, #4]
   15cb0:	e7f7      	b.n	15ca2 <free_list_remove_bidx+0x58>

00015cb2 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   15cb2:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0) {
   15cb4:	1d13      	adds	r3, r2, #4
   15cb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   15cba:	b9d3      	cbnz	r3, 15cf2 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   15cbc:	2301      	movs	r3, #1
   15cbe:	fa03 f402 	lsl.w	r4, r3, r2
   15cc2:	68c3      	ldr	r3, [r0, #12]
   15cc4:	4323      	orrs	r3, r4
   15cc6:	60c3      	str	r3, [r0, #12]
		b->next = c;
   15cc8:	3204      	adds	r2, #4
   15cca:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   15cce:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->len);
   15cd2:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   15cd4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   15cd8:	d307      	bcc.n	15cea <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
   15cda:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->len);
   15cdc:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   15cde:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   15ce2:	d304      	bcc.n	15cee <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   15ce4:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   15ce6:	bc70      	pop	{r4, r5, r6}
   15ce8:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
   15cea:	8099      	strh	r1, [r3, #4]
   15cec:	e7f6      	b.n	15cdc <free_list_add_bidx+0x2a>
   15cee:	80d9      	strh	r1, [r3, #6]
   15cf0:	e7f9      	b.n	15ce6 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   15cf2:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->len);
   15cf6:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   15cf8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   15cfc:	d318      	bcc.n	15d30 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   15cfe:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   15d00:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   15d04:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   15d08:	d314      	bcc.n	15d34 <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   15d0a:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->len);
   15d0c:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   15d0e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   15d12:	d311      	bcc.n	15d38 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   15d14:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   15d16:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->len);
   15d1a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   15d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15d20:	d30c      	bcc.n	15d3c <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   15d22:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->len);
   15d24:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   15d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15d2a:	d309      	bcc.n	15d40 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   15d2c:	60a1      	str	r1, [r4, #8]
   15d2e:	e7da      	b.n	15ce6 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   15d30:	88a2      	ldrh	r2, [r4, #4]
   15d32:	e7e5      	b.n	15d00 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   15d34:	80aa      	strh	r2, [r5, #4]
   15d36:	e7e9      	b.n	15d0c <free_list_add_bidx+0x5a>
   15d38:	80eb      	strh	r3, [r5, #6]
   15d3a:	e7ec      	b.n	15d16 <free_list_add_bidx+0x64>
   15d3c:	80d1      	strh	r1, [r2, #6]
   15d3e:	e7f1      	b.n	15d24 <free_list_add_bidx+0x72>
   15d40:	80a1      	strh	r1, [r4, #4]
   15d42:	e7d0      	b.n	15ce6 <free_list_add_bidx+0x34>

00015d44 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   15d44:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   15d46:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->len);
   15d4a:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   15d4c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   15d50:	d325      	bcc.n	15d9e <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
   15d52:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	size_t sz0 = chunk_size(h, lc);
	size_t lsz = rc - lc;
   15d54:	1a53      	subs	r3, r2, r1
	size_t rsz = sz0 - lsz;
   15d56:	1a89      	subs	r1, r1, r2
   15d58:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   15d5c:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   15d5e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   15d62:	d31e      	bcc.n	15da2 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
   15d64:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   15d66:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
   15d68:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->len);
   15d6c:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   15d6e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   15d72:	d318      	bcc.n	15da6 <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
   15d74:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->len);
   15d76:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   15d78:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   15d7c:	d315      	bcc.n	15daa <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
   15d7e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->len);
   15d82:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   15d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15d88:	d312      	bcc.n	15db0 <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
   15d8a:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
   15d8c:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   15d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15d94:	d30e      	bcc.n	15db4 <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
   15d96:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   15d9a:	bc70      	pop	{r4, r5, r6}
   15d9c:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   15d9e:	8866      	ldrh	r6, [r4, #2]
   15da0:	e7d8      	b.n	15d54 <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
   15da2:	8066      	strh	r6, [r4, #2]
   15da4:	e7df      	b.n	15d66 <split_chunks+0x22>
   15da6:	8065      	strh	r5, [r4, #2]
   15da8:	e7e5      	b.n	15d76 <split_chunks+0x32>
   15daa:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   15dae:	e7e8      	b.n	15d82 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
   15db0:	8864      	ldrh	r4, [r4, #2]
   15db2:	e7eb      	b.n	15d8c <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
   15db4:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
   15db8:	e7ef      	b.n	15d9a <split_chunks+0x56>

00015dba <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   15dba:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   15dbc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->len);
   15dc0:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   15dc2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   15dc6:	d31c      	bcc.n	15e02 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
   15dc8:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   15dca:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
   15dcc:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
   15dd0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   15dd4:	d317      	bcc.n	15e06 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
   15dd6:	686e      	ldr	r6, [r5, #4]
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   15dd8:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   15ddc:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   15dde:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   15de2:	d312      	bcc.n	15e0a <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
   15de4:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->len);
   15de6:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
   15de8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   15dec:	d30f      	bcc.n	15e0e <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
   15dee:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
   15df0:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   15df4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   15df8:	d30b      	bcc.n	15e12 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
   15dfa:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   15dfe:	bc70      	pop	{r4, r5, r6}
   15e00:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   15e02:	884b      	ldrh	r3, [r1, #2]
   15e04:	e7e1      	b.n	15dca <merge_chunks+0x10>
   15e06:	886e      	ldrh	r6, [r5, #2]
   15e08:	e7e6      	b.n	15dd8 <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
   15e0a:	804e      	strh	r6, [r1, #2]
   15e0c:	e7eb      	b.n	15de6 <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
   15e0e:	886c      	ldrh	r4, [r5, #2]
   15e10:	e7ee      	b.n	15df0 <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
   15e12:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   15e16:	e7f2      	b.n	15dfe <merge_chunks+0x44>

00015e18 <mem_to_chunkid>:
	return big_heap_chunks(h->len);
   15e18:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   15e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15e1e:	d305      	bcc.n	15e2c <mem_to_chunkid+0x14>
   15e20:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   15e22:	1ac9      	subs	r1, r1, r3
   15e24:	1a08      	subs	r0, r1, r0
   15e26:	d403      	bmi.n	15e30 <mem_to_chunkid+0x18>
}
   15e28:	10c0      	asrs	r0, r0, #3
   15e2a:	4770      	bx	lr
   15e2c:	2304      	movs	r3, #4
   15e2e:	e7f8      	b.n	15e22 <mem_to_chunkid+0xa>
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   15e30:	3007      	adds	r0, #7
   15e32:	e7f9      	b.n	15e28 <mem_to_chunkid+0x10>

00015e34 <free_list_remove>:
{
   15e34:	b508      	push	{r3, lr}
	return big_heap_chunks(h->len);
   15e36:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1;
   15e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15e3c:	d307      	bcc.n	15e4e <free_list_remove+0x1a>
	void *cmem = &buf[c];
   15e3e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   15e42:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   15e44:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
   15e46:	2a01      	cmp	r2, #1
   15e48:	d002      	beq.n	15e50 <free_list_remove+0x1c>
   15e4a:	2200      	movs	r2, #0
   15e4c:	e000      	b.n	15e50 <free_list_remove+0x1c>
   15e4e:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   15e50:	b9a2      	cbnz	r2, 15e7c <free_list_remove+0x48>
	void *cmem = &buf[c];
   15e52:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   15e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15e5a:	d310      	bcc.n	15e7e <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
   15e5c:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   15e5e:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   15e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15e64:	d30d      	bcc.n	15e82 <free_list_remove+0x4e>
   15e66:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   15e68:	3308      	adds	r3, #8
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   15e6a:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   15e6e:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   15e70:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   15e74:	f1c2 021f 	rsb	r2, r2, #31
   15e78:	f7ff fee7 	bl	15c4a <free_list_remove_bidx>
}
   15e7c:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   15e7e:	8852      	ldrh	r2, [r2, #2]
   15e80:	e7ed      	b.n	15e5e <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
   15e82:	2304      	movs	r3, #4
   15e84:	e7f0      	b.n	15e68 <free_list_remove+0x34>

00015e86 <free_list_add>:
{
   15e86:	b508      	push	{r3, lr}
	return big_heap_chunks(h->len);
   15e88:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1;
   15e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15e8e:	d307      	bcc.n	15ea0 <free_list_add+0x1a>
	void *cmem = &buf[c];
   15e90:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   15e94:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   15e96:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
   15e98:	2a01      	cmp	r2, #1
   15e9a:	d002      	beq.n	15ea2 <free_list_add+0x1c>
   15e9c:	2200      	movs	r2, #0
   15e9e:	e000      	b.n	15ea2 <free_list_add+0x1c>
   15ea0:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   15ea2:	b9a2      	cbnz	r2, 15ece <free_list_add+0x48>
	void *cmem = &buf[c];
   15ea4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   15ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15eac:	d310      	bcc.n	15ed0 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   15eae:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   15eb0:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   15eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15eb6:	d30d      	bcc.n	15ed4 <free_list_add+0x4e>
   15eb8:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   15eba:	3308      	adds	r3, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   15ebc:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   15ec0:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   15ec2:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   15ec6:	f1c2 021f 	rsb	r2, r2, #31
   15eca:	f7ff fef2 	bl	15cb2 <free_list_add_bidx>
}
   15ece:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   15ed0:	8852      	ldrh	r2, [r2, #2]
   15ed2:	e7ed      	b.n	15eb0 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   15ed4:	2304      	movs	r3, #4
   15ed6:	e7f0      	b.n	15eba <free_list_add+0x34>

00015ed8 <free_chunk>:
{
   15ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15eda:	4604      	mov	r4, r0
   15edc:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   15ede:	00ce      	lsls	r6, r1, #3
   15ee0:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->len);
   15ee4:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   15ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15eea:	d31f      	bcc.n	15f2c <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
   15eec:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
   15eee:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
   15ef2:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   15ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15efa:	d319      	bcc.n	15f30 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
   15efc:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
   15efe:	f013 0f01 	tst.w	r3, #1
   15f02:	d017      	beq.n	15f34 <free_chunk+0x5c>
	return big_heap_chunks(h->len);
   15f04:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   15f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15f0a:	d324      	bcc.n	15f56 <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
   15f0c:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   15f0e:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
   15f10:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   15f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15f18:	d31f      	bcc.n	15f5a <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
   15f1a:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
   15f1c:	f013 0f01 	tst.w	r3, #1
   15f20:	d01d      	beq.n	15f5e <free_chunk+0x86>
	free_list_add(h, c);
   15f22:	4629      	mov	r1, r5
   15f24:	4620      	mov	r0, r4
   15f26:	f7ff ffae 	bl	15e86 <free_list_add>
}
   15f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
   15f2c:	8879      	ldrh	r1, [r7, #2]
   15f2e:	e7de      	b.n	15eee <free_chunk+0x16>
   15f30:	8853      	ldrh	r3, [r2, #2]
   15f32:	e7e4      	b.n	15efe <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
   15f34:	4620      	mov	r0, r4
   15f36:	f7ff ff7d 	bl	15e34 <free_list_remove>
	return big_heap_chunks(h->len);
   15f3a:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   15f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15f40:	d307      	bcc.n	15f52 <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
   15f42:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
   15f44:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   15f48:	4629      	mov	r1, r5
   15f4a:	4620      	mov	r0, r4
   15f4c:	f7ff ff35 	bl	15dba <merge_chunks>
   15f50:	e7d8      	b.n	15f04 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
   15f52:	887a      	ldrh	r2, [r7, #2]
   15f54:	e7f6      	b.n	15f44 <free_chunk+0x6c>
   15f56:	5ba1      	ldrh	r1, [r4, r6]
   15f58:	e7d9      	b.n	15f0e <free_chunk+0x36>
   15f5a:	8853      	ldrh	r3, [r2, #2]
   15f5c:	e7de      	b.n	15f1c <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
   15f5e:	4620      	mov	r0, r4
   15f60:	f7ff ff68 	bl	15e34 <free_list_remove>
	return big_heap_chunks(h->len);
   15f64:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   15f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15f6a:	d30c      	bcc.n	15f86 <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
   15f6c:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   15f6e:	462a      	mov	r2, r5
   15f70:	1a69      	subs	r1, r5, r1
   15f72:	4620      	mov	r0, r4
   15f74:	f7ff ff21 	bl	15dba <merge_chunks>
	return big_heap_chunks(h->len);
   15f78:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   15f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15f7e:	d304      	bcc.n	15f8a <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
   15f80:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   15f82:	1aed      	subs	r5, r5, r3
   15f84:	e7cd      	b.n	15f22 <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
   15f86:	5ba1      	ldrh	r1, [r4, r6]
   15f88:	e7f1      	b.n	15f6e <free_chunk+0x96>
   15f8a:	5ba3      	ldrh	r3, [r4, r6]
   15f8c:	e7f9      	b.n	15f82 <free_chunk+0xaa>

00015f8e <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   15f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->len);
   15f90:	6886      	ldr	r6, [r0, #8]
	return big_heap(h) ? 8 : 4;
   15f92:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   15f96:	d319      	bcc.n	15fcc <alloc_chunk+0x3e>
   15f98:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   15f9a:	3308      	adds	r3, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   15f9c:	eba1 04d3 	sub.w	r4, r1, r3, lsr #3
   15fa0:	3401      	adds	r4, #1
	return 31 - __builtin_clz(usable_sz);
   15fa2:	fab4 f484 	clz	r4, r4
   15fa6:	f1c4 021f 	rsb	r2, r4, #31
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   15faa:	eba6 03d3 	sub.w	r3, r6, r3, lsr #3
   15fae:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   15fb0:	fab3 f383 	clz	r3, r3
   15fb4:	f1c3 031f 	rsb	r3, r3, #31
	int bi = bucket_idx(h, sz);
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   15fb8:	4293      	cmp	r3, r2
   15fba:	db3f      	blt.n	1603c <alloc_chunk+0xae>
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   15fbc:	1d13      	adds	r3, r2, #4
   15fbe:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
   15fc2:	f1bc 0f00 	cmp.w	ip, #0
   15fc6:	d024      	beq.n	16012 <alloc_chunk+0x84>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   15fc8:	2303      	movs	r3, #3
   15fca:	e010      	b.n	15fee <alloc_chunk+0x60>
	return big_heap(h) ? 8 : 4;
   15fcc:	2304      	movs	r3, #4
   15fce:	e7e4      	b.n	15f9a <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
   15fd0:	f8b7 e002 	ldrh.w	lr, [r7, #2]
   15fd4:	e015      	b.n	16002 <alloc_chunk+0x74>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
   15fd6:	4629      	mov	r1, r5
   15fd8:	f7ff fe37 	bl	15c4a <free_list_remove_bidx>
				return c;
   15fdc:	e021      	b.n	16022 <alloc_chunk+0x94>
   15fde:	88fd      	ldrh	r5, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
   15fe0:	1d17      	adds	r7, r2, #4
   15fe2:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   15fe6:	3b01      	subs	r3, #1
   15fe8:	d013      	beq.n	16012 <alloc_chunk+0x84>
   15fea:	45ac      	cmp	ip, r5
   15fec:	d011      	beq.n	16012 <alloc_chunk+0x84>
			chunkid_t c = b->next;
   15fee:	1d15      	adds	r5, r2, #4
   15ff0:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
	void *cmem = &buf[c];
   15ff4:	eb00 07c5 	add.w	r7, r0, r5, lsl #3
	if (big_heap(h)) {
   15ff8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   15ffc:	d3e8      	bcc.n	15fd0 <alloc_chunk+0x42>
		return ((uint32_t *)cmem)[f];
   15ffe:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
   16002:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
   16006:	d9e6      	bls.n	15fd6 <alloc_chunk+0x48>
	if (big_heap(h)) {
   16008:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1600c:	d3e7      	bcc.n	15fde <alloc_chunk+0x50>
		return ((uint32_t *)cmem)[f];
   1600e:	68fd      	ldr	r5, [r7, #12]
   16010:	e7e6      	b.n	15fe0 <alloc_chunk+0x52>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   16012:	68c5      	ldr	r5, [r0, #12]
   16014:	f1c4 0320 	rsb	r3, r4, #32
   16018:	2401      	movs	r4, #1
   1601a:	409c      	lsls	r4, r3
   1601c:	4264      	negs	r4, r4

	if ((bmask & h->avail_buckets) != 0) {
   1601e:	4025      	ands	r5, r4
   16020:	d101      	bne.n	16026 <alloc_chunk+0x98>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   16022:	4628      	mov	r0, r5
   16024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   16026:	fa95 f2a5 	rbit	r2, r5
   1602a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1602e:	1d13      	adds	r3, r2, #4
   16030:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   16034:	4629      	mov	r1, r5
   16036:	f7ff fe08 	bl	15c4a <free_list_remove_bidx>
		return c;
   1603a:	e7f2      	b.n	16022 <alloc_chunk+0x94>
		return 0;
   1603c:	2500      	movs	r5, #0
   1603e:	e7f0      	b.n	16022 <alloc_chunk+0x94>

00016040 <sys_heap_free>:
	if (mem == NULL) {
   16040:	b1c1      	cbz	r1, 16074 <sys_heap_free+0x34>
{
   16042:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   16044:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   16046:	4620      	mov	r0, r4
   16048:	f7ff fee6 	bl	15e18 <mem_to_chunkid>
   1604c:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   1604e:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->len);
   16052:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   16054:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   16058:	d307      	bcc.n	1606a <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   1605a:	685a      	ldr	r2, [r3, #4]
   1605c:	f022 0201 	bic.w	r2, r2, #1
   16060:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
   16062:	4620      	mov	r0, r4
   16064:	f7ff ff38 	bl	15ed8 <free_chunk>
}
   16068:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   1606a:	885a      	ldrh	r2, [r3, #2]
   1606c:	f022 0201 	bic.w	r2, r2, #1
   16070:	805a      	strh	r2, [r3, #2]
   16072:	e7f6      	b.n	16062 <sys_heap_free+0x22>
   16074:	4770      	bx	lr

00016076 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
	if (bytes == 0) {
   16076:	2900      	cmp	r1, #0
   16078:	d03b      	beq.n	160f2 <sys_heap_alloc+0x7c>
{
   1607a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1607c:	460c      	mov	r4, r1
		return NULL;
	}

	struct z_heap *h = heap->heap;
   1607e:	6805      	ldr	r5, [r0, #0]
	return big_heap_chunks(h->len);
   16080:	68ab      	ldr	r3, [r5, #8]
	return big_heap(h) ? 8 : 4;
   16082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   16086:	d320      	bcc.n	160ca <sys_heap_alloc+0x54>
   16088:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   1608a:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1608c:	3407      	adds	r4, #7
   1608e:	08e4      	lsrs	r4, r4, #3
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   16090:	4621      	mov	r1, r4
   16092:	4628      	mov	r0, r5
   16094:	f7ff ff7b 	bl	15f8e <alloc_chunk>
	if (c == 0) {
   16098:	4607      	mov	r7, r0
   1609a:	b360      	cbz	r0, 160f6 <sys_heap_alloc+0x80>
	void *cmem = &buf[c];
   1609c:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->len);
   160a0:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   160a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   160a6:	d312      	bcc.n	160ce <sys_heap_alloc+0x58>
		return ((uint32_t *)cmem)[f];
   160a8:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   160aa:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   160ae:	d310      	bcc.n	160d2 <sys_heap_alloc+0x5c>
	return big_heap_chunks(h->len);
   160b0:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   160b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   160b6:	d317      	bcc.n	160e8 <sys_heap_alloc+0x72>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   160b8:	6873      	ldr	r3, [r6, #4]
   160ba:	f043 0301 	orr.w	r3, r3, #1
   160be:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
   160c0:	4639      	mov	r1, r7
   160c2:	4628      	mov	r0, r5
   160c4:	f7ff fdb6 	bl	15c34 <chunk_mem>
}
   160c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
   160ca:	2304      	movs	r3, #4
   160cc:	e7dd      	b.n	1608a <sys_heap_alloc+0x14>
		return ((uint16_t *)cmem)[f];
   160ce:	8873      	ldrh	r3, [r6, #2]
   160d0:	e7eb      	b.n	160aa <sys_heap_alloc+0x34>
		split_chunks(h, c, c + chunk_sz);
   160d2:	443c      	add	r4, r7
   160d4:	4622      	mov	r2, r4
   160d6:	4639      	mov	r1, r7
   160d8:	4628      	mov	r0, r5
   160da:	f7ff fe33 	bl	15d44 <split_chunks>
		free_list_add(h, c + chunk_sz);
   160de:	4621      	mov	r1, r4
   160e0:	4628      	mov	r0, r5
   160e2:	f7ff fed0 	bl	15e86 <free_list_add>
   160e6:	e7e3      	b.n	160b0 <sys_heap_alloc+0x3a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   160e8:	8873      	ldrh	r3, [r6, #2]
   160ea:	f043 0301 	orr.w	r3, r3, #1
   160ee:	8073      	strh	r3, [r6, #2]
   160f0:	e7e6      	b.n	160c0 <sys_heap_alloc+0x4a>
		return NULL;
   160f2:	2000      	movs	r0, #0
}
   160f4:	4770      	bx	lr
		return NULL;
   160f6:	2000      	movs	r0, #0
   160f8:	e7e6      	b.n	160c8 <sys_heap_alloc+0x52>

000160fa <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   160fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160fc:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   160fe:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   16102:	d32e      	bcc.n	16162 <sys_heap_init+0x68>
   16104:	2508      	movs	r5, #8
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   16106:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   16108:	1dc8      	adds	r0, r1, #7
   1610a:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1610e:	440d      	add	r5, r1
   16110:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   16114:	1a2d      	subs	r5, r5, r0
   16116:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   16118:	4606      	mov	r6, r0
	heap->heap = h;
   1611a:	6018      	str	r0, [r3, #0]
	h->chunk0_hdr_area = 0;
   1611c:	2200      	movs	r2, #0
   1611e:	2300      	movs	r3, #0
   16120:	e9c0 2300 	strd	r2, r3, [r0]
	h->len = buf_sz;
   16124:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   16126:	2300      	movs	r3, #0
   16128:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   1612a:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1612e:	d31a      	bcc.n	16166 <sys_heap_init+0x6c>
   16130:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   16132:	3308      	adds	r3, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   16134:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   16138:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   1613a:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1613e:	f1c3 0c20 	rsb	ip, r3, #32
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   16142:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   16146:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   16148:	f103 0e07 	add.w	lr, r3, #7
   1614c:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   16150:	2300      	movs	r3, #0
   16152:	4563      	cmp	r3, ip
   16154:	da09      	bge.n	1616a <sys_heap_init+0x70>
		h->buckets[i].next = 0;
   16156:	1d1a      	adds	r2, r3, #4
   16158:	2400      	movs	r4, #0
   1615a:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1615e:	3301      	adds	r3, #1
   16160:	e7f7      	b.n	16152 <sys_heap_init+0x58>
	return big_heap_bytes(size) ? 8 : 4;
   16162:	2504      	movs	r5, #4
   16164:	e7cf      	b.n	16106 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   16166:	2304      	movs	r3, #4
   16168:	e7e3      	b.n	16132 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1616a:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   1616c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   16170:	d32e      	bcc.n	161d0 <sys_heap_init+0xd6>
		((uint32_t *)cmem)[f] = val;
   16172:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   16174:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   16178:	d32c      	bcc.n	161d4 <sys_heap_init+0xda>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   1617a:	6843      	ldr	r3, [r0, #4]
   1617c:	f043 0301 	orr.w	r3, r3, #1
   16180:	6043      	str	r3, [r0, #4]
	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   16182:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16184:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   16186:	f02e 0307 	bic.w	r3, lr, #7
   1618a:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   1618c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   16190:	d325      	bcc.n	161de <sys_heap_init+0xe4>
		((uint32_t *)cmem)[f] = val;
   16192:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->len);
   16194:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   16196:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1619a:	d322      	bcc.n	161e2 <sys_heap_init+0xe8>
		((uint32_t *)cmem)[f] = val;
   1619c:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   1619e:	f025 0307 	bic.w	r3, r5, #7
   161a2:	4405      	add	r5, r0
	return big_heap_chunks(h->len);
   161a4:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   161a6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   161aa:	d31c      	bcc.n	161e6 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   161ac:	2400      	movs	r4, #0
   161ae:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->len);
   161b0:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   161b2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   161b6:	d319      	bcc.n	161ec <sys_heap_init+0xf2>
		((uint32_t *)cmem)[f] = val;
   161b8:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->len);
   161ba:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   161bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   161c0:	d316      	bcc.n	161f0 <sys_heap_init+0xf6>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   161c2:	686b      	ldr	r3, [r5, #4]
   161c4:	f043 0301 	orr.w	r3, r3, #1
   161c8:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);

	free_list_add(h, chunk0_size);
   161ca:	f7ff fe5c 	bl	15e86 <free_list_add>
}
   161ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   161d0:	8043      	strh	r3, [r0, #2]
   161d2:	e7cf      	b.n	16174 <sys_heap_init+0x7a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   161d4:	8843      	ldrh	r3, [r0, #2]
   161d6:	f043 0301 	orr.w	r3, r3, #1
   161da:	8043      	strh	r3, [r0, #2]
   161dc:	e7d1      	b.n	16182 <sys_heap_init+0x88>
		((uint16_t *)cmem)[f] = val;
   161de:	8066      	strh	r6, [r4, #2]
   161e0:	e7d8      	b.n	16194 <sys_heap_init+0x9a>
   161e2:	52c1      	strh	r1, [r0, r3]
   161e4:	e7db      	b.n	1619e <sys_heap_init+0xa4>
   161e6:	2400      	movs	r4, #0
   161e8:	806c      	strh	r4, [r5, #2]
   161ea:	e7e1      	b.n	161b0 <sys_heap_init+0xb6>
   161ec:	52c2      	strh	r2, [r0, r3]
   161ee:	e7e4      	b.n	161ba <sys_heap_init+0xc0>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   161f0:	886b      	ldrh	r3, [r5, #2]
   161f2:	f043 0301 	orr.w	r3, r3, #1
   161f6:	806b      	strh	r3, [r5, #2]
   161f8:	e7e7      	b.n	161ca <sys_heap_init+0xd0>

000161fa <_uc>:
{
   161fa:	e004      	b.n	16206 <_uc+0xc>
			*buf += 'A' - 'a';
   161fc:	3a20      	subs	r2, #32
   161fe:	7002      	strb	r2, [r0, #0]
	} while (*buf++);
   16200:	f810 3b01 	ldrb.w	r3, [r0], #1
   16204:	b133      	cbz	r3, 16214 <_uc+0x1a>
		if (*buf >= 'a' && *buf <= 'z') {
   16206:	7802      	ldrb	r2, [r0, #0]
   16208:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   1620c:	b2db      	uxtb	r3, r3
   1620e:	2b19      	cmp	r3, #25
   16210:	d8f6      	bhi.n	16200 <_uc+0x6>
   16212:	e7f3      	b.n	161fc <_uc+0x2>
}
   16214:	4770      	bx	lr

00016216 <_to_x>:
{
   16216:	b4f0      	push	{r4, r5, r6, r7}
   16218:	4606      	mov	r6, r0
   1621a:	4604      	mov	r4, r0
   1621c:	e008      	b.n	16230 <_to_x+0x1a>
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1621e:	2300      	movs	r3, #0
   16220:	4625      	mov	r5, r4
   16222:	4403      	add	r3, r0
   16224:	3330      	adds	r3, #48	; 0x30
   16226:	f805 3b01 	strb.w	r3, [r5], #1
	} while (n);
   1622a:	4297      	cmp	r7, r2
   1622c:	d30a      	bcc.n	16244 <_to_x+0x2e>
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1622e:	462c      	mov	r4, r5
		unsigned int d = n % base;
   16230:	fbb1 f3f2 	udiv	r3, r1, r2
   16234:	fb02 1013 	mls	r0, r2, r3, r1
		n /= base;
   16238:	460f      	mov	r7, r1
   1623a:	4619      	mov	r1, r3
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1623c:	2809      	cmp	r0, #9
   1623e:	d9ee      	bls.n	1621e <_to_x+0x8>
   16240:	2327      	movs	r3, #39	; 0x27
   16242:	e7ed      	b.n	16220 <_to_x+0xa>
	*buf = 0;
   16244:	2300      	movs	r3, #0
   16246:	702b      	strb	r3, [r5, #0]
	len = buf - start;
   16248:	1ba8      	subs	r0, r5, r6
	for (buf--; buf > start; buf--, start++) {
   1624a:	e005      	b.n	16258 <_to_x+0x42>
		char tmp = *buf;
   1624c:	7823      	ldrb	r3, [r4, #0]
		*buf = *start;
   1624e:	7832      	ldrb	r2, [r6, #0]
   16250:	f804 2901 	strb.w	r2, [r4], #-1
		*start = tmp;
   16254:	f806 3b01 	strb.w	r3, [r6], #1
	for (buf--; buf > start; buf--, start++) {
   16258:	42b4      	cmp	r4, r6
   1625a:	d8f7      	bhi.n	1624c <_to_x+0x36>
}
   1625c:	bcf0      	pop	{r4, r5, r6, r7}
   1625e:	4770      	bx	lr

00016260 <_to_hex>:
{
   16260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16262:	4605      	mov	r5, r0
   16264:	461f      	mov	r7, r3
	if (alt_form) {
   16266:	b17a      	cbz	r2, 16288 <_to_hex+0x28>
		*buf++ = '0';
   16268:	4604      	mov	r4, r0
   1626a:	2330      	movs	r3, #48	; 0x30
   1626c:	f804 3b02 	strb.w	r3, [r4], #2
		*buf++ = 'x';
   16270:	2378      	movs	r3, #120	; 0x78
   16272:	7043      	strb	r3, [r0, #1]
	len = _to_x(buf, value, 16);
   16274:	2210      	movs	r2, #16
   16276:	4620      	mov	r0, r4
   16278:	f7ff ffcd 	bl	16216 <_to_x>
   1627c:	4606      	mov	r6, r0
	if (prefix == 'X') {
   1627e:	2f58      	cmp	r7, #88	; 0x58
   16280:	d004      	beq.n	1628c <_to_hex+0x2c>
	return len + (buf - buf0);
   16282:	1b64      	subs	r4, r4, r5
}
   16284:	19a0      	adds	r0, r4, r6
   16286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16288:	4604      	mov	r4, r0
   1628a:	e7f3      	b.n	16274 <_to_hex+0x14>
		_uc(buf0);
   1628c:	4628      	mov	r0, r5
   1628e:	f7ff ffb4 	bl	161fa <_uc>
   16292:	e7f6      	b.n	16282 <_to_hex+0x22>

00016294 <_to_octal>:
{
   16294:	4603      	mov	r3, r0
	if (alt_form) {
   16296:	b11a      	cbz	r2, 162a0 <_to_octal+0xc>
		*buf++ = '0';
   16298:	2230      	movs	r2, #48	; 0x30
   1629a:	f800 2b01 	strb.w	r2, [r0], #1
		if (!value) {
   1629e:	b131      	cbz	r1, 162ae <_to_octal+0x1a>
{
   162a0:	b510      	push	{r4, lr}
	return (buf - buf0) + _to_x(buf, value, 8);
   162a2:	1ac4      	subs	r4, r0, r3
   162a4:	2208      	movs	r2, #8
   162a6:	f7ff ffb6 	bl	16216 <_to_x>
   162aa:	4420      	add	r0, r4
}
   162ac:	bd10      	pop	{r4, pc}
			*buf++ = 0;
   162ae:	2200      	movs	r2, #0
   162b0:	705a      	strb	r2, [r3, #1]
			return 1;
   162b2:	2001      	movs	r0, #1
}
   162b4:	4770      	bx	lr

000162b6 <_to_udec>:
{
   162b6:	b508      	push	{r3, lr}
	return _to_x(buf, value, 10);
   162b8:	220a      	movs	r2, #10
   162ba:	f7ff ffac 	bl	16216 <_to_x>
}
   162be:	bd08      	pop	{r3, pc}

000162c0 <_to_dec>:
{
   162c0:	b538      	push	{r3, r4, r5, lr}
   162c2:	4605      	mov	r5, r0
	if (value < 0) {
   162c4:	2900      	cmp	r1, #0
   162c6:	db05      	blt.n	162d4 <_to_dec+0x14>
	} else if (fplus) {
   162c8:	b17a      	cbz	r2, 162ea <_to_dec+0x2a>
		*buf++ = '+';
   162ca:	4604      	mov	r4, r0
   162cc:	232b      	movs	r3, #43	; 0x2b
   162ce:	f804 3b01 	strb.w	r3, [r4], #1
   162d2:	e004      	b.n	162de <_to_dec+0x1e>
		*buf++ = '-';
   162d4:	4604      	mov	r4, r0
   162d6:	232d      	movs	r3, #45	; 0x2d
   162d8:	f804 3b01 	strb.w	r3, [r4], #1
		value = -value;
   162dc:	4249      	negs	r1, r1
	return (buf + _to_udec(buf, value)) - start;
   162de:	4620      	mov	r0, r4
   162e0:	f7ff ffe9 	bl	162b6 <_to_udec>
   162e4:	4420      	add	r0, r4
}
   162e6:	1b40      	subs	r0, r0, r5
   162e8:	bd38      	pop	{r3, r4, r5, pc}
	} else if (fspace) {
   162ea:	b123      	cbz	r3, 162f6 <_to_dec+0x36>
		*buf++ = ' ';
   162ec:	4604      	mov	r4, r0
   162ee:	2320      	movs	r3, #32
   162f0:	f804 3b01 	strb.w	r3, [r4], #1
   162f4:	e7f3      	b.n	162de <_to_dec+0x1e>
   162f6:	4604      	mov	r4, r0
   162f8:	e7f1      	b.n	162de <_to_dec+0x1e>

000162fa <_rlrshift>:
{
   162fa:	b470      	push	{r4, r5, r6}
	*v = (*v & 1) + (*v >> 1);
   162fc:	6806      	ldr	r6, [r0, #0]
   162fe:	6845      	ldr	r5, [r0, #4]
   16300:	2300      	movs	r3, #0
   16302:	4619      	mov	r1, r3
   16304:	f006 0301 	and.w	r3, r6, #1
   16308:	0872      	lsrs	r2, r6, #1
   1630a:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1630e:	086c      	lsrs	r4, r5, #1
   16310:	189b      	adds	r3, r3, r2
   16312:	eb44 0101 	adc.w	r1, r4, r1
   16316:	6003      	str	r3, [r0, #0]
   16318:	6041      	str	r1, [r0, #4]
}
   1631a:	bc70      	pop	{r4, r5, r6}
   1631c:	4770      	bx	lr

0001631e <_get_digit>:
	if (*digit_count > 0) {
   1631e:	680b      	ldr	r3, [r1, #0]
   16320:	2b00      	cmp	r3, #0
   16322:	dd16      	ble.n	16352 <_get_digit+0x34>
{
   16324:	b430      	push	{r4, r5}
   16326:	4604      	mov	r4, r0
		*digit_count -= 1;
   16328:	3b01      	subs	r3, #1
   1632a:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1632c:	6801      	ldr	r1, [r0, #0]
   1632e:	6840      	ldr	r0, [r0, #4]
   16330:	0085      	lsls	r5, r0, #2
   16332:	008b      	lsls	r3, r1, #2
   16334:	ea45 7291 	orr.w	r2, r5, r1, lsr #30
   16338:	185b      	adds	r3, r3, r1
   1633a:	eb40 0202 	adc.w	r2, r0, r2
   1633e:	18db      	adds	r3, r3, r3
   16340:	4152      	adcs	r2, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   16342:	0f10      	lsrs	r0, r2, #28
   16344:	3030      	adds	r0, #48	; 0x30
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   16346:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   1634a:	6023      	str	r3, [r4, #0]
   1634c:	6062      	str	r2, [r4, #4]
}
   1634e:	bc30      	pop	{r4, r5}
   16350:	4770      	bx	lr
		rval = '0';
   16352:	2030      	movs	r0, #48	; 0x30
}
   16354:	4770      	bx	lr

00016356 <_atoi>:
{
   16356:	b410      	push	{r4}
   16358:	4604      	mov	r4, r0
	const char *p = *sptr - 1;
   1635a:	6802      	ldr	r2, [r0, #0]
   1635c:	3a01      	subs	r2, #1
	int i = 0;
   1635e:	2000      	movs	r0, #0
	while (isdigit((int)*p)) {
   16360:	7813      	ldrb	r3, [r2, #0]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   16362:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   16366:	2909      	cmp	r1, #9
   16368:	d806      	bhi.n	16378 <_atoi+0x22>
		i = 10 * i + *p++ - '0';
   1636a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1636e:	3201      	adds	r2, #1
   16370:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   16374:	3830      	subs	r0, #48	; 0x30
   16376:	e7f3      	b.n	16360 <_atoi+0xa>
	*sptr = p;
   16378:	6022      	str	r2, [r4, #0]
}
   1637a:	bc10      	pop	{r4}
   1637c:	4770      	bx	lr

0001637e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1637e:	4770      	bx	lr

00016380 <z_platform_init>:

void z_platform_init(void)
{
   16380:	b508      	push	{r3, lr}
	SystemInit();
   16382:	f001 facc 	bl	1791e <SystemInit>
}
   16386:	bd08      	pop	{r3, pc}

00016388 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   16388:	2300      	movs	r3, #0
   1638a:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   1638c:	6003      	str	r3, [r0, #0]
}
   1638e:	4770      	bx	lr

00016390 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   16390:	6803      	ldr	r3, [r0, #0]
   16392:	b12b      	cbz	r3, 163a0 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   16394:	6843      	ldr	r3, [r0, #4]
   16396:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   16398:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1639a:	2300      	movs	r3, #0
   1639c:	600b      	str	r3, [r1, #0]
}
   1639e:	4770      	bx	lr
		list->head = msg;
   163a0:	6001      	str	r1, [r0, #0]
   163a2:	e7f9      	b.n	16398 <log_list_add_tail+0x8>

000163a4 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   163a4:	6800      	ldr	r0, [r0, #0]
   163a6:	4770      	bx	lr

000163a8 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   163a8:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   163aa:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   163ac:	b108      	cbz	r0, 163b2 <log_list_head_get+0xa>
		list->head = list->head->next;
   163ae:	6802      	ldr	r2, [r0, #0]
   163b0:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   163b2:	4770      	bx	lr

000163b4 <dummy_timestamp>:
}
   163b4:	2000      	movs	r0, #0
   163b6:	4770      	bx	lr

000163b8 <msg_filter_check>:
}
   163b8:	2001      	movs	r0, #1
   163ba:	4770      	bx	lr

000163bc <k_cycle_get_32_wrapper>:
{
   163bc:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   163be:	f7f8 fb4b 	bl	ea58 <z_timer_cycle_get_32>
}
   163c2:	bd08      	pop	{r3, pc}

000163c4 <z_log_get_s_mask>:
{
   163c4:	b470      	push	{r4, r5, r6}
   163c6:	4603      	mov	r3, r0
	uint32_t mask = 0;
   163c8:	2000      	movs	r0, #0
	uint32_t arg = 0;
   163ca:	4605      	mov	r5, r0
	bool arm = false;
   163cc:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   163ce:	e001      	b.n	163d4 <z_log_get_s_mask+0x10>
			arm = !arm;
   163d0:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   163d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   163d8:	b19a      	cbz	r2, 16402 <z_log_get_s_mask+0x3e>
   163da:	428d      	cmp	r5, r1
   163dc:	d211      	bcs.n	16402 <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   163de:	2a25      	cmp	r2, #37	; 0x25
   163e0:	d0f6      	beq.n	163d0 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   163e2:	2c00      	cmp	r4, #0
   163e4:	d0f6      	beq.n	163d4 <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   163e6:	f042 0620 	orr.w	r6, r2, #32
   163ea:	3e61      	subs	r6, #97	; 0x61
   163ec:	2e19      	cmp	r6, #25
   163ee:	d8f1      	bhi.n	163d4 <z_log_get_s_mask+0x10>
			if (curr == 's') {
   163f0:	2a73      	cmp	r2, #115	; 0x73
   163f2:	d002      	beq.n	163fa <z_log_get_s_mask+0x36>
			arg++;
   163f4:	3501      	adds	r5, #1
			arm = false;
   163f6:	2400      	movs	r4, #0
   163f8:	e7ec      	b.n	163d4 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   163fa:	2201      	movs	r2, #1
   163fc:	40aa      	lsls	r2, r5
   163fe:	4310      	orrs	r0, r2
   16400:	e7f8      	b.n	163f4 <z_log_get_s_mask+0x30>
}
   16402:	bc70      	pop	{r4, r5, r6}
   16404:	4770      	bx	lr

00016406 <block_on_alloc>:
}
   16406:	2000      	movs	r0, #0
   16408:	4770      	bx	lr

0001640a <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1640a:	2901      	cmp	r1, #1
   1640c:	d906      	bls.n	1641c <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   1640e:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   16410:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   16412:	2906      	cmp	r1, #6
   16414:	d907      	bls.n	16426 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   16416:	3907      	subs	r1, #7
		cont = cont->next;
   16418:	681b      	ldr	r3, [r3, #0]
   1641a:	e7fa      	b.n	16412 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   1641c:	3104      	adds	r1, #4
   1641e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   16422:	6888      	ldr	r0, [r1, #8]
   16424:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   16426:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1642a:	6848      	ldr	r0, [r1, #4]
}
   1642c:	4770      	bx	lr

0001642e <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   1642e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16432:	460d      	mov	r5, r1
   16434:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
   16436:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   16438:	2a03      	cmp	r2, #3
   1643a:	d917      	bls.n	1646c <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
   1643c:	2208      	movs	r2, #8
   1643e:	3018      	adds	r0, #24
   16440:	f000 fdae 	bl	16fa0 <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   16444:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   16446:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   16448:	b1b4      	cbz	r4, 16478 <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1644a:	46a0      	mov	r8, r4
   1644c:	2c07      	cmp	r4, #7
   1644e:	bf28      	it	cs
   16450:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   16454:	ea4f 0788 	mov.w	r7, r8, lsl #2
   16458:	463a      	mov	r2, r7
   1645a:	4629      	mov	r1, r5
   1645c:	1d30      	adds	r0, r6, #4
   1645e:	f000 fd9f 	bl	16fa0 <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   16462:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   16466:	443d      	add	r5, r7
		cont = cont->next;
   16468:	6836      	ldr	r6, [r6, #0]
   1646a:	e7ed      	b.n	16448 <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
   1646c:	0092      	lsls	r2, r2, #2
   1646e:	3014      	adds	r0, #20
   16470:	f000 fd96 	bl	16fa0 <memcpy>
		nargs  = 0U;
   16474:	2400      	movs	r4, #0
   16476:	e7e7      	b.n	16448 <copy_args_to_msg+0x1a>
	}
}
   16478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001647c <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1647c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16480:	461c      	mov	r4, r3
   16482:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   16486:	8903      	ldrh	r3, [r0, #8]
   16488:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1648c:	42a3      	cmp	r3, r4
   1648e:	d91f      	bls.n	164d0 <log_msg_hexdump_data_op+0x54>
   16490:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   16492:	6811      	ldr	r1, [r2, #0]
   16494:	4421      	add	r1, r4
   16496:	4299      	cmp	r1, r3
   16498:	d901      	bls.n	1649e <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   1649a:	1b19      	subs	r1, r3, r4
   1649c:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   1649e:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   164a0:	2b0c      	cmp	r3, #12
   164a2:	d919      	bls.n	164d8 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   164a4:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   164a8:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   164aa:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   164ac:	42a3      	cmp	r3, r4
   164ae:	d91e      	bls.n	164ee <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   164b0:	42bb      	cmp	r3, r7
   164b2:	bf28      	it	cs
   164b4:	463b      	movcs	r3, r7
   164b6:	461d      	mov	r5, r3

		if (put_op) {
   164b8:	f1b9 0f00 	cmp.w	r9, #0
   164bc:	d010      	beq.n	164e0 <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
   164be:	461a      	mov	r2, r3
   164c0:	4641      	mov	r1, r8
   164c2:	eb0c 0004 	add.w	r0, ip, r4
   164c6:	f000 fd6b 	bl	16fa0 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   164ca:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   164cc:	44a8      	add	r8, r5
   164ce:	e021      	b.n	16514 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   164d0:	2300      	movs	r3, #0
   164d2:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   164d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   164d8:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   164dc:	2600      	movs	r6, #0
   164de:	e7e5      	b.n	164ac <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
   164e0:	461a      	mov	r2, r3
   164e2:	eb0c 0104 	add.w	r1, ip, r4
   164e6:	4640      	mov	r0, r8
   164e8:	f000 fd5a 	bl	16fa0 <memcpy>
   164ec:	e7ed      	b.n	164ca <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   164ee:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   164f0:	b91e      	cbnz	r6, 164fa <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   164f2:	6946      	ldr	r6, [r0, #20]
   164f4:	e001      	b.n	164fa <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   164f6:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   164f8:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   164fa:	2c1b      	cmp	r4, #27
   164fc:	d8fb      	bhi.n	164f6 <log_msg_hexdump_data_op+0x7a>
   164fe:	e009      	b.n	16514 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   16500:	1931      	adds	r1, r6, r4
   16502:	462a      	mov	r2, r5
   16504:	3104      	adds	r1, #4
   16506:	4640      	mov	r0, r8
   16508:	f000 fd4a 	bl	16fa0 <memcpy>
		cont = cont->next;
   1650c:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   1650e:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   16510:	44a8      	add	r8, r5
		offset = 0;
   16512:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   16514:	2f00      	cmp	r7, #0
   16516:	d0dd      	beq.n	164d4 <log_msg_hexdump_data_op+0x58>
   16518:	2e00      	cmp	r6, #0
   1651a:	d0db      	beq.n	164d4 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1651c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   16520:	42bd      	cmp	r5, r7
   16522:	bf28      	it	cs
   16524:	463d      	movcs	r5, r7
		if (put_op) {
   16526:	f1b9 0f00 	cmp.w	r9, #0
   1652a:	d0e9      	beq.n	16500 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   1652c:	1930      	adds	r0, r6, r4
   1652e:	462a      	mov	r2, r5
   16530:	4641      	mov	r1, r8
   16532:	3004      	adds	r0, #4
   16534:	f000 fd34 	bl	16fa0 <memcpy>
   16538:	e7e8      	b.n	1650c <log_msg_hexdump_data_op+0x90>

0001653a <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   1653a:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1653c:	e8d0 3fef 	ldaex	r3, [r0]
   16540:	3301      	adds	r3, #1
   16542:	e8c0 3fe2 	stlex	r2, r3, [r0]
   16546:	2a00      	cmp	r2, #0
   16548:	d1f8      	bne.n	1653c <log_msg_get+0x2>
}
   1654a:	4770      	bx	lr

0001654c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1654c:	7a40      	ldrb	r0, [r0, #9]
}
   1654e:	0900      	lsrs	r0, r0, #4
   16550:	4770      	bx	lr

00016552 <log_msg_arg_get>:
{
   16552:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   16554:	7a43      	ldrb	r3, [r0, #9]
   16556:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1655a:	d20a      	bcs.n	16572 <log_msg_arg_get+0x20>
   1655c:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1655e:	2a03      	cmp	r2, #3
   16560:	d804      	bhi.n	1656c <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   16562:	3104      	adds	r1, #4
   16564:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   16568:	6840      	ldr	r0, [r0, #4]
   1656a:	e003      	b.n	16574 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   1656c:	f7ff ff4d 	bl	1640a <cont_arg_get>
   16570:	e000      	b.n	16574 <log_msg_arg_get+0x22>
		return 0;
   16572:	2000      	movs	r0, #0
}
   16574:	bd08      	pop	{r3, pc}

00016576 <log_msg_str_get>:
}
   16576:	6900      	ldr	r0, [r0, #16]
   16578:	4770      	bx	lr

0001657a <log_msg_put>:
{
   1657a:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   1657c:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1657e:	e8d3 2fef 	ldaex	r2, [r3]
   16582:	3a01      	subs	r2, #1
   16584:	e8c3 2fe1 	stlex	r1, r2, [r3]
   16588:	2900      	cmp	r1, #0
   1658a:	d1f8      	bne.n	1657e <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1658c:	6843      	ldr	r3, [r0, #4]
   1658e:	b103      	cbz	r3, 16592 <log_msg_put+0x18>
}
   16590:	bd08      	pop	{r3, pc}
		msg_free(msg);
   16592:	f7f7 fd81 	bl	e098 <msg_free>
}
   16596:	e7fb      	b.n	16590 <log_msg_put+0x16>

00016598 <msg_alloc>:
{
   16598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1659a:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1659c:	f7f7 fd60 	bl	e060 <log_msg_chunk_alloc>
	if (msg != NULL) {
   165a0:	4607      	mov	r7, r0
   165a2:	b140      	cbz	r0, 165b6 <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   165a4:	2301      	movs	r3, #1
   165a6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   165a8:	2200      	movs	r2, #0
   165aa:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   165ac:	f04f 0300 	mov.w	r3, #0
   165b0:	f362 0300 	bfi	r3, r2, #0, #1
   165b4:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   165b6:	b1f7      	cbz	r7, 165f6 <msg_alloc+0x5e>
   165b8:	2d03      	cmp	r5, #3
   165ba:	d91c      	bls.n	165f6 <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   165bc:	7a7b      	ldrb	r3, [r7, #9]
   165be:	f36f 1307 	bfc	r3, #4, #4
   165c2:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   165c4:	7a3b      	ldrb	r3, [r7, #8]
   165c6:	f043 0302 	orr.w	r3, r3, #2
   165ca:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   165cc:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   165ce:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   165d2:	2300      	movs	r3, #0
   165d4:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   165d6:	2d00      	cmp	r5, #0
   165d8:	dd0d      	ble.n	165f6 <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   165da:	f7f7 fd41 	bl	e060 <log_msg_chunk_alloc>
		if (cont == NULL) {
   165de:	4604      	mov	r4, r0
   165e0:	b128      	cbz	r0, 165ee <msg_alloc+0x56>
		*next = cont;
   165e2:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   165e4:	2300      	movs	r3, #0
   165e6:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   165e8:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   165ea:	3d07      	subs	r5, #7
   165ec:	e7f3      	b.n	165d6 <msg_alloc+0x3e>
			msg_free(msg);
   165ee:	4638      	mov	r0, r7
   165f0:	f7f7 fd52 	bl	e098 <msg_free>
			return NULL;
   165f4:	4627      	mov	r7, r4
}
   165f6:	4638      	mov	r0, r7
   165f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000165fa <log_msg_create_n>:
{
   165fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   165fc:	4607      	mov	r7, r0
   165fe:	460e      	mov	r6, r1
   16600:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   16602:	4610      	mov	r0, r2
   16604:	f7ff ffc8 	bl	16598 <msg_alloc>
	if (msg != NULL) {
   16608:	4605      	mov	r5, r0
   1660a:	b140      	cbz	r0, 1661e <log_msg_create_n+0x24>
		msg->str = str;
   1660c:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   1660e:	7a43      	ldrb	r3, [r0, #9]
   16610:	f364 1307 	bfi	r3, r4, #4, #4
   16614:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   16616:	4622      	mov	r2, r4
   16618:	4631      	mov	r1, r6
   1661a:	f7ff ff08 	bl	1642e <copy_args_to_msg>
}
   1661e:	4628      	mov	r0, r5
   16620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016622 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   16622:	b510      	push	{r4, lr}
   16624:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   16626:	2400      	movs	r4, #0
   16628:	9400      	str	r4, [sp, #0]
   1662a:	f7ff ff27 	bl	1647c <log_msg_hexdump_data_op>
}
   1662e:	b002      	add	sp, #8
   16630:	bd10      	pop	{r4, pc}

00016632 <buffer_write>:
{
   16632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16634:	4607      	mov	r7, r0
   16636:	460d      	mov	r5, r1
   16638:	4614      	mov	r4, r2
   1663a:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   1663c:	4632      	mov	r2, r6
   1663e:	4621      	mov	r1, r4
   16640:	4628      	mov	r0, r5
   16642:	47b8      	blx	r7
		buf += processed;
   16644:	4405      	add	r5, r0
	} while (len != 0);
   16646:	1a24      	subs	r4, r4, r0
   16648:	d1f8      	bne.n	1663c <buffer_write+0xa>
}
   1664a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001664c <color_prefix>:
{
   1664c:	b508      	push	{r3, lr}
   1664e:	4613      	mov	r3, r2
	color_print(log_output, color, true, level);
   16650:	2201      	movs	r2, #1
   16652:	f7f7 fdbb 	bl	e1cc <color_print>
}
   16656:	bd08      	pop	{r3, pc}

00016658 <color_postfix>:
{
   16658:	b508      	push	{r3, lr}
   1665a:	4613      	mov	r3, r2
	color_print(log_output, color, false, level);
   1665c:	2200      	movs	r2, #0
   1665e:	f7f7 fdb5 	bl	e1cc <color_print>
}
   16662:	bd08      	pop	{r3, pc}

00016664 <postfix_print>:
{
   16664:	b538      	push	{r3, r4, r5, lr}
   16666:	4605      	mov	r5, r0
   16668:	460c      	mov	r4, r1
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
   1666a:	f001 0101 	and.w	r1, r1, #1
   1666e:	f7ff fff3 	bl	16658 <color_postfix>
	newline_print(log_output, flags);
   16672:	4621      	mov	r1, r4
   16674:	4628      	mov	r0, r5
   16676:	f7f7 fdbf 	bl	e1f8 <newline_print>
}
   1667a:	bd38      	pop	{r3, r4, r5, pc}

0001667c <prefix_print>:
{
   1667c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16680:	b083      	sub	sp, #12
   16682:	4604      	mov	r4, r0
   16684:	4615      	mov	r5, r2
   16686:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1668a:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1668e:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
   16692:	f011 0702 	ands.w	r7, r1, #2
   16696:	d113      	bne.n	166c0 <prefix_print+0x44>
		color_prefix(log_output, colors_on, level);
   16698:	4632      	mov	r2, r6
   1669a:	4649      	mov	r1, r9
   1669c:	4620      	mov	r0, r4
   1669e:	f7ff ffd5 	bl	1664c <color_prefix>
	length += ids_print(log_output, level_on, func_on,
   166a2:	9601      	str	r6, [sp, #4]
   166a4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   166a8:	9300      	str	r3, [sp, #0]
   166aa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   166ae:	462a      	mov	r2, r5
   166b0:	4641      	mov	r1, r8
   166b2:	4620      	mov	r0, r4
   166b4:	f7f7 fe12 	bl	e2dc <ids_print>
}
   166b8:	4438      	add	r0, r7
   166ba:	b003      	add	sp, #12
   166bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(log_output, flags, timestamp);
   166c0:	461a      	mov	r2, r3
   166c2:	f7f7 fd3d 	bl	e140 <timestamp_print>
   166c6:	4607      	mov	r7, r0
   166c8:	e7e6      	b.n	16698 <prefix_print+0x1c>

000166ca <std_print>:
{
   166ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   166ce:	b08e      	sub	sp, #56	; 0x38
   166d0:	af0e      	add	r7, sp, #56	; 0x38
   166d2:	4606      	mov	r6, r0
   166d4:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   166d6:	f7ff ff4e 	bl	16576 <log_msg_str_get>
   166da:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   166dc:	4630      	mov	r0, r6
   166de:	f7ff ff35 	bl	1654c <log_msg_nargs_get>
   166e2:	4680      	mov	r8, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   166e4:	0083      	lsls	r3, r0, #2
   166e6:	3307      	adds	r3, #7
   166e8:	f023 0307 	bic.w	r3, r3, #7
   166ec:	ebad 0d03 	sub.w	sp, sp, r3
   166f0:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   166f2:	2400      	movs	r4, #0
   166f4:	4544      	cmp	r4, r8
   166f6:	d207      	bcs.n	16708 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   166f8:	4621      	mov	r1, r4
   166fa:	4630      	mov	r0, r6
   166fc:	f7ff ff29 	bl	16552 <log_msg_arg_get>
   16700:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   16704:	3401      	adds	r4, #1
   16706:	e7f5      	b.n	166f4 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   16708:	4630      	mov	r0, r6
   1670a:	f7ff ff1f 	bl	1654c <log_msg_nargs_get>
   1670e:	280f      	cmp	r0, #15
   16710:	d815      	bhi.n	1673e <std_print+0x74>
   16712:	e8df f010 	tbh	[pc, r0, lsl #1]
   16716:	0010      	.short	0x0010
   16718:	001d0017 	.word	0x001d0017
   1671c:	002d0024 	.word	0x002d0024
   16720:	00450038 	.word	0x00450038
   16724:	00650054 	.word	0x00650054
   16728:	008d0078 	.word	0x008d0078
   1672c:	00bd00a4 	.word	0x00bd00a4
   16730:	00f500d8 	.word	0x00f500d8
   16734:	0114      	.short	0x0114
		print_formatted(log_output, str);
   16736:	4651      	mov	r1, sl
   16738:	4648      	mov	r0, r9
   1673a:	f7f7 fced 	bl	e118 <print_formatted>
}
   1673e:	46bd      	mov	sp, r7
   16740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   16744:	682a      	ldr	r2, [r5, #0]
   16746:	4651      	mov	r1, sl
   16748:	4648      	mov	r0, r9
   1674a:	f7f7 fce5 	bl	e118 <print_formatted>
		break;
   1674e:	e7f6      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1]);
   16750:	686b      	ldr	r3, [r5, #4]
   16752:	682a      	ldr	r2, [r5, #0]
   16754:	4651      	mov	r1, sl
   16756:	4648      	mov	r0, r9
   16758:	f7f7 fcde 	bl	e118 <print_formatted>
		break;
   1675c:	e7ef      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1675e:	686b      	ldr	r3, [r5, #4]
   16760:	682a      	ldr	r2, [r5, #0]
   16762:	68a9      	ldr	r1, [r5, #8]
   16764:	9100      	str	r1, [sp, #0]
   16766:	4651      	mov	r1, sl
   16768:	4648      	mov	r0, r9
   1676a:	f7f7 fcd5 	bl	e118 <print_formatted>
		break;
   1676e:	e7e6      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
   16770:	686b      	ldr	r3, [r5, #4]
   16772:	682a      	ldr	r2, [r5, #0]
   16774:	68e9      	ldr	r1, [r5, #12]
   16776:	9101      	str	r1, [sp, #4]
   16778:	68a9      	ldr	r1, [r5, #8]
   1677a:	9100      	str	r1, [sp, #0]
   1677c:	4651      	mov	r1, sl
   1677e:	4648      	mov	r0, r9
   16780:	f7f7 fcca 	bl	e118 <print_formatted>
		break;
   16784:	e7db      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
   16786:	686b      	ldr	r3, [r5, #4]
   16788:	682a      	ldr	r2, [r5, #0]
   1678a:	6929      	ldr	r1, [r5, #16]
   1678c:	9102      	str	r1, [sp, #8]
   1678e:	68e9      	ldr	r1, [r5, #12]
   16790:	9101      	str	r1, [sp, #4]
   16792:	68a9      	ldr	r1, [r5, #8]
   16794:	9100      	str	r1, [sp, #0]
   16796:	4651      	mov	r1, sl
   16798:	4648      	mov	r0, r9
   1679a:	f7f7 fcbd 	bl	e118 <print_formatted>
		break;
   1679e:	e7ce      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
   167a0:	686b      	ldr	r3, [r5, #4]
   167a2:	682a      	ldr	r2, [r5, #0]
   167a4:	6969      	ldr	r1, [r5, #20]
   167a6:	9103      	str	r1, [sp, #12]
   167a8:	6929      	ldr	r1, [r5, #16]
   167aa:	9102      	str	r1, [sp, #8]
   167ac:	68e9      	ldr	r1, [r5, #12]
   167ae:	9101      	str	r1, [sp, #4]
   167b0:	68a9      	ldr	r1, [r5, #8]
   167b2:	9100      	str	r1, [sp, #0]
   167b4:	4651      	mov	r1, sl
   167b6:	4648      	mov	r0, r9
   167b8:	f7f7 fcae 	bl	e118 <print_formatted>
		break;
   167bc:	e7bf      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
   167be:	686b      	ldr	r3, [r5, #4]
   167c0:	682a      	ldr	r2, [r5, #0]
   167c2:	69a9      	ldr	r1, [r5, #24]
   167c4:	9104      	str	r1, [sp, #16]
   167c6:	6969      	ldr	r1, [r5, #20]
   167c8:	9103      	str	r1, [sp, #12]
   167ca:	6929      	ldr	r1, [r5, #16]
   167cc:	9102      	str	r1, [sp, #8]
   167ce:	68e9      	ldr	r1, [r5, #12]
   167d0:	9101      	str	r1, [sp, #4]
   167d2:	68a9      	ldr	r1, [r5, #8]
   167d4:	9100      	str	r1, [sp, #0]
   167d6:	4651      	mov	r1, sl
   167d8:	4648      	mov	r0, r9
   167da:	f7f7 fc9d 	bl	e118 <print_formatted>
		break;
   167de:	e7ae      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
   167e0:	686b      	ldr	r3, [r5, #4]
   167e2:	682a      	ldr	r2, [r5, #0]
   167e4:	69e9      	ldr	r1, [r5, #28]
   167e6:	9105      	str	r1, [sp, #20]
   167e8:	69a9      	ldr	r1, [r5, #24]
   167ea:	9104      	str	r1, [sp, #16]
   167ec:	6969      	ldr	r1, [r5, #20]
   167ee:	9103      	str	r1, [sp, #12]
   167f0:	6929      	ldr	r1, [r5, #16]
   167f2:	9102      	str	r1, [sp, #8]
   167f4:	68e9      	ldr	r1, [r5, #12]
   167f6:	9101      	str	r1, [sp, #4]
   167f8:	68a9      	ldr	r1, [r5, #8]
   167fa:	9100      	str	r1, [sp, #0]
   167fc:	4651      	mov	r1, sl
   167fe:	4648      	mov	r0, r9
   16800:	f7f7 fc8a 	bl	e118 <print_formatted>
		break;
   16804:	e79b      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
   16806:	686b      	ldr	r3, [r5, #4]
   16808:	682a      	ldr	r2, [r5, #0]
   1680a:	6a29      	ldr	r1, [r5, #32]
   1680c:	9106      	str	r1, [sp, #24]
   1680e:	69e9      	ldr	r1, [r5, #28]
   16810:	9105      	str	r1, [sp, #20]
   16812:	69a9      	ldr	r1, [r5, #24]
   16814:	9104      	str	r1, [sp, #16]
   16816:	6969      	ldr	r1, [r5, #20]
   16818:	9103      	str	r1, [sp, #12]
   1681a:	6929      	ldr	r1, [r5, #16]
   1681c:	9102      	str	r1, [sp, #8]
   1681e:	68e9      	ldr	r1, [r5, #12]
   16820:	9101      	str	r1, [sp, #4]
   16822:	68a9      	ldr	r1, [r5, #8]
   16824:	9100      	str	r1, [sp, #0]
   16826:	4651      	mov	r1, sl
   16828:	4648      	mov	r0, r9
   1682a:	f7f7 fc75 	bl	e118 <print_formatted>
		break;
   1682e:	e786      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
   16830:	686b      	ldr	r3, [r5, #4]
   16832:	682a      	ldr	r2, [r5, #0]
   16834:	6a69      	ldr	r1, [r5, #36]	; 0x24
   16836:	9107      	str	r1, [sp, #28]
   16838:	6a29      	ldr	r1, [r5, #32]
   1683a:	9106      	str	r1, [sp, #24]
   1683c:	69e9      	ldr	r1, [r5, #28]
   1683e:	9105      	str	r1, [sp, #20]
   16840:	69a9      	ldr	r1, [r5, #24]
   16842:	9104      	str	r1, [sp, #16]
   16844:	6969      	ldr	r1, [r5, #20]
   16846:	9103      	str	r1, [sp, #12]
   16848:	6929      	ldr	r1, [r5, #16]
   1684a:	9102      	str	r1, [sp, #8]
   1684c:	68e9      	ldr	r1, [r5, #12]
   1684e:	9101      	str	r1, [sp, #4]
   16850:	68a9      	ldr	r1, [r5, #8]
   16852:	9100      	str	r1, [sp, #0]
   16854:	4651      	mov	r1, sl
   16856:	4648      	mov	r0, r9
   16858:	f7f7 fc5e 	bl	e118 <print_formatted>
		break;
   1685c:	e76f      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1685e:	686b      	ldr	r3, [r5, #4]
   16860:	682a      	ldr	r2, [r5, #0]
   16862:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   16864:	9108      	str	r1, [sp, #32]
   16866:	6a69      	ldr	r1, [r5, #36]	; 0x24
   16868:	9107      	str	r1, [sp, #28]
   1686a:	6a29      	ldr	r1, [r5, #32]
   1686c:	9106      	str	r1, [sp, #24]
   1686e:	69e9      	ldr	r1, [r5, #28]
   16870:	9105      	str	r1, [sp, #20]
   16872:	69a9      	ldr	r1, [r5, #24]
   16874:	9104      	str	r1, [sp, #16]
   16876:	6969      	ldr	r1, [r5, #20]
   16878:	9103      	str	r1, [sp, #12]
   1687a:	6929      	ldr	r1, [r5, #16]
   1687c:	9102      	str	r1, [sp, #8]
   1687e:	68e9      	ldr	r1, [r5, #12]
   16880:	9101      	str	r1, [sp, #4]
   16882:	68a9      	ldr	r1, [r5, #8]
   16884:	9100      	str	r1, [sp, #0]
   16886:	4651      	mov	r1, sl
   16888:	4648      	mov	r0, r9
   1688a:	f7f7 fc45 	bl	e118 <print_formatted>
		break;
   1688e:	e756      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
   16890:	686b      	ldr	r3, [r5, #4]
   16892:	682a      	ldr	r2, [r5, #0]
   16894:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   16896:	9109      	str	r1, [sp, #36]	; 0x24
   16898:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1689a:	9108      	str	r1, [sp, #32]
   1689c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1689e:	9107      	str	r1, [sp, #28]
   168a0:	6a29      	ldr	r1, [r5, #32]
   168a2:	9106      	str	r1, [sp, #24]
   168a4:	69e9      	ldr	r1, [r5, #28]
   168a6:	9105      	str	r1, [sp, #20]
   168a8:	69a9      	ldr	r1, [r5, #24]
   168aa:	9104      	str	r1, [sp, #16]
   168ac:	6969      	ldr	r1, [r5, #20]
   168ae:	9103      	str	r1, [sp, #12]
   168b0:	6929      	ldr	r1, [r5, #16]
   168b2:	9102      	str	r1, [sp, #8]
   168b4:	68e9      	ldr	r1, [r5, #12]
   168b6:	9101      	str	r1, [sp, #4]
   168b8:	68a9      	ldr	r1, [r5, #8]
   168ba:	9100      	str	r1, [sp, #0]
   168bc:	4651      	mov	r1, sl
   168be:	4648      	mov	r0, r9
   168c0:	f7f7 fc2a 	bl	e118 <print_formatted>
		break;
   168c4:	e73b      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
   168c6:	686b      	ldr	r3, [r5, #4]
   168c8:	682a      	ldr	r2, [r5, #0]
   168ca:	6b29      	ldr	r1, [r5, #48]	; 0x30
   168cc:	910a      	str	r1, [sp, #40]	; 0x28
   168ce:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   168d0:	9109      	str	r1, [sp, #36]	; 0x24
   168d2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   168d4:	9108      	str	r1, [sp, #32]
   168d6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   168d8:	9107      	str	r1, [sp, #28]
   168da:	6a29      	ldr	r1, [r5, #32]
   168dc:	9106      	str	r1, [sp, #24]
   168de:	69e9      	ldr	r1, [r5, #28]
   168e0:	9105      	str	r1, [sp, #20]
   168e2:	69a9      	ldr	r1, [r5, #24]
   168e4:	9104      	str	r1, [sp, #16]
   168e6:	6969      	ldr	r1, [r5, #20]
   168e8:	9103      	str	r1, [sp, #12]
   168ea:	6929      	ldr	r1, [r5, #16]
   168ec:	9102      	str	r1, [sp, #8]
   168ee:	68e9      	ldr	r1, [r5, #12]
   168f0:	9101      	str	r1, [sp, #4]
   168f2:	68a9      	ldr	r1, [r5, #8]
   168f4:	9100      	str	r1, [sp, #0]
   168f6:	4651      	mov	r1, sl
   168f8:	4648      	mov	r0, r9
   168fa:	f7f7 fc0d 	bl	e118 <print_formatted>
		break;
   168fe:	e71e      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
   16900:	686b      	ldr	r3, [r5, #4]
   16902:	682a      	ldr	r2, [r5, #0]
   16904:	6b69      	ldr	r1, [r5, #52]	; 0x34
   16906:	910b      	str	r1, [sp, #44]	; 0x2c
   16908:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1690a:	910a      	str	r1, [sp, #40]	; 0x28
   1690c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   1690e:	9109      	str	r1, [sp, #36]	; 0x24
   16910:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   16912:	9108      	str	r1, [sp, #32]
   16914:	6a69      	ldr	r1, [r5, #36]	; 0x24
   16916:	9107      	str	r1, [sp, #28]
   16918:	6a29      	ldr	r1, [r5, #32]
   1691a:	9106      	str	r1, [sp, #24]
   1691c:	69e9      	ldr	r1, [r5, #28]
   1691e:	9105      	str	r1, [sp, #20]
   16920:	69a9      	ldr	r1, [r5, #24]
   16922:	9104      	str	r1, [sp, #16]
   16924:	6969      	ldr	r1, [r5, #20]
   16926:	9103      	str	r1, [sp, #12]
   16928:	6929      	ldr	r1, [r5, #16]
   1692a:	9102      	str	r1, [sp, #8]
   1692c:	68e9      	ldr	r1, [r5, #12]
   1692e:	9101      	str	r1, [sp, #4]
   16930:	68a9      	ldr	r1, [r5, #8]
   16932:	9100      	str	r1, [sp, #0]
   16934:	4651      	mov	r1, sl
   16936:	4648      	mov	r0, r9
   16938:	f7f7 fbee 	bl	e118 <print_formatted>
		break;
   1693c:	e6ff      	b.n	1673e <std_print+0x74>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1693e:	686b      	ldr	r3, [r5, #4]
   16940:	682a      	ldr	r2, [r5, #0]
   16942:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   16944:	910c      	str	r1, [sp, #48]	; 0x30
   16946:	6b69      	ldr	r1, [r5, #52]	; 0x34
   16948:	910b      	str	r1, [sp, #44]	; 0x2c
   1694a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1694c:	910a      	str	r1, [sp, #40]	; 0x28
   1694e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   16950:	9109      	str	r1, [sp, #36]	; 0x24
   16952:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   16954:	9108      	str	r1, [sp, #32]
   16956:	6a69      	ldr	r1, [r5, #36]	; 0x24
   16958:	9107      	str	r1, [sp, #28]
   1695a:	6a29      	ldr	r1, [r5, #32]
   1695c:	9106      	str	r1, [sp, #24]
   1695e:	69e9      	ldr	r1, [r5, #28]
   16960:	9105      	str	r1, [sp, #20]
   16962:	69a9      	ldr	r1, [r5, #24]
   16964:	9104      	str	r1, [sp, #16]
   16966:	6969      	ldr	r1, [r5, #20]
   16968:	9103      	str	r1, [sp, #12]
   1696a:	6929      	ldr	r1, [r5, #16]
   1696c:	9102      	str	r1, [sp, #8]
   1696e:	68e9      	ldr	r1, [r5, #12]
   16970:	9101      	str	r1, [sp, #4]
   16972:	68a9      	ldr	r1, [r5, #8]
   16974:	9100      	str	r1, [sp, #0]
   16976:	4651      	mov	r1, sl
   16978:	4648      	mov	r0, r9
   1697a:	f7f7 fbcd 	bl	e118 <print_formatted>
}
   1697e:	e6de      	b.n	1673e <std_print+0x74>

00016980 <log_output_flush>:
{
   16980:	b510      	push	{r4, lr}
   16982:	4604      	mov	r4, r0
		     log_output->control_block->offset,
   16984:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   16986:	6853      	ldr	r3, [r2, #4]
   16988:	6812      	ldr	r2, [r2, #0]
   1698a:	6881      	ldr	r1, [r0, #8]
   1698c:	6800      	ldr	r0, [r0, #0]
   1698e:	f7ff fe50 	bl	16632 <buffer_write>
	log_output->control_block->offset = 0;
   16992:	6863      	ldr	r3, [r4, #4]
   16994:	2200      	movs	r2, #0
   16996:	601a      	str	r2, [r3, #0]
}
   16998:	bd10      	pop	{r4, pc}

0001699a <out_func>:
{
   1699a:	b538      	push	{r3, r4, r5, lr}
   1699c:	4605      	mov	r5, r0
   1699e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   169a0:	684b      	ldr	r3, [r1, #4]
   169a2:	681a      	ldr	r2, [r3, #0]
   169a4:	68cb      	ldr	r3, [r1, #12]
   169a6:	429a      	cmp	r2, r3
   169a8:	d00b      	beq.n	169c2 <out_func+0x28>
	idx = atomic_inc(&out_ctx->control_block->offset);
   169aa:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   169ac:	e8d3 2fef 	ldaex	r2, [r3]
   169b0:	1c51      	adds	r1, r2, #1
   169b2:	e8c3 1fe0 	stlex	r0, r1, [r3]
   169b6:	2800      	cmp	r0, #0
   169b8:	d1f8      	bne.n	169ac <out_func+0x12>
	out_ctx->buf[idx] = (uint8_t)c;
   169ba:	68a3      	ldr	r3, [r4, #8]
   169bc:	549d      	strb	r5, [r3, r2]
}
   169be:	2000      	movs	r0, #0
   169c0:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   169c2:	4608      	mov	r0, r1
   169c4:	f7ff ffdc 	bl	16980 <log_output_flush>
   169c8:	e7ef      	b.n	169aa <out_func+0x10>

000169ca <log_output_msg_process>:
{
   169ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   169cc:	b085      	sub	sp, #20
   169ce:	4606      	mov	r6, r0
   169d0:	460c      	mov	r4, r1
   169d2:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   169d4:	7a0b      	ldrb	r3, [r1, #8]
   169d6:	f083 0301 	eor.w	r3, r3, #1
   169da:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   169de:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   169e0:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   169e2:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   169e6:	8960      	ldrh	r0, [r4, #10]
   169e8:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   169ec:	f011 0507 	ands.w	r5, r1, #7
   169f0:	d10f      	bne.n	16a12 <log_output_msg_process+0x48>
   169f2:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   169f4:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   169f6:	f013 0f01 	tst.w	r3, #1
   169fa:	d014      	beq.n	16a26 <log_output_msg_process+0x5c>
	} else if (raw_string) {
   169fc:	b9c5      	cbnz	r5, 16a30 <log_output_msg_process+0x66>
		raw_string_print(msg, log_output);
   169fe:	4631      	mov	r1, r6
   16a00:	4620      	mov	r0, r4
   16a02:	f7f7 fcc3 	bl	e38c <raw_string_print>
	if (!raw_string) {
   16a06:	b9cd      	cbnz	r5, 16a3c <log_output_msg_process+0x72>
	log_output_flush(log_output);
   16a08:	4630      	mov	r0, r6
   16a0a:	f7ff ffb9 	bl	16980 <log_output_flush>
}
   16a0e:	b005      	add	sp, #20
   16a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   16a12:	9002      	str	r0, [sp, #8]
   16a14:	f8cd c004 	str.w	ip, [sp, #4]
   16a18:	9500      	str	r5, [sp, #0]
   16a1a:	4639      	mov	r1, r7
   16a1c:	4630      	mov	r0, r6
   16a1e:	f7ff fe2d 	bl	1667c <prefix_print>
   16a22:	4602      	mov	r2, r0
   16a24:	e7e6      	b.n	169f4 <log_output_msg_process+0x2a>
		std_print(msg, log_output);
   16a26:	4631      	mov	r1, r6
   16a28:	4620      	mov	r0, r4
   16a2a:	f7ff fe4e 	bl	166ca <std_print>
   16a2e:	e7ea      	b.n	16a06 <log_output_msg_process+0x3c>
		hexdump_print(msg, log_output, prefix_offset, flags);
   16a30:	463b      	mov	r3, r7
   16a32:	4631      	mov	r1, r6
   16a34:	4620      	mov	r0, r4
   16a36:	f7f7 fc7f 	bl	e338 <hexdump_print>
   16a3a:	e7e4      	b.n	16a06 <log_output_msg_process+0x3c>
		postfix_print(log_output, flags, level);
   16a3c:	462a      	mov	r2, r5
   16a3e:	4639      	mov	r1, r7
   16a40:	4630      	mov	r0, r6
   16a42:	f7ff fe0f 	bl	16664 <postfix_print>
   16a46:	e7df      	b.n	16a08 <log_output_msg_process+0x3e>

00016a48 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   16a48:	4770      	bx	lr

00016a4a <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   16a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a4c:	4604      	mov	r4, r0
   16a4e:	460d      	mov	r5, r1
   16a50:	4617      	mov	r7, r2
   16a52:	461e      	mov	r6, r3
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   16a54:	6883      	ldr	r3, [r0, #8]
   16a56:	428b      	cmp	r3, r1
   16a58:	d304      	bcc.n	16a64 <flash_area_read+0x1a>
   16a5a:	1872      	adds	r2, r6, r1
   16a5c:	4293      	cmp	r3, r2
   16a5e:	d20e      	bcs.n	16a7e <flash_area_read+0x34>
   16a60:	2300      	movs	r3, #0
   16a62:	e000      	b.n	16a66 <flash_area_read+0x1c>
   16a64:	2300      	movs	r3, #0
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   16a66:	b163      	cbz	r3, 16a82 <flash_area_read+0x38>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   16a68:	68e0      	ldr	r0, [r4, #12]
   16a6a:	f7fd fa95 	bl	13f98 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   16a6e:	6861      	ldr	r1, [r4, #4]
   16a70:	4429      	add	r1, r5

static inline int z_impl_flash_read(const struct device *dev, off_t offset,
				    void *data,
				    size_t len)
{
	const struct flash_driver_api *api =
   16a72:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
   16a74:	681c      	ldr	r4, [r3, #0]
   16a76:	4633      	mov	r3, r6
   16a78:	463a      	mov	r2, r7
   16a7a:	47a0      	blx	r4
}
   16a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   16a7e:	2301      	movs	r3, #1
   16a80:	e7f1      	b.n	16a66 <flash_area_read+0x1c>
		return -EINVAL;
   16a82:	f06f 0015 	mvn.w	r0, #21
   16a86:	e7f9      	b.n	16a7c <flash_area_read+0x32>

00016a88 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   16a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16a8c:	4605      	mov	r5, r0
   16a8e:	460e      	mov	r6, r1
   16a90:	4691      	mov	r9, r2
   16a92:	461f      	mov	r7, r3
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   16a94:	6883      	ldr	r3, [r0, #8]
   16a96:	428b      	cmp	r3, r1
   16a98:	d304      	bcc.n	16aa4 <flash_area_write+0x1c>
   16a9a:	187a      	adds	r2, r7, r1
   16a9c:	4293      	cmp	r3, r2
   16a9e:	d21e      	bcs.n	16ade <flash_area_write+0x56>
   16aa0:	2300      	movs	r3, #0
   16aa2:	e000      	b.n	16aa6 <flash_area_write+0x1e>
   16aa4:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   16aa6:	b1e3      	cbz	r3, 16ae2 <flash_area_write+0x5a>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   16aa8:	68e8      	ldr	r0, [r5, #12]
   16aaa:	f7fd fa75 	bl	13f98 <z_impl_device_get_binding>
   16aae:	4604      	mov	r4, r0
					 bool enable);

static inline int z_impl_flash_write_protection_set(const struct device *dev,
						    bool enable)
{
	const struct flash_driver_api *api =
   16ab0:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->write_protection(dev, enable);
   16ab2:	68db      	ldr	r3, [r3, #12]
   16ab4:	2100      	movs	r1, #0
   16ab6:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   16ab8:	4680      	mov	r8, r0
   16aba:	b968      	cbnz	r0, 16ad8 <flash_area_write+0x50>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   16abc:	6869      	ldr	r1, [r5, #4]
   16abe:	4431      	add	r1, r6
	const struct flash_driver_api *api =
   16ac0:	68a3      	ldr	r3, [r4, #8]
	return api->write(dev, offset, data, len);
   16ac2:	685d      	ldr	r5, [r3, #4]
   16ac4:	463b      	mov	r3, r7
   16ac6:	464a      	mov	r2, r9
   16ac8:	4620      	mov	r0, r4
   16aca:	47a8      	blx	r5
   16acc:	4680      	mov	r8, r0
	const struct flash_driver_api *api =
   16ace:	68a3      	ldr	r3, [r4, #8]
	return api->write_protection(dev, enable);
   16ad0:	68db      	ldr	r3, [r3, #12]
   16ad2:	2101      	movs	r1, #1
   16ad4:	4620      	mov	r0, r4
   16ad6:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   16ad8:	4640      	mov	r0, r8
   16ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   16ade:	2301      	movs	r3, #1
   16ae0:	e7e1      	b.n	16aa6 <flash_area_write+0x1e>
		return -EINVAL;
   16ae2:	f06f 0815 	mvn.w	r8, #21
   16ae6:	e7f7      	b.n	16ad8 <flash_area_write+0x50>

00016ae8 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   16ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16aec:	4605      	mov	r5, r0
   16aee:	460e      	mov	r6, r1
   16af0:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   16af2:	6883      	ldr	r3, [r0, #8]
   16af4:	428b      	cmp	r3, r1
   16af6:	d304      	bcc.n	16b02 <flash_area_erase+0x1a>
   16af8:	440a      	add	r2, r1
   16afa:	4293      	cmp	r3, r2
   16afc:	d21d      	bcs.n	16b3a <flash_area_erase+0x52>
   16afe:	2300      	movs	r3, #0
   16b00:	e000      	b.n	16b04 <flash_area_erase+0x1c>
   16b02:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   16b04:	b1db      	cbz	r3, 16b3e <flash_area_erase+0x56>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   16b06:	68e8      	ldr	r0, [r5, #12]
   16b08:	f7fd fa46 	bl	13f98 <z_impl_device_get_binding>
   16b0c:	4604      	mov	r4, r0
	const struct flash_driver_api *api =
   16b0e:	6883      	ldr	r3, [r0, #8]
	return api->write_protection(dev, enable);
   16b10:	68db      	ldr	r3, [r3, #12]
   16b12:	2100      	movs	r1, #0
   16b14:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   16b16:	4680      	mov	r8, r0
   16b18:	b960      	cbnz	r0, 16b34 <flash_area_erase+0x4c>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   16b1a:	6869      	ldr	r1, [r5, #4]
   16b1c:	4431      	add	r1, r6
	const struct flash_driver_api *api =
   16b1e:	68a3      	ldr	r3, [r4, #8]
	return api->erase(dev, offset, size);
   16b20:	689b      	ldr	r3, [r3, #8]
   16b22:	463a      	mov	r2, r7
   16b24:	4620      	mov	r0, r4
   16b26:	4798      	blx	r3
   16b28:	4680      	mov	r8, r0
	const struct flash_driver_api *api =
   16b2a:	68a3      	ldr	r3, [r4, #8]
	return api->write_protection(dev, enable);
   16b2c:	68db      	ldr	r3, [r3, #12]
   16b2e:	2101      	movs	r1, #1
   16b30:	4620      	mov	r0, r4
   16b32:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   16b34:	4640      	mov	r0, r8
   16b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   16b3a:	2301      	movs	r3, #1
   16b3c:	e7e2      	b.n	16b04 <flash_area_erase+0x1c>
		return -EINVAL;
   16b3e:	f06f 0815 	mvn.w	r8, #21
   16b42:	e7f7      	b.n	16b34 <flash_area_erase+0x4c>

00016b44 <flash_area_get_device>:

	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
   16b44:	b508      	push	{r3, lr}
	return device_get_binding(fa->fa_dev_name);
   16b46:	68c0      	ldr	r0, [r0, #12]
   16b48:	f7fd fa26 	bl	13f98 <z_impl_device_get_binding>
}
   16b4c:	bd08      	pop	{r3, pc}

00016b4e <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   16b4e:	68c0      	ldr	r0, [r0, #12]
	return &data->subsys[type];
   16b50:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   16b54:	0089      	lsls	r1, r1, #2
   16b56:	3138      	adds	r1, #56	; 0x38
}
   16b58:	4408      	add	r0, r1
   16b5a:	4770      	bx	lr

00016b5c <get_sub_config>:
	const struct nrf_clock_control_config *config =
   16b5c:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   16b5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   16b62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   16b66:	4770      	bx	lr

00016b68 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   16b68:	68c0      	ldr	r0, [r0, #12]
	return &data->mgr[type];
   16b6a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   16b6e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   16b72:	4770      	bx	lr

00016b74 <get_status>:
{
   16b74:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   16b76:	b2c9      	uxtb	r1, r1
   16b78:	f7ff ffe9 	bl	16b4e <get_sub_data>
   16b7c:	6880      	ldr	r0, [r0, #8]
}
   16b7e:	f000 0007 	and.w	r0, r0, #7
   16b82:	bd08      	pop	{r3, pc}

00016b84 <set_off_state>:
	__asm__ volatile(
   16b84:	f04f 0320 	mov.w	r3, #32
   16b88:	f3ef 8211 	mrs	r2, BASEPRI
   16b8c:	f383 8811 	msr	BASEPRI, r3
   16b90:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   16b94:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   16b96:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   16b9a:	d001      	beq.n	16ba0 <set_off_state+0x1c>
   16b9c:	428b      	cmp	r3, r1
   16b9e:	d107      	bne.n	16bb0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   16ba0:	2301      	movs	r3, #1
   16ba2:	6003      	str	r3, [r0, #0]
	int err = 0;
   16ba4:	2000      	movs	r0, #0
	__asm__ volatile(
   16ba6:	f382 8811 	msr	BASEPRI, r2
   16baa:	f3bf 8f6f 	isb	sy
}
   16bae:	4770      	bx	lr
		err = -EPERM;
   16bb0:	f04f 30ff 	mov.w	r0, #4294967295
   16bb4:	e7f7      	b.n	16ba6 <set_off_state+0x22>

00016bb6 <set_starting_state>:
{
   16bb6:	b410      	push	{r4}
	__asm__ volatile(
   16bb8:	f04f 0320 	mov.w	r3, #32
   16bbc:	f3ef 8211 	mrs	r2, BASEPRI
   16bc0:	f383 8811 	msr	BASEPRI, r3
   16bc4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   16bc8:	6803      	ldr	r3, [r0, #0]
   16bca:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   16bce:	f003 0307 	and.w	r3, r3, #7
   16bd2:	2b01      	cmp	r3, #1
   16bd4:	d009      	beq.n	16bea <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   16bd6:	428c      	cmp	r4, r1
   16bd8:	d00a      	beq.n	16bf0 <set_starting_state+0x3a>
		err = -EPERM;
   16bda:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   16bde:	f382 8811 	msr	BASEPRI, r2
   16be2:	f3bf 8f6f 	isb	sy
}
   16be6:	bc10      	pop	{r4}
   16be8:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   16bea:	6001      	str	r1, [r0, #0]
	int err = 0;
   16bec:	2000      	movs	r0, #0
   16bee:	e7f6      	b.n	16bde <set_starting_state+0x28>
		err = -EBUSY;
   16bf0:	f06f 000f 	mvn.w	r0, #15
   16bf4:	e7f3      	b.n	16bde <set_starting_state+0x28>

00016bf6 <set_on_state>:
	__asm__ volatile(
   16bf6:	f04f 0320 	mov.w	r3, #32
   16bfa:	f3ef 8211 	mrs	r2, BASEPRI
   16bfe:	f383 8811 	msr	BASEPRI, r3
   16c02:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   16c06:	6803      	ldr	r3, [r0, #0]
   16c08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16c0c:	f043 0302 	orr.w	r3, r3, #2
   16c10:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   16c12:	f382 8811 	msr	BASEPRI, r2
   16c16:	f3bf 8f6f 	isb	sy
}
   16c1a:	4770      	bx	lr

00016c1c <clkstarted_handle>:
{
   16c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c1e:	4606      	mov	r6, r0
   16c20:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   16c22:	f7ff ff94 	bl	16b4e <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   16c26:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   16c28:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   16c2a:	2300      	movs	r3, #0
   16c2c:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   16c30:	f7ff ffe1 	bl	16bf6 <set_on_state>
	if (callback) {
   16c34:	b11d      	cbz	r5, 16c3e <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   16c36:	463a      	mov	r2, r7
   16c38:	4621      	mov	r1, r4
   16c3a:	4630      	mov	r0, r6
   16c3c:	47a8      	blx	r5
}
   16c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016c40 <stop>:
{
   16c40:	b570      	push	{r4, r5, r6, lr}
   16c42:	4606      	mov	r6, r0
   16c44:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   16c46:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   16c48:	4621      	mov	r1, r4
   16c4a:	f7ff ff80 	bl	16b4e <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   16c4e:	4629      	mov	r1, r5
   16c50:	3008      	adds	r0, #8
   16c52:	f7ff ff97 	bl	16b84 <set_off_state>
	if (err < 0) {
   16c56:	2800      	cmp	r0, #0
   16c58:	db06      	blt.n	16c68 <stop+0x28>
	get_sub_config(dev, type)->stop();
   16c5a:	4621      	mov	r1, r4
   16c5c:	4630      	mov	r0, r6
   16c5e:	f7ff ff7d 	bl	16b5c <get_sub_config>
   16c62:	6843      	ldr	r3, [r0, #4]
   16c64:	4798      	blx	r3
	return 0;
   16c66:	2000      	movs	r0, #0
}
   16c68:	bd70      	pop	{r4, r5, r6, pc}

00016c6a <api_stop>:
{
   16c6a:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   16c6c:	2280      	movs	r2, #128	; 0x80
   16c6e:	f7ff ffe7 	bl	16c40 <stop>
}
   16c72:	bd08      	pop	{r3, pc}

00016c74 <async_start>:
{
   16c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c78:	4607      	mov	r7, r0
   16c7a:	4616      	mov	r6, r2
   16c7c:	461d      	mov	r5, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   16c7e:	fa5f f881 	uxtb.w	r8, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   16c82:	4641      	mov	r1, r8
   16c84:	f7ff ff63 	bl	16b4e <get_sub_data>
   16c88:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   16c8a:	4629      	mov	r1, r5
   16c8c:	3008      	adds	r0, #8
   16c8e:	f7ff ff92 	bl	16bb6 <set_starting_state>
	if (err < 0) {
   16c92:	2800      	cmp	r0, #0
   16c94:	db0a      	blt.n	16cac <async_start+0x38>
	subdata->cb = data->cb;
   16c96:	6873      	ldr	r3, [r6, #4]
   16c98:	6023      	str	r3, [r4, #0]
	subdata->user_data = data->user_data;
   16c9a:	68b3      	ldr	r3, [r6, #8]
   16c9c:	6063      	str	r3, [r4, #4]
	 get_sub_config(dev, type)->start();
   16c9e:	4641      	mov	r1, r8
   16ca0:	4638      	mov	r0, r7
   16ca2:	f7ff ff5b 	bl	16b5c <get_sub_config>
   16ca6:	6803      	ldr	r3, [r0, #0]
   16ca8:	4798      	blx	r3
	return 0;
   16caa:	2000      	movs	r0, #0
}
   16cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016cb0 <api_start>:
{
   16cb0:	b508      	push	{r3, lr}
	return async_start(dev, subsys, data, CTX_API);
   16cb2:	2380      	movs	r3, #128	; 0x80
   16cb4:	f7ff ffde 	bl	16c74 <async_start>
}
   16cb8:	bd08      	pop	{r3, pc}

00016cba <onoff_started_callback>:
{
   16cba:	b510      	push	{r4, lr}
   16cbc:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   16cbe:	b2c9      	uxtb	r1, r1
   16cc0:	f7ff ff52 	bl	16b68 <get_onoff_manager>
	notify(mgr, 0);
   16cc4:	2100      	movs	r1, #0
   16cc6:	47a0      	blx	r4
}
   16cc8:	bd10      	pop	{r4, pc}

00016cca <blocking_start_callback>:
{
   16cca:	b508      	push	{r3, lr}
   16ccc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   16cce:	f7fe f88f 	bl	14df0 <z_impl_k_sem_give>
}
   16cd2:	bd08      	pop	{r3, pc}

00016cd4 <lfclk_stop>:
{
   16cd4:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_lfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   16cd6:	2000      	movs	r0, #0
   16cd8:	f7fa fb50 	bl	1137c <nrfx_clock_stop>
}
   16cdc:	bd08      	pop	{r3, pc}

00016cde <hfclk_stop>:
{
   16cde:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   16ce0:	2001      	movs	r0, #1
   16ce2:	f7fa fb4b 	bl	1137c <nrfx_clock_stop>
}
   16ce6:	bd08      	pop	{r3, pc}

00016ce8 <lfclk_start>:
{
   16ce8:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   16cea:	2000      	movs	r0, #0
   16cec:	f7fa fb10 	bl	11310 <nrfx_clock_start>
}
   16cf0:	bd08      	pop	{r3, pc}

00016cf2 <hfclk_start>:
{
   16cf2:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   16cf4:	2001      	movs	r0, #1
   16cf6:	f7fa fb0b 	bl	11310 <nrfx_clock_start>
}
   16cfa:	bd08      	pop	{r3, pc}

00016cfc <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   16cfc:	4770      	bx	lr

00016cfe <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   16cfe:	4770      	bx	lr

00016d00 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   16d00:	1a40      	subs	r0, r0, r1
}
   16d02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   16d06:	4770      	bx	lr

00016d08 <handle_next_cycle_case>:
{
   16d08:	b510      	push	{r4, lr}
   16d0a:	4604      	mov	r4, r0
	set_comparator(t + 2);
   16d0c:	3002      	adds	r0, #2
   16d0e:	f7f7 fdd1 	bl	e8b4 <set_comparator>
	while (t != counter()) {
   16d12:	f7f7 fdfd 	bl	e910 <counter>
   16d16:	42a0      	cmp	r0, r4
   16d18:	d006      	beq.n	16d28 <handle_next_cycle_case+0x20>
		t = counter();
   16d1a:	f7f7 fdf9 	bl	e910 <counter>
   16d1e:	4604      	mov	r4, r0
		set_comparator(t + 2);
   16d20:	3002      	adds	r0, #2
   16d22:	f7f7 fdc7 	bl	e8b4 <set_comparator>
   16d26:	e7f4      	b.n	16d12 <handle_next_cycle_case+0xa>
}
   16d28:	bd10      	pop	{r4, pc}

00016d2a <set_absolute_alarm>:
{
   16d2a:	b538      	push	{r3, r4, r5, lr}
   16d2c:	4604      	mov	r4, r0
	uint32_t t = counter();
   16d2e:	f7f7 fdef 	bl	e910 <counter>
   16d32:	4605      	mov	r5, r0
	diff = counter_sub(abs_val, t);
   16d34:	4601      	mov	r1, r0
   16d36:	4620      	mov	r0, r4
   16d38:	f7ff ffe2 	bl	16d00 <counter_sub>
	if (diff == 1) {
   16d3c:	2801      	cmp	r0, #1
   16d3e:	d00d      	beq.n	16d5c <set_absolute_alarm+0x32>
	set_comparator(abs_val);
   16d40:	4620      	mov	r0, r4
   16d42:	f7f7 fdb7 	bl	e8b4 <set_comparator>
	t = counter();
   16d46:	f7f7 fde3 	bl	e910 <counter>
   16d4a:	4605      	mov	r5, r0
	diff = counter_sub(abs_val - 2, t);
   16d4c:	4601      	mov	r1, r0
   16d4e:	1ea0      	subs	r0, r4, #2
   16d50:	f7ff ffd6 	bl	16d00 <counter_sub>
	if (diff > MAX_CYCLES) {
   16d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   16d58:	d204      	bcs.n	16d64 <set_absolute_alarm+0x3a>
}
   16d5a:	bd38      	pop	{r3, r4, r5, pc}
		handle_next_cycle_case(t);
   16d5c:	4628      	mov	r0, r5
   16d5e:	f7ff ffd3 	bl	16d08 <handle_next_cycle_case>
		return;
   16d62:	e7fa      	b.n	16d5a <set_absolute_alarm+0x30>
		handle_next_cycle_case(t);
   16d64:	4628      	mov	r0, r5
   16d66:	f7ff ffcf 	bl	16d08 <handle_next_cycle_case>
   16d6a:	e7f6      	b.n	16d5a <set_absolute_alarm+0x30>

00016d6c <set_protected_absolute_alarm>:
{
   16d6c:	b510      	push	{r4, lr}
   16d6e:	4604      	mov	r4, r0
	int_disable();
   16d70:	f7f7 fdbe 	bl	e8f0 <int_disable>
	prevent_false_prev_evt();
   16d74:	f7f7 fde4 	bl	e940 <prevent_false_prev_evt>
	set_absolute_alarm(cycles);
   16d78:	4620      	mov	r0, r4
   16d7a:	f7ff ffd6 	bl	16d2a <set_absolute_alarm>
	int_enable();
   16d7e:	f7f7 fdbf 	bl	e900 <int_enable>
}
   16d82:	bd10      	pop	{r4, pc}

00016d84 <spm_request_read>:
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   16d84:	b510      	push	{r4, lr}
   16d86:	b40f      	push	{r0, r1, r2, r3}
   16d88:	f7fd fcbe 	bl	14708 <k_sched_lock>
   16d8c:	bc0f      	pop	{r0, r1, r2, r3}
   16d8e:	f7f1 f92f 	bl	7ff0 <spm_request_read_nse>
   16d92:	b40f      	push	{r0, r1, r2, r3}
   16d94:	f7fd fd12 	bl	147bc <k_sched_unlock>
   16d98:	bc0f      	pop	{r0, r1, r2, r3}
   16d9a:	bd10      	pop	{r4, pc}

00016d9c <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
   16d9c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   16d9e:	2100      	movs	r1, #0
   16da0:	2001      	movs	r0, #1
   16da2:	f000 f809 	bl	16db8 <z_arm_fatal_error>
}
   16da6:	bd08      	pop	{r3, pc}

00016da8 <z_arm_prepare_switch_to_main>:
{
   16da8:	b508      	push	{r3, lr}
	z_arm_configure_static_mpu_regions();
   16daa:	f7f8 fc07 	bl	f5bc <z_arm_configure_static_mpu_regions>
}
   16dae:	bd08      	pop	{r3, pc}

00016db0 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   16db0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   16db2:	f383 880b 	msr	PSPLIM, r3
}
   16db6:	4770      	bx	lr

00016db8 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16db8:	b538      	push	{r3, r4, r5, lr}
   16dba:	4604      	mov	r4, r0

	if (esf != NULL) {
   16dbc:	460d      	mov	r5, r1
   16dbe:	b111      	cbz	r1, 16dc6 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   16dc0:	4608      	mov	r0, r1
   16dc2:	f7f7 ff41 	bl	ec48 <esf_dump>
	}
	z_fatal_error(reason, esf);
   16dc6:	4629      	mov	r1, r5
   16dc8:	4620      	mov	r0, r4
   16dca:	f7fd f963 	bl	14094 <z_fatal_error>
}
   16dce:	bd38      	pop	{r3, r4, r5, pc}

00016dd0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   16dd0:	b508      	push	{r3, lr}
   16dd2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   16dd4:	6800      	ldr	r0, [r0, #0]
   16dd6:	f7ff ffef 	bl	16db8 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   16dda:	bd08      	pop	{r3, pc}

00016ddc <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   16ddc:	b508      	push	{r3, lr}
	handler();
   16dde:	f7f7 ff83 	bl	ece8 <z_SysNmiOnReset>
	z_arm_int_exit();
   16de2:	f7f8 fb97 	bl	f514 <z_arm_exc_exit>
}
   16de6:	bd08      	pop	{r3, pc}

00016de8 <memory_fault_recoverable>:
}
   16de8:	2000      	movs	r0, #0
   16dea:	4770      	bx	lr

00016dec <fault_handle>:
{
   16dec:	b508      	push	{r3, lr}
	*recoverable = false;
   16dee:	2300      	movs	r3, #0
   16df0:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   16df2:	1ecb      	subs	r3, r1, #3
   16df4:	2b09      	cmp	r3, #9
   16df6:	d819      	bhi.n	16e2c <fault_handle+0x40>
   16df8:	e8df f003 	tbb	[pc, r3]
   16dfc:	110d0905 	.word	0x110d0905
   16e00:	18181818 	.word	0x18181818
   16e04:	1418      	.short	0x1418
		reason = hard_fault(esf, recoverable);
   16e06:	4611      	mov	r1, r2
   16e08:	f7f8 fa6a 	bl	f2e0 <hard_fault>
}
   16e0c:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   16e0e:	2100      	movs	r1, #0
   16e10:	f7f8 f8c0 	bl	ef94 <mem_manage_fault>
		break;
   16e14:	e7fa      	b.n	16e0c <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   16e16:	2100      	movs	r1, #0
   16e18:	f7f8 f982 	bl	f120 <bus_fault>
		break;
   16e1c:	e7f6      	b.n	16e0c <fault_handle+0x20>
		reason = usage_fault(esf);
   16e1e:	f7f7 ffcb 	bl	edb8 <usage_fault>
		break;
   16e22:	e7f3      	b.n	16e0c <fault_handle+0x20>
		debug_monitor(esf);
   16e24:	f7f8 f89c 	bl	ef60 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   16e28:	2000      	movs	r0, #0
		break;
   16e2a:	e7ef      	b.n	16e0c <fault_handle+0x20>
		reserved_exception(esf, fault);
   16e2c:	f7f8 facc 	bl	f3c8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   16e30:	2000      	movs	r0, #0
	return reason;
   16e32:	e7eb      	b.n	16e0c <fault_handle+0x20>

00016e34 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   16e34:	6843      	ldr	r3, [r0, #4]
		&&
   16e36:	2b1f      	cmp	r3, #31
   16e38:	d90a      	bls.n	16e50 <mpu_partition_is_valid+0x1c>
		&&
   16e3a:	f013 0f1f 	tst.w	r3, #31
   16e3e:	d001      	beq.n	16e44 <mpu_partition_is_valid+0x10>
		&&
   16e40:	2000      	movs	r0, #0
   16e42:	4770      	bx	lr
		((part->start &
   16e44:	6803      	ldr	r3, [r0, #0]
		&&
   16e46:	f013 0f1f 	tst.w	r3, #31
   16e4a:	d003      	beq.n	16e54 <mpu_partition_is_valid+0x20>
   16e4c:	2000      	movs	r0, #0
   16e4e:	4770      	bx	lr
   16e50:	2000      	movs	r0, #0
   16e52:	4770      	bx	lr
   16e54:	2001      	movs	r0, #1
}
   16e56:	4770      	bx	lr

00016e58 <mpu_configure_region>:
{
   16e58:	b530      	push	{r4, r5, lr}
   16e5a:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   16e5c:	680b      	ldr	r3, [r1, #0]
   16e5e:	9300      	str	r3, [sp, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   16e60:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   16e62:	890d      	ldrh	r5, [r1, #8]
   16e64:	f89d 2008 	ldrb.w	r2, [sp, #8]
   16e68:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   16e6c:	7a89      	ldrb	r1, [r1, #10]
   16e6e:	f361 1247 	bfi	r2, r1, #5, #3
   16e72:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   16e76:	f023 031f 	bic.w	r3, r3, #31
   16e7a:	4423      	add	r3, r4
   16e7c:	3b01      	subs	r3, #1
   16e7e:	f023 031f 	bic.w	r3, r3, #31
   16e82:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   16e84:	4669      	mov	r1, sp
   16e86:	f7f8 fbe5 	bl	f654 <region_allocate_and_init>
}
   16e8a:	b005      	add	sp, #20
   16e8c:	bd30      	pop	{r4, r5, pc}

00016e8e <arm_core_mpu_configure_static_mpu_regions>:
{
   16e8e:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   16e90:	f7f8 fcf6 	bl	f880 <mpu_configure_static_mpu_regions>
}
   16e94:	bd08      	pop	{r3, pc}

00016e96 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   16e96:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   16e98:	f7f8 fcfc 	bl	f894 <mpu_mark_areas_for_dynamic_regions>
}
   16e9c:	bd08      	pop	{r3, pc}

00016e9e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   16e9e:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   16ea2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   16ea6:	d001      	beq.n	16eac <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   16ea8:	b2c0      	uxtb	r0, r0
   16eaa:	4770      	bx	lr
	}

	return -EINVAL;
   16eac:	f06f 0015 	mvn.w	r0, #21
}
   16eb0:	4770      	bx	lr

00016eb2 <free>:

	return new_ptr;
}

void free(void *ptr)
{
   16eb2:	b508      	push	{r3, lr}
	sys_mem_pool_free(ptr);
   16eb4:	f7f5 fc4e 	bl	c754 <sys_mem_pool_free>
}
   16eb8:	bd08      	pop	{r3, pc}

00016eba <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   16eba:	4602      	mov	r2, r0
   16ebc:	780b      	ldrb	r3, [r1, #0]
   16ebe:	b11b      	cbz	r3, 16ec8 <strcpy+0xe>
		*d = *s;
   16ec0:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   16ec4:	3101      	adds	r1, #1
   16ec6:	e7f9      	b.n	16ebc <strcpy+0x2>
	}

	*d = '\0';
   16ec8:	7013      	strb	r3, [r2, #0]

	return dest;
}
   16eca:	4770      	bx	lr

00016ecc <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   16ecc:	4603      	mov	r3, r0
   16ece:	b1a2      	cbz	r2, 16efa <strncpy+0x2e>
{
   16ed0:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   16ed2:	780c      	ldrb	r4, [r1, #0]
   16ed4:	b12c      	cbz	r4, 16ee2 <strncpy+0x16>
		*d = *s;
   16ed6:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   16eda:	3101      	adds	r1, #1
		d++;
		n--;
   16edc:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   16ede:	2a00      	cmp	r2, #0
   16ee0:	d1f7      	bne.n	16ed2 <strncpy+0x6>
	}

	while (n > 0) {
   16ee2:	b122      	cbz	r2, 16eee <strncpy+0x22>
		*d = '\0';
   16ee4:	2100      	movs	r1, #0
   16ee6:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   16eea:	3a01      	subs	r2, #1
   16eec:	e7f9      	b.n	16ee2 <strncpy+0x16>
	}

	return dest;
}
   16eee:	bc10      	pop	{r4}
   16ef0:	4770      	bx	lr
		*d = '\0';
   16ef2:	2100      	movs	r1, #0
   16ef4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   16ef8:	3a01      	subs	r2, #1
	while (n > 0) {
   16efa:	2a00      	cmp	r2, #0
   16efc:	d1f9      	bne.n	16ef2 <strncpy+0x26>
   16efe:	4770      	bx	lr

00016f00 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   16f00:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   16f02:	7803      	ldrb	r3, [r0, #0]
   16f04:	428b      	cmp	r3, r1
   16f06:	d002      	beq.n	16f0e <strchr+0xe>
   16f08:	b10b      	cbz	r3, 16f0e <strchr+0xe>
		s++;
   16f0a:	3001      	adds	r0, #1
   16f0c:	e7f9      	b.n	16f02 <strchr+0x2>
	}

	return (*s == tmp) ? (char *) s : NULL;
   16f0e:	428b      	cmp	r3, r1
   16f10:	d100      	bne.n	16f14 <strchr+0x14>
}
   16f12:	4770      	bx	lr
	return (*s == tmp) ? (char *) s : NULL;
   16f14:	2000      	movs	r0, #0
   16f16:	e7fc      	b.n	16f12 <strchr+0x12>

00016f18 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   16f18:	4603      	mov	r3, r0
	size_t n = 0;
   16f1a:	2000      	movs	r0, #0

	while (*s != '\0') {
   16f1c:	781a      	ldrb	r2, [r3, #0]
   16f1e:	b112      	cbz	r2, 16f26 <strlen+0xe>
		s++;
   16f20:	3301      	adds	r3, #1
		n++;
   16f22:	3001      	adds	r0, #1
   16f24:	e7fa      	b.n	16f1c <strlen+0x4>
	}

	return n;
}
   16f26:	4770      	bx	lr

00016f28 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   16f28:	7803      	ldrb	r3, [r0, #0]
   16f2a:	780a      	ldrb	r2, [r1, #0]
   16f2c:	4293      	cmp	r3, r2
   16f2e:	d103      	bne.n	16f38 <strcmp+0x10>
   16f30:	b113      	cbz	r3, 16f38 <strcmp+0x10>
		s1++;
   16f32:	3001      	adds	r0, #1
		s2++;
   16f34:	3101      	adds	r1, #1
   16f36:	e7f7      	b.n	16f28 <strcmp>
	}

	return *s1 - *s2;
}
   16f38:	1a98      	subs	r0, r3, r2
   16f3a:	4770      	bx	lr

00016f3c <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   16f3c:	b192      	cbz	r2, 16f64 <strncmp+0x28>
{
   16f3e:	b410      	push	{r4}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   16f40:	7803      	ldrb	r3, [r0, #0]
   16f42:	780c      	ldrb	r4, [r1, #0]
   16f44:	42a3      	cmp	r3, r4
   16f46:	d105      	bne.n	16f54 <strncmp+0x18>
   16f48:	b123      	cbz	r3, 16f54 <strncmp+0x18>
		s1++;
   16f4a:	3001      	adds	r0, #1
		s2++;
   16f4c:	3101      	adds	r1, #1
		n--;
   16f4e:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   16f50:	2a00      	cmp	r2, #0
   16f52:	d1f5      	bne.n	16f40 <strncmp+0x4>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   16f54:	b122      	cbz	r2, 16f60 <strncmp+0x24>
   16f56:	7800      	ldrb	r0, [r0, #0]
   16f58:	780b      	ldrb	r3, [r1, #0]
   16f5a:	1ac0      	subs	r0, r0, r3
}
   16f5c:	bc10      	pop	{r4}
   16f5e:	4770      	bx	lr
	return (n == 0) ? 0 : (*s1 - *s2);
   16f60:	2000      	movs	r0, #0
   16f62:	e7fb      	b.n	16f5c <strncmp+0x20>
   16f64:	b11a      	cbz	r2, 16f6e <strncmp+0x32>
   16f66:	7800      	ldrb	r0, [r0, #0]
   16f68:	780b      	ldrb	r3, [r1, #0]
   16f6a:	1ac0      	subs	r0, r0, r3
   16f6c:	4770      	bx	lr
   16f6e:	2000      	movs	r0, #0
}
   16f70:	4770      	bx	lr

00016f72 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   16f72:	b17a      	cbz	r2, 16f94 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   16f74:	1e53      	subs	r3, r2, #1
   16f76:	d00f      	beq.n	16f98 <memcmp+0x26>
{
   16f78:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   16f7a:	7804      	ldrb	r4, [r0, #0]
   16f7c:	780a      	ldrb	r2, [r1, #0]
   16f7e:	4294      	cmp	r4, r2
   16f80:	d103      	bne.n	16f8a <memcmp+0x18>
		c1++;
   16f82:	3001      	adds	r0, #1
		c2++;
   16f84:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   16f86:	3b01      	subs	r3, #1
   16f88:	d1f7      	bne.n	16f7a <memcmp+0x8>
	}

	return *c1 - *c2;
   16f8a:	7800      	ldrb	r0, [r0, #0]
   16f8c:	780b      	ldrb	r3, [r1, #0]
   16f8e:	1ac0      	subs	r0, r0, r3
}
   16f90:	bc10      	pop	{r4}
   16f92:	4770      	bx	lr
		return 0;
   16f94:	2000      	movs	r0, #0
   16f96:	4770      	bx	lr
	return *c1 - *c2;
   16f98:	7800      	ldrb	r0, [r0, #0]
   16f9a:	780b      	ldrb	r3, [r1, #0]
   16f9c:	1ac0      	subs	r0, r0, r3
}
   16f9e:	4770      	bx	lr

00016fa0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   16fa0:	b410      	push	{r4}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   16fa2:	ea80 0301 	eor.w	r3, r0, r1
   16fa6:	f013 0f03 	tst.w	r3, #3
   16faa:	d001      	beq.n	16fb0 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   16fac:	4603      	mov	r3, r0
   16fae:	e017      	b.n	16fe0 <memcpy+0x40>
   16fb0:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   16fb2:	f013 0f03 	tst.w	r3, #3
   16fb6:	d00b      	beq.n	16fd0 <memcpy+0x30>
			if (n == 0) {
   16fb8:	b1a2      	cbz	r2, 16fe4 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   16fba:	f811 4b01 	ldrb.w	r4, [r1], #1
   16fbe:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   16fc2:	3a01      	subs	r2, #1
   16fc4:	e7f5      	b.n	16fb2 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   16fc6:	f851 4b04 	ldr.w	r4, [r1], #4
   16fca:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   16fce:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   16fd0:	2a03      	cmp	r2, #3
   16fd2:	d8f8      	bhi.n	16fc6 <memcpy+0x26>
   16fd4:	e004      	b.n	16fe0 <memcpy+0x40>
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   16fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
   16fda:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   16fde:	3a01      	subs	r2, #1
	while (n > 0) {
   16fe0:	2a00      	cmp	r2, #0
   16fe2:	d1f8      	bne.n	16fd6 <memcpy+0x36>
	}

	return d;
}
   16fe4:	bc10      	pop	{r4}
   16fe6:	4770      	bx	lr

00016fe8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   16fe8:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   16fea:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   16fec:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   16fee:	f013 0f03 	tst.w	r3, #3
   16ff2:	d004      	beq.n	16ffe <memset+0x16>
		if (n == 0) {
   16ff4:	b19a      	cbz	r2, 1701e <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   16ff6:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   16ffa:	3a01      	subs	r2, #1
   16ffc:	e7f7      	b.n	16fee <memset+0x6>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   16ffe:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   17000:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   17004:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   17008:	2a03      	cmp	r2, #3
   1700a:	d906      	bls.n	1701a <memset+0x32>
		*(d_word++) = c_word;
   1700c:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   17010:	3a04      	subs	r2, #4
   17012:	e7f9      	b.n	17008 <memset+0x20>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
   17014:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   17018:	3a01      	subs	r2, #1
	while (n > 0) {
   1701a:	2a00      	cmp	r2, #0
   1701c:	d1fa      	bne.n	17014 <memset+0x2c>
	}

	return buf;
}
   1701e:	bc10      	pop	{r4}
   17020:	4770      	bx	lr

00017022 <strspn>:
#include <string.h>
#include <string.h>

size_t strspn(const char *s,
	      const char *accept)
{
   17022:	b570      	push	{r4, r5, r6, lr}
   17024:	4606      	mov	r6, r0
   17026:	460d      	mov	r5, r1
	const char *ins = s;

	while ((*s != '\0') && (strchr(accept, *s) != NULL)) {
   17028:	4604      	mov	r4, r0
   1702a:	7821      	ldrb	r1, [r4, #0]
   1702c:	b129      	cbz	r1, 1703a <strspn+0x18>
   1702e:	4628      	mov	r0, r5
   17030:	f7ff ff66 	bl	16f00 <strchr>
   17034:	b108      	cbz	r0, 1703a <strspn+0x18>
		++s;
   17036:	3401      	adds	r4, #1
   17038:	e7f7      	b.n	1702a <strspn+0x8>
	}

	return s - ins;
}
   1703a:	1ba0      	subs	r0, r4, r6
   1703c:	bd70      	pop	{r4, r5, r6, pc}

0001703e <strcspn>:

size_t strcspn(const char *s,
	       const char *reject)
{
   1703e:	b570      	push	{r4, r5, r6, lr}
   17040:	4606      	mov	r6, r0
   17042:	460d      	mov	r5, r1
	const char *ins = s;

	while ((*s != '\0') && (strchr(reject, *s) == NULL)) {
   17044:	4604      	mov	r4, r0
   17046:	7821      	ldrb	r1, [r4, #0]
   17048:	b129      	cbz	r1, 17056 <strcspn+0x18>
   1704a:	4628      	mov	r0, r5
   1704c:	f7ff ff58 	bl	16f00 <strchr>
   17050:	b908      	cbnz	r0, 17056 <strcspn+0x18>
		++s;
   17052:	3401      	adds	r4, #1
   17054:	e7f7      	b.n	17046 <strcspn+0x8>
	}

	return s - ins;
}
   17056:	1ba0      	subs	r0, r4, r6
   17058:	bd70      	pop	{r4, r5, r6, pc}

0001705a <_stdout_hook_default>:
}
   1705a:	f04f 30ff 	mov.w	r0, #4294967295
   1705e:	4770      	bx	lr

00017060 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   17060:	684b      	ldr	r3, [r1, #4]
   17062:	2b01      	cmp	r3, #1
   17064:	dd07      	ble.n	17076 <sprintf_out+0x16>
		*(p->ptr) = c;
   17066:	680b      	ldr	r3, [r1, #0]
   17068:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1706a:	680b      	ldr	r3, [r1, #0]
   1706c:	3301      	adds	r3, #1
   1706e:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   17070:	684b      	ldr	r3, [r1, #4]
   17072:	3b01      	subs	r3, #1
   17074:	604b      	str	r3, [r1, #4]
}
   17076:	2000      	movs	r0, #0
   17078:	4770      	bx	lr

0001707a <fs_type_get>:
{
   1707a:	b508      	push	{r3, lr}
	struct registry_entry *ep = registry_find(type);
   1707c:	f7f8 fcea 	bl	fa54 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   17080:	4603      	mov	r3, r0
   17082:	b100      	cbz	r0, 17086 <fs_type_get+0xc>
   17084:	6843      	ldr	r3, [r0, #4]
}
   17086:	4618      	mov	r0, r3
   17088:	bd08      	pop	{r3, pc}

0001708a <lfs_to_errno>:
	if (error >= 0) {
   1708a:	2800      	cmp	r0, #0
   1708c:	da37      	bge.n	170fe <lfs_to_errno+0x74>
	switch (error) {
   1708e:	f100 0354 	add.w	r3, r0, #84	; 0x54
   17092:	2b52      	cmp	r3, #82	; 0x52
   17094:	d82b      	bhi.n	170ee <lfs_to_errno+0x64>
   17096:	e8df f003 	tbb	[pc, r3]
   1709a:	2a30      	.short	0x2a30
   1709c:	2a2a2a2a 	.word	0x2a2a2a2a
   170a0:	2a2a2a2a 	.word	0x2a2a2a2a
   170a4:	2a2a2a2a 	.word	0x2a2a2a2a
   170a8:	2a2a2a2a 	.word	0x2a2a2a2a
   170ac:	2a2a2a2a 	.word	0x2a2a2a2a
   170b0:	2a2a2a2a 	.word	0x2a2a2a2a
   170b4:	2a2a2a2a 	.word	0x2a2a2a2a
   170b8:	2a2a2a2a 	.word	0x2a2a2a2a
   170bc:	2a2a2a2a 	.word	0x2a2a2a2a
   170c0:	2a2a2a2a 	.word	0x2a2a2a2a
   170c4:	2d2a2a2a 	.word	0x2d2a2a2a
   170c8:	2a2a2a2a 	.word	0x2a2a2a2a
   170cc:	2a2a2a2a 	.word	0x2a2a2a2a
   170d0:	32322a2a 	.word	0x32322a2a
   170d4:	2a2a2a2a 	.word	0x2a2a2a2a
   170d8:	2a323232 	.word	0x2a323232
   170dc:	2a2a322a 	.word	0x2a2a322a
   170e0:	2a322a2a 	.word	0x2a322a2a
   170e4:	2a2a322a 	.word	0x2a2a322a
   170e8:	2a2a2a2a 	.word	0x2a2a2a2a
   170ec:	32          	.byte	0x32
   170ed:	00          	.byte	0x00
	if (error >= 0) {
   170ee:	f06f 0004 	mvn.w	r0, #4
   170f2:	4770      	bx	lr
		return -ENOTEMPTY;
   170f4:	f06f 000e 	mvn.w	r0, #14
   170f8:	4770      	bx	lr
		return -EFAULT;
   170fa:	f06f 000d 	mvn.w	r0, #13
}
   170fe:	4770      	bx	lr

00017100 <errno_to_lfs>:
	if (error >= 0) {
   17100:	2800      	cmp	r0, #0
   17102:	da19      	bge.n	17138 <errno_to_lfs+0x38>
	switch (error) {
   17104:	f100 031c 	add.w	r3, r0, #28
   17108:	2b1a      	cmp	r3, #26
   1710a:	d80f      	bhi.n	1712c <errno_to_lfs+0x2c>
   1710c:	e8df f003 	tbb	[pc, r3]
   17110:	0e0e1818 	.word	0x0e0e1818
   17114:	18180e0e 	.word	0x18180e0e
   17118:	180e0e18 	.word	0x180e0e18
   1711c:	0e16110e 	.word	0x0e16110e
   17120:	180e0e18 	.word	0x180e0e18
   17124:	0e0e0e0e 	.word	0x0e0e0e0e
   17128:	0e0e      	.short	0x0e0e
   1712a:	18          	.byte	0x18
   1712b:	00          	.byte	0x00
	if (error >= 0) {
   1712c:	f06f 0004 	mvn.w	r0, #4
   17130:	4770      	bx	lr
		return LFS_ERR_NOTEMPTY;
   17132:	f06f 0026 	mvn.w	r0, #38	; 0x26
   17136:	4770      	bx	lr
		return LFS_ERR_OK;
   17138:	2000      	movs	r0, #0
   1713a:	4770      	bx	lr
		return LFS_ERR_CORRUPT;
   1713c:	f06f 0053 	mvn.w	r0, #83	; 0x53
}
   17140:	4770      	bx	lr

00017142 <lfs_api_sync>:
}
   17142:	2000      	movs	r0, #0
   17144:	4770      	bx	lr

00017146 <lfs_flags_from_zephyr>:
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   17146:	0102      	lsls	r2, r0, #4
   17148:	f402 7280 	and.w	r2, r2, #256	; 0x100
	flags |= (zflags & FS_O_READ) ? LFS_O_RDONLY : 0;
   1714c:	f000 0301 	and.w	r3, r0, #1
   17150:	431a      	orrs	r2, r3
	flags |= (zflags & FS_O_WRITE) ? LFS_O_WRONLY : 0;
   17152:	f000 0302 	and.w	r3, r0, #2
   17156:	4313      	orrs	r3, r2
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   17158:	0180      	lsls	r0, r0, #6
   1715a:	f400 6000 	and.w	r0, r0, #2048	; 0x800
}
   1715e:	4318      	orrs	r0, r3
   17160:	4770      	bx	lr

00017162 <get_page_cb>:
{
   17162:	b430      	push	{r4, r5}
	size_t info_start = info->start_offset;
   17164:	6804      	ldr	r4, [r0, #0]
	size_t info_end = info_start + info->size - 1U;
   17166:	6845      	ldr	r5, [r0, #4]
   17168:	192a      	adds	r2, r5, r4
   1716a:	3a01      	subs	r2, #1
	size_t area_start = ctx->area->fa_off;
   1716c:	680b      	ldr	r3, [r1, #0]
   1716e:	6858      	ldr	r0, [r3, #4]
	size_t area_end = area_start + ctx->area->fa_size - 1U;
   17170:	689b      	ldr	r3, [r3, #8]
   17172:	4403      	add	r3, r0
	if (info_end < area_start) {
   17174:	4282      	cmp	r2, r0
   17176:	d308      	bcc.n	1718a <get_page_cb+0x28>
   17178:	3b01      	subs	r3, #1
	if (info_start > area_end) {
   1717a:	429c      	cmp	r4, r3
   1717c:	d808      	bhi.n	17190 <get_page_cb+0x2e>
	if (info->size > ctx->max_size) {
   1717e:	684b      	ldr	r3, [r1, #4]
   17180:	429d      	cmp	r5, r3
   17182:	d907      	bls.n	17194 <get_page_cb+0x32>
		ctx->max_size = info->size;
   17184:	604d      	str	r5, [r1, #4]
	return true;
   17186:	2001      	movs	r0, #1
   17188:	e000      	b.n	1718c <get_page_cb+0x2a>
		return true;
   1718a:	2001      	movs	r0, #1
}
   1718c:	bc30      	pop	{r4, r5}
   1718e:	4770      	bx	lr
		return false;
   17190:	2000      	movs	r0, #0
   17192:	e7fb      	b.n	1718c <get_page_cb+0x2a>
	return true;
   17194:	2001      	movs	r0, #1
   17196:	e7f9      	b.n	1718c <get_page_cb+0x2a>

00017198 <info_to_dirent>:
{
   17198:	b510      	push	{r4, lr}
   1719a:	460c      	mov	r4, r1
	entry->type = ((info->type == LFS_TYPE_DIR) ?
   1719c:	7803      	ldrb	r3, [r0, #0]
		       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   1719e:	2b02      	cmp	r3, #2
   171a0:	bf14      	ite	ne
   171a2:	2300      	movne	r3, #0
   171a4:	2301      	moveq	r3, #1
	entry->type = ((info->type == LFS_TYPE_DIR) ?
   171a6:	700b      	strb	r3, [r1, #0]
	entry->size = info->size;
   171a8:	6843      	ldr	r3, [r0, #4]
   171aa:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
	strncpy(entry->name, info->name, sizeof(entry->name));
   171ae:	f240 1201 	movw	r2, #257	; 0x101
   171b2:	f100 0108 	add.w	r1, r0, #8
   171b6:	1c60      	adds	r0, r4, #1
   171b8:	f7ff fe88 	bl	16ecc <strncpy>
	entry->name[sizeof(entry->name) - 1] = '\0';
   171bc:	2300      	movs	r3, #0
   171be:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
}
   171c2:	bd10      	pop	{r4, pc}

000171c4 <lfs_api_erase>:
{
   171c4:	b508      	push	{r3, lr}
	size_t offset = block * c->block_size;
   171c6:	69c2      	ldr	r2, [r0, #28]
	int rc = flash_area_erase(fa, offset, c->block_size);
   171c8:	fb01 f102 	mul.w	r1, r1, r2
   171cc:	6800      	ldr	r0, [r0, #0]
   171ce:	f7ff fc8b 	bl	16ae8 <flash_area_erase>
	return errno_to_lfs(rc);
   171d2:	f7ff ff95 	bl	17100 <errno_to_lfs>
}
   171d6:	bd08      	pop	{r3, pc}

000171d8 <lfs_api_prog>:
{
   171d8:	b538      	push	{r3, r4, r5, lr}
   171da:	4614      	mov	r4, r2
   171dc:	461a      	mov	r2, r3
	size_t offset = block * c->block_size + off;
   171de:	69c5      	ldr	r5, [r0, #28]
	int rc = flash_area_write(fa, offset, buffer, size);
   171e0:	9b04      	ldr	r3, [sp, #16]
   171e2:	fb01 4105 	mla	r1, r1, r5, r4
   171e6:	6800      	ldr	r0, [r0, #0]
   171e8:	f7ff fc4e 	bl	16a88 <flash_area_write>
	return errno_to_lfs(rc);
   171ec:	f7ff ff88 	bl	17100 <errno_to_lfs>
}
   171f0:	bd38      	pop	{r3, r4, r5, pc}

000171f2 <lfs_api_read>:
{
   171f2:	b538      	push	{r3, r4, r5, lr}
   171f4:	4614      	mov	r4, r2
   171f6:	461a      	mov	r2, r3
	size_t offset = block * c->block_size + off;
   171f8:	69c5      	ldr	r5, [r0, #28]
	int rc = flash_area_read(fa, offset, buffer, size);
   171fa:	9b04      	ldr	r3, [sp, #16]
   171fc:	fb01 4105 	mla	r1, r1, r5, r4
   17200:	6800      	ldr	r0, [r0, #0]
   17202:	f7ff fc22 	bl	16a4a <flash_area_read>
	return errno_to_lfs(rc);
   17206:	f7ff ff7b 	bl	17100 <errno_to_lfs>
}
   1720a:	bd38      	pop	{r3, r4, r5, pc}

0001720c <littlefs_tell>:
{
   1720c:	b570      	push	{r4, r5, r6, lr}
   1720e:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   17210:	6843      	ldr	r3, [r0, #4]
   17212:	691e      	ldr	r6, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   17214:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   17218:	f04f 32ff 	mov.w	r2, #4294967295
   1721c:	f04f 33ff 	mov.w	r3, #4294967295
   17220:	4628      	mov	r0, r5
   17222:	f7fd f931 	bl	14488 <z_impl_k_mutex_lock>
	off_t ret = lfs_file_tell(&fs->lfs, LFS_FILEP(fp));
   17226:	6821      	ldr	r1, [r4, #0]
   17228:	f106 0070 	add.w	r0, r6, #112	; 0x70
   1722c:	f001 f979 	bl	18522 <lfs_file_tell>
   17230:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   17232:	4628      	mov	r0, r5
   17234:	f7fd f9b2 	bl	1459c <z_impl_k_mutex_unlock>
}
   17238:	4620      	mov	r0, r4
   1723a:	bd70      	pop	{r4, r5, r6, pc}

0001723c <littlefs_sync>:
{
   1723c:	b570      	push	{r4, r5, r6, lr}
   1723e:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   17240:	6843      	ldr	r3, [r0, #4]
   17242:	691e      	ldr	r6, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   17244:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   17248:	f04f 32ff 	mov.w	r2, #4294967295
   1724c:	f04f 33ff 	mov.w	r3, #4294967295
   17250:	4628      	mov	r0, r5
   17252:	f7fd f919 	bl	14488 <z_impl_k_mutex_lock>
	int ret = lfs_file_sync(&fs->lfs, LFS_FILEP(fp));
   17256:	6821      	ldr	r1, [r4, #0]
   17258:	f106 0070 	add.w	r0, r6, #112	; 0x70
   1725c:	f001 fc18 	bl	18a90 <lfs_file_sync>
   17260:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   17262:	4628      	mov	r0, r5
   17264:	f7fd f99a 	bl	1459c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   17268:	4620      	mov	r0, r4
   1726a:	f7ff ff0e 	bl	1708a <lfs_to_errno>
}
   1726e:	bd70      	pop	{r4, r5, r6, pc}

00017270 <littlefs_truncate>:
{
   17270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17272:	4604      	mov	r4, r0
   17274:	460d      	mov	r5, r1
	struct fs_littlefs *fs = fp->mp->fs_data;
   17276:	6843      	ldr	r3, [r0, #4]
   17278:	691f      	ldr	r7, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1727a:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1727e:	f04f 32ff 	mov.w	r2, #4294967295
   17282:	f04f 33ff 	mov.w	r3, #4294967295
   17286:	4630      	mov	r0, r6
   17288:	f7fd f8fe 	bl	14488 <z_impl_k_mutex_lock>
	int ret = lfs_file_truncate(&fs->lfs, LFS_FILEP(fp), length);
   1728c:	462a      	mov	r2, r5
   1728e:	6821      	ldr	r1, [r4, #0]
   17290:	f107 0070 	add.w	r0, r7, #112	; 0x70
   17294:	f001 fb75 	bl	18982 <lfs_file_truncate>
   17298:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1729a:	4630      	mov	r0, r6
   1729c:	f7fd f97e 	bl	1459c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   172a0:	4620      	mov	r0, r4
   172a2:	f7ff fef2 	bl	1708a <lfs_to_errno>
}
   172a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000172a8 <littlefs_mkdir>:
{
   172a8:	b570      	push	{r4, r5, r6, lr}
   172aa:	4603      	mov	r3, r0
   172ac:	4608      	mov	r0, r1
	struct fs_littlefs *fs = mountp->fs_data;
   172ae:	691e      	ldr	r6, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   172b0:	4619      	mov	r1, r3
   172b2:	f7f9 f8c7 	bl	10444 <fs_impl_strip_prefix>
   172b6:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   172b8:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   172bc:	f04f 32ff 	mov.w	r2, #4294967295
   172c0:	f04f 33ff 	mov.w	r3, #4294967295
   172c4:	4628      	mov	r0, r5
   172c6:	f7fd f8df 	bl	14488 <z_impl_k_mutex_lock>
	int ret = lfs_mkdir(&fs->lfs, path);
   172ca:	4621      	mov	r1, r4
   172cc:	f106 0070 	add.w	r0, r6, #112	; 0x70
   172d0:	f7fc f90c 	bl	134ec <lfs_mkdir>
   172d4:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   172d6:	4628      	mov	r0, r5
   172d8:	f7fd f960 	bl	1459c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   172dc:	4620      	mov	r0, r4
   172de:	f7ff fed4 	bl	1708a <lfs_to_errno>
}
   172e2:	bd70      	pop	{r4, r5, r6, pc}

000172e4 <littlefs_close>:
{
   172e4:	b570      	push	{r4, r5, r6, lr}
   172e6:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   172e8:	6843      	ldr	r3, [r0, #4]
   172ea:	691d      	ldr	r5, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   172ec:	f105 06ec 	add.w	r6, r5, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   172f0:	f04f 32ff 	mov.w	r2, #4294967295
   172f4:	f04f 33ff 	mov.w	r3, #4294967295
   172f8:	4630      	mov	r0, r6
   172fa:	f7fd f8c5 	bl	14488 <z_impl_k_mutex_lock>
	int ret = lfs_file_close(&fs->lfs, LFS_FILEP(fp));
   172fe:	6821      	ldr	r1, [r4, #0]
   17300:	f105 0070 	add.w	r0, r5, #112	; 0x70
   17304:	f001 fc1e 	bl	18b44 <lfs_file_close>
   17308:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   1730a:	4630      	mov	r0, r6
   1730c:	f7fd f946 	bl	1459c <z_impl_k_mutex_unlock>
	release_file_data(fp);
   17310:	4620      	mov	r0, r4
   17312:	f7f9 f8bf 	bl	10494 <release_file_data>
	return lfs_to_errno(ret);
   17316:	4628      	mov	r0, r5
   17318:	f7ff feb7 	bl	1708a <lfs_to_errno>
}
   1731c:	bd70      	pop	{r4, r5, r6, pc}

0001731e <littlefs_unlink>:
{
   1731e:	b570      	push	{r4, r5, r6, lr}
   17320:	4603      	mov	r3, r0
   17322:	4608      	mov	r0, r1
	struct fs_littlefs *fs = mountp->fs_data;
   17324:	691e      	ldr	r6, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   17326:	4619      	mov	r1, r3
   17328:	f7f9 f88c 	bl	10444 <fs_impl_strip_prefix>
   1732c:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1732e:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   17332:	f04f 32ff 	mov.w	r2, #4294967295
   17336:	f04f 33ff 	mov.w	r3, #4294967295
   1733a:	4628      	mov	r0, r5
   1733c:	f7fd f8a4 	bl	14488 <z_impl_k_mutex_lock>
	int ret = lfs_remove(&fs->lfs, path);
   17340:	4621      	mov	r1, r4
   17342:	f106 0070 	add.w	r0, r6, #112	; 0x70
   17346:	f7fc fb9d 	bl	13a84 <lfs_remove>
   1734a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1734c:	4628      	mov	r0, r5
   1734e:	f7fd f925 	bl	1459c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   17352:	4620      	mov	r0, r4
   17354:	f7ff fe99 	bl	1708a <lfs_to_errno>
}
   17358:	bd70      	pop	{r4, r5, r6, pc}

0001735a <littlefs_read>:
{
   1735a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1735e:	4604      	mov	r4, r0
   17360:	460d      	mov	r5, r1
   17362:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   17364:	6843      	ldr	r3, [r0, #4]
   17366:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1736a:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1736e:	f04f 32ff 	mov.w	r2, #4294967295
   17372:	f04f 33ff 	mov.w	r3, #4294967295
   17376:	4638      	mov	r0, r7
   17378:	f7fd f886 	bl	14488 <z_impl_k_mutex_lock>
	ssize_t ret = lfs_file_read(&fs->lfs, LFS_FILEP(fp), ptr, len);
   1737c:	4633      	mov	r3, r6
   1737e:	462a      	mov	r2, r5
   17380:	6821      	ldr	r1, [r4, #0]
   17382:	f108 0070 	add.w	r0, r8, #112	; 0x70
   17386:	f7fb fb4d 	bl	12a24 <lfs_file_read>
   1738a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1738c:	4638      	mov	r0, r7
   1738e:	f7fd f905 	bl	1459c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   17392:	4620      	mov	r0, r4
   17394:	f7ff fe79 	bl	1708a <lfs_to_errno>
}
   17398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001739c <littlefs_write>:
{
   1739c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   173a0:	4604      	mov	r4, r0
   173a2:	460d      	mov	r5, r1
   173a4:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   173a6:	6843      	ldr	r3, [r0, #4]
   173a8:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   173ac:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   173b0:	f04f 32ff 	mov.w	r2, #4294967295
   173b4:	f04f 33ff 	mov.w	r3, #4294967295
   173b8:	4638      	mov	r0, r7
   173ba:	f7fd f865 	bl	14488 <z_impl_k_mutex_lock>
	ssize_t ret = lfs_file_write(&fs->lfs, LFS_FILEP(fp), ptr, len);
   173be:	4633      	mov	r3, r6
   173c0:	462a      	mov	r2, r5
   173c2:	6821      	ldr	r1, [r4, #0]
   173c4:	f108 0070 	add.w	r0, r8, #112	; 0x70
   173c8:	f001 f9c6 	bl	18758 <lfs_file_write>
   173cc:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   173ce:	4638      	mov	r0, r7
   173d0:	f7fd f8e4 	bl	1459c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   173d4:	4620      	mov	r0, r4
   173d6:	f7ff fe58 	bl	1708a <lfs_to_errno>
}
   173da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000173de <littlefs_seek>:
{
   173de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   173e2:	4604      	mov	r4, r0
   173e4:	460d      	mov	r5, r1
   173e6:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   173e8:	6843      	ldr	r3, [r0, #4]
   173ea:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   173ee:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   173f2:	f04f 32ff 	mov.w	r2, #4294967295
   173f6:	f04f 33ff 	mov.w	r3, #4294967295
   173fa:	4638      	mov	r0, r7
   173fc:	f7fd f844 	bl	14488 <z_impl_k_mutex_lock>
	off_t ret = lfs_file_seek(&fs->lfs, LFS_FILEP(fp), off, whence);
   17400:	4633      	mov	r3, r6
   17402:	462a      	mov	r2, r5
   17404:	6821      	ldr	r1, [r4, #0]
   17406:	f108 0070 	add.w	r0, r8, #112	; 0x70
   1740a:	f001 fa9e 	bl	1894a <lfs_file_seek>
   1740e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   17410:	4638      	mov	r0, r7
   17412:	f7fd f8c3 	bl	1459c <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   17416:	2c00      	cmp	r4, #0
   17418:	db00      	blt.n	1741c <littlefs_seek+0x3e>
		ret = 0;
   1741a:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   1741c:	4620      	mov	r0, r4
   1741e:	f7ff fe34 	bl	1708a <lfs_to_errno>
}
   17422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017426 <littlefs_rename>:
{
   17426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17428:	4604      	mov	r4, r0
   1742a:	4608      	mov	r0, r1
   1742c:	4616      	mov	r6, r2
	struct fs_littlefs *fs = mountp->fs_data;
   1742e:	6927      	ldr	r7, [r4, #16]
	from = fs_impl_strip_prefix(from, mountp);
   17430:	4621      	mov	r1, r4
   17432:	f7f9 f807 	bl	10444 <fs_impl_strip_prefix>
   17436:	4605      	mov	r5, r0
	to = fs_impl_strip_prefix(to, mountp);
   17438:	4621      	mov	r1, r4
   1743a:	4630      	mov	r0, r6
   1743c:	f7f9 f802 	bl	10444 <fs_impl_strip_prefix>
   17440:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   17442:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   17446:	f04f 32ff 	mov.w	r2, #4294967295
   1744a:	f04f 33ff 	mov.w	r3, #4294967295
   1744e:	4630      	mov	r0, r6
   17450:	f7fd f81a 	bl	14488 <z_impl_k_mutex_lock>
	int ret = lfs_rename(&fs->lfs, from, to);
   17454:	4622      	mov	r2, r4
   17456:	4629      	mov	r1, r5
   17458:	f107 0070 	add.w	r0, r7, #112	; 0x70
   1745c:	f7fc fb8e 	bl	13b7c <lfs_rename>
   17460:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   17462:	4630      	mov	r0, r6
   17464:	f7fd f89a 	bl	1459c <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   17468:	4620      	mov	r0, r4
   1746a:	f7ff fe0e 	bl	1708a <lfs_to_errno>
}
   1746e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017470 <littlefs_stat>:
{
   17470:	b5f0      	push	{r4, r5, r6, r7, lr}
   17472:	b0c3      	sub	sp, #268	; 0x10c
   17474:	4603      	mov	r3, r0
   17476:	4608      	mov	r0, r1
   17478:	4615      	mov	r5, r2
	struct fs_littlefs *fs = mountp->fs_data;
   1747a:	691f      	ldr	r7, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   1747c:	4619      	mov	r1, r3
   1747e:	f7f8 ffe1 	bl	10444 <fs_impl_strip_prefix>
   17482:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   17484:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   17488:	f04f 32ff 	mov.w	r2, #4294967295
   1748c:	f04f 33ff 	mov.w	r3, #4294967295
   17490:	4630      	mov	r0, r6
   17492:	f7fc fff9 	bl	14488 <z_impl_k_mutex_lock>
	int ret = lfs_stat(&fs->lfs, path, &info);
   17496:	466a      	mov	r2, sp
   17498:	4621      	mov	r1, r4
   1749a:	f107 0070 	add.w	r0, r7, #112	; 0x70
   1749e:	f001 f84e 	bl	1853e <lfs_stat>
   174a2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   174a4:	4630      	mov	r0, r6
   174a6:	f7fd f879 	bl	1459c <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   174aa:	2c00      	cmp	r4, #0
   174ac:	da04      	bge.n	174b8 <littlefs_stat+0x48>
	return lfs_to_errno(ret);
   174ae:	4620      	mov	r0, r4
   174b0:	f7ff fdeb 	bl	1708a <lfs_to_errno>
}
   174b4:	b043      	add	sp, #268	; 0x10c
   174b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info_to_dirent(&info, entry);
   174b8:	4629      	mov	r1, r5
   174ba:	4668      	mov	r0, sp
   174bc:	f7ff fe6c 	bl	17198 <info_to_dirent>
		ret = 0;
   174c0:	2400      	movs	r4, #0
   174c2:	e7f4      	b.n	174ae <littlefs_stat+0x3e>

000174c4 <littlefs_readdir>:
{
   174c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   174c6:	b0c3      	sub	sp, #268	; 0x10c
   174c8:	4604      	mov	r4, r0
   174ca:	460d      	mov	r5, r1
	struct fs_littlefs *fs = dp->mp->fs_data;
   174cc:	6843      	ldr	r3, [r0, #4]
   174ce:	691f      	ldr	r7, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   174d0:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   174d4:	f04f 32ff 	mov.w	r2, #4294967295
   174d8:	f04f 33ff 	mov.w	r3, #4294967295
   174dc:	4630      	mov	r0, r6
   174de:	f7fc ffd3 	bl	14488 <z_impl_k_mutex_lock>
	int ret = lfs_dir_read(&fs->lfs, dp->dirp, &info);
   174e2:	466a      	mov	r2, sp
   174e4:	6821      	ldr	r1, [r4, #0]
   174e6:	f107 0070 	add.w	r0, r7, #112	; 0x70
   174ea:	f7fa febd 	bl	12268 <lfs_dir_read>
   174ee:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   174f0:	4630      	mov	r0, r6
   174f2:	f7fd f853 	bl	1459c <z_impl_k_mutex_unlock>
	if (ret > 0) {
   174f6:	2c00      	cmp	r4, #0
   174f8:	dc03      	bgt.n	17502 <littlefs_readdir+0x3e>
	} else if (ret == 0) {
   174fa:	b93c      	cbnz	r4, 1750c <littlefs_readdir+0x48>
		entry->name[0] = 0;
   174fc:	2300      	movs	r3, #0
   174fe:	706b      	strb	r3, [r5, #1]
   17500:	e004      	b.n	1750c <littlefs_readdir+0x48>
		info_to_dirent(&info, entry);
   17502:	4629      	mov	r1, r5
   17504:	4668      	mov	r0, sp
   17506:	f7ff fe47 	bl	17198 <info_to_dirent>
		ret = 0;
   1750a:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   1750c:	4620      	mov	r0, r4
   1750e:	f7ff fdbc 	bl	1708a <lfs_to_errno>
}
   17512:	b043      	add	sp, #268	; 0x10c
   17514:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017516 <littlefs_statvfs>:
{
   17516:	b570      	push	{r4, r5, r6, lr}
   17518:	4603      	mov	r3, r0
   1751a:	4608      	mov	r0, r1
   1751c:	4615      	mov	r5, r2
	struct fs_littlefs *fs = mountp->fs_data;
   1751e:	691c      	ldr	r4, [r3, #16]
	struct lfs *lfs = &fs->lfs;
   17520:	f104 0670 	add.w	r6, r4, #112	; 0x70
	stat->f_bsize = lfs->cfg->prog_size;
   17524:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   17528:	6992      	ldr	r2, [r2, #24]
   1752a:	602a      	str	r2, [r5, #0]
	stat->f_frsize = lfs->cfg->block_size;
   1752c:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   17530:	69d2      	ldr	r2, [r2, #28]
   17532:	606a      	str	r2, [r5, #4]
	stat->f_blocks = lfs->cfg->block_count;
   17534:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   17538:	6a12      	ldr	r2, [r2, #32]
   1753a:	60aa      	str	r2, [r5, #8]
	path = fs_impl_strip_prefix(path, mountp);
   1753c:	4619      	mov	r1, r3
   1753e:	f7f8 ff81 	bl	10444 <fs_impl_strip_prefix>
	k_mutex_lock(&fs->mutex, K_FOREVER);
   17542:	34ec      	adds	r4, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   17544:	f04f 32ff 	mov.w	r2, #4294967295
   17548:	f04f 33ff 	mov.w	r3, #4294967295
   1754c:	4620      	mov	r0, r4
   1754e:	f7fc ff9b 	bl	14488 <z_impl_k_mutex_lock>
	ssize_t ret = lfs_fs_size(lfs);
   17552:	4630      	mov	r0, r6
   17554:	f7fb faf4 	bl	12b40 <lfs_fs_size>
   17558:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   1755a:	4620      	mov	r0, r4
   1755c:	f7fd f81e 	bl	1459c <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   17560:	2e00      	cmp	r6, #0
   17562:	db03      	blt.n	1756c <littlefs_statvfs+0x56>
		stat->f_bfree = stat->f_blocks - ret;
   17564:	68a8      	ldr	r0, [r5, #8]
   17566:	1b80      	subs	r0, r0, r6
   17568:	60e8      	str	r0, [r5, #12]
		ret = 0;
   1756a:	2600      	movs	r6, #0
	return lfs_to_errno(ret);
   1756c:	4630      	mov	r0, r6
   1756e:	f7ff fd8c 	bl	1708a <lfs_to_errno>
}
   17572:	bd70      	pop	{r4, r5, r6, pc}

00017574 <gpio_nrfx_port_get_raw>:
	return port->config;
   17574:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17576:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   17578:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1757a:	600b      	str	r3, [r1, #0]
}
   1757c:	2000      	movs	r0, #0
   1757e:	4770      	bx	lr

00017580 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   17580:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17582:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   17584:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   17586:	4042      	eors	r2, r0
   17588:	400a      	ands	r2, r1
   1758a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1758c:	605a      	str	r2, [r3, #4]
}
   1758e:	2000      	movs	r0, #0
   17590:	4770      	bx	lr

00017592 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   17592:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17594:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   17596:	6099      	str	r1, [r3, #8]
}
   17598:	2000      	movs	r0, #0
   1759a:	4770      	bx	lr

0001759c <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   1759c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1759e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   175a0:	60d9      	str	r1, [r3, #12]
}
   175a2:	2000      	movs	r0, #0
   175a4:	4770      	bx	lr

000175a6 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   175a6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   175a8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   175aa:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   175ac:	404b      	eors	r3, r1
    p_reg->OUT = value;
   175ae:	6053      	str	r3, [r2, #4]
}
   175b0:	2000      	movs	r0, #0
   175b2:	4770      	bx	lr

000175b4 <gpio_nrfx_manage_callback>:
{
   175b4:	b470      	push	{r4, r5, r6}
	return port->data;
   175b6:	68c0      	ldr	r0, [r0, #12]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   175b8:	1d05      	adds	r5, r0, #4
	return list->head;
   175ba:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   175bc:	b1db      	cbz	r3, 175f6 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   175be:	460e      	mov	r6, r1
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   175c0:	2400      	movs	r4, #0
   175c2:	e00a      	b.n	175da <gpio_nrfx_manage_callback+0x26>
	return node->next;
   175c4:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   175c6:	6043      	str	r3, [r0, #4]
	return list->tail;
   175c8:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   175ca:	42a1      	cmp	r1, r4
   175cc:	d10f      	bne.n	175ee <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   175ce:	606b      	str	r3, [r5, #4]
}
   175d0:	e00d      	b.n	175ee <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   175d2:	606c      	str	r4, [r5, #4]
}
   175d4:	e00b      	b.n	175ee <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   175d6:	461c      	mov	r4, r3
   175d8:	681b      	ldr	r3, [r3, #0]
   175da:	b15b      	cbz	r3, 175f4 <gpio_nrfx_manage_callback+0x40>
   175dc:	429e      	cmp	r6, r3
   175de:	d1fa      	bne.n	175d6 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   175e0:	2c00      	cmp	r4, #0
   175e2:	d0ef      	beq.n	175c4 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   175e4:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   175e6:	6023      	str	r3, [r4, #0]
	return list->tail;
   175e8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   175ea:	4299      	cmp	r1, r3
   175ec:	d0f1      	beq.n	175d2 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   175ee:	2300      	movs	r3, #0
   175f0:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   175f2:	e000      	b.n	175f6 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   175f4:	b152      	cbz	r2, 1760c <gpio_nrfx_manage_callback+0x58>
	if (set) {
   175f6:	b162      	cbz	r2, 17612 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   175f8:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   175fa:	600b      	str	r3, [r1, #0]
	list->head = node;
   175fc:	6041      	str	r1, [r0, #4]
	return list->tail;
   175fe:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   17600:	b10b      	cbz	r3, 17606 <gpio_nrfx_manage_callback+0x52>
	return 0;
   17602:	2000      	movs	r0, #0
   17604:	e006      	b.n	17614 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   17606:	6069      	str	r1, [r5, #4]
   17608:	2000      	movs	r0, #0
}
   1760a:	e003      	b.n	17614 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   1760c:	f06f 0015 	mvn.w	r0, #21
   17610:	e000      	b.n	17614 <gpio_nrfx_manage_callback+0x60>
	return 0;
   17612:	2000      	movs	r0, #0
}
   17614:	bc70      	pop	{r4, r5, r6}
   17616:	4770      	bx	lr

00017618 <flash_nrf_write_protection>:
}
   17618:	2000      	movs	r0, #0
   1761a:	4770      	bx	lr

0001761c <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(uint32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
   1761c:	684b      	ldr	r3, [r1, #4]
   1761e:	4403      	add	r3, r0
   17620:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   17622:	680b      	ldr	r3, [r1, #0]
   17624:	4403      	add	r3, r0
   17626:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   17628:	688b      	ldr	r3, [r1, #8]
   1762a:	1a18      	subs	r0, r3, r0
   1762c:	6088      	str	r0, [r1, #8]
}
   1762e:	4770      	bx	lr

00017630 <erase_op>:
{
   17630:	b538      	push	{r3, r4, r5, lr}
   17632:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   17634:	f000 f9b3 	bl	1799e <nrfx_nvmc_flash_page_size_get>
   17638:	4605      	mov	r5, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1763a:	6860      	ldr	r0, [r4, #4]
   1763c:	f7f9 ff72 	bl	11524 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   17640:	68a3      	ldr	r3, [r4, #8]
   17642:	1b5b      	subs	r3, r3, r5
   17644:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   17646:	6862      	ldr	r2, [r4, #4]
   17648:	442a      	add	r2, r5
   1764a:	6062      	str	r2, [r4, #4]
	} while (e_ctx->len > 0);
   1764c:	2b00      	cmp	r3, #0
   1764e:	d1f4      	bne.n	1763a <erase_op+0xa>
}
   17650:	2000      	movs	r0, #0
   17652:	bd38      	pop	{r3, r4, r5, pc}

00017654 <erase>:

	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
   17654:	b500      	push	{lr}
   17656:	b085      	sub	sp, #20
	struct flash_context context = {
   17658:	2300      	movs	r3, #0
   1765a:	9301      	str	r3, [sp, #4]
   1765c:	9002      	str	r0, [sp, #8]
   1765e:	9103      	str	r1, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   17660:	a801      	add	r0, sp, #4
   17662:	f7ff ffe5 	bl	17630 <erase_op>
}
   17666:	b005      	add	sp, #20
   17668:	f85d fb04 	ldr.w	pc, [sp], #4

0001766c <write_op>:
{
   1766c:	b510      	push	{r4, lr}
   1766e:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(uint32_t)) {
   17670:	68a3      	ldr	r3, [r4, #8]
   17672:	2b03      	cmp	r3, #3
   17674:	d909      	bls.n	1768a <write_op+0x1e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   17676:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   17678:	6819      	ldr	r1, [r3, #0]
   1767a:	6860      	ldr	r0, [r4, #4]
   1767c:	f000 f97f 	bl	1797e <nrfx_nvmc_word_write>
		shift_write_context(sizeof(uint32_t), w_ctx);
   17680:	4621      	mov	r1, r4
   17682:	2004      	movs	r0, #4
   17684:	f7ff ffca 	bl	1761c <shift_write_context>
   17688:	e7f2      	b.n	17670 <write_op+0x4>
	nvmc_wait_ready();
   1768a:	f7f9 fbff 	bl	10e8c <nvmc_wait_ready>
}
   1768e:	2000      	movs	r0, #0
   17690:	bd10      	pop	{r4, pc}

00017692 <write>:

static int write(off_t addr, const void *data, size_t len)
{
   17692:	b500      	push	{lr}
   17694:	b085      	sub	sp, #20
	struct flash_context context = {
   17696:	9101      	str	r1, [sp, #4]
   17698:	9002      	str	r0, [sp, #8]
   1769a:	9203      	str	r2, [sp, #12]
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1769c:	a801      	add	r0, sp, #4
   1769e:	f7ff ffe5 	bl	1766c <write_op>
}
   176a2:	b005      	add	sp, #20
   176a4:	f85d fb04 	ldr.w	pc, [sp], #4

000176a8 <flash_nrf_read>:
{
   176a8:	b570      	push	{r4, r5, r6, lr}
   176aa:	460c      	mov	r4, r1
   176ac:	4616      	mov	r6, r2
   176ae:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
   176b0:	f000 f971 	bl	17996 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   176b4:	42a0      	cmp	r0, r4
   176b6:	d917      	bls.n	176e8 <flash_nrf_read+0x40>
   176b8:	2c00      	cmp	r4, #0
   176ba:	db18      	blt.n	176ee <flash_nrf_read+0x46>
	    addr < 0 ||
   176bc:	4285      	cmp	r5, r0
   176be:	d819      	bhi.n	176f4 <flash_nrf_read+0x4c>
	    (addr) + len > flash_size) {
   176c0:	192b      	adds	r3, r5, r4
	    len > flash_size ||
   176c2:	4298      	cmp	r0, r3
   176c4:	d319      	bcc.n	176fa <flash_nrf_read+0x52>
	if (!len) {
   176c6:	b1dd      	cbz	r5, 17700 <flash_nrf_read+0x58>
	if (addr < PM_APP_ADDRESS) {
   176c8:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
   176cc:	db06      	blt.n	176dc <flash_nrf_read+0x34>
	memcpy(data, (void *)addr, len);
   176ce:	462a      	mov	r2, r5
   176d0:	4621      	mov	r1, r4
   176d2:	4630      	mov	r0, r6
   176d4:	f7ff fc64 	bl	16fa0 <memcpy>
	return 0;
   176d8:	2000      	movs	r0, #0
   176da:	e007      	b.n	176ec <flash_nrf_read+0x44>
		return spm_request_read(data, addr, len);
   176dc:	462a      	mov	r2, r5
   176de:	4621      	mov	r1, r4
   176e0:	4630      	mov	r0, r6
   176e2:	f7ff fb4f 	bl	16d84 <spm_request_read>
   176e6:	e001      	b.n	176ec <flash_nrf_read+0x44>
		return -EINVAL;
   176e8:	f06f 0015 	mvn.w	r0, #21
}
   176ec:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   176ee:	f06f 0015 	mvn.w	r0, #21
   176f2:	e7fb      	b.n	176ec <flash_nrf_read+0x44>
   176f4:	f06f 0015 	mvn.w	r0, #21
   176f8:	e7f8      	b.n	176ec <flash_nrf_read+0x44>
   176fa:	f06f 0015 	mvn.w	r0, #21
   176fe:	e7f5      	b.n	176ec <flash_nrf_read+0x44>
		return 0;
   17700:	2000      	movs	r0, #0
   17702:	e7f3      	b.n	176ec <flash_nrf_read+0x44>

00017704 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   17704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17708:	b086      	sub	sp, #24
   1770a:	4689      	mov	r9, r1
   1770c:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
   1770e:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   17710:	695b      	ldr	r3, [r3, #20]
   17712:	aa01      	add	r2, sp, #4
   17714:	a905      	add	r1, sp, #20
   17716:	4798      	blx	r3
	off_t off = 0;
   17718:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   1771a:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
   1771c:	46a2      	mov	sl, r4
   1771e:	9b01      	ldr	r3, [sp, #4]
   17720:	4553      	cmp	r3, sl
   17722:	d916      	bls.n	17752 <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
   17724:	9f05      	ldr	r7, [sp, #20]
   17726:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
   1772a:	687b      	ldr	r3, [r7, #4]
   1772c:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
   1772e:	2500      	movs	r5, #0
   17730:	683b      	ldr	r3, [r7, #0]
   17732:	42ab      	cmp	r3, r5
   17734:	d90a      	bls.n	1774c <flash_page_foreach+0x48>
			page_info.start_offset = off;
   17736:	9402      	str	r4, [sp, #8]
			page_info.index = page;
   17738:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
   1773a:	4641      	mov	r1, r8
   1773c:	a802      	add	r0, sp, #8
   1773e:	47c8      	blx	r9
   17740:	b138      	cbz	r0, 17752 <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
   17742:	9b03      	ldr	r3, [sp, #12]
   17744:	441c      	add	r4, r3
			page++;
   17746:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
   17748:	3501      	adds	r5, #1
   1774a:	e7f1      	b.n	17730 <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
   1774c:	f10a 0a01 	add.w	sl, sl, #1
   17750:	e7e5      	b.n	1771e <flash_page_foreach+0x1a>
		}
	}
}
   17752:	b006      	add	sp, #24
   17754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00017758 <uarte_nrfx_configure>:
{
   17758:	b570      	push	{r4, r5, r6, lr}
   1775a:	b082      	sub	sp, #8
   1775c:	4605      	mov	r5, r0
   1775e:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   17760:	794b      	ldrb	r3, [r1, #5]
   17762:	2b01      	cmp	r3, #1
   17764:	d006      	beq.n	17774 <uarte_nrfx_configure+0x1c>
   17766:	2b03      	cmp	r3, #3
   17768:	d011      	beq.n	1778e <uarte_nrfx_configure+0x36>
   1776a:	f06f 0322 	mvn.w	r3, #34	; 0x22
}
   1776e:	4618      	mov	r0, r3
   17770:	b002      	add	sp, #8
   17772:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   17774:	2300      	movs	r3, #0
   17776:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1777a:	79a3      	ldrb	r3, [r4, #6]
   1777c:	2b03      	cmp	r3, #3
   1777e:	d13b      	bne.n	177f8 <uarte_nrfx_configure+0xa0>
	switch (cfg->flow_ctrl) {
   17780:	79e3      	ldrb	r3, [r4, #7]
   17782:	b143      	cbz	r3, 17796 <uarte_nrfx_configure+0x3e>
   17784:	2b01      	cmp	r3, #1
   17786:	d010      	beq.n	177aa <uarte_nrfx_configure+0x52>
   17788:	f06f 0322 	mvn.w	r3, #34	; 0x22
   1778c:	e7ef      	b.n	1776e <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1778e:	2310      	movs	r3, #16
   17790:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   17794:	e7f1      	b.n	1777a <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   17796:	2300      	movs	r3, #0
   17798:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   1779c:	7923      	ldrb	r3, [r4, #4]
   1779e:	b15b      	cbz	r3, 177b8 <uarte_nrfx_configure+0x60>
   177a0:	2b02      	cmp	r3, #2
   177a2:	d025      	beq.n	177f0 <uarte_nrfx_configure+0x98>
   177a4:	f06f 0322 	mvn.w	r3, #34	; 0x22
   177a8:	e7e1      	b.n	1776e <uarte_nrfx_configure+0x16>
	return dev->config;
   177aa:	686b      	ldr	r3, [r5, #4]
		if (get_dev_config(dev)->rts_cts_pins_set) {
   177ac:	791b      	ldrb	r3, [r3, #4]
   177ae:	b333      	cbz	r3, 177fe <uarte_nrfx_configure+0xa6>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   177b0:	2301      	movs	r3, #1
   177b2:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   177b6:	e7f1      	b.n	1779c <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   177b8:	2300      	movs	r3, #0
   177ba:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   177be:	6821      	ldr	r1, [r4, #0]
   177c0:	4628      	mov	r0, r5
   177c2:	f7f9 fc13 	bl	10fec <baudrate_set>
   177c6:	4603      	mov	r3, r0
   177c8:	b9e0      	cbnz	r0, 17804 <uarte_nrfx_configure+0xac>
	return dev->config;
   177ca:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   177cc:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   177ce:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   177d2:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   177d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   177da:	4331      	orrs	r1, r6
   177dc:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   177de:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   177e2:	68ea      	ldr	r2, [r5, #12]
	get_dev_data(dev)->uart_config = *cfg;
   177e4:	3204      	adds	r2, #4
   177e6:	e894 0003 	ldmia.w	r4, {r0, r1}
   177ea:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   177ee:	e7be      	b.n	1776e <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   177f0:	230e      	movs	r3, #14
   177f2:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   177f6:	e7e2      	b.n	177be <uarte_nrfx_configure+0x66>
		return -ENOTSUP;
   177f8:	f06f 0322 	mvn.w	r3, #34	; 0x22
   177fc:	e7b7      	b.n	1776e <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   177fe:	f06f 0322 	mvn.w	r3, #34	; 0x22
   17802:	e7b4      	b.n	1776e <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   17804:	f06f 0322 	mvn.w	r3, #34	; 0x22
   17808:	e7b1      	b.n	1776e <uarte_nrfx_configure+0x16>

0001780a <uarte_nrfx_config_get>:
{
   1780a:	460b      	mov	r3, r1
	return dev->data;
   1780c:	68c2      	ldr	r2, [r0, #12]
	*cfg = get_dev_data(dev)->uart_config;
   1780e:	6891      	ldr	r1, [r2, #8]
   17810:	6850      	ldr	r0, [r2, #4]
   17812:	e883 0003 	stmia.w	r3, {r0, r1}
}
   17816:	2000      	movs	r0, #0
   17818:	4770      	bx	lr

0001781a <uarte_nrfx_err_check>:
	return dev->config;
   1781a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1781c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1781e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   17822:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   17826:	4770      	bx	lr

00017828 <uarte_nrfx_poll_in>:
{
   17828:	b410      	push	{r4}
	return dev->data;
   1782a:	68c4      	ldr	r4, [r0, #12]
	return dev->config;
   1782c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1782e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17830:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   17834:	b152      	cbz	r2, 1784c <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   17836:	7c22      	ldrb	r2, [r4, #16]
   17838:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1783a:	2000      	movs	r0, #0
   1783c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   17840:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17844:	2201      	movs	r2, #1
   17846:	601a      	str	r2, [r3, #0]
}
   17848:	bc10      	pop	{r4}
   1784a:	4770      	bx	lr
		return -1;
   1784c:	f04f 30ff 	mov.w	r0, #4294967295
   17850:	e7fa      	b.n	17848 <uarte_nrfx_poll_in+0x20>

00017852 <uarte_nrfx_poll_out>:
{
   17852:	b5f0      	push	{r4, r5, r6, r7, lr}
   17854:	b083      	sub	sp, #12
   17856:	f88d 1007 	strb.w	r1, [sp, #7]
	return dev->config;
   1785a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1785c:	681d      	ldr	r5, [r3, #0]
	return dev->data;
   1785e:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   17860:	f001 fc2c 	bl	190bc <k_is_in_isr>
   17864:	b9a8      	cbnz	r0, 17892 <uarte_nrfx_poll_out+0x40>
   17866:	f106 040c 	add.w	r4, r6, #12
		uint8_t safety_cnt = 100;
   1786a:	2764      	movs	r7, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1786c:	2301      	movs	r3, #1
   1786e:	e8d4 2fef 	ldaex	r2, [r4]
   17872:	2a00      	cmp	r2, #0
   17874:	d103      	bne.n	1787e <uarte_nrfx_poll_out+0x2c>
   17876:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1787a:	2900      	cmp	r1, #0
   1787c:	d1f7      	bne.n	1786e <uarte_nrfx_poll_out+0x1c>
		while (atomic_cas((atomic_t *) lock,
   1787e:	d00a      	beq.n	17896 <uarte_nrfx_poll_out+0x44>
	return z_impl_k_sleep(timeout);
   17880:	2021      	movs	r0, #33	; 0x21
   17882:	2100      	movs	r1, #0
   17884:	f7fd fa82 	bl	14d8c <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   17888:	3f01      	subs	r7, #1
   1788a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   1788e:	d1ed      	bne.n	1786c <uarte_nrfx_poll_out+0x1a>
   17890:	e001      	b.n	17896 <uarte_nrfx_poll_out+0x44>
		*lock = 1;
   17892:	2301      	movs	r3, #1
   17894:	60f3      	str	r3, [r6, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17896:	2300      	movs	r3, #0
   17898:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1789c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   178a0:	f10d 0307 	add.w	r3, sp, #7
   178a4:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   178a8:	2301      	movs	r3, #1
   178aa:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   178ae:	60ab      	str	r3, [r5, #8]
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   178b0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   178b4:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   178b8:	b923      	cbnz	r3, 178c4 <uarte_nrfx_poll_out+0x72>
   178ba:	2001      	movs	r0, #1
   178bc:	f000 f836 	bl	1792c <nrfx_busy_wait>
   178c0:	3c01      	subs	r4, #1
   178c2:	d1f7      	bne.n	178b4 <uarte_nrfx_poll_out+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   178c4:	2301      	movs	r3, #1
   178c6:	60eb      	str	r3, [r5, #12]
	*lock = 0;
   178c8:	2300      	movs	r3, #0
   178ca:	60f3      	str	r3, [r6, #12]
}
   178cc:	b003      	add	sp, #12
   178ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000178d0 <ext_api_satisfies_req>:
{
   178d0:	b430      	push	{r4, r5}
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   178d2:	690b      	ldr	r3, [r1, #16]
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   178d4:	694d      	ldr	r5, [r1, #20]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   178d6:	698c      	ldr	r4, [r1, #24]
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   178d8:	69c9      	ldr	r1, [r1, #28]
	return ((ext_api->ext_api_id == req_id)
   178da:	6902      	ldr	r2, [r0, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   178dc:	429a      	cmp	r2, r3
   178de:	d002      	beq.n	178e6 <ext_api_satisfies_req+0x16>
   178e0:	2000      	movs	r0, #0
}
   178e2:	bc30      	pop	{r4, r5}
   178e4:	4770      	bx	lr
		&&  (ext_api->ext_api_version >= req_min_version)
   178e6:	6983      	ldr	r3, [r0, #24]
   178e8:	42a3      	cmp	r3, r4
   178ea:	d307      	bcc.n	178fc <ext_api_satisfies_req+0x2c>
		&&  (ext_api->ext_api_version <  req_max_version)
   178ec:	428b      	cmp	r3, r1
   178ee:	d207      	bcs.n	17900 <ext_api_satisfies_req+0x30>
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   178f0:	6943      	ldr	r3, [r0, #20]
   178f2:	ea35 0303 	bics.w	r3, r5, r3
   178f6:	d005      	beq.n	17904 <ext_api_satisfies_req+0x34>
   178f8:	2000      	movs	r0, #0
   178fa:	e7f2      	b.n	178e2 <ext_api_satisfies_req+0x12>
   178fc:	2000      	movs	r0, #0
   178fe:	e7f0      	b.n	178e2 <ext_api_satisfies_req+0x12>
   17900:	2000      	movs	r0, #0
   17902:	e7ee      	b.n	178e2 <ext_api_satisfies_req+0x12>
   17904:	2001      	movs	r0, #1
   17906:	e7ec      	b.n	178e2 <ext_api_satisfies_req+0x12>

00017908 <skip_ext_apis>:
{
   17908:	4601      	mov	r1, r0
	const struct fw_info_ext_api *ext_api = &fw_info->ext_apis[0];
   1790a:	303c      	adds	r0, #60	; 0x3c
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   1790c:	2300      	movs	r3, #0
   1790e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   17910:	429a      	cmp	r2, r3
   17912:	d903      	bls.n	1791c <skip_ext_apis+0x14>
		ADVANCE_EXT_API(ext_api);
   17914:	68c2      	ldr	r2, [r0, #12]
   17916:	4410      	add	r0, r2
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   17918:	3301      	adds	r3, #1
   1791a:	e7f8      	b.n	1790e <skip_ext_apis+0x6>
}
   1791c:	4770      	bx	lr

0001791e <SystemInit>:

void SystemInit(void)
{
   1791e:	b508      	push	{r3, lr}
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
   17920:	f7f9 fcdc 	bl	112dc <SystemCoreClockUpdate>
}
   17924:	bd08      	pop	{r3, pc}

00017926 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   17926:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   17928:	4780      	blx	r0
}
   1792a:	bd08      	pop	{r3, pc}

0001792c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   1792c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1792e:	f001 fbcb 	bl	190c8 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   17932:	bd08      	pop	{r3, pc}

00017934 <nrfx_clock_enable>:
{
   17934:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   17936:	2005      	movs	r0, #5
   17938:	f7f7 f90c 	bl	eb54 <arch_irq_is_enabled>
   1793c:	b100      	cbz	r0, 17940 <nrfx_clock_enable+0xc>
}
   1793e:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   17940:	2005      	movs	r0, #5
   17942:	f7f7 f8f7 	bl	eb34 <arch_irq_enable>
   17946:	e7fa      	b.n	1793e <nrfx_clock_enable+0xa>

00017948 <flash_page_size_get>:
}
   17948:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1794c:	4770      	bx	lr

0001794e <flash_page_count_get>:
}
   1794e:	f44f 7080 	mov.w	r0, #256	; 0x100
   17952:	4770      	bx	lr

00017954 <flash_total_size_get>:
{
   17954:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   17956:	f7ff fff7 	bl	17948 <flash_page_size_get>
   1795a:	4604      	mov	r4, r0
   1795c:	f7ff fff7 	bl	1794e <flash_page_count_get>
}
   17960:	fb00 f004 	mul.w	r0, r0, r4
   17964:	bd10      	pop	{r4, pc}

00017966 <is_page_aligned_check>:
{
   17966:	b510      	push	{r4, lr}
   17968:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   1796a:	f7ff ffed 	bl	17948 <flash_page_size_get>
   1796e:	fbb4 f3f0 	udiv	r3, r4, r0
   17972:	fb00 4013 	mls	r0, r0, r3, r4
}
   17976:	fab0 f080 	clz	r0, r0
   1797a:	0940      	lsrs	r0, r0, #5
   1797c:	bd10      	pop	{r4, pc}

0001797e <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1797e:	b538      	push	{r3, r4, r5, lr}
   17980:	4604      	mov	r4, r0
   17982:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
   17984:	f7f9 fdb2 	bl	114ec <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   17988:	4629      	mov	r1, r5
   1798a:	4620      	mov	r0, r4
   1798c:	f7f9 fdbe 	bl	1150c <nvmc_word_write>

    nvmc_readonly_mode_set();
   17990:	f7f9 fda4 	bl	114dc <nvmc_readonly_mode_set>
}
   17994:	bd38      	pop	{r3, r4, r5, pc}

00017996 <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   17996:	b508      	push	{r3, lr}
    return flash_total_size_get();
   17998:	f7ff ffdc 	bl	17954 <flash_total_size_get>
}
   1799c:	bd08      	pop	{r3, pc}

0001799e <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   1799e:	b508      	push	{r3, lr}
    return flash_page_size_get();
   179a0:	f7ff ffd2 	bl	17948 <flash_page_size_get>
}
   179a4:	bd08      	pop	{r3, pc}

000179a6 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   179a6:	b508      	push	{r3, lr}
    return flash_page_count_get();
   179a8:	f7ff ffd1 	bl	1794e <flash_page_count_get>
}
   179ac:	bd08      	pop	{r3, pc}

000179ae <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
   179ae:	b508      	push	{r3, lr}
    int err = lfs->cfg->erase(lfs->cfg, block);
   179b0:	6e80      	ldr	r0, [r0, #104]	; 0x68
   179b2:	68c3      	ldr	r3, [r0, #12]
   179b4:	4798      	blx	r3
}
   179b6:	bd08      	pop	{r3, pc}

000179b8 <lfs_alloc_lookahead>:
    lfs_block_t off = ((block - lfs->free.off)
   179b8:	6d43      	ldr	r3, [r0, #84]	; 0x54
   179ba:	1ac9      	subs	r1, r1, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
   179bc:	6e83      	ldr	r3, [r0, #104]	; 0x68
   179be:	6a1a      	ldr	r2, [r3, #32]
   179c0:	4411      	add	r1, r2
    lfs_block_t off = ((block - lfs->free.off)
   179c2:	fbb1 f3f2 	udiv	r3, r1, r2
   179c6:	fb02 1113 	mls	r1, r2, r3, r1
    if (off < lfs->free.size) {
   179ca:	6d83      	ldr	r3, [r0, #88]	; 0x58
   179cc:	428b      	cmp	r3, r1
   179ce:	d90b      	bls.n	179e8 <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
   179d0:	6e42      	ldr	r2, [r0, #100]	; 0x64
   179d2:	0948      	lsrs	r0, r1, #5
   179d4:	f001 011f 	and.w	r1, r1, #31
   179d8:	2301      	movs	r3, #1
   179da:	fa03 f101 	lsl.w	r1, r3, r1
   179de:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   179e2:	430b      	orrs	r3, r1
   179e4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   179e8:	2000      	movs	r0, #0
   179ea:	4770      	bx	lr

000179ec <lfs_alloc_ack>:
    lfs->free.ack = lfs->cfg->block_count;
   179ec:	6e83      	ldr	r3, [r0, #104]	; 0x68
   179ee:	6a1b      	ldr	r3, [r3, #32]
   179f0:	6603      	str	r3, [r0, #96]	; 0x60
}
   179f2:	4770      	bx	lr

000179f4 <lfs_alloc_reset>:
static void lfs_alloc_reset(lfs_t *lfs) {
   179f4:	b510      	push	{r4, lr}
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
   179f6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   179f8:	6e82      	ldr	r2, [r0, #104]	; 0x68
   179fa:	69d1      	ldr	r1, [r2, #28]
   179fc:	fbb4 f2f1 	udiv	r2, r4, r1
   17a00:	fb01 4212 	mls	r2, r1, r2, r4
   17a04:	6542      	str	r2, [r0, #84]	; 0x54
    lfs->free.size = 0;
   17a06:	2200      	movs	r2, #0
   17a08:	6582      	str	r2, [r0, #88]	; 0x58
    lfs->free.i = 0;
   17a0a:	65c2      	str	r2, [r0, #92]	; 0x5c
    lfs_alloc_ack(lfs);
   17a0c:	f7ff ffee 	bl	179ec <lfs_alloc_ack>
}
   17a10:	bd10      	pop	{r4, pc}

00017a12 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
   17a12:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   17a16:	f1b3 3fff 	cmp.w	r3, #4294967295
   17a1a:	bf08      	it	eq
   17a1c:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
   17a1e:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   17a22:	3104      	adds	r1, #4
    *size += lfs_tag_dsize(tag);
   17a24:	6803      	ldr	r3, [r0, #0]
   17a26:	4419      	add	r1, r3
   17a28:	6001      	str	r1, [r0, #0]
}
   17a2a:	2000      	movs	r0, #0
   17a2c:	4770      	bx	lr

00017a2e <lfs_fs_preporphans>:
    lfs->gstate.tag += orphans;
   17a2e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   17a30:	4419      	add	r1, r3
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   17a32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    return tag & 0x000003ff;
   17a36:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
   17a3a:	3900      	subs	r1, #0
   17a3c:	bf18      	it	ne
   17a3e:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   17a40:	ea43 71c1 	orr.w	r1, r3, r1, lsl #31
   17a44:	6301      	str	r1, [r0, #48]	; 0x30
}
   17a46:	4770      	bx	lr

00017a48 <lfs_fs_size_count>:
    *size += 1;
   17a48:	6803      	ldr	r3, [r0, #0]
   17a4a:	3301      	adds	r3, #1
   17a4c:	6003      	str	r3, [r0, #0]
}
   17a4e:	2000      	movs	r0, #0
   17a50:	4770      	bx	lr

00017a52 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
   17a52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a56:	b087      	sub	sp, #28
   17a58:	4615      	mov	r5, r2
   17a5a:	469a      	mov	sl, r3
   17a5c:	9e10      	ldr	r6, [sp, #64]	; 0x40
   17a5e:	9c11      	ldr	r4, [sp, #68]	; 0x44
   17a60:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    if (block >= lfs->cfg->block_count ||
   17a64:	6e82      	ldr	r2, [r0, #104]	; 0x68
   17a66:	6a13      	ldr	r3, [r2, #32]
   17a68:	42b3      	cmp	r3, r6
   17a6a:	f240 80b8 	bls.w	17bde <lfs_bd_read+0x18c>
   17a6e:	4689      	mov	r9, r1
            off+size > lfs->cfg->block_size) {
   17a70:	eb04 030b 	add.w	r3, r4, fp
   17a74:	69d2      	ldr	r2, [r2, #28]
    if (block >= lfs->cfg->block_count ||
   17a76:	4293      	cmp	r3, r2
   17a78:	f200 80b4 	bhi.w	17be4 <lfs_bd_read+0x192>
   17a7c:	9003      	str	r0, [sp, #12]
   17a7e:	e07a      	b.n	17b76 <lfs_bd_read+0x124>
                off < pcache->off + pcache->size) {
   17a80:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17a84:	f8d9 2008 	ldr.w	r2, [r9, #8]
   17a88:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
   17a8a:	42a1      	cmp	r1, r4
   17a8c:	d91e      	bls.n	17acc <lfs_bd_read+0x7a>
            if (off >= pcache->off) {
   17a8e:	42a3      	cmp	r3, r4
   17a90:	d905      	bls.n	17a9e <lfs_bd_read+0x4c>
            diff = lfs_min(diff, pcache->off-off);
   17a92:	1b1b      	subs	r3, r3, r4
   17a94:	455b      	cmp	r3, fp
   17a96:	bf28      	it	cs
   17a98:	465b      	movcs	r3, fp
   17a9a:	4698      	mov	r8, r3
   17a9c:	e077      	b.n	17b8e <lfs_bd_read+0x13c>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   17a9e:	eba3 0804 	sub.w	r8, r3, r4
   17aa2:	4490      	add	r8, r2
   17aa4:	45d8      	cmp	r8, fp
   17aa6:	bf28      	it	cs
   17aa8:	46d8      	movcs	r8, fp
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   17aaa:	f8d9 100c 	ldr.w	r1, [r9, #12]
   17aae:	1ae3      	subs	r3, r4, r3
   17ab0:	4642      	mov	r2, r8
   17ab2:	4419      	add	r1, r3
   17ab4:	9812      	ldr	r0, [sp, #72]	; 0x48
   17ab6:	f7ff fa73 	bl	16fa0 <memcpy>
                data += diff;
   17aba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17abc:	4443      	add	r3, r8
   17abe:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   17ac0:	4444      	add	r4, r8
                size -= diff;
   17ac2:	ebab 0b08 	sub.w	fp, fp, r8
                continue;
   17ac6:	e056      	b.n	17b76 <lfs_bd_read+0x124>
        lfs_size_t diff = size;
   17ac8:	46d8      	mov	r8, fp
   17aca:	e060      	b.n	17b8e <lfs_bd_read+0x13c>
   17acc:	46d8      	mov	r8, fp
   17ace:	e05e      	b.n	17b8e <lfs_bd_read+0x13c>
                off < rcache->off + rcache->size) {
   17ad0:	686b      	ldr	r3, [r5, #4]
   17ad2:	68aa      	ldr	r2, [r5, #8]
   17ad4:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
   17ad6:	42a1      	cmp	r1, r4
   17ad8:	d95c      	bls.n	17b94 <lfs_bd_read+0x142>
            if (off >= rcache->off) {
   17ada:	42a3      	cmp	r3, r4
   17adc:	d904      	bls.n	17ae8 <lfs_bd_read+0x96>
            diff = lfs_min(diff, rcache->off-off);
   17ade:	1b1b      	subs	r3, r3, r4
   17ae0:	4598      	cmp	r8, r3
   17ae2:	bf28      	it	cs
   17ae4:	4698      	movcs	r8, r3
   17ae6:	e055      	b.n	17b94 <lfs_bd_read+0x142>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   17ae8:	1b19      	subs	r1, r3, r4
   17aea:	440a      	add	r2, r1
   17aec:	4590      	cmp	r8, r2
   17aee:	bf28      	it	cs
   17af0:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   17af2:	68e9      	ldr	r1, [r5, #12]
   17af4:	1ae3      	subs	r3, r4, r3
   17af6:	4642      	mov	r2, r8
   17af8:	4419      	add	r1, r3
   17afa:	9812      	ldr	r0, [sp, #72]	; 0x48
   17afc:	f7ff fa50 	bl	16fa0 <memcpy>
                data += diff;
   17b00:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17b02:	4443      	add	r3, r8
   17b04:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   17b06:	4444      	add	r4, r8
                size -= diff;
   17b08:	ebab 0b08 	sub.w	fp, fp, r8
                continue;
   17b0c:	e033      	b.n	17b76 <lfs_bd_read+0x124>
            data += diff;
   17b0e:	9912      	ldr	r1, [sp, #72]	; 0x48
   17b10:	9b04      	ldr	r3, [sp, #16]
   17b12:	4419      	add	r1, r3
   17b14:	9112      	str	r1, [sp, #72]	; 0x48
            off += diff;
   17b16:	441c      	add	r4, r3
            size -= diff;
   17b18:	9a05      	ldr	r2, [sp, #20]
   17b1a:	eba2 0308 	sub.w	r3, r2, r8
   17b1e:	449b      	add	fp, r3
            continue;
   17b20:	e029      	b.n	17b76 <lfs_bd_read+0x124>
        rcache->block = block;
   17b22:	602e      	str	r6, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   17b24:	9f03      	ldr	r7, [sp, #12]
   17b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   17b28:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
   17b2a:	fbb4 f2f3 	udiv	r2, r4, r3
   17b2e:	fb03 4212 	mls	r2, r3, r2, r4
   17b32:	1aa2      	subs	r2, r4, r2
   17b34:	606a      	str	r2, [r5, #4]
                lfs_min(
   17b36:	eb04 030a 	add.w	r3, r4, sl
                    lfs_alignup(off+hint, lfs->cfg->read_size),
   17b3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
                lfs_min(
   17b3c:	6948      	ldr	r0, [r1, #20]
    return lfs_aligndown(a + alignment-1, alignment);
   17b3e:	4403      	add	r3, r0
   17b40:	3b01      	subs	r3, #1
    return a - (a % alignment);
   17b42:	fbb3 fcf0 	udiv	ip, r3, r0
   17b46:	fb00 301c 	mls	r0, r0, ip, r3
   17b4a:	1a1b      	subs	r3, r3, r0
   17b4c:	69c8      	ldr	r0, [r1, #28]
        rcache->size = lfs_min(
   17b4e:	4298      	cmp	r0, r3
   17b50:	bf94      	ite	ls
   17b52:	ebc2 0300 	rsbls	r3, r2, r0
   17b56:	ebc2 0303 	rsbhi	r3, r2, r3
   17b5a:	6a89      	ldr	r1, [r1, #40]	; 0x28
    return (a < b) ? a : b;
   17b5c:	428b      	cmp	r3, r1
   17b5e:	bf28      	it	cs
   17b60:	460b      	movcs	r3, r1
   17b62:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
   17b64:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   17b66:	f8d0 8004 	ldr.w	r8, [r0, #4]
   17b6a:	9300      	str	r3, [sp, #0]
   17b6c:	68eb      	ldr	r3, [r5, #12]
   17b6e:	4631      	mov	r1, r6
   17b70:	47c0      	blx	r8
        if (err) {
   17b72:	4603      	mov	r3, r0
   17b74:	bb68      	cbnz	r0, 17bd2 <lfs_bd_read+0x180>
    while (size > 0) {
   17b76:	f1bb 0f00 	cmp.w	fp, #0
   17b7a:	d02e      	beq.n	17bda <lfs_bd_read+0x188>
        if (pcache && block == pcache->block &&
   17b7c:	f1b9 0f00 	cmp.w	r9, #0
   17b80:	d0a2      	beq.n	17ac8 <lfs_bd_read+0x76>
   17b82:	f8d9 3000 	ldr.w	r3, [r9]
   17b86:	42b3      	cmp	r3, r6
   17b88:	f43f af7a 	beq.w	17a80 <lfs_bd_read+0x2e>
        lfs_size_t diff = size;
   17b8c:	46d8      	mov	r8, fp
        if (block == rcache->block &&
   17b8e:	682b      	ldr	r3, [r5, #0]
   17b90:	42b3      	cmp	r3, r6
   17b92:	d09d      	beq.n	17ad0 <lfs_bd_read+0x7e>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
   17b94:	45d3      	cmp	fp, sl
   17b96:	d3c4      	bcc.n	17b22 <lfs_bd_read+0xd0>
   17b98:	9b03      	ldr	r3, [sp, #12]
   17b9a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   17b9c:	6942      	ldr	r2, [r0, #20]
   17b9e:	fbb4 f3f2 	udiv	r3, r4, r2
   17ba2:	fb02 4313 	mls	r3, r2, r3, r4
   17ba6:	2b00      	cmp	r3, #0
   17ba8:	d1bb      	bne.n	17b22 <lfs_bd_read+0xd0>
   17baa:	455a      	cmp	r2, fp
   17bac:	d8b9      	bhi.n	17b22 <lfs_bd_read+0xd0>
    return a - (a % alignment);
   17bae:	fbb8 f3f2 	udiv	r3, r8, r2
   17bb2:	fb02 8313 	mls	r3, r2, r3, r8
   17bb6:	9305      	str	r3, [sp, #20]
   17bb8:	eba8 0303 	sub.w	r3, r8, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
   17bbc:	6841      	ldr	r1, [r0, #4]
   17bbe:	460f      	mov	r7, r1
   17bc0:	9304      	str	r3, [sp, #16]
   17bc2:	9300      	str	r3, [sp, #0]
   17bc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17bc6:	4622      	mov	r2, r4
   17bc8:	4631      	mov	r1, r6
   17bca:	47b8      	blx	r7
            if (err) {
   17bcc:	4603      	mov	r3, r0
   17bce:	2800      	cmp	r0, #0
   17bd0:	d09d      	beq.n	17b0e <lfs_bd_read+0xbc>
}
   17bd2:	4618      	mov	r0, r3
   17bd4:	b007      	add	sp, #28
   17bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
   17bda:	2300      	movs	r3, #0
   17bdc:	e7f9      	b.n	17bd2 <lfs_bd_read+0x180>
        return LFS_ERR_CORRUPT;
   17bde:	f06f 0353 	mvn.w	r3, #83	; 0x53
   17be2:	e7f6      	b.n	17bd2 <lfs_bd_read+0x180>
   17be4:	f06f 0353 	mvn.w	r3, #83	; 0x53
   17be8:	e7f3      	b.n	17bd2 <lfs_bd_read+0x180>

00017bea <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
   17bea:	b530      	push	{r4, r5, lr}
   17bec:	b087      	sub	sp, #28
   17bee:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
   17bf0:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
   17bf2:	6e83      	ldr	r3, [r0, #104]	; 0x68
    int err = lfs_bd_read(lfs,
   17bf4:	69db      	ldr	r3, [r3, #28]
   17bf6:	2108      	movs	r1, #8
   17bf8:	9103      	str	r1, [sp, #12]
   17bfa:	a904      	add	r1, sp, #16
   17bfc:	9102      	str	r1, [sp, #8]
   17bfe:	6851      	ldr	r1, [r2, #4]
   17c00:	9101      	str	r1, [sp, #4]
   17c02:	6812      	ldr	r2, [r2, #0]
   17c04:	9200      	str	r2, [sp, #0]
   17c06:	4602      	mov	r2, r0
   17c08:	f100 0110 	add.w	r1, r0, #16
   17c0c:	f7ff ff21 	bl	17a52 <lfs_bd_read>
    if (err) {
   17c10:	4603      	mov	r3, r0
   17c12:	b978      	cbnz	r0, 17c34 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   17c14:	9a04      	ldr	r2, [sp, #16]
   17c16:	6861      	ldr	r1, [r4, #4]
   17c18:	4291      	cmp	r1, r2
   17c1a:	d008      	beq.n	17c2e <lfs_fs_parent_match+0x44>
   17c1c:	9d05      	ldr	r5, [sp, #20]
   17c1e:	68a0      	ldr	r0, [r4, #8]
   17c20:	4285      	cmp	r5, r0
   17c22:	d004      	beq.n	17c2e <lfs_fs_parent_match+0x44>
   17c24:	4282      	cmp	r2, r0
   17c26:	d002      	beq.n	17c2e <lfs_fs_parent_match+0x44>
   17c28:	42a9      	cmp	r1, r5
   17c2a:	d000      	beq.n	17c2e <lfs_fs_parent_match+0x44>
   17c2c:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
   17c2e:	3b00      	subs	r3, #0
   17c30:	bf18      	it	ne
   17c32:	2301      	movne	r3, #1
}
   17c34:	4618      	mov	r0, r3
   17c36:	b007      	add	sp, #28
   17c38:	bd30      	pop	{r4, r5, pc}

00017c3a <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
   17c3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c3e:	b087      	sub	sp, #28
   17c40:	4607      	mov	r7, r0
   17c42:	460e      	mov	r6, r1
   17c44:	4692      	mov	sl, r2
   17c46:	461d      	mov	r5, r3
   17c48:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   17c4c:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   17c50:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    for (lfs_off_t i = 0; i < size; i++) {
   17c54:	2400      	movs	r4, #0
   17c56:	e002      	b.n	17c5e <lfs_bd_cmp+0x24>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
   17c58:	2302      	movs	r3, #2
   17c5a:	e01e      	b.n	17c9a <lfs_bd_cmp+0x60>
    for (lfs_off_t i = 0; i < size; i++) {
   17c5c:	3401      	adds	r4, #1
   17c5e:	4544      	cmp	r4, r8
   17c60:	d21a      	bcs.n	17c98 <lfs_bd_cmp+0x5e>
        int err = lfs_bd_read(lfs,
   17c62:	2301      	movs	r3, #1
   17c64:	9303      	str	r3, [sp, #12]
   17c66:	f10d 0317 	add.w	r3, sp, #23
   17c6a:	9302      	str	r3, [sp, #8]
   17c6c:	eb04 0309 	add.w	r3, r4, r9
   17c70:	9301      	str	r3, [sp, #4]
   17c72:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17c74:	9300      	str	r3, [sp, #0]
   17c76:	1b2b      	subs	r3, r5, r4
   17c78:	4652      	mov	r2, sl
   17c7a:	4631      	mov	r1, r6
   17c7c:	4638      	mov	r0, r7
   17c7e:	f7ff fee8 	bl	17a52 <lfs_bd_read>
        if (err) {
   17c82:	4603      	mov	r3, r0
   17c84:	b948      	cbnz	r0, 17c9a <lfs_bd_cmp+0x60>
        if (dat != data[i]) {
   17c86:	f81b 2004 	ldrb.w	r2, [fp, r4]
   17c8a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   17c8e:	429a      	cmp	r2, r3
   17c90:	d0e4      	beq.n	17c5c <lfs_bd_cmp+0x22>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
   17c92:	d9e1      	bls.n	17c58 <lfs_bd_cmp+0x1e>
   17c94:	2301      	movs	r3, #1
   17c96:	e000      	b.n	17c9a <lfs_bd_cmp+0x60>
    return LFS_CMP_EQ;
   17c98:	2300      	movs	r3, #0
}
   17c9a:	4618      	mov	r0, r3
   17c9c:	b007      	add	sp, #28
   17c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017ca2 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
   17ca2:	b570      	push	{r4, r5, r6, lr}
   17ca4:	b084      	sub	sp, #16
   17ca6:	4604      	mov	r4, r0
   17ca8:	4615      	mov	r5, r2
    lfs_t *lfs = name->lfs;
   17caa:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
   17cac:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
   17cae:	f3c1 0609 	ubfx	r6, r1, #0, #10
    return (a < b) ? a : b;
   17cb2:	42b3      	cmp	r3, r6
   17cb4:	bf28      	it	cs
   17cb6:	4633      	movcs	r3, r6
    int res = lfs_bd_cmp(lfs,
   17cb8:	9303      	str	r3, [sp, #12]
   17cba:	6862      	ldr	r2, [r4, #4]
   17cbc:	9202      	str	r2, [sp, #8]
   17cbe:	686a      	ldr	r2, [r5, #4]
   17cc0:	9201      	str	r2, [sp, #4]
   17cc2:	682a      	ldr	r2, [r5, #0]
   17cc4:	9200      	str	r2, [sp, #0]
   17cc6:	4602      	mov	r2, r0
   17cc8:	2100      	movs	r1, #0
   17cca:	f7ff ffb6 	bl	17c3a <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
   17cce:	b920      	cbnz	r0, 17cda <lfs_dir_find_match+0x38>
    if (name->size != lfs_tag_size(tag)) {
   17cd0:	68a3      	ldr	r3, [r4, #8]
   17cd2:	42b3      	cmp	r3, r6
   17cd4:	d001      	beq.n	17cda <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   17cd6:	d202      	bcs.n	17cde <lfs_dir_find_match+0x3c>
   17cd8:	2001      	movs	r0, #1
}
   17cda:	b004      	add	sp, #16
   17cdc:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   17cde:	2002      	movs	r0, #2
   17ce0:	e7fb      	b.n	17cda <lfs_dir_find_match+0x38>

00017ce2 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
   17ce2:	b500      	push	{lr}
   17ce4:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   17ce6:	2300      	movs	r3, #0
   17ce8:	9303      	str	r3, [sp, #12]
   17cea:	9302      	str	r3, [sp, #8]
   17cec:	9301      	str	r3, [sp, #4]
   17cee:	f04f 33ff 	mov.w	r3, #4294967295
   17cf2:	9300      	str	r3, [sp, #0]
   17cf4:	f7f9 fc96 	bl	11624 <lfs_dir_fetchmatch>
}
   17cf8:	b005      	add	sp, #20
   17cfa:	f85d fb04 	ldr.w	pc, [sp], #4

00017cfe <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   17cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d00:	4607      	mov	r7, r0
   17d02:	460e      	mov	r6, r1
   17d04:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
   17d06:	2500      	movs	r5, #0
   17d08:	6195      	str	r5, [r2, #24]
    pdir->tail[1] = 1;
   17d0a:	2301      	movs	r3, #1
   17d0c:	61d3      	str	r3, [r2, #28]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   17d0e:	69a3      	ldr	r3, [r4, #24]
   17d10:	f1b3 3fff 	cmp.w	r3, #4294967295
   17d14:	d021      	beq.n	17d5a <lfs_fs_pred+0x5c>
   17d16:	69e2      	ldr	r2, [r4, #28]
   17d18:	f1b2 3fff 	cmp.w	r2, #4294967295
   17d1c:	d01b      	beq.n	17d56 <lfs_fs_pred+0x58>
   17d1e:	2200      	movs	r2, #0
    while (!lfs_pair_isnull(pdir->tail)) {
   17d20:	b9ea      	cbnz	r2, 17d5e <lfs_fs_pred+0x60>
        if (cycle >= lfs->cfg->block_count/2) {
   17d22:	6eba      	ldr	r2, [r7, #104]	; 0x68
   17d24:	6a12      	ldr	r2, [r2, #32]
   17d26:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
   17d2a:	d21b      	bcs.n	17d64 <lfs_fs_pred+0x66>
        cycle += 1;
   17d2c:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   17d2e:	6832      	ldr	r2, [r6, #0]
   17d30:	429a      	cmp	r2, r3
   17d32:	d01a      	beq.n	17d6a <lfs_fs_pred+0x6c>
   17d34:	69e0      	ldr	r0, [r4, #28]
   17d36:	6871      	ldr	r1, [r6, #4]
   17d38:	4288      	cmp	r0, r1
   17d3a:	d018      	beq.n	17d6e <lfs_fs_pred+0x70>
   17d3c:	4299      	cmp	r1, r3
   17d3e:	d018      	beq.n	17d72 <lfs_fs_pred+0x74>
   17d40:	4282      	cmp	r2, r0
   17d42:	d018      	beq.n	17d76 <lfs_fs_pred+0x78>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
   17d44:	f104 0218 	add.w	r2, r4, #24
   17d48:	4621      	mov	r1, r4
   17d4a:	4638      	mov	r0, r7
   17d4c:	f7ff ffc9 	bl	17ce2 <lfs_dir_fetch>
        if (err) {
   17d50:	2800      	cmp	r0, #0
   17d52:	d0dc      	beq.n	17d0e <lfs_fs_pred+0x10>
   17d54:	e00a      	b.n	17d6c <lfs_fs_pred+0x6e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   17d56:	2201      	movs	r2, #1
   17d58:	e7e2      	b.n	17d20 <lfs_fs_pred+0x22>
   17d5a:	2201      	movs	r2, #1
   17d5c:	e7e0      	b.n	17d20 <lfs_fs_pred+0x22>
    return LFS_ERR_NOENT;
   17d5e:	f06f 0001 	mvn.w	r0, #1
   17d62:	e003      	b.n	17d6c <lfs_fs_pred+0x6e>
            return LFS_ERR_CORRUPT;
   17d64:	f06f 0053 	mvn.w	r0, #83	; 0x53
   17d68:	e000      	b.n	17d6c <lfs_fs_pred+0x6e>
            return 0;
   17d6a:	2000      	movs	r0, #0
}
   17d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return 0;
   17d6e:	2000      	movs	r0, #0
   17d70:	e7fc      	b.n	17d6c <lfs_fs_pred+0x6e>
   17d72:	2000      	movs	r0, #0
   17d74:	e7fa      	b.n	17d6c <lfs_fs_pred+0x6e>
   17d76:	2000      	movs	r0, #0
   17d78:	e7f8      	b.n	17d6c <lfs_fs_pred+0x6e>

00017d7a <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
   17d7a:	b510      	push	{r4, lr}
   17d7c:	b084      	sub	sp, #16
    return tag & 0x000003ff;
   17d7e:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
   17d82:	9402      	str	r4, [sp, #8]
   17d84:	9c06      	ldr	r4, [sp, #24]
   17d86:	9401      	str	r4, [sp, #4]
   17d88:	2400      	movs	r4, #0
   17d8a:	9400      	str	r4, [sp, #0]
   17d8c:	f7fa f828 	bl	11de0 <lfs_dir_getslice>
}
   17d90:	b004      	add	sp, #16
   17d92:	bd10      	pop	{r4, pc}

00017d94 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
   17d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d98:	b085      	sub	sp, #20
   17d9a:	4606      	mov	r6, r0
   17d9c:	468a      	mov	sl, r1
   17d9e:	4617      	mov	r7, r2
   17da0:	461c      	mov	r4, r3
   17da2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   17da6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   17da8:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    if (off+size > lfs->cfg->block_size) {
   17dac:	eb05 0208 	add.w	r2, r5, r8
   17db0:	6e83      	ldr	r3, [r0, #104]	; 0x68
   17db2:	69db      	ldr	r3, [r3, #28]
   17db4:	429a      	cmp	r2, r3
   17db6:	d94e      	bls.n	17e56 <lfs_dir_getread+0xc2>
        return LFS_ERR_CORRUPT;
   17db8:	f06f 0053 	mvn.w	r0, #83	; 0x53
   17dbc:	e075      	b.n	17eaa <lfs_dir_getread+0x116>
                off < pcache->off + pcache->size) {
   17dbe:	6879      	ldr	r1, [r7, #4]
   17dc0:	68bb      	ldr	r3, [r7, #8]
   17dc2:	18ca      	adds	r2, r1, r3
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
   17dc4:	42aa      	cmp	r2, r5
   17dc6:	d91c      	bls.n	17e02 <lfs_dir_getread+0x6e>
            if (off >= pcache->off) {
   17dc8:	42a9      	cmp	r1, r5
   17dca:	d904      	bls.n	17dd6 <lfs_dir_getread+0x42>
            diff = lfs_min(diff, pcache->off-off);
   17dcc:	1b49      	subs	r1, r1, r5
   17dce:	4541      	cmp	r1, r8
   17dd0:	bf28      	it	cs
   17dd2:	4641      	movcs	r1, r8
   17dd4:	e049      	b.n	17e6a <lfs_dir_getread+0xd6>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   17dd6:	eba1 0905 	sub.w	r9, r1, r5
   17dda:	4499      	add	r9, r3
   17ddc:	45c1      	cmp	r9, r8
   17dde:	bf28      	it	cs
   17de0:	46c1      	movcs	r9, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   17de2:	68fb      	ldr	r3, [r7, #12]
   17de4:	1a69      	subs	r1, r5, r1
   17de6:	464a      	mov	r2, r9
   17de8:	4419      	add	r1, r3
   17dea:	9812      	ldr	r0, [sp, #72]	; 0x48
   17dec:	f7ff f8d8 	bl	16fa0 <memcpy>
                data += diff;
   17df0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17df2:	444b      	add	r3, r9
   17df4:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   17df6:	444d      	add	r5, r9
                size -= diff;
   17df8:	eba8 0809 	sub.w	r8, r8, r9
                continue;
   17dfc:	e02b      	b.n	17e56 <lfs_dir_getread+0xc2>
        lfs_size_t diff = size;
   17dfe:	4641      	mov	r1, r8
   17e00:	e033      	b.n	17e6a <lfs_dir_getread+0xd6>
   17e02:	4641      	mov	r1, r8
   17e04:	e031      	b.n	17e6a <lfs_dir_getread+0xd6>
        rcache->block = LFS_BLOCK_INLINE;
   17e06:	f06f 0301 	mvn.w	r3, #1
   17e0a:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   17e0c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   17e0e:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
   17e10:	fbb5 f2f3 	udiv	r2, r5, r3
   17e14:	fb03 5212 	mls	r2, r3, r2, r5
   17e18:	1aaa      	subs	r2, r5, r2
   17e1a:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
   17e1c:	eb05 030b 	add.w	r3, r5, fp
   17e20:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   17e22:	f8d0 c014 	ldr.w	ip, [r0, #20]
    return lfs_aligndown(a + alignment-1, alignment);
   17e26:	4463      	add	r3, ip
   17e28:	3b01      	subs	r3, #1
    return a - (a % alignment);
   17e2a:	fbb3 f1fc 	udiv	r1, r3, ip
   17e2e:	fb0c 3111 	mls	r1, ip, r1, r3
   17e32:	1a5b      	subs	r3, r3, r1
   17e34:	6a81      	ldr	r1, [r0, #40]	; 0x28
    return (a < b) ? a : b;
   17e36:	428b      	cmp	r3, r1
   17e38:	bf28      	it	cs
   17e3a:	460b      	movcs	r3, r1
   17e3c:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
   17e3e:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
   17e40:	9302      	str	r3, [sp, #8]
   17e42:	9101      	str	r1, [sp, #4]
   17e44:	9200      	str	r2, [sp, #0]
   17e46:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17e4a:	4651      	mov	r1, sl
   17e4c:	4630      	mov	r0, r6
   17e4e:	f7f9 ffc7 	bl	11de0 <lfs_dir_getslice>
        if (err < 0) {
   17e52:	2800      	cmp	r0, #0
   17e54:	db29      	blt.n	17eaa <lfs_dir_getread+0x116>
    while (size > 0) {
   17e56:	f1b8 0f00 	cmp.w	r8, #0
   17e5a:	d025      	beq.n	17ea8 <lfs_dir_getread+0x114>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
   17e5c:	2f00      	cmp	r7, #0
   17e5e:	d0ce      	beq.n	17dfe <lfs_dir_getread+0x6a>
   17e60:	683b      	ldr	r3, [r7, #0]
   17e62:	f113 0f02 	cmn.w	r3, #2
   17e66:	d0aa      	beq.n	17dbe <lfs_dir_getread+0x2a>
        lfs_size_t diff = size;
   17e68:	4641      	mov	r1, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
   17e6a:	6823      	ldr	r3, [r4, #0]
   17e6c:	f113 0f02 	cmn.w	r3, #2
   17e70:	d1c9      	bne.n	17e06 <lfs_dir_getread+0x72>
                off < rcache->off + rcache->size) {
   17e72:	6863      	ldr	r3, [r4, #4]
   17e74:	68a2      	ldr	r2, [r4, #8]
   17e76:	1898      	adds	r0, r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
   17e78:	42a8      	cmp	r0, r5
   17e7a:	d9c4      	bls.n	17e06 <lfs_dir_getread+0x72>
            if (off >= rcache->off) {
   17e7c:	42ab      	cmp	r3, r5
   17e7e:	d8c2      	bhi.n	17e06 <lfs_dir_getread+0x72>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   17e80:	eba3 0905 	sub.w	r9, r3, r5
   17e84:	4491      	add	r9, r2
   17e86:	4589      	cmp	r9, r1
   17e88:	bf28      	it	cs
   17e8a:	4689      	movcs	r9, r1
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   17e8c:	68e1      	ldr	r1, [r4, #12]
   17e8e:	1aeb      	subs	r3, r5, r3
   17e90:	464a      	mov	r2, r9
   17e92:	4419      	add	r1, r3
   17e94:	9812      	ldr	r0, [sp, #72]	; 0x48
   17e96:	f7ff f883 	bl	16fa0 <memcpy>
                data += diff;
   17e9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17e9c:	444b      	add	r3, r9
   17e9e:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   17ea0:	444d      	add	r5, r9
                size -= diff;
   17ea2:	eba8 0809 	sub.w	r8, r8, r9
                continue;
   17ea6:	e7d6      	b.n	17e56 <lfs_dir_getread+0xc2>
    return 0;
   17ea8:	2000      	movs	r0, #0
}
   17eaa:	b005      	add	sp, #20
   17eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017eb0 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   17eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17eb4:	b085      	sub	sp, #20
   17eb6:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   17eb8:	6809      	ldr	r1, [r1, #0]
   17eba:	f111 0f03 	cmn.w	r1, #3
   17ebe:	d834      	bhi.n	17f2a <lfs_bd_flush+0x7a>
   17ec0:	4606      	mov	r6, r0
   17ec2:	4617      	mov	r7, r2
   17ec4:	4698      	mov	r8, r3
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
   17ec6:	68a5      	ldr	r5, [r4, #8]
   17ec8:	6e80      	ldr	r0, [r0, #104]	; 0x68
   17eca:	6982      	ldr	r2, [r0, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   17ecc:	4415      	add	r5, r2
   17ece:	3d01      	subs	r5, #1
    return a - (a % alignment);
   17ed0:	fbb5 f3f2 	udiv	r3, r5, r2
   17ed4:	fb02 5313 	mls	r3, r2, r3, r5
   17ed8:	1aed      	subs	r5, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
   17eda:	f8d0 9008 	ldr.w	r9, [r0, #8]
   17ede:	9500      	str	r5, [sp, #0]
   17ee0:	68e3      	ldr	r3, [r4, #12]
   17ee2:	6862      	ldr	r2, [r4, #4]
   17ee4:	47c8      	blx	r9
        if (err) {
   17ee6:	4681      	mov	r9, r0
   17ee8:	bb08      	cbnz	r0, 17f2e <lfs_bd_flush+0x7e>
        if (validate) {
   17eea:	f1b8 0f00 	cmp.w	r8, #0
   17eee:	d012      	beq.n	17f16 <lfs_bd_flush+0x66>
    rcache->block = LFS_BLOCK_NULL;
   17ef0:	f04f 33ff 	mov.w	r3, #4294967295
   17ef4:	603b      	str	r3, [r7, #0]
                    pcache->block, pcache->off, pcache->buffer, diff);
   17ef6:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
   17ef8:	9503      	str	r5, [sp, #12]
   17efa:	9302      	str	r3, [sp, #8]
   17efc:	6863      	ldr	r3, [r4, #4]
   17efe:	9301      	str	r3, [sp, #4]
   17f00:	6823      	ldr	r3, [r4, #0]
   17f02:	9300      	str	r3, [sp, #0]
   17f04:	462b      	mov	r3, r5
   17f06:	463a      	mov	r2, r7
   17f08:	2100      	movs	r1, #0
   17f0a:	4630      	mov	r0, r6
   17f0c:	f7ff fe95 	bl	17c3a <lfs_bd_cmp>
            if (res < 0) {
   17f10:	2800      	cmp	r0, #0
   17f12:	db10      	blt.n	17f36 <lfs_bd_flush+0x86>
            if (res != LFS_CMP_EQ) {
   17f14:	b988      	cbnz	r0, 17f3a <lfs_bd_flush+0x8a>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   17f16:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   17f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   17f1a:	21ff      	movs	r1, #255	; 0xff
   17f1c:	68e0      	ldr	r0, [r4, #12]
   17f1e:	f7ff f863 	bl	16fe8 <memset>
    pcache->block = LFS_BLOCK_NULL;
   17f22:	f04f 33ff 	mov.w	r3, #4294967295
   17f26:	6023      	str	r3, [r4, #0]
}
   17f28:	e001      	b.n	17f2e <lfs_bd_flush+0x7e>
    return 0;
   17f2a:	f04f 0900 	mov.w	r9, #0
}
   17f2e:	4648      	mov	r0, r9
   17f30:	b005      	add	sp, #20
   17f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
   17f36:	4681      	mov	r9, r0
   17f38:	e7f9      	b.n	17f2e <lfs_bd_flush+0x7e>
                return LFS_ERR_CORRUPT;
   17f3a:	f06f 0953 	mvn.w	r9, #83	; 0x53
   17f3e:	e7f6      	b.n	17f2e <lfs_bd_flush+0x7e>

00017f40 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
   17f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f44:	b083      	sub	sp, #12
   17f46:	4607      	mov	r7, r0
   17f48:	460c      	mov	r4, r1
   17f4a:	4693      	mov	fp, r2
   17f4c:	9301      	str	r3, [sp, #4]
   17f4e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   17f50:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   17f52:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   17f56:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    while (size > 0) {
   17f5a:	e00a      	b.n	17f72 <lfs_bd_prog+0x32>
        pcache->block = block;
   17f5c:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
   17f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   17f60:	699a      	ldr	r2, [r3, #24]
   17f62:	fbb5 f3f2 	udiv	r3, r5, r2
   17f66:	fb02 5313 	mls	r3, r2, r3, r5
   17f6a:	1aeb      	subs	r3, r5, r3
   17f6c:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
   17f6e:	2300      	movs	r3, #0
   17f70:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
   17f72:	f1b8 0f00 	cmp.w	r8, #0
   17f76:	d02e      	beq.n	17fd6 <lfs_bd_prog+0x96>
        if (block == pcache->block &&
   17f78:	6823      	ldr	r3, [r4, #0]
   17f7a:	42b3      	cmp	r3, r6
   17f7c:	d1ee      	bne.n	17f5c <lfs_bd_prog+0x1c>
                off >= pcache->off &&
   17f7e:	6860      	ldr	r0, [r4, #4]
        if (block == pcache->block &&
   17f80:	42a8      	cmp	r0, r5
   17f82:	d8eb      	bhi.n	17f5c <lfs_bd_prog+0x1c>
                off < pcache->off + lfs->cfg->cache_size) {
   17f84:	6eba      	ldr	r2, [r7, #104]	; 0x68
   17f86:	6a92      	ldr	r2, [r2, #40]	; 0x28
   17f88:	1881      	adds	r1, r0, r2
                off >= pcache->off &&
   17f8a:	42a9      	cmp	r1, r5
   17f8c:	d9e6      	bls.n	17f5c <lfs_bd_prog+0x1c>
                    lfs->cfg->cache_size - (off-pcache->off));
   17f8e:	eba0 0905 	sub.w	r9, r0, r5
            lfs_size_t diff = lfs_min(size,
   17f92:	4491      	add	r9, r2
    return (a < b) ? a : b;
   17f94:	45c1      	cmp	r9, r8
   17f96:	bf28      	it	cs
   17f98:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
   17f9a:	1a28      	subs	r0, r5, r0
   17f9c:	464a      	mov	r2, r9
   17f9e:	4651      	mov	r1, sl
   17fa0:	68e3      	ldr	r3, [r4, #12]
   17fa2:	4418      	add	r0, r3
   17fa4:	f7fe fffc 	bl	16fa0 <memcpy>
            data += diff;
   17fa8:	44ca      	add	sl, r9
            off += diff;
   17faa:	444d      	add	r5, r9
            size -= diff;
   17fac:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   17fb0:	68a3      	ldr	r3, [r4, #8]
   17fb2:	6862      	ldr	r2, [r4, #4]
   17fb4:	1aaa      	subs	r2, r5, r2
    return (a > b) ? a : b;
   17fb6:	4293      	cmp	r3, r2
   17fb8:	bf38      	it	cc
   17fba:	4613      	movcc	r3, r2
   17fbc:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
   17fbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
   17fc0:	6a92      	ldr	r2, [r2, #40]	; 0x28
   17fc2:	429a      	cmp	r2, r3
   17fc4:	d1d5      	bne.n	17f72 <lfs_bd_prog+0x32>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   17fc6:	9b01      	ldr	r3, [sp, #4]
   17fc8:	465a      	mov	r2, fp
   17fca:	4621      	mov	r1, r4
   17fcc:	4638      	mov	r0, r7
   17fce:	f7ff ff6f 	bl	17eb0 <lfs_bd_flush>
                if (err) {
   17fd2:	b908      	cbnz	r0, 17fd8 <lfs_bd_prog+0x98>
   17fd4:	e7cd      	b.n	17f72 <lfs_bd_prog+0x32>
    return 0;
   17fd6:	2000      	movs	r0, #0
}
   17fd8:	b003      	add	sp, #12
   17fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017fde <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
   17fde:	b5f0      	push	{r4, r5, r6, r7, lr}
   17fe0:	b085      	sub	sp, #20
   17fe2:	460c      	mov	r4, r1
   17fe4:	4617      	mov	r7, r2
   17fe6:	461e      	mov	r6, r3
    int err = lfs_bd_prog(lfs,
   17fe8:	9303      	str	r3, [sp, #12]
   17fea:	9202      	str	r2, [sp, #8]
   17fec:	684b      	ldr	r3, [r1, #4]
   17fee:	9301      	str	r3, [sp, #4]
   17ff0:	680b      	ldr	r3, [r1, #0]
   17ff2:	9300      	str	r3, [sp, #0]
   17ff4:	2300      	movs	r3, #0
   17ff6:	4602      	mov	r2, r0
   17ff8:	f100 0110 	add.w	r1, r0, #16
   17ffc:	f7ff ffa0 	bl	17f40 <lfs_bd_prog>
    if (err) {
   18000:	4605      	mov	r5, r0
   18002:	b110      	cbz	r0, 1800a <lfs_dir_commitprog+0x2c>
}
   18004:	4628      	mov	r0, r5
   18006:	b005      	add	sp, #20
   18008:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
   1800a:	4632      	mov	r2, r6
   1800c:	4639      	mov	r1, r7
   1800e:	68e0      	ldr	r0, [r4, #12]
   18010:	f7fb ff64 	bl	13edc <lfs_crc>
   18014:	60e0      	str	r0, [r4, #12]
    commit->off += size;
   18016:	6863      	ldr	r3, [r4, #4]
   18018:	4433      	add	r3, r6
   1801a:	6063      	str	r3, [r4, #4]
    return 0;
   1801c:	e7f2      	b.n	18004 <lfs_dir_commitprog+0x26>

0001801e <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
   1801e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18022:	b087      	sub	sp, #28
   18024:	4614      	mov	r4, r2
   18026:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
   18028:	f342 0809 	sbfx	r8, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   1802c:	f1b8 3fff 	cmp.w	r8, #4294967295
   18030:	bf14      	ite	ne
   18032:	4690      	movne	r8, r2
   18034:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
   18038:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   1803c:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
   18040:	684b      	ldr	r3, [r1, #4]
   18042:	444b      	add	r3, r9
   18044:	694a      	ldr	r2, [r1, #20]
   18046:	4293      	cmp	r3, r2
   18048:	d842      	bhi.n	180d0 <lfs_dir_commitattr+0xb2>
   1804a:	4605      	mov	r5, r0
   1804c:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
   1804e:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
   18052:	688b      	ldr	r3, [r1, #8]
   18054:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
   18058:	ba1b      	rev	r3, r3
   1805a:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
   1805c:	2304      	movs	r3, #4
   1805e:	aa05      	add	r2, sp, #20
   18060:	f7ff ffbd 	bl	17fde <lfs_dir_commitprog>
    if (err) {
   18064:	4682      	mov	sl, r0
   18066:	b960      	cbnz	r0, 18082 <lfs_dir_commitattr+0x64>
    if (!(tag & 0x80000000)) {
   18068:	2c00      	cmp	r4, #0
   1806a:	da01      	bge.n	18070 <lfs_dir_commitattr+0x52>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   1806c:	2400      	movs	r4, #0
   1806e:	e00d      	b.n	1808c <lfs_dir_commitattr+0x6e>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   18070:	4643      	mov	r3, r8
   18072:	463a      	mov	r2, r7
   18074:	4631      	mov	r1, r6
   18076:	4628      	mov	r0, r5
   18078:	f7ff ffb1 	bl	17fde <lfs_dir_commitprog>
        if (err) {
   1807c:	bb58      	cbnz	r0, 180d6 <lfs_dir_commitattr+0xb8>
    commit->ptag = tag & 0x7fffffff;
   1807e:	f8c6 b008 	str.w	fp, [r6, #8]
}
   18082:	4650      	mov	r0, sl
   18084:	b007      	add	sp, #28
   18086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   1808a:	3401      	adds	r4, #1
   1808c:	4544      	cmp	r4, r8
   1808e:	d2f6      	bcs.n	1807e <lfs_dir_commitattr+0x60>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
   18090:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
   18094:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
   18096:	2101      	movs	r1, #1
   18098:	9103      	str	r1, [sp, #12]
   1809a:	f10d 0113 	add.w	r1, sp, #19
   1809e:	9102      	str	r1, [sp, #8]
   180a0:	4422      	add	r2, r4
   180a2:	9201      	str	r2, [sp, #4]
   180a4:	683a      	ldr	r2, [r7, #0]
   180a6:	9200      	str	r2, [sp, #0]
   180a8:	3b04      	subs	r3, #4
   180aa:	462a      	mov	r2, r5
   180ac:	2100      	movs	r1, #0
   180ae:	4628      	mov	r0, r5
   180b0:	f7ff fccf 	bl	17a52 <lfs_bd_read>
            if (err) {
   180b4:	4603      	mov	r3, r0
   180b6:	b948      	cbnz	r0, 180cc <lfs_dir_commitattr+0xae>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
   180b8:	2301      	movs	r3, #1
   180ba:	f10d 0213 	add.w	r2, sp, #19
   180be:	4631      	mov	r1, r6
   180c0:	4628      	mov	r0, r5
   180c2:	f7ff ff8c 	bl	17fde <lfs_dir_commitprog>
            if (err) {
   180c6:	4603      	mov	r3, r0
   180c8:	2800      	cmp	r0, #0
   180ca:	d0de      	beq.n	1808a <lfs_dir_commitattr+0x6c>
                return err;
   180cc:	469a      	mov	sl, r3
   180ce:	e7d8      	b.n	18082 <lfs_dir_commitattr+0x64>
        return LFS_ERR_NOSPC;
   180d0:	f06f 0a1b 	mvn.w	sl, #27
   180d4:	e7d5      	b.n	18082 <lfs_dir_commitattr+0x64>
            return err;
   180d6:	4682      	mov	sl, r0
   180d8:	e7d3      	b.n	18082 <lfs_dir_commitattr+0x64>

000180da <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
   180da:	b508      	push	{r3, lr}
   180dc:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
   180de:	460a      	mov	r2, r1
   180e0:	6841      	ldr	r1, [r0, #4]
   180e2:	6800      	ldr	r0, [r0, #0]
   180e4:	f7ff ff9b 	bl	1801e <lfs_dir_commitattr>
}
   180e8:	bd08      	pop	{r3, pc}

000180ea <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   180ea:	b538      	push	{r3, r4, r5, lr}
   180ec:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
   180ee:	f04f 35ff 	mov.w	r5, #4294967295
   180f2:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   180f4:	f7ff fedc 	bl	17eb0 <lfs_bd_flush>
    if (err) {
   180f8:	b910      	cbnz	r0, 18100 <lfs_bd_sync+0x16>
    err = lfs->cfg->sync(lfs->cfg);
   180fa:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   180fc:	6903      	ldr	r3, [r0, #16]
   180fe:	4798      	blx	r3
}
   18100:	bd38      	pop	{r3, r4, r5, pc}

00018102 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   18102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18106:	b08b      	sub	sp, #44	; 0x2c
   18108:	4605      	mov	r5, r0
   1810a:	460c      	mov	r4, r1
    const lfs_off_t off1 = commit->off;
   1810c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    const uint32_t crc1 = commit->crc;
   18110:	68cb      	ldr	r3, [r1, #12]
   18112:	9304      	str	r3, [sp, #16]
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
   18114:	f10b 0608 	add.w	r6, fp, #8
            lfs->cfg->prog_size);
   18118:	6e83      	ldr	r3, [r0, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
   1811a:	699a      	ldr	r2, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   1811c:	4416      	add	r6, r2
   1811e:	3e01      	subs	r6, #1
    return a - (a % alignment);
   18120:	fbb6 f3f2 	udiv	r3, r6, r2
   18124:	fb02 6313 	mls	r3, r2, r3, r6
   18128:	1af6      	subs	r6, r6, r3
    while (commit->off < end) {
   1812a:	e04d      	b.n	181c8 <lfs_dir_commitcrc+0xc6>
        lfs_tag_t tag = 0xffffffff;
   1812c:	f04f 33ff 	mov.w	r3, #4294967295
   18130:	9307      	str	r3, [sp, #28]
        int err = lfs_bd_read(lfs,
   18132:	2304      	movs	r3, #4
   18134:	9303      	str	r3, [sp, #12]
   18136:	aa07      	add	r2, sp, #28
   18138:	9202      	str	r2, [sp, #8]
   1813a:	9701      	str	r7, [sp, #4]
   1813c:	6822      	ldr	r2, [r4, #0]
   1813e:	9200      	str	r2, [sp, #0]
   18140:	462a      	mov	r2, r5
   18142:	2100      	movs	r1, #0
   18144:	4628      	mov	r0, r5
   18146:	f7ff fc84 	bl	17a52 <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   1814a:	b118      	cbz	r0, 18154 <lfs_dir_commitcrc+0x52>
   1814c:	f110 0f54 	cmn.w	r0, #84	; 0x54
   18150:	f040 80aa 	bne.w	182a8 <lfs_dir_commitcrc+0x1a6>
        bool reset = ~lfs_frombe32(tag) >> 31;
   18154:	9b07      	ldr	r3, [sp, #28]
    return __builtin_bswap32(a);
   18156:	ba1b      	rev	r3, r3
   18158:	ea6f 0803 	mvn.w	r8, r3
   1815c:	ea4f 78d8 	mov.w	r8, r8, lsr #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   18160:	f508 63a0 	add.w	r3, r8, #1280	; 0x500
   18164:	eba7 0709 	sub.w	r7, r7, r9
   18168:	ea47 5703 	orr.w	r7, r7, r3, lsl #20
   1816c:	f447 277f 	orr.w	r7, r7, #1044480	; 0xff000
   18170:	f447 6740 	orr.w	r7, r7, #3072	; 0xc00
   18174:	9707      	str	r7, [sp, #28]
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   18176:	68a3      	ldr	r3, [r4, #8]
   18178:	405f      	eors	r7, r3
   1817a:	ba3f      	rev	r7, r7
   1817c:	9708      	str	r7, [sp, #32]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   1817e:	af08      	add	r7, sp, #32
   18180:	2204      	movs	r2, #4
   18182:	4639      	mov	r1, r7
   18184:	68e0      	ldr	r0, [r4, #12]
   18186:	f7fb fea9 	bl	13edc <lfs_crc>
   1818a:	60e0      	str	r0, [r4, #12]
        footer[1] = lfs_tole32(commit->crc);
   1818c:	9009      	str	r0, [sp, #36]	; 0x24
        err = lfs_bd_prog(lfs,
   1818e:	2308      	movs	r3, #8
   18190:	9303      	str	r3, [sp, #12]
   18192:	9702      	str	r7, [sp, #8]
   18194:	6863      	ldr	r3, [r4, #4]
   18196:	9301      	str	r3, [sp, #4]
   18198:	6823      	ldr	r3, [r4, #0]
   1819a:	9300      	str	r3, [sp, #0]
   1819c:	2300      	movs	r3, #0
   1819e:	462a      	mov	r2, r5
   181a0:	f105 0110 	add.w	r1, r5, #16
   181a4:	4628      	mov	r0, r5
   181a6:	f7ff fecb 	bl	17f40 <lfs_bd_prog>
        if (err) {
   181aa:	2800      	cmp	r0, #0
   181ac:	d17e      	bne.n	182ac <lfs_dir_commitcrc+0x1aa>
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   181ae:	9b07      	ldr	r3, [sp, #28]
    return tag & 0x000003ff;
   181b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   181b4:	1d11      	adds	r1, r2, #4
   181b6:	6862      	ldr	r2, [r4, #4]
   181b8:	440a      	add	r2, r1
   181ba:	6062      	str	r2, [r4, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
   181bc:	ea83 73c8 	eor.w	r3, r3, r8, lsl #31
   181c0:	60a3      	str	r3, [r4, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   181c2:	f04f 33ff 	mov.w	r3, #4294967295
   181c6:	60e3      	str	r3, [r4, #12]
    while (commit->off < end) {
   181c8:	6867      	ldr	r7, [r4, #4]
   181ca:	42b7      	cmp	r7, r6
   181cc:	d212      	bcs.n	181f4 <lfs_dir_commitcrc+0xf2>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
   181ce:	f107 0904 	add.w	r9, r7, #4
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
   181d2:	eba6 0709 	sub.w	r7, r6, r9
   181d6:	f240 33fe 	movw	r3, #1022	; 0x3fe
   181da:	429f      	cmp	r7, r3
   181dc:	bf94      	ite	ls
   181de:	444f      	addls	r7, r9
   181e0:	eb09 0703 	addhi.w	r7, r9, r3
        if (noff < end) {
   181e4:	42b7      	cmp	r7, r6
   181e6:	d2a1      	bcs.n	1812c <lfs_dir_commitcrc+0x2a>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
   181e8:	f1a6 0308 	sub.w	r3, r6, #8
    return (a < b) ? a : b;
   181ec:	429f      	cmp	r7, r3
   181ee:	bf28      	it	cs
   181f0:	461f      	movcs	r7, r3
   181f2:	e79b      	b.n	1812c <lfs_dir_commitcrc+0x2a>
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
   181f4:	9505      	str	r5, [sp, #20]
   181f6:	2300      	movs	r3, #0
   181f8:	462a      	mov	r2, r5
   181fa:	f105 0110 	add.w	r1, r5, #16
   181fe:	4628      	mov	r0, r5
   18200:	f7ff ff73 	bl	180ea <lfs_bd_sync>
    if (err) {
   18204:	4607      	mov	r7, r0
   18206:	2800      	cmp	r0, #0
   18208:	d151      	bne.n	182ae <lfs_dir_commitcrc+0x1ac>
    lfs_off_t off = commit->begin;
   1820a:	f8d4 8010 	ldr.w	r8, [r4, #16]
    lfs_off_t noff = off1 + sizeof(uint32_t);
   1820e:	f10b 0a04 	add.w	sl, fp, #4
    while (off < end) {
   18212:	f8dd 9010 	ldr.w	r9, [sp, #16]
   18216:	9604      	str	r6, [sp, #16]
   18218:	4646      	mov	r6, r8
   1821a:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1821e:	9005      	str	r0, [sp, #20]
   18220:	9b04      	ldr	r3, [sp, #16]
   18222:	429e      	cmp	r6, r3
   18224:	d23b      	bcs.n	1829e <lfs_dir_commitcrc+0x19c>
        uint32_t crc = 0xffffffff;
   18226:	f04f 37ff 	mov.w	r7, #4294967295
   1822a:	e017      	b.n	1825c <lfs_dir_commitcrc+0x15a>
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
   1822c:	ebaa 0306 	sub.w	r3, sl, r6
            err = lfs_bd_read(lfs,
   18230:	2201      	movs	r2, #1
   18232:	9203      	str	r2, [sp, #12]
   18234:	aa08      	add	r2, sp, #32
   18236:	9202      	str	r2, [sp, #8]
   18238:	9601      	str	r6, [sp, #4]
   1823a:	6822      	ldr	r2, [r4, #0]
   1823c:	9200      	str	r2, [sp, #0]
   1823e:	3304      	adds	r3, #4
   18240:	4642      	mov	r2, r8
   18242:	2100      	movs	r1, #0
   18244:	4628      	mov	r0, r5
   18246:	f7ff fc04 	bl	17a52 <lfs_bd_read>
            if (err) {
   1824a:	4603      	mov	r3, r0
   1824c:	b980      	cbnz	r0, 18270 <lfs_dir_commitcrc+0x16e>
            crc = lfs_crc(crc, &dat, 1);
   1824e:	2201      	movs	r2, #1
   18250:	a908      	add	r1, sp, #32
   18252:	4638      	mov	r0, r7
   18254:	f7fb fe42 	bl	13edc <lfs_crc>
   18258:	4607      	mov	r7, r0
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   1825a:	3601      	adds	r6, #1
   1825c:	f10a 0304 	add.w	r3, sl, #4
   18260:	42b3      	cmp	r3, r6
   18262:	d907      	bls.n	18274 <lfs_dir_commitcrc+0x172>
            if (i == off1 && crc != crc1) {
   18264:	455e      	cmp	r6, fp
   18266:	d1e1      	bne.n	1822c <lfs_dir_commitcrc+0x12a>
   18268:	454f      	cmp	r7, r9
   1826a:	d0df      	beq.n	1822c <lfs_dir_commitcrc+0x12a>
                return LFS_ERR_CORRUPT;
   1826c:	f06f 0353 	mvn.w	r3, #83	; 0x53
   18270:	461f      	mov	r7, r3
   18272:	e01c      	b.n	182ae <lfs_dir_commitcrc+0x1ac>
        if (crc != 0) {
   18274:	b9af      	cbnz	r7, 182a2 <lfs_dir_commitcrc+0x1a0>
        off = lfs_min(end - noff, 0x3fe) + noff;
   18276:	9a04      	ldr	r2, [sp, #16]
   18278:	eba2 060a 	sub.w	r6, r2, sl
   1827c:	f240 33fe 	movw	r3, #1022	; 0x3fe
   18280:	429e      	cmp	r6, r3
   18282:	bf94      	ite	ls
   18284:	4456      	addls	r6, sl
   18286:	eb0a 0603 	addhi.w	r6, sl, r3
        if (off < end) {
   1828a:	4296      	cmp	r6, r2
   1828c:	d204      	bcs.n	18298 <lfs_dir_commitcrc+0x196>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
   1828e:	f1a2 0308 	sub.w	r3, r2, #8
   18292:	429e      	cmp	r6, r3
   18294:	bf28      	it	cs
   18296:	461e      	movcs	r6, r3
        noff = off + sizeof(uint32_t);
   18298:	f106 0a04 	add.w	sl, r6, #4
   1829c:	e7c0      	b.n	18220 <lfs_dir_commitcrc+0x11e>
   1829e:	9f05      	ldr	r7, [sp, #20]
   182a0:	e005      	b.n	182ae <lfs_dir_commitcrc+0x1ac>
            return LFS_ERR_CORRUPT;
   182a2:	f06f 0753 	mvn.w	r7, #83	; 0x53
   182a6:	e002      	b.n	182ae <lfs_dir_commitcrc+0x1ac>
   182a8:	4607      	mov	r7, r0
   182aa:	e000      	b.n	182ae <lfs_dir_commitcrc+0x1ac>
   182ac:	4607      	mov	r7, r0
}
   182ae:	4638      	mov	r0, r7
   182b0:	b00b      	add	sp, #44	; 0x2c
   182b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000182b6 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
   182b6:	b510      	push	{r4, lr}
   182b8:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
   182ba:	6e83      	ldr	r3, [r0, #104]	; 0x68
   182bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   182be:	b13b      	cbz	r3, 182d0 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
   182c0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   182c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   182c4:	b143      	cbz	r3, 182d8 <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
   182c6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   182c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   182ca:	b14b      	cbz	r3, 182e0 <lfs_deinit+0x2a>
}
   182cc:	2000      	movs	r0, #0
   182ce:	bd10      	pop	{r4, pc}
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
   182d0:	68c0      	ldr	r0, [r0, #12]
   182d2:	f7fe fdee 	bl	16eb2 <free>
#else
    (void)p;
#endif
}
   182d6:	e7f3      	b.n	182c0 <lfs_deinit+0xa>
    free(p);
   182d8:	69e0      	ldr	r0, [r4, #28]
   182da:	f7fe fdea 	bl	16eb2 <free>
}
   182de:	e7f2      	b.n	182c6 <lfs_deinit+0x10>
    free(p);
   182e0:	6e60      	ldr	r0, [r4, #100]	; 0x64
   182e2:	f7fe fde6 	bl	16eb2 <free>
}
   182e6:	e7f1      	b.n	182cc <lfs_deinit+0x16>

000182e8 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
   182e8:	b538      	push	{r3, r4, r5, lr}
   182ea:	4604      	mov	r4, r0
    lfs->cfg = cfg;
   182ec:	6681      	str	r1, [r0, #104]	; 0x68
    if (lfs->cfg->read_buffer) {
   182ee:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   182f0:	2b00      	cmp	r3, #0
   182f2:	d03d      	beq.n	18370 <lfs_init+0x88>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
   182f4:	60c3      	str	r3, [r0, #12]
    if (lfs->cfg->prog_buffer) {
   182f6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   182f8:	6b53      	ldr	r3, [r2, #52]	; 0x34
   182fa:	2b00      	cmp	r3, #0
   182fc:	d044      	beq.n	18388 <lfs_init+0xa0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
   182fe:	61e3      	str	r3, [r4, #28]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   18300:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   18302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18304:	21ff      	movs	r1, #255	; 0xff
   18306:	68e0      	ldr	r0, [r4, #12]
   18308:	f7fe fe6e 	bl	16fe8 <memset>
    pcache->block = LFS_BLOCK_NULL;
   1830c:	f04f 35ff 	mov.w	r5, #4294967295
   18310:	6025      	str	r5, [r4, #0]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   18312:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   18314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18316:	21ff      	movs	r1, #255	; 0xff
   18318:	69e0      	ldr	r0, [r4, #28]
   1831a:	f7fe fe65 	bl	16fe8 <memset>
    pcache->block = LFS_BLOCK_NULL;
   1831e:	6125      	str	r5, [r4, #16]
    if (lfs->cfg->lookahead_buffer) {
   18320:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   18322:	6b93      	ldr	r3, [r2, #56]	; 0x38
   18324:	2b00      	cmp	r3, #0
   18326:	d036      	beq.n	18396 <lfs_init+0xae>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
   18328:	6663      	str	r3, [r4, #100]	; 0x64
    lfs->name_max = lfs->cfg->name_max;
   1832a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1832c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1832e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (!lfs->name_max) {
   18330:	b90a      	cbnz	r2, 18336 <lfs_init+0x4e>
        lfs->name_max = LFS_NAME_MAX;
   18332:	22ff      	movs	r2, #255	; 0xff
   18334:	66e2      	str	r2, [r4, #108]	; 0x6c
    lfs->file_max = lfs->cfg->file_max;
   18336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   18338:	6722      	str	r2, [r4, #112]	; 0x70
    if (!lfs->file_max) {
   1833a:	b912      	cbnz	r2, 18342 <lfs_init+0x5a>
        lfs->file_max = LFS_FILE_MAX;
   1833c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   18340:	6722      	str	r2, [r4, #112]	; 0x70
    lfs->attr_max = lfs->cfg->attr_max;
   18342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   18344:	6763      	str	r3, [r4, #116]	; 0x74
    if (!lfs->attr_max) {
   18346:	b913      	cbnz	r3, 1834e <lfs_init+0x66>
        lfs->attr_max = LFS_ATTR_MAX;
   18348:	f240 33fe 	movw	r3, #1022	; 0x3fe
   1834c:	6763      	str	r3, [r4, #116]	; 0x74
    lfs->root[0] = LFS_BLOCK_NULL;
   1834e:	f04f 33ff 	mov.w	r3, #4294967295
   18352:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
   18354:	6263      	str	r3, [r4, #36]	; 0x24
    lfs->mlist = NULL;
   18356:	2000      	movs	r0, #0
   18358:	62a0      	str	r0, [r4, #40]	; 0x28
    lfs->seed = 0;
   1835a:	62e0      	str	r0, [r4, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
   1835c:	63e0      	str	r0, [r4, #60]	; 0x3c
   1835e:	6420      	str	r0, [r4, #64]	; 0x40
   18360:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
   18362:	6320      	str	r0, [r4, #48]	; 0x30
   18364:	6360      	str	r0, [r4, #52]	; 0x34
   18366:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
   18368:	64a0      	str	r0, [r4, #72]	; 0x48
   1836a:	64e0      	str	r0, [r4, #76]	; 0x4c
   1836c:	6520      	str	r0, [r4, #80]	; 0x50
}
   1836e:	bd38      	pop	{r3, r4, r5, pc}
    return malloc(size);
   18370:	6a88      	ldr	r0, [r1, #40]	; 0x28
   18372:	f7f7 fb19 	bl	f9a8 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   18376:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
   18378:	2800      	cmp	r0, #0
   1837a:	d1bc      	bne.n	182f6 <lfs_init+0xe>
    lfs_deinit(lfs);
   1837c:	4620      	mov	r0, r4
   1837e:	f7ff ff9a 	bl	182b6 <lfs_deinit>
    return err;
   18382:	f06f 000b 	mvn.w	r0, #11
   18386:	e7f2      	b.n	1836e <lfs_init+0x86>
   18388:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1838a:	f7f7 fb0d 	bl	f9a8 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   1838e:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
   18390:	2800      	cmp	r0, #0
   18392:	d1b5      	bne.n	18300 <lfs_init+0x18>
   18394:	e7f2      	b.n	1837c <lfs_init+0x94>
   18396:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   18398:	f7f7 fb06 	bl	f9a8 <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
   1839c:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
   1839e:	2800      	cmp	r0, #0
   183a0:	d1c3      	bne.n	1832a <lfs_init+0x42>
   183a2:	e7eb      	b.n	1837c <lfs_init+0x94>

000183a4 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   183a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
   183a6:	680f      	ldr	r7, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   183a8:	6e83      	ldr	r3, [r0, #104]	; 0x68
   183aa:	69dc      	ldr	r4, [r3, #28]
   183ac:	3c08      	subs	r4, #8
    lfs_off_t i = size / b;
   183ae:	fbb7 f0f4 	udiv	r0, r7, r4
    if (i == 0) {
   183b2:	42a7      	cmp	r7, r4
   183b4:	d312      	bcc.n	183dc <lfs_ctz_index+0x38>
   183b6:	460e      	mov	r6, r1
    return __builtin_popcount(a);
   183b8:	3801      	subs	r0, #1
   183ba:	f7f3 ff57 	bl	c26c <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
   183be:	1c85      	adds	r5, r0, #2
   183c0:	eba7 0585 	sub.w	r5, r7, r5, lsl #2
   183c4:	fbb5 f5f4 	udiv	r5, r5, r4
    *off = size - b*i - 4*lfs_popc(i);
   183c8:	fb05 7414 	mls	r4, r5, r4, r7
   183cc:	4628      	mov	r0, r5
   183ce:	f7f3 ff4d 	bl	c26c <__popcountsi2>
   183d2:	eba4 0480 	sub.w	r4, r4, r0, lsl #2
   183d6:	6034      	str	r4, [r6, #0]
    return i;
   183d8:	4628      	mov	r0, r5
}
   183da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
   183dc:	2000      	movs	r0, #0
   183de:	e7fc      	b.n	183da <lfs_ctz_index+0x36>

000183e0 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
   183e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183e4:	b08b      	sub	sp, #44	; 0x2c
   183e6:	9105      	str	r1, [sp, #20]
   183e8:	461c      	mov	r4, r3
   183ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   183ec:	9e15      	ldr	r6, [sp, #84]	; 0x54
   183ee:	9f16      	ldr	r7, [sp, #88]	; 0x58
    if (size == 0) {
   183f0:	b923      	cbnz	r3, 183fc <lfs_ctz_traverse+0x1c>
        return 0;
   183f2:	2300      	movs	r3, #0
}
   183f4:	4618      	mov	r0, r3
   183f6:	b00b      	add	sp, #44	; 0x2c
   183f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183fc:	4680      	mov	r8, r0
   183fe:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   18400:	3b01      	subs	r3, #1
   18402:	9309      	str	r3, [sp, #36]	; 0x24
   18404:	a909      	add	r1, sp, #36	; 0x24
   18406:	f7ff ffcd 	bl	183a4 <lfs_ctz_index>
   1840a:	4681      	mov	r9, r0
        int err = cb(data, head);
   1840c:	4621      	mov	r1, r4
   1840e:	4638      	mov	r0, r7
   18410:	47b0      	blx	r6
        if (err) {
   18412:	4603      	mov	r3, r0
   18414:	2800      	cmp	r0, #0
   18416:	d1ed      	bne.n	183f4 <lfs_ctz_traverse+0x14>
        if (index == 0) {
   18418:	f1b9 0f00 	cmp.w	r9, #0
   1841c:	d0ea      	beq.n	183f4 <lfs_ctz_traverse+0x14>
        int count = 2 - (index & 1);
   1841e:	f009 0b01 	and.w	fp, r9, #1
   18422:	f1cb 0502 	rsb	r5, fp, #2
        err = lfs_bd_read(lfs,
   18426:	00ab      	lsls	r3, r5, #2
   18428:	9303      	str	r3, [sp, #12]
   1842a:	aa07      	add	r2, sp, #28
   1842c:	9202      	str	r2, [sp, #8]
   1842e:	2200      	movs	r2, #0
   18430:	9201      	str	r2, [sp, #4]
   18432:	9400      	str	r4, [sp, #0]
   18434:	4652      	mov	r2, sl
   18436:	9905      	ldr	r1, [sp, #20]
   18438:	4640      	mov	r0, r8
   1843a:	f7ff fb0a 	bl	17a52 <lfs_bd_read>
        if (err) {
   1843e:	4604      	mov	r4, r0
   18440:	b110      	cbz	r0, 18448 <lfs_ctz_traverse+0x68>
            return err;
   18442:	4603      	mov	r3, r0
   18444:	e7d6      	b.n	183f4 <lfs_ctz_traverse+0x14>
        for (int i = 0; i < count-1; i++) {
   18446:	3401      	adds	r4, #1
   18448:	1e6b      	subs	r3, r5, #1
   1844a:	42a3      	cmp	r3, r4
   1844c:	dd0a      	ble.n	18464 <lfs_ctz_traverse+0x84>
            err = cb(data, heads[i]);
   1844e:	ab0a      	add	r3, sp, #40	; 0x28
   18450:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   18454:	f853 1c0c 	ldr.w	r1, [r3, #-12]
   18458:	4638      	mov	r0, r7
   1845a:	47b0      	blx	r6
            if (err) {
   1845c:	4603      	mov	r3, r0
   1845e:	2800      	cmp	r0, #0
   18460:	d0f1      	beq.n	18446 <lfs_ctz_traverse+0x66>
   18462:	e7c7      	b.n	183f4 <lfs_ctz_traverse+0x14>
        head = heads[count-1];
   18464:	aa0a      	add	r2, sp, #40	; 0x28
   18466:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1846a:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
   1846e:	f1ab 0b02 	sub.w	fp, fp, #2
   18472:	44d9      	add	r9, fp
    while (true) {
   18474:	e7ca      	b.n	1840c <lfs_ctz_traverse+0x2c>

00018476 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
   18476:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1847a:	b089      	sub	sp, #36	; 0x24
   1847c:	9305      	str	r3, [sp, #20]
   1847e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (size == 0) {
   18480:	b953      	cbnz	r3, 18498 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
   18482:	f04f 33ff 	mov.w	r3, #4294967295
   18486:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18488:	6013      	str	r3, [r2, #0]
        *off = 0;
   1848a:	2300      	movs	r3, #0
   1848c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1848e:	6013      	str	r3, [r2, #0]
}
   18490:	4618      	mov	r0, r3
   18492:	b009      	add	sp, #36	; 0x24
   18494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18498:	4607      	mov	r7, r0
   1849a:	4688      	mov	r8, r1
   1849c:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   1849e:	3b01      	subs	r3, #1
   184a0:	9307      	str	r3, [sp, #28]
   184a2:	a907      	add	r1, sp, #28
   184a4:	f7ff ff7e 	bl	183a4 <lfs_ctz_index>
   184a8:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   184aa:	a911      	add	r1, sp, #68	; 0x44
   184ac:	4638      	mov	r0, r7
   184ae:	f7ff ff79 	bl	183a4 <lfs_ctz_index>
   184b2:	4606      	mov	r6, r0
    while (current > target) {
   184b4:	e003      	b.n	184be <lfs_ctz_find+0x48>
        current -= 1 << skip;
   184b6:	2301      	movs	r3, #1
   184b8:	fa03 f404 	lsl.w	r4, r3, r4
   184bc:	1b2d      	subs	r5, r5, r4
    while (current > target) {
   184be:	42b5      	cmp	r5, r6
   184c0:	d91c      	bls.n	184fc <lfs_ctz_find+0x86>
                lfs_npw2(current-target+1) - 1,
   184c2:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
   184c4:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
   184c8:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
   184cc:	fa95 f3a5 	rbit	r3, r5
   184d0:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
   184d4:	429c      	cmp	r4, r3
   184d6:	bf28      	it	cs
   184d8:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
   184da:	2304      	movs	r3, #4
   184dc:	9303      	str	r3, [sp, #12]
   184de:	aa05      	add	r2, sp, #20
   184e0:	9202      	str	r2, [sp, #8]
   184e2:	00a2      	lsls	r2, r4, #2
   184e4:	9201      	str	r2, [sp, #4]
   184e6:	9a05      	ldr	r2, [sp, #20]
   184e8:	9200      	str	r2, [sp, #0]
   184ea:	464a      	mov	r2, r9
   184ec:	4641      	mov	r1, r8
   184ee:	4638      	mov	r0, r7
   184f0:	f7ff faaf 	bl	17a52 <lfs_bd_read>
        if (err) {
   184f4:	4603      	mov	r3, r0
   184f6:	2800      	cmp	r0, #0
   184f8:	d0dd      	beq.n	184b6 <lfs_ctz_find+0x40>
   184fa:	e7c9      	b.n	18490 <lfs_ctz_find+0x1a>
    *block = head;
   184fc:	9b05      	ldr	r3, [sp, #20]
   184fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18500:	6013      	str	r3, [r2, #0]
    *off = pos;
   18502:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18504:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18506:	6013      	str	r3, [r2, #0]
    return 0;
   18508:	2300      	movs	r3, #0
   1850a:	e7c1      	b.n	18490 <lfs_ctz_find+0x1a>

0001850c <lfs_dir_close>:
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   1850c:	3028      	adds	r0, #40	; 0x28
   1850e:	6803      	ldr	r3, [r0, #0]
   18510:	b12b      	cbz	r3, 1851e <lfs_dir_close+0x12>
        if (*p == (struct lfs_mlist*)dir) {
   18512:	428b      	cmp	r3, r1
   18514:	d001      	beq.n	1851a <lfs_dir_close+0xe>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   18516:	4618      	mov	r0, r3
   18518:	e7f9      	b.n	1850e <lfs_dir_close+0x2>
            *p = (*p)->next;
   1851a:	681b      	ldr	r3, [r3, #0]
   1851c:	6003      	str	r3, [r0, #0]
}
   1851e:	2000      	movs	r0, #0
   18520:	4770      	bx	lr

00018522 <lfs_file_tell>:
}
   18522:	6b48      	ldr	r0, [r1, #52]	; 0x34
   18524:	4770      	bx	lr

00018526 <lfs_file_size>:
    if (file->flags & LFS_F_WRITING) {
   18526:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   18528:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1852c:	d005      	beq.n	1853a <lfs_file_size+0x14>
        return lfs_max(file->pos, file->ctz.size);
   1852e:	6b48      	ldr	r0, [r1, #52]	; 0x34
   18530:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   18532:	4298      	cmp	r0, r3
   18534:	bf38      	it	cc
   18536:	4618      	movcc	r0, r3
   18538:	4770      	bx	lr
        return file->ctz.size;
   1853a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
}
   1853c:	4770      	bx	lr

0001853e <lfs_stat>:
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   1853e:	b530      	push	{r4, r5, lr}
   18540:	b08b      	sub	sp, #44	; 0x2c
   18542:	4604      	mov	r4, r0
   18544:	9101      	str	r1, [sp, #4]
   18546:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   18548:	2300      	movs	r3, #0
   1854a:	aa01      	add	r2, sp, #4
   1854c:	a902      	add	r1, sp, #8
   1854e:	f7f9 fd35 	bl	11fbc <lfs_dir_find>
    if (tag < 0) {
   18552:	2800      	cmp	r0, #0
   18554:	db06      	blt.n	18564 <lfs_stat+0x26>
    int err = lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
   18556:	462b      	mov	r3, r5
   18558:	f3c0 2289 	ubfx	r2, r0, #10, #10
   1855c:	a902      	add	r1, sp, #8
   1855e:	4620      	mov	r0, r4
   18560:	f7f9 fdf0 	bl	12144 <lfs_dir_getinfo>
}
   18564:	b00b      	add	sp, #44	; 0x2c
   18566:	bd30      	pop	{r4, r5, pc}

00018568 <lfs_unmount>:
int lfs_unmount(lfs_t *lfs) {
   18568:	b508      	push	{r3, lr}
    int err = lfs_deinit(lfs);
   1856a:	f7ff fea4 	bl	182b6 <lfs_deinit>
}
   1856e:	bd08      	pop	{r3, pc}

00018570 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   18570:	b570      	push	{r4, r5, r6, lr}
   18572:	b084      	sub	sp, #16
   18574:	4606      	mov	r6, r0
   18576:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
   18578:	2500      	movs	r5, #0
   1857a:	2d01      	cmp	r5, #1
   1857c:	dc0d      	bgt.n	1859a <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   1857e:	3501      	adds	r5, #1
   18580:	f005 0101 	and.w	r1, r5, #1
   18584:	bf48      	it	mi
   18586:	4249      	negmi	r1, r1
   18588:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1858c:	4630      	mov	r0, r6
   1858e:	f7fa f8c7 	bl	12720 <lfs_alloc>
        if (err) {
   18592:	4603      	mov	r3, r0
   18594:	2800      	cmp	r0, #0
   18596:	d0f0      	beq.n	1857a <lfs_dir_alloc+0xa>
   18598:	e022      	b.n	185e0 <lfs_dir_alloc+0x70>
    dir->rev = 0;
   1859a:	2100      	movs	r1, #0
   1859c:	4622      	mov	r2, r4
   1859e:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
   185a2:	2304      	movs	r3, #4
   185a4:	9303      	str	r3, [sp, #12]
   185a6:	9202      	str	r2, [sp, #8]
   185a8:	9101      	str	r1, [sp, #4]
   185aa:	6822      	ldr	r2, [r4, #0]
   185ac:	9200      	str	r2, [sp, #0]
   185ae:	4632      	mov	r2, r6
   185b0:	4630      	mov	r0, r6
   185b2:	f7ff fa4e 	bl	17a52 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
   185b6:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
   185b8:	4603      	mov	r3, r0
   185ba:	b110      	cbz	r0, 185c2 <lfs_dir_alloc+0x52>
   185bc:	f110 0f54 	cmn.w	r0, #84	; 0x54
   185c0:	d10e      	bne.n	185e0 <lfs_dir_alloc+0x70>
    dir->rev += dir->rev & 1;
   185c2:	3201      	adds	r2, #1
   185c4:	f022 0201 	bic.w	r2, r2, #1
   185c8:	60a2      	str	r2, [r4, #8]
    dir->off = sizeof(dir->rev);
   185ca:	2304      	movs	r3, #4
   185cc:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
   185ce:	f04f 32ff 	mov.w	r2, #4294967295
   185d2:	6122      	str	r2, [r4, #16]
    dir->count = 0;
   185d4:	2300      	movs	r3, #0
   185d6:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
   185d8:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
   185da:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
   185dc:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
   185de:	75e3      	strb	r3, [r4, #23]
}
   185e0:	4618      	mov	r0, r3
   185e2:	b004      	add	sp, #16
   185e4:	bd70      	pop	{r4, r5, r6, pc}

000185e6 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
   185e6:	b538      	push	{r3, r4, r5, lr}
   185e8:	4605      	mov	r5, r0
   185ea:	460c      	mov	r4, r1
    file->off = file->pos;
   185ec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   185ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    lfs_alloc_ack(lfs);
   185f0:	f7ff f9fc 	bl	179ec <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
   185f4:	4621      	mov	r1, r4
   185f6:	4628      	mov	r0, r5
   185f8:	f7fa f914 	bl	12824 <lfs_file_relocate>
    if (err) {
   185fc:	b918      	cbnz	r0, 18606 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
   185fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18600:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   18604:	6323      	str	r3, [r4, #48]	; 0x30
}
   18606:	bd38      	pop	{r3, r4, r5, pc}

00018608 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
   18608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1860c:	b08b      	sub	sp, #44	; 0x2c
   1860e:	4604      	mov	r4, r0
   18610:	460f      	mov	r7, r1
   18612:	4615      	mov	r5, r2
   18614:	4699      	mov	r9, r3
   18616:	e043      	b.n	186a0 <lfs_ctz_extend+0x98>
            if (size == 0) {
   18618:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1861a:	b18b      	cbz	r3, 18640 <lfs_ctz_extend+0x38>
            lfs_size_t noff = size - 1;
   1861c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1861e:	3b01      	subs	r3, #1
   18620:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   18622:	a908      	add	r1, sp, #32
   18624:	4620      	mov	r0, r4
   18626:	f7ff febd 	bl	183a4 <lfs_ctz_index>
            noff = noff + 1;
   1862a:	9b08      	ldr	r3, [sp, #32]
   1862c:	3301      	adds	r3, #1
   1862e:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
   18630:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   18632:	69d2      	ldr	r2, [r2, #28]
   18634:	4293      	cmp	r3, r2
   18636:	d050      	beq.n	186da <lfs_ctz_extend+0xd2>
                for (lfs_off_t i = 0; i < noff; i++) {
   18638:	2600      	movs	r6, #0
   1863a:	46b8      	mov	r8, r7
   1863c:	464f      	mov	r7, r9
   1863e:	e007      	b.n	18650 <lfs_ctz_extend+0x48>
                *block = nblock;
   18640:	9b07      	ldr	r3, [sp, #28]
   18642:	9a15      	ldr	r2, [sp, #84]	; 0x54
   18644:	6013      	str	r3, [r2, #0]
                *off = 0;
   18646:	2300      	movs	r3, #0
   18648:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1864a:	6013      	str	r3, [r2, #0]
                return 0;
   1864c:	e041      	b.n	186d2 <lfs_ctz_extend+0xca>
                for (lfs_off_t i = 0; i < noff; i++) {
   1864e:	3601      	adds	r6, #1
   18650:	9b08      	ldr	r3, [sp, #32]
   18652:	42b3      	cmp	r3, r6
   18654:	d937      	bls.n	186c6 <lfs_ctz_extend+0xbe>
                    err = lfs_bd_read(lfs,
   18656:	2201      	movs	r2, #1
   18658:	9203      	str	r2, [sp, #12]
   1865a:	aa09      	add	r2, sp, #36	; 0x24
   1865c:	9202      	str	r2, [sp, #8]
   1865e:	9601      	str	r6, [sp, #4]
   18660:	9700      	str	r7, [sp, #0]
   18662:	1b9b      	subs	r3, r3, r6
   18664:	462a      	mov	r2, r5
   18666:	2100      	movs	r1, #0
   18668:	4620      	mov	r0, r4
   1866a:	f7ff f9f2 	bl	17a52 <lfs_bd_read>
                    if (err) {
   1866e:	4603      	mov	r3, r0
   18670:	bb38      	cbnz	r0, 186c2 <lfs_ctz_extend+0xba>
                    err = lfs_bd_prog(lfs,
   18672:	2301      	movs	r3, #1
   18674:	9303      	str	r3, [sp, #12]
   18676:	aa09      	add	r2, sp, #36	; 0x24
   18678:	9202      	str	r2, [sp, #8]
   1867a:	9601      	str	r6, [sp, #4]
   1867c:	9a07      	ldr	r2, [sp, #28]
   1867e:	9200      	str	r2, [sp, #0]
   18680:	462a      	mov	r2, r5
   18682:	4641      	mov	r1, r8
   18684:	4620      	mov	r0, r4
   18686:	f7ff fc5b 	bl	17f40 <lfs_bd_prog>
                    if (err) {
   1868a:	4603      	mov	r3, r0
   1868c:	2800      	cmp	r0, #0
   1868e:	d0de      	beq.n	1864e <lfs_ctz_extend+0x46>
   18690:	46b9      	mov	r9, r7
   18692:	4647      	mov	r7, r8
                        if (err == LFS_ERR_CORRUPT) {
   18694:	f110 0f54 	cmn.w	r0, #84	; 0x54
   18698:	d113      	bne.n	186c2 <lfs_ctz_extend+0xba>
    rcache->block = LFS_BLOCK_NULL;
   1869a:	f04f 33ff 	mov.w	r3, #4294967295
   1869e:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
   186a0:	a907      	add	r1, sp, #28
   186a2:	4620      	mov	r0, r4
   186a4:	f7fa f83c 	bl	12720 <lfs_alloc>
        if (err) {
   186a8:	9005      	str	r0, [sp, #20]
   186aa:	b990      	cbnz	r0, 186d2 <lfs_ctz_extend+0xca>
            err = lfs_bd_erase(lfs, nblock);
   186ac:	9907      	ldr	r1, [sp, #28]
   186ae:	4620      	mov	r0, r4
   186b0:	f7ff f97d 	bl	179ae <lfs_bd_erase>
            if (err) {
   186b4:	9005      	str	r0, [sp, #20]
   186b6:	2800      	cmp	r0, #0
   186b8:	d0ae      	beq.n	18618 <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
   186ba:	f110 0f54 	cmn.w	r0, #84	; 0x54
   186be:	d0ec      	beq.n	1869a <lfs_ctz_extend+0x92>
   186c0:	e007      	b.n	186d2 <lfs_ctz_extend+0xca>
                        return err;
   186c2:	9305      	str	r3, [sp, #20]
   186c4:	e005      	b.n	186d2 <lfs_ctz_extend+0xca>
                *block = nblock;
   186c6:	9b07      	ldr	r3, [sp, #28]
   186c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   186ca:	6013      	str	r3, [r2, #0]
                *off = noff;
   186cc:	9b08      	ldr	r3, [sp, #32]
   186ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
   186d0:	6013      	str	r3, [r2, #0]
}
   186d2:	9805      	ldr	r0, [sp, #20]
   186d4:	b00b      	add	sp, #44	; 0x2c
   186d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
   186da:	3001      	adds	r0, #1
    return __builtin_ctz(a);
   186dc:	fa90 faa0 	rbit	sl, r0
   186e0:	faba fa8a 	clz	sl, sl
            lfs_size_t skips = lfs_ctz(index) + 1;
   186e4:	f10a 0b01 	add.w	fp, sl, #1
            lfs_block_t nhead = head;
   186e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
   186ec:	2600      	movs	r6, #0
   186ee:	46a0      	mov	r8, r4
   186f0:	e006      	b.n	18700 <lfs_ctz_extend+0xf8>
   186f2:	4644      	mov	r4, r8
                    if (err == LFS_ERR_CORRUPT) {
   186f4:	f110 0f54 	cmn.w	r0, #84	; 0x54
   186f8:	d0cf      	beq.n	1869a <lfs_ctz_extend+0x92>
                    return err;
   186fa:	9005      	str	r0, [sp, #20]
   186fc:	e7e9      	b.n	186d2 <lfs_ctz_extend+0xca>
            for (lfs_off_t i = 0; i < skips; i++) {
   186fe:	3601      	adds	r6, #1
   18700:	455e      	cmp	r6, fp
   18702:	d221      	bcs.n	18748 <lfs_ctz_extend+0x140>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
   18704:	00b4      	lsls	r4, r6, #2
   18706:	2304      	movs	r3, #4
   18708:	9303      	str	r3, [sp, #12]
   1870a:	ab09      	add	r3, sp, #36	; 0x24
   1870c:	9302      	str	r3, [sp, #8]
   1870e:	9401      	str	r4, [sp, #4]
   18710:	9b07      	ldr	r3, [sp, #28]
   18712:	9300      	str	r3, [sp, #0]
   18714:	2301      	movs	r3, #1
   18716:	462a      	mov	r2, r5
   18718:	4639      	mov	r1, r7
   1871a:	4640      	mov	r0, r8
   1871c:	f7ff fc10 	bl	17f40 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
   18720:	9a09      	ldr	r2, [sp, #36]	; 0x24
                if (err) {
   18722:	2800      	cmp	r0, #0
   18724:	d1e5      	bne.n	186f2 <lfs_ctz_extend+0xea>
                if (i != skips-1) {
   18726:	4556      	cmp	r6, sl
   18728:	d0e9      	beq.n	186fe <lfs_ctz_extend+0xf6>
                    err = lfs_bd_read(lfs,
   1872a:	2304      	movs	r3, #4
   1872c:	9303      	str	r3, [sp, #12]
   1872e:	a909      	add	r1, sp, #36	; 0x24
   18730:	9102      	str	r1, [sp, #8]
   18732:	9401      	str	r4, [sp, #4]
   18734:	9200      	str	r2, [sp, #0]
   18736:	462a      	mov	r2, r5
   18738:	2100      	movs	r1, #0
   1873a:	4640      	mov	r0, r8
   1873c:	f7ff f989 	bl	17a52 <lfs_bd_read>
                    if (err) {
   18740:	2800      	cmp	r0, #0
   18742:	d0dc      	beq.n	186fe <lfs_ctz_extend+0xf6>
                        return err;
   18744:	9005      	str	r0, [sp, #20]
   18746:	e7c4      	b.n	186d2 <lfs_ctz_extend+0xca>
            *block = nblock;
   18748:	9b07      	ldr	r3, [sp, #28]
   1874a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1874c:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
   1874e:	ea4f 038b 	mov.w	r3, fp, lsl #2
   18752:	9a16      	ldr	r2, [sp, #88]	; 0x58
   18754:	6013      	str	r3, [r2, #0]
            return 0;
   18756:	e7bc      	b.n	186d2 <lfs_ctz_extend+0xca>

00018758 <lfs_file_write>:
        const void *buffer, lfs_size_t size) {
   18758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1875c:	b087      	sub	sp, #28
   1875e:	4605      	mov	r5, r0
   18760:	460c      	mov	r4, r1
   18762:	4617      	mov	r7, r2
   18764:	4698      	mov	r8, r3
    if (file->flags & LFS_F_READING) {
   18766:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   18768:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1876c:	d126      	bne.n	187bc <lfs_file_write+0x64>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   1876e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18770:	f413 6f00 	tst.w	r3, #2048	; 0x800
   18774:	d004      	beq.n	18780 <lfs_file_write+0x28>
   18776:	6b61      	ldr	r1, [r4, #52]	; 0x34
   18778:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1877a:	4291      	cmp	r1, r2
   1877c:	d200      	bcs.n	18780 <lfs_file_write+0x28>
        file->pos = file->ctz.size;
   1877e:	6362      	str	r2, [r4, #52]	; 0x34
    if (file->pos + size > lfs->file_max) {
   18780:	6b66      	ldr	r6, [r4, #52]	; 0x34
   18782:	eb06 0108 	add.w	r1, r6, r8
   18786:	6f2a      	ldr	r2, [r5, #112]	; 0x70
   18788:	4291      	cmp	r1, r2
   1878a:	f200 80db 	bhi.w	18944 <lfs_file_write+0x1ec>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   1878e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   18792:	d119      	bne.n	187c8 <lfs_file_write+0x70>
   18794:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18796:	429e      	cmp	r6, r3
   18798:	d916      	bls.n	187c8 <lfs_file_write+0x70>
        file->pos = file->ctz.size;
   1879a:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
   1879c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1879e:	429e      	cmp	r6, r3
   187a0:	d912      	bls.n	187c8 <lfs_file_write+0x70>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   187a2:	2300      	movs	r3, #0
   187a4:	f88d 3017 	strb.w	r3, [sp, #23]
   187a8:	2301      	movs	r3, #1
   187aa:	f10d 0217 	add.w	r2, sp, #23
   187ae:	4621      	mov	r1, r4
   187b0:	4628      	mov	r0, r5
   187b2:	f7ff ffd1 	bl	18758 <lfs_file_write>
            if (res < 0) {
   187b6:	1e01      	subs	r1, r0, #0
   187b8:	daf0      	bge.n	1879c <lfs_file_write+0x44>
   187ba:	e0ac      	b.n	18916 <lfs_file_write+0x1be>
        int err = lfs_file_flush(lfs, file);
   187bc:	f7fa f8b8 	bl	12930 <lfs_file_flush>
        if (err) {
   187c0:	4601      	mov	r1, r0
   187c2:	2800      	cmp	r0, #0
   187c4:	d0d3      	beq.n	1876e <lfs_file_write+0x16>
   187c6:	e0a6      	b.n	18916 <lfs_file_write+0x1be>
    if ((file->flags & LFS_F_INLINE) &&
   187c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   187ca:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   187ce:	d014      	beq.n	187fa <lfs_file_write+0xa2>
            lfs_max(file->pos+nsize, file->ctz.size) >
   187d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   187d2:	eb03 0208 	add.w	r2, r3, r8
   187d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
   187d8:	429a      	cmp	r2, r3
   187da:	bf38      	it	cc
   187dc:	461a      	movcc	r2, r3
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
   187de:	6ea9      	ldr	r1, [r5, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
   187e0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
   187e2:	69c9      	ldr	r1, [r1, #28]
            lfs_min(0x3fe, lfs_min(
   187e4:	08c9      	lsrs	r1, r1, #3
    return (a < b) ? a : b;
   187e6:	428b      	cmp	r3, r1
   187e8:	bf28      	it	cs
   187ea:	460b      	movcs	r3, r1
   187ec:	f240 31fe 	movw	r1, #1022	; 0x3fe
   187f0:	428b      	cmp	r3, r1
   187f2:	bf28      	it	cs
   187f4:	460b      	movcs	r3, r1
    if ((file->flags & LFS_F_INLINE) &&
   187f6:	429a      	cmp	r2, r3
   187f8:	d82d      	bhi.n	18856 <lfs_file_write+0xfe>
        const void *buffer, lfs_size_t size) {
   187fa:	46c1      	mov	r9, r8
    while (nsize > 0) {
   187fc:	f1b9 0f00 	cmp.w	r9, #0
   18800:	f000 809a 	beq.w	18938 <lfs_file_write+0x1e0>
        if (!(file->flags & LFS_F_WRITING) ||
   18804:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18806:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
   1880a:	d004      	beq.n	18816 <lfs_file_write+0xbe>
                file->off == lfs->cfg->block_size) {
   1880c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1880e:	6ea9      	ldr	r1, [r5, #104]	; 0x68
   18810:	69c9      	ldr	r1, [r1, #28]
        if (!(file->flags & LFS_F_WRITING) ||
   18812:	4288      	cmp	r0, r1
   18814:	d156      	bne.n	188c4 <lfs_file_write+0x16c>
            if (!(file->flags & LFS_F_INLINE)) {
   18816:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1881a:	d14a      	bne.n	188b2 <lfs_file_write+0x15a>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
   1881c:	b90a      	cbnz	r2, 18822 <lfs_file_write+0xca>
   1881e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18820:	bb2b      	cbnz	r3, 1886e <lfs_file_write+0x116>
                lfs_alloc_ack(lfs);
   18822:	4628      	mov	r0, r5
   18824:	f7ff f8e2 	bl	179ec <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
   18828:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   1882c:	9302      	str	r3, [sp, #8]
   1882e:	f104 0338 	add.w	r3, r4, #56	; 0x38
   18832:	9301      	str	r3, [sp, #4]
   18834:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18836:	9300      	str	r3, [sp, #0]
   18838:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1883a:	462a      	mov	r2, r5
   1883c:	f104 0140 	add.w	r1, r4, #64	; 0x40
   18840:	4628      	mov	r0, r5
   18842:	f7ff fee1 	bl	18608 <lfs_ctz_extend>
                if (err) {
   18846:	4601      	mov	r1, r0
   18848:	2800      	cmp	r0, #0
   1884a:	d037      	beq.n	188bc <lfs_file_write+0x164>
                    file->flags |= LFS_F_ERRED;
   1884c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1884e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   18852:	6323      	str	r3, [r4, #48]	; 0x30
                    return err;
   18854:	e05f      	b.n	18916 <lfs_file_write+0x1be>
        int err = lfs_file_outline(lfs, file);
   18856:	4621      	mov	r1, r4
   18858:	4628      	mov	r0, r5
   1885a:	f7ff fec4 	bl	185e6 <lfs_file_outline>
        if (err) {
   1885e:	4601      	mov	r1, r0
   18860:	2800      	cmp	r0, #0
   18862:	d0ca      	beq.n	187fa <lfs_file_write+0xa2>
            file->flags |= LFS_F_ERRED;
   18864:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1886a:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   1886c:	e053      	b.n	18916 <lfs_file_write+0x1be>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   1886e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   18872:	9203      	str	r2, [sp, #12]
   18874:	f104 0238 	add.w	r2, r4, #56	; 0x38
   18878:	9202      	str	r2, [sp, #8]
   1887a:	3b01      	subs	r3, #1
   1887c:	9301      	str	r3, [sp, #4]
   1887e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18880:	9300      	str	r3, [sp, #0]
   18882:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   18884:	f104 0240 	add.w	r2, r4, #64	; 0x40
   18888:	2100      	movs	r1, #0
   1888a:	4628      	mov	r0, r5
   1888c:	f7ff fdf3 	bl	18476 <lfs_ctz_find>
                    if (err) {
   18890:	4601      	mov	r1, r0
   18892:	b948      	cbnz	r0, 188a8 <lfs_file_write+0x150>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   18894:	6eab      	ldr	r3, [r5, #104]	; 0x68
   18896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18898:	21ff      	movs	r1, #255	; 0xff
   1889a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1889c:	f7fe fba4 	bl	16fe8 <memset>
    pcache->block = LFS_BLOCK_NULL;
   188a0:	f04f 33ff 	mov.w	r3, #4294967295
   188a4:	6423      	str	r3, [r4, #64]	; 0x40
}
   188a6:	e7bc      	b.n	18822 <lfs_file_write+0xca>
                        file->flags |= LFS_F_ERRED;
   188a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   188aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   188ae:	6323      	str	r3, [r4, #48]	; 0x30
                        return err;
   188b0:	e031      	b.n	18916 <lfs_file_write+0x1be>
                file->block = LFS_BLOCK_INLINE;
   188b2:	f06f 0301 	mvn.w	r3, #1
   188b6:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
   188b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   188ba:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_WRITING;
   188bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   188be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   188c2:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   188c4:	6eab      	ldr	r3, [r5, #104]	; 0x68
   188c6:	69de      	ldr	r6, [r3, #28]
   188c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   188ca:	1af6      	subs	r6, r6, r3
   188cc:	454e      	cmp	r6, r9
   188ce:	bf28      	it	cs
   188d0:	464e      	movcs	r6, r9
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
   188d2:	9603      	str	r6, [sp, #12]
   188d4:	9702      	str	r7, [sp, #8]
   188d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   188d8:	9301      	str	r3, [sp, #4]
   188da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   188dc:	9300      	str	r3, [sp, #0]
   188de:	2301      	movs	r3, #1
   188e0:	462a      	mov	r2, r5
   188e2:	f104 0140 	add.w	r1, r4, #64	; 0x40
   188e6:	4628      	mov	r0, r5
   188e8:	f7ff fb2a 	bl	17f40 <lfs_bd_prog>
            if (err) {
   188ec:	4601      	mov	r1, r0
   188ee:	b1b0      	cbz	r0, 1891e <lfs_file_write+0x1c6>
                if (err == LFS_ERR_CORRUPT) {
   188f0:	f110 0f54 	cmn.w	r0, #84	; 0x54
   188f4:	d10b      	bne.n	1890e <lfs_file_write+0x1b6>
            err = lfs_file_relocate(lfs, file);
   188f6:	4621      	mov	r1, r4
   188f8:	4628      	mov	r0, r5
   188fa:	f7f9 ff93 	bl	12824 <lfs_file_relocate>
            if (err) {
   188fe:	4601      	mov	r1, r0
   18900:	2800      	cmp	r0, #0
   18902:	d0e6      	beq.n	188d2 <lfs_file_write+0x17a>
                file->flags |= LFS_F_ERRED;
   18904:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1890a:	6323      	str	r3, [r4, #48]	; 0x30
                return err;
   1890c:	e003      	b.n	18916 <lfs_file_write+0x1be>
                file->flags |= LFS_F_ERRED;
   1890e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   18914:	6323      	str	r3, [r4, #48]	; 0x30
}
   18916:	4608      	mov	r0, r1
   18918:	b007      	add	sp, #28
   1891a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
   1891e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18920:	4433      	add	r3, r6
   18922:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
   18924:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   18926:	4433      	add	r3, r6
   18928:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
   1892a:	4437      	add	r7, r6
        nsize -= diff;
   1892c:	eba9 0906 	sub.w	r9, r9, r6
        lfs_alloc_ack(lfs);
   18930:	4628      	mov	r0, r5
   18932:	f7ff f85b 	bl	179ec <lfs_alloc_ack>
   18936:	e761      	b.n	187fc <lfs_file_write+0xa4>
    file->flags &= ~LFS_F_ERRED;
   18938:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1893a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
   1893e:	6323      	str	r3, [r4, #48]	; 0x30
    return size;
   18940:	4641      	mov	r1, r8
   18942:	e7e8      	b.n	18916 <lfs_file_write+0x1be>
        return LFS_ERR_FBIG;
   18944:	f06f 011a 	mvn.w	r1, #26
   18948:	e7e5      	b.n	18916 <lfs_file_write+0x1be>

0001894a <lfs_file_seek>:
        lfs_soff_t off, int whence) {
   1894a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1894c:	4606      	mov	r6, r0
   1894e:	460c      	mov	r4, r1
   18950:	4617      	mov	r7, r2
   18952:	461d      	mov	r5, r3
    int err = lfs_file_flush(lfs, file);
   18954:	f7f9 ffec 	bl	12930 <lfs_file_flush>
    if (err) {
   18958:	b930      	cbnz	r0, 18968 <lfs_file_seek+0x1e>
    lfs_off_t npos = file->pos;
   1895a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
   1895c:	b92d      	cbnz	r5, 1896a <lfs_file_seek+0x20>
        npos = off;
   1895e:	4638      	mov	r0, r7
    if (npos > lfs->file_max) {
   18960:	6f33      	ldr	r3, [r6, #112]	; 0x70
   18962:	4283      	cmp	r3, r0
   18964:	d30a      	bcc.n	1897c <lfs_file_seek+0x32>
    file->pos = npos;
   18966:	6360      	str	r0, [r4, #52]	; 0x34
}
   18968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (whence == LFS_SEEK_CUR) {
   1896a:	2d01      	cmp	r5, #1
   1896c:	d004      	beq.n	18978 <lfs_file_seek+0x2e>
    } else if (whence == LFS_SEEK_END) {
   1896e:	2d02      	cmp	r5, #2
   18970:	d1f6      	bne.n	18960 <lfs_file_seek+0x16>
        npos = file->ctz.size + off;
   18972:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18974:	19d8      	adds	r0, r3, r7
   18976:	e7f3      	b.n	18960 <lfs_file_seek+0x16>
        npos = file->pos + off;
   18978:	4438      	add	r0, r7
   1897a:	e7f1      	b.n	18960 <lfs_file_seek+0x16>
        return LFS_ERR_INVAL;
   1897c:	f06f 0015 	mvn.w	r0, #21
   18980:	e7f2      	b.n	18968 <lfs_file_seek+0x1e>

00018982 <lfs_file_truncate>:
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   18982:	b5f0      	push	{r4, r5, r6, r7, lr}
   18984:	b087      	sub	sp, #28
    if (size > LFS_FILE_MAX) {
   18986:	1e15      	subs	r5, r2, #0
   18988:	db4b      	blt.n	18a22 <lfs_file_truncate+0xa0>
   1898a:	4606      	mov	r6, r0
   1898c:	460c      	mov	r4, r1
    lfs_off_t pos = file->pos;
   1898e:	6b4f      	ldr	r7, [r1, #52]	; 0x34
    lfs_off_t oldsize = lfs_file_size(lfs, file);
   18990:	f7ff fdc9 	bl	18526 <lfs_file_size>
    if (size < oldsize) {
   18994:	4285      	cmp	r5, r0
   18996:	d313      	bcc.n	189c0 <lfs_file_truncate+0x3e>
    } else if (size > oldsize) {
   18998:	4285      	cmp	r5, r0
   1899a:	d92e      	bls.n	189fa <lfs_file_truncate+0x78>
        if (file->pos != oldsize) {
   1899c:	4287      	cmp	r7, r0
   1899e:	d137      	bne.n	18a10 <lfs_file_truncate+0x8e>
        while (file->pos < size) {
   189a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   189a2:	42ab      	cmp	r3, r5
   189a4:	d229      	bcs.n	189fa <lfs_file_truncate+0x78>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   189a6:	2300      	movs	r3, #0
   189a8:	f88d 3017 	strb.w	r3, [sp, #23]
   189ac:	2301      	movs	r3, #1
   189ae:	f10d 0217 	add.w	r2, sp, #23
   189b2:	4621      	mov	r1, r4
   189b4:	4630      	mov	r0, r6
   189b6:	f7ff fecf 	bl	18758 <lfs_file_write>
            if (res < 0) {
   189ba:	2800      	cmp	r0, #0
   189bc:	daf0      	bge.n	189a0 <lfs_file_truncate+0x1e>
   189be:	e025      	b.n	18a0c <lfs_file_truncate+0x8a>
        int err = lfs_file_flush(lfs, file);
   189c0:	4621      	mov	r1, r4
   189c2:	4630      	mov	r0, r6
   189c4:	f7f9 ffb4 	bl	12930 <lfs_file_flush>
        if (err) {
   189c8:	bb00      	cbnz	r0, 18a0c <lfs_file_truncate+0x8a>
        err = lfs_ctz_find(lfs, NULL, &file->cache,
   189ca:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   189ce:	9303      	str	r3, [sp, #12]
   189d0:	f104 0338 	add.w	r3, r4, #56	; 0x38
   189d4:	9302      	str	r3, [sp, #8]
   189d6:	9501      	str	r5, [sp, #4]
   189d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   189da:	9300      	str	r3, [sp, #0]
   189dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   189de:	f104 0240 	add.w	r2, r4, #64	; 0x40
   189e2:	2100      	movs	r1, #0
   189e4:	4630      	mov	r0, r6
   189e6:	f7ff fd46 	bl	18476 <lfs_ctz_find>
        if (err) {
   189ea:	b978      	cbnz	r0, 18a0c <lfs_file_truncate+0x8a>
        file->ctz.head = file->block;
   189ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   189ee:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = size;
   189f0:	62e5      	str	r5, [r4, #44]	; 0x2c
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
   189f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   189f4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   189f8:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_soff_t res = lfs_file_seek(lfs, file, pos, LFS_SEEK_SET);
   189fa:	2300      	movs	r3, #0
   189fc:	463a      	mov	r2, r7
   189fe:	4621      	mov	r1, r4
   18a00:	4630      	mov	r0, r6
   18a02:	f7ff ffa2 	bl	1894a <lfs_file_seek>
    if (res < 0) {
   18a06:	2800      	cmp	r0, #0
   18a08:	db00      	blt.n	18a0c <lfs_file_truncate+0x8a>
    return 0;
   18a0a:	2000      	movs	r0, #0
}
   18a0c:	b007      	add	sp, #28
   18a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lfs_soff_t res = lfs_file_seek(lfs, file, 0, LFS_SEEK_END);
   18a10:	2302      	movs	r3, #2
   18a12:	2200      	movs	r2, #0
   18a14:	4621      	mov	r1, r4
   18a16:	4630      	mov	r0, r6
   18a18:	f7ff ff97 	bl	1894a <lfs_file_seek>
            if (res < 0) {
   18a1c:	2800      	cmp	r0, #0
   18a1e:	dabf      	bge.n	189a0 <lfs_file_truncate+0x1e>
   18a20:	e7f4      	b.n	18a0c <lfs_file_truncate+0x8a>
        return LFS_ERR_INVAL;
   18a22:	f06f 0015 	mvn.w	r0, #21
   18a26:	e7f1      	b.n	18a0c <lfs_file_truncate+0x8a>

00018a28 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
   18a28:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
   18a2a:	0d1b      	lsrs	r3, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   18a2c:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   18a30:	d101      	bne.n	18a36 <lfs_fs_demove+0xe>
        return 0;
   18a32:	2000      	movs	r0, #0
}
   18a34:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
   18a36:	b530      	push	{r4, r5, lr}
   18a38:	b08b      	sub	sp, #44	; 0x2c
   18a3a:	4604      	mov	r4, r0
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
   18a3c:	f100 0240 	add.w	r2, r0, #64	; 0x40
   18a40:	4669      	mov	r1, sp
   18a42:	f7ff f94e 	bl	17ce2 <lfs_dir_fetch>
    if (err) {
   18a46:	b108      	cbz	r0, 18a4c <lfs_fs_demove+0x24>
}
   18a48:	b00b      	add	sp, #44	; 0x2c
   18a4a:	bd30      	pop	{r4, r5, pc}
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
   18a4c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    return (tag & 0x000ffc00) >> 10;
   18a4e:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
   18a52:	2200      	movs	r2, #0
   18a54:	f240 31ff 	movw	r1, #1023	; 0x3ff
   18a58:	4620      	mov	r0, r4
   18a5a:	f7f8 fdbd 	bl	115d8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   18a5e:	2300      	movs	r3, #0
   18a60:	9309      	str	r3, [sp, #36]	; 0x24
   18a62:	02ab      	lsls	r3, r5, #10
   18a64:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   18a68:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   18a6c:	9308      	str	r3, [sp, #32]
   18a6e:	2301      	movs	r3, #1
   18a70:	aa08      	add	r2, sp, #32
   18a72:	4669      	mov	r1, sp
   18a74:	4620      	mov	r0, r4
   18a76:	f7fa fa6d 	bl	12f54 <lfs_dir_commit>
    if (err) {
   18a7a:	e7e5      	b.n	18a48 <lfs_fs_demove+0x20>

00018a7c <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   18a7c:	b510      	push	{r4, lr}
   18a7e:	4604      	mov	r4, r0
    int err = lfs_fs_demove(lfs);
   18a80:	f7ff ffd2 	bl	18a28 <lfs_fs_demove>
    if (err) {
   18a84:	b100      	cbz	r0, 18a88 <lfs_fs_forceconsistency+0xc>
}
   18a86:	bd10      	pop	{r4, pc}
    err = lfs_fs_deorphan(lfs);
   18a88:	4620      	mov	r0, r4
   18a8a:	f7fa fca1 	bl	133d0 <lfs_fs_deorphan>
    if (err) {
   18a8e:	e7fa      	b.n	18a86 <lfs_fs_forceconsistency+0xa>

00018a90 <lfs_file_sync>:
    if (file->flags & LFS_F_ERRED) {
   18a90:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   18a92:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   18a96:	d001      	beq.n	18a9c <lfs_file_sync+0xc>
        return 0;
   18a98:	2000      	movs	r0, #0
}
   18a9a:	4770      	bx	lr
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
   18a9c:	b530      	push	{r4, r5, lr}
   18a9e:	b087      	sub	sp, #28
   18aa0:	4605      	mov	r5, r0
   18aa2:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
   18aa4:	f7f9 ff44 	bl	12930 <lfs_file_flush>
    if (err) {
   18aa8:	2800      	cmp	r0, #0
   18aaa:	d132      	bne.n	18b12 <lfs_file_sync+0x82>
    if ((file->flags & LFS_F_DIRTY) &&
   18aac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18aae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   18ab2:	d032      	beq.n	18b1a <lfs_file_sync+0x8a>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   18ab4:	68a2      	ldr	r2, [r4, #8]
   18ab6:	f1b2 3fff 	cmp.w	r2, #4294967295
   18aba:	d032      	beq.n	18b22 <lfs_file_sync+0x92>
   18abc:	68e2      	ldr	r2, [r4, #12]
   18abe:	f1b2 3fff 	cmp.w	r2, #4294967295
   18ac2:	d02c      	beq.n	18b1e <lfs_file_sync+0x8e>
   18ac4:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
   18ac6:	f012 0f01 	tst.w	r2, #1
   18aca:	d126      	bne.n	18b1a <lfs_file_sync+0x8a>
        if (file->flags & LFS_F_INLINE) {
   18acc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   18ad0:	d029      	beq.n	18b26 <lfs_file_sync+0x96>
            buffer = file->cache.buffer;
   18ad2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
            size = file->ctz.size;
   18ad4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            type = LFS_TYPE_INLINESTRUCT;
   18ad6:	f240 2201 	movw	r2, #513	; 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   18ada:	88a3      	ldrh	r3, [r4, #4]
   18adc:	029b      	lsls	r3, r3, #10
   18ade:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
   18ae2:	4302      	orrs	r2, r0
   18ae4:	9202      	str	r2, [sp, #8]
   18ae6:	9103      	str	r1, [sp, #12]
   18ae8:	6d22      	ldr	r2, [r4, #80]	; 0x50
   18aea:	6891      	ldr	r1, [r2, #8]
   18aec:	430b      	orrs	r3, r1
   18aee:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
   18af2:	9304      	str	r3, [sp, #16]
   18af4:	6853      	ldr	r3, [r2, #4]
   18af6:	9305      	str	r3, [sp, #20]
   18af8:	2302      	movs	r3, #2
   18afa:	aa02      	add	r2, sp, #8
   18afc:	f104 0108 	add.w	r1, r4, #8
   18b00:	4628      	mov	r0, r5
   18b02:	f7fa fa27 	bl	12f54 <lfs_dir_commit>
        if (err) {
   18b06:	b9c0      	cbnz	r0, 18b3a <lfs_file_sync+0xaa>
        file->flags &= ~LFS_F_DIRTY;
   18b08:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   18b0e:	6323      	str	r3, [r4, #48]	; 0x30
   18b10:	e003      	b.n	18b1a <lfs_file_sync+0x8a>
        file->flags |= LFS_F_ERRED;
   18b12:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   18b18:	6323      	str	r3, [r4, #48]	; 0x30
}
   18b1a:	b007      	add	sp, #28
   18b1c:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   18b1e:	2201      	movs	r2, #1
   18b20:	e7d1      	b.n	18ac6 <lfs_file_sync+0x36>
   18b22:	2201      	movs	r2, #1
   18b24:	e7cf      	b.n	18ac6 <lfs_file_sync+0x36>
            ctz = file->ctz;
   18b26:	466b      	mov	r3, sp
   18b28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   18b2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   18b2c:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
   18b30:	2008      	movs	r0, #8
            buffer = &ctz;
   18b32:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
   18b34:	f240 2202 	movw	r2, #514	; 0x202
   18b38:	e7cf      	b.n	18ada <lfs_file_sync+0x4a>
            file->flags |= LFS_F_ERRED;
   18b3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18b3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   18b40:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   18b42:	e7ea      	b.n	18b1a <lfs_file_sync+0x8a>

00018b44 <lfs_file_close>:
int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
   18b44:	b570      	push	{r4, r5, r6, lr}
   18b46:	4604      	mov	r4, r0
   18b48:	460d      	mov	r5, r1
    int err = lfs_file_sync(lfs, file);
   18b4a:	f7ff ffa1 	bl	18a90 <lfs_file_sync>
   18b4e:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   18b50:	f104 0228 	add.w	r2, r4, #40	; 0x28
   18b54:	6813      	ldr	r3, [r2, #0]
   18b56:	b12b      	cbz	r3, 18b64 <lfs_file_close+0x20>
        if (*p == (struct lfs_mlist*)file) {
   18b58:	42ab      	cmp	r3, r5
   18b5a:	d001      	beq.n	18b60 <lfs_file_close+0x1c>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   18b5c:	461a      	mov	r2, r3
   18b5e:	e7f9      	b.n	18b54 <lfs_file_close+0x10>
            *p = (*p)->next;
   18b60:	681b      	ldr	r3, [r3, #0]
   18b62:	6013      	str	r3, [r2, #0]
    if (!file->cfg->buffer) {
   18b64:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   18b66:	681b      	ldr	r3, [r3, #0]
   18b68:	b12b      	cbz	r3, 18b76 <lfs_file_close+0x32>
    file->flags &= ~LFS_F_OPENED;
   18b6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   18b6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   18b70:	632b      	str	r3, [r5, #48]	; 0x30
}
   18b72:	4630      	mov	r0, r6
   18b74:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
   18b76:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   18b78:	f7fe f99b 	bl	16eb2 <free>
}
   18b7c:	e7f5      	b.n	18b6a <lfs_file_close+0x26>

00018b7e <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   18b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b82:	b08c      	sub	sp, #48	; 0x30
   18b84:	4605      	mov	r5, r0
   18b86:	460c      	mov	r4, r1
   18b88:	4617      	mov	r7, r2
   18b8a:	461e      	mov	r6, r3
   18b8c:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
    lfs_alloc_ack(lfs);
   18b90:	f7fe ff2c 	bl	179ec <lfs_alloc_ack>
    int err = lfs_dir_alloc(lfs, &tail);
   18b94:	a904      	add	r1, sp, #16
   18b96:	4628      	mov	r0, r5
   18b98:	f7ff fcea 	bl	18570 <lfs_dir_alloc>
    if (err) {
   18b9c:	b110      	cbz	r0, 18ba4 <lfs_dir_split+0x26>
}
   18b9e:	b00c      	add	sp, #48	; 0x30
   18ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tail.split = dir->split;
   18ba4:	7de3      	ldrb	r3, [r4, #23]
   18ba6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
   18baa:	69a3      	ldr	r3, [r4, #24]
   18bac:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
   18bae:	69e3      	ldr	r3, [r4, #28]
   18bb0:	930b      	str	r3, [sp, #44]	; 0x2c
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   18bb2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   18bb6:	9302      	str	r3, [sp, #8]
   18bb8:	f8cd 8004 	str.w	r8, [sp, #4]
   18bbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18bbe:	9300      	str	r3, [sp, #0]
   18bc0:	4633      	mov	r3, r6
   18bc2:	463a      	mov	r2, r7
   18bc4:	a904      	add	r1, sp, #16
   18bc6:	4628      	mov	r0, r5
   18bc8:	f7f9 ffca 	bl	12b60 <lfs_dir_compact>
    if (err) {
   18bcc:	2800      	cmp	r0, #0
   18bce:	d1e6      	bne.n	18b9e <lfs_dir_split+0x20>
    dir->tail[0] = tail.pair[0];
   18bd0:	9904      	ldr	r1, [sp, #16]
   18bd2:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
   18bd4:	9a05      	ldr	r2, [sp, #20]
   18bd6:	61e2      	str	r2, [r4, #28]
    dir->split = true;
   18bd8:	2301      	movs	r3, #1
   18bda:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   18bdc:	6823      	ldr	r3, [r4, #0]
   18bde:	6a2e      	ldr	r6, [r5, #32]
   18be0:	42b3      	cmp	r3, r6
   18be2:	d007      	beq.n	18bf4 <lfs_dir_split+0x76>
   18be4:	6867      	ldr	r7, [r4, #4]
   18be6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   18be8:	42a7      	cmp	r7, r4
   18bea:	d003      	beq.n	18bf4 <lfs_dir_split+0x76>
   18bec:	42a3      	cmp	r3, r4
   18bee:	d001      	beq.n	18bf4 <lfs_dir_split+0x76>
   18bf0:	42be      	cmp	r6, r7
   18bf2:	d1d4      	bne.n	18b9e <lfs_dir_split+0x20>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   18bf4:	f1b8 0f00 	cmp.w	r8, #0
   18bf8:	d1d1      	bne.n	18b9e <lfs_dir_split+0x20>
        lfs->root[0] = tail.pair[0];
   18bfa:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
   18bfc:	626a      	str	r2, [r5, #36]	; 0x24
   18bfe:	e7ce      	b.n	18b9e <lfs_dir_split+0x20>

00018c00 <arch_system_halt>:
	__asm__ volatile(
   18c00:	f04f 0220 	mov.w	r2, #32
   18c04:	f3ef 8311 	mrs	r3, BASEPRI
   18c08:	f382 8811 	msr	BASEPRI, r2
   18c0c:	f3bf 8f6f 	isb	sy
	for (;;) {
   18c10:	e7fe      	b.n	18c10 <arch_system_halt+0x10>

00018c12 <sys_power_save_idle>:

static void sys_power_save_idle(void)
{
   18c12:	b510      	push	{r4, lr}
	int32_t ticks = z_get_next_timeout_expiry();
   18c14:	f000 fac5 	bl	191a2 <z_get_next_timeout_expiry>
   18c18:	4604      	mov	r4, r0
	 * periods less than that.  This seems... silly, given that it
	 * saves no power and does not improve latency.  But it's an
	 * API we need to honor...
	 */
#ifdef CONFIG_SYS_CLOCK_EXISTS
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   18c1a:	2802      	cmp	r0, #2
   18c1c:	dd08      	ble.n	18c30 <sys_power_save_idle+0x1e>
   18c1e:	2101      	movs	r1, #1
   18c20:	f000 fad5 	bl	191ce <z_set_timeout_expiry>
#endif

	set_kernel_idle_time_in_ticks(ticks);
   18c24:	4620      	mov	r0, r4
   18c26:	f7fb faa7 	bl	14178 <set_kernel_idle_time_in_ticks>
	arch_cpu_idle();
   18c2a:	f7f5 fff5 	bl	ec18 <arch_cpu_idle>
		k_cpu_idle();
	}
#else
	k_cpu_idle();
#endif
}
   18c2e:	bd10      	pop	{r4, pc}
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   18c30:	2001      	movs	r0, #1
   18c32:	e7f4      	b.n	18c1e <sys_power_save_idle+0xc>

00018c34 <z_sys_power_save_idle_exit>:
#endif

void z_sys_power_save_idle_exit(int32_t ticks)
{
   18c34:	b508      	push	{r3, lr}
	if (sys_pm_idle_exit_notify) {
		_sys_resume();
	}
#endif

	z_clock_idle_exit();
   18c36:	f7fe f862 	bl	16cfe <z_clock_idle_exit>
}
   18c3a:	bd08      	pop	{r3, pc}

00018c3c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   18c3c:	b508      	push	{r3, lr}
   18c3e:	f04f 0220 	mov.w	r2, #32
   18c42:	f3ef 8311 	mrs	r3, BASEPRI
   18c46:	f382 8811 	msr	BASEPRI, r2
   18c4a:	f3bf 8f6f 	isb	sy
#if SMP_FALLBACK
		k_busy_wait(100);
		k_yield();
#else
		(void)arch_irq_lock();
		sys_power_save_idle();
   18c4e:	f7ff ffe0 	bl	18c12 <sys_power_save_idle>
	while (true) {
   18c52:	e7f4      	b.n	18c3e <idle+0x2>

00018c54 <k_heap_init>:
{
   18c54:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   18c56:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   18c5a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   18c5c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   18c5e:	f7fd fa4c 	bl	160fa <sys_heap_init>
}
   18c62:	bd10      	pop	{r4, pc}

00018c64 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   18c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c68:	b085      	sub	sp, #20
   18c6a:	4680      	mov	r8, r0
   18c6c:	9103      	str	r1, [sp, #12]
	int64_t now, end = z_timeout_end_calc(timeout);
   18c6e:	4610      	mov	r0, r2
   18c70:	4619      	mov	r1, r3
   18c72:	f000 fad9 	bl	19228 <z_timeout_end_calc>
   18c76:	4681      	mov	r9, r0
   18c78:	468a      	mov	sl, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18c7a:	f108 0b14 	add.w	fp, r8, #20
   18c7e:	f04f 0320 	mov.w	r3, #32
   18c82:	f3ef 8511 	mrs	r5, BASEPRI
   18c86:	f383 8811 	msr	BASEPRI, r3
   18c8a:	f3bf 8f6f 	isb	sy
	void *ret = NULL;
   18c8e:	2400      	movs	r4, #0
   18c90:	e00f      	b.n	18cb2 <k_heap_alloc+0x4e>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   18c92:	e9cd 6700 	strd	r6, r7, [sp]
   18c96:	f108 020c 	add.w	r2, r8, #12
   18c9a:	4629      	mov	r1, r5
   18c9c:	4658      	mov	r0, fp
   18c9e:	f7fb ff67 	bl	14b70 <z_pend_curr>
   18ca2:	f04f 0320 	mov.w	r3, #32
   18ca6:	f3ef 8511 	mrs	r5, BASEPRI
   18caa:	f383 8811 	msr	BASEPRI, r3
   18cae:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   18cb2:	b97c      	cbnz	r4, 18cd4 <k_heap_alloc+0x70>
		ret = sys_heap_alloc(&h->heap, bytes);
   18cb4:	9903      	ldr	r1, [sp, #12]
   18cb6:	4640      	mov	r0, r8
   18cb8:	f7fd f9dd 	bl	16076 <sys_heap_alloc>
   18cbc:	4604      	mov	r4, r0
		now = z_tick_get();
   18cbe:	f7fc faad 	bl	1521c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   18cc2:	b93c      	cbnz	r4, 18cd4 <k_heap_alloc+0x70>
   18cc4:	ebb9 0600 	subs.w	r6, r9, r0
   18cc8:	eb6a 0701 	sbc.w	r7, sl, r1
   18ccc:	2e01      	cmp	r6, #1
   18cce:	f177 0300 	sbcs.w	r3, r7, #0
   18cd2:	dade      	bge.n	18c92 <k_heap_alloc+0x2e>
	__asm__ volatile(
   18cd4:	f385 8811 	msr	BASEPRI, r5
   18cd8:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   18cdc:	4620      	mov	r0, r4
   18cde:	b005      	add	sp, #20
   18ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018ce4 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   18ce4:	b570      	push	{r4, r5, r6, lr}
   18ce6:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18ce8:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   18cec:	f04f 0320 	mov.w	r3, #32
   18cf0:	f3ef 8511 	mrs	r5, BASEPRI
   18cf4:	f383 8811 	msr	BASEPRI, r3
   18cf8:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   18cfc:	f7fd f9a0 	bl	16040 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   18d00:	f104 000c 	add.w	r0, r4, #12
   18d04:	f000 f9b1 	bl	1906a <z_unpend_all>
   18d08:	b920      	cbnz	r0, 18d14 <k_heap_free+0x30>
	__asm__ volatile(
   18d0a:	f385 8811 	msr	BASEPRI, r5
   18d0e:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   18d12:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   18d14:	4629      	mov	r1, r5
   18d16:	4630      	mov	r0, r6
   18d18:	f7fb fcdc 	bl	146d4 <z_reschedule>
   18d1c:	e7f9      	b.n	18d12 <k_heap_free+0x2e>

00018d1e <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   18d1e:	b538      	push	{r3, r4, r5, lr}
   18d20:	460d      	mov	r5, r1
   18d22:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   18d24:	6800      	ldr	r0, [r0, #0]
   18d26:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   18d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   18d2c:	4621      	mov	r1, r4
   18d2e:	f7ff ff99 	bl	18c64 <k_heap_alloc>
   18d32:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   18d34:	b164      	cbz	r4, 18d50 <k_mem_pool_alloc+0x32>
   18d36:	b108      	cbz	r0, 18d3c <k_mem_pool_alloc+0x1e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
	} else {
		return 0;
   18d38:	2000      	movs	r0, #0
	}
}
   18d3a:	bd38      	pop	{r3, r4, r5, pc}
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   18d3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   18d40:	4323      	orrs	r3, r4
   18d42:	d102      	bne.n	18d4a <k_mem_pool_alloc+0x2c>
   18d44:	f06f 000b 	mvn.w	r0, #11
   18d48:	e7f7      	b.n	18d3a <k_mem_pool_alloc+0x1c>
   18d4a:	f06f 000a 	mvn.w	r0, #10
   18d4e:	e7f4      	b.n	18d3a <k_mem_pool_alloc+0x1c>
		return 0;
   18d50:	2000      	movs	r0, #0
   18d52:	e7f2      	b.n	18d3a <k_mem_pool_alloc+0x1c>

00018d54 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   18d54:	b508      	push	{r3, lr}
	k_heap_free(id->heap, id->data);
   18d56:	6801      	ldr	r1, [r0, #0]
   18d58:	6840      	ldr	r0, [r0, #4]
   18d5a:	f7ff ffc3 	bl	18ce4 <k_heap_free>
}
   18d5e:	bd08      	pop	{r3, pc}

00018d60 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   18d60:	68c2      	ldr	r2, [r0, #12]
   18d62:	6903      	ldr	r3, [r0, #16]
   18d64:	431a      	orrs	r2, r3
   18d66:	f012 0203 	ands.w	r2, r2, #3
   18d6a:	d10d      	bne.n	18d88 <create_free_list+0x28>
	slab->free_list = NULL;
   18d6c:	2100      	movs	r1, #0
   18d6e:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   18d70:	e005      	b.n	18d7e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   18d72:	6941      	ldr	r1, [r0, #20]
   18d74:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   18d76:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   18d78:	68c1      	ldr	r1, [r0, #12]
   18d7a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   18d7c:	3201      	adds	r2, #1
   18d7e:	6881      	ldr	r1, [r0, #8]
   18d80:	4291      	cmp	r1, r2
   18d82:	d8f6      	bhi.n	18d72 <create_free_list+0x12>
	return 0;
   18d84:	2000      	movs	r0, #0
   18d86:	4770      	bx	lr
		return -EINVAL;
   18d88:	f06f 0015 	mvn.w	r0, #21
}
   18d8c:	4770      	bx	lr

00018d8e <k_mem_slab_init>:
{
   18d8e:	b510      	push	{r4, lr}
   18d90:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   18d92:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   18d94:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   18d96:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   18d98:	2300      	movs	r3, #0
   18d9a:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   18d9c:	f7ff ffe0 	bl	18d60 <create_free_list>
	if (rc < 0) {
   18da0:	2800      	cmp	r0, #0
   18da2:	db01      	blt.n	18da8 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   18da4:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   18da6:	6064      	str	r4, [r4, #4]
}
   18da8:	bd10      	pop	{r4, pc}

00018daa <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   18daa:	4288      	cmp	r0, r1
   18dac:	da00      	bge.n	18db0 <new_prio_for_inheritance+0x6>
   18dae:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   18db0:	2900      	cmp	r1, #0
   18db2:	db01      	blt.n	18db8 <new_prio_for_inheritance+0xe>
   18db4:	4608      	mov	r0, r1
   18db6:	4770      	bx	lr
   18db8:	2000      	movs	r0, #0
}
   18dba:	4770      	bx	lr

00018dbc <adjust_owner_prio>:
{
   18dbc:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   18dbe:	6880      	ldr	r0, [r0, #8]
   18dc0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18dc4:	428b      	cmp	r3, r1
   18dc6:	d101      	bne.n	18dcc <adjust_owner_prio+0x10>
	return false;
   18dc8:	2000      	movs	r0, #0
}
   18dca:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   18dcc:	f7fb fee4 	bl	14b98 <z_set_prio>
   18dd0:	e7fb      	b.n	18dca <adjust_owner_prio+0xe>

00018dd2 <z_impl_k_mutex_init>:
{
   18dd2:	4603      	mov	r3, r0
	mutex->owner = NULL;
   18dd4:	2000      	movs	r0, #0
   18dd6:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   18dd8:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   18dda:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   18ddc:	605b      	str	r3, [r3, #4]
}
   18dde:	4770      	bx	lr

00018de0 <pended_on>:
}
   18de0:	6880      	ldr	r0, [r0, #8]
   18de2:	4770      	bx	lr

00018de4 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   18de4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   18de8:	f991 300e 	ldrsb.w	r3, [r1, #14]
   18dec:	429a      	cmp	r2, r3
   18dee:	db01      	blt.n	18df4 <z_is_t1_higher_prio_than_t2+0x10>
	return false;
   18df0:	2000      	movs	r0, #0
   18df2:	4770      	bx	lr
		return true;
   18df4:	2001      	movs	r0, #1
}
   18df6:	4770      	bx	lr

00018df8 <z_find_first_thread_to_unpend>:
{
   18df8:	b538      	push	{r3, r4, r5, lr}
   18dfa:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   18dfc:	2300      	movs	r3, #0
	__asm__ volatile(
   18dfe:	f04f 0220 	mov.w	r2, #32
   18e02:	f3ef 8411 	mrs	r4, BASEPRI
   18e06:	f382 8811 	msr	BASEPRI, r2
   18e0a:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
   18e0e:	4618      	mov	r0, r3
	LOCKED(&sched_spinlock) {
   18e10:	b943      	cbnz	r3, 18e24 <z_find_first_thread_to_unpend+0x2c>
		ret = _priq_wait_best(&wait_q->waitq);
   18e12:	4628      	mov	r0, r5
   18e14:	f000 f857 	bl	18ec6 <z_priq_dumb_best>
	__asm__ volatile(
   18e18:	f384 8811 	msr	BASEPRI, r4
   18e1c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18e20:	2301      	movs	r3, #1
   18e22:	e7f5      	b.n	18e10 <z_find_first_thread_to_unpend+0x18>
}
   18e24:	bd38      	pop	{r3, r4, r5, pc}

00018e26 <z_unpend_thread_no_timeout>:
{
   18e26:	b538      	push	{r3, r4, r5, lr}
   18e28:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   18e2a:	2300      	movs	r3, #0
	__asm__ volatile(
   18e2c:	f04f 0220 	mov.w	r2, #32
   18e30:	f3ef 8511 	mrs	r5, BASEPRI
   18e34:	f382 8811 	msr	BASEPRI, r2
   18e38:	f3bf 8f6f 	isb	sy
   18e3c:	b98b      	cbnz	r3, 18e62 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   18e3e:	4620      	mov	r0, r4
   18e40:	f7ff ffce 	bl	18de0 <pended_on>
   18e44:	4621      	mov	r1, r4
   18e46:	f7fb fc77 	bl	14738 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18e4a:	7b63      	ldrb	r3, [r4, #13]
   18e4c:	f023 0302 	bic.w	r3, r3, #2
   18e50:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   18e52:	2300      	movs	r3, #0
   18e54:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   18e56:	f385 8811 	msr	BASEPRI, r5
   18e5a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18e5e:	2301      	movs	r3, #1
   18e60:	e7ec      	b.n	18e3c <z_unpend_thread_no_timeout+0x16>
}
   18e62:	bd38      	pop	{r3, r4, r5, pc}

00018e64 <z_reschedule_irqlock>:
{
   18e64:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18e66:	4603      	mov	r3, r0
   18e68:	b928      	cbnz	r0, 18e76 <z_reschedule_irqlock+0x12>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18e6a:	f3ef 8205 	mrs	r2, IPSR
   18e6e:	b912      	cbnz	r2, 18e76 <z_reschedule_irqlock+0x12>
   18e70:	f7f5 fe0a 	bl	ea88 <arch_swap>
	return ret;
   18e74:	e003      	b.n	18e7e <z_reschedule_irqlock+0x1a>
   18e76:	f383 8811 	msr	BASEPRI, r3
   18e7a:	f3bf 8f6f 	isb	sy
}
   18e7e:	bd08      	pop	{r3, pc}

00018e80 <z_unpend_thread>:
{
   18e80:	b538      	push	{r3, r4, r5, lr}
   18e82:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   18e84:	2300      	movs	r3, #0
	__asm__ volatile(
   18e86:	f04f 0220 	mov.w	r2, #32
   18e8a:	f3ef 8511 	mrs	r5, BASEPRI
   18e8e:	f382 8811 	msr	BASEPRI, r2
   18e92:	f3bf 8f6f 	isb	sy
   18e96:	b98b      	cbnz	r3, 18ebc <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   18e98:	4620      	mov	r0, r4
   18e9a:	f7ff ffa1 	bl	18de0 <pended_on>
   18e9e:	4621      	mov	r1, r4
   18ea0:	f7fb fc4a 	bl	14738 <z_priq_dumb_remove>
   18ea4:	7b63      	ldrb	r3, [r4, #13]
   18ea6:	f023 0302 	bic.w	r3, r3, #2
   18eaa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   18eac:	2300      	movs	r3, #0
   18eae:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   18eb0:	f385 8811 	msr	BASEPRI, r5
   18eb4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18eb8:	2301      	movs	r3, #1
   18eba:	e7ec      	b.n	18e96 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   18ebc:	f104 0018 	add.w	r0, r4, #24
   18ec0:	f000 f951 	bl	19166 <z_abort_timeout>
}
   18ec4:	bd38      	pop	{r3, r4, r5, pc}

00018ec6 <z_priq_dumb_best>:
{
   18ec6:	4603      	mov	r3, r0
	return list->head == list;
   18ec8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18eca:	4283      	cmp	r3, r0
   18ecc:	d000      	beq.n	18ed0 <z_priq_dumb_best+0xa>
}
   18ece:	4770      	bx	lr
	struct k_thread *thread = NULL;
   18ed0:	2000      	movs	r0, #0
	return thread;
   18ed2:	e7fc      	b.n	18ece <z_priq_dumb_best+0x8>

00018ed4 <z_ready_thread>:
{
   18ed4:	b538      	push	{r3, r4, r5, lr}
   18ed6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   18ed8:	2300      	movs	r3, #0
	__asm__ volatile(
   18eda:	f04f 0220 	mov.w	r2, #32
   18ede:	f3ef 8411 	mrs	r4, BASEPRI
   18ee2:	f382 8811 	msr	BASEPRI, r2
   18ee6:	f3bf 8f6f 	isb	sy
   18eea:	b943      	cbnz	r3, 18efe <z_ready_thread+0x2a>
		ready_thread(thread);
   18eec:	4628      	mov	r0, r5
   18eee:	f7fb fc8b 	bl	14808 <ready_thread>
	__asm__ volatile(
   18ef2:	f384 8811 	msr	BASEPRI, r4
   18ef6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18efa:	2301      	movs	r3, #1
   18efc:	e7f5      	b.n	18eea <z_ready_thread+0x16>
}
   18efe:	bd38      	pop	{r3, r4, r5, pc}

00018f00 <z_thread_timeout>:
{
   18f00:	b570      	push	{r4, r5, r6, lr}
   18f02:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   18f04:	2300      	movs	r3, #0
	__asm__ volatile(
   18f06:	f04f 0220 	mov.w	r2, #32
   18f0a:	f3ef 8611 	mrs	r6, BASEPRI
   18f0e:	f382 8811 	msr	BASEPRI, r2
   18f12:	f3bf 8f6f 	isb	sy
   18f16:	e019      	b.n	18f4c <z_thread_timeout+0x4c>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   18f18:	4620      	mov	r0, r4
   18f1a:	f7ff ff61 	bl	18de0 <pended_on>
   18f1e:	4621      	mov	r1, r4
   18f20:	f7fb fc0a 	bl	14738 <z_priq_dumb_remove>
   18f24:	7b63      	ldrb	r3, [r4, #13]
   18f26:	f023 0302 	bic.w	r3, r3, #2
   18f2a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   18f2c:	2300      	movs	r3, #0
   18f2e:	60a3      	str	r3, [r4, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18f30:	f815 3c0b 	ldrb.w	r3, [r5, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18f34:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   18f38:	f805 3c0b 	strb.w	r3, [r5, #-11]
		ready_thread(thread);
   18f3c:	4620      	mov	r0, r4
   18f3e:	f7fb fc63 	bl	14808 <ready_thread>
	__asm__ volatile(
   18f42:	f386 8811 	msr	BASEPRI, r6
   18f46:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18f4a:	2301      	movs	r3, #1
   18f4c:	b933      	cbnz	r3, 18f5c <z_thread_timeout+0x5c>
		struct k_thread *thread = CONTAINER_OF(timeout,
   18f4e:	f1a5 0418 	sub.w	r4, r5, #24
		if (thread->base.pended_on != NULL) {
   18f52:	f855 3c10 	ldr.w	r3, [r5, #-16]
   18f56:	2b00      	cmp	r3, #0
   18f58:	d1de      	bne.n	18f18 <z_thread_timeout+0x18>
   18f5a:	e7e9      	b.n	18f30 <z_thread_timeout+0x30>
}
   18f5c:	bd70      	pop	{r4, r5, r6, pc}

00018f5e <add_to_waitq_locked>:
{
   18f5e:	b570      	push	{r4, r5, r6, lr}
   18f60:	4605      	mov	r5, r0
   18f62:	460e      	mov	r6, r1
	unready_thread(thread);
   18f64:	f7fb fde8 	bl	14b38 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   18f68:	7b6b      	ldrb	r3, [r5, #13]
   18f6a:	f043 0302 	orr.w	r3, r3, #2
   18f6e:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   18f70:	b1ae      	cbz	r6, 18f9e <add_to_waitq_locked+0x40>
		thread->base.pended_on = wait_q;
   18f72:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   18f74:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18f76:	42a6      	cmp	r6, r4
   18f78:	d019      	beq.n	18fae <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18f7a:	b15c      	cbz	r4, 18f94 <add_to_waitq_locked+0x36>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
   18f7c:	4621      	mov	r1, r4
   18f7e:	4628      	mov	r0, r5
   18f80:	f7ff ff30 	bl	18de4 <z_is_t1_higher_prio_than_t2>
   18f84:	b960      	cbnz	r0, 18fa0 <add_to_waitq_locked+0x42>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18f86:	b12c      	cbz	r4, 18f94 <add_to_waitq_locked+0x36>
	return (node == list->tail) ? NULL : node->next;
   18f88:	6873      	ldr	r3, [r6, #4]
   18f8a:	429c      	cmp	r4, r3
   18f8c:	d002      	beq.n	18f94 <add_to_waitq_locked+0x36>
   18f8e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18f90:	2c00      	cmp	r4, #0
   18f92:	d1f2      	bne.n	18f7a <add_to_waitq_locked+0x1c>
	node->next = list;
   18f94:	602e      	str	r6, [r5, #0]
	node->prev = list->tail;
   18f96:	6873      	ldr	r3, [r6, #4]
   18f98:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   18f9a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   18f9c:	6075      	str	r5, [r6, #4]
}
   18f9e:	bd70      	pop	{r4, r5, r6, pc}
	node->prev = successor->prev;
   18fa0:	6863      	ldr	r3, [r4, #4]
   18fa2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   18fa4:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
   18fa6:	6863      	ldr	r3, [r4, #4]
   18fa8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   18faa:	6065      	str	r5, [r4, #4]
}
   18fac:	e7f7      	b.n	18f9e <add_to_waitq_locked+0x40>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18fae:	2400      	movs	r4, #0
   18fb0:	e7e3      	b.n	18f7a <add_to_waitq_locked+0x1c>

00018fb2 <pend>:
{
   18fb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18fb6:	4605      	mov	r5, r0
   18fb8:	460f      	mov	r7, r1
   18fba:	4691      	mov	r9, r2
   18fbc:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   18fbe:	2400      	movs	r4, #0
	__asm__ volatile(
   18fc0:	f04f 0320 	mov.w	r3, #32
   18fc4:	f3ef 8611 	mrs	r6, BASEPRI
   18fc8:	f383 8811 	msr	BASEPRI, r3
   18fcc:	f3bf 8f6f 	isb	sy
   18fd0:	b94c      	cbnz	r4, 18fe6 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   18fd2:	4639      	mov	r1, r7
   18fd4:	4628      	mov	r0, r5
   18fd6:	f7ff ffc2 	bl	18f5e <add_to_waitq_locked>
	__asm__ volatile(
   18fda:	f386 8811 	msr	BASEPRI, r6
   18fde:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18fe2:	2401      	movs	r4, #1
   18fe4:	e7f4      	b.n	18fd0 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   18fe6:	464a      	mov	r2, r9
   18fe8:	4643      	mov	r3, r8
   18fea:	4628      	mov	r0, r5
   18fec:	f7fb fb18 	bl	14620 <add_thread_timeout>
}
   18ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00018ff4 <z_unpend_first_thread>:
{
   18ff4:	b570      	push	{r4, r5, r6, lr}
   18ff6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   18ff8:	2300      	movs	r3, #0
	__asm__ volatile(
   18ffa:	f04f 0220 	mov.w	r2, #32
   18ffe:	f3ef 8511 	mrs	r5, BASEPRI
   19002:	f382 8811 	msr	BASEPRI, r2
   19006:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
   1900a:	461c      	mov	r4, r3
	LOCKED(&sched_spinlock) {
   1900c:	b94b      	cbnz	r3, 19022 <z_unpend_first_thread+0x2e>
		ret = _priq_wait_best(&wait_q->waitq);
   1900e:	4630      	mov	r0, r6
   19010:	f7ff ff59 	bl	18ec6 <z_priq_dumb_best>
   19014:	4604      	mov	r4, r0
	__asm__ volatile(
   19016:	f385 8811 	msr	BASEPRI, r5
   1901a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1901e:	2301      	movs	r3, #1
   19020:	e7f4      	b.n	1900c <z_unpend_first_thread+0x18>

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   19022:	b1dc      	cbz	r4, 1905c <z_unpend_first_thread+0x68>
	LOCKED(&sched_spinlock) {
   19024:	2300      	movs	r3, #0
	__asm__ volatile(
   19026:	f04f 0220 	mov.w	r2, #32
   1902a:	f3ef 8511 	mrs	r5, BASEPRI
   1902e:	f382 8811 	msr	BASEPRI, r2
   19032:	f3bf 8f6f 	isb	sy
   19036:	b98b      	cbnz	r3, 1905c <z_unpend_first_thread+0x68>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   19038:	4620      	mov	r0, r4
   1903a:	f7ff fed1 	bl	18de0 <pended_on>
   1903e:	4621      	mov	r1, r4
   19040:	f7fb fb7a 	bl	14738 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   19044:	7b63      	ldrb	r3, [r4, #13]
   19046:	f023 0302 	bic.w	r3, r3, #2
   1904a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1904c:	2300      	movs	r3, #0
   1904e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   19050:	f385 8811 	msr	BASEPRI, r5
   19054:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   19058:	2301      	movs	r3, #1
   1905a:	e7ec      	b.n	19036 <z_unpend_first_thread+0x42>
	if (thread != NULL) {
   1905c:	b11c      	cbz	r4, 19066 <z_unpend_first_thread+0x72>
   1905e:	f104 0018 	add.w	r0, r4, #24
   19062:	f000 f880 	bl	19166 <z_abort_timeout>
}
   19066:	4620      	mov	r0, r4
   19068:	bd70      	pop	{r4, r5, r6, pc}

0001906a <z_unpend_all>:
{
   1906a:	b538      	push	{r3, r4, r5, lr}
   1906c:	4605      	mov	r5, r0
	int need_sched = 0;
   1906e:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   19070:	e006      	b.n	19080 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   19072:	4620      	mov	r0, r4
   19074:	f7ff ff04 	bl	18e80 <z_unpend_thread>
		z_ready_thread(thread);
   19078:	4620      	mov	r0, r4
   1907a:	f7ff ff2b 	bl	18ed4 <z_ready_thread>
		need_sched = 1;
   1907e:	2001      	movs	r0, #1
	return list->head == list;
   19080:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19082:	42a5      	cmp	r5, r4
   19084:	d001      	beq.n	1908a <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   19086:	2c00      	cmp	r4, #0
   19088:	d1f3      	bne.n	19072 <z_unpend_all+0x8>
}
   1908a:	bd38      	pop	{r3, r4, r5, pc}

0001908c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1908c:	b13a      	cbz	r2, 1909e <z_impl_k_sem_init+0x12>
   1908e:	428a      	cmp	r2, r1
   19090:	d308      	bcc.n	190a4 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   19092:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   19094:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   19096:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   19098:	6040      	str	r0, [r0, #4]
	return 0;
   1909a:	2000      	movs	r0, #0
   1909c:	4770      	bx	lr
		return -EINVAL;
   1909e:	f06f 0015 	mvn.w	r0, #21
   190a2:	4770      	bx	lr
   190a4:	f06f 0015 	mvn.w	r0, #21
}
   190a8:	4770      	bx	lr

000190aa <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   190aa:	3207      	adds	r2, #7
   190ac:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   190b0:	6681      	str	r1, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
   190b2:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   190b4:	2300      	movs	r3, #0
   190b6:	6703      	str	r3, [r0, #112]	; 0x70
}
   190b8:	1888      	adds	r0, r1, r2
   190ba:	4770      	bx	lr

000190bc <k_is_in_isr>:
   190bc:	f3ef 8005 	mrs	r0, IPSR
}
   190c0:	3800      	subs	r0, #0
   190c2:	bf18      	it	ne
   190c4:	2001      	movne	r0, #1
   190c6:	4770      	bx	lr

000190c8 <z_impl_k_busy_wait>:
{
   190c8:	b508      	push	{r3, lr}
	arch_busy_wait(usec_to_wait);
   190ca:	f7f4 fad1 	bl	d670 <arch_busy_wait>
}
   190ce:	bd08      	pop	{r3, pc}

000190d0 <z_impl_k_thread_name_set>:
}
   190d0:	f06f 0046 	mvn.w	r0, #70	; 0x46
   190d4:	4770      	bx	lr

000190d6 <k_thread_name_get>:
}
   190d6:	2000      	movs	r0, #0
   190d8:	4770      	bx	lr

000190da <z_impl_k_thread_start>:
{
   190da:	b508      	push	{r3, lr}
	z_sched_start(thread);
   190dc:	f7fb fbd0 	bl	14880 <z_sched_start>
}
   190e0:	bd08      	pop	{r3, pc}

000190e2 <z_init_thread_base>:
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   190e2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   190e4:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   190e6:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   190e8:	2300      	movs	r3, #0
   190ea:	73c3      	strb	r3, [r0, #15]
	node->next = NULL;
   190ec:	6183      	str	r3, [r0, #24]
	node->prev = NULL;
   190ee:	61c3      	str	r3, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   190f0:	4770      	bx	lr

000190f2 <z_impl_k_thread_create>:
{
   190f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   190f4:	b087      	sub	sp, #28
   190f6:	4604      	mov	r4, r0
   190f8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   190fc:	2500      	movs	r5, #0
   190fe:	9505      	str	r5, [sp, #20]
   19100:	9d10      	ldr	r5, [sp, #64]	; 0x40
   19102:	9504      	str	r5, [sp, #16]
   19104:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   19106:	9503      	str	r5, [sp, #12]
   19108:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1910a:	9502      	str	r5, [sp, #8]
   1910c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1910e:	9501      	str	r5, [sp, #4]
   19110:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   19112:	9500      	str	r5, [sp, #0]
   19114:	f7fb feca 	bl	14eac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   19118:	f1b7 3fff 	cmp.w	r7, #4294967295
   1911c:	bf08      	it	eq
   1911e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   19122:	d102      	bne.n	1912a <z_impl_k_thread_create+0x38>
}
   19124:	4620      	mov	r0, r4
   19126:	b007      	add	sp, #28
   19128:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   1912a:	4632      	mov	r2, r6
   1912c:	463b      	mov	r3, r7
   1912e:	4620      	mov	r0, r4
   19130:	f7fb feaa 	bl	14e88 <schedule_new_thread>
   19134:	e7f6      	b.n	19124 <z_impl_k_thread_create+0x32>

00019136 <remove_timeout>:
{
   19136:	b538      	push	{r3, r4, r5, lr}
   19138:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   1913a:	f7fb ff3f 	bl	14fbc <next>
   1913e:	b148      	cbz	r0, 19154 <remove_timeout+0x1e>
   19140:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   19142:	6920      	ldr	r0, [r4, #16]
   19144:	6965      	ldr	r5, [r4, #20]
   19146:	6913      	ldr	r3, [r2, #16]
   19148:	6951      	ldr	r1, [r2, #20]
   1914a:	181b      	adds	r3, r3, r0
   1914c:	eb45 0101 	adc.w	r1, r5, r1
   19150:	6113      	str	r3, [r2, #16]
   19152:	6151      	str	r1, [r2, #20]
	node->prev->next = node->next;
   19154:	6862      	ldr	r2, [r4, #4]
   19156:	6823      	ldr	r3, [r4, #0]
   19158:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1915a:	6862      	ldr	r2, [r4, #4]
   1915c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1915e:	2300      	movs	r3, #0
   19160:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   19162:	6063      	str	r3, [r4, #4]
}
   19164:	bd38      	pop	{r3, r4, r5, pc}

00019166 <z_abort_timeout>:
{
   19166:	b570      	push	{r4, r5, r6, lr}
   19168:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   1916a:	2300      	movs	r3, #0
	__asm__ volatile(
   1916c:	f04f 0220 	mov.w	r2, #32
   19170:	f3ef 8611 	mrs	r6, BASEPRI
   19174:	f382 8811 	msr	BASEPRI, r2
   19178:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   1917c:	f06f 0015 	mvn.w	r0, #21
   19180:	e008      	b.n	19194 <z_abort_timeout+0x2e>
			remove_timeout(to);
   19182:	4620      	mov	r0, r4
   19184:	f7ff ffd7 	bl	19136 <remove_timeout>
			ret = 0;
   19188:	4628      	mov	r0, r5
	__asm__ volatile(
   1918a:	f386 8811 	msr	BASEPRI, r6
   1918e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   19192:	2301      	movs	r3, #1
   19194:	461d      	mov	r5, r3
   19196:	b91b      	cbnz	r3, 191a0 <z_abort_timeout+0x3a>
	return node->next != NULL;
   19198:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   1919a:	2b00      	cmp	r3, #0
   1919c:	d1f1      	bne.n	19182 <z_abort_timeout+0x1c>
   1919e:	e7f4      	b.n	1918a <z_abort_timeout+0x24>
}
   191a0:	bd70      	pop	{r4, r5, r6, pc}

000191a2 <z_get_next_timeout_expiry>:
{
   191a2:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   191a4:	2300      	movs	r3, #0
	__asm__ volatile(
   191a6:	f04f 0220 	mov.w	r2, #32
   191aa:	f3ef 8411 	mrs	r4, BASEPRI
   191ae:	f382 8811 	msr	BASEPRI, r2
   191b2:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   191b6:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   191ba:	b93b      	cbnz	r3, 191cc <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   191bc:	f7fb ff16 	bl	14fec <next_timeout>
	__asm__ volatile(
   191c0:	f384 8811 	msr	BASEPRI, r4
   191c4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   191c8:	2301      	movs	r3, #1
   191ca:	e7f6      	b.n	191ba <z_get_next_timeout_expiry+0x18>
}
   191cc:	bd10      	pop	{r4, pc}

000191ce <z_set_timeout_expiry>:
{
   191ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191d0:	4606      	mov	r6, r0
   191d2:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   191d4:	2300      	movs	r3, #0
	__asm__ volatile(
   191d6:	f04f 0220 	mov.w	r2, #32
   191da:	f3ef 8511 	mrs	r5, BASEPRI
   191de:	f382 8811 	msr	BASEPRI, r2
   191e2:	f3bf 8f6f 	isb	sy
   191e6:	e00a      	b.n	191fe <z_set_timeout_expiry+0x30>
			      || (ticks < next_to);
   191e8:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   191ea:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   191ee:	2801      	cmp	r0, #1
   191f0:	dd00      	ble.n	191f4 <z_set_timeout_expiry+0x26>
   191f2:	b97c      	cbnz	r4, 19214 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   191f4:	f385 8811 	msr	BASEPRI, r5
   191f8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   191fc:	2301      	movs	r3, #1
   191fe:	461c      	mov	r4, r3
   19200:	b96b      	cbnz	r3, 1921e <z_set_timeout_expiry+0x50>
		int next_to = next_timeout();
   19202:	f7fb fef3 	bl	14fec <next_timeout>
			      || (ticks < next_to);
   19206:	f1b0 3fff 	cmp.w	r0, #4294967295
   1920a:	d0ed      	beq.n	191e8 <z_set_timeout_expiry+0x1a>
   1920c:	42b0      	cmp	r0, r6
   1920e:	ddec      	ble.n	191ea <z_set_timeout_expiry+0x1c>
   19210:	2401      	movs	r4, #1
   19212:	e7ea      	b.n	191ea <z_set_timeout_expiry+0x1c>
			z_clock_set_timeout(ticks, is_idle);
   19214:	4639      	mov	r1, r7
   19216:	4630      	mov	r0, r6
   19218:	f7f5 fbda 	bl	e9d0 <z_clock_set_timeout>
   1921c:	e7ea      	b.n	191f4 <z_set_timeout_expiry+0x26>
}
   1921e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019220 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   19220:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   19222:	f7fb fffb 	bl	1521c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   19226:	bd08      	pop	{r3, pc}

00019228 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   19228:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1922a:	f1b1 3fff 	cmp.w	r1, #4294967295
   1922e:	bf08      	it	eq
   19230:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   19234:	d015      	beq.n	19262 <z_timeout_end_calc+0x3a>
   19236:	4604      	mov	r4, r0
   19238:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1923a:	ea54 0105 	orrs.w	r1, r4, r5
   1923e:	d00d      	beq.n	1925c <z_timeout_end_calc+0x34>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	dt = k_ms_to_ticks_ceil32(timeout);
#else
	dt = timeout.ticks;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   19240:	f06f 0101 	mvn.w	r1, #1
   19244:	1a0a      	subs	r2, r1, r0
   19246:	f04f 31ff 	mov.w	r1, #4294967295
   1924a:	eb61 0305 	sbc.w	r3, r1, r5
   1924e:	2a00      	cmp	r2, #0
   19250:	f173 0100 	sbcs.w	r1, r3, #0
   19254:	db09      	blt.n	1926a <z_timeout_end_calc+0x42>
		return Z_TICK_ABS(dt);
   19256:	4610      	mov	r0, r2
   19258:	4619      	mov	r1, r3
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   1925a:	bd38      	pop	{r3, r4, r5, pc}
		return z_tick_get();
   1925c:	f7fb ffde 	bl	1521c <z_tick_get>
   19260:	e7fb      	b.n	1925a <z_timeout_end_calc+0x32>
		return UINT64_MAX;
   19262:	f04f 30ff 	mov.w	r0, #4294967295
   19266:	4601      	mov	r1, r0
   19268:	e7f7      	b.n	1925a <z_timeout_end_calc+0x32>
	return z_tick_get() + MAX(1, dt);
   1926a:	f7fb ffd7 	bl	1521c <z_tick_get>
   1926e:	4623      	mov	r3, r4
   19270:	462a      	mov	r2, r5
   19272:	2c01      	cmp	r4, #1
   19274:	f175 0400 	sbcs.w	r4, r5, #0
   19278:	db03      	blt.n	19282 <z_timeout_end_calc+0x5a>
   1927a:	18c0      	adds	r0, r0, r3
   1927c:	eb42 0101 	adc.w	r1, r2, r1
   19280:	e7eb      	b.n	1925a <z_timeout_end_calc+0x32>
   19282:	2301      	movs	r3, #1
   19284:	2200      	movs	r2, #0
   19286:	e7f8      	b.n	1927a <z_timeout_end_calc+0x52>

00019288 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   19288:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   1928a:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   1928c:	2300      	movs	r3, #0
   1928e:	6303      	str	r3, [r0, #48]	; 0x30
   19290:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   19294:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   19296:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   19298:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1929a:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   1929c:	6343      	str	r3, [r0, #52]	; 0x34
}
   1929e:	4770      	bx	lr

000192a0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   192a0:	b510      	push	{r4, lr}
   192a2:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   192a4:	f7ff ff5f 	bl	19166 <z_abort_timeout>

	if (inactive) {
   192a8:	b9d0      	cbnz	r0, 192e0 <z_impl_k_timer_stop+0x40>
		return;
	}

	if (timer->stop_fn != NULL) {
   192aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   192ac:	b10b      	cbz	r3, 192b2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   192ae:	4620      	mov	r0, r4
   192b0:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   192b2:	2100      	movs	r1, #0
   192b4:	f104 0018 	add.w	r0, r4, #24
   192b8:	f7ff fd9e 	bl	18df8 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   192bc:	4604      	mov	r4, r0
   192be:	b108      	cbz	r0, 192c4 <z_impl_k_timer_stop+0x24>
		z_unpend_thread_no_timeout(thread);
   192c0:	f7ff fdb1 	bl	18e26 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
   192c4:	b164      	cbz	r4, 192e0 <z_impl_k_timer_stop+0x40>
		z_ready_thread(pending_thread);
   192c6:	4620      	mov	r0, r4
   192c8:	f7ff fe04 	bl	18ed4 <z_ready_thread>
	__asm__ volatile(
   192cc:	f04f 0320 	mov.w	r3, #32
   192d0:	f3ef 8011 	mrs	r0, BASEPRI
   192d4:	f383 8811 	msr	BASEPRI, r3
   192d8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   192dc:	f7ff fdc2 	bl	18e64 <z_reschedule_irqlock>
		z_reschedule_unlocked();
	}
}
   192e0:	bd10      	pop	{r4, pc}

000192e2 <k_mem_pool_free>:
#include <kernel.h>
#include <string.h>
#include <sys/math_extras.h>

void k_mem_pool_free(struct k_mem_block *block)
{
   192e2:	b508      	push	{r3, lr}
	k_mem_pool_free_id(&block->id);
   192e4:	f7ff fd36 	bl	18d54 <k_mem_pool_free_id>
}
   192e8:	bd08      	pop	{r3, pc}

000192ea <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   192ea:	4770      	bx	lr
