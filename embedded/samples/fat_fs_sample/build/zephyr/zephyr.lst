
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	20011260 	.word	0x20011260
    c004:	0000de75 	.word	0x0000de75
    c008:	000127ff 	.word	0x000127ff
    c00c:	0000dea5 	.word	0x0000dea5
    c010:	0000dea5 	.word	0x0000dea5
    c014:	0000dea5 	.word	0x0000dea5
    c018:	0000dea5 	.word	0x0000dea5
    c01c:	0000dea5 	.word	0x0000dea5
	...
    c02c:	0000dc49 	.word	0x0000dc49
    c030:	0000dea5 	.word	0x0000dea5
    c034:	00000000 	.word	0x00000000
    c038:	0000dbf1 	.word	0x0000dbf1
    c03c:	000127e3 	.word	0x000127e3

0000c040 <_irq_vector_table>:
    c040:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c050:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c060:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c070:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c080:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c090:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c0a0:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c0b0:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c0c0:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c0d0:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c0e0:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c0f0:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c100:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c110:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c120:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c130:	0000de35 0000de35 0000de35 0000de35     5...5...5...5...
    c140:	0000de35                                5...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00009308 00000001 0000c000 0000c000     ................
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c23c <__aeabi_uldivmod>:
    c23c:	b953      	cbnz	r3, c254 <__aeabi_uldivmod+0x18>
    c23e:	b94a      	cbnz	r2, c254 <__aeabi_uldivmod+0x18>
    c240:	2900      	cmp	r1, #0
    c242:	bf08      	it	eq
    c244:	2800      	cmpeq	r0, #0
    c246:	bf1c      	itt	ne
    c248:	f04f 31ff 	movne.w	r1, #4294967295
    c24c:	f04f 30ff 	movne.w	r0, #4294967295
    c250:	f000 b970 	b.w	c534 <__aeabi_idiv0>
    c254:	f1ad 0c08 	sub.w	ip, sp, #8
    c258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c25c:	f000 f806 	bl	c26c <__udivmoddi4>
    c260:	f8dd e004 	ldr.w	lr, [sp, #4]
    c264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c268:	b004      	add	sp, #16
    c26a:	4770      	bx	lr

0000c26c <__udivmoddi4>:
    c26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c270:	9e08      	ldr	r6, [sp, #32]
    c272:	460d      	mov	r5, r1
    c274:	4604      	mov	r4, r0
    c276:	468a      	mov	sl, r1
    c278:	2b00      	cmp	r3, #0
    c27a:	d17f      	bne.n	c37c <__udivmoddi4+0x110>
    c27c:	428a      	cmp	r2, r1
    c27e:	4617      	mov	r7, r2
    c280:	d941      	bls.n	c306 <__udivmoddi4+0x9a>
    c282:	fab2 f282 	clz	r2, r2
    c286:	b14a      	cbz	r2, c29c <__udivmoddi4+0x30>
    c288:	f1c2 0120 	rsb	r1, r2, #32
    c28c:	fa05 f302 	lsl.w	r3, r5, r2
    c290:	4097      	lsls	r7, r2
    c292:	4094      	lsls	r4, r2
    c294:	fa20 f101 	lsr.w	r1, r0, r1
    c298:	ea41 0a03 	orr.w	sl, r1, r3
    c29c:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c2a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c2a4:	fa1f f987 	uxth.w	r9, r7
    c2a8:	fbba fef8 	udiv	lr, sl, r8
    c2ac:	fb08 a31e 	mls	r3, r8, lr, sl
    c2b0:	fb0e f109 	mul.w	r1, lr, r9
    c2b4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    c2b8:	4299      	cmp	r1, r3
    c2ba:	d906      	bls.n	c2ca <__udivmoddi4+0x5e>
    c2bc:	18fb      	adds	r3, r7, r3
    c2be:	d202      	bcs.n	c2c6 <__udivmoddi4+0x5a>
    c2c0:	4299      	cmp	r1, r3
    c2c2:	f200 8124 	bhi.w	c50e <__udivmoddi4+0x2a2>
    c2c6:	f10e 3eff 	add.w	lr, lr, #4294967295
    c2ca:	1a59      	subs	r1, r3, r1
    c2cc:	b2a3      	uxth	r3, r4
    c2ce:	fbb1 f0f8 	udiv	r0, r1, r8
    c2d2:	fb08 1110 	mls	r1, r8, r0, r1
    c2d6:	fb00 f909 	mul.w	r9, r0, r9
    c2da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2de:	45a1      	cmp	r9, r4
    c2e0:	d905      	bls.n	c2ee <__udivmoddi4+0x82>
    c2e2:	193c      	adds	r4, r7, r4
    c2e4:	d202      	bcs.n	c2ec <__udivmoddi4+0x80>
    c2e6:	45a1      	cmp	r9, r4
    c2e8:	f200 810e 	bhi.w	c508 <__udivmoddi4+0x29c>
    c2ec:	3801      	subs	r0, #1
    c2ee:	eba4 0409 	sub.w	r4, r4, r9
    c2f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c2f6:	2100      	movs	r1, #0
    c2f8:	b11e      	cbz	r6, c302 <__udivmoddi4+0x96>
    c2fa:	40d4      	lsrs	r4, r2
    c2fc:	2300      	movs	r3, #0
    c2fe:	e9c6 4300 	strd	r4, r3, [r6]
    c302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c306:	b902      	cbnz	r2, c30a <__udivmoddi4+0x9e>
    c308:	deff      	udf	#255	; 0xff
    c30a:	fab2 f282 	clz	r2, r2
    c30e:	2a00      	cmp	r2, #0
    c310:	d14f      	bne.n	c3b2 <__udivmoddi4+0x146>
    c312:	1bcb      	subs	r3, r1, r7
    c314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c318:	fa1f f887 	uxth.w	r8, r7
    c31c:	2101      	movs	r1, #1
    c31e:	0c25      	lsrs	r5, r4, #16
    c320:	fbb3 fcfe 	udiv	ip, r3, lr
    c324:	fb0e 301c 	mls	r0, lr, ip, r3
    c328:	462b      	mov	r3, r5
    c32a:	fb08 f90c 	mul.w	r9, r8, ip
    c32e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    c332:	45a9      	cmp	r9, r5
    c334:	d90a      	bls.n	c34c <__udivmoddi4+0xe0>
    c336:	197d      	adds	r5, r7, r5
    c338:	bf2c      	ite	cs
    c33a:	2301      	movcs	r3, #1
    c33c:	2300      	movcc	r3, #0
    c33e:	45a9      	cmp	r9, r5
    c340:	d902      	bls.n	c348 <__udivmoddi4+0xdc>
    c342:	2b00      	cmp	r3, #0
    c344:	f000 80d9 	beq.w	c4fa <__udivmoddi4+0x28e>
    c348:	f10c 3cff 	add.w	ip, ip, #4294967295
    c34c:	eba5 0509 	sub.w	r5, r5, r9
    c350:	b2a3      	uxth	r3, r4
    c352:	fbb5 f0fe 	udiv	r0, r5, lr
    c356:	fb0e 5510 	mls	r5, lr, r0, r5
    c35a:	fb08 f800 	mul.w	r8, r8, r0
    c35e:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    c362:	45a0      	cmp	r8, r4
    c364:	d905      	bls.n	c372 <__udivmoddi4+0x106>
    c366:	193c      	adds	r4, r7, r4
    c368:	d202      	bcs.n	c370 <__udivmoddi4+0x104>
    c36a:	45a0      	cmp	r8, r4
    c36c:	f200 80c9 	bhi.w	c502 <__udivmoddi4+0x296>
    c370:	3801      	subs	r0, #1
    c372:	eba4 0408 	sub.w	r4, r4, r8
    c376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c37a:	e7bd      	b.n	c2f8 <__udivmoddi4+0x8c>
    c37c:	428b      	cmp	r3, r1
    c37e:	d908      	bls.n	c392 <__udivmoddi4+0x126>
    c380:	2e00      	cmp	r6, #0
    c382:	f000 80b1 	beq.w	c4e8 <__udivmoddi4+0x27c>
    c386:	2100      	movs	r1, #0
    c388:	e9c6 0500 	strd	r0, r5, [r6]
    c38c:	4608      	mov	r0, r1
    c38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c392:	fab3 f183 	clz	r1, r3
    c396:	2900      	cmp	r1, #0
    c398:	d146      	bne.n	c428 <__udivmoddi4+0x1bc>
    c39a:	42ab      	cmp	r3, r5
    c39c:	f0c0 80a7 	bcc.w	c4ee <__udivmoddi4+0x282>
    c3a0:	4282      	cmp	r2, r0
    c3a2:	f240 80a4 	bls.w	c4ee <__udivmoddi4+0x282>
    c3a6:	4608      	mov	r0, r1
    c3a8:	2e00      	cmp	r6, #0
    c3aa:	d0aa      	beq.n	c302 <__udivmoddi4+0x96>
    c3ac:	e9c6 4a00 	strd	r4, sl, [r6]
    c3b0:	e7a7      	b.n	c302 <__udivmoddi4+0x96>
    c3b2:	f1c2 0020 	rsb	r0, r2, #32
    c3b6:	4097      	lsls	r7, r2
    c3b8:	fa01 f302 	lsl.w	r3, r1, r2
    c3bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c3c0:	40c1      	lsrs	r1, r0
    c3c2:	fa24 f500 	lsr.w	r5, r4, r0
    c3c6:	fa1f f887 	uxth.w	r8, r7
    c3ca:	4094      	lsls	r4, r2
    c3cc:	431d      	orrs	r5, r3
    c3ce:	fbb1 f0fe 	udiv	r0, r1, lr
    c3d2:	0c2b      	lsrs	r3, r5, #16
    c3d4:	fb0e 1110 	mls	r1, lr, r0, r1
    c3d8:	fb00 fc08 	mul.w	ip, r0, r8
    c3dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c3e0:	459c      	cmp	ip, r3
    c3e2:	d909      	bls.n	c3f8 <__udivmoddi4+0x18c>
    c3e4:	18fb      	adds	r3, r7, r3
    c3e6:	bf2c      	ite	cs
    c3e8:	2101      	movcs	r1, #1
    c3ea:	2100      	movcc	r1, #0
    c3ec:	459c      	cmp	ip, r3
    c3ee:	d902      	bls.n	c3f6 <__udivmoddi4+0x18a>
    c3f0:	2900      	cmp	r1, #0
    c3f2:	f000 8095 	beq.w	c520 <__udivmoddi4+0x2b4>
    c3f6:	3801      	subs	r0, #1
    c3f8:	eba3 030c 	sub.w	r3, r3, ip
    c3fc:	b2ad      	uxth	r5, r5
    c3fe:	fbb3 f1fe 	udiv	r1, r3, lr
    c402:	fb0e 3311 	mls	r3, lr, r1, r3
    c406:	fb01 fc08 	mul.w	ip, r1, r8
    c40a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    c40e:	45ac      	cmp	ip, r5
    c410:	d905      	bls.n	c41e <__udivmoddi4+0x1b2>
    c412:	197d      	adds	r5, r7, r5
    c414:	d202      	bcs.n	c41c <__udivmoddi4+0x1b0>
    c416:	45ac      	cmp	ip, r5
    c418:	f200 8089 	bhi.w	c52e <__udivmoddi4+0x2c2>
    c41c:	3901      	subs	r1, #1
    c41e:	eba5 030c 	sub.w	r3, r5, ip
    c422:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c426:	e77a      	b.n	c31e <__udivmoddi4+0xb2>
    c428:	f1c1 0420 	rsb	r4, r1, #32
    c42c:	408b      	lsls	r3, r1
    c42e:	fa02 f701 	lsl.w	r7, r2, r1
    c432:	fa05 fc01 	lsl.w	ip, r5, r1
    c436:	40e2      	lsrs	r2, r4
    c438:	fa20 f804 	lsr.w	r8, r0, r4
    c43c:	40e5      	lsrs	r5, r4
    c43e:	fa00 fe01 	lsl.w	lr, r0, r1
    c442:	4313      	orrs	r3, r2
    c444:	ea48 020c 	orr.w	r2, r8, ip
    c448:	ea4f 4813 	mov.w	r8, r3, lsr #16
    c44c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    c450:	fa1f f983 	uxth.w	r9, r3
    c454:	fbb5 faf8 	udiv	sl, r5, r8
    c458:	fb08 551a 	mls	r5, r8, sl, r5
    c45c:	fb0a f009 	mul.w	r0, sl, r9
    c460:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
    c464:	4560      	cmp	r0, ip
    c466:	d90a      	bls.n	c47e <__udivmoddi4+0x212>
    c468:	eb13 0c0c 	adds.w	ip, r3, ip
    c46c:	bf2c      	ite	cs
    c46e:	2501      	movcs	r5, #1
    c470:	2500      	movcc	r5, #0
    c472:	4560      	cmp	r0, ip
    c474:	d901      	bls.n	c47a <__udivmoddi4+0x20e>
    c476:	2d00      	cmp	r5, #0
    c478:	d055      	beq.n	c526 <__udivmoddi4+0x2ba>
    c47a:	f10a 3aff 	add.w	sl, sl, #4294967295
    c47e:	ebac 0c00 	sub.w	ip, ip, r0
    c482:	b292      	uxth	r2, r2
    c484:	fbbc f0f8 	udiv	r0, ip, r8
    c488:	fb08 cc10 	mls	ip, r8, r0, ip
    c48c:	fb00 f909 	mul.w	r9, r0, r9
    c490:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c494:	45e1      	cmp	r9, ip
    c496:	d905      	bls.n	c4a4 <__udivmoddi4+0x238>
    c498:	eb13 0c0c 	adds.w	ip, r3, ip
    c49c:	d201      	bcs.n	c4a2 <__udivmoddi4+0x236>
    c49e:	45e1      	cmp	r9, ip
    c4a0:	d83b      	bhi.n	c51a <__udivmoddi4+0x2ae>
    c4a2:	3801      	subs	r0, #1
    c4a4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c4a8:	ebac 0c09 	sub.w	ip, ip, r9
    c4ac:	fba0 8907 	umull	r8, r9, r0, r7
    c4b0:	45cc      	cmp	ip, r9
    c4b2:	4645      	mov	r5, r8
    c4b4:	464a      	mov	r2, r9
    c4b6:	d302      	bcc.n	c4be <__udivmoddi4+0x252>
    c4b8:	d106      	bne.n	c4c8 <__udivmoddi4+0x25c>
    c4ba:	45c6      	cmp	lr, r8
    c4bc:	d204      	bcs.n	c4c8 <__udivmoddi4+0x25c>
    c4be:	3801      	subs	r0, #1
    c4c0:	ebb8 0507 	subs.w	r5, r8, r7
    c4c4:	eb69 0203 	sbc.w	r2, r9, r3
    c4c8:	b32e      	cbz	r6, c516 <__udivmoddi4+0x2aa>
    c4ca:	ebbe 0305 	subs.w	r3, lr, r5
    c4ce:	eb6c 0c02 	sbc.w	ip, ip, r2
    c4d2:	fa23 f201 	lsr.w	r2, r3, r1
    c4d6:	fa0c f404 	lsl.w	r4, ip, r4
    c4da:	fa2c f301 	lsr.w	r3, ip, r1
    c4de:	2100      	movs	r1, #0
    c4e0:	4314      	orrs	r4, r2
    c4e2:	e9c6 4300 	strd	r4, r3, [r6]
    c4e6:	e70c      	b.n	c302 <__udivmoddi4+0x96>
    c4e8:	4631      	mov	r1, r6
    c4ea:	4630      	mov	r0, r6
    c4ec:	e709      	b.n	c302 <__udivmoddi4+0x96>
    c4ee:	1a84      	subs	r4, r0, r2
    c4f0:	eb65 0303 	sbc.w	r3, r5, r3
    c4f4:	2001      	movs	r0, #1
    c4f6:	469a      	mov	sl, r3
    c4f8:	e756      	b.n	c3a8 <__udivmoddi4+0x13c>
    c4fa:	f1ac 0c02 	sub.w	ip, ip, #2
    c4fe:	443d      	add	r5, r7
    c500:	e724      	b.n	c34c <__udivmoddi4+0xe0>
    c502:	3802      	subs	r0, #2
    c504:	443c      	add	r4, r7
    c506:	e734      	b.n	c372 <__udivmoddi4+0x106>
    c508:	3802      	subs	r0, #2
    c50a:	443c      	add	r4, r7
    c50c:	e6ef      	b.n	c2ee <__udivmoddi4+0x82>
    c50e:	f1ae 0e02 	sub.w	lr, lr, #2
    c512:	443b      	add	r3, r7
    c514:	e6d9      	b.n	c2ca <__udivmoddi4+0x5e>
    c516:	4631      	mov	r1, r6
    c518:	e6f3      	b.n	c302 <__udivmoddi4+0x96>
    c51a:	3802      	subs	r0, #2
    c51c:	449c      	add	ip, r3
    c51e:	e7c1      	b.n	c4a4 <__udivmoddi4+0x238>
    c520:	3802      	subs	r0, #2
    c522:	443b      	add	r3, r7
    c524:	e768      	b.n	c3f8 <__udivmoddi4+0x18c>
    c526:	f1aa 0a02 	sub.w	sl, sl, #2
    c52a:	449c      	add	ip, r3
    c52c:	e7a7      	b.n	c47e <__udivmoddi4+0x212>
    c52e:	3902      	subs	r1, #2
    c530:	443d      	add	r5, r7
    c532:	e774      	b.n	c41e <__udivmoddi4+0x1b2>

0000c534 <__aeabi_idiv0>:
    c534:	4770      	bx	lr
    c536:	bf00      	nop

0000c538 <main>:
*  in ffconf.h
*/
static const char *disk_mount_pt = "/SD:";

void main(void)
{
    c538:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		static const char *disk_pdrv = "SD";
		uint64_t memory_size_mb;
		uint32_t block_count;
		uint32_t block_size;

		if (disk_access_init(disk_pdrv) != 0) {
    c53a:	483a      	ldr	r0, [pc, #232]	; (c624 <main+0xec>)
    c53c:	f006 f863 	bl	12606 <disk_access_init>
    c540:	4c39      	ldr	r4, [pc, #228]	; (c628 <main+0xf0>)
    c542:	4b3a      	ldr	r3, [pc, #232]	; (c62c <main+0xf4>)
    c544:	1ae4      	subs	r4, r4, r3
    c546:	08e4      	lsrs	r4, r4, #3
    c548:	01a4      	lsls	r4, r4, #6
    c54a:	b1f0      	cbz	r0, c58a <main+0x52>
			LOG_ERR("Storage init ERROR!");
    c54c:	4838      	ldr	r0, [pc, #224]	; (c630 <main+0xf8>)
    c54e:	f044 0101 	orr.w	r1, r4, #1
		}
		LOG_INF("Block count %u", block_count);

		if (disk_access_ioctl(disk_pdrv,
				DISK_IOCTL_GET_SECTOR_SIZE, &block_size)) {
			LOG_ERR("Unable to get sector size");
    c552:	f005 fddb 	bl	1210c <log_0>

		memory_size_mb = (uint64_t)block_count * block_size;
		printk("Memory Size(MB) %u\n", (uint32_t)(memory_size_mb >> 20));
	} while (0);

	mp.mnt_point = disk_mount_pt;
    c556:	4837      	ldr	r0, [pc, #220]	; (c634 <main+0xfc>)
    c558:	4c37      	ldr	r4, [pc, #220]	; (c638 <main+0x100>)
    c55a:	60c4      	str	r4, [r0, #12]

	int res = fs_mount(&mp);
    c55c:	f002 fa5c 	bl	ea18 <fs_mount>

	if (res == FR_OK) {
    c560:	2800      	cmp	r0, #0
    c562:	d15a      	bne.n	c61a <main+0xe2>
		printk("Disk mounted.\n");
    c564:	4835      	ldr	r0, [pc, #212]	; (c63c <main+0x104>)
    c566:	f005 fbe0 	bl	11d2a <printk>
	int res;
	struct fs_dir_t dirp;
	static struct fs_dirent entry;

	/* Verify fs_opendir() */
	res = fs_opendir(&dirp, path);
    c56a:	4621      	mov	r1, r4
    c56c:	a802      	add	r0, sp, #8
    c56e:	f002 f945 	bl	e7fc <fs_opendir>
	if (res) {
		printk("Error opening dir %s [%d]\n", path, res);
    c572:	4621      	mov	r1, r4
	if (res) {
    c574:	4602      	mov	r2, r0
    c576:	b388      	cbz	r0, c5dc <main+0xa4>
		printk("Error opening dir %s [%d]\n", path, res);
    c578:	4831      	ldr	r0, [pc, #196]	; (c640 <main+0x108>)
    c57a:	f005 fbd6 	bl	11d2a <printk>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    c57e:	2100      	movs	r1, #0
    c580:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c584:	f005 f888 	bl	11698 <z_impl_k_sleep>
	while (1) {
    c588:	e7f9      	b.n	c57e <main+0x46>
		if (disk_access_ioctl(disk_pdrv,
    c58a:	2101      	movs	r1, #1
    c58c:	4825      	ldr	r0, [pc, #148]	; (c624 <main+0xec>)
    c58e:	aa01      	add	r2, sp, #4
    c590:	f006 f883 	bl	1269a <disk_access_ioctl>
    c594:	b118      	cbz	r0, c59e <main+0x66>
			LOG_ERR("Unable to get sector count");
    c596:	482b      	ldr	r0, [pc, #172]	; (c644 <main+0x10c>)
    c598:	f044 0101 	orr.w	r1, r4, #1
    c59c:	e7d9      	b.n	c552 <main+0x1a>
		LOG_INF("Block count %u", block_count);
    c59e:	9901      	ldr	r1, [sp, #4]
    c5a0:	4829      	ldr	r0, [pc, #164]	; (c648 <main+0x110>)
    c5a2:	f044 0203 	orr.w	r2, r4, #3
    c5a6:	f005 fdbe 	bl	12126 <log_1>
		if (disk_access_ioctl(disk_pdrv,
    c5aa:	2102      	movs	r1, #2
    c5ac:	481d      	ldr	r0, [pc, #116]	; (c624 <main+0xec>)
    c5ae:	aa02      	add	r2, sp, #8
    c5b0:	f006 f873 	bl	1269a <disk_access_ioctl>
    c5b4:	b118      	cbz	r0, c5be <main+0x86>
			LOG_ERR("Unable to get sector size");
    c5b6:	4825      	ldr	r0, [pc, #148]	; (c64c <main+0x114>)
    c5b8:	f044 0101 	orr.w	r1, r4, #1
    c5bc:	e7c9      	b.n	c552 <main+0x1a>
		printk("Sector size %u\n", block_size);
    c5be:	9902      	ldr	r1, [sp, #8]
    c5c0:	4823      	ldr	r0, [pc, #140]	; (c650 <main+0x118>)
    c5c2:	f005 fbb2 	bl	11d2a <printk>
		memory_size_mb = (uint64_t)block_count * block_size;
    c5c6:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
    c5ca:	fba0 0103 	umull	r0, r1, r0, r3
		printk("Memory Size(MB) %u\n", (uint32_t)(memory_size_mb >> 20));
    c5ce:	0d03      	lsrs	r3, r0, #20
    c5d0:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    c5d4:	481f      	ldr	r0, [pc, #124]	; (c654 <main+0x11c>)
    c5d6:	f005 fba8 	bl	11d2a <printk>
    c5da:	e7bc      	b.n	c556 <main+0x1e>
		return res;
	}

	printk("\nListing dir %s ...\n", path);
    c5dc:	481e      	ldr	r0, [pc, #120]	; (c658 <main+0x120>)
    c5de:	f005 fba4 	bl	11d2a <printk>
	for (;;) {
		/* Verify fs_readdir() */
		res = fs_readdir(&dirp, &entry);
    c5e2:	4c1e      	ldr	r4, [pc, #120]	; (c65c <main+0x124>)
		}

		if (entry.type == FS_DIR_ENTRY_DIR) {
			printk("[DIR ] %s\n", entry.name);
		} else {
			printk("[FILE] %s (size = %zu)\n",
    c5e4:	4e1e      	ldr	r6, [pc, #120]	; (c660 <main+0x128>)
    c5e6:	1c65      	adds	r5, r4, #1
		res = fs_readdir(&dirp, &entry);
    c5e8:	491c      	ldr	r1, [pc, #112]	; (c65c <main+0x124>)
    c5ea:	a802      	add	r0, sp, #8
    c5ec:	f002 f970 	bl	e8d0 <fs_readdir>
		if (res || entry.name[0] == 0) {
    c5f0:	b978      	cbnz	r0, c612 <main+0xda>
    c5f2:	7863      	ldrb	r3, [r4, #1]
    c5f4:	b16b      	cbz	r3, c612 <main+0xda>
		if (entry.type == FS_DIR_ENTRY_DIR) {
    c5f6:	7823      	ldrb	r3, [r4, #0]
    c5f8:	2b01      	cmp	r3, #1
    c5fa:	d104      	bne.n	c606 <main+0xce>
			printk("[DIR ] %s\n", entry.name);
    c5fc:	4629      	mov	r1, r5
    c5fe:	4819      	ldr	r0, [pc, #100]	; (c664 <main+0x12c>)
    c600:	f005 fb93 	bl	11d2a <printk>
    c604:	e7f0      	b.n	c5e8 <main+0xb0>
			printk("[FILE] %s (size = %zu)\n",
    c606:	4629      	mov	r1, r5
    c608:	4630      	mov	r0, r6
    c60a:	6922      	ldr	r2, [r4, #16]
    c60c:	f005 fb8d 	bl	11d2a <printk>
    c610:	e7ea      	b.n	c5e8 <main+0xb0>
				entry.name, entry.size);
		}
	}

	/* Verify fs_closedir() */
	fs_closedir(&dirp);
    c612:	a802      	add	r0, sp, #8
    c614:	f002 f9dc 	bl	e9d0 <fs_closedir>

	return res;
    c618:	e7b1      	b.n	c57e <main+0x46>
		printk("Error mounting disk.\n");
    c61a:	4813      	ldr	r0, [pc, #76]	; (c668 <main+0x130>)
    c61c:	f005 fb85 	bl	11d2a <printk>
    c620:	e7ad      	b.n	c57e <main+0x46>
    c622:	bf00      	nop
    c624:	00014650 	.word	0x00014650
    c628:	000143bc 	.word	0x000143bc
    c62c:	00014394 	.word	0x00014394
    c630:	00014653 	.word	0x00014653
    c634:	20010000 	.word	0x20010000
    c638:	000146cf 	.word	0x000146cf
    c63c:	000146d4 	.word	0x000146d4
    c640:	000146e3 	.word	0x000146e3
    c644:	00014667 	.word	0x00014667
    c648:	00014682 	.word	0x00014682
    c64c:	00014691 	.word	0x00014691
    c650:	000146ab 	.word	0x000146ab
    c654:	000146bb 	.word	0x000146bb
    c658:	000146fe 	.word	0x000146fe
    c65c:	20010328 	.word	0x20010328
    c660:	0001471e 	.word	0x0001471e
    c664:	00014713 	.word	0x00014713
    c668:	00014736 	.word	0x00014736

0000c66c <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
    c66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c670:	b087      	sub	sp, #28
    c672:	460f      	mov	r7, r1
    c674:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
    c676:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
    c678:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    c67a:	2514      	movs	r5, #20
{
    c67c:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
    c67e:	4698      	mov	r8, r3
{
    c680:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    c684:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
    c688:	4c1e      	ldr	r4, [pc, #120]	; (c704 <print_digits+0x98>)
    c68a:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    c68e:	ea50 0301 	orrs.w	r3, r0, r1
    c692:	d11a      	bne.n	c6ca <print_digits+0x5e>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
    c694:	2d14      	cmp	r5, #20
		buf[i] = '0';
    c696:	bf08      	it	eq
    c698:	2330      	moveq	r3, #48	; 0x30
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    c69a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
    c69c:	bf18      	it	ne
    c69e:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    c6a0:	442c      	add	r4, r5
		buf[i] = '0';
    c6a2:	bf08      	it	eq
    c6a4:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    c6a8:	2c15      	cmp	r4, #21
    c6aa:	d01b      	beq.n	c6e4 <print_digits+0x78>
    c6ac:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
    c6ae:	2c00      	cmp	r4, #0
    c6b0:	dc1a      	bgt.n	c6e8 <print_digits+0x7c>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
    c6b2:	f81d 0005 	ldrb.w	r0, [sp, r5]
    c6b6:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
    c6b8:	3501      	adds	r5, #1
		out(buf[i], ctx);
    c6ba:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    c6bc:	2d15      	cmp	r5, #21
    c6be:	d1f8      	bne.n	c6b2 <print_digits+0x46>
	}
	for (/**/; pad > 0; pad--) {
    c6c0:	2c00      	cmp	r4, #0
    c6c2:	dc19      	bgt.n	c6f8 <print_digits+0x8c>
		out(pad_char, ctx);
	}
}
    c6c4:	b007      	add	sp, #28
    c6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
    c6ca:	4642      	mov	r2, r8
    c6cc:	464b      	mov	r3, r9
    c6ce:	f7ff fdb5 	bl	c23c <__aeabi_uldivmod>
    c6d2:	4684      	mov	ip, r0
    c6d4:	460b      	mov	r3, r1
    c6d6:	5ca2      	ldrb	r2, [r4, r2]
		num /= base;
    c6d8:	4660      	mov	r0, ip
		buf[i] = "0123456789abcdef"[num % base];
    c6da:	f80d 2005 	strb.w	r2, [sp, r5]
		num /= base;
    c6de:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    c6e0:	3d01      	subs	r5, #1
    c6e2:	e7d4      	b.n	c68e <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    c6e4:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
    c6e6:	e7e4      	b.n	c6b2 <print_digits+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
    c6e8:	f1bb 0f00 	cmp.w	fp, #0
    c6ec:	d0e1      	beq.n	c6b2 <print_digits+0x46>
		out(pad_char, ctx);
    c6ee:	4639      	mov	r1, r7
    c6f0:	4650      	mov	r0, sl
    c6f2:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    c6f4:	3c01      	subs	r4, #1
    c6f6:	e7da      	b.n	c6ae <print_digits+0x42>
		out(pad_char, ctx);
    c6f8:	4639      	mov	r1, r7
    c6fa:	4650      	mov	r0, sl
    c6fc:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    c6fe:	3c01      	subs	r4, #1
    c700:	e7de      	b.n	c6c0 <print_digits+0x54>
    c702:	bf00      	nop
    c704:	00014751 	.word	0x00014751

0000c708 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c708:	680b      	ldr	r3, [r1, #0]
    c70a:	3301      	adds	r3, #1
    c70c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c70e:	4b01      	ldr	r3, [pc, #4]	; (c714 <char_out+0xc>)
    c710:	681b      	ldr	r3, [r3, #0]
    c712:	4718      	bx	r3
    c714:	20010020 	.word	0x20010020

0000c718 <__printk_hook_install>:
	_char_out = fn;
    c718:	4b01      	ldr	r3, [pc, #4]	; (c720 <__printk_hook_install+0x8>)
    c71a:	6018      	str	r0, [r3, #0]
}
    c71c:	4770      	bx	lr
    c71e:	bf00      	nop
    c720:	20010020 	.word	0x20010020

0000c724 <z_vprintk>:
{
    c724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    c728:	2600      	movs	r6, #0
{
    c72a:	4605      	mov	r5, r0
    c72c:	468b      	mov	fp, r1
    c72e:	461c      	mov	r4, r3
	int min_width = -1;
    c730:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
    c734:	4637      	mov	r7, r6
{
    c736:	b087      	sub	sp, #28
    c738:	f102 3aff 	add.w	sl, r2, #4294967295
			might_format = 0;
    c73c:	f04f 0900 	mov.w	r9, #0
					break;
    c740:	e007      	b.n	c752 <z_vprintk+0x2e>
		if (!might_format) {
    c742:	f1b9 0f00 	cmp.w	r9, #0
    c746:	d10b      	bne.n	c760 <z_vprintk+0x3c>
			if (*fmt != '%') {
    c748:	2825      	cmp	r0, #37	; 0x25
    c74a:	f000 810a 	beq.w	c962 <z_vprintk+0x23e>
				out((int)*fmt, ctx);
    c74e:	4659      	mov	r1, fp
    c750:	47a8      	blx	r5
	while (*fmt) {
    c752:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    c756:	2800      	cmp	r0, #0
    c758:	d1f3      	bne.n	c742 <z_vprintk+0x1e>
}
    c75a:	b007      	add	sp, #28
    c75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    c760:	287a      	cmp	r0, #122	; 0x7a
    c762:	d80a      	bhi.n	c77a <z_vprintk+0x56>
    c764:	2862      	cmp	r0, #98	; 0x62
    c766:	d810      	bhi.n	c78a <z_vprintk+0x66>
    c768:	2830      	cmp	r0, #48	; 0x30
    c76a:	d051      	beq.n	c810 <z_vprintk+0xec>
    c76c:	d844      	bhi.n	c7f8 <z_vprintk+0xd4>
    c76e:	2825      	cmp	r0, #37	; 0x25
    c770:	f000 80f5 	beq.w	c95e <z_vprintk+0x23a>
    c774:	282d      	cmp	r0, #45	; 0x2d
    c776:	f000 80fb 	beq.w	c970 <z_vprintk+0x24c>
					out((int)'%', ctx);
    c77a:	4659      	mov	r1, fp
    c77c:	2025      	movs	r0, #37	; 0x25
    c77e:	47a8      	blx	r5
					out((int)*fmt, ctx);
    c780:	4659      	mov	r1, fp
    c782:	f89a 0000 	ldrb.w	r0, [sl]
    c786:	47a8      	blx	r5
    c788:	e7d8      	b.n	c73c <z_vprintk+0x18>
    c78a:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    c78e:	2b17      	cmp	r3, #23
    c790:	d8f3      	bhi.n	c77a <z_vprintk+0x56>
    c792:	a201      	add	r2, pc, #4	; (adr r2, c798 <z_vprintk+0x74>)
    c794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c798:	0000c957 	.word	0x0000c957
    c79c:	0000c859 	.word	0x0000c859
    c7a0:	0000c77b 	.word	0x0000c77b
    c7a4:	0000c77b 	.word	0x0000c77b
    c7a8:	0000c77b 	.word	0x0000c77b
    c7ac:	0000c83b 	.word	0x0000c83b
    c7b0:	0000c859 	.word	0x0000c859
    c7b4:	0000c77b 	.word	0x0000c77b
    c7b8:	0000c77b 	.word	0x0000c77b
    c7bc:	0000c83b 	.word	0x0000c83b
    c7c0:	0000c77b 	.word	0x0000c77b
    c7c4:	0000c77b 	.word	0x0000c77b
    c7c8:	0000c77b 	.word	0x0000c77b
    c7cc:	0000c8d3 	.word	0x0000c8d3
    c7d0:	0000c77b 	.word	0x0000c77b
    c7d4:	0000c77b 	.word	0x0000c77b
    c7d8:	0000c91f 	.word	0x0000c91f
    c7dc:	0000c77b 	.word	0x0000c77b
    c7e0:	0000c859 	.word	0x0000c859
    c7e4:	0000c77b 	.word	0x0000c77b
    c7e8:	0000c77b 	.word	0x0000c77b
    c7ec:	0000c801 	.word	0x0000c801
    c7f0:	0000c77b 	.word	0x0000c77b
    c7f4:	0000c83b 	.word	0x0000c83b
			switch (*fmt) {
    c7f8:	2839      	cmp	r0, #57	; 0x39
    c7fa:	d915      	bls.n	c828 <z_vprintk+0x104>
    c7fc:	2858      	cmp	r0, #88	; 0x58
    c7fe:	d1bc      	bne.n	c77a <z_vprintk+0x56>
				if (*fmt == 'p') {
    c800:	f89a 3000 	ldrb.w	r3, [sl]
    c804:	2b70      	cmp	r3, #112	; 0x70
    c806:	d16e      	bne.n	c8e6 <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
    c808:	2300      	movs	r3, #0
    c80a:	f854 2b04 	ldr.w	r2, [r4], #4
    c80e:	e075      	b.n	c8fc <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
    c810:	f1b8 0f00 	cmp.w	r8, #0
    c814:	da0b      	bge.n	c82e <z_vprintk+0x10a>
    c816:	2f00      	cmp	r7, #0
    c818:	f000 80ac 	beq.w	c974 <z_vprintk+0x250>
					min_width = *fmt - '0';
    c81c:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    c820:	2f00      	cmp	r7, #0
    c822:	bf08      	it	eq
    c824:	2702      	moveq	r7, #2
    c826:	e794      	b.n	c752 <z_vprintk+0x2e>
				if (min_width < 0) {
    c828:	f1b8 0f00 	cmp.w	r8, #0
    c82c:	dbf6      	blt.n	c81c <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    c82e:	230a      	movs	r3, #10
    c830:	fb03 0808 	mla	r8, r3, r8, r0
    c834:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    c838:	e7f2      	b.n	c820 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
    c83a:	2868      	cmp	r0, #104	; 0x68
    c83c:	d103      	bne.n	c846 <z_vprintk+0x122>
    c83e:	2e68      	cmp	r6, #104	; 0x68
    c840:	d106      	bne.n	c850 <z_vprintk+0x12c>
					length_mod = 'H';
    c842:	2648      	movs	r6, #72	; 0x48
    c844:	e785      	b.n	c752 <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
    c846:	286c      	cmp	r0, #108	; 0x6c
    c848:	d102      	bne.n	c850 <z_vprintk+0x12c>
    c84a:	2e6c      	cmp	r6, #108	; 0x6c
    c84c:	f000 8094 	beq.w	c978 <z_vprintk+0x254>
				} else if (length_mod == 0) {
    c850:	2e00      	cmp	r6, #0
    c852:	d192      	bne.n	c77a <z_vprintk+0x56>
    c854:	4606      	mov	r6, r0
    c856:	e77c      	b.n	c752 <z_vprintk+0x2e>
				if (length_mod == 'z') {
    c858:	2e7a      	cmp	r6, #122	; 0x7a
    c85a:	d106      	bne.n	c86a <z_vprintk+0x146>
					d = va_arg(ap, long);
    c85c:	46a1      	mov	r9, r4
    c85e:	f859 2b04 	ldr.w	r2, [r9], #4
    c862:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    c864:	2875      	cmp	r0, #117	; 0x75
    c866:	d123      	bne.n	c8b0 <z_vprintk+0x18c>
    c868:	e00f      	b.n	c88a <z_vprintk+0x166>
				} else if (length_mod == 'l') {
    c86a:	2e6c      	cmp	r6, #108	; 0x6c
    c86c:	d0f6      	beq.n	c85c <z_vprintk+0x138>
				} else if (length_mod == 'L') {
    c86e:	2e4c      	cmp	r6, #76	; 0x4c
    c870:	d105      	bne.n	c87e <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
    c872:	3407      	adds	r4, #7
    c874:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
    c878:	e8f9 2302 	ldrd	r2, r3, [r9], #8
    c87c:	e7f2      	b.n	c864 <z_vprintk+0x140>
				} else if (*fmt == 'u') {
    c87e:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
    c880:	6822      	ldr	r2, [r4, #0]
    c882:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
    c886:	d112      	bne.n	c8ae <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
    c888:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    c88a:	1ef8      	subs	r0, r7, #3
    c88c:	bf18      	it	ne
    c88e:	2001      	movne	r0, #1
    c890:	2f01      	cmp	r7, #1
    c892:	bf0c      	ite	eq
    c894:	2430      	moveq	r4, #48	; 0x30
    c896:	2420      	movne	r4, #32
    c898:	9001      	str	r0, [sp, #4]
    c89a:	200a      	movs	r0, #10
    c89c:	e9cd 4802 	strd	r4, r8, [sp, #8]
    c8a0:	9000      	str	r0, [sp, #0]
    c8a2:	4659      	mov	r1, fp
    c8a4:	4628      	mov	r0, r5
    c8a6:	f7ff fee1 	bl	c66c <print_digits>
}
    c8aa:	464c      	mov	r4, r9
    c8ac:	e746      	b.n	c73c <z_vprintk+0x18>
					d = va_arg(ap, int);
    c8ae:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    c8b0:	2a00      	cmp	r2, #0
    c8b2:	f173 0100 	sbcs.w	r1, r3, #0
    c8b6:	dae8      	bge.n	c88a <z_vprintk+0x166>
					out((int)'-', ctx);
    c8b8:	4659      	mov	r1, fp
    c8ba:	202d      	movs	r0, #45	; 0x2d
    c8bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    c8c0:	47a8      	blx	r5
					d = -d;
    c8c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    c8c6:	4252      	negs	r2, r2
    c8c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    c8cc:	f108 38ff 	add.w	r8, r8, #4294967295
    c8d0:	e7db      	b.n	c88a <z_vprintk+0x166>
				out('0', ctx);
    c8d2:	4659      	mov	r1, fp
    c8d4:	2030      	movs	r0, #48	; 0x30
    c8d6:	47a8      	blx	r5
				out('x', ctx);
    c8d8:	4659      	mov	r1, fp
    c8da:	2078      	movs	r0, #120	; 0x78
    c8dc:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
    c8de:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
    c8e2:	2701      	movs	r7, #1
    c8e4:	e78c      	b.n	c800 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    c8e6:	2e6c      	cmp	r6, #108	; 0x6c
    c8e8:	d08e      	beq.n	c808 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
    c8ea:	2e4c      	cmp	r6, #76	; 0x4c
    c8ec:	d18c      	bne.n	c808 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
    c8ee:	1de3      	adds	r3, r4, #7
    c8f0:	f023 0307 	bic.w	r3, r3, #7
    c8f4:	461c      	mov	r4, r3
    c8f6:	685b      	ldr	r3, [r3, #4]
    c8f8:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    c8fc:	1ef8      	subs	r0, r7, #3
    c8fe:	bf18      	it	ne
    c900:	2001      	movne	r0, #1
    c902:	2f01      	cmp	r7, #1
    c904:	bf0c      	ite	eq
    c906:	2130      	moveq	r1, #48	; 0x30
    c908:	2120      	movne	r1, #32
    c90a:	e9cd 1802 	strd	r1, r8, [sp, #8]
    c90e:	2110      	movs	r1, #16
    c910:	9001      	str	r0, [sp, #4]
    c912:	9100      	str	r1, [sp, #0]
    c914:	4628      	mov	r0, r5
    c916:	4659      	mov	r1, fp
    c918:	f7ff fea8 	bl	c66c <print_digits>
    c91c:	e70e      	b.n	c73c <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
    c91e:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
    c922:	4699      	mov	r9, r3
    c924:	464a      	mov	r2, r9
    c926:	f819 0b01 	ldrb.w	r0, [r9], #1
    c92a:	b978      	cbnz	r0, c94c <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
    c92c:	2f03      	cmp	r7, #3
    c92e:	d125      	bne.n	c97c <z_vprintk+0x258>
					int remaining = min_width - (s - start);
    c930:	eba2 0903 	sub.w	r9, r2, r3
    c934:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
    c938:	f1b9 0f00 	cmp.w	r9, #0
    c93c:	f77f aefe 	ble.w	c73c <z_vprintk+0x18>
						out(' ', ctx);
    c940:	4659      	mov	r1, fp
    c942:	2020      	movs	r0, #32
    c944:	47a8      	blx	r5
    c946:	f109 39ff 	add.w	r9, r9, #4294967295
    c94a:	e7f5      	b.n	c938 <z_vprintk+0x214>
					out((int)(*s++), ctx);
    c94c:	4659      	mov	r1, fp
    c94e:	9304      	str	r3, [sp, #16]
    c950:	47a8      	blx	r5
    c952:	9b04      	ldr	r3, [sp, #16]
    c954:	e7e6      	b.n	c924 <z_vprintk+0x200>
				out(c, ctx);
    c956:	4659      	mov	r1, fp
    c958:	f854 0b04 	ldr.w	r0, [r4], #4
    c95c:	e713      	b.n	c786 <z_vprintk+0x62>
				out((int)'%', ctx);
    c95e:	4659      	mov	r1, fp
    c960:	e711      	b.n	c786 <z_vprintk+0x62>
				length_mod = 0;
    c962:	464e      	mov	r6, r9
				padding = PAD_NONE;
    c964:	464f      	mov	r7, r9
				min_width = -1;
    c966:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
    c96a:	f04f 0901 	mov.w	r9, #1
    c96e:	e6f0      	b.n	c752 <z_vprintk+0x2e>
			switch (*fmt) {
    c970:	2703      	movs	r7, #3
    c972:	e6ee      	b.n	c752 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
    c974:	2701      	movs	r7, #1
    c976:	e6ec      	b.n	c752 <z_vprintk+0x2e>
					length_mod = 'L';
    c978:	264c      	movs	r6, #76	; 0x4c
    c97a:	e6ea      	b.n	c752 <z_vprintk+0x2e>
			might_format = 0;
    c97c:	4681      	mov	r9, r0
    c97e:	e6e8      	b.n	c752 <z_vprintk+0x2e>

0000c980 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    c980:	b507      	push	{r0, r1, r2, lr}
    c982:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    c984:	2100      	movs	r1, #0
{
    c986:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    c988:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    c98a:	4803      	ldr	r0, [pc, #12]	; (c998 <vprintk+0x18>)
    c98c:	a901      	add	r1, sp, #4
    c98e:	f7ff fec9 	bl	c724 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    c992:	b003      	add	sp, #12
    c994:	f85d fb04 	ldr.w	pc, [sp], #4
    c998:	0000c709 	.word	0x0000c709

0000c99c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    c99c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    c99e:	2500      	movs	r5, #0
{
    c9a0:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    c9a2:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    c9a6:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    c9a8:	a901      	add	r1, sp, #4
    c9aa:	4805      	ldr	r0, [pc, #20]	; (c9c0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    c9ac:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    c9ae:	f7ff feb9 	bl	c724 <z_vprintk>

	if (ctx.count < ctx.max) {
    c9b2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    c9b6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    c9b8:	bfb8      	it	lt
    c9ba:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    c9bc:	b005      	add	sp, #20
    c9be:	bd30      	pop	{r4, r5, pc}
    c9c0:	00011d05 	.word	0x00011d05

0000c9c4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    c9c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c9c8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    c9cc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    c9ce:	f019 0808 	ands.w	r8, r9, #8
{
    c9d2:	4693      	mov	fp, r2
	if (processing) {
    c9d4:	d00d      	beq.n	c9f2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    c9d6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    c9d8:	bf0c      	ite	eq
    c9da:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    c9de:	f049 0920 	orrne.w	r9, r9, #32
    c9e2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    c9e6:	f38b 8811 	msr	BASEPRI, fp
    c9ea:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    c9ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c9f2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    c9f6:	2902      	cmp	r1, #2
    c9f8:	d107      	bne.n	ca0a <process_event+0x46>
			evt = process_recheck(mgr);
    c9fa:	4620      	mov	r0, r4
    c9fc:	f005 f9af 	bl	11d5e <process_recheck>
		if (evt == EVT_NOP) {
    ca00:	2800      	cmp	r0, #0
    ca02:	d0f0      	beq.n	c9e6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    ca04:	2801      	cmp	r0, #1
    ca06:	8b23      	ldrh	r3, [r4, #24]
    ca08:	d150      	bne.n	caac <process_event+0xe8>
			res = mgr->last_res;
    ca0a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ca0c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    ca0e:	2f00      	cmp	r7, #0
    ca10:	da15      	bge.n	ca3e <process_event+0x7a>
		*clients = mgr->clients;
    ca12:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ca14:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    ca18:	e9c4 8800 	strd	r8, r8, [r4]
    ca1c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ca20:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    ca22:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ca24:	8b21      	ldrh	r1, [r4, #24]
    ca26:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ca2a:	45ca      	cmp	sl, r9
    ca2c:	d002      	beq.n	ca34 <process_event+0x70>
		if (do_monitors
    ca2e:	68a3      	ldr	r3, [r4, #8]
    ca30:	2b00      	cmp	r3, #0
    ca32:	d15c      	bne.n	caee <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    ca34:	b90d      	cbnz	r5, ca3a <process_event+0x76>
		    || (transit != NULL)) {
    ca36:	2e00      	cmp	r6, #0
    ca38:	d074      	beq.n	cb24 <process_event+0x160>
    ca3a:	2300      	movs	r3, #0
    ca3c:	e058      	b.n	caf0 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ca3e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    ca42:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    ca44:	2a01      	cmp	r2, #1
    ca46:	d820      	bhi.n	ca8a <process_event+0xc6>
		*clients = mgr->clients;
    ca48:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    ca4c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    ca4e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    ca50:	b289      	uxth	r1, r1
	list->tail = NULL;
    ca52:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    ca56:	d10c      	bne.n	ca72 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    ca58:	2d00      	cmp	r5, #0
    ca5a:	462b      	mov	r3, r5
    ca5c:	bf38      	it	cc
    ca5e:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ca60:	b12b      	cbz	r3, ca6e <process_event+0xaa>
				mgr->refs += 1U;
    ca62:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ca64:	681b      	ldr	r3, [r3, #0]
    ca66:	3201      	adds	r2, #1
    ca68:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ca6a:	2b00      	cmp	r3, #0
    ca6c:	d1f8      	bne.n	ca60 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ca6e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    ca72:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ca74:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    ca76:	f005 f972 	bl	11d5e <process_recheck>
    ca7a:	4606      	mov	r6, r0
    ca7c:	2800      	cmp	r0, #0
    ca7e:	d0d1      	beq.n	ca24 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ca80:	8b23      	ldrh	r3, [r4, #24]
    ca82:	f043 0320 	orr.w	r3, r3, #32
    ca86:	8323      	strh	r3, [r4, #24]
    ca88:	e7cb      	b.n	ca22 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    ca8a:	2b04      	cmp	r3, #4
    ca8c:	d10c      	bne.n	caa8 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ca8e:	f021 0107 	bic.w	r1, r1, #7
    ca92:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    ca94:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ca96:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    ca98:	f005 f961 	bl	11d5e <process_recheck>
    ca9c:	4605      	mov	r5, r0
    ca9e:	2800      	cmp	r0, #0
    caa0:	d0bf      	beq.n	ca22 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    caa2:	f041 0120 	orr.w	r1, r1, #32
    caa6:	8321      	strh	r1, [r4, #24]
    caa8:	2500      	movs	r5, #0
    caaa:	e7ba      	b.n	ca22 <process_event+0x5e>
		} else if (evt == EVT_START) {
    caac:	2803      	cmp	r0, #3
    caae:	d109      	bne.n	cac4 <process_event+0x100>
			transit = mgr->transitions->start;
    cab0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cab2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    cab6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cab8:	f043 0306 	orr.w	r3, r3, #6
}
    cabc:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    cabe:	8323      	strh	r3, [r4, #24]
		res = 0;
    cac0:	462f      	mov	r7, r5
    cac2:	e7af      	b.n	ca24 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    cac4:	2804      	cmp	r0, #4
    cac6:	d106      	bne.n	cad6 <process_event+0x112>
			transit = mgr->transitions->stop;
    cac8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    caca:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    cace:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cad0:	f043 0304 	orr.w	r3, r3, #4
    cad4:	e7f2      	b.n	cabc <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    cad6:	2805      	cmp	r0, #5
    cad8:	d106      	bne.n	cae8 <process_event+0x124>
			transit = mgr->transitions->reset;
    cada:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cadc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    cae0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cae2:	f043 0305 	orr.w	r3, r3, #5
    cae6:	e7e9      	b.n	cabc <process_event+0xf8>
    cae8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    caea:	462e      	mov	r6, r5
    caec:	e7e8      	b.n	cac0 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    caee:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    caf0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    caf4:	8321      	strh	r1, [r4, #24]
    caf6:	f38b 8811 	msr	BASEPRI, fp
    cafa:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    cafe:	bb03      	cbnz	r3, cb42 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    cb00:	2d00      	cmp	r5, #0
    cb02:	d133      	bne.n	cb6c <process_event+0x1a8>
			if (transit != NULL) {
    cb04:	b116      	cbz	r6, cb0c <process_event+0x148>
				transit(mgr, transition_complete);
    cb06:	4620      	mov	r0, r4
    cb08:	4920      	ldr	r1, [pc, #128]	; (cb8c <process_event+0x1c8>)
    cb0a:	47b0      	blx	r6
	__asm__ volatile(
    cb0c:	f04f 0320 	mov.w	r3, #32
    cb10:	f3ef 8b11 	mrs	fp, BASEPRI
    cb14:	f383 8811 	msr	BASEPRI, r3
    cb18:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    cb1c:	8b23      	ldrh	r3, [r4, #24]
    cb1e:	f023 0308 	bic.w	r3, r3, #8
    cb22:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    cb24:	8b23      	ldrh	r3, [r4, #24]
    cb26:	06da      	lsls	r2, r3, #27
    cb28:	d528      	bpl.n	cb7c <process_event+0x1b8>
			evt = EVT_COMPLETE;
    cb2a:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cb2c:	f023 0310 	bic.w	r3, r3, #16
    cb30:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    cb32:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    cb36:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    cb3a:	2900      	cmp	r1, #0
    cb3c:	f47f af5b 	bne.w	c9f6 <process_event+0x32>
out:
    cb40:	e751      	b.n	c9e6 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cb42:	68a1      	ldr	r1, [r4, #8]
    cb44:	2900      	cmp	r1, #0
    cb46:	d0db      	beq.n	cb00 <process_event+0x13c>
	return node->next;
    cb48:	680b      	ldr	r3, [r1, #0]
    cb4a:	2b00      	cmp	r3, #0
    cb4c:	bf38      	it	cc
    cb4e:	2300      	movcc	r3, #0
    cb50:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    cb52:	4652      	mov	r2, sl
    cb54:	463b      	mov	r3, r7
    cb56:	4620      	mov	r0, r4
    cb58:	f8d1 b004 	ldr.w	fp, [r1, #4]
    cb5c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cb5e:	f1b9 0f00 	cmp.w	r9, #0
    cb62:	d0cd      	beq.n	cb00 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    cb64:	4649      	mov	r1, r9
    cb66:	f8d9 3000 	ldr.w	r3, [r9]
    cb6a:	e7ee      	b.n	cb4a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    cb6c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    cb6e:	463b      	mov	r3, r7
    cb70:	4652      	mov	r2, sl
    cb72:	4620      	mov	r0, r4
    cb74:	682d      	ldr	r5, [r5, #0]
    cb76:	f005 f90e 	bl	11d96 <notify_one>
    cb7a:	e7c1      	b.n	cb00 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    cb7c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    cb80:	bf1e      	ittt	ne
    cb82:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    cb86:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    cb88:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    cb8a:	e7d2      	b.n	cb32 <process_event+0x16e>
    cb8c:	00011dc3 	.word	0x00011dc3

0000cb90 <nordicsemi_nrf91_init>:
    cb90:	f04f 0220 	mov.w	r2, #32
    cb94:	f3ef 8311 	mrs	r3, BASEPRI
    cb98:	f382 8811 	msr	BASEPRI, r2
    cb9c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    cba0:	2101      	movs	r1, #1
    cba2:	4a04      	ldr	r2, [pc, #16]	; (cbb4 <nordicsemi_nrf91_init+0x24>)
    cba4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    cba8:	f383 8811 	msr	BASEPRI, r3
    cbac:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    cbb0:	2000      	movs	r0, #0
    cbb2:	4770      	bx	lr
    cbb4:	40039000 	.word	0x40039000

0000cbb8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    cbb8:	b120      	cbz	r0, cbc4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    cbba:	4b03      	ldr	r3, [pc, #12]	; (cbc8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    cbbc:	0180      	lsls	r0, r0, #6
    cbbe:	f043 0301 	orr.w	r3, r3, #1
    cbc2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    cbc4:	4770      	bx	lr
    cbc6:	bf00      	nop
    cbc8:	00014450 	.word	0x00014450

0000cbcc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    cbcc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    cbce:	2200      	movs	r2, #0
{
    cbd0:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    cbd2:	490f      	ldr	r1, [pc, #60]	; (cc10 <enable_logger+0x44>)
    cbd4:	480f      	ldr	r0, [pc, #60]	; (cc14 <enable_logger+0x48>)
    cbd6:	f007 fa5d 	bl	14094 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    cbda:	2200      	movs	r2, #0
    cbdc:	2300      	movs	r3, #0
    cbde:	2400      	movs	r4, #0
    cbe0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    cbe4:	230e      	movs	r3, #14
    cbe6:	4d0c      	ldr	r5, [pc, #48]	; (cc18 <enable_logger+0x4c>)
    cbe8:	e9cd 3403 	strd	r3, r4, [sp, #12]
    cbec:	f44f 7240 	mov.w	r2, #768	; 0x300
    cbf0:	4628      	mov	r0, r5
    cbf2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    cbf6:	4b09      	ldr	r3, [pc, #36]	; (cc1c <enable_logger+0x50>)
    cbf8:	4909      	ldr	r1, [pc, #36]	; (cc20 <enable_logger+0x54>)
    cbfa:	9400      	str	r4, [sp, #0]
    cbfc:	f004 fdec 	bl	117d8 <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread_id, *(uintptr_t *)&value, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread_id, value);
    cc00:	4908      	ldr	r1, [pc, #32]	; (cc24 <enable_logger+0x58>)
    cc02:	4628      	mov	r0, r5
    cc04:	f007 f9fd 	bl	14002 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    cc08:	4620      	mov	r0, r4
    cc0a:	b009      	add	sp, #36	; 0x24
    cc0c:	bd30      	pop	{r4, r5, pc}
    cc0e:	bf00      	nop
    cc10:	0000cc29 	.word	0x0000cc29
    cc14:	20010168 	.word	0x20010168
    cc18:	200101a0 	.word	0x200101a0
    cc1c:	0000d011 	.word	0x0000d011
    cc20:	20010760 	.word	0x20010760
    cc24:	00014766 	.word	0x00014766

0000cc28 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    cc28:	4801      	ldr	r0, [pc, #4]	; (cc30 <log_process_thread_timer_expiry_fn+0x8>)
    cc2a:	f004 bd5b 	b.w	116e4 <z_impl_k_sem_give>
    cc2e:	bf00      	nop
    cc30:	20010158 	.word	0x20010158

0000cc34 <log_core_init>:
{
    cc34:	b508      	push	{r3, lr}
		log_msg_pool_init();
    cc36:	f000 fa49 	bl	d0cc <log_msg_pool_init>
		log_list_init(&list);
    cc3a:	4809      	ldr	r0, [pc, #36]	; (cc60 <log_core_init+0x2c>)
    cc3c:	f005 fa23 	bl	12086 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    cc40:	2304      	movs	r3, #4
    cc42:	2228      	movs	r2, #40	; 0x28
    cc44:	4907      	ldr	r1, [pc, #28]	; (cc64 <log_core_init+0x30>)
    cc46:	4808      	ldr	r0, [pc, #32]	; (cc68 <log_core_init+0x34>)
    cc48:	f007 f8e5 	bl	13e16 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    cc4c:	4b07      	ldr	r3, [pc, #28]	; (cc6c <log_core_init+0x38>)
    cc4e:	4a08      	ldr	r2, [pc, #32]	; (cc70 <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    cc50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    cc54:	601a      	str	r2, [r3, #0]
}
    cc56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    cc5a:	f000 bc7f 	b.w	d55c <log_output_timestamp_freq_set>
    cc5e:	bf00      	nop
    cc60:	20010578 	.word	0x20010578
    cc64:	20011ba0 	.word	0x20011ba0
    cc68:	20010580 	.word	0x20010580
    cc6c:	20010024 	.word	0x20010024
    cc70:	000120c5 	.word	0x000120c5

0000cc74 <dropped_notify>:
{
    cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    cc76:	2500      	movs	r5, #0
    cc78:	4b0c      	ldr	r3, [pc, #48]	; (ccac <dropped_notify+0x38>)
    cc7a:	e8d3 7fef 	ldaex	r7, [r3]
    cc7e:	e8c3 5fe2 	stlex	r2, r5, [r3]
    cc82:	2a00      	cmp	r2, #0
    cc84:	d1f9      	bne.n	cc7a <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    cc86:	4c0a      	ldr	r4, [pc, #40]	; (ccb0 <dropped_notify+0x3c>)
    cc88:	4e0a      	ldr	r6, [pc, #40]	; (ccb4 <dropped_notify+0x40>)
    cc8a:	1b36      	subs	r6, r6, r4
    cc8c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    cc8e:	42b5      	cmp	r5, r6
    cc90:	db00      	blt.n	cc94 <dropped_notify+0x20>
}
    cc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    cc94:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    cc96:	795b      	ldrb	r3, [r3, #5]
    cc98:	b12b      	cbz	r3, cca6 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    cc9a:	6823      	ldr	r3, [r4, #0]
    cc9c:	68db      	ldr	r3, [r3, #12]
    cc9e:	b113      	cbz	r3, cca6 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    cca0:	4639      	mov	r1, r7
    cca2:	4620      	mov	r0, r4
    cca4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    cca6:	3501      	adds	r5, #1
    cca8:	3410      	adds	r4, #16
    ccaa:	e7f0      	b.n	cc8e <dropped_notify+0x1a>
    ccac:	20010570 	.word	0x20010570
    ccb0:	000143f4 	.word	0x000143f4
    ccb4:	00014404 	.word	0x00014404

0000ccb8 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ccb8:	4b04      	ldr	r3, [pc, #16]	; (cccc <log_dropped+0x14>)
    ccba:	e8d3 2fef 	ldaex	r2, [r3]
    ccbe:	3201      	adds	r2, #1
    ccc0:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ccc4:	2900      	cmp	r1, #0
    ccc6:	d1f8      	bne.n	ccba <log_dropped+0x2>
}
    ccc8:	4770      	bx	lr
    ccca:	bf00      	nop
    cccc:	20010570 	.word	0x20010570

0000ccd0 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    ccd0:	4a04      	ldr	r2, [pc, #16]	; (cce4 <log_source_name_get+0x14>)
    ccd2:	4b05      	ldr	r3, [pc, #20]	; (cce8 <log_source_name_get+0x18>)
    ccd4:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    ccd6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    ccda:	bf34      	ite	cc
    ccdc:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    cce0:	2000      	movcs	r0, #0
}
    cce2:	4770      	bx	lr
    cce4:	00014394 	.word	0x00014394
    cce8:	000143f4 	.word	0x000143f4

0000ccec <log_backend_enable>:
	id += backend - log_backend_get(0);
    ccec:	4b09      	ldr	r3, [pc, #36]	; (cd14 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    ccee:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    ccf0:	1ac3      	subs	r3, r0, r3
    ccf2:	111b      	asrs	r3, r3, #4
    ccf4:	3301      	adds	r3, #1
{
    ccf6:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    ccf8:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    ccfa:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    ccfc:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    ccfe:	4c06      	ldr	r4, [pc, #24]	; (cd18 <log_backend_enable+0x2c>)
    cd00:	715a      	strb	r2, [r3, #5]
    cd02:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    cd04:	6019      	str	r1, [r3, #0]
    cd06:	b912      	cbnz	r2, cd0e <log_backend_enable+0x22>
    cd08:	4804      	ldr	r0, [pc, #16]	; (cd1c <log_backend_enable+0x30>)
    cd0a:	f004 fceb 	bl	116e4 <z_impl_k_sem_give>
	backend_attached = true;
    cd0e:	2301      	movs	r3, #1
    cd10:	7023      	strb	r3, [r4, #0]
}
    cd12:	bd10      	pop	{r4, pc}
    cd14:	000143f4 	.word	0x000143f4
    cd18:	20010756 	.word	0x20010756
    cd1c:	20010158 	.word	0x20010158

0000cd20 <log_init>:
{
    cd20:	b570      	push	{r4, r5, r6, lr}
    cd22:	4b0f      	ldr	r3, [pc, #60]	; (cd60 <log_init+0x40>)
    cd24:	e8d3 5fef 	ldaex	r5, [r3]
    cd28:	1c6a      	adds	r2, r5, #1
    cd2a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    cd2e:	2900      	cmp	r1, #0
    cd30:	d1f8      	bne.n	cd24 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    cd32:	b92d      	cbnz	r5, cd40 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    cd34:	4c0b      	ldr	r4, [pc, #44]	; (cd64 <log_init+0x44>)
    cd36:	4e0c      	ldr	r6, [pc, #48]	; (cd68 <log_init+0x48>)
    cd38:	1b36      	subs	r6, r6, r4
    cd3a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    cd3c:	42b5      	cmp	r5, r6
    cd3e:	db00      	blt.n	cd42 <log_init+0x22>
}
    cd40:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    cd42:	7b23      	ldrb	r3, [r4, #12]
    cd44:	b143      	cbz	r3, cd58 <log_init+0x38>
			if (backend->api->init != NULL) {
    cd46:	6823      	ldr	r3, [r4, #0]
    cd48:	695b      	ldr	r3, [r3, #20]
    cd4a:	b103      	cbz	r3, cd4e <log_init+0x2e>
				backend->api->init();
    cd4c:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    cd4e:	2204      	movs	r2, #4
    cd50:	2100      	movs	r1, #0
    cd52:	4620      	mov	r0, r4
    cd54:	f7ff ffca 	bl	ccec <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    cd58:	3501      	adds	r5, #1
    cd5a:	3410      	adds	r4, #16
    cd5c:	e7ee      	b.n	cd3c <log_init+0x1c>
    cd5e:	bf00      	nop
    cd60:	20010574 	.word	0x20010574
    cd64:	000143f4 	.word	0x000143f4
    cd68:	00014404 	.word	0x00014404

0000cd6c <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    cd6c:	4b14      	ldr	r3, [pc, #80]	; (cdc0 <log_strdup+0x54>)
{
    cd6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    cd70:	4298      	cmp	r0, r3
{
    cd72:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    cd74:	d302      	bcc.n	cd7c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    cd76:	4b13      	ldr	r3, [pc, #76]	; (cdc4 <log_strdup+0x58>)
    cd78:	4298      	cmp	r0, r3
    cd7a:	d31c      	bcc.n	cdb6 <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    cd7c:	2200      	movs	r2, #0
    cd7e:	2300      	movs	r3, #0
    cd80:	4811      	ldr	r0, [pc, #68]	; (cdc8 <log_strdup+0x5c>)
    cd82:	a901      	add	r1, sp, #4
    cd84:	f004 f832 	bl	10dec <k_mem_slab_alloc>
	if (err != 0) {
    cd88:	4605      	mov	r5, r0
    cd8a:	b9b8      	cbnz	r0, cdbc <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    cd8c:	2201      	movs	r2, #1
    cd8e:	9b01      	ldr	r3, [sp, #4]
    cd90:	e8d3 1fef 	ldaex	r1, [r3]
    cd94:	e8c3 2fe0 	stlex	r0, r2, [r3]
    cd98:	2800      	cmp	r0, #0
    cd9a:	d1f9      	bne.n	cd90 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    cd9c:	9801      	ldr	r0, [sp, #4]
    cd9e:	4621      	mov	r1, r4
    cda0:	221f      	movs	r2, #31
    cda2:	3004      	adds	r0, #4
    cda4:	f005 fd66 	bl	12874 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    cda8:	237e      	movs	r3, #126	; 0x7e
    cdaa:	9c01      	ldr	r4, [sp, #4]
    cdac:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    cdb0:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    cdb4:	3404      	adds	r4, #4
}
    cdb6:	4620      	mov	r0, r4
    cdb8:	b003      	add	sp, #12
    cdba:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    cdbc:	4c03      	ldr	r4, [pc, #12]	; (cdcc <log_strdup+0x60>)
    cdbe:	e7fa      	b.n	cdb6 <log_strdup+0x4a>
    cdc0:	0001410c 	.word	0x0001410c
    cdc4:	000151a0 	.word	0x000151a0
    cdc8:	20010580 	.word	0x20010580
    cdcc:	0001476e 	.word	0x0001476e

0000cdd0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    cdd0:	b148      	cbz	r0, cde6 <log_is_strdup+0x16>
    cdd2:	4b05      	ldr	r3, [pc, #20]	; (cde8 <log_is_strdup+0x18>)
    cdd4:	4298      	cmp	r0, r3
    cdd6:	d305      	bcc.n	cde4 <log_is_strdup+0x14>
    cdd8:	33a0      	adds	r3, #160	; 0xa0
    cdda:	4298      	cmp	r0, r3
    cddc:	bf2c      	ite	cs
    cdde:	2000      	movcs	r0, #0
    cde0:	2001      	movcc	r0, #1
    cde2:	4770      	bx	lr
    cde4:	2000      	movs	r0, #0
}
    cde6:	4770      	bx	lr
    cde8:	20011ba0 	.word	0x20011ba0

0000cdec <z_impl_log_process>:
{
    cdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    cdf0:	4b4a      	ldr	r3, [pc, #296]	; (cf1c <z_impl_log_process+0x130>)
{
    cdf2:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    cdf4:	781b      	ldrb	r3, [r3, #0]
{
    cdf6:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
    cdf8:	b903      	cbnz	r3, cdfc <z_impl_log_process+0x10>
    cdfa:	b340      	cbz	r0, ce4e <z_impl_log_process+0x62>
	__asm__ volatile(
    cdfc:	f04f 0320 	mov.w	r3, #32
    ce00:	f3ef 8611 	mrs	r6, BASEPRI
    ce04:	f383 8811 	msr	BASEPRI, r3
    ce08:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    ce0c:	4844      	ldr	r0, [pc, #272]	; (cf20 <z_impl_log_process+0x134>)
    ce0e:	f005 f94a 	bl	120a6 <log_list_head_get>
    ce12:	4605      	mov	r5, r0
	__asm__ volatile(
    ce14:	f386 8811 	msr	BASEPRI, r6
    ce18:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    ce1c:	b158      	cbz	r0, ce36 <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ce1e:	4b41      	ldr	r3, [pc, #260]	; (cf24 <z_impl_log_process+0x138>)
    ce20:	e8d3 2fef 	ldaex	r2, [r3]
    ce24:	3a01      	subs	r2, #1
    ce26:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ce2a:	2900      	cmp	r1, #0
    ce2c:	d1f8      	bne.n	ce20 <z_impl_log_process+0x34>
	if (!bypass) {
    ce2e:	b194      	cbz	r4, ce56 <z_impl_log_process+0x6a>
	log_msg_put(msg);
    ce30:	4628      	mov	r0, r5
    ce32:	f005 fa42 	bl	122ba <log_msg_put>
	if (!bypass && dropped_cnt) {
    ce36:	b924      	cbnz	r4, ce42 <z_impl_log_process+0x56>
    ce38:	4b3b      	ldr	r3, [pc, #236]	; (cf28 <z_impl_log_process+0x13c>)
    ce3a:	681b      	ldr	r3, [r3, #0]
    ce3c:	b10b      	cbz	r3, ce42 <z_impl_log_process+0x56>
		dropped_notify();
    ce3e:	f7ff ff19 	bl	cc74 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    ce42:	4837      	ldr	r0, [pc, #220]	; (cf20 <z_impl_log_process+0x134>)
    ce44:	f005 f92d 	bl	120a2 <log_list_head_peek>
    ce48:	1e04      	subs	r4, r0, #0
    ce4a:	bf18      	it	ne
    ce4c:	2401      	movne	r4, #1
}
    ce4e:	4620      	mov	r0, r4
    ce50:	b005      	add	sp, #20
    ce52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    ce56:	4b35      	ldr	r3, [pc, #212]	; (cf2c <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    ce58:	781b      	ldrb	r3, [r3, #0]
    ce5a:	b9cb      	cbnz	r3, ce90 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ce5c:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    ce5e:	07db      	lsls	r3, r3, #31
    ce60:	d416      	bmi.n	ce90 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
    ce62:	f005 fa39 	bl	122d8 <log_msg_str_get>
    ce66:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    ce68:	4628      	mov	r0, r5
    ce6a:	f005 fa04 	bl	12276 <log_msg_nargs_get>
    ce6e:	4601      	mov	r1, r0
    ce70:	4640      	mov	r0, r8
    ce72:	f005 f92b 	bl	120cc <z_log_get_s_mask>
    ce76:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    ce78:	4f2d      	ldr	r7, [pc, #180]	; (cf30 <z_impl_log_process+0x144>)
    ce7a:	4b2e      	ldr	r3, [pc, #184]	; (cf34 <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    ce7c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; cf50 <z_impl_log_process+0x164>
    ce80:	1bdb      	subs	r3, r3, r7
    ce82:	08db      	lsrs	r3, r3, #3
    ce84:	9303      	str	r3, [sp, #12]
    ce86:	4b2c      	ldr	r3, [pc, #176]	; (cf38 <z_impl_log_process+0x14c>)
    ce88:	1bdb      	subs	r3, r3, r7
    ce8a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    ce8e:	b936      	cbnz	r6, ce9e <z_impl_log_process+0xb2>
    ce90:	4e2a      	ldr	r6, [pc, #168]	; (cf3c <z_impl_log_process+0x150>)
    ce92:	4f2b      	ldr	r7, [pc, #172]	; (cf40 <z_impl_log_process+0x154>)
    ce94:	f04f 0800 	mov.w	r8, #0
    ce98:	1bbf      	subs	r7, r7, r6
    ce9a:	113f      	asrs	r7, r7, #4
    ce9c:	e03a      	b.n	cf14 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
    ce9e:	fab6 f186 	clz	r1, r6
    cea2:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    cea6:	4649      	mov	r1, r9
    cea8:	4628      	mov	r0, r5
    ceaa:	f005 f9e7 	bl	1227c <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    ceae:	4b25      	ldr	r3, [pc, #148]	; (cf44 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
    ceb0:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    ceb2:	4298      	cmp	r0, r3
    ceb4:	d302      	bcc.n	cebc <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    ceb6:	4b24      	ldr	r3, [pc, #144]	; (cf48 <z_impl_log_process+0x15c>)
    ceb8:	4298      	cmp	r0, r3
    ceba:	d31a      	bcc.n	cef2 <z_impl_log_process+0x106>
    cebc:	4608      	mov	r0, r1
    cebe:	f7ff ff87 	bl	cdd0 <log_is_strdup>
    cec2:	4602      	mov	r2, r0
    cec4:	b9a8      	cbnz	r0, cef2 <z_impl_log_process+0x106>
    cec6:	4b21      	ldr	r3, [pc, #132]	; (cf4c <z_impl_log_process+0x160>)
    cec8:	4299      	cmp	r1, r3
    ceca:	d012      	beq.n	cef2 <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
    cecc:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    cece:	9903      	ldr	r1, [sp, #12]
    ced0:	f3c3 1389 	ubfx	r3, r3, #6, #10
    ced4:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    ced6:	bf38      	it	cc
    ced8:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    cedc:	ea4f 138a 	mov.w	r3, sl, lsl #6
    cee0:	f043 0301 	orr.w	r3, r3, #1
    cee4:	f8ad 3000 	strh.w	r3, [sp]
    cee8:	4649      	mov	r1, r9
    ceea:	4643      	mov	r3, r8
    ceec:	4658      	mov	r0, fp
    ceee:	f005 f947 	bl	12180 <log_3>
		mask &= ~BIT(idx);
    cef2:	2101      	movs	r1, #1
    cef4:	fa01 f109 	lsl.w	r1, r1, r9
    cef8:	ea26 0601 	bic.w	r6, r6, r1
    cefc:	e7c7      	b.n	ce8e <z_impl_log_process+0xa2>
	return backend->cb->active;
    cefe:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    cf00:	795b      	ldrb	r3, [r3, #5]
    cf02:	b123      	cbz	r3, cf0e <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
    cf04:	6833      	ldr	r3, [r6, #0]
    cf06:	4629      	mov	r1, r5
    cf08:	4630      	mov	r0, r6
    cf0a:	681b      	ldr	r3, [r3, #0]
    cf0c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    cf0e:	f108 0801 	add.w	r8, r8, #1
    cf12:	3610      	adds	r6, #16
    cf14:	45b8      	cmp	r8, r7
    cf16:	dbf2      	blt.n	cefe <z_impl_log_process+0x112>
    cf18:	e78a      	b.n	ce30 <z_impl_log_process+0x44>
    cf1a:	bf00      	nop
    cf1c:	20010756 	.word	0x20010756
    cf20:	20010578 	.word	0x20010578
    cf24:	2001056c 	.word	0x2001056c
    cf28:	20010570 	.word	0x20010570
    cf2c:	20010757 	.word	0x20010757
    cf30:	00014394 	.word	0x00014394
    cf34:	000143f4 	.word	0x000143f4
    cf38:	000143b4 	.word	0x000143b4
    cf3c:	000143f4 	.word	0x000143f4
    cf40:	00014404 	.word	0x00014404
    cf44:	0001410c 	.word	0x0001410c
    cf48:	000151a0 	.word	0x000151a0
    cf4c:	0001476e 	.word	0x0001476e
    cf50:	00014788 	.word	0x00014788

0000cf54 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    cf54:	4b27      	ldr	r3, [pc, #156]	; (cff4 <msg_finalize+0xa0>)
{
    cf56:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    cf58:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    cf5a:	8141      	strh	r1, [r0, #10]
{
    cf5c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    cf5e:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    cf60:	4d25      	ldr	r5, [pc, #148]	; (cff8 <msg_finalize+0xa4>)
    cf62:	60e0      	str	r0, [r4, #12]
    cf64:	e8d5 3fef 	ldaex	r3, [r5]
    cf68:	3301      	adds	r3, #1
    cf6a:	e8c5 3fe2 	stlex	r2, r3, [r5]
    cf6e:	2a00      	cmp	r2, #0
    cf70:	d1f8      	bne.n	cf64 <msg_finalize+0x10>
	__asm__ volatile(
    cf72:	f04f 0320 	mov.w	r3, #32
    cf76:	f3ef 8611 	mrs	r6, BASEPRI
    cf7a:	f383 8811 	msr	BASEPRI, r3
    cf7e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    cf82:	481e      	ldr	r0, [pc, #120]	; (cffc <msg_finalize+0xa8>)
    cf84:	4621      	mov	r1, r4
    cf86:	f005 f882 	bl	1208e <log_list_add_tail>
	__asm__ volatile(
    cf8a:	f386 8811 	msr	BASEPRI, r6
    cf8e:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    cf92:	4b1b      	ldr	r3, [pc, #108]	; (d000 <msg_finalize+0xac>)
    cf94:	781b      	ldrb	r3, [r3, #0]
    cf96:	b183      	cbz	r3, cfba <msg_finalize+0x66>
	__asm__ volatile(
    cf98:	f04f 0320 	mov.w	r3, #32
    cf9c:	f3ef 8411 	mrs	r4, BASEPRI
    cfa0:	f383 8811 	msr	BASEPRI, r3
    cfa4:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    cfa8:	2000      	movs	r0, #0
    cfaa:	f7ff ff1f 	bl	cdec <z_impl_log_process>
	__asm__ volatile(
    cfae:	f384 8811 	msr	BASEPRI, r4
    cfb2:	f3bf 8f6f 	isb	sy
}
    cfb6:	b002      	add	sp, #8
    cfb8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    cfba:	4a12      	ldr	r2, [pc, #72]	; (d004 <msg_finalize+0xb0>)
    cfbc:	682b      	ldr	r3, [r5, #0]
    cfbe:	6812      	ldr	r2, [r2, #0]
    cfc0:	2a00      	cmp	r2, #0
    cfc2:	d0f8      	beq.n	cfb6 <msg_finalize+0x62>
    cfc4:	2b01      	cmp	r3, #1
    cfc6:	d10a      	bne.n	cfde <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
    cfc8:	2200      	movs	r2, #0
    cfca:	2300      	movs	r3, #0
    cfcc:	480e      	ldr	r0, [pc, #56]	; (d008 <msg_finalize+0xb4>)
    cfce:	e9cd 2300 	strd	r2, r3, [sp]
    cfd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    cfd6:	2300      	movs	r3, #0
    cfd8:	f004 fe06 	bl	11be8 <z_impl_k_timer_start>
    cfdc:	e7eb      	b.n	cfb6 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    cfde:	2b0a      	cmp	r3, #10
    cfe0:	d1e9      	bne.n	cfb6 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    cfe2:	4809      	ldr	r0, [pc, #36]	; (d008 <msg_finalize+0xb4>)
    cfe4:	f007 f862 	bl	140ac <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    cfe8:	4808      	ldr	r0, [pc, #32]	; (d00c <msg_finalize+0xb8>)
}
    cfea:	b002      	add	sp, #8
    cfec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cff0:	f004 bb78 	b.w	116e4 <z_impl_k_sem_give>
    cff4:	20010024 	.word	0x20010024
    cff8:	2001056c 	.word	0x2001056c
    cffc:	20010578 	.word	0x20010578
    d000:	20010757 	.word	0x20010757
    d004:	2001059c 	.word	0x2001059c
    d008:	20010168 	.word	0x20010168
    d00c:	20010158 	.word	0x20010158

0000d010 <log_process_thread_func>:
{
    d010:	b510      	push	{r4, lr}
	log_init();
    d012:	f7ff fe85 	bl	cd20 <log_init>
	return z_impl_k_current_get();
    d016:	f004 fb5f 	bl	116d8 <z_impl_k_current_get>
	proc_tid = process_tid;
    d01a:	4b0c      	ldr	r3, [pc, #48]	; (d04c <log_process_thread_func+0x3c>)
    d01c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    d01e:	b130      	cbz	r0, d02e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    d020:	4b0b      	ldr	r3, [pc, #44]	; (d050 <log_process_thread_func+0x40>)
	    process_tid &&
    d022:	681b      	ldr	r3, [r3, #0]
    d024:	2b09      	cmp	r3, #9
    d026:	dd02      	ble.n	d02e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    d028:	480a      	ldr	r0, [pc, #40]	; (d054 <log_process_thread_func+0x44>)
    d02a:	f004 fb5b 	bl	116e4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    d02e:	4c09      	ldr	r4, [pc, #36]	; (d054 <log_process_thread_func+0x44>)
    d030:	2000      	movs	r0, #0
    d032:	f7ff fedb 	bl	cdec <z_impl_log_process>
		if (log_process(false) == false) {
    d036:	2800      	cmp	r0, #0
    d038:	d1fa      	bne.n	d030 <log_process_thread_func+0x20>
    d03a:	f04f 32ff 	mov.w	r2, #4294967295
    d03e:	f04f 33ff 	mov.w	r3, #4294967295
    d042:	4620      	mov	r0, r4
    d044:	f004 fb6e 	bl	11724 <z_impl_k_sem_take>
    d048:	e7f2      	b.n	d030 <log_process_thread_func+0x20>
    d04a:	bf00      	nop
    d04c:	2001059c 	.word	0x2001059c
    d050:	2001056c 	.word	0x2001056c
    d054:	20010158 	.word	0x20010158

0000d058 <z_impl_log_panic>:
{
    d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    d05a:	4f0e      	ldr	r7, [pc, #56]	; (d094 <z_impl_log_panic+0x3c>)
    d05c:	783d      	ldrb	r5, [r7, #0]
    d05e:	b975      	cbnz	r5, d07e <z_impl_log_panic+0x26>
	log_init();
    d060:	f7ff fe5e 	bl	cd20 <log_init>
	return __log_backends_end - __log_backends_start;
    d064:	4c0c      	ldr	r4, [pc, #48]	; (d098 <z_impl_log_panic+0x40>)
    d066:	4e0d      	ldr	r6, [pc, #52]	; (d09c <z_impl_log_panic+0x44>)
    d068:	1b36      	subs	r6, r6, r4
    d06a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    d06c:	42b5      	cmp	r5, r6
    d06e:	db07      	blt.n	d080 <z_impl_log_panic+0x28>
    d070:	2000      	movs	r0, #0
    d072:	f7ff febb 	bl	cdec <z_impl_log_process>
		while (log_process(false) == true) {
    d076:	2800      	cmp	r0, #0
    d078:	d1fa      	bne.n	d070 <z_impl_log_panic+0x18>
	panic_mode = true;
    d07a:	2301      	movs	r3, #1
    d07c:	703b      	strb	r3, [r7, #0]
}
    d07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    d080:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    d082:	795b      	ldrb	r3, [r3, #5]
    d084:	b11b      	cbz	r3, d08e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    d086:	6823      	ldr	r3, [r4, #0]
    d088:	4620      	mov	r0, r4
    d08a:	691b      	ldr	r3, [r3, #16]
    d08c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    d08e:	3501      	adds	r5, #1
    d090:	3410      	adds	r4, #16
    d092:	e7eb      	b.n	d06c <z_impl_log_panic+0x14>
    d094:	20010757 	.word	0x20010757
    d098:	000143f4 	.word	0x000143f4
    d09c:	00014404 	.word	0x00014404

0000d0a0 <log_free>:
{
    d0a0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    d0a2:	3804      	subs	r0, #4
    d0a4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    d0a6:	e8d0 3fef 	ldaex	r3, [r0]
    d0aa:	1e5a      	subs	r2, r3, #1
    d0ac:	e8c0 2fe1 	stlex	r1, r2, [r0]
    d0b0:	2900      	cmp	r1, #0
    d0b2:	d1f8      	bne.n	d0a6 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    d0b4:	2b01      	cmp	r3, #1
    d0b6:	d103      	bne.n	d0c0 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    d0b8:	4803      	ldr	r0, [pc, #12]	; (d0c8 <log_free+0x28>)
    d0ba:	a901      	add	r1, sp, #4
    d0bc:	f003 fec8 	bl	10e50 <k_mem_slab_free>
}
    d0c0:	b003      	add	sp, #12
    d0c2:	f85d fb04 	ldr.w	pc, [sp], #4
    d0c6:	bf00      	nop
    d0c8:	20010580 	.word	0x20010580

0000d0cc <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    d0cc:	2320      	movs	r3, #32
    d0ce:	4902      	ldr	r1, [pc, #8]	; (d0d8 <log_msg_pool_init+0xc>)
    d0d0:	461a      	mov	r2, r3
    d0d2:	4802      	ldr	r0, [pc, #8]	; (d0dc <log_msg_pool_init+0x10>)
    d0d4:	f006 be9f 	b.w	13e16 <k_mem_slab_init>
    d0d8:	20011c40 	.word	0x20011c40
    d0dc:	200105a0 	.word	0x200105a0

0000d0e0 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    d0e0:	2300      	movs	r3, #0
{
    d0e2:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    d0e4:	4d09      	ldr	r5, [pc, #36]	; (d10c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    d0e6:	9301      	str	r3, [sp, #4]
    d0e8:	2001      	movs	r0, #1
    d0ea:	f7ff fe7f 	bl	cdec <z_impl_log_process>
    d0ee:	4604      	mov	r4, r0
			log_dropped();
    d0f0:	f7ff fde2 	bl	ccb8 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    d0f4:	2200      	movs	r2, #0
    d0f6:	2300      	movs	r3, #0
    d0f8:	4628      	mov	r0, r5
    d0fa:	a901      	add	r1, sp, #4
    d0fc:	f003 fe76 	bl	10dec <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    d100:	b108      	cbz	r0, d106 <log_msg_no_space_handle+0x26>
    d102:	2c00      	cmp	r4, #0
    d104:	d1f0      	bne.n	d0e8 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    d106:	9801      	ldr	r0, [sp, #4]
    d108:	b003      	add	sp, #12
    d10a:	bd30      	pop	{r4, r5, pc}
    d10c:	200105a0 	.word	0x200105a0

0000d110 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
    d110:	2300      	movs	r3, #0
{
    d112:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    d114:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
    d116:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    d118:	4806      	ldr	r0, [pc, #24]	; (d134 <log_msg_chunk_alloc+0x24>)
    d11a:	2300      	movs	r3, #0
    d11c:	a901      	add	r1, sp, #4
    d11e:	f003 fe65 	bl	10dec <k_mem_slab_alloc>
	if (err != 0) {
    d122:	b110      	cbz	r0, d12a <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    d124:	f7ff ffdc 	bl	d0e0 <log_msg_no_space_handle>
    d128:	9001      	str	r0, [sp, #4]
}
    d12a:	9801      	ldr	r0, [sp, #4]
    d12c:	b003      	add	sp, #12
    d12e:	f85d fb04 	ldr.w	pc, [sp], #4
    d132:	bf00      	nop
    d134:	200105a0 	.word	0x200105a0

0000d138 <msg_free>:
{
    d138:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d13a:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    d13c:	7a45      	ldrb	r5, [r0, #9]
{
    d13e:	b085      	sub	sp, #20
    d140:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    d142:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
    d144:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    d148:	d41c      	bmi.n	d184 <msg_free+0x4c>
    d14a:	b1dd      	cbz	r5, d184 <msg_free+0x4c>
		uint32_t smask = 0;
    d14c:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    d14e:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    d150:	4631      	mov	r1, r6
    d152:	9801      	ldr	r0, [sp, #4]
    d154:	f005 f892 	bl	1227c <log_msg_arg_get>
    d158:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    d15a:	f7ff fe39 	bl	cdd0 <log_is_strdup>
    d15e:	b170      	cbz	r0, d17e <msg_free+0x46>
				if (smask == 0) {
    d160:	b934      	cbnz	r4, d170 <msg_free+0x38>
					smask = z_log_get_s_mask(
    d162:	9b01      	ldr	r3, [sp, #4]
    d164:	4629      	mov	r1, r5
    d166:	6918      	ldr	r0, [r3, #16]
    d168:	f004 ffb0 	bl	120cc <z_log_get_s_mask>
					if (smask == 0) {
    d16c:	4604      	mov	r4, r0
    d16e:	b148      	cbz	r0, d184 <msg_free+0x4c>
				if (smask & BIT(i)) {
    d170:	fa24 f306 	lsr.w	r3, r4, r6
    d174:	07d9      	lsls	r1, r3, #31
    d176:	d502      	bpl.n	d17e <msg_free+0x46>
					log_free(buf);
    d178:	4638      	mov	r0, r7
    d17a:	f7ff ff91 	bl	d0a0 <log_free>
		for (i = 0; i < nargs; i++) {
    d17e:	3601      	adds	r6, #1
    d180:	42ae      	cmp	r6, r5
    d182:	d3e5      	bcc.n	d150 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
    d184:	9b01      	ldr	r3, [sp, #4]
    d186:	7a1a      	ldrb	r2, [r3, #8]
    d188:	0792      	lsls	r2, r2, #30
    d18a:	d504      	bpl.n	d196 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
    d18c:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    d18e:	4c08      	ldr	r4, [pc, #32]	; (d1b0 <msg_free+0x78>)
    d190:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    d192:	9b03      	ldr	r3, [sp, #12]
    d194:	b92b      	cbnz	r3, d1a2 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    d196:	4806      	ldr	r0, [pc, #24]	; (d1b0 <msg_free+0x78>)
    d198:	a901      	add	r1, sp, #4
    d19a:	f003 fe59 	bl	10e50 <k_mem_slab_free>
}
    d19e:	b005      	add	sp, #20
    d1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    d1a2:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    d1a4:	4620      	mov	r0, r4
    d1a6:	a903      	add	r1, sp, #12
    d1a8:	f003 fe52 	bl	10e50 <k_mem_slab_free>
		cont = next;
    d1ac:	9503      	str	r5, [sp, #12]
    d1ae:	e7f0      	b.n	d192 <msg_free+0x5a>
    d1b0:	200105a0 	.word	0x200105a0

0000d1b4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    d1b4:	b40e      	push	{r1, r2, r3}
    d1b6:	b503      	push	{r0, r1, lr}
    d1b8:	ab03      	add	r3, sp, #12
    d1ba:	f853 2b04 	ldr.w	r2, [r3], #4
    d1be:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    d1c0:	4804      	ldr	r0, [pc, #16]	; (d1d4 <print_formatted+0x20>)
	va_start(args, fmt);
    d1c2:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    d1c4:	f7ff faae 	bl	c724 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    d1c8:	2000      	movs	r0, #0
    d1ca:	b002      	add	sp, #8
    d1cc:	f85d eb04 	ldr.w	lr, [sp], #4
    d1d0:	b003      	add	sp, #12
    d1d2:	4770      	bx	lr
    d1d4:	000125d9 	.word	0x000125d9

0000d1d8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    d1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    d1dc:	f011 0402 	ands.w	r4, r1, #2
{
    d1e0:	b085      	sub	sp, #20
    d1e2:	4690      	mov	r8, r2
    d1e4:	4606      	mov	r6, r0
    d1e6:	461a      	mov	r2, r3
    d1e8:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    d1ec:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    d1f0:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    d1f4:	d007      	beq.n	d206 <prefix_print+0x2e>
	if (!format) {
    d1f6:	f011 0f44 	tst.w	r1, #68	; 0x44
    d1fa:	d137      	bne.n	d26c <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    d1fc:	4932      	ldr	r1, [pc, #200]	; (d2c8 <prefix_print+0xf0>)
    d1fe:	f7ff ffd9 	bl	d1b4 <print_formatted>
			length = print_formatted(log_output,
    d202:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    d204:	460c      	mov	r4, r1
	if (color) {
    d206:	f1b9 0f00 	cmp.w	r9, #0
    d20a:	d00a      	beq.n	d222 <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    d20c:	4b2f      	ldr	r3, [pc, #188]	; (d2cc <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    d20e:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
    d210:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    d214:	4b2e      	ldr	r3, [pc, #184]	; (d2d0 <prefix_print+0xf8>)
    d216:	492f      	ldr	r1, [pc, #188]	; (d2d4 <prefix_print+0xfc>)
    d218:	2a00      	cmp	r2, #0
    d21a:	bf08      	it	eq
    d21c:	461a      	moveq	r2, r3
    d21e:	f7ff ffc9 	bl	d1b4 <print_formatted>
	if (level_on) {
    d222:	b13d      	cbz	r5, d234 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    d224:	4b2c      	ldr	r3, [pc, #176]	; (d2d8 <prefix_print+0x100>)
    d226:	4630      	mov	r0, r6
    d228:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    d22c:	492b      	ldr	r1, [pc, #172]	; (d2dc <prefix_print+0x104>)
    d22e:	f7ff ffc1 	bl	d1b4 <print_formatted>
    d232:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    d234:	f1b8 0f00 	cmp.w	r8, #0
    d238:	d043      	beq.n	d2c2 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    d23a:	2301      	movs	r3, #1
    d23c:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    d240:	4b27      	ldr	r3, [pc, #156]	; (d2e0 <prefix_print+0x108>)
    d242:	f017 0f10 	tst.w	r7, #16
    d246:	4f27      	ldr	r7, [pc, #156]	; (d2e4 <prefix_print+0x10c>)
    d248:	bf18      	it	ne
    d24a:	461f      	movne	r7, r3
    d24c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    d250:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    d254:	f7ff fd3c 	bl	ccd0 <log_source_name_get>
    d258:	4639      	mov	r1, r7
    d25a:	4602      	mov	r2, r0
    d25c:	4630      	mov	r0, r6
    d25e:	f7ff ffa9 	bl	d1b4 <print_formatted>
    d262:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    d264:	4420      	add	r0, r4
    d266:	b005      	add	sp, #20
    d268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    d26c:	4b1e      	ldr	r3, [pc, #120]	; (d2e8 <prefix_print+0x110>)
    d26e:	6819      	ldr	r1, [r3, #0]
    d270:	2900      	cmp	r1, #0
    d272:	d0c7      	beq.n	d204 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    d274:	4b1d      	ldr	r3, [pc, #116]	; (d2ec <prefix_print+0x114>)
    d276:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    d27a:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
    d27c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    d280:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
    d284:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    d288:	fbb4 f2fe 	udiv	r2, r4, lr
    d28c:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    d290:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    d294:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d298:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    d29c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d2a0:	fb01 441b 	mls	r4, r1, fp, r4
    d2a4:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    d2a8:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    d2ac:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    d2b0:	e9cd b101 	strd	fp, r1, [sp, #4]
    d2b4:	fb0a e113 	mls	r1, sl, r3, lr
    d2b8:	9100      	str	r1, [sp, #0]
    d2ba:	490d      	ldr	r1, [pc, #52]	; (d2f0 <prefix_print+0x118>)
    d2bc:	f7ff ff7a 	bl	d1b4 <print_formatted>
    d2c0:	e79f      	b.n	d202 <prefix_print+0x2a>
	total += print_formatted(log_output,
    d2c2:	4f08      	ldr	r7, [pc, #32]	; (d2e4 <prefix_print+0x10c>)
    d2c4:	e7c2      	b.n	d24c <prefix_print+0x74>
    d2c6:	bf00      	nop
    d2c8:	000147d9 	.word	0x000147d9
    d2cc:	00014458 	.word	0x00014458
    d2d0:	000147cb 	.word	0x000147cb
    d2d4:	00014e92 	.word	0x00014e92
    d2d8:	0001446c 	.word	0x0001446c
    d2dc:	000147fe 	.word	0x000147fe
    d2e0:	000147d5 	.word	0x000147d5
    d2e4:	000147d0 	.word	0x000147d0
    d2e8:	200105bc 	.word	0x200105bc
    d2ec:	200105c0 	.word	0x200105c0
    d2f0:	000147e2 	.word	0x000147e2

0000d2f4 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    d2f4:	b538      	push	{r3, r4, r5, lr}
    d2f6:	460c      	mov	r4, r1
	if (color) {
    d2f8:	07e1      	lsls	r1, r4, #31
{
    d2fa:	4605      	mov	r5, r0
	if (color) {
    d2fc:	d503      	bpl.n	d306 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    d2fe:	4a08      	ldr	r2, [pc, #32]	; (d320 <postfix_print+0x2c>)
    d300:	4908      	ldr	r1, [pc, #32]	; (d324 <postfix_print+0x30>)
    d302:	f7ff ff57 	bl	d1b4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d306:	06e2      	lsls	r2, r4, #27
    d308:	d408      	bmi.n	d31c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    d30a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    d30c:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    d30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    d312:	bf4c      	ite	mi
    d314:	4904      	ldrmi	r1, [pc, #16]	; (d328 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    d316:	4905      	ldrpl	r1, [pc, #20]	; (d32c <postfix_print+0x38>)
    d318:	f7ff bf4c 	b.w	d1b4 <print_formatted>
}
    d31c:	bd38      	pop	{r3, r4, r5, pc}
    d31e:	bf00      	nop
    d320:	000147cb 	.word	0x000147cb
    d324:	00014e92 	.word	0x00014e92
    d328:	0001503f 	.word	0x0001503f
    d32c:	0001503e 	.word	0x0001503e

0000d330 <hexdump_line_print>:
{
    d330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d334:	461d      	mov	r5, r3
    d336:	9b08      	ldr	r3, [sp, #32]
    d338:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d33a:	06da      	lsls	r2, r3, #27
{
    d33c:	4604      	mov	r4, r0
    d33e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d340:	d405      	bmi.n	d34e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    d342:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    d344:	bf4c      	ite	mi
    d346:	492a      	ldrmi	r1, [pc, #168]	; (d3f0 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    d348:	492a      	ldrpl	r1, [pc, #168]	; (d3f4 <hexdump_line_print+0xc4>)
    d34a:	f7ff ff33 	bl	d1b4 <print_formatted>
{
    d34e:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
    d352:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d3fc <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
    d356:	45a8      	cmp	r8, r5
    d358:	db2a      	blt.n	d3b0 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d35a:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    d35c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d400 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    d360:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d404 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    d364:	f8df a094 	ldr.w	sl, [pc, #148]	; d3fc <hexdump_line_print+0xcc>
		if (i < length) {
    d368:	42bd      	cmp	r5, r7
    d36a:	d22f      	bcs.n	d3cc <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    d36c:	4649      	mov	r1, r9
    d36e:	4620      	mov	r0, r4
    d370:	5d72      	ldrb	r2, [r6, r5]
    d372:	f7ff ff1f 	bl	d1b4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d376:	3501      	adds	r5, #1
    d378:	2d10      	cmp	r5, #16
    d37a:	d120      	bne.n	d3be <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    d37c:	4620      	mov	r0, r4
    d37e:	491e      	ldr	r1, [pc, #120]	; (d3f8 <hexdump_line_print+0xc8>)
    d380:	f7ff ff18 	bl	d1b4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d384:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    d386:	f8df 8074 	ldr.w	r8, [pc, #116]	; d3fc <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    d38a:	f8df 907c 	ldr.w	r9, [pc, #124]	; d408 <hexdump_line_print+0xd8>
		if (i < length) {
    d38e:	42af      	cmp	r7, r5
    d390:	d928      	bls.n	d3e4 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    d392:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    d394:	4649      	mov	r1, r9
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    d396:	f1a2 0320 	sub.w	r3, r2, #32
    d39a:	2b5f      	cmp	r3, #95	; 0x5f
    d39c:	bf28      	it	cs
    d39e:	222e      	movcs	r2, #46	; 0x2e
    d3a0:	4620      	mov	r0, r4
    d3a2:	f7ff ff07 	bl	d1b4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d3a6:	3501      	adds	r5, #1
    d3a8:	2d10      	cmp	r5, #16
    d3aa:	d114      	bne.n	d3d6 <hexdump_line_print+0xa6>
}
    d3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    d3b0:	4649      	mov	r1, r9
    d3b2:	4620      	mov	r0, r4
    d3b4:	f7ff fefe 	bl	d1b4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    d3b8:	f108 0801 	add.w	r8, r8, #1
    d3bc:	e7cb      	b.n	d356 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    d3be:	076a      	lsls	r2, r5, #29
    d3c0:	d1d2      	bne.n	d368 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    d3c2:	4651      	mov	r1, sl
    d3c4:	4620      	mov	r0, r4
    d3c6:	f7ff fef5 	bl	d1b4 <print_formatted>
    d3ca:	e7cd      	b.n	d368 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    d3cc:	4641      	mov	r1, r8
    d3ce:	4620      	mov	r0, r4
    d3d0:	f7ff fef0 	bl	d1b4 <print_formatted>
    d3d4:	e7cf      	b.n	d376 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    d3d6:	076b      	lsls	r3, r5, #29
    d3d8:	d1d9      	bne.n	d38e <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    d3da:	4641      	mov	r1, r8
    d3dc:	4620      	mov	r0, r4
    d3de:	f7ff fee9 	bl	d1b4 <print_formatted>
    d3e2:	e7d4      	b.n	d38e <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    d3e4:	4641      	mov	r1, r8
    d3e6:	4620      	mov	r0, r4
    d3e8:	f7ff fee4 	bl	d1b4 <print_formatted>
    d3ec:	e7db      	b.n	d3a6 <hexdump_line_print+0x76>
    d3ee:	bf00      	nop
    d3f0:	0001503f 	.word	0x0001503f
    d3f4:	0001503e 	.word	0x0001503e
    d3f8:	0001480a 	.word	0x0001480a
    d3fc:	00015082 	.word	0x00015082
    d400:	00015080 	.word	0x00015080
    d404:	00014804 	.word	0x00014804
    d408:	0001480c 	.word	0x0001480c

0000d40c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    d40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    d410:	7a8b      	ldrb	r3, [r1, #10]
    d412:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d414:	f013 0807 	ands.w	r8, r3, #7
{
    d418:	4605      	mov	r5, r0
    d41a:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d41c:	7a0a      	ldrb	r2, [r1, #8]
    d41e:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d420:	d021      	beq.n	d466 <log_output_msg_process+0x5a>
    d422:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    d424:	8949      	ldrh	r1, [r1, #10]
    d426:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    d42a:	f3c1 1189 	ubfx	r1, r1, #6, #10
    d42e:	e9cd 8300 	strd	r8, r3, [sp]
    d432:	9102      	str	r1, [sp, #8]
    d434:	68f3      	ldr	r3, [r6, #12]
    d436:	4639      	mov	r1, r7
    d438:	f002 0201 	and.w	r2, r2, #1
    d43c:	f7ff fecc 	bl	d1d8 <prefix_print>
    d440:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d442:	7a34      	ldrb	r4, [r6, #8]
    d444:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    d446:	f014 0401 	ands.w	r4, r4, #1
    d44a:	d00e      	beq.n	d46a <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    d44c:	4629      	mov	r1, r5
    d44e:	4630      	mov	r0, r6
    d450:	f004 ff58 	bl	12304 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    d454:	f1b8 0f00 	cmp.w	r8, #0
    d458:	d02b      	beq.n	d4b2 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    d45a:	4642      	mov	r2, r8
    d45c:	4639      	mov	r1, r7
    d45e:	4628      	mov	r0, r5
    d460:	f7ff ff48 	bl	d2f4 <postfix_print>
    d464:	e025      	b.n	d4b2 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    d466:	46c1      	mov	r9, r8
    d468:	e7eb      	b.n	d442 <log_output_msg_process+0x36>
	} else if (raw_string) {
    d46a:	f1b8 0f00 	cmp.w	r8, #0
    d46e:	d126      	bne.n	d4be <log_output_msg_process+0xb2>
	size_t offset = 0;
    d470:	4627      	mov	r7, r4
		length = log_output->size;
    d472:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    d474:	aa06      	add	r2, sp, #24
		length = log_output->size;
    d476:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    d478:	4630      	mov	r0, r6
    d47a:	463b      	mov	r3, r7
    d47c:	68a9      	ldr	r1, [r5, #8]
    d47e:	f004 ff2d 	bl	122dc <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    d482:	9a06      	ldr	r2, [sp, #24]
    d484:	686b      	ldr	r3, [r5, #4]
    d486:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    d488:	b13a      	cbz	r2, d49a <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    d48a:	68ab      	ldr	r3, [r5, #8]
    d48c:	4413      	add	r3, r2
    d48e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    d492:	f1a4 030a 	sub.w	r3, r4, #10
    d496:	425c      	negs	r4, r3
    d498:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    d49a:	4628      	mov	r0, r5
    d49c:	f005 f88f 	bl	125be <log_output_flush>
		offset += length;
    d4a0:	9b06      	ldr	r3, [sp, #24]
    d4a2:	441f      	add	r7, r3
	} while (length > 0);
    d4a4:	2b00      	cmp	r3, #0
    d4a6:	d1e4      	bne.n	d472 <log_output_msg_process+0x66>
	if (eol) {
    d4a8:	b11c      	cbz	r4, d4b2 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    d4aa:	4628      	mov	r0, r5
    d4ac:	4913      	ldr	r1, [pc, #76]	; (d4fc <log_output_msg_process+0xf0>)
    d4ae:	f7ff fe81 	bl	d1b4 <print_formatted>
	}

	log_output_flush(log_output);
    d4b2:	4628      	mov	r0, r5
    d4b4:	f005 f883 	bl	125be <log_output_flush>
}
    d4b8:	b00a      	add	sp, #40	; 0x28
    d4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    d4be:	4630      	mov	r0, r6
    d4c0:	f004 ff0a 	bl	122d8 <log_msg_str_get>
    d4c4:	490e      	ldr	r1, [pc, #56]	; (d500 <log_output_msg_process+0xf4>)
    d4c6:	4602      	mov	r2, r0
    d4c8:	4628      	mov	r0, r5
    d4ca:	f7ff fe73 	bl	d1b4 <print_formatted>
		length = sizeof(buf);
    d4ce:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    d4d2:	aa05      	add	r2, sp, #20
    d4d4:	4623      	mov	r3, r4
    d4d6:	4630      	mov	r0, r6
    d4d8:	a906      	add	r1, sp, #24
		length = sizeof(buf);
    d4da:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    d4de:	f004 fefd 	bl	122dc <log_msg_hexdump_data_get>
		if (length) {
    d4e2:	9a05      	ldr	r2, [sp, #20]
    d4e4:	2a00      	cmp	r2, #0
    d4e6:	d0b8      	beq.n	d45a <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    d4e8:	464b      	mov	r3, r9
    d4ea:	4628      	mov	r0, r5
    d4ec:	9700      	str	r7, [sp, #0]
    d4ee:	a906      	add	r1, sp, #24
    d4f0:	f7ff ff1e 	bl	d330 <hexdump_line_print>
			offset += length;
    d4f4:	9b05      	ldr	r3, [sp, #20]
    d4f6:	441c      	add	r4, r3
		length = sizeof(buf);
    d4f8:	e7eb      	b.n	d4d2 <log_output_msg_process+0xc6>
    d4fa:	bf00      	nop
    d4fc:	0001480f 	.word	0x0001480f
    d500:	00014e92 	.word	0x00014e92

0000d504 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    d504:	f242 730f 	movw	r3, #9999	; 0x270f
{
    d508:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    d50a:	428b      	cmp	r3, r1
    d50c:	bf28      	it	cs
    d50e:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    d510:	6805      	ldr	r5, [r0, #0]
{
    d512:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    d514:	2105      	movs	r1, #5
    d516:	4668      	mov	r0, sp
    d518:	4a0d      	ldr	r2, [pc, #52]	; (d550 <log_output_dropped_process+0x4c>)
    d51a:	f004 fc13 	bl	11d44 <snprintk>
    d51e:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    d520:	6863      	ldr	r3, [r4, #4]
    d522:	4628      	mov	r0, r5
    d524:	220b      	movs	r2, #11
    d526:	685b      	ldr	r3, [r3, #4]
    d528:	490a      	ldr	r1, [pc, #40]	; (d554 <log_output_dropped_process+0x50>)
    d52a:	f004 fede 	bl	122ea <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    d52e:	6863      	ldr	r3, [r4, #4]
    d530:	4632      	mov	r2, r6
    d532:	4669      	mov	r1, sp
    d534:	4628      	mov	r0, r5
    d536:	685b      	ldr	r3, [r3, #4]
    d538:	f004 fed7 	bl	122ea <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    d53c:	6863      	ldr	r3, [r4, #4]
    d53e:	221b      	movs	r2, #27
    d540:	4628      	mov	r0, r5
    d542:	685b      	ldr	r3, [r3, #4]
    d544:	4904      	ldr	r1, [pc, #16]	; (d558 <log_output_dropped_process+0x54>)
    d546:	f004 fed0 	bl	122ea <buffer_write>
		     log_output->control_block->ctx);
}
    d54a:	b002      	add	sp, #8
    d54c:	bd70      	pop	{r4, r5, r6, pc}
    d54e:	bf00      	nop
    d550:	000150dd 	.word	0x000150dd
    d554:	0001484d 	.word	0x0001484d
    d558:	00014831 	.word	0x00014831

0000d55c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    d55c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    d55e:	2100      	movs	r1, #0
	timestamp_div = 1U;
    d560:	4a07      	ldr	r2, [pc, #28]	; (d580 <log_output_timestamp_freq_set+0x24>)
{
    d562:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    d564:	4c07      	ldr	r4, [pc, #28]	; (d584 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    d566:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    d568:	42a0      	cmp	r0, r4
    d56a:	d804      	bhi.n	d576 <log_output_timestamp_freq_set+0x1a>
    d56c:	b101      	cbz	r1, d570 <log_output_timestamp_freq_set+0x14>
    d56e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    d570:	4b05      	ldr	r3, [pc, #20]	; (d588 <log_output_timestamp_freq_set+0x2c>)
    d572:	6018      	str	r0, [r3, #0]
}
    d574:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    d576:	2101      	movs	r1, #1
		frequency /= 2U;
    d578:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    d57a:	005b      	lsls	r3, r3, #1
    d57c:	e7f4      	b.n	d568 <log_output_timestamp_freq_set+0xc>
    d57e:	bf00      	nop
    d580:	200105c0 	.word	0x200105c0
    d584:	000f4240 	.word	0x000f4240
    d588:	200105bc 	.word	0x200105bc

0000d58c <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    d58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d58e:	460d      	mov	r5, r1
    d590:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    d592:	4f06      	ldr	r7, [pc, #24]	; (d5ac <char_out+0x20>)
    d594:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    d596:	42b4      	cmp	r4, r6
    d598:	d101      	bne.n	d59e <char_out+0x12>
	}

	return length;
}
    d59a:	4628      	mov	r0, r5
    d59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    d59e:	6838      	ldr	r0, [r7, #0]
    d5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    d5a4:	6883      	ldr	r3, [r0, #8]
    d5a6:	685b      	ldr	r3, [r3, #4]
    d5a8:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    d5aa:	e7f4      	b.n	d596 <char_out+0xa>
    d5ac:	200105d8 	.word	0x200105d8

0000d5b0 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    d5b0:	4801      	ldr	r0, [pc, #4]	; (d5b8 <panic+0x8>)
    d5b2:	f005 b804 	b.w	125be <log_output_flush>
    d5b6:	bf00      	nop
    d5b8:	00014498 	.word	0x00014498

0000d5bc <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    d5bc:	4801      	ldr	r0, [pc, #4]	; (d5c4 <dropped+0x8>)
    d5be:	f7ff bfa1 	b.w	d504 <log_output_dropped_process>
    d5c2:	bf00      	nop
    d5c4:	00014498 	.word	0x00014498

0000d5c8 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    d5c8:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    d5ca:	4803      	ldr	r0, [pc, #12]	; (d5d8 <log_backend_uart_init+0x10>)
    d5cc:	f003 fa7c 	bl	10ac8 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    d5d0:	4b02      	ldr	r3, [pc, #8]	; (d5dc <log_backend_uart_init+0x14>)
    d5d2:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
}
    d5d4:	bd08      	pop	{r3, pc}
    d5d6:	bf00      	nop
    d5d8:	00014859 	.word	0x00014859
    d5dc:	200105d8 	.word	0x200105d8

0000d5e0 <put>:
{
    d5e0:	b510      	push	{r4, lr}
    d5e2:	460c      	mov	r4, r1
	log_msg_get(msg);
    d5e4:	4608      	mov	r0, r1
    d5e6:	f004 fe3d 	bl	12264 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    d5ea:	4621      	mov	r1, r4
    d5ec:	4804      	ldr	r0, [pc, #16]	; (d600 <put+0x20>)
    d5ee:	220f      	movs	r2, #15
    d5f0:	f7ff ff0c 	bl	d40c <log_output_msg_process>
	log_msg_put(msg);
    d5f4:	4620      	mov	r0, r4
}
    d5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d5fa:	f004 be5e 	b.w	122ba <log_msg_put>
    d5fe:	bf00      	nop
    d600:	00014498 	.word	0x00014498

0000d604 <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(const struct device *dev)
{
    d604:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
    d606:	4804      	ldr	r0, [pc, #16]	; (d618 <disk_init+0x14>)
    d608:	f006 fc20 	bl	13e4c <z_impl_k_mutex_init>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    d60c:	4b03      	ldr	r3, [pc, #12]	; (d61c <disk_init+0x18>)
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
    d60e:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
    d610:	e9c3 3300 	strd	r3, r3, [r3]
    d614:	bd08      	pop	{r3, pc}
    d616:	bf00      	nop
    d618:	200105e4 	.word	0x200105e4
    d61c:	200105dc 	.word	0x200105dc

0000d620 <disk_access_get_di>:
{
    d620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d622:	4607      	mov	r7, r0
	size_t name_len = strlen(name);
    d624:	f005 f939 	bl	1289a <strlen>
    d628:	4606      	mov	r6, r0
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    d62a:	4d12      	ldr	r5, [pc, #72]	; (d674 <disk_access_get_di+0x54>)
	return z_impl_k_mutex_lock(mutex, timeout);
    d62c:	f04f 32ff 	mov.w	r2, #4294967295
    d630:	f04f 33ff 	mov.w	r3, #4294967295
    d634:	4810      	ldr	r0, [pc, #64]	; (d678 <disk_access_get_di+0x58>)
    d636:	f003 fc35 	bl	10ea4 <z_impl_k_mutex_lock>
    d63a:	682c      	ldr	r4, [r5, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d63c:	42ac      	cmp	r4, r5
    d63e:	d10e      	bne.n	d65e <disk_access_get_di+0x3e>
	struct disk_info *disk = NULL, *itr;
    d640:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    d642:	480d      	ldr	r0, [pc, #52]	; (d678 <disk_access_get_di+0x58>)
    d644:	f003 fca6 	bl	10f94 <z_impl_k_mutex_unlock>
}
    d648:	4620      	mov	r0, r4
    d64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (strlen(itr->name) != name_len) {
    d64c:	68a0      	ldr	r0, [r4, #8]
    d64e:	f005 f924 	bl	1289a <strlen>
    d652:	42b0      	cmp	r0, r6
    d654:	d006      	beq.n	d664 <disk_access_get_di+0x44>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    d656:	686b      	ldr	r3, [r5, #4]
    d658:	429c      	cmp	r4, r3
    d65a:	d0f1      	beq.n	d640 <disk_access_get_di+0x20>
    d65c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
    d65e:	2c00      	cmp	r4, #0
    d660:	d1f4      	bne.n	d64c <disk_access_get_di+0x2c>
    d662:	e7ed      	b.n	d640 <disk_access_get_di+0x20>
		if (strncmp(name, itr->name, name_len) == 0) {
    d664:	4632      	mov	r2, r6
    d666:	4638      	mov	r0, r7
    d668:	68a1      	ldr	r1, [r4, #8]
    d66a:	f005 f929 	bl	128c0 <strncmp>
    d66e:	2800      	cmp	r0, #0
    d670:	d1f1      	bne.n	d656 <disk_access_get_di+0x36>
    d672:	e7e6      	b.n	d642 <disk_access_get_di+0x22>
    d674:	200105dc 	.word	0x200105dc
    d678:	200105e4 	.word	0x200105e4

0000d67c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    d67c:	b510      	push	{r4, lr}
    d67e:	4807      	ldr	r0, [pc, #28]	; (d69c <uart_console_init+0x20>)
    d680:	f003 fa22 	bl	10ac8 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    d684:	4c06      	ldr	r4, [pc, #24]	; (d6a0 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    d686:	4b07      	ldr	r3, [pc, #28]	; (d6a4 <uart_console_init+0x28>)
    d688:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    d68a:	4620      	mov	r0, r4
    d68c:	f001 f836 	bl	e6fc <__stdout_hook_install>
	__printk_hook_install(console_out);
    d690:	4620      	mov	r0, r4
    d692:	f7ff f841 	bl	c718 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    d696:	2000      	movs	r0, #0
    d698:	bd10      	pop	{r4, pc}
    d69a:	bf00      	nop
    d69c:	00014859 	.word	0x00014859
    d6a0:	0000d6a9 	.word	0x0000d6a9
    d6a4:	200105f8 	.word	0x200105f8

0000d6a8 <console_out>:
	if ('\n' == c) {
    d6a8:	280a      	cmp	r0, #10
{
    d6aa:	b538      	push	{r3, r4, r5, lr}
    d6ac:	4604      	mov	r4, r0
    d6ae:	4d07      	ldr	r5, [pc, #28]	; (d6cc <console_out+0x24>)
	if ('\n' == c) {
    d6b0:	d104      	bne.n	d6bc <console_out+0x14>
    d6b2:	6828      	ldr	r0, [r5, #0]
    d6b4:	6883      	ldr	r3, [r0, #8]
    d6b6:	210d      	movs	r1, #13
    d6b8:	685b      	ldr	r3, [r3, #4]
    d6ba:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    d6bc:	6828      	ldr	r0, [r5, #0]
    d6be:	6883      	ldr	r3, [r0, #8]
    d6c0:	b2e1      	uxtb	r1, r4
    d6c2:	685b      	ldr	r3, [r3, #4]
    d6c4:	4798      	blx	r3
}
    d6c6:	4620      	mov	r0, r4
    d6c8:	bd38      	pop	{r3, r4, r5, pc}
    d6ca:	bf00      	nop
    d6cc:	200105f8 	.word	0x200105f8

0000d6d0 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d6d0:	b570      	push	{r4, r5, r6, lr}
    d6d2:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    d6d4:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    d6d6:	480d      	ldr	r0, [pc, #52]	; (d70c <onoff_stop+0x3c>)
{
    d6d8:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    d6da:	1a23      	subs	r3, r4, r0
    d6dc:	109a      	asrs	r2, r3, #2
    d6de:	4b0c      	ldr	r3, [pc, #48]	; (d710 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    d6e0:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    d6e2:	4353      	muls	r3, r2
    d6e4:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    d6e6:	435d      	muls	r5, r3
    d6e8:	f105 0340 	add.w	r3, r5, #64	; 0x40
    d6ec:	4418      	add	r0, r3
    d6ee:	f004 ffef 	bl	126d0 <set_off_state>
	if (err < 0) {
    d6f2:	1e01      	subs	r1, r0, #0
    d6f4:	db04      	blt.n	d700 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    d6f6:	4b07      	ldr	r3, [pc, #28]	; (d714 <onoff_stop+0x44>)
    d6f8:	442b      	add	r3, r5
    d6fa:	685b      	ldr	r3, [r3, #4]
    d6fc:	4798      	blx	r3
	return 0;
    d6fe:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    d700:	4620      	mov	r0, r4
    d702:	4633      	mov	r3, r6
}
    d704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    d708:	4718      	bx	r3
    d70a:	bf00      	nop
    d70c:	2001060c 	.word	0x2001060c
    d710:	b6db6db7 	.word	0xb6db6db7
    d714:	000144bc 	.word	0x000144bc

0000d718 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    d71c:	4c0f      	ldr	r4, [pc, #60]	; (d75c <onoff_start+0x44>)
    d71e:	4d10      	ldr	r5, [pc, #64]	; (d760 <onoff_start+0x48>)
    d720:	1b03      	subs	r3, r0, r4
    d722:	109b      	asrs	r3, r3, #2
    d724:	435d      	muls	r5, r3
    d726:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    d728:	250c      	movs	r5, #12
    d72a:	435d      	muls	r5, r3
{
    d72c:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    d72e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    d732:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    d734:	4420      	add	r0, r4
    d736:	2140      	movs	r1, #64	; 0x40
    d738:	f004 ffe3 	bl	12702 <set_starting_state>
	if (err < 0) {
    d73c:	1e01      	subs	r1, r0, #0
    d73e:	db08      	blt.n	d752 <onoff_start+0x3a>
	subdata->cb = data->cb;
    d740:	4b08      	ldr	r3, [pc, #32]	; (d764 <onoff_start+0x4c>)
    d742:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
    d744:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    d748:	4b07      	ldr	r3, [pc, #28]	; (d768 <onoff_start+0x50>)
    d74a:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    d74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    d750:	4718      	bx	r3
		notify(mgr, err);
    d752:	4638      	mov	r0, r7
    d754:	4633      	mov	r3, r6
}
    d756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    d75a:	4718      	bx	r3
    d75c:	2001060c 	.word	0x2001060c
    d760:	b6db6db7 	.word	0xb6db6db7
    d764:	00012765 	.word	0x00012765
    d768:	000144bc 	.word	0x000144bc

0000d76c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    d76c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d76e:	2200      	movs	r2, #0
    d770:	2101      	movs	r1, #1
{
    d772:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d774:	2005      	movs	r0, #5
    d776:	f000 fa95 	bl	dca4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    d77a:	2005      	movs	r0, #5
    d77c:	f000 fa74 	bl	dc68 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
    d780:	480f      	ldr	r0, [pc, #60]	; (d7c0 <clk_init+0x54>)
    d782:	f002 ff49 	bl	10618 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    d786:	4b0f      	ldr	r3, [pc, #60]	; (d7c4 <clk_init+0x58>)
    d788:	4298      	cmp	r0, r3
    d78a:	d115      	bne.n	d7b8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    d78c:	f006 fb36 	bl	13dfc <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    d790:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    d792:	490d      	ldr	r1, [pc, #52]	; (d7c8 <clk_init+0x5c>)
    d794:	4630      	mov	r0, r6
    d796:	f004 fb31 	bl	11dfc <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    d79a:	2800      	cmp	r0, #0
    d79c:	db0b      	blt.n	d7b6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d79e:	2501      	movs	r5, #1
    d7a0:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    d7a2:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    d7a4:	4908      	ldr	r1, [pc, #32]	; (d7c8 <clk_init+0x5c>)
    d7a6:	f104 001c 	add.w	r0, r4, #28
    d7aa:	f004 fb27 	bl	11dfc <onoff_manager_init>
		if (err < 0) {
    d7ae:	2800      	cmp	r0, #0
    d7b0:	db01      	blt.n	d7b6 <clk_init+0x4a>
	}

	return 0;
    d7b2:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d7b4:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    d7b6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    d7b8:	f06f 0004 	mvn.w	r0, #4
    d7bc:	e7fb      	b.n	d7b6 <clk_init+0x4a>
    d7be:	bf00      	nop
    d7c0:	0000d801 	.word	0x0000d801
    d7c4:	0bad0000 	.word	0x0bad0000
    d7c8:	000144d4 	.word	0x000144d4

0000d7cc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    d7cc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    d7ce:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    d7d0:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    d7d2:	434b      	muls	r3, r1
    d7d4:	4808      	ldr	r0, [pc, #32]	; (d7f8 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    d7d6:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    d7d8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    d7da:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    d7dc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d7e0:	4418      	add	r0, r3
	sub_data->cb = NULL;
    d7e2:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d7e4:	f004 ffab 	bl	1273e <set_on_state>
	if (callback) {
    d7e8:	b12d      	cbz	r5, d7f6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    d7ea:	4632      	mov	r2, r6
    d7ec:	462b      	mov	r3, r5
}
    d7ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    d7f2:	4802      	ldr	r0, [pc, #8]	; (d7fc <clkstarted_handle.constprop.0+0x30>)
    d7f4:	4718      	bx	r3
}
    d7f6:	bd70      	pop	{r4, r5, r6, pc}
    d7f8:	2001060c 	.word	0x2001060c
    d7fc:	200100bc 	.word	0x200100bc

0000d800 <clock_event_handler>:
	switch (event) {
    d800:	b110      	cbz	r0, d808 <clock_event_handler+0x8>
    d802:	2801      	cmp	r0, #1
    d804:	d004      	beq.n	d810 <clock_event_handler+0x10>
    d806:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    d808:	4b03      	ldr	r3, [pc, #12]	; (d818 <clock_event_handler+0x18>)
    d80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d80c:	075b      	lsls	r3, r3, #29
    d80e:	d101      	bne.n	d814 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d810:	f7ff bfdc 	b.w	d7cc <clkstarted_handle.constprop.0>
}
    d814:	4770      	bx	lr
    d816:	bf00      	nop
    d818:	2001060c 	.word	0x2001060c

0000d81c <generic_hfclk_start>:
{
    d81c:	b508      	push	{r3, lr}
	__asm__ volatile(
    d81e:	f04f 0320 	mov.w	r3, #32
    d822:	f3ef 8111 	mrs	r1, BASEPRI
    d826:	f383 8811 	msr	BASEPRI, r3
    d82a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    d82e:	4a11      	ldr	r2, [pc, #68]	; (d874 <generic_hfclk_start+0x58>)
    d830:	6813      	ldr	r3, [r2, #0]
    d832:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    d836:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    d83a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    d83c:	d00b      	beq.n	d856 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d83e:	4a0e      	ldr	r2, [pc, #56]	; (d878 <generic_hfclk_start+0x5c>)
    d840:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d844:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    d848:	f013 0301 	ands.w	r3, r3, #1
    d84c:	d003      	beq.n	d856 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    d84e:	480b      	ldr	r0, [pc, #44]	; (d87c <generic_hfclk_start+0x60>)
    d850:	f004 ff75 	bl	1273e <set_on_state>
			already_started = true;
    d854:	2301      	movs	r3, #1
	__asm__ volatile(
    d856:	f381 8811 	msr	BASEPRI, r1
    d85a:	f3bf 8f6f 	isb	sy
	if (already_started) {
    d85e:	b123      	cbz	r3, d86a <generic_hfclk_start+0x4e>
}
    d860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    d864:	2000      	movs	r0, #0
    d866:	f7ff bfb1 	b.w	d7cc <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d86a:	2001      	movs	r0, #1
}
    d86c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d870:	f002 bee2 	b.w	10638 <nrfx_clock_start>
    d874:	2001065c 	.word	0x2001065c
    d878:	40005000 	.word	0x40005000
    d87c:	2001064c 	.word	0x2001064c

0000d880 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d880:	4b07      	ldr	r3, [pc, #28]	; (d8a0 <generic_hfclk_stop+0x20>)
    d882:	e8d3 2fef 	ldaex	r2, [r3]
    d886:	f022 0102 	bic.w	r1, r2, #2
    d88a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    d88e:	2800      	cmp	r0, #0
    d890:	d1f7      	bne.n	d882 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    d892:	07d3      	lsls	r3, r2, #31
    d894:	d402      	bmi.n	d89c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d896:	2001      	movs	r0, #1
    d898:	f002 bf00 	b.w	1069c <nrfx_clock_stop>
}
    d89c:	4770      	bx	lr
    d89e:	bf00      	nop
    d8a0:	2001065c 	.word	0x2001065c

0000d8a4 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d8a4:	2300      	movs	r3, #0
    d8a6:	2201      	movs	r2, #1
{
    d8a8:	b510      	push	{r4, lr}
    d8aa:	b088      	sub	sp, #32
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d8ac:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
    d8b0:	9301      	str	r3, [sp, #4]
    d8b2:	4b09      	ldr	r3, [pc, #36]	; (d8d8 <api_blocking_start+0x34>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d8b4:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
    d8b6:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d8b8:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
    d8bc:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
    d8c0:	f004 ff76 	bl	127b0 <api_start>
	if (err < 0) {
    d8c4:	2800      	cmp	r0, #0
    d8c6:	db05      	blt.n	d8d4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    d8c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d8cc:	2300      	movs	r3, #0
    d8ce:	4620      	mov	r0, r4
    d8d0:	f003 ff28 	bl	11724 <z_impl_k_sem_take>
}
    d8d4:	b008      	add	sp, #32
    d8d6:	bd10      	pop	{r4, pc}
    d8d8:	00012777 	.word	0x00012777

0000d8dc <z_nrf_clock_control_lf_on>:
{
    d8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d8e0:	2201      	movs	r2, #1
    d8e2:	4607      	mov	r7, r0
    d8e4:	4936      	ldr	r1, [pc, #216]	; (d9c0 <z_nrf_clock_control_lf_on+0xe4>)
    d8e6:	e8d1 3fef 	ldaex	r3, [r1]
    d8ea:	e8c1 2fe0 	stlex	r0, r2, [r1]
    d8ee:	2800      	cmp	r0, #0
    d8f0:	d1f9      	bne.n	d8e6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    d8f2:	b933      	cbnz	r3, d902 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    d8f4:	4933      	ldr	r1, [pc, #204]	; (d9c4 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
    d8f6:	4834      	ldr	r0, [pc, #208]	; (d9c8 <z_nrf_clock_control_lf_on+0xec>)
    d8f8:	604b      	str	r3, [r1, #4]
    d8fa:	60cb      	str	r3, [r1, #12]
    d8fc:	608a      	str	r2, [r1, #8]
    d8fe:	f004 fa90 	bl	11e22 <onoff_request>
	switch (start_mode) {
    d902:	1e7b      	subs	r3, r7, #1
    d904:	2b01      	cmp	r3, #1
    d906:	d82e      	bhi.n	d966 <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    d908:	2f01      	cmp	r7, #1
    d90a:	d106      	bne.n	d91a <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d90c:	4b2f      	ldr	r3, [pc, #188]	; (d9cc <z_nrf_clock_control_lf_on+0xf0>)
    d90e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    d912:	f003 0303 	and.w	r3, r3, #3
    d916:	2b02      	cmp	r3, #2
    d918:	d025      	beq.n	d966 <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d91a:	f006 fb6a 	bl	13ff2 <k_is_in_isr>
    d91e:	4604      	mov	r4, r0
    d920:	b918      	cbnz	r0, d92a <z_nrf_clock_control_lf_on+0x4e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    d922:	4b2b      	ldr	r3, [pc, #172]	; (d9d0 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
    d924:	781b      	ldrb	r3, [r3, #0]
    d926:	2b00      	cmp	r3, #0
    d928:	d144      	bne.n	d9b4 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
    d92a:	f04f 0320 	mov.w	r3, #32
    d92e:	f3ef 8611 	mrs	r6, BASEPRI
    d932:	f383 8811 	msr	BASEPRI, r3
    d936:	f3bf 8f6f 	isb	sy
    d93a:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d93c:	4d23      	ldr	r5, [pc, #140]	; (d9cc <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d93e:	f8df 809c 	ldr.w	r8, [pc, #156]	; d9dc <z_nrf_clock_control_lf_on+0x100>
    d942:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d944:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d948:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    d94c:	03d2      	lsls	r2, r2, #15
    d94e:	d50c      	bpl.n	d96a <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    d950:	f003 0303 	and.w	r3, r3, #3
    d954:	2b02      	cmp	r3, #2
    d956:	d001      	beq.n	d95c <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    d958:	2f01      	cmp	r7, #1
    d95a:	d106      	bne.n	d96a <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
    d95c:	b334      	cbz	r4, d9ac <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    d95e:	f386 8811 	msr	BASEPRI, r6
    d962:	f3bf 8f6f 	isb	sy
}
    d966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    d96a:	b1d4      	cbz	r4, d9a2 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    d96c:	4630      	mov	r0, r6
    d96e:	f000 f9f9 	bl	dd64 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    d972:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    d976:	b2db      	uxtb	r3, r3
    d978:	2b01      	cmp	r3, #1
    d97a:	d1e3      	bne.n	d944 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d97c:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
    d980:	2a00      	cmp	r2, #0
    d982:	d0df      	beq.n	d944 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d984:	2200      	movs	r2, #0
    d986:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    d98a:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
    d98e:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d990:	2120      	movs	r1, #32
    d992:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    d996:	4a0f      	ldr	r2, [pc, #60]	; (d9d4 <z_nrf_clock_control_lf_on+0xf8>)
    d998:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d99c:	4a0e      	ldr	r2, [pc, #56]	; (d9d8 <z_nrf_clock_control_lf_on+0xfc>)
    d99e:	6013      	str	r3, [r2, #0]
}
    d9a0:	e7d0      	b.n	d944 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
    d9a2:	2100      	movs	r1, #0
    d9a4:	2021      	movs	r0, #33	; 0x21
    d9a6:	f003 fe77 	bl	11698 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    d9aa:	e7e2      	b.n	d972 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
    d9ac:	2302      	movs	r3, #2
    d9ae:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    d9b2:	e7d8      	b.n	d966 <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
    d9b4:	2202      	movs	r2, #2
    d9b6:	4b05      	ldr	r3, [pc, #20]	; (d9cc <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
    d9b8:	4606      	mov	r6, r0
    d9ba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    d9be:	e7bd      	b.n	d93c <z_nrf_clock_control_lf_on+0x60>
    d9c0:	20010660 	.word	0x20010660
    d9c4:	200105fc 	.word	0x200105fc
    d9c8:	20010628 	.word	0x20010628
    d9cc:	40005000 	.word	0x40005000
    d9d0:	2001075b 	.word	0x2001075b
    d9d4:	e000e100 	.word	0xe000e100
    d9d8:	40005008 	.word	0x40005008
    d9dc:	40005104 	.word	0x40005104

0000d9e0 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    d9e0:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    d9e2:	4b08      	ldr	r3, [pc, #32]	; (da04 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d9e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    d9e8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    d9ec:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    d9f0:	4290      	cmp	r0, r2
    d9f2:	d100      	bne.n	d9f6 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    d9f4:	4770      	bx	lr
    d9f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    d9fa:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    d9fc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    da00:	e7f2      	b.n	d9e8 <handle_next_cycle_case+0x8>
    da02:	bf00      	nop
    da04:	40015000 	.word	0x40015000

0000da08 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    da08:	2200      	movs	r2, #0
    da0a:	4b07      	ldr	r3, [pc, #28]	; (da28 <rtc_nrf_isr+0x20>)
    da0c:	601a      	str	r2, [r3, #0]
    da0e:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    da10:	4a06      	ldr	r2, [pc, #24]	; (da2c <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    da12:	4b07      	ldr	r3, [pc, #28]	; (da30 <rtc_nrf_isr+0x28>)
    da14:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    da18:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    da1a:	1ac0      	subs	r0, r0, r3
    da1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    da20:	4403      	add	r3, r0
    da22:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    da24:	f004 b836 	b.w	11a94 <z_clock_announce>
    da28:	40015140 	.word	0x40015140
    da2c:	20010664 	.word	0x20010664
    da30:	40015000 	.word	0x40015000

0000da34 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    da34:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    da36:	2400      	movs	r4, #0
    da38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    da3c:	4d0e      	ldr	r5, [pc, #56]	; (da78 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    da3e:	4b0f      	ldr	r3, [pc, #60]	; (da7c <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    da40:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    da44:	601c      	str	r4, [r3, #0]
    da46:	681b      	ldr	r3, [r3, #0]
    da48:	4b0d      	ldr	r3, [pc, #52]	; (da80 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    da4a:	2101      	movs	r1, #1
    da4c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    da50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    da54:	4622      	mov	r2, r4
    da56:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    da5a:	2015      	movs	r0, #21
    da5c:	f000 f922 	bl	dca4 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    da60:	2015      	movs	r0, #21
    da62:	f000 f901 	bl	dc68 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    da66:	2301      	movs	r3, #1
    da68:	4a06      	ldr	r2, [pc, #24]	; (da84 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    da6a:	2002      	movs	r0, #2
    da6c:	6013      	str	r3, [r2, #0]
    da6e:	602b      	str	r3, [r5, #0]
    da70:	f7ff ff34 	bl	d8dc <z_nrf_clock_control_lf_on>

	return 0;
}
    da74:	4620      	mov	r0, r4
    da76:	bd38      	pop	{r3, r4, r5, pc}
    da78:	40015000 	.word	0x40015000
    da7c:	40015140 	.word	0x40015140
    da80:	e000e100 	.word	0xe000e100
    da84:	40015008 	.word	0x40015008

0000da88 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    da8a:	4b2d      	ldr	r3, [pc, #180]	; (db40 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    da8c:	4c2d      	ldr	r4, [pc, #180]	; (db44 <z_clock_set_timeout+0xbc>)
    da8e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    da92:	4b2d      	ldr	r3, [pc, #180]	; (db48 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    da94:	f1b0 3fff 	cmp.w	r0, #4294967295
    da98:	bf08      	it	eq
    da9a:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
    da9c:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    da9e:	1a52      	subs	r2, r2, r1
    daa0:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    daa4:	0212      	lsls	r2, r2, #8
    daa6:	d438      	bmi.n	db1a <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    daa8:	3801      	subs	r0, #1
    daaa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    daae:	42a0      	cmp	r0, r4
    dab0:	bfa8      	it	ge
    dab2:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    dab4:	3301      	adds	r3, #1
    dab6:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    dab8:	42a0      	cmp	r0, r4
    daba:	bf94      	ite	ls
    dabc:	180c      	addls	r4, r1, r0
    dabe:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    dac0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    dac4:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
    dac6:	4a1e      	ldr	r2, [pc, #120]	; (db40 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    dac8:	4d20      	ldr	r5, [pc, #128]	; (db4c <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
    daca:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
    dace:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
    dad2:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    dad6:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
    dad8:	1a5b      	subs	r3, r3, r1
    dada:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    dade:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
    dae0:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    dae2:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    dae6:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    daea:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    daee:	d104      	bne.n	dafa <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
    daf0:	200f      	movs	r0, #15
    daf2:	f006 fa84 	bl	13ffe <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    daf6:	602e      	str	r6, [r5, #0]
    daf8:	682b      	ldr	r3, [r5, #0]
    dafa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    dafe:	4b14      	ldr	r3, [pc, #80]	; (db50 <z_clock_set_timeout+0xc8>)
    db00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    db04:	4b0e      	ldr	r3, [pc, #56]	; (db40 <z_clock_set_timeout+0xb8>)
    db06:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    db0a:	1a22      	subs	r2, r4, r0
    db0c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
    db10:	2a01      	cmp	r2, #1
    db12:	d104      	bne.n	db1e <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
    db14:	f7ff ff64 	bl	d9e0 <handle_next_cycle_case>
    db18:	e00b      	b.n	db32 <z_clock_set_timeout+0xaa>
		ticks = 0;
    db1a:	2000      	movs	r0, #0
    db1c:	e7ca      	b.n	dab4 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    db1e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    db22:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
    db26:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    db2a:	1a24      	subs	r4, r4, r0
    db2c:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
    db2e:	0223      	lsls	r3, r4, #8
    db30:	d4f0      	bmi.n	db14 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
    db32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    db36:	4b02      	ldr	r3, [pc, #8]	; (db40 <z_clock_set_timeout+0xb8>)
    db38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    db3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    db3e:	bf00      	nop
    db40:	40015000 	.word	0x40015000
    db44:	007fffff 	.word	0x007fffff
    db48:	20010664 	.word	0x20010664
    db4c:	40015140 	.word	0x40015140
    db50:	e000e100 	.word	0xe000e100

0000db54 <z_clock_elapsed>:
	__asm__ volatile(
    db54:	f04f 0220 	mov.w	r2, #32
    db58:	f3ef 8311 	mrs	r3, BASEPRI
    db5c:	f382 8811 	msr	BASEPRI, r2
    db60:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    db64:	4a06      	ldr	r2, [pc, #24]	; (db80 <z_clock_elapsed+0x2c>)
    db66:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    db6a:	4a06      	ldr	r2, [pc, #24]	; (db84 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    db6c:	6812      	ldr	r2, [r2, #0]
    db6e:	1a80      	subs	r0, r0, r2
    db70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    db74:	f383 8811 	msr	BASEPRI, r3
    db78:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    db7c:	4770      	bx	lr
    db7e:	bf00      	nop
    db80:	40015000 	.word	0x40015000
    db84:	20010664 	.word	0x20010664

0000db88 <z_timer_cycle_get_32>:
	__asm__ volatile(
    db88:	f04f 0320 	mov.w	r3, #32
    db8c:	f3ef 8211 	mrs	r2, BASEPRI
    db90:	f383 8811 	msr	BASEPRI, r3
    db94:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    db98:	4906      	ldr	r1, [pc, #24]	; (dbb4 <z_timer_cycle_get_32+0x2c>)
    db9a:	4b07      	ldr	r3, [pc, #28]	; (dbb8 <z_timer_cycle_get_32+0x30>)
    db9c:	6808      	ldr	r0, [r1, #0]
    db9e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    dba2:	f382 8811 	msr	BASEPRI, r2
    dba6:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    dbaa:	1a1b      	subs	r3, r3, r0
    dbac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    dbb0:	4418      	add	r0, r3
    dbb2:	4770      	bx	lr
    dbb4:	20010664 	.word	0x20010664
    dbb8:	40015000 	.word	0x40015000

0000dbbc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    dbbc:	4a09      	ldr	r2, [pc, #36]	; (dbe4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    dbbe:	490a      	ldr	r1, [pc, #40]	; (dbe8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    dbc0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    dbc2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    dbc4:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    dbc6:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    dbc8:	4908      	ldr	r1, [pc, #32]	; (dbec <arch_swap+0x30>)
    dbca:	684b      	ldr	r3, [r1, #4]
    dbcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    dbd0:	604b      	str	r3, [r1, #4]
    dbd2:	2300      	movs	r3, #0
    dbd4:	f383 8811 	msr	BASEPRI, r3
    dbd8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    dbdc:	6893      	ldr	r3, [r2, #8]
}
    dbde:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    dbe0:	4770      	bx	lr
    dbe2:	bf00      	nop
    dbe4:	20010714 	.word	0x20010714
    dbe8:	0001461c 	.word	0x0001461c
    dbec:	e000ed00 	.word	0xe000ed00

0000dbf0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    dbf0:	4913      	ldr	r1, [pc, #76]	; (dc40 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    dbf2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    dbf4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    dbf8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    dbfa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    dbfe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dc02:	2020      	movs	r0, #32
    msr BASEPRI, r0
    dc04:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    dc08:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    dc0c:	4f0d      	ldr	r7, [pc, #52]	; (dc44 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    dc0e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    dc12:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    dc14:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    dc16:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    dc18:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    dc1a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    dc1c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    dc1e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    dc22:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    dc26:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    dc2a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    dc2e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    dc32:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    dc34:	f004 fddb 	bl	127ee <configure_builtin_stack_guard>
    pop {r2, lr}
    dc38:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    dc3c:	4770      	bx	lr
    dc3e:	0000      	.short	0x0000
    ldr r1, =_kernel
    dc40:	20010714 	.word	0x20010714
    ldr v4, =_SCS_ICSR
    dc44:	e000ed04 	.word	0xe000ed04

0000dc48 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    dc48:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    dc4c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    dc4e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    dc52:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    dc56:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    dc58:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    dc5c:	2902      	cmp	r1, #2
    beq _oops
    dc5e:	d0ff      	beq.n	dc60 <_oops>

0000dc60 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    dc60:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    dc62:	f004 fdc8 	bl	127f6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    dc66:	bd01      	pop	{r0, pc}

0000dc68 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    dc68:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    dc6a:	2b00      	cmp	r3, #0
    dc6c:	db08      	blt.n	dc80 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dc6e:	2201      	movs	r2, #1
    dc70:	f000 001f 	and.w	r0, r0, #31
    dc74:	fa02 f000 	lsl.w	r0, r2, r0
    dc78:	4a02      	ldr	r2, [pc, #8]	; (dc84 <arch_irq_enable+0x1c>)
    dc7a:	095b      	lsrs	r3, r3, #5
    dc7c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    dc80:	4770      	bx	lr
    dc82:	bf00      	nop
    dc84:	e000e100 	.word	0xe000e100

0000dc88 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    dc88:	4b05      	ldr	r3, [pc, #20]	; (dca0 <arch_irq_is_enabled+0x18>)
    dc8a:	0942      	lsrs	r2, r0, #5
    dc8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    dc90:	2301      	movs	r3, #1
    dc92:	f000 001f 	and.w	r0, r0, #31
    dc96:	fa03 f000 	lsl.w	r0, r3, r0
}
    dc9a:	4010      	ands	r0, r2
    dc9c:	4770      	bx	lr
    dc9e:	bf00      	nop
    dca0:	e000e100 	.word	0xe000e100

0000dca4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    dca4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    dca6:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    dca8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcac:	bfac      	ite	ge
    dcae:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcb2:	4b06      	ldrlt	r3, [pc, #24]	; (dccc <z_arm_irq_priority_set+0x28>)
    dcb4:	ea4f 1141 	mov.w	r1, r1, lsl #5
    dcb8:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcba:	bfab      	itete	ge
    dcbc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcc0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcc4:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dcc8:	5419      	strblt	r1, [r3, r0]
}
    dcca:	4770      	bx	lr
    dccc:	e000ed14 	.word	0xe000ed14

0000dcd0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    dcd0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    dcd4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    dcd6:	490b      	ldr	r1, [pc, #44]	; (dd04 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    dcd8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    dcdc:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    dcde:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    dce2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    dce6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    dce8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    dcec:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    dcf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    dcf4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    dcf8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    dcfa:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    dcfc:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    dcfe:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    dd00:	4770      	bx	lr
    dd02:	bf00      	nop
    dd04:	00011eb5 	.word	0x00011eb5

0000dd08 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    dd08:	4604      	mov	r4, r0
    dd0a:	b508      	push	{r3, lr}
    dd0c:	460e      	mov	r6, r1
    dd0e:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    dd10:	f000 fb46 	bl	e3a0 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    dd14:	4b08      	ldr	r3, [pc, #32]	; (dd38 <arch_switch_to_main_thread+0x30>)
    dd16:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    dd18:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    dd1a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    dd1e:	4628      	mov	r0, r5
    dd20:	f386 8809 	msr	PSP, r6
    dd24:	2100      	movs	r1, #0
    dd26:	b663      	cpsie	if
    dd28:	f381 8811 	msr	BASEPRI, r1
    dd2c:	f3bf 8f6f 	isb	sy
    dd30:	2200      	movs	r2, #0
    dd32:	2300      	movs	r3, #0
    dd34:	f004 f8be 	bl	11eb4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    dd38:	20010714 	.word	0x20010714

0000dd3c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    dd3c:	4901      	ldr	r1, [pc, #4]	; (dd44 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    dd3e:	2210      	movs	r2, #16
	str	r2, [r1]
    dd40:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    dd42:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    dd44:	e000ed10 	.word	0xe000ed10

0000dd48 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    dd48:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    dd4a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    dd4c:	f380 8811 	msr	BASEPRI, r0
	isb
    dd50:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    dd54:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    dd58:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    dd5a:	b662      	cpsie	i
	isb
    dd5c:	f3bf 8f6f 	isb	sy

	bx	lr
    dd60:	4770      	bx	lr
    dd62:	bf00      	nop

0000dd64 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    dd64:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    dd66:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    dd68:	f381 8811 	msr	BASEPRI, r1

	wfe
    dd6c:	bf20      	wfe

	msr	BASEPRI, r0
    dd6e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    dd72:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    dd74:	4770      	bx	lr
    dd76:	bf00      	nop

0000dd78 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    dd78:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dd7a:	4606      	mov	r6, r0

	if (esf != NULL) {
    dd7c:	460c      	mov	r4, r1
    dd7e:	b301      	cbz	r1, ddc2 <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    dd80:	4b13      	ldr	r3, [pc, #76]	; (ddd0 <z_arm_fatal_error+0x58>)
    dd82:	4d14      	ldr	r5, [pc, #80]	; (ddd4 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    dd84:	4814      	ldr	r0, [pc, #80]	; (ddd8 <z_arm_fatal_error+0x60>)
    dd86:	1aed      	subs	r5, r5, r3
    dd88:	08ed      	lsrs	r5, r5, #3
    dd8a:	01ad      	lsls	r5, r5, #6
    dd8c:	f045 0501 	orr.w	r5, r5, #1
    dd90:	f8ad 5000 	strh.w	r5, [sp]
    dd94:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    dd98:	6809      	ldr	r1, [r1, #0]
    dd9a:	f004 f9f1 	bl	12180 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    dd9e:	f8ad 5000 	strh.w	r5, [sp]
    dda2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    dda6:	68e1      	ldr	r1, [r4, #12]
    dda8:	480c      	ldr	r0, [pc, #48]	; (dddc <z_arm_fatal_error+0x64>)
    ddaa:	f004 f9e9 	bl	12180 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    ddae:	462a      	mov	r2, r5
    ddb0:	69e1      	ldr	r1, [r4, #28]
    ddb2:	480b      	ldr	r0, [pc, #44]	; (dde0 <z_arm_fatal_error+0x68>)
    ddb4:	f004 f9b7 	bl	12126 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    ddb8:	462a      	mov	r2, r5
    ddba:	69a1      	ldr	r1, [r4, #24]
    ddbc:	4809      	ldr	r0, [pc, #36]	; (dde4 <z_arm_fatal_error+0x6c>)
    ddbe:	f004 f9b2 	bl	12126 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    ddc2:	4621      	mov	r1, r4
    ddc4:	4630      	mov	r0, r6
}
    ddc6:	b002      	add	sp, #8
    ddc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    ddcc:	f002 bea4 	b.w	10b18 <z_fatal_error>
    ddd0:	00014394 	.word	0x00014394
    ddd4:	000143cc 	.word	0x000143cc
    ddd8:	000148a6 	.word	0x000148a6
    dddc:	000148d5 	.word	0x000148d5
    dde0:	00014904 	.word	0x00014904
    dde4:	00014913 	.word	0x00014913

0000dde8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    dde8:	bf30      	wfi
    b z_SysNmiOnReset
    ddea:	f7ff bffd 	b.w	dde8 <z_SysNmiOnReset>
    ddee:	bf00      	nop

0000ddf0 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ddf0:	4a0e      	ldr	r2, [pc, #56]	; (de2c <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    ddf2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ddf4:	4b0e      	ldr	r3, [pc, #56]	; (de30 <z_arm_prep_c+0x40>)
    ddf6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    ddfa:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    ddfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    de00:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    de04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    de08:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    de0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    de10:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    de14:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    de18:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    de1c:	f002 fefa 	bl	10c14 <z_bss_zero>
	z_data_copy();
    de20:	f002 ff02 	bl	10c28 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    de24:	f000 fa84 	bl	e330 <z_arm_interrupt_init>
	z_cstart();
    de28:	f002 ff3c 	bl	10ca4 <z_cstart>
    de2c:	0000c000 	.word	0x0000c000
    de30:	e000ed00 	.word	0xe000ed00

0000de34 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    de34:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    de36:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    de38:	4a0b      	ldr	r2, [pc, #44]	; (de68 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    de3a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    de3c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    de3e:	bf1e      	ittt	ne
	movne	r1, #0
    de40:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    de42:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    de44:	f005 ffe5 	blne	13e12 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    de48:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    de4a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    de4e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    de52:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    de56:	4905      	ldr	r1, [pc, #20]	; (de6c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    de58:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    de5a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    de5c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    de5e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    de62:	4903      	ldr	r1, [pc, #12]	; (de70 <_isr_wrapper+0x3c>)
	bx r1
    de64:	4708      	bx	r1
    de66:	0000      	.short	0x0000
	ldr r2, =_kernel
    de68:	20010714 	.word	0x20010714
	ldr r1, =_sw_isr_table
    de6c:	0001418c 	.word	0x0001418c
	ldr r1, =z_arm_int_exit
    de70:	0000e2f1 	.word	0x0000e2f1

0000de74 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    de74:	f004 f905 	bl	12082 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    de78:	2020      	movs	r0, #32
    msr BASEPRI, r0
    de7a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    de7e:	4808      	ldr	r0, [pc, #32]	; (dea0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    de80:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    de84:	1840      	adds	r0, r0, r1
    msr PSP, r0
    de86:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    de8a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    de8e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    de90:	4308      	orrs	r0, r1
    msr CONTROL, r0
    de92:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    de96:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    de9a:	f7ff ffa9 	bl	ddf0 <z_arm_prep_c>
    de9e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    dea0:	200113a0 	.word	0x200113a0

0000dea4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    dea4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    dea8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    deac:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    deae:	4672      	mov	r2, lr
	bl z_arm_fault
    deb0:	f000 f93e 	bl	e130 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    deb4:	bd01      	pop	{r0, pc}
    deb6:	bf00      	nop

0000deb8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    deb8:	b570      	push	{r4, r5, r6, lr}
    deba:	4b28      	ldr	r3, [pc, #160]	; (df5c <usage_fault.isra.0+0xa4>)
    debc:	4c28      	ldr	r4, [pc, #160]	; (df60 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    debe:	4d29      	ldr	r5, [pc, #164]	; (df64 <usage_fault.isra.0+0xac>)
    dec0:	1ae4      	subs	r4, r4, r3
    dec2:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
    dec4:	01a4      	lsls	r4, r4, #6
    dec6:	f044 0601 	orr.w	r6, r4, #1
    deca:	4631      	mov	r1, r6
    decc:	4826      	ldr	r0, [pc, #152]	; (df68 <usage_fault.isra.0+0xb0>)
    dece:	f004 f91d 	bl	1210c <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    ded2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ded4:	0193      	lsls	r3, r2, #6
    ded6:	d503      	bpl.n	dee0 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    ded8:	4631      	mov	r1, r6
    deda:	4824      	ldr	r0, [pc, #144]	; (df6c <usage_fault.isra.0+0xb4>)
    dedc:	f004 f916 	bl	1210c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    dee0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dee2:	01dd      	lsls	r5, r3, #7
    dee4:	d504      	bpl.n	def0 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    dee6:	4822      	ldr	r0, [pc, #136]	; (df70 <usage_fault.isra.0+0xb8>)
    dee8:	f044 0101 	orr.w	r1, r4, #1
    deec:	f004 f90e 	bl	1210c <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    def0:	4d1c      	ldr	r5, [pc, #112]	; (df64 <usage_fault.isra.0+0xac>)
    def2:	6aae      	ldr	r6, [r5, #40]	; 0x28
    def4:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
    def8:	d005      	beq.n	df06 <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    defa:	481e      	ldr	r0, [pc, #120]	; (df74 <usage_fault.isra.0+0xbc>)
    defc:	f044 0101 	orr.w	r1, r4, #1
    df00:	f004 f904 	bl	1210c <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    df04:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    df06:	6aab      	ldr	r3, [r5, #40]	; 0x28
    df08:	0318      	lsls	r0, r3, #12
    df0a:	d504      	bpl.n	df16 <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
    df0c:	481a      	ldr	r0, [pc, #104]	; (df78 <usage_fault.isra.0+0xc0>)
    df0e:	f044 0101 	orr.w	r1, r4, #1
    df12:	f004 f8fb 	bl	1210c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    df16:	4d13      	ldr	r5, [pc, #76]	; (df64 <usage_fault.isra.0+0xac>)
    df18:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    df1a:	0351      	lsls	r1, r2, #13
    df1c:	d504      	bpl.n	df28 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    df1e:	4817      	ldr	r0, [pc, #92]	; (df7c <usage_fault.isra.0+0xc4>)
    df20:	f044 0101 	orr.w	r1, r4, #1
    df24:	f004 f8f2 	bl	1210c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    df28:	6aab      	ldr	r3, [r5, #40]	; 0x28
    df2a:	039a      	lsls	r2, r3, #14
    df2c:	d504      	bpl.n	df38 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    df2e:	4814      	ldr	r0, [pc, #80]	; (df80 <usage_fault.isra.0+0xc8>)
    df30:	f044 0101 	orr.w	r1, r4, #1
    df34:	f004 f8ea 	bl	1210c <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    df38:	4d0a      	ldr	r5, [pc, #40]	; (df64 <usage_fault.isra.0+0xac>)
    df3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    df3c:	03db      	lsls	r3, r3, #15
    df3e:	d504      	bpl.n	df4a <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    df40:	4810      	ldr	r0, [pc, #64]	; (df84 <usage_fault.isra.0+0xcc>)
    df42:	f044 0101 	orr.w	r1, r4, #1
    df46:	f004 f8e1 	bl	1210c <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    df4a:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    df4c:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    df4e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    df52:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    df56:	62ab      	str	r3, [r5, #40]	; 0x28
}
    df58:	bd70      	pop	{r4, r5, r6, pc}
    df5a:	bf00      	nop
    df5c:	00014394 	.word	0x00014394
    df60:	000143cc 	.word	0x000143cc
    df64:	e000ed00 	.word	0xe000ed00
    df68:	00014941 	.word	0x00014941
    df6c:	00014959 	.word	0x00014959
    df70:	0001496c 	.word	0x0001496c
    df74:	00014986 	.word	0x00014986
    df78:	000149b0 	.word	0x000149b0
    df7c:	000149ce 	.word	0x000149ce
    df80:	000149f3 	.word	0x000149f3
    df84:	00014a0d 	.word	0x00014a0d

0000df88 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    df88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df8c:	4b27      	ldr	r3, [pc, #156]	; (e02c <mem_manage_fault.isra.0+0xa4>)
    df8e:	4c28      	ldr	r4, [pc, #160]	; (e030 <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    df90:	4d28      	ldr	r5, [pc, #160]	; (e034 <mem_manage_fault.isra.0+0xac>)
    df92:	1ae4      	subs	r4, r4, r3
    df94:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    df96:	01a4      	lsls	r4, r4, #6
    df98:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    df9c:	4607      	mov	r7, r0
    df9e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    dfa0:	4825      	ldr	r0, [pc, #148]	; (e038 <mem_manage_fault.isra.0+0xb0>)
    dfa2:	4641      	mov	r1, r8
    dfa4:	f004 f8b2 	bl	1210c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dfa8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    dfaa:	06d1      	lsls	r1, r2, #27
    dfac:	d503      	bpl.n	dfb6 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dfae:	4641      	mov	r1, r8
    dfb0:	4822      	ldr	r0, [pc, #136]	; (e03c <mem_manage_fault.isra.0+0xb4>)
    dfb2:	f004 f8ab 	bl	1210c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dfb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dfb8:	071a      	lsls	r2, r3, #28
    dfba:	d504      	bpl.n	dfc6 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    dfbc:	4820      	ldr	r0, [pc, #128]	; (e040 <mem_manage_fault.isra.0+0xb8>)
    dfbe:	f044 0101 	orr.w	r1, r4, #1
    dfc2:	f004 f8a3 	bl	1210c <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dfc6:	4d1b      	ldr	r5, [pc, #108]	; (e034 <mem_manage_fault.isra.0+0xac>)
    dfc8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dfca:	079b      	lsls	r3, r3, #30
    dfcc:	d512      	bpl.n	dff4 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    dfce:	f044 0801 	orr.w	r8, r4, #1
    dfd2:	4641      	mov	r1, r8
    dfd4:	481b      	ldr	r0, [pc, #108]	; (e044 <mem_manage_fault.isra.0+0xbc>)
    dfd6:	f004 f899 	bl	1210c <log_0>
		mmfar = SCB->MMFAR;
    dfda:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    dfdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dfde:	0618      	lsls	r0, r3, #24
    dfe0:	d508      	bpl.n	dff4 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    dfe2:	4642      	mov	r2, r8
    dfe4:	4818      	ldr	r0, [pc, #96]	; (e048 <mem_manage_fault.isra.0+0xc0>)
    dfe6:	f004 f89e 	bl	12126 <log_1>
			if (from_hard_fault) {
    dfea:	b11f      	cbz	r7, dff4 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    dfec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dfee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dff2:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    dff4:	4d0f      	ldr	r5, [pc, #60]	; (e034 <mem_manage_fault.isra.0+0xac>)
    dff6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    dff8:	07d2      	lsls	r2, r2, #31
    dffa:	d504      	bpl.n	e006 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    dffc:	4813      	ldr	r0, [pc, #76]	; (e04c <mem_manage_fault.isra.0+0xc4>)
    dffe:	f044 0101 	orr.w	r1, r4, #1
    e002:	f004 f883 	bl	1210c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    e006:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e008:	069b      	lsls	r3, r3, #26
    e00a:	d504      	bpl.n	e016 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    e00c:	4810      	ldr	r0, [pc, #64]	; (e050 <mem_manage_fault.isra.0+0xc8>)
    e00e:	f044 0101 	orr.w	r1, r4, #1
    e012:	f004 f87b 	bl	1210c <log_0>
	*recoverable = memory_fault_recoverable(esf);
    e016:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    e018:	4b06      	ldr	r3, [pc, #24]	; (e034 <mem_manage_fault.isra.0+0xac>)
    e01a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    e01c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e01e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    e022:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    e024:	7030      	strb	r0, [r6, #0]
}
    e026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e02a:	bf00      	nop
    e02c:	00014394 	.word	0x00014394
    e030:	000143cc 	.word	0x000143cc
    e034:	e000ed00 	.word	0xe000ed00
    e038:	00014a38 	.word	0x00014a38
    e03c:	00014a4e 	.word	0x00014a4e
    e040:	00014a81 	.word	0x00014a81
    e044:	00014a94 	.word	0x00014a94
    e048:	00014aac 	.word	0x00014aac
    e04c:	00014ac2 	.word	0x00014ac2
    e050:	00014ae1 	.word	0x00014ae1

0000e054 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    e054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e058:	4b2a      	ldr	r3, [pc, #168]	; (e104 <bus_fault.isra.0+0xb0>)
    e05a:	4c2b      	ldr	r4, [pc, #172]	; (e108 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    e05c:	4d2b      	ldr	r5, [pc, #172]	; (e10c <bus_fault.isra.0+0xb8>)
    e05e:	1ae4      	subs	r4, r4, r3
    e060:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    e062:	01a4      	lsls	r4, r4, #6
    e064:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    e068:	4607      	mov	r7, r0
    e06a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    e06c:	4828      	ldr	r0, [pc, #160]	; (e110 <bus_fault.isra.0+0xbc>)
    e06e:	4641      	mov	r1, r8
    e070:	f004 f84c 	bl	1210c <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    e074:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e076:	04d1      	lsls	r1, r2, #19
    e078:	d503      	bpl.n	e082 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    e07a:	4641      	mov	r1, r8
    e07c:	4825      	ldr	r0, [pc, #148]	; (e114 <bus_fault.isra.0+0xc0>)
    e07e:	f004 f845 	bl	1210c <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    e082:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e084:	051a      	lsls	r2, r3, #20
    e086:	d504      	bpl.n	e092 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    e088:	4823      	ldr	r0, [pc, #140]	; (e118 <bus_fault.isra.0+0xc4>)
    e08a:	f044 0101 	orr.w	r1, r4, #1
    e08e:	f004 f83d 	bl	1210c <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    e092:	4d1e      	ldr	r5, [pc, #120]	; (e10c <bus_fault.isra.0+0xb8>)
    e094:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e096:	059b      	lsls	r3, r3, #22
    e098:	d512      	bpl.n	e0c0 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    e09a:	f044 0801 	orr.w	r8, r4, #1
    e09e:	4641      	mov	r1, r8
    e0a0:	481e      	ldr	r0, [pc, #120]	; (e11c <bus_fault.isra.0+0xc8>)
    e0a2:	f004 f833 	bl	1210c <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    e0a6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    e0a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e0aa:	0418      	lsls	r0, r3, #16
    e0ac:	d508      	bpl.n	e0c0 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    e0ae:	4642      	mov	r2, r8
    e0b0:	481b      	ldr	r0, [pc, #108]	; (e120 <bus_fault.isra.0+0xcc>)
    e0b2:	f004 f838 	bl	12126 <log_1>
			if (from_hard_fault) {
    e0b6:	b11f      	cbz	r7, e0c0 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    e0b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e0ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    e0be:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    e0c0:	4d12      	ldr	r5, [pc, #72]	; (e10c <bus_fault.isra.0+0xb8>)
    e0c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e0c4:	0559      	lsls	r1, r3, #21
    e0c6:	d504      	bpl.n	e0d2 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    e0c8:	4816      	ldr	r0, [pc, #88]	; (e124 <bus_fault.isra.0+0xd0>)
    e0ca:	f044 0101 	orr.w	r1, r4, #1
    e0ce:	f004 f81d 	bl	1210c <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    e0d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e0d4:	05da      	lsls	r2, r3, #23
    e0d6:	d50d      	bpl.n	e0f4 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    e0d8:	4813      	ldr	r0, [pc, #76]	; (e128 <bus_fault.isra.0+0xd4>)
    e0da:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    e0de:	f004 f815 	bl	1210c <log_0>
	*recoverable = memory_fault_recoverable(esf);
    e0e2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    e0e4:	4a09      	ldr	r2, [pc, #36]	; (e10c <bus_fault.isra.0+0xb8>)
    e0e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    e0e8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    e0ec:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    e0ee:	7030      	strb	r0, [r6, #0]
}
    e0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    e0f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e0f6:	049b      	lsls	r3, r3, #18
    e0f8:	d5f3      	bpl.n	e0e2 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    e0fa:	480c      	ldr	r0, [pc, #48]	; (e12c <bus_fault.isra.0+0xd8>)
    e0fc:	f044 0101 	orr.w	r1, r4, #1
    e100:	e7ed      	b.n	e0de <bus_fault.isra.0+0x8a>
    e102:	bf00      	nop
    e104:	00014394 	.word	0x00014394
    e108:	000143cc 	.word	0x000143cc
    e10c:	e000ed00 	.word	0xe000ed00
    e110:	00014b10 	.word	0x00014b10
    e114:	00014b26 	.word	0x00014b26
    e118:	00014a81 	.word	0x00014a81
    e11c:	00014b37 	.word	0x00014b37
    e120:	00014b50 	.word	0x00014b50
    e124:	00014b65 	.word	0x00014b65
    e128:	00014b80 	.word	0x00014b80
    e12c:	00014ae1 	.word	0x00014ae1

0000e130 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    e130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e134:	4b5a      	ldr	r3, [pc, #360]	; (e2a0 <z_arm_fault+0x170>)
{
    e136:	4607      	mov	r7, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e138:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    e13c:	4689      	mov	r9, r1
    e13e:	4614      	mov	r4, r2
    e140:	2500      	movs	r5, #0
    e142:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e144:	f3c8 0608 	ubfx	r6, r8, #0, #9
    e148:	f385 8811 	msr	BASEPRI, r5
    e14c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    e150:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    e154:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    e158:	d123      	bne.n	e1a2 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    e15a:	07d0      	lsls	r0, r2, #31
    e15c:	d421      	bmi.n	e1a2 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    e15e:	0651      	lsls	r1, r2, #25
    e160:	d403      	bmi.n	e16a <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    e162:	0722      	lsls	r2, r4, #28
    e164:	d40e      	bmi.n	e184 <z_arm_fault+0x54>
			*nested_exc = true;
    e166:	2501      	movs	r5, #1
    e168:	e00e      	b.n	e188 <z_arm_fault+0x58>
    e16a:	494e      	ldr	r1, [pc, #312]	; (e2a4 <z_arm_fault+0x174>)
    e16c:	4b4e      	ldr	r3, [pc, #312]	; (e2a8 <z_arm_fault+0x178>)
		PR_FAULT_INFO("Exception occurred in Secure State");
    e16e:	484f      	ldr	r0, [pc, #316]	; (e2ac <z_arm_fault+0x17c>)
    e170:	1a5b      	subs	r3, r3, r1
    e172:	08db      	lsrs	r3, r3, #3
    e174:	019b      	lsls	r3, r3, #6
    e176:	f043 0101 	orr.w	r1, r3, #1
    e17a:	f003 ffc7 	bl	1210c <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    e17e:	f014 0504 	ands.w	r5, r4, #4
    e182:	d001      	beq.n	e188 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
    e184:	464f      	mov	r7, r9
	*nested_exc = false;
    e186:	2500      	movs	r5, #0
	*recoverable = false;
    e188:	2300      	movs	r3, #0
    e18a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    e18e:	1ef3      	subs	r3, r6, #3
    e190:	2b09      	cmp	r3, #9
    e192:	d86c      	bhi.n	e26e <z_arm_fault+0x13e>
    e194:	e8df f003 	tbb	[pc, r3]
    e198:	3e5e5a07 	.word	0x3e5e5a07
    e19c:	6b6b6b6b 	.word	0x6b6b6b6b
    e1a0:	626b      	.short	0x626b
		return NULL;
    e1a2:	462f      	mov	r7, r5
    e1a4:	e7f0      	b.n	e188 <z_arm_fault+0x58>
	*recoverable = false;
    e1a6:	f04f 0800 	mov.w	r8, #0
    e1aa:	4b3e      	ldr	r3, [pc, #248]	; (e2a4 <z_arm_fault+0x174>)
    e1ac:	4e3e      	ldr	r6, [pc, #248]	; (e2a8 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    e1ae:	4840      	ldr	r0, [pc, #256]	; (e2b0 <z_arm_fault+0x180>)
    e1b0:	1af6      	subs	r6, r6, r3
    e1b2:	08f6      	lsrs	r6, r6, #3
    e1b4:	01b6      	lsls	r6, r6, #6
    e1b6:	f046 0601 	orr.w	r6, r6, #1
    e1ba:	4631      	mov	r1, r6
    e1bc:	f003 ffa6 	bl	1210c <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e1c0:	4b37      	ldr	r3, [pc, #220]	; (e2a0 <z_arm_fault+0x170>)
	*recoverable = false;
    e1c2:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e1c6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    e1c8:	f014 0402 	ands.w	r4, r4, #2
    e1cc:	d005      	beq.n	e1da <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
    e1ce:	4631      	mov	r1, r6
    e1d0:	4838      	ldr	r0, [pc, #224]	; (e2b4 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
    e1d2:	f003 ff9b 	bl	1210c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e1d6:	2400      	movs	r4, #0
}
    e1d8:	e01f      	b.n	e21a <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e1dc:	005b      	lsls	r3, r3, #1
    e1de:	d51c      	bpl.n	e21a <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
    e1e0:	4631      	mov	r1, r6
    e1e2:	4835      	ldr	r0, [pc, #212]	; (e2b8 <z_arm_fault+0x188>)
    e1e4:	f003 ff92 	bl	1210c <log_0>
		if (SCB_MMFSR != 0) {
    e1e8:	4b34      	ldr	r3, [pc, #208]	; (e2bc <z_arm_fault+0x18c>)
    e1ea:	781b      	ldrb	r3, [r3, #0]
    e1ec:	b12b      	cbz	r3, e1fa <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
    e1ee:	2001      	movs	r0, #1
    e1f0:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    e1f4:	f7ff fec8 	bl	df88 <mem_manage_fault.isra.0>
    e1f8:	e00e      	b.n	e218 <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
    e1fa:	4b31      	ldr	r3, [pc, #196]	; (e2c0 <z_arm_fault+0x190>)
    e1fc:	781b      	ldrb	r3, [r3, #0]
    e1fe:	b12b      	cbz	r3, e20c <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
    e200:	2001      	movs	r0, #1
    e202:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e206:	f7ff ff25 	bl	e054 <bus_fault.isra.0>
    e20a:	e005      	b.n	e218 <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
    e20c:	4b2d      	ldr	r3, [pc, #180]	; (e2c4 <z_arm_fault+0x194>)
    e20e:	881b      	ldrh	r3, [r3, #0]
    e210:	b29b      	uxth	r3, r3
    e212:	b113      	cbz	r3, e21a <z_arm_fault+0xea>
			reason = usage_fault(esf);
    e214:	f7ff fe50 	bl	deb8 <usage_fault.isra.0>
    e218:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e21a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e21e:	b993      	cbnz	r3, e246 <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e220:	2220      	movs	r2, #32
    e222:	4639      	mov	r1, r7
    e224:	a802      	add	r0, sp, #8
    e226:	f004 fb6a 	bl	128fe <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    e22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e22c:	b39d      	cbz	r5, e296 <z_arm_fault+0x166>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e22e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e232:	b922      	cbnz	r2, e23e <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e234:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e238:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e23c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    e23e:	4620      	mov	r0, r4
    e240:	a902      	add	r1, sp, #8
    e242:	f7ff fd99 	bl	dd78 <z_arm_fatal_error>
}
    e246:	b00b      	add	sp, #44	; 0x2c
    e248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    e24c:	2000      	movs	r0, #0
    e24e:	f10d 0107 	add.w	r1, sp, #7
    e252:	e7cf      	b.n	e1f4 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
    e254:	2000      	movs	r0, #0
    e256:	f10d 0107 	add.w	r1, sp, #7
    e25a:	e7d4      	b.n	e206 <z_arm_fault+0xd6>
    e25c:	4912      	ldr	r1, [pc, #72]	; (e2a8 <z_arm_fault+0x178>)
    e25e:	4b11      	ldr	r3, [pc, #68]	; (e2a4 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
    e260:	4819      	ldr	r0, [pc, #100]	; (e2c8 <z_arm_fault+0x198>)
    e262:	1ac9      	subs	r1, r1, r3
    e264:	08c9      	lsrs	r1, r1, #3
    e266:	0189      	lsls	r1, r1, #6
    e268:	f041 0101 	orr.w	r1, r1, #1
    e26c:	e7b1      	b.n	e1d2 <z_arm_fault+0xa2>
    e26e:	4a0d      	ldr	r2, [pc, #52]	; (e2a4 <z_arm_fault+0x174>)
    e270:	4b0d      	ldr	r3, [pc, #52]	; (e2a8 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
    e272:	4816      	ldr	r0, [pc, #88]	; (e2cc <z_arm_fault+0x19c>)
    e274:	1a9b      	subs	r3, r3, r2
    e276:	08db      	lsrs	r3, r3, #3
    e278:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    e27c:	ea4f 1383 	mov.w	r3, r3, lsl #6
    e280:	4913      	ldr	r1, [pc, #76]	; (e2d0 <z_arm_fault+0x1a0>)
    e282:	f043 0301 	orr.w	r3, r3, #1
    e286:	bf18      	it	ne
    e288:	4601      	movne	r1, r0
    e28a:	f1a6 0210 	sub.w	r2, r6, #16
    e28e:	4811      	ldr	r0, [pc, #68]	; (e2d4 <z_arm_fault+0x1a4>)
    e290:	f003 ff5d 	bl	1214e <log_2>
    e294:	e79f      	b.n	e1d6 <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e296:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e29a:	f023 0301 	bic.w	r3, r3, #1
    e29e:	e7cd      	b.n	e23c <z_arm_fault+0x10c>
    e2a0:	e000ed00 	.word	0xe000ed00
    e2a4:	00014394 	.word	0x00014394
    e2a8:	000143cc 	.word	0x000143cc
    e2ac:	00014b98 	.word	0x00014b98
    e2b0:	00014bbb 	.word	0x00014bbb
    e2b4:	00014bd2 	.word	0x00014bd2
    e2b8:	00014bf3 	.word	0x00014bf3
    e2bc:	e000ed28 	.word	0xe000ed28
    e2c0:	e000ed29 	.word	0xe000ed29
    e2c4:	e000ed2a 	.word	0xe000ed2a
    e2c8:	00014c12 	.word	0x00014c12
    e2cc:	00014c5d 	.word	0x00014c5d
    e2d0:	00014c48 	.word	0x00014c48
    e2d4:	00014c76 	.word	0x00014c76

0000e2d8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e2d8:	4b04      	ldr	r3, [pc, #16]	; (e2ec <z_arm_fault_init+0x14>)
    e2da:	695a      	ldr	r2, [r3, #20]
    e2dc:	f042 0210 	orr.w	r2, r2, #16
    e2e0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    e2e2:	695a      	ldr	r2, [r3, #20]
    e2e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    e2e8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e2ea:	4770      	bx	lr
    e2ec:	e000ed00 	.word	0xe000ed00

0000e2f0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    e2f0:	4b04      	ldr	r3, [pc, #16]	; (e304 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    e2f2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    e2f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    e2f6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    e2f8:	d003      	beq.n	e302 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    e2fa:	4903      	ldr	r1, [pc, #12]	; (e308 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    e2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    e300:	600a      	str	r2, [r1, #0]

0000e302 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    e302:	4770      	bx	lr
	ldr r3, =_kernel
    e304:	20010714 	.word	0x20010714
	ldr r1, =_SCS_ICSR
    e308:	e000ed04 	.word	0xe000ed04

0000e30c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e30c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e310:	4905      	ldr	r1, [pc, #20]	; (e328 <sys_arch_reboot+0x1c>)
    e312:	4b06      	ldr	r3, [pc, #24]	; (e32c <sys_arch_reboot+0x20>)
    e314:	68ca      	ldr	r2, [r1, #12]
    e316:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e31a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e31c:	60cb      	str	r3, [r1, #12]
    e31e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e322:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e324:	e7fd      	b.n	e322 <sys_arch_reboot+0x16>
    e326:	bf00      	nop
    e328:	e000ed00 	.word	0xe000ed00
    e32c:	05fa0004 	.word	0x05fa0004

0000e330 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e330:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e332:	2120      	movs	r1, #32
    e334:	4803      	ldr	r0, [pc, #12]	; (e344 <z_arm_interrupt_init+0x14>)
    e336:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e338:	3301      	adds	r3, #1
    e33a:	2b41      	cmp	r3, #65	; 0x41
    e33c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e340:	d1f9      	bne.n	e336 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e342:	4770      	bx	lr
    e344:	e000e100 	.word	0xe000e100

0000e348 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    e348:	b510      	push	{r4, lr}
    e34a:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
    e34c:	f003 f828 	bl	113a0 <z_thread_single_abort>

	if (_current == thread) {
    e350:	4b11      	ldr	r3, [pc, #68]	; (e398 <z_impl_k_thread_abort+0x50>)
    e352:	689b      	ldr	r3, [r3, #8]
    e354:	42a3      	cmp	r3, r4
    e356:	d107      	bne.n	e368 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e358:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e35c:	b183      	cbz	r3, e380 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e35e:	4a0f      	ldr	r2, [pc, #60]	; (e39c <z_impl_k_thread_abort+0x54>)
    e360:	6853      	ldr	r3, [r2, #4]
    e362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e366:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
    e368:	f04f 0320 	mov.w	r3, #32
    e36c:	f3ef 8011 	mrs	r0, BASEPRI
    e370:	f383 8811 	msr	BASEPRI, r3
    e374:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    e378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    e37c:	f005 bd8d 	b.w	13e9a <z_reschedule_irqlock>
    e380:	f04f 0320 	mov.w	r3, #32
    e384:	f3ef 8011 	mrs	r0, BASEPRI
    e388:	f383 8811 	msr	BASEPRI, r3
    e38c:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    e390:	f7ff fc14 	bl	dbbc <arch_swap>
	return ret;
    e394:	e7e8      	b.n	e368 <z_impl_k_thread_abort+0x20>
    e396:	bf00      	nop
    e398:	20010714 	.word	0x20010714
    e39c:	e000ed00 	.word	0xe000ed00

0000e3a0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e3a0:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    e3a2:	4b0e      	ldr	r3, [pc, #56]	; (e3dc <z_arm_configure_static_mpu_regions+0x3c>)
{
    e3a4:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    e3a6:	9302      	str	r3, [sp, #8]
    e3a8:	4b0d      	ldr	r3, [pc, #52]	; (e3e0 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e3aa:	4c0e      	ldr	r4, [pc, #56]	; (e3e4 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    e3ac:	9303      	str	r3, [sp, #12]
    e3ae:	4b0e      	ldr	r3, [pc, #56]	; (e3e8 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e3b0:	4a0e      	ldr	r2, [pc, #56]	; (e3ec <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    e3b2:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    e3b4:	ab02      	add	r3, sp, #8
    e3b6:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e3b8:	a801      	add	r0, sp, #4
    e3ba:	4623      	mov	r3, r4
    e3bc:	2101      	movs	r1, #1
    e3be:	f000 f93d 	bl	e63c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    e3c2:	2300      	movs	r3, #0
    e3c4:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e3c6:	4b0a      	ldr	r3, [pc, #40]	; (e3f0 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e3c8:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e3ca:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e3cc:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    e3ce:	9305      	str	r3, [sp, #20]
    e3d0:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e3d2:	f000 f93d 	bl	e650 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e3d6:	b008      	add	sp, #32
    e3d8:	bd10      	pop	{r4, pc}
    e3da:	bf00      	nop
    e3dc:	20010000 	.word	0x20010000
    e3e0:	00000000 	.word	0x00000000
    e3e4:	20040000 	.word	0x20040000
    e3e8:	00010006 	.word	0x00010006
    e3ec:	20010000 	.word	0x20010000
    e3f0:	20010168 	.word	0x20010168

0000e3f4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e3f4:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e3f6:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e3f8:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e3fa:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e3fe:	f004 031f 	and.w	r3, r4, #31
    e402:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e404:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e406:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e408:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e40c:	4904      	ldr	r1, [pc, #16]	; (e420 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e40e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e412:	f043 0301 	orr.w	r3, r3, #1
    e416:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    e418:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    e41a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e41c:	bd10      	pop	{r4, pc}
    e41e:	bf00      	nop
    e420:	e000ed90 	.word	0xe000ed90

0000e424 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    e424:	b508      	push	{r3, lr}
    e426:	4a07      	ldr	r2, [pc, #28]	; (e444 <region_allocate_and_init.part.0+0x20>)
    e428:	4b07      	ldr	r3, [pc, #28]	; (e448 <region_allocate_and_init.part.0+0x24>)
    e42a:	4601      	mov	r1, r0
    e42c:	1ad2      	subs	r2, r2, r3
    e42e:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e430:	0192      	lsls	r2, r2, #6
    e432:	4806      	ldr	r0, [pc, #24]	; (e44c <region_allocate_and_init.part.0+0x28>)
    e434:	f042 0201 	orr.w	r2, r2, #1
    e438:	f003 fe75 	bl	12126 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    e43c:	f06f 0015 	mvn.w	r0, #21
    e440:	bd08      	pop	{r3, pc}
    e442:	bf00      	nop
    e444:	000143c4 	.word	0x000143c4
    e448:	00014394 	.word	0x00014394
    e44c:	00014c8d 	.word	0x00014c8d

0000e450 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e454:	4607      	mov	r7, r0
    e456:	4688      	mov	r8, r1
    e458:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e45a:	2600      	movs	r6, #0
	MPU->RNR = index;
    e45c:	4d56      	ldr	r5, [pc, #344]	; (e5b8 <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    e45e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e460:	4546      	cmp	r6, r8
    e462:	da35      	bge.n	e4d0 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
    e464:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    e468:	f8d3 9004 	ldr.w	r9, [r3, #4]
    e46c:	f1b9 0f00 	cmp.w	r9, #0
    e470:	d051      	beq.n	e516 <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
    e472:	f1b9 0f1f 	cmp.w	r9, #31
    e476:	d91e      	bls.n	e4b6 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
    e478:	f019 0f1f 	tst.w	r9, #31
    e47c:	d11b      	bne.n	e4b6 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
    e47e:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    e482:	f01a 0f1f 	tst.w	sl, #31
    e486:	d116      	bne.n	e4b6 <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e488:	4650      	mov	r0, sl
    e48a:	f004 f9e0 	bl	1284e <arm_cmse_mpu_region_get>
    e48e:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e490:	eb09 000a 	add.w	r0, r9, sl
    e494:	3801      	subs	r0, #1
    e496:	f004 f9da 	bl	1284e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e49a:	4583      	cmp	fp, r0
    e49c:	d01c      	beq.n	e4d8 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
    e49e:	f06f 0b15 	mvn.w	fp, #21
    e4a2:	4a46      	ldr	r2, [pc, #280]	; (e5bc <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    e4a4:	4b46      	ldr	r3, [pc, #280]	; (e5c0 <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e4a6:	4659      	mov	r1, fp
    e4a8:	1ad2      	subs	r2, r2, r3
    e4aa:	08d2      	lsrs	r2, r2, #3
    e4ac:	0192      	lsls	r2, r2, #6
    e4ae:	4845      	ldr	r0, [pc, #276]	; (e5c4 <mpu_configure_regions_and_partition.constprop.0+0x174>)
    e4b0:	f042 0201 	orr.w	r2, r2, #1
    e4b4:	e008      	b.n	e4c8 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e4b6:	4631      	mov	r1, r6
    e4b8:	4a40      	ldr	r2, [pc, #256]	; (e5bc <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    e4ba:	4b41      	ldr	r3, [pc, #260]	; (e5c0 <mpu_configure_regions_and_partition.constprop.0+0x170>)
    e4bc:	4842      	ldr	r0, [pc, #264]	; (e5c8 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    e4be:	1ad2      	subs	r2, r2, r3
    e4c0:	08d2      	lsrs	r2, r2, #3
    e4c2:	0192      	lsls	r2, r2, #6
    e4c4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
    e4c8:	f003 fe2d 	bl	12126 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e4cc:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e4d0:	4620      	mov	r0, r4
    e4d2:	b005      	add	sp, #20
    e4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e4d8:	f11b 0f16 	cmn.w	fp, #22
    e4dc:	d0e1      	beq.n	e4a2 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
    e4de:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e4e0:	455b      	cmp	r3, fp
    e4e2:	dbde      	blt.n	e4a2 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
    e4e4:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e4e8:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    e4ea:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e4ee:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e4f0:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e4f4:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e4f8:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e4fc:	e9d1 3200 	ldrd	r3, r2, [r1]
    e500:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    e502:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    e504:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
    e508:	d118      	bne.n	e53c <mpu_configure_regions_and_partition.constprop.0+0xec>
    e50a:	45ca      	cmp	sl, r9
    e50c:	d105      	bne.n	e51a <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
    e50e:	fa5f f08b 	uxtb.w	r0, fp
    e512:	f004 f97b 	bl	1280c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e516:	3601      	adds	r6, #1
    e518:	e7a2      	b.n	e460 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
    e51a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e51e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    e520:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e524:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e528:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e52a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    e52c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    e52e:	f004 f96d 	bl	1280c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e532:	f110 0f16 	cmn.w	r0, #22
    e536:	d0c9      	beq.n	e4cc <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
    e538:	1c44      	adds	r4, r0, #1
    e53a:	e7ec      	b.n	e516 <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
    e53c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e540:	692a      	ldr	r2, [r5, #16]
    e542:	3b01      	subs	r3, #1
    e544:	f023 031f 	bic.w	r3, r3, #31
    e548:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e54c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    e54e:	45ca      	cmp	sl, r9
    e550:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e552:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    e554:	d0eb      	beq.n	e52e <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
    e556:	f004 f959 	bl	1280c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e55a:	f110 0f16 	cmn.w	r0, #22
    e55e:	d0b5      	beq.n	e4cc <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
    e560:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    e564:	68ea      	ldr	r2, [r5, #12]
    e566:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    e56a:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
    e56e:	f362 0304 	bfi	r3, r2, #0, #5
    e572:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e576:	692b      	ldr	r3, [r5, #16]
    e578:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e57c:	085b      	lsrs	r3, r3, #1
    e57e:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    e582:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e586:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    e58a:	e9d3 1300 	ldrd	r1, r3, [r3]
    e58e:	440b      	add	r3, r1
    e590:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    e592:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e596:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    e598:	4453      	add	r3, sl
    e59a:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
    e59e:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
    e5a0:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    e5a4:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    e5a6:	9303      	str	r3, [sp, #12]
    e5a8:	d902      	bls.n	e5b0 <mpu_configure_regions_and_partition.constprop.0+0x160>
    e5aa:	f7ff ff3b 	bl	e424 <region_allocate_and_init.part.0>
    e5ae:	e7c0      	b.n	e532 <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
    e5b0:	4669      	mov	r1, sp
    e5b2:	f7ff ff1f 	bl	e3f4 <region_init>
			if (reg_index == -EINVAL) {
    e5b6:	e7bf      	b.n	e538 <mpu_configure_regions_and_partition.constprop.0+0xe8>
    e5b8:	e000ed90 	.word	0xe000ed90
    e5bc:	000143c4 	.word	0x000143c4
    e5c0:	00014394 	.word	0x00014394
    e5c4:	00014cd6 	.word	0x00014cd6
    e5c8:	00014cb3 	.word	0x00014cb3

0000e5cc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e5cc:	2205      	movs	r2, #5
    e5ce:	4b03      	ldr	r3, [pc, #12]	; (e5dc <arm_core_mpu_enable+0x10>)
    e5d0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    e5d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e5d6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e5da:	4770      	bx	lr
    e5dc:	e000ed90 	.word	0xe000ed90

0000e5e0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e5e0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e5e4:	2200      	movs	r2, #0
    e5e6:	4b01      	ldr	r3, [pc, #4]	; (e5ec <arm_core_mpu_disable+0xc>)
    e5e8:	605a      	str	r2, [r3, #4]
}
    e5ea:	4770      	bx	lr
    e5ec:	e000ed90 	.word	0xe000ed90

0000e5f0 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    e5f0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e5f2:	4c0e      	ldr	r4, [pc, #56]	; (e62c <arm_mpu_init+0x3c>)
    e5f4:	6825      	ldr	r5, [r4, #0]
    e5f6:	2d10      	cmp	r5, #16
    e5f8:	d814      	bhi.n	e624 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    e5fa:	f7ff fff1 	bl	e5e0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e5fe:	2000      	movs	r0, #0
	MPU->MAIR0 =
    e600:	4b0b      	ldr	r3, [pc, #44]	; (e630 <arm_mpu_init+0x40>)
    e602:	4a0c      	ldr	r2, [pc, #48]	; (e634 <arm_mpu_init+0x44>)
    e604:	631a      	str	r2, [r3, #48]	; 0x30
    e606:	4285      	cmp	r5, r0
    e608:	d105      	bne.n	e616 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    e60a:	4b0b      	ldr	r3, [pc, #44]	; (e638 <arm_mpu_init+0x48>)
    e60c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    e60e:	f7ff ffdd 	bl	e5cc <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    e612:	2000      	movs	r0, #0
}
    e614:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e616:	6861      	ldr	r1, [r4, #4]
    e618:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e61c:	f7ff feea 	bl	e3f4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e620:	3001      	adds	r0, #1
    e622:	e7f0      	b.n	e606 <arm_mpu_init+0x16>
		return -1;
    e624:	f04f 30ff 	mov.w	r0, #4294967295
    e628:	e7f4      	b.n	e614 <arm_mpu_init+0x24>
    e62a:	bf00      	nop
    e62c:	000144e0 	.word	0x000144e0
    e630:	e000ed90 	.word	0xe000ed90
    e634:	0044ffaa 	.word	0x0044ffaa
    e638:	20010759 	.word	0x20010759

0000e63c <arm_core_mpu_configure_static_mpu_regions>:
{
    e63c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e63e:	4c03      	ldr	r4, [pc, #12]	; (e64c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e640:	7822      	ldrb	r2, [r4, #0]
    e642:	f7ff ff05 	bl	e450 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e646:	7020      	strb	r0, [r4, #0]
}
    e648:	bd10      	pop	{r4, pc}
    e64a:	bf00      	nop
    e64c:	20010759 	.word	0x20010759

0000e650 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e654:	4d26      	ldr	r5, [pc, #152]	; (e6f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    e656:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e658:	4606      	mov	r6, r0
    e65a:	f04f 0800 	mov.w	r8, #0
    e65e:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e660:	4f24      	ldr	r7, [pc, #144]	; (e6f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e662:	45d0      	cmp	r8, sl
    e664:	da1b      	bge.n	e69e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    e666:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e66a:	f1b9 0f00 	cmp.w	r9, #0
    e66e:	d039      	beq.n	e6e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e670:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e672:	4608      	mov	r0, r1
    e674:	9101      	str	r1, [sp, #4]
    e676:	f004 f8ea 	bl	1284e <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e67a:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e67c:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e67e:	eb09 0001 	add.w	r0, r9, r1
    e682:	3801      	subs	r0, #1
    e684:	f004 f8e3 	bl	1284e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e688:	4284      	cmp	r4, r0
    e68a:	f04f 0214 	mov.w	r2, #20
    e68e:	4b1a      	ldr	r3, [pc, #104]	; (e6f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    e690:	d008      	beq.n	e6a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    e692:	f06f 0315 	mvn.w	r3, #21
    e696:	fb02 f808 	mul.w	r8, r2, r8
    e69a:	f84b 3008 	str.w	r3, [fp, r8]
}
    e69e:	b003      	add	sp, #12
    e6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e6a4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e6a8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e6aa:	d0f8      	beq.n	e69e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e6ac:	7819      	ldrb	r1, [r3, #0]
    e6ae:	42a1      	cmp	r1, r4
    e6b0:	ddf5      	ble.n	e69e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    e6b2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e6b6:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    e6b8:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    e6ba:	68fc      	ldr	r4, [r7, #12]
    e6bc:	f100 0108 	add.w	r1, r0, #8
    e6c0:	7b00      	ldrb	r0, [r0, #12]
    e6c2:	f364 0004 	bfi	r0, r4, #0, #5
    e6c6:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e6c8:	6938      	ldr	r0, [r7, #16]
    e6ca:	790c      	ldrb	r4, [r1, #4]
    e6cc:	0840      	lsrs	r0, r0, #1
    e6ce:	f360 1447 	bfi	r4, r0, #5, #3
    e6d2:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e6d4:	68f9      	ldr	r1, [r7, #12]
    e6d6:	f021 011f 	bic.w	r1, r1, #31
    e6da:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e6dc:	6939      	ldr	r1, [r7, #16]
    e6de:	f021 011f 	bic.w	r1, r1, #31
    e6e2:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e6e4:	f108 0801 	add.w	r8, r8, #1
    e6e8:	3514      	adds	r5, #20
    e6ea:	360c      	adds	r6, #12
    e6ec:	e7b9      	b.n	e662 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e6ee:	bf00      	nop
    e6f0:	20010668 	.word	0x20010668
    e6f4:	e000ed90 	.word	0xe000ed90
    e6f8:	20010759 	.word	0x20010759

0000e6fc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e6fc:	4b01      	ldr	r3, [pc, #4]	; (e704 <__stdout_hook_install+0x8>)
    e6fe:	6018      	str	r0, [r3, #0]
}
    e700:	4770      	bx	lr
    e702:	bf00      	nop
    e704:	20010028 	.word	0x20010028

0000e708 <registry_find>:

	return rv;
}

static struct registry_entry *registry_find(int type)
{
    e708:	4602      	mov	r2, r0
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
    e70a:	4808      	ldr	r0, [pc, #32]	; (e72c <registry_find+0x24>)
    e70c:	6841      	ldr	r1, [r0, #4]
    e70e:	4603      	mov	r3, r0
    e710:	b111      	cbz	r1, e718 <registry_find+0x10>
    e712:	6801      	ldr	r1, [r0, #0]
    e714:	428a      	cmp	r2, r1
    e716:	d007      	beq.n	e728 <registry_find+0x20>
    e718:	68d8      	ldr	r0, [r3, #12]
    e71a:	b128      	cbz	r0, e728 <registry_find+0x20>
    e71c:	6898      	ldr	r0, [r3, #8]
		struct registry_entry *ep = &registry[i];
    e71e:	4b04      	ldr	r3, [pc, #16]	; (e730 <registry_find+0x28>)
    e720:	4282      	cmp	r2, r0
    e722:	bf0c      	ite	eq
    e724:	4618      	moveq	r0, r3
    e726:	2000      	movne	r0, #0
			return ep;
		}
	}
	return NULL;
}
    e728:	4770      	bx	lr
    e72a:	bf00      	nop
    e72c:	20010698 	.word	0x20010698
    e730:	200106a0 	.word	0x200106a0

0000e734 <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
    e734:	4801      	ldr	r0, [pc, #4]	; (e73c <k_mutex_unlock.constprop.0+0x8>)
    e736:	f002 bc2d 	b.w	10f94 <z_impl_k_mutex_unlock>
    e73a:	bf00      	nop
    e73c:	20010684 	.word	0x20010684

0000e740 <k_mutex_lock.constprop.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
    e740:	4602      	mov	r2, r0
    e742:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    e744:	4801      	ldr	r0, [pc, #4]	; (e74c <k_mutex_lock.constprop.0+0xc>)
    e746:	f002 bbad 	b.w	10ea4 <z_impl_k_mutex_lock>
    e74a:	bf00      	nop
    e74c:	20010684 	.word	0x20010684

0000e750 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
    e750:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
    e752:	4804      	ldr	r0, [pc, #16]	; (e764 <fs_init+0x14>)
    e754:	f005 fb7a 	bl	13e4c <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
    e758:	4b03      	ldr	r3, [pc, #12]	; (e768 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
    e75a:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
    e75c:	e9c3 3300 	strd	r3, r3, [r3]
    e760:	bd08      	pop	{r3, pc}
    e762:	bf00      	nop
    e764:	20010684 	.word	0x20010684
    e768:	2001067c 	.word	0x2001067c

0000e76c <fs_get_mnt_point>:
{
    e76c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e770:	4682      	mov	sl, r0
	size_t len, name_len = strlen(name);
    e772:	4608      	mov	r0, r1
{
    e774:	4688      	mov	r8, r1
    e776:	4615      	mov	r5, r2
	size_t len, name_len = strlen(name);
    e778:	f004 f88f 	bl	1289a <strlen>
	k_mutex_lock(&mutex, K_FOREVER);
    e77c:	f04f 31ff 	mov.w	r1, #4294967295
	size_t len, name_len = strlen(name);
    e780:	4683      	mov	fp, r0
	k_mutex_lock(&mutex, K_FOREVER);
    e782:	f04f 30ff 	mov.w	r0, #4294967295
    e786:	f7ff ffdb 	bl	e740 <k_mutex_lock.constprop.0>
	return list->head == list;
    e78a:	4b1b      	ldr	r3, [pc, #108]	; (e7f8 <fs_get_mnt_point+0x8c>)
    e78c:	681c      	ldr	r4, [r3, #0]
    e78e:	4699      	mov	r9, r3
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e790:	429c      	cmp	r4, r3
    e792:	bf08      	it	eq
    e794:	2400      	moveq	r4, #0
	return (node == list->tail) ? NULL : node->next;
    e796:	2300      	movs	r3, #0
    e798:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    e79a:	b95c      	cbnz	r4, e7b4 <fs_get_mnt_point+0x48>
	k_mutex_unlock(&mutex);
    e79c:	f7ff ffca 	bl	e734 <k_mutex_unlock.constprop.0>
	if (mnt_p == NULL) {
    e7a0:	b32f      	cbz	r7, e7ee <fs_get_mnt_point+0x82>
	*mnt_pntp = mnt_p;
    e7a2:	f8ca 7000 	str.w	r7, [sl]
	if (match_len)
    e7a6:	b32d      	cbz	r5, e7f4 <fs_get_mnt_point+0x88>
	return 0;
    e7a8:	2000      	movs	r0, #0
		*match_len = mnt_p->mountp_len;
    e7aa:	69bb      	ldr	r3, [r7, #24]
    e7ac:	602b      	str	r3, [r5, #0]
}
    e7ae:	b003      	add	sp, #12
    e7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = itr->mountp_len;
    e7b4:	69a6      	ldr	r6, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
    e7b6:	42b3      	cmp	r3, r6
    e7b8:	d813      	bhi.n	e7e2 <fs_get_mnt_point+0x76>
    e7ba:	45b3      	cmp	fp, r6
    e7bc:	d311      	bcc.n	e7e2 <fs_get_mnt_point+0x76>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
    e7be:	2e01      	cmp	r6, #1
    e7c0:	d904      	bls.n	e7cc <fs_get_mnt_point+0x60>
    e7c2:	f818 2006 	ldrb.w	r2, [r8, r6]
    e7c6:	2a2f      	cmp	r2, #47	; 0x2f
    e7c8:	d000      	beq.n	e7cc <fs_get_mnt_point+0x60>
    e7ca:	b952      	cbnz	r2, e7e2 <fs_get_mnt_point+0x76>
		if (strncmp(name, itr->mnt_point, len) == 0) {
    e7cc:	4632      	mov	r2, r6
    e7ce:	4640      	mov	r0, r8
    e7d0:	68e1      	ldr	r1, [r4, #12]
    e7d2:	9301      	str	r3, [sp, #4]
    e7d4:	f004 f874 	bl	128c0 <strncmp>
    e7d8:	2800      	cmp	r0, #0
    e7da:	9b01      	ldr	r3, [sp, #4]
    e7dc:	bf04      	itt	eq
    e7de:	4627      	moveq	r7, r4
    e7e0:	4633      	moveq	r3, r6
    e7e2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    e7e6:	4294      	cmp	r4, r2
    e7e8:	d0d8      	beq.n	e79c <fs_get_mnt_point+0x30>
    e7ea:	6824      	ldr	r4, [r4, #0]
    e7ec:	e7d5      	b.n	e79a <fs_get_mnt_point+0x2e>
		return -ENOENT;
    e7ee:	f06f 0001 	mvn.w	r0, #1
    e7f2:	e7dc      	b.n	e7ae <fs_get_mnt_point+0x42>
	return 0;
    e7f4:	4628      	mov	r0, r5
    e7f6:	e7da      	b.n	e7ae <fs_get_mnt_point+0x42>
    e7f8:	2001067c 	.word	0x2001067c

0000e7fc <fs_opendir>:
{
    e7fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e7fe:	4606      	mov	r6, r0
	if ((abs_path == NULL) ||
    e800:	460d      	mov	r5, r1
    e802:	b971      	cbnz	r1, e822 <fs_opendir+0x26>
    e804:	4b2a      	ldr	r3, [pc, #168]	; (e8b0 <fs_opendir+0xb4>)
    e806:	492b      	ldr	r1, [pc, #172]	; (e8b4 <fs_opendir+0xb8>)
		LOG_ERR("invalid file name!!");
    e808:	482b      	ldr	r0, [pc, #172]	; (e8b8 <fs_opendir+0xbc>)
    e80a:	1ac9      	subs	r1, r1, r3
    e80c:	08c9      	lsrs	r1, r1, #3
    e80e:	0189      	lsls	r1, r1, #6
    e810:	f041 0101 	orr.w	r1, r1, #1
    e814:	f003 fc7a 	bl	1210c <log_0>
		return -EINVAL;
    e818:	f06f 0415 	mvn.w	r4, #21
}
    e81c:	4620      	mov	r0, r4
    e81e:	b002      	add	sp, #8
    e820:	bd70      	pop	{r4, r5, r6, pc}
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
    e822:	4608      	mov	r0, r1
    e824:	f004 f839 	bl	1289a <strlen>
	if ((abs_path == NULL) ||
    e828:	2800      	cmp	r0, #0
    e82a:	d0eb      	beq.n	e804 <fs_opendir+0x8>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
    e82c:	782b      	ldrb	r3, [r5, #0]
    e82e:	2b2f      	cmp	r3, #47	; 0x2f
    e830:	d1e8      	bne.n	e804 <fs_opendir+0x8>
	if (strcmp(abs_path, "/") == 0) {
    e832:	4628      	mov	r0, r5
    e834:	4921      	ldr	r1, [pc, #132]	; (e8bc <fs_opendir+0xc0>)
    e836:	f004 f837 	bl	128a8 <strcmp>
    e83a:	4604      	mov	r4, r0
    e83c:	b978      	cbnz	r0, e85e <fs_opendir+0x62>
		k_mutex_lock(&mutex, K_FOREVER);
    e83e:	f04f 31ff 	mov.w	r1, #4294967295
    e842:	f04f 30ff 	mov.w	r0, #4294967295
    e846:	f7ff ff7b 	bl	e740 <k_mutex_lock.constprop.0>
	return list->head == list;
    e84a:	4a1d      	ldr	r2, [pc, #116]	; (e8c0 <fs_opendir+0xc4>)
		zdp->mp = NULL;
    e84c:	6074      	str	r4, [r6, #4]
    e84e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e850:	4293      	cmp	r3, r2
    e852:	bf08      	it	eq
    e854:	2300      	moveq	r3, #0
		zdp->dirp = sys_dlist_peek_head(&fs_mnt_list);
    e856:	6033      	str	r3, [r6, #0]
		k_mutex_unlock(&mutex);
    e858:	f7ff ff6c 	bl	e734 <k_mutex_unlock.constprop.0>
		return 0;
    e85c:	e7de      	b.n	e81c <fs_opendir+0x20>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
    e85e:	2200      	movs	r2, #0
    e860:	4629      	mov	r1, r5
    e862:	a801      	add	r0, sp, #4
    e864:	f7ff ff82 	bl	e76c <fs_get_mnt_point>
	if (rc < 0) {
    e868:	1e04      	subs	r4, r0, #0
    e86a:	da0b      	bge.n	e884 <fs_opendir+0x88>
    e86c:	4a11      	ldr	r2, [pc, #68]	; (e8b4 <fs_opendir+0xb8>)
    e86e:	4b10      	ldr	r3, [pc, #64]	; (e8b0 <fs_opendir+0xb4>)
		LOG_ERR("%s:mount point not found!!", __func__);
    e870:	4914      	ldr	r1, [pc, #80]	; (e8c4 <fs_opendir+0xc8>)
    e872:	1ad2      	subs	r2, r2, r3
    e874:	08d2      	lsrs	r2, r2, #3
    e876:	0192      	lsls	r2, r2, #6
    e878:	4813      	ldr	r0, [pc, #76]	; (e8c8 <fs_opendir+0xcc>)
    e87a:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("directory open error (%d)", rc);
    e87e:	f003 fc52 	bl	12126 <log_1>
    e882:	e7cb      	b.n	e81c <fs_opendir+0x20>
	zdp->mp = mp;
    e884:	9b01      	ldr	r3, [sp, #4]
    e886:	6073      	str	r3, [r6, #4]
	if (zdp->mp->fs->opendir != NULL) {
    e888:	69db      	ldr	r3, [r3, #28]
    e88a:	6a1b      	ldr	r3, [r3, #32]
    e88c:	2b00      	cmp	r3, #0
    e88e:	d0c5      	beq.n	e81c <fs_opendir+0x20>
		rc = zdp->mp->fs->opendir(zdp, abs_path);
    e890:	4629      	mov	r1, r5
    e892:	4630      	mov	r0, r6
    e894:	4798      	blx	r3
		if (rc < 0) {
    e896:	1e04      	subs	r4, r0, #0
    e898:	dac0      	bge.n	e81c <fs_opendir+0x20>
    e89a:	4a06      	ldr	r2, [pc, #24]	; (e8b4 <fs_opendir+0xb8>)
    e89c:	4b04      	ldr	r3, [pc, #16]	; (e8b0 <fs_opendir+0xb4>)
			LOG_ERR("directory open error (%d)", rc);
    e89e:	4621      	mov	r1, r4
    e8a0:	1ad2      	subs	r2, r2, r3
    e8a2:	08d2      	lsrs	r2, r2, #3
    e8a4:	0192      	lsls	r2, r2, #6
    e8a6:	4809      	ldr	r0, [pc, #36]	; (e8cc <fs_opendir+0xd0>)
    e8a8:	f042 0201 	orr.w	r2, r2, #1
    e8ac:	e7e7      	b.n	e87e <fs_opendir+0x82>
    e8ae:	bf00      	nop
    e8b0:	00014394 	.word	0x00014394
    e8b4:	000143ac 	.word	0x000143ac
    e8b8:	00014d08 	.word	0x00014d08
    e8bc:	00014d4c 	.word	0x00014d4c
    e8c0:	2001067c 	.word	0x2001067c
    e8c4:	00014e4f 	.word	0x00014e4f
    e8c8:	00014d1c 	.word	0x00014d1c
    e8cc:	00014d4e 	.word	0x00014d4e

0000e8d0 <fs_readdir>:
{
    e8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (zdp->mp) {
    e8d4:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
    e8d8:	4606      	mov	r6, r0
    e8da:	460d      	mov	r5, r1
	if (zdp->mp) {
    e8dc:	f1b8 0f00 	cmp.w	r8, #0
    e8e0:	d023      	beq.n	e92a <fs_readdir+0x5a>
		if (zdp->mp->fs->readdir != NULL) {
    e8e2:	f8d8 301c 	ldr.w	r3, [r8, #28]
    e8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e8e8:	2b00      	cmp	r3, #0
    e8ea:	d053      	beq.n	e994 <fs_readdir+0xc4>
				if ((strcmp(entry->name, ".") != 0)
    e8ec:	f8df 80dc 	ldr.w	r8, [pc, #220]	; e9cc <fs_readdir+0xfc>
    e8f0:	1c4f      	adds	r7, r1, #1
				rc = zdp->mp->fs->readdir(zdp, entry);
    e8f2:	6873      	ldr	r3, [r6, #4]
    e8f4:	4629      	mov	r1, r5
    e8f6:	69db      	ldr	r3, [r3, #28]
    e8f8:	4630      	mov	r0, r6
    e8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e8fc:	4798      	blx	r3
				if (rc < 0) {
    e8fe:	1e04      	subs	r4, r0, #0
    e900:	db4e      	blt.n	e9a0 <fs_readdir+0xd0>
				if (entry->name[0] == 0) {
    e902:	786b      	ldrb	r3, [r5, #1]
    e904:	b173      	cbz	r3, e924 <fs_readdir+0x54>
				if (entry->type != FS_DIR_ENTRY_DIR) {
    e906:	782b      	ldrb	r3, [r5, #0]
    e908:	2b01      	cmp	r3, #1
    e90a:	d10b      	bne.n	e924 <fs_readdir+0x54>
				if ((strcmp(entry->name, ".") != 0)
    e90c:	4641      	mov	r1, r8
    e90e:	4638      	mov	r0, r7
    e910:	f003 ffca 	bl	128a8 <strcmp>
    e914:	2800      	cmp	r0, #0
    e916:	d0ec      	beq.n	e8f2 <fs_readdir+0x22>
				    && (strcmp(entry->name, "..") != 0)) {
    e918:	4638      	mov	r0, r7
    e91a:	4927      	ldr	r1, [pc, #156]	; (e9b8 <fs_readdir+0xe8>)
    e91c:	f003 ffc4 	bl	128a8 <strcmp>
    e920:	2800      	cmp	r0, #0
    e922:	d0e6      	beq.n	e8f2 <fs_readdir+0x22>
}
    e924:	4620      	mov	r0, r4
    e926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (zdp->dirp == NULL) {
    e92a:	6804      	ldr	r4, [r0, #0]
    e92c:	b90c      	cbnz	r4, e932 <fs_readdir+0x62>
		entry->name[0] = 0;
    e92e:	704c      	strb	r4, [r1, #1]
		return 0;
    e930:	e7f8      	b.n	e924 <fs_readdir+0x54>
	k_mutex_lock(&mutex, K_FOREVER);
    e932:	f04f 30ff 	mov.w	r0, #4294967295
    e936:	f04f 31ff 	mov.w	r1, #4294967295
    e93a:	f7ff ff01 	bl	e740 <k_mutex_lock.constprop.0>
	return list->head == list;
    e93e:	4b1f      	ldr	r3, [pc, #124]	; (e9bc <fs_readdir+0xec>)
    e940:	681f      	ldr	r7, [r3, #0]
    e942:	4699      	mov	r9, r3
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e944:	429f      	cmp	r7, r3
    e946:	bf08      	it	eq
    e948:	2700      	moveq	r7, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e94a:	685b      	ldr	r3, [r3, #4]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    e94c:	b917      	cbnz	r7, e954 <fs_readdir+0x84>
	sys_dnode_t *node, *next = NULL;
    e94e:	46b8      	mov	r8, r7
	bool found = false;
    e950:	2400      	movs	r4, #0
    e952:	e014      	b.n	e97e <fs_readdir+0xae>
		if (node == zdp->dirp) {
    e954:	6832      	ldr	r2, [r6, #0]
    e956:	42ba      	cmp	r2, r7
    e958:	d118      	bne.n	e98c <fs_readdir+0xbc>
			entry->type = FS_DIR_ENTRY_DIR;
    e95a:	2401      	movs	r4, #1
    e95c:	4628      	mov	r0, r5
    e95e:	f800 4b01 	strb.w	r4, [r0], #1
			strncpy(entry->name, mnt->mnt_point + 1,
    e962:	68f9      	ldr	r1, [r7, #12]
    e964:	220c      	movs	r2, #12
    e966:	4421      	add	r1, r4
    e968:	f003 ff84 	bl	12874 <strncpy>
			entry->name[sizeof(entry->name) - 1] = 0;
    e96c:	2300      	movs	r3, #0
    e96e:	736b      	strb	r3, [r5, #13]
			entry->size = 0;
    e970:	612b      	str	r3, [r5, #16]
	return (node == list->tail) ? NULL : node->next;
    e972:	f8d9 3004 	ldr.w	r3, [r9, #4]
    e976:	429f      	cmp	r7, r3
    e978:	d001      	beq.n	e97e <fs_readdir+0xae>
    e97a:	f8d7 8000 	ldr.w	r8, [r7]
	k_mutex_unlock(&mutex);
    e97e:	f7ff fed9 	bl	e734 <k_mutex_unlock.constprop.0>
	if (!found) {
    e982:	b154      	cbz	r4, e99a <fs_readdir+0xca>
	return 0;
    e984:	2400      	movs	r4, #0
	zdp->dirp = next;
    e986:	f8c6 8000 	str.w	r8, [r6]
	return 0;
    e98a:	e7cb      	b.n	e924 <fs_readdir+0x54>
    e98c:	429f      	cmp	r7, r3
    e98e:	d0df      	beq.n	e950 <fs_readdir+0x80>
    e990:	683f      	ldr	r7, [r7, #0]
    e992:	e7db      	b.n	e94c <fs_readdir+0x7c>
		int rc = -EINVAL;
    e994:	f06f 0415 	mvn.w	r4, #21
    e998:	e7c4      	b.n	e924 <fs_readdir+0x54>
		return -ENOENT;
    e99a:	f06f 0401 	mvn.w	r4, #1
    e99e:	e7c1      	b.n	e924 <fs_readdir+0x54>
    e9a0:	4b07      	ldr	r3, [pc, #28]	; (e9c0 <fs_readdir+0xf0>)
    e9a2:	4a08      	ldr	r2, [pc, #32]	; (e9c4 <fs_readdir+0xf4>)
				LOG_ERR("directory read error (%d)", rc);
    e9a4:	4621      	mov	r1, r4
    e9a6:	1ad2      	subs	r2, r2, r3
    e9a8:	08d2      	lsrs	r2, r2, #3
    e9aa:	0192      	lsls	r2, r2, #6
    e9ac:	4806      	ldr	r0, [pc, #24]	; (e9c8 <fs_readdir+0xf8>)
    e9ae:	f042 0201 	orr.w	r2, r2, #1
    e9b2:	f003 fbb8 	bl	12126 <log_1>
    e9b6:	e7b5      	b.n	e924 <fs_readdir+0x54>
    e9b8:	00014d68 	.word	0x00014d68
    e9bc:	2001067c 	.word	0x2001067c
    e9c0:	00014394 	.word	0x00014394
    e9c4:	000143ac 	.word	0x000143ac
    e9c8:	00014d6b 	.word	0x00014d6b
    e9cc:	000147c5 	.word	0x000147c5

0000e9d0 <fs_closedir>:
{
    e9d0:	b538      	push	{r3, r4, r5, lr}
	if (zdp->mp == NULL) {
    e9d2:	6844      	ldr	r4, [r0, #4]
{
    e9d4:	4605      	mov	r5, r0
	if (zdp->mp == NULL) {
    e9d6:	b914      	cbnz	r4, e9de <fs_closedir+0xe>
		zdp->dirp = NULL;
    e9d8:	6004      	str	r4, [r0, #0]
}
    e9da:	4620      	mov	r0, r4
    e9dc:	bd38      	pop	{r3, r4, r5, pc}
	if (zdp->mp->fs->closedir != NULL) {
    e9de:	69e3      	ldr	r3, [r4, #28]
    e9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e9e2:	b173      	cbz	r3, ea02 <fs_closedir+0x32>
		rc = zdp->mp->fs->closedir(zdp);
    e9e4:	4798      	blx	r3
		if (rc < 0) {
    e9e6:	1e04      	subs	r4, r0, #0
    e9e8:	da0d      	bge.n	ea06 <fs_closedir+0x36>
    e9ea:	4b08      	ldr	r3, [pc, #32]	; (ea0c <fs_closedir+0x3c>)
    e9ec:	4a08      	ldr	r2, [pc, #32]	; (ea10 <fs_closedir+0x40>)
			LOG_ERR("directory close error (%d)", rc);
    e9ee:	4621      	mov	r1, r4
    e9f0:	1ad2      	subs	r2, r2, r3
    e9f2:	08d2      	lsrs	r2, r2, #3
    e9f4:	0192      	lsls	r2, r2, #6
    e9f6:	4807      	ldr	r0, [pc, #28]	; (ea14 <fs_closedir+0x44>)
    e9f8:	f042 0201 	orr.w	r2, r2, #1
    e9fc:	f003 fb93 	bl	12126 <log_1>
			return rc;
    ea00:	e7eb      	b.n	e9da <fs_closedir+0xa>
	int rc = -EINVAL;
    ea02:	f06f 0415 	mvn.w	r4, #21
	zdp->mp = NULL;
    ea06:	2300      	movs	r3, #0
    ea08:	606b      	str	r3, [r5, #4]
	return rc;
    ea0a:	e7e6      	b.n	e9da <fs_closedir+0xa>
    ea0c:	00014394 	.word	0x00014394
    ea10:	000143ac 	.word	0x000143ac
    ea14:	00014d85 	.word	0x00014d85

0000ea18 <fs_mount>:
{
    ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
    ea1a:	4604      	mov	r4, r0
    ea1c:	b108      	cbz	r0, ea22 <fs_mount+0xa>
    ea1e:	68c3      	ldr	r3, [r0, #12]
    ea20:	b96b      	cbnz	r3, ea3e <fs_mount+0x26>
    ea22:	4b43      	ldr	r3, [pc, #268]	; (eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>)
    ea24:	4943      	ldr	r1, [pc, #268]	; (eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>)
		LOG_ERR("mount point not initialized!!");
    ea26:	4844      	ldr	r0, [pc, #272]	; (eb38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd8>)
    ea28:	1ac9      	subs	r1, r1, r3
    ea2a:	08c9      	lsrs	r1, r1, #3
    ea2c:	0189      	lsls	r1, r1, #6
    ea2e:	f041 0101 	orr.w	r1, r1, #1
    ea32:	f003 fb6b 	bl	1210c <log_0>
		return -EINVAL;
    ea36:	f06f 0515 	mvn.w	r5, #21
}
    ea3a:	4628      	mov	r0, r5
    ea3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&mutex, K_FOREVER);
    ea3e:	f04f 30ff 	mov.w	r0, #4294967295
    ea42:	f04f 31ff 	mov.w	r1, #4294967295
    ea46:	f7ff fe7b 	bl	e740 <k_mutex_lock.constprop.0>
	struct registry_entry *ep = registry_find(type);
    ea4a:	68a0      	ldr	r0, [r4, #8]
    ea4c:	f7ff fe5c 	bl	e708 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
    ea50:	b108      	cbz	r0, ea56 <fs_mount+0x3e>
    ea52:	6847      	ldr	r7, [r0, #4]
	if (fs == NULL) {
    ea54:	b977      	cbnz	r7, ea74 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14>
    ea56:	4b36      	ldr	r3, [pc, #216]	; (eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>)
    ea58:	4936      	ldr	r1, [pc, #216]	; (eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>)
		LOG_ERR("requested file system type not registered!!");
    ea5a:	4838      	ldr	r0, [pc, #224]	; (eb3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdc>)
    ea5c:	1ac9      	subs	r1, r1, r3
    ea5e:	08c9      	lsrs	r1, r1, #3
    ea60:	0189      	lsls	r1, r1, #6
    ea62:	f041 0101 	orr.w	r1, r1, #1
    ea66:	f003 fb51 	bl	1210c <log_0>
		rc = -ENOENT;
    ea6a:	f06f 0501 	mvn.w	r5, #1
	k_mutex_unlock(&mutex);
    ea6e:	f7ff fe61 	bl	e734 <k_mutex_unlock.constprop.0>
	return rc;
    ea72:	e7e2      	b.n	ea3a <fs_mount+0x22>
	mp->mountp_len = strlen(mp->mnt_point);
    ea74:	68e0      	ldr	r0, [r4, #12]
    ea76:	f003 ff10 	bl	1289a <strlen>
    ea7a:	61a0      	str	r0, [r4, #24]
	if ((mp->mnt_point[0] != '/') ||
    ea7c:	68e0      	ldr	r0, [r4, #12]
    ea7e:	7803      	ldrb	r3, [r0, #0]
    ea80:	2b2f      	cmp	r3, #47	; 0x2f
    ea82:	d00c      	beq.n	ea9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
    ea84:	492b      	ldr	r1, [pc, #172]	; (eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>)
    ea86:	4b2a      	ldr	r3, [pc, #168]	; (eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>)
		LOG_ERR("invalid mount point!!");
    ea88:	482d      	ldr	r0, [pc, #180]	; (eb40 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe0>)
    ea8a:	1ac9      	subs	r1, r1, r3
    ea8c:	08c9      	lsrs	r1, r1, #3
    ea8e:	0189      	lsls	r1, r1, #6
    ea90:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("fs ops functions not set!!");
    ea94:	f003 fb3a 	bl	1210c <log_0>
		rc = -EINVAL;
    ea98:	f06f 0515 	mvn.w	r5, #21
		goto mount_err;
    ea9c:	e7e7      	b.n	ea6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe>
			(strlen(mp->mnt_point) <= 1)) {
    ea9e:	f003 fefc 	bl	1289a <strlen>
	if ((mp->mnt_point[0] != '/') ||
    eaa2:	2801      	cmp	r0, #1
    eaa4:	d9ee      	bls.n	ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>
	if (fs->mount == NULL) {
    eaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eaa8:	b943      	cbnz	r3, eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>
    eaaa:	4922      	ldr	r1, [pc, #136]	; (eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>)
    eaac:	4b20      	ldr	r3, [pc, #128]	; (eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>)
		LOG_ERR("fs ops functions not set!!");
    eaae:	4825      	ldr	r0, [pc, #148]	; (eb44 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe4>)
    eab0:	1ac9      	subs	r1, r1, r3
    eab2:	08c9      	lsrs	r1, r1, #3
    eab4:	0189      	lsls	r1, r1, #6
    eab6:	f041 0101 	orr.w	r1, r1, #1
    eaba:	e7eb      	b.n	ea94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34>
	return list->head == list;
    eabc:	4e22      	ldr	r6, [pc, #136]	; (eb48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>)
    eabe:	6835      	ldr	r5, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eac0:	42b5      	cmp	r5, r6
    eac2:	d114      	bne.n	eaee <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8e>
	rc = fs->mount(mp);
    eac4:	4620      	mov	r0, r4
    eac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eac8:	4798      	blx	r3
	if (rc < 0) {
    eaca:	1e05      	subs	r5, r0, #0
    eacc:	da28      	bge.n	eb20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0>
    eace:	4b18      	ldr	r3, [pc, #96]	; (eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>)
    ead0:	4a18      	ldr	r2, [pc, #96]	; (eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>)
		LOG_ERR("fs mount error (%d)", rc);
    ead2:	4629      	mov	r1, r5
    ead4:	1ad2      	subs	r2, r2, r3
    ead6:	08d2      	lsrs	r2, r2, #3
    ead8:	0192      	lsls	r2, r2, #6
    eada:	481c      	ldr	r0, [pc, #112]	; (eb4c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xec>)
    eadc:	f042 0201 	orr.w	r2, r2, #1
    eae0:	f003 fb21 	bl	12126 <log_1>
		goto mount_err;
    eae4:	e7c3      	b.n	ea6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe>
	return (node == list->tail) ? NULL : node->next;
    eae6:	6873      	ldr	r3, [r6, #4]
    eae8:	429d      	cmp	r5, r3
    eaea:	d0eb      	beq.n	eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
    eaec:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    eaee:	2d00      	cmp	r5, #0
    eaf0:	d0e8      	beq.n	eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>
		if (mp->mountp_len != itr->mountp_len) {
    eaf2:	69a2      	ldr	r2, [r4, #24]
    eaf4:	69ab      	ldr	r3, [r5, #24]
    eaf6:	429a      	cmp	r2, r3
    eaf8:	d1f5      	bne.n	eae6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x86>
		if (strncmp(mp->mnt_point, itr->mnt_point,
    eafa:	68e9      	ldr	r1, [r5, #12]
    eafc:	68e0      	ldr	r0, [r4, #12]
    eafe:	f003 fedf 	bl	128c0 <strncmp>
    eb02:	2800      	cmp	r0, #0
    eb04:	d1ef      	bne.n	eae6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x86>
    eb06:	4b0a      	ldr	r3, [pc, #40]	; (eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>)
    eb08:	490a      	ldr	r1, [pc, #40]	; (eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>)
			LOG_ERR("mount Point already exists!!");
    eb0a:	4811      	ldr	r0, [pc, #68]	; (eb50 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf0>)
    eb0c:	1ac9      	subs	r1, r1, r3
    eb0e:	08c9      	lsrs	r1, r1, #3
    eb10:	0189      	lsls	r1, r1, #6
    eb12:	f041 0101 	orr.w	r1, r1, #1
    eb16:	f003 faf9 	bl	1210c <log_0>
			rc = -EBUSY;
    eb1a:	f06f 050f 	mvn.w	r5, #15
			goto mount_err;
    eb1e:	e7a6      	b.n	ea6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe>
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
	node->prev = list->tail;
    eb20:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    eb22:	6026      	str	r6, [r4, #0]
	node->prev = list->tail;
    eb24:	6063      	str	r3, [r4, #4]

	list->tail->next = node;
    eb26:	6873      	ldr	r3, [r6, #4]
	mp->fs = fs;
    eb28:	61e7      	str	r7, [r4, #28]
    eb2a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    eb2c:	6074      	str	r4, [r6, #4]
}
    eb2e:	e79e      	b.n	ea6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe>
    eb30:	00014394 	.word	0x00014394
    eb34:	000143ac 	.word	0x000143ac
    eb38:	00014da0 	.word	0x00014da0
    eb3c:	00014dbe 	.word	0x00014dbe
    eb40:	00014dea 	.word	0x00014dea
    eb44:	00014e00 	.word	0x00014e00
    eb48:	2001067c 	.word	0x2001067c
    eb4c:	00014e38 	.word	0x00014e38
    eb50:	00014e1b 	.word	0x00014e1b

0000eb54 <fs_register>:
{
    eb54:	b538      	push	{r3, r4, r5, lr}
    eb56:	4604      	mov	r4, r0
    eb58:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
    eb5a:	f04f 30ff 	mov.w	r0, #4294967295
    eb5e:	f04f 31ff 	mov.w	r1, #4294967295
    eb62:	f7ff fded 	bl	e740 <k_mutex_lock.constprop.0>
	struct registry_entry *ep = registry_find(type);
    eb66:	4620      	mov	r0, r4
    eb68:	f7ff fdce 	bl	e708 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
    eb6c:	b108      	cbz	r0, eb72 <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
    eb6e:	6843      	ldr	r3, [r0, #4]
    eb70:	b97b      	cbnz	r3, eb92 <fs_register+0x3e>
		if (ep->fstp == NULL) {
    eb72:	4b0b      	ldr	r3, [pc, #44]	; (eba0 <fs_register+0x4c>)
    eb74:	685a      	ldr	r2, [r3, #4]
    eb76:	b112      	cbz	r2, eb7e <fs_register+0x2a>
    eb78:	68da      	ldr	r2, [r3, #12]
    eb7a:	b96a      	cbnz	r2, eb98 <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    eb7c:	2201      	movs	r2, #1
			ep->type = type;
    eb7e:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			rv = 0;
    eb82:	2400      	movs	r4, #0
			ep->fstp = fstp;
    eb84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    eb88:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
    eb8a:	f7ff fdd3 	bl	e734 <k_mutex_unlock.constprop.0>
}
    eb8e:	4620      	mov	r0, r4
    eb90:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
    eb92:	f06f 0444 	mvn.w	r4, #68	; 0x44
    eb96:	e7f8      	b.n	eb8a <fs_register+0x36>
	int rv = -ENOSPC;
    eb98:	f06f 041b 	mvn.w	r4, #27
    eb9c:	e7f5      	b.n	eb8a <fs_register+0x36>
    eb9e:	bf00      	nop
    eba0:	20010698 	.word	0x20010698

0000eba4 <fatfs_init>:

static int fatfs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return fs_register(FS_FATFS, &fatfs_fs);
    eba4:	2000      	movs	r0, #0
    eba6:	4901      	ldr	r1, [pc, #4]	; (ebac <fatfs_init+0x8>)
    eba8:	f7ff bfd4 	b.w	eb54 <fs_register>
    ebac:	00014508 	.word	0x00014508

0000ebb0 <fatfs_stat>:
{
    ebb0:	4608      	mov	r0, r1
    ebb2:	b530      	push	{r4, r5, lr}
    ebb4:	b087      	sub	sp, #28
	res = f_stat(&path[1], &fno);
    ebb6:	4669      	mov	r1, sp
    ebb8:	3001      	adds	r0, #1
{
    ebba:	4615      	mov	r5, r2
	res = f_stat(&path[1], &fno);
    ebbc:	f004 fed5 	bl	1396a <f_stat>
	if (res == FR_OK) {
    ebc0:	4604      	mov	r4, r0
    ebc2:	b980      	cbnz	r0, ebe6 <fatfs_stat+0x36>
		entry->type = ((fno.fattrib & AM_DIR) ?
    ebc4:	4628      	mov	r0, r5
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
    ebc6:	f89d 3008 	ldrb.w	r3, [sp, #8]
		strcpy(entry->name, fno.fname);
    ebca:	f10d 0109 	add.w	r1, sp, #9
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
    ebce:	f3c3 1300 	ubfx	r3, r3, #4, #1
		entry->type = ((fno.fattrib & AM_DIR) ?
    ebd2:	f800 3b01 	strb.w	r3, [r0], #1
		strcpy(entry->name, fno.fname);
    ebd6:	f003 fe43 	bl	12860 <strcpy>
		entry->size = fno.fsize;
    ebda:	9b00      	ldr	r3, [sp, #0]
    ebdc:	612b      	str	r3, [r5, #16]
    ebde:	4b04      	ldr	r3, [pc, #16]	; (ebf0 <fatfs_stat+0x40>)
    ebe0:	5718      	ldrsb	r0, [r3, r4]
}
    ebe2:	b007      	add	sp, #28
    ebe4:	bd30      	pop	{r4, r5, pc}
	switch (error) {
    ebe6:	2813      	cmp	r0, #19
    ebe8:	d9f9      	bls.n	ebde <fatfs_stat+0x2e>
{
    ebea:	f06f 0004 	mvn.w	r0, #4
	return translate_error(res);
    ebee:	e7f8      	b.n	ebe2 <fatfs_stat+0x32>
    ebf0:	00014e5a 	.word	0x00014e5a

0000ebf4 <fatfs_mkdir>:
{
    ebf4:	b508      	push	{r3, lr}
	res = f_mkdir(&path[1]);
    ebf6:	1c48      	adds	r0, r1, #1
    ebf8:	f004 ffc9 	bl	13b8e <f_mkdir>
	switch (error) {
    ebfc:	2813      	cmp	r0, #19
    ebfe:	bf96      	itet	ls
    ec00:	4b02      	ldrls	r3, [pc, #8]	; (ec0c <fatfs_mkdir+0x18>)
	res = f_mkdir(&path[1]);
    ec02:	f06f 0004 	mvnhi.w	r0, #4
    ec06:	5618      	ldrsbls	r0, [r3, r0]
}
    ec08:	bd08      	pop	{r3, pc}
    ec0a:	bf00      	nop
    ec0c:	00014e5a 	.word	0x00014e5a

0000ec10 <fatfs_unlink>:
{
    ec10:	b508      	push	{r3, lr}
	res = f_unlink(&path[1]);
    ec12:	1c48      	adds	r0, r1, #1
    ec14:	f004 ff6e 	bl	13af4 <f_unlink>
	switch (error) {
    ec18:	2813      	cmp	r0, #19
    ec1a:	bf96      	itet	ls
    ec1c:	4b02      	ldrls	r3, [pc, #8]	; (ec28 <fatfs_unlink+0x18>)
	res = f_unlink(&path[1]);
    ec1e:	f06f 0004 	mvnhi.w	r0, #4
    ec22:	5618      	ldrsbls	r0, [r3, r0]
}
    ec24:	bd08      	pop	{r3, pc}
    ec26:	bf00      	nop
    ec28:	00014e5a 	.word	0x00014e5a

0000ec2c <fatfs_rename>:
{
    ec2c:	b530      	push	{r4, r5, lr}
	res = f_stat(&to[1], &fno);
    ec2e:	1c54      	adds	r4, r2, #1
{
    ec30:	b087      	sub	sp, #28
    ec32:	460d      	mov	r5, r1
	res = f_stat(&to[1], &fno);
    ec34:	4620      	mov	r0, r4
    ec36:	4669      	mov	r1, sp
    ec38:	f004 fe97 	bl	1396a <f_stat>
	if (FR_OK == res) {
    ec3c:	b948      	cbnz	r0, ec52 <fatfs_rename+0x26>
		res = f_unlink(&to[1]);
    ec3e:	4620      	mov	r0, r4
    ec40:	f004 ff58 	bl	13af4 <f_unlink>
		if (FR_OK != res)
    ec44:	b128      	cbz	r0, ec52 <fatfs_rename+0x26>
	switch (error) {
    ec46:	2813      	cmp	r0, #19
    ec48:	d908      	bls.n	ec5c <fatfs_rename+0x30>
{
    ec4a:	f06f 0004 	mvn.w	r0, #4
}
    ec4e:	b007      	add	sp, #28
    ec50:	bd30      	pop	{r4, r5, pc}
	res = f_rename(&from[1], &to[1]);
    ec52:	4621      	mov	r1, r4
    ec54:	1c68      	adds	r0, r5, #1
    ec56:	f005 f84d 	bl	13cf4 <f_rename>
	switch (error) {
    ec5a:	e7f4      	b.n	ec46 <fatfs_rename+0x1a>
    ec5c:	4b01      	ldr	r3, [pc, #4]	; (ec64 <fatfs_rename+0x38>)
    ec5e:	5618      	ldrsb	r0, [r3, r0]
    ec60:	e7f5      	b.n	ec4e <fatfs_rename+0x22>
    ec62:	bf00      	nop
    ec64:	00014e5a 	.word	0x00014e5a

0000ec68 <fatfs_unmount>:
	res = f_mount(NULL, &mountp->mnt_point[1], 1);
    ec68:	2201      	movs	r2, #1
    ec6a:	68c1      	ldr	r1, [r0, #12]
{
    ec6c:	b508      	push	{r3, lr}
	res = f_mount(NULL, &mountp->mnt_point[1], 1);
    ec6e:	4411      	add	r1, r2
    ec70:	2000      	movs	r0, #0
    ec72:	f001 f99f 	bl	ffb4 <f_mount>
	switch (error) {
    ec76:	2813      	cmp	r0, #19
    ec78:	bf96      	itet	ls
    ec7a:	4b02      	ldrls	r3, [pc, #8]	; (ec84 <fatfs_unmount+0x1c>)
	res = f_mount(NULL, &mountp->mnt_point[1], 1);
    ec7c:	f06f 0004 	mvnhi.w	r0, #4
    ec80:	5618      	ldrsbls	r0, [r3, r0]
}
    ec82:	bd08      	pop	{r3, pc}
    ec84:	00014e5a 	.word	0x00014e5a

0000ec88 <fatfs_mount>:
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
    ec88:	2201      	movs	r2, #1
{
    ec8a:	b510      	push	{r4, lr}
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
    ec8c:	68c1      	ldr	r1, [r0, #12]
{
    ec8e:	4604      	mov	r4, r0
    ec90:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
    ec94:	6900      	ldr	r0, [r0, #16]
    ec96:	4411      	add	r1, r2
    ec98:	f001 f98c 	bl	ffb4 <f_mount>
	if (res == FR_NO_FILESYSTEM) {
    ec9c:	280d      	cmp	r0, #13
    ec9e:	d110      	bne.n	ecc2 <fatfs_mount+0x3a>
		res = f_mkfs(&mountp->mnt_point[1],
    eca0:	f44f 7300 	mov.w	r3, #512	; 0x200
    eca4:	68e0      	ldr	r0, [r4, #12]
    eca6:	9300      	str	r3, [sp, #0]
    eca8:	2200      	movs	r2, #0
    ecaa:	2109      	movs	r1, #9
    ecac:	ab02      	add	r3, sp, #8
    ecae:	3001      	adds	r0, #1
    ecb0:	f001 f9a6 	bl	10000 <f_mkfs>
		if (res == FR_OK) {
    ecb4:	b928      	cbnz	r0, ecc2 <fatfs_mount+0x3a>
			res = f_mount((FATFS *)mountp->fs_data,
    ecb6:	2201      	movs	r2, #1
					&mountp->mnt_point[1], 1);
    ecb8:	68e1      	ldr	r1, [r4, #12]
			res = f_mount((FATFS *)mountp->fs_data,
    ecba:	6920      	ldr	r0, [r4, #16]
    ecbc:	4411      	add	r1, r2
    ecbe:	f001 f979 	bl	ffb4 <f_mount>
	switch (error) {
    ecc2:	2813      	cmp	r0, #19
{
    ecc4:	bf8e      	itee	hi
    ecc6:	f06f 0004 	mvnhi.w	r0, #4
    ecca:	4b02      	ldrls	r3, [pc, #8]	; (ecd4 <fatfs_mount+0x4c>)
    eccc:	5618      	ldrsbls	r0, [r3, r0]
}
    ecce:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
    ecd2:	bd10      	pop	{r4, pc}
    ecd4:	00014e5a 	.word	0x00014e5a

0000ecd8 <fatfs_closedir>:
{
    ecd8:	b538      	push	{r3, r4, r5, lr}
    ecda:	4605      	mov	r5, r0
	res = f_closedir(zdp->dirp);
    ecdc:	6800      	ldr	r0, [r0, #0]
    ecde:	f004 fe1a 	bl	13916 <f_closedir>
    ece2:	4604      	mov	r4, r0
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
    ece4:	4629      	mov	r1, r5
    ece6:	4805      	ldr	r0, [pc, #20]	; (ecfc <fatfs_closedir+0x24>)
    ece8:	f002 f8b2 	bl	10e50 <k_mem_slab_free>
	switch (error) {
    ecec:	2c13      	cmp	r4, #19
    ecee:	bf96      	itet	ls
    ecf0:	4b03      	ldrls	r3, [pc, #12]	; (ed00 <fatfs_closedir+0x28>)
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
    ecf2:	f06f 0004 	mvnhi.w	r0, #4
    ecf6:	5718      	ldrsbls	r0, [r3, r4]
}
    ecf8:	bd38      	pop	{r3, r4, r5, pc}
    ecfa:	bf00      	nop
    ecfc:	20010120 	.word	0x20010120
    ed00:	00014e5a 	.word	0x00014e5a

0000ed04 <fatfs_readdir>:
{
    ed04:	b530      	push	{r4, r5, lr}
    ed06:	b087      	sub	sp, #28
    ed08:	460c      	mov	r4, r1
	res = f_readdir(zdp->dirp, &fno);
    ed0a:	6800      	ldr	r0, [r0, #0]
    ed0c:	4669      	mov	r1, sp
    ed0e:	f004 fe0b 	bl	13928 <f_readdir>
	if (res == FR_OK) {
    ed12:	4605      	mov	r5, r0
    ed14:	b988      	cbnz	r0, ed3a <fatfs_readdir+0x36>
		strcpy(entry->name, fno.fname);
    ed16:	f10d 0109 	add.w	r1, sp, #9
    ed1a:	1c60      	adds	r0, r4, #1
    ed1c:	f003 fda0 	bl	12860 <strcpy>
		if (entry->name[0] != 0) {
    ed20:	7863      	ldrb	r3, [r4, #1]
    ed22:	b133      	cbz	r3, ed32 <fatfs_readdir+0x2e>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
    ed24:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ed28:	f3c3 1300 	ubfx	r3, r3, #4, #1
			entry->type = ((fno.fattrib & AM_DIR) ?
    ed2c:	7023      	strb	r3, [r4, #0]
			entry->size = fno.fsize;
    ed2e:	9b00      	ldr	r3, [sp, #0]
    ed30:	6123      	str	r3, [r4, #16]
    ed32:	4b04      	ldr	r3, [pc, #16]	; (ed44 <fatfs_readdir+0x40>)
    ed34:	5758      	ldrsb	r0, [r3, r5]
}
    ed36:	b007      	add	sp, #28
    ed38:	bd30      	pop	{r4, r5, pc}
	switch (error) {
    ed3a:	2813      	cmp	r0, #19
    ed3c:	d9f9      	bls.n	ed32 <fatfs_readdir+0x2e>
{
    ed3e:	f06f 0004 	mvn.w	r0, #4
	return translate_error(res);
    ed42:	e7f8      	b.n	ed36 <fatfs_readdir+0x32>
    ed44:	00014e5a 	.word	0x00014e5a

0000ed48 <fatfs_opendir>:
{
    ed48:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
    ed4a:	2200      	movs	r2, #0
{
    ed4c:	4606      	mov	r6, r0
    ed4e:	460c      	mov	r4, r1
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
    ed50:	2300      	movs	r3, #0
    ed52:	4811      	ldr	r0, [pc, #68]	; (ed98 <fatfs_opendir+0x50>)
    ed54:	a901      	add	r1, sp, #4
    ed56:	f002 f849 	bl	10dec <k_mem_slab_alloc>
    ed5a:	4605      	mov	r5, r0
    ed5c:	b9a8      	cbnz	r0, ed8a <fatfs_opendir+0x42>
		(void)memset(ptr, 0, sizeof(DIR));
    ed5e:	4601      	mov	r1, r0
    ed60:	222c      	movs	r2, #44	; 0x2c
    ed62:	9801      	ldr	r0, [sp, #4]
    ed64:	f003 fdf6 	bl	12954 <memset>
		zdp->dirp = ptr;
    ed68:	9801      	ldr	r0, [sp, #4]
	res = f_opendir(zdp->dirp, &path[1]);
    ed6a:	1c61      	adds	r1, r4, #1
		zdp->dirp = ptr;
    ed6c:	6030      	str	r0, [r6, #0]
	res = f_opendir(zdp->dirp, &path[1]);
    ed6e:	f004 fd9f 	bl	138b0 <f_opendir>
	if (res != FR_OK) {
    ed72:	4604      	mov	r4, r0
    ed74:	b130      	cbz	r0, ed84 <fatfs_opendir+0x3c>
		k_mem_slab_free(&fatfs_dirp_pool, &ptr);
    ed76:	4808      	ldr	r0, [pc, #32]	; (ed98 <fatfs_opendir+0x50>)
    ed78:	a901      	add	r1, sp, #4
    ed7a:	f002 f869 	bl	10e50 <k_mem_slab_free>
		zdp->dirp = NULL;
    ed7e:	2c13      	cmp	r4, #19
    ed80:	6035      	str	r5, [r6, #0]
	switch (error) {
    ed82:	d806      	bhi.n	ed92 <fatfs_opendir+0x4a>
    ed84:	4b05      	ldr	r3, [pc, #20]	; (ed9c <fatfs_opendir+0x54>)
    ed86:	5718      	ldrsb	r0, [r3, r4]
    ed88:	e001      	b.n	ed8e <fatfs_opendir+0x46>
		return -ENOMEM;
    ed8a:	f06f 000b 	mvn.w	r0, #11
}
    ed8e:	b002      	add	sp, #8
    ed90:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    ed92:	f06f 0004 	mvn.w	r0, #4
    ed96:	e7fa      	b.n	ed8e <fatfs_opendir+0x46>
    ed98:	20010120 	.word	0x20010120
    ed9c:	00014e5a 	.word	0x00014e5a

0000eda0 <fatfs_close>:
{
    eda0:	b538      	push	{r3, r4, r5, lr}
    eda2:	4604      	mov	r4, r0
	res = f_close(zfp->filep);
    eda4:	6800      	ldr	r0, [r0, #0]
    eda6:	f004 fcf2 	bl	1378e <f_close>
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
    edaa:	4621      	mov	r1, r4
	res = f_close(zfp->filep);
    edac:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
    edae:	4806      	ldr	r0, [pc, #24]	; (edc8 <fatfs_close+0x28>)
    edb0:	f002 f84e 	bl	10e50 <k_mem_slab_free>
	zfp->filep = NULL;
    edb4:	2300      	movs	r3, #0
    edb6:	2d13      	cmp	r5, #19
    edb8:	6023      	str	r3, [r4, #0]
	switch (error) {
    edba:	bf96      	itet	ls
    edbc:	4b03      	ldrls	r3, [pc, #12]	; (edcc <fatfs_close+0x2c>)
	zfp->filep = NULL;
    edbe:	f06f 0004 	mvnhi.w	r0, #4
    edc2:	5758      	ldrsbls	r0, [r3, r5]
}
    edc4:	bd38      	pop	{r3, r4, r5, pc}
    edc6:	bf00      	nop
    edc8:	2001013c 	.word	0x2001013c
    edcc:	00014e5a 	.word	0x00014e5a

0000edd0 <fatfs_sync>:
{
    edd0:	b508      	push	{r3, lr}
	res = f_sync(zfp->filep);
    edd2:	6800      	ldr	r0, [r0, #0]
    edd4:	f004 fca6 	bl	13724 <f_sync>
	switch (error) {
    edd8:	2813      	cmp	r0, #19
    edda:	bf96      	itet	ls
    eddc:	4b02      	ldrls	r3, [pc, #8]	; (ede8 <fatfs_sync+0x18>)
	res = f_sync(zfp->filep);
    edde:	f06f 0004 	mvnhi.w	r0, #4
    ede2:	5618      	ldrsbls	r0, [r3, r0]
}
    ede4:	bd08      	pop	{r3, pc}
    ede6:	bf00      	nop
    ede8:	00014e5a 	.word	0x00014e5a

0000edec <fatfs_seek>:
	switch (whence) {
    edec:	2a01      	cmp	r2, #1
{
    edee:	b508      	push	{r3, lr}
	switch (whence) {
    edf0:	d005      	beq.n	edfe <fatfs_seek+0x12>
    edf2:	2a02      	cmp	r2, #2
    edf4:	d013      	beq.n	ee1e <fatfs_seek+0x32>
    edf6:	b12a      	cbz	r2, ee04 <fatfs_seek+0x18>
		return -EINVAL;
    edf8:	f06f 0015 	mvn.w	r0, #21
    edfc:	e00e      	b.n	ee1c <fatfs_seek+0x30>
		pos = f_tell((FIL *)zfp->filep) + offset;
    edfe:	6803      	ldr	r3, [r0, #0]
    ee00:	695b      	ldr	r3, [r3, #20]
		pos = f_size((FIL *)zfp->filep) + offset;
    ee02:	4419      	add	r1, r3
	if ((pos < 0) || (pos > f_size((FIL *)zfp->filep))) {
    ee04:	2900      	cmp	r1, #0
    ee06:	dbf7      	blt.n	edf8 <fatfs_seek+0xc>
    ee08:	6800      	ldr	r0, [r0, #0]
    ee0a:	68c3      	ldr	r3, [r0, #12]
    ee0c:	428b      	cmp	r3, r1
    ee0e:	d3f3      	bcc.n	edf8 <fatfs_seek+0xc>
	res = f_lseek(zfp->filep, pos);
    ee10:	f004 fcca 	bl	137a8 <f_lseek>
	switch (error) {
    ee14:	2813      	cmp	r0, #19
    ee16:	d805      	bhi.n	ee24 <fatfs_seek+0x38>
    ee18:	4b04      	ldr	r3, [pc, #16]	; (ee2c <fatfs_seek+0x40>)
    ee1a:	5618      	ldrsb	r0, [r3, r0]
}
    ee1c:	bd08      	pop	{r3, pc}
		pos = f_size((FIL *)zfp->filep) + offset;
    ee1e:	6803      	ldr	r3, [r0, #0]
    ee20:	68db      	ldr	r3, [r3, #12]
    ee22:	e7ee      	b.n	ee02 <fatfs_seek+0x16>
	res = f_lseek(zfp->filep, pos);
    ee24:	f06f 0004 	mvn.w	r0, #4
    ee28:	e7f8      	b.n	ee1c <fatfs_seek+0x30>
    ee2a:	bf00      	nop
    ee2c:	00014e5a 	.word	0x00014e5a

0000ee30 <fatfs_truncate>:
{
    ee30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ee32:	4604      	mov	r4, r0
	off_t cur_length = f_size((FIL *)zfp->filep);
    ee34:	6800      	ldr	r0, [r0, #0]
{
    ee36:	460e      	mov	r6, r1
	off_t cur_length = f_size((FIL *)zfp->filep);
    ee38:	68c7      	ldr	r7, [r0, #12]
	res = f_lseek(zfp->filep, length);
    ee3a:	f004 fcb5 	bl	137a8 <f_lseek>
	if (res != FR_OK) {
    ee3e:	b128      	cbz	r0, ee4c <fatfs_truncate+0x1c>
	switch (error) {
    ee40:	2813      	cmp	r0, #19
    ee42:	d915      	bls.n	ee70 <fatfs_truncate+0x40>
		if (res != FR_OK) {
    ee44:	f06f 0004 	mvn.w	r0, #4
}
    ee48:	b003      	add	sp, #12
    ee4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (length < cur_length) {
    ee4c:	42b7      	cmp	r7, r6
	off_t cur_length = f_size((FIL *)zfp->filep);
    ee4e:	463d      	mov	r5, r7
	if (length < cur_length) {
    ee50:	6820      	ldr	r0, [r4, #0]
    ee52:	dd02      	ble.n	ee5a <fatfs_truncate+0x2a>
		res = f_truncate(zfp->filep);
    ee54:	f004 fe12 	bl	13a7c <f_truncate>
    ee58:	e7f2      	b.n	ee40 <fatfs_truncate+0x10>
		res = f_lseek(zfp->filep, cur_length);
    ee5a:	4639      	mov	r1, r7
		length = f_tell((FIL *)zfp->filep);
    ee5c:	6946      	ldr	r6, [r0, #20]
		res = f_lseek(zfp->filep, cur_length);
    ee5e:	f004 fca3 	bl	137a8 <f_lseek>
		if (res != FR_OK) {
    ee62:	2800      	cmp	r0, #0
    ee64:	d1ec      	bne.n	ee40 <fatfs_truncate+0x10>
		uint8_t c = 0U;
    ee66:	f88d 0003 	strb.w	r0, [sp, #3]
		for (int i = cur_length; i < length; i++) {
    ee6a:	42b5      	cmp	r5, r6
    ee6c:	db03      	blt.n	ee76 <fatfs_truncate+0x46>
    ee6e:	2000      	movs	r0, #0
    ee70:	4b06      	ldr	r3, [pc, #24]	; (ee8c <fatfs_truncate+0x5c>)
    ee72:	5618      	ldrsb	r0, [r3, r0]
    ee74:	e7e8      	b.n	ee48 <fatfs_truncate+0x18>
			res = f_write(zfp->filep, &c, 1, &bw);
    ee76:	2201      	movs	r2, #1
    ee78:	6820      	ldr	r0, [r4, #0]
    ee7a:	ab01      	add	r3, sp, #4
    ee7c:	f10d 0103 	add.w	r1, sp, #3
    ee80:	f004 fb94 	bl	135ac <f_write>
			if (res != FR_OK) {
    ee84:	2800      	cmp	r0, #0
    ee86:	d1db      	bne.n	ee40 <fatfs_truncate+0x10>
		for (int i = cur_length; i < length; i++) {
    ee88:	3501      	adds	r5, #1
    ee8a:	e7ee      	b.n	ee6a <fatfs_truncate+0x3a>
    ee8c:	00014e5a 	.word	0x00014e5a

0000ee90 <fatfs_write>:
{
    ee90:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (zfp->flags & FS_O_APPEND) {
    ee92:	7a03      	ldrb	r3, [r0, #8]
{
    ee94:	4604      	mov	r4, r0
	if (zfp->flags & FS_O_APPEND) {
    ee96:	069b      	lsls	r3, r3, #26
{
    ee98:	460d      	mov	r5, r1
    ee9a:	4616      	mov	r6, r2
	if (zfp->flags & FS_O_APPEND) {
    ee9c:	d40c      	bmi.n	eeb8 <fatfs_write+0x28>
		res = f_write(zfp->filep, ptr, size, &bw);
    ee9e:	4632      	mov	r2, r6
    eea0:	4629      	mov	r1, r5
    eea2:	6820      	ldr	r0, [r4, #0]
    eea4:	ab01      	add	r3, sp, #4
    eea6:	f004 fb81 	bl	135ac <f_write>
	if (res != FR_OK) {
    eeaa:	b160      	cbz	r0, eec6 <fatfs_write+0x36>
	switch (error) {
    eeac:	2813      	cmp	r0, #19
    eeae:	d80c      	bhi.n	eeca <fatfs_write+0x3a>
    eeb0:	4b07      	ldr	r3, [pc, #28]	; (eed0 <fatfs_write+0x40>)
    eeb2:	5618      	ldrsb	r0, [r3, r0]
}
    eeb4:	b002      	add	sp, #8
    eeb6:	bd70      	pop	{r4, r5, r6, pc}
	off_t pos = f_size((FIL *)zfp->filep);
    eeb8:	6800      	ldr	r0, [r0, #0]
		res = f_lseek(zfp->filep, pos);
    eeba:	68c1      	ldr	r1, [r0, #12]
    eebc:	f004 fc74 	bl	137a8 <f_lseek>
	if (res == FR_OK) {
    eec0:	2800      	cmp	r0, #0
    eec2:	d0ec      	beq.n	ee9e <fatfs_write+0xe>
    eec4:	e7f2      	b.n	eeac <fatfs_write+0x1c>
	return bw;
    eec6:	9801      	ldr	r0, [sp, #4]
    eec8:	e7f4      	b.n	eeb4 <fatfs_write+0x24>
{
    eeca:	f06f 0004 	mvn.w	r0, #4
    eece:	e7f1      	b.n	eeb4 <fatfs_write+0x24>
    eed0:	00014e5a 	.word	0x00014e5a

0000eed4 <fatfs_read>:
{
    eed4:	b507      	push	{r0, r1, r2, lr}
	res = f_read(zfp->filep, ptr, size, &br);
    eed6:	6800      	ldr	r0, [r0, #0]
    eed8:	ab01      	add	r3, sp, #4
    eeda:	f004 fad1 	bl	13480 <f_read>
	if (res != FR_OK) {
    eede:	b130      	cbz	r0, eeee <fatfs_read+0x1a>
	switch (error) {
    eee0:	2813      	cmp	r0, #19
    eee2:	d806      	bhi.n	eef2 <fatfs_read+0x1e>
    eee4:	4b04      	ldr	r3, [pc, #16]	; (eef8 <fatfs_read+0x24>)
    eee6:	5618      	ldrsb	r0, [r3, r0]
}
    eee8:	b003      	add	sp, #12
    eeea:	f85d fb04 	ldr.w	pc, [sp], #4
	return br;
    eeee:	9801      	ldr	r0, [sp, #4]
    eef0:	e7fa      	b.n	eee8 <fatfs_read+0x14>
	if (res != FR_OK) {
    eef2:	f06f 0004 	mvn.w	r0, #4
    eef6:	e7f7      	b.n	eee8 <fatfs_read+0x14>
    eef8:	00014e5a 	.word	0x00014e5a

0000eefc <fatfs_open>:
{
    eefc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
    eefe:	2300      	movs	r3, #0
{
    ef00:	4606      	mov	r6, r0
    ef02:	460c      	mov	r4, r1
    ef04:	4617      	mov	r7, r2
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
    ef06:	4813      	ldr	r0, [pc, #76]	; (ef54 <fatfs_open+0x58>)
    ef08:	2200      	movs	r2, #0
    ef0a:	a901      	add	r1, sp, #4
    ef0c:	f001 ff6e 	bl	10dec <k_mem_slab_alloc>
    ef10:	4605      	mov	r5, r0
    ef12:	b9b8      	cbnz	r0, ef44 <fatfs_open+0x48>
		(void)memset(ptr, 0, sizeof(FIL));
    ef14:	4601      	mov	r1, r0
    ef16:	2228      	movs	r2, #40	; 0x28
    ef18:	9801      	ldr	r0, [sp, #4]
    ef1a:	f003 fd1b 	bl	12954 <memset>
		zfp->filep = ptr;
    ef1e:	9801      	ldr	r0, [sp, #4]
	res = f_open(zfp->filep, &file_name[1], fs_mode);
    ef20:	1c61      	adds	r1, r4, #1
		zfp->filep = ptr;
    ef22:	6030      	str	r0, [r6, #0]
	res = f_open(zfp->filep, &file_name[1], fs_mode);
    ef24:	f007 0213 	and.w	r2, r7, #19
    ef28:	f004 f9d8 	bl	132dc <f_open>
	if (res != FR_OK) {
    ef2c:	4604      	mov	r4, r0
    ef2e:	b130      	cbz	r0, ef3e <fatfs_open+0x42>
		k_mem_slab_free(&fatfs_filep_pool, &ptr);
    ef30:	4808      	ldr	r0, [pc, #32]	; (ef54 <fatfs_open+0x58>)
    ef32:	a901      	add	r1, sp, #4
    ef34:	f001 ff8c 	bl	10e50 <k_mem_slab_free>
		zfp->filep = NULL;
    ef38:	2c13      	cmp	r4, #19
    ef3a:	6035      	str	r5, [r6, #0]
	switch (error) {
    ef3c:	d806      	bhi.n	ef4c <fatfs_open+0x50>
    ef3e:	4b06      	ldr	r3, [pc, #24]	; (ef58 <fatfs_open+0x5c>)
    ef40:	5718      	ldrsb	r0, [r3, r4]
    ef42:	e001      	b.n	ef48 <fatfs_open+0x4c>
		return -ENOMEM;
    ef44:	f06f 000b 	mvn.w	r0, #11
}
    ef48:	b003      	add	sp, #12
    ef4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOMEM;
    ef4c:	f06f 0004 	mvn.w	r0, #4
    ef50:	e7fa      	b.n	ef48 <fatfs_open+0x4c>
    ef52:	bf00      	nop
    ef54:	2001013c 	.word	0x2001013c
    ef58:	00014e5a 	.word	0x00014e5a

0000ef5c <nrf_gpio_cfg_sense_set>:
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    ef5c:	f000 021f 	and.w	r2, r0, #31
    ef60:	4805      	ldr	r0, [pc, #20]	; (ef78 <nrf_gpio_cfg_sense_set+0x1c>)
    ef62:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    ef66:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    ef6a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    ef6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ef72:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    ef76:	4770      	bx	lr
    ef78:	40842500 	.word	0x40842500

0000ef7c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    ef7c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    ef7e:	4b09      	ldr	r3, [pc, #36]	; (efa4 <gpio_nrfx_init+0x28>)
    ef80:	781a      	ldrb	r2, [r3, #0]
    ef82:	b96a      	cbnz	r2, efa0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    ef84:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    ef86:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    ef88:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    ef8a:	2105      	movs	r1, #5
    ef8c:	f7fe fe8a 	bl	dca4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    ef90:	2031      	movs	r0, #49	; 0x31
    ef92:	f7fe fe69 	bl	dc68 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    ef96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    ef9a:	4b03      	ldr	r3, [pc, #12]	; (efa8 <gpio_nrfx_init+0x2c>)
    ef9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    efa0:	2000      	movs	r0, #0
    efa2:	bd08      	pop	{r3, pc}
    efa4:	2001075a 	.word	0x2001075a
    efa8:	40031000 	.word	0x40031000

0000efac <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    efac:	4b28      	ldr	r3, [pc, #160]	; (f050 <gpio_nrfx_config+0xa4>)
{
    efae:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    efb0:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    efb2:	4828      	ldr	r0, [pc, #160]	; (f054 <gpio_nrfx_config+0xa8>)
    efb4:	4013      	ands	r3, r2
    efb6:	4283      	cmp	r3, r0
    efb8:	d03b      	beq.n	f032 <gpio_nrfx_config+0x86>
    efba:	d80d      	bhi.n	efd8 <gpio_nrfx_config+0x2c>
    efbc:	2b06      	cmp	r3, #6
    efbe:	d015      	beq.n	efec <gpio_nrfx_config+0x40>
    efc0:	d805      	bhi.n	efce <gpio_nrfx_config+0x22>
    efc2:	b19b      	cbz	r3, efec <gpio_nrfx_config+0x40>
    efc4:	2b02      	cmp	r3, #2
    efc6:	d036      	beq.n	f036 <gpio_nrfx_config+0x8a>
    efc8:	f06f 0015 	mvn.w	r0, #21
    efcc:	e030      	b.n	f030 <gpio_nrfx_config+0x84>
    efce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    efd2:	d1f9      	bne.n	efc8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    efd4:	2301      	movs	r3, #1
    efd6:	e009      	b.n	efec <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    efd8:	481f      	ldr	r0, [pc, #124]	; (f058 <gpio_nrfx_config+0xac>)
    efda:	4283      	cmp	r3, r0
    efdc:	d02d      	beq.n	f03a <gpio_nrfx_config+0x8e>
    efde:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    efe2:	d02c      	beq.n	f03e <gpio_nrfx_config+0x92>
    efe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    efe8:	d1ee      	bne.n	efc8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    efea:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    efec:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    efee:	bf4c      	ite	mi
    eff0:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
    eff2:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    eff6:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    effa:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    effe:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    f002:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    f006:	d006      	beq.n	f016 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    f008:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f00c:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    f00e:	d018      	beq.n	f042 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
    f010:	2201      	movs	r2, #1
    f012:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    f014:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f016:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
    f01a:	2000      	movs	r0, #0
    f01c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
    f020:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f024:	4a0d      	ldr	r2, [pc, #52]	; (f05c <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    f026:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f02a:	3180      	adds	r1, #128	; 0x80
    f02c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    f030:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    f032:	2307      	movs	r3, #7
    f034:	e7da      	b.n	efec <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    f036:	2304      	movs	r3, #4
    f038:	e7d8      	b.n	efec <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    f03a:	2305      	movs	r3, #5
    f03c:	e7d6      	b.n	efec <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    f03e:	2303      	movs	r3, #3
    f040:	e7d4      	b.n	efec <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    f042:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    f044:	bf42      	ittt	mi
    f046:	2201      	movmi	r2, #1
    f048:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    f04a:	60f2      	strmi	r2, [r6, #12]
}
    f04c:	e7e3      	b.n	f016 <gpio_nrfx_config+0x6a>
    f04e:	bf00      	nop
    f050:	00f00006 	.word	0x00f00006
    f054:	00100006 	.word	0x00100006
    f058:	00400002 	.word	0x00400002
    f05c:	40842500 	.word	0x40842500

0000f060 <gpio_nrfx_pin_interrupt_configure>:
{
    f060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f064:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    f066:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    f068:	f8d0 800c 	ldr.w	r8, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    f06c:	7a08      	ldrb	r0, [r1, #8]
    f06e:	f005 071f 	and.w	r7, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
    f072:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    f076:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
    f07a:	d10a      	bne.n	f092 <gpio_nrfx_pin_interrupt_configure+0x32>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    f07c:	486e      	ldr	r0, [pc, #440]	; (f238 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
    *p_pin = pin_number & 0x1F;
    f07e:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    f082:	3180      	adds	r1, #128	; 0x80
    f084:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    f088:	07c8      	lsls	r0, r1, #31
    f08a:	d508      	bpl.n	f09e <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
    f08c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f090:	e0c2      	b.n	f218 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    f092:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    f096:	f8d8 100c 	ldr.w	r1, [r8, #12]
    f09a:	f000 80ae 	beq.w	f1fa <gpio_nrfx_pin_interrupt_configure+0x19a>
    f09e:	2101      	movs	r1, #1
    f0a0:	f8d8 000c 	ldr.w	r0, [r8, #12]
    f0a4:	40a9      	lsls	r1, r5
    f0a6:	4301      	orrs	r1, r0
    f0a8:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    f0ac:	2101      	movs	r1, #1
    f0ae:	f8d8 0014 	ldr.w	r0, [r8, #20]
    f0b2:	40a9      	lsls	r1, r5
    f0b4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    f0b8:	f8d8 2018 	ldr.w	r2, [r8, #24]
    f0bc:	bf0c      	ite	eq
    f0be:	4308      	orreq	r0, r1
    f0c0:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    f0c2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    f0c6:	bf0c      	ite	eq
    f0c8:	430a      	orreq	r2, r1
    f0ca:	438a      	bicne	r2, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    f0cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f0d0:	f04f 0300 	mov.w	r3, #0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    f0d4:	f8c8 2018 	str.w	r2, [r8, #24]
    f0d8:	f8d8 2010 	ldr.w	r2, [r8, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    f0dc:	4e57      	ldr	r6, [pc, #348]	; (f23c <gpio_nrfx_pin_interrupt_configure+0x1dc>)
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    f0de:	bf0c      	ite	eq
    f0e0:	4311      	orreq	r1, r2
    f0e2:	ea22 0101 	bicne.w	r1, r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    f0e6:	f8c8 0014 	str.w	r0, [r8, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    f0ea:	f8c8 1010 	str.w	r1, [r8, #16]
    f0ee:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    f0f2:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f0f4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    f0f8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    f0fc:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    f100:	428f      	cmp	r7, r1
    f102:	d17f      	bne.n	f204 <gpio_nrfx_pin_interrupt_configure+0x1a4>
		    && (intenset & BIT(i))) {
    f104:	fa22 f103 	lsr.w	r1, r2, r3
    f108:	07c9      	lsls	r1, r1, #31
    f10a:	d57b      	bpl.n	f204 <gpio_nrfx_pin_interrupt_configure+0x1a4>
			(void)atomic_and(mask, ~BIT(i));
    f10c:	2201      	movs	r2, #1
    f10e:	409a      	lsls	r2, r3
    f110:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f112:	494b      	ldr	r1, [pc, #300]	; (f240 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
    f114:	e8d1 4fef 	ldaex	r4, [r1]
    f118:	4004      	ands	r4, r0
    f11a:	e8c1 4fec 	stlex	ip, r4, [r1]
    f11e:	f1bc 0f00 	cmp.w	ip, #0
    f122:	d1f7      	bne.n	f114 <gpio_nrfx_pin_interrupt_configure+0xb4>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    f124:	009b      	lsls	r3, r3, #2
    f126:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f12a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    f12e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    f132:	f021 0101 	bic.w	r1, r1, #1
    f136:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
    f13a:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    f13e:	2100      	movs	r1, #0
    f140:	4638      	mov	r0, r7
    f142:	f7ff ff0b 	bl	ef5c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    f146:	f8d8 300c 	ldr.w	r3, [r8, #12]
    f14a:	40eb      	lsrs	r3, r5
    f14c:	f013 0301 	ands.w	r3, r3, #1
    f150:	d051      	beq.n	f1f6 <gpio_nrfx_pin_interrupt_configure+0x196>
		if (data->trig_edge & BIT(pin)) {
    f152:	f8d8 3014 	ldr.w	r3, [r8, #20]
    f156:	40eb      	lsrs	r3, r5
    f158:	f013 0401 	ands.w	r4, r3, #1
    f15c:	d05e      	beq.n	f21c <gpio_nrfx_pin_interrupt_configure+0x1bc>
			if (data->double_edge & BIT(pin)) {
    f15e:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    f162:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
    f164:	40eb      	lsrs	r3, r5
    f166:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    f168:	bf48      	it	mi
    f16a:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    f16c:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    f170:	bf5f      	itttt	pl
    f172:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
    f176:	fa21 f505 	lsrpl.w	r5, r1, r5
    f17a:	f005 0501 	andpl.w	r5, r5, #1
    f17e:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f182:	492f      	ldr	r1, [pc, #188]	; (f240 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
    f184:	bf58      	it	pl
    f186:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    f188:	fa0c f402 	lsl.w	r4, ip, r2
    f18c:	e8d1 0fef 	ldaex	r0, [r1]
    f190:	ea40 0304 	orr.w	r3, r0, r4
    f194:	e8c1 3fee 	stlex	lr, r3, [r1]
    f198:	f1be 0f00 	cmp.w	lr, #0
    f19c:	d1f6      	bne.n	f18c <gpio_nrfx_pin_interrupt_configure+0x12c>
		if ((prev & BIT(channel)) == 0) {
    f19e:	40d0      	lsrs	r0, r2
    f1a0:	f010 0301 	ands.w	r3, r0, #1
    f1a4:	d133      	bne.n	f20e <gpio_nrfx_pin_interrupt_configure+0x1ae>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    f1a6:	0091      	lsls	r1, r2, #2
    f1a8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    f1ac:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
    f1b0:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
    f1b4:	3240      	adds	r2, #64	; 0x40
    f1b6:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    f1ba:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    f1be:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f1c2:	023f      	lsls	r7, r7, #8
    f1c4:	0092      	lsls	r2, r2, #2
    f1c6:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    f1ca:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
    f1ce:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f1d0:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
    f1d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    f1d8:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    f1dc:	4307      	orrs	r7, r0
    f1de:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f1e2:	6013      	str	r3, [r2, #0]
    f1e4:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    f1e6:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    f1ea:	f042 0201 	orr.w	r2, r2, #1
    f1ee:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
    f1f2:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
    f1f6:	4618      	mov	r0, r3
    f1f8:	e00e      	b.n	f218 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    f1fa:	2001      	movs	r0, #1
    f1fc:	40a8      	lsls	r0, r5
    f1fe:	ea21 0100 	bic.w	r1, r1, r0
    f202:	e751      	b.n	f0a8 <gpio_nrfx_pin_interrupt_configure+0x48>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f204:	3301      	adds	r3, #1
    f206:	2b08      	cmp	r3, #8
    f208:	f47f af74 	bne.w	f0f4 <gpio_nrfx_pin_interrupt_configure+0x94>
    f20c:	e797      	b.n	f13e <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    f20e:	3201      	adds	r2, #1
    f210:	2a08      	cmp	r2, #8
    f212:	d1b9      	bne.n	f188 <gpio_nrfx_pin_interrupt_configure+0x128>
	return -ENODEV;
    f214:	f06f 0012 	mvn.w	r0, #18
}
    f218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
    f21c:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f220:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
    f222:	40e9      	lsrs	r1, r5
    f224:	f001 0101 	and.w	r1, r1, #1
    f228:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f22c:	b2c9      	uxtb	r1, r1
    f22e:	f7ff fe95 	bl	ef5c <nrf_gpio_cfg_sense_set>
	int res = 0;
    f232:	4620      	mov	r0, r4
    f234:	e7f0      	b.n	f218 <gpio_nrfx_pin_interrupt_configure+0x1b8>
    f236:	bf00      	nop
    f238:	40842500 	.word	0x40842500
    f23c:	40031000 	.word	0x40031000
    f240:	200106c4 	.word	0x200106c4

0000f244 <gpiote_event_handler>:
{
    f244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f248:	4f3f      	ldr	r7, [pc, #252]	; (f348 <gpiote_event_handler+0x104>)
    f24a:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
    f24c:	2e00      	cmp	r6, #0
    f24e:	d04f      	beq.n	f2f0 <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
    f250:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
    f254:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
    f258:	4b3c      	ldr	r3, [pc, #240]	; (f34c <gpiote_event_handler+0x108>)
    f25a:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    f25c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    f260:	430a      	orrs	r2, r1
    f262:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
    f266:	4a3a      	ldr	r2, [pc, #232]	; (f350 <gpiote_event_handler+0x10c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    f268:	691b      	ldr	r3, [r3, #16]
    f26a:	6914      	ldr	r4, [r2, #16]
    f26c:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    f26e:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
    f272:	bb75      	cbnz	r5, f2d2 <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f274:	603d      	str	r5, [r7, #0]
    f276:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    f278:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    f27a:	2501      	movs	r5, #1
    f27c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    f27e:	4835      	ldr	r0, [pc, #212]	; (f354 <gpiote_event_handler+0x110>)
    f280:	4935      	ldr	r1, [pc, #212]	; (f358 <gpiote_event_handler+0x114>)
    f282:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    f286:	fa05 fc03 	lsl.w	ip, r5, r3
    f28a:	ea1c 0f02 	tst.w	ip, r2
    f28e:	d00f      	beq.n	f2b0 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f290:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    f294:	b162      	cbz	r2, f2b0 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f296:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    f29a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    f29e:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f2a2:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    f2a6:	fa05 f202 	lsl.w	r2, r5, r2
    f2aa:	4314      	orrs	r4, r2
    f2ac:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f2b0:	3301      	adds	r3, #1
    f2b2:	2b08      	cmp	r3, #8
    f2b4:	d1e5      	bne.n	f282 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
    f2b6:	b9ec      	cbnz	r4, f2f4 <gpiote_event_handler+0xb0>
	if (port_event) {
    f2b8:	b14e      	cbz	r6, f2ce <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
    f2ba:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    f2bc:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
    f2be:	4d23      	ldr	r5, [pc, #140]	; (f34c <gpiote_event_handler+0x108>)
    f2c0:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    f2c2:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
    f2c6:	430a      	orrs	r2, r1
    f2c8:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
    f2cc:	bb54      	cbnz	r4, f324 <gpiote_event_handler+0xe0>
}
    f2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
    f2d2:	ea15 0f08 	tst.w	r5, r8
    f2d6:	d006      	beq.n	f2e6 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    f2d8:	2100      	movs	r1, #0
    f2da:	f009 001f 	and.w	r0, r9, #31
    f2de:	f7ff fe3d 	bl	ef5c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    f2e2:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
    f2e6:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    f2ea:	ea4f 0848 	mov.w	r8, r8, lsl #1
    f2ee:	e7c0      	b.n	f272 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    f2f0:	4634      	mov	r4, r6
    f2f2:	e7c1      	b.n	f278 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f2f4:	4b15      	ldr	r3, [pc, #84]	; (f34c <gpiote_event_handler+0x108>)
    f2f6:	6859      	ldr	r1, [r3, #4]
    f2f8:	2900      	cmp	r1, #0
    f2fa:	d0dd      	beq.n	f2b8 <gpiote_event_handler+0x74>
	return node->next;
    f2fc:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    f2fe:	4f17      	ldr	r7, [pc, #92]	; (f35c <gpiote_event_handler+0x118>)
    f300:	2d00      	cmp	r5, #0
    f302:	bf38      	it	cc
    f304:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    f306:	688a      	ldr	r2, [r1, #8]
    f308:	4022      	ands	r2, r4
    f30a:	d002      	beq.n	f312 <gpiote_event_handler+0xce>
			cb->handler(port, cb, cb->pin_mask & pins);
    f30c:	4638      	mov	r0, r7
    f30e:	684b      	ldr	r3, [r1, #4]
    f310:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f312:	2d00      	cmp	r5, #0
    f314:	d0d0      	beq.n	f2b8 <gpiote_event_handler+0x74>
    f316:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f318:	4629      	mov	r1, r5
    f31a:	2b00      	cmp	r3, #0
    f31c:	bf38      	it	cc
    f31e:	2300      	movcc	r3, #0
    f320:	461d      	mov	r5, r3
    f322:	e7f0      	b.n	f306 <gpiote_event_handler+0xc2>
		if (level_pins & bit) {
    f324:	4226      	tst	r6, r4
    f326:	d00c      	beq.n	f342 <gpiote_event_handler+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    f328:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f32a:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
    f32e:	40f9      	lsrs	r1, r7
    f330:	f001 0101 	and.w	r1, r1, #1
    f334:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    f338:	b2c9      	uxtb	r1, r1
    f33a:	f7ff fe0f 	bl	ef5c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    f33e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    f342:	3701      	adds	r7, #1
		bit <<= 1;
    f344:	0076      	lsls	r6, r6, #1
    f346:	e7c1      	b.n	f2cc <gpiote_event_handler+0x88>
    f348:	4003117c 	.word	0x4003117c
    f34c:	200106a8 	.word	0x200106a8
    f350:	40842500 	.word	0x40842500
    f354:	40031000 	.word	0x40031000
    f358:	40031100 	.word	0x40031100
    f35c:	200100fc 	.word	0x200100fc

0000f360 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
    f360:	b538      	push	{r3, r4, r5, lr}
    f362:	4604      	mov	r4, r0
    f364:	2200      	movs	r2, #0
    f366:	2101      	movs	r1, #1
    f368:	200b      	movs	r0, #11
    f36a:	f7fe fc9b 	bl	dca4 <z_arm_irq_priority_set>
	struct spi_nrfx_data *data = get_dev_data(dev);
    f36e:	68e5      	ldr	r5, [r4, #12]
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
    f370:	4a0e      	ldr	r2, [pc, #56]	; (f3ac <spi_3_init+0x4c>)
	data->dev = dev;
    f372:	64ac      	str	r4, [r5, #72]	; 0x48
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
    f374:	6860      	ldr	r0, [r4, #4]
    f376:	462b      	mov	r3, r5
    f378:	f100 010c 	add.w	r1, r0, #12
    f37c:	f001 fa02 	bl	10784 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    f380:	4b0b      	ldr	r3, [pc, #44]	; (f3b0 <spi_3_init+0x50>)
    f382:	4298      	cmp	r0, r3
    f384:	d00d      	beq.n	f3a2 <spi_3_init+0x42>
    f386:	4b0b      	ldr	r3, [pc, #44]	; (f3b4 <spi_3_init+0x54>)
    f388:	4a0b      	ldr	r2, [pc, #44]	; (f3b8 <spi_3_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
    f38a:	480c      	ldr	r0, [pc, #48]	; (f3bc <spi_3_init+0x5c>)
    f38c:	1ad2      	subs	r2, r2, r3
    f38e:	08d2      	lsrs	r2, r2, #3
    f390:	0192      	lsls	r2, r2, #6
    f392:	6821      	ldr	r1, [r4, #0]
    f394:	f042 0201 	orr.w	r2, r2, #1
    f398:	f002 fec5 	bl	12126 <log_1>
		return -EBUSY;
    f39c:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPIM_DEVICE(3);
    f3a0:	bd38      	pop	{r3, r4, r5, pc}
	spi_context_unlock_unconditionally(&data->ctx);
    f3a2:	4628      	mov	r0, r5
    f3a4:	f003 fb98 	bl	12ad8 <spi_context_unlock_unconditionally>
	return 0;
    f3a8:	2000      	movs	r0, #0
SPI_NRFX_SPIM_DEVICE(3);
    f3aa:	e7f9      	b.n	f3a0 <spi_3_init+0x40>
    f3ac:	0000f6c9 	.word	0x0000f6c9
    f3b0:	0bad0000 	.word	0x0bad0000
    f3b4:	00014394 	.word	0x00014394
    f3b8:	000143e4 	.word	0x000143e4
    f3bc:	00014e75 	.word	0x00014e75

0000f3c0 <transfer_next_chunk>:
{
    f3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    f3c2:	68c5      	ldr	r5, [r0, #12]
{
    f3c4:	b085      	sub	sp, #20
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    f3c6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    f3c8:	6c6c      	ldr	r4, [r5, #68]	; 0x44
    f3ca:	b97b      	cbnz	r3, f3ec <transfer_next_chunk+0x2c>
	if (chunk_len > 0) {
    f3cc:	b99c      	cbnz	r4, f3f6 <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
    f3ce:	2200      	movs	r2, #0
    f3d0:	4628      	mov	r0, r5
    f3d2:	4611      	mov	r1, r2
    f3d4:	f003 fb5b 	bl	12a8e <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
    f3d8:	626c      	str	r4, [r5, #36]	; 0x24
	z_impl_k_sem_give(sem);
    f3da:	f105 0014 	add.w	r0, r5, #20
    f3de:	f002 f981 	bl	116e4 <z_impl_k_sem_give>
	dev_data->busy = false;
    f3e2:	2300      	movs	r3, #0
    f3e4:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
    f3e8:	b005      	add	sp, #20
    f3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    f3ec:	2c00      	cmp	r4, #0
    f3ee:	d035      	beq.n	f45c <transfer_next_chunk+0x9c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    f3f0:	429c      	cmp	r4, r3
    f3f2:	bf28      	it	cs
    f3f4:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
    f3f6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
    f3f8:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    f3fa:	b179      	cbz	r1, f41c <transfer_next_chunk+0x5c>
    f3fc:	b173      	cbz	r3, f41c <transfer_next_chunk+0x5c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    f3fe:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    f402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    f406:	d009      	beq.n	f41c <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
    f408:	2c08      	cmp	r4, #8
    f40a:	bf28      	it	cs
    f40c:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    f40e:	f105 0751 	add.w	r7, r5, #81	; 0x51
    f412:	4622      	mov	r2, r4
    f414:	4638      	mov	r0, r7
    f416:	f003 fa72 	bl	128fe <memcpy>
			tx_buf = dev_data->buffer;
    f41a:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
    f41c:	68b2      	ldr	r2, [r6, #8]
    f41e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    f420:	4294      	cmp	r4, r2
    f422:	bf28      	it	cs
    f424:	4614      	movcs	r4, r2
		xfer.p_tx_buffer = tx_buf;
    f426:	9100      	str	r1, [sp, #0]
		dev_data->chunk_len = chunk_len;
    f428:	64ec      	str	r4, [r5, #76]	; 0x4c
    f42a:	b11b      	cbz	r3, f434 <transfer_next_chunk+0x74>
    f42c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    f42e:	2b00      	cmp	r3, #0
    f430:	bf18      	it	ne
    f432:	4623      	movne	r3, r4
    f434:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    f436:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    f438:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    f43a:	b11b      	cbz	r3, f444 <transfer_next_chunk+0x84>
    f43c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    f43e:	2b00      	cmp	r3, #0
    f440:	bf18      	it	ne
    f442:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    f444:	2200      	movs	r2, #0
    f446:	4669      	mov	r1, sp
    f448:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    f44a:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    f44c:	f001 fa40 	bl	108d0 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    f450:	4b03      	ldr	r3, [pc, #12]	; (f460 <transfer_next_chunk+0xa0>)
    f452:	4298      	cmp	r0, r3
    f454:	d0c8      	beq.n	f3e8 <transfer_next_chunk+0x28>
			error = -EIO;
    f456:	f06f 0404 	mvn.w	r4, #4
    f45a:	e7b8      	b.n	f3ce <transfer_next_chunk+0xe>
    f45c:	461c      	mov	r4, r3
    f45e:	e7ca      	b.n	f3f6 <transfer_next_chunk+0x36>
    f460:	0bad0000 	.word	0x0bad0000

0000f464 <spi_nrfx_transceive>:
{
    f464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    f468:	68c4      	ldr	r4, [r0, #12]
{
    f46a:	4680      	mov	r8, r0
    f46c:	468a      	mov	sl, r1
    f46e:	4617      	mov	r7, r2
    f470:	461e      	mov	r6, r3
	k_sem_take(&ctx->lock, K_FOREVER);
    f472:	f104 0904 	add.w	r9, r4, #4
	return z_impl_k_sem_take(sem, timeout);
    f476:	f04f 32ff 	mov.w	r2, #4294967295
    f47a:	f04f 33ff 	mov.w	r3, #4294967295
    f47e:	4648      	mov	r0, r9
    f480:	f002 f950 	bl	11724 <z_impl_k_sem_take>
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
    f484:	f8d8 200c 	ldr.w	r2, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
    f488:	6813      	ldr	r3, [r2, #0]
    f48a:	459a      	cmp	sl, r3
    f48c:	f000 80a6 	beq.w	f5dc <spi_nrfx_transceive+0x178>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    f490:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    f494:	07d8      	lsls	r0, r3, #31
    f496:	d514      	bpl.n	f4c2 <spi_nrfx_transceive+0x5e>
    f498:	4a7c      	ldr	r2, [pc, #496]	; (f68c <spi_nrfx_transceive+0x228>)
    f49a:	4b7d      	ldr	r3, [pc, #500]	; (f690 <spi_nrfx_transceive+0x22c>)
		LOG_ERR("Slave mode is not supported on %s",
    f49c:	f8d8 1000 	ldr.w	r1, [r8]
    f4a0:	1ad2      	subs	r2, r2, r3
    f4a2:	08d2      	lsrs	r2, r2, #3
    f4a4:	0192      	lsls	r2, r2, #6
    f4a6:	487b      	ldr	r0, [pc, #492]	; (f694 <spi_nrfx_transceive+0x230>)
    f4a8:	f042 0201 	orr.w	r2, r2, #1
    f4ac:	f002 fe3b 	bl	12126 <log_1>
		return -EINVAL;
    f4b0:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
    f4b4:	4648      	mov	r0, r9
    f4b6:	f002 f915 	bl	116e4 <z_impl_k_sem_give>
}
    f4ba:	4620      	mov	r0, r4
    f4bc:	b003      	add	sp, #12
    f4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    f4c2:	0719      	lsls	r1, r3, #28
    f4c4:	d50a      	bpl.n	f4dc <spi_nrfx_transceive+0x78>
    f4c6:	4971      	ldr	r1, [pc, #452]	; (f68c <spi_nrfx_transceive+0x228>)
    f4c8:	4b71      	ldr	r3, [pc, #452]	; (f690 <spi_nrfx_transceive+0x22c>)
		LOG_ERR("Loopback mode is not supported");
    f4ca:	4873      	ldr	r0, [pc, #460]	; (f698 <spi_nrfx_transceive+0x234>)
    f4cc:	1ac9      	subs	r1, r1, r3
    f4ce:	08c9      	lsrs	r1, r1, #3
    f4d0:	0189      	lsls	r1, r1, #6
    f4d2:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
    f4d6:	f002 fe19 	bl	1210c <log_0>
    f4da:	e7e9      	b.n	f4b0 <spi_nrfx_transceive+0x4c>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    f4dc:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
    f4e0:	d008      	beq.n	f4f4 <spi_nrfx_transceive+0x90>
    f4e2:	496a      	ldr	r1, [pc, #424]	; (f68c <spi_nrfx_transceive+0x228>)
    f4e4:	4b6a      	ldr	r3, [pc, #424]	; (f690 <spi_nrfx_transceive+0x22c>)
		LOG_ERR("Only single line mode is supported");
    f4e6:	486d      	ldr	r0, [pc, #436]	; (f69c <spi_nrfx_transceive+0x238>)
    f4e8:	1ac9      	subs	r1, r1, r3
    f4ea:	08c9      	lsrs	r1, r1, #3
    f4ec:	0189      	lsls	r1, r1, #6
    f4ee:	f041 0101 	orr.w	r1, r1, #1
    f4f2:	e7f0      	b.n	f4d6 <spi_nrfx_transceive+0x72>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    f4f4:	f3c3 1345 	ubfx	r3, r3, #5, #6
    f4f8:	2b08      	cmp	r3, #8
    f4fa:	d008      	beq.n	f50e <spi_nrfx_transceive+0xaa>
    f4fc:	4963      	ldr	r1, [pc, #396]	; (f68c <spi_nrfx_transceive+0x228>)
    f4fe:	4b64      	ldr	r3, [pc, #400]	; (f690 <spi_nrfx_transceive+0x22c>)
		LOG_ERR("Word sizes other than 8 bits"
    f500:	4867      	ldr	r0, [pc, #412]	; (f6a0 <spi_nrfx_transceive+0x23c>)
    f502:	1ac9      	subs	r1, r1, r3
    f504:	08c9      	lsrs	r1, r1, #3
    f506:	0189      	lsls	r1, r1, #6
    f508:	f041 0101 	orr.w	r1, r1, #1
    f50c:	e7e3      	b.n	f4d6 <spi_nrfx_transceive+0x72>
	if (spi_cfg->frequency < 125000) {
    f50e:	f8da 1000 	ldr.w	r1, [sl]
    f512:	4b64      	ldr	r3, [pc, #400]	; (f6a4 <spi_nrfx_transceive+0x240>)
    f514:	4299      	cmp	r1, r3
    f516:	d808      	bhi.n	f52a <spi_nrfx_transceive+0xc6>
    f518:	495c      	ldr	r1, [pc, #368]	; (f68c <spi_nrfx_transceive+0x228>)
    f51a:	4b5d      	ldr	r3, [pc, #372]	; (f690 <spi_nrfx_transceive+0x22c>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    f51c:	4862      	ldr	r0, [pc, #392]	; (f6a8 <spi_nrfx_transceive+0x244>)
    f51e:	1ac9      	subs	r1, r1, r3
    f520:	08c9      	lsrs	r1, r1, #3
    f522:	0189      	lsls	r1, r1, #6
    f524:	f041 0101 	orr.w	r1, r1, #1
    f528:	e7d5      	b.n	f4d6 <spi_nrfx_transceive+0x72>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    f52a:	f8da 3008 	ldr.w	r3, [sl, #8]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
    f52e:	f8d8 5004 	ldr.w	r5, [r8, #4]
	ctx->config = spi_cfg;
    f532:	f8c2 a000 	str.w	sl, [r2]
    f536:	2b00      	cmp	r3, #0
    f538:	d07a      	beq.n	f630 <spi_nrfx_transceive+0x1cc>
    f53a:	6818      	ldr	r0, [r3, #0]
    f53c:	2800      	cmp	r0, #0
    f53e:	d077      	beq.n	f630 <spi_nrfx_transceive+0x1cc>
				   ctx->config->cs->gpio_dt_flags |
    f540:	7a5a      	ldrb	r2, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    f542:	7a19      	ldrb	r1, [r3, #8]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    f544:	07d3      	lsls	r3, r2, #31
    f546:	bf54      	ite	pl
    f548:	f442 52b0 	orrpl.w	r2, r2, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
    f54c:	f482 6220 	eormi.w	r2, r2, #2560	; 0xa00
	struct gpio_driver_data *data =
    f550:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	return api->pin_configure(port, pin, flags);
    f554:	6883      	ldr	r3, [r0, #8]
    f556:	e9cd 1200 	strd	r1, r2, [sp]
    f55a:	681b      	ldr	r3, [r3, #0]
    f55c:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    f55e:	b960      	cbnz	r0, f57a <spi_nrfx_transceive+0x116>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    f560:	2001      	movs	r0, #1
    f562:	9900      	ldr	r1, [sp, #0]
    f564:	9a01      	ldr	r2, [sp, #4]
    f566:	f8db 3000 	ldr.w	r3, [fp]
    f56a:	fa00 f101 	lsl.w	r1, r0, r1
    f56e:	07d0      	lsls	r0, r2, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    f570:	bf4c      	ite	mi
    f572:	430b      	orrmi	r3, r1
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    f574:	438b      	bicpl	r3, r1
    f576:	f8cb 3000 	str.w	r3, [fp]
	nrf_spim_configure(spim->p_reg,
    f57a:	682a      	ldr	r2, [r5, #0]
    f57c:	f8ba 5004 	ldrh.w	r5, [sl, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    f580:	07a9      	lsls	r1, r5, #30
    f582:	f005 0304 	and.w	r3, r5, #4
    f586:	d55e      	bpl.n	f646 <spi_nrfx_transceive+0x1e2>
			return NRF_SPIM_MODE_2;
    f588:	2b00      	cmp	r3, #0
    f58a:	bf14      	ite	ne
    f58c:	2303      	movne	r3, #3
    f58e:	2302      	moveq	r3, #2
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    f590:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
    f592:	f3c5 1500 	ubfx	r5, r5, #4, #1
    f596:	d05a      	beq.n	f64e <spi_nrfx_transceive+0x1ea>
    f598:	2b03      	cmp	r3, #3
    f59a:	d05b      	beq.n	f654 <spi_nrfx_transceive+0x1f0>
    f59c:	2b01      	cmp	r3, #1
    f59e:	d101      	bne.n	f5a4 <spi_nrfx_transceive+0x140>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    f5a0:	f045 0502 	orr.w	r5, r5, #2
	nrf_spim_frequency_set(spim->p_reg,
    f5a4:	f8da 1000 	ldr.w	r1, [sl]
	if (frequency < 250000) {
    f5a8:	4b40      	ldr	r3, [pc, #256]	; (f6ac <spi_nrfx_transceive+0x248>)
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    f5aa:	f8c2 5554 	str.w	r5, [r2, #1364]	; 0x554
    f5ae:	4299      	cmp	r1, r3
    f5b0:	d953      	bls.n	f65a <spi_nrfx_transceive+0x1f6>
	} else if (frequency < 500000) {
    f5b2:	4b3f      	ldr	r3, [pc, #252]	; (f6b0 <spi_nrfx_transceive+0x24c>)
    f5b4:	4299      	cmp	r1, r3
    f5b6:	d953      	bls.n	f660 <spi_nrfx_transceive+0x1fc>
	} else if (frequency < 1000000) {
    f5b8:	4b3e      	ldr	r3, [pc, #248]	; (f6b4 <spi_nrfx_transceive+0x250>)
    f5ba:	4299      	cmp	r1, r3
    f5bc:	d953      	bls.n	f666 <spi_nrfx_transceive+0x202>
	} else if (frequency < 2000000) {
    f5be:	4b3e      	ldr	r3, [pc, #248]	; (f6b8 <spi_nrfx_transceive+0x254>)
    f5c0:	4299      	cmp	r1, r3
    f5c2:	d953      	bls.n	f66c <spi_nrfx_transceive+0x208>
	} else if (frequency < 4000000) {
    f5c4:	4b3d      	ldr	r3, [pc, #244]	; (f6bc <spi_nrfx_transceive+0x258>)
    f5c6:	4299      	cmp	r1, r3
    f5c8:	d953      	bls.n	f672 <spi_nrfx_transceive+0x20e>
		return NRF_SPIM_FREQ_8M;
    f5ca:	4b3d      	ldr	r3, [pc, #244]	; (f6c0 <spi_nrfx_transceive+0x25c>)
    f5cc:	4299      	cmp	r1, r3
    f5ce:	bf34      	ite	cc
    f5d0:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
    f5d4:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    f5d8:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
    f5dc:	2301      	movs	r3, #1
    f5de:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	if (tx_bufs) {
    f5e2:	2f00      	cmp	r7, #0
    f5e4:	d048      	beq.n	f678 <spi_nrfx_transceive+0x214>
		ctx->current_tx = tx_bufs->buffers;
    f5e6:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
    f5e8:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
    f5ea:	62a3      	str	r3, [r4, #40]	; 0x28
		ctx->tx_count = tx_bufs->count;
    f5ec:	62e2      	str	r2, [r4, #44]	; 0x2c
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    f5ee:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    f5f0:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    f5f2:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->tx_len = ctx->current_tx->len / dfs;
    f5f4:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (rx_bufs) {
    f5f6:	2e00      	cmp	r6, #0
    f5f8:	d043      	beq.n	f682 <spi_nrfx_transceive+0x21e>
		ctx->current_rx = rx_bufs->buffers;
    f5fa:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
    f5fc:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
    f5fe:	6323      	str	r3, [r4, #48]	; 0x30
		ctx->rx_count = rx_bufs->count;
    f600:	6362      	str	r2, [r4, #52]	; 0x34
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    f602:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    f604:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    f606:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->rx_len = ctx->current_rx->len / dfs;
    f608:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->sync_status = 0;
    f60a:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
    f60c:	2101      	movs	r1, #1
    f60e:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    f610:	6262      	str	r2, [r4, #36]	; 0x24
	_spi_context_cs_control(ctx, on, false);
    f612:	f003 fa3c 	bl	12a8e <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
    f616:	4640      	mov	r0, r8
    f618:	f7ff fed2 	bl	f3c0 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
    f61c:	f04f 32ff 	mov.w	r2, #4294967295
    f620:	f104 0014 	add.w	r0, r4, #20
    f624:	f04f 33ff 	mov.w	r3, #4294967295
    f628:	f002 f87c 	bl	11724 <z_impl_k_sem_take>
	status = ctx->sync_status;
    f62c:	6a64      	ldr	r4, [r4, #36]	; 0x24
	return status;
    f62e:	e741      	b.n	f4b4 <spi_nrfx_transceive+0x50>
    f630:	4b17      	ldr	r3, [pc, #92]	; (f690 <spi_nrfx_transceive+0x22c>)
    f632:	4916      	ldr	r1, [pc, #88]	; (f68c <spi_nrfx_transceive+0x228>)
		LOG_INF("CS control inhibited (no GPIO device)");
    f634:	4823      	ldr	r0, [pc, #140]	; (f6c4 <spi_nrfx_transceive+0x260>)
    f636:	1ac9      	subs	r1, r1, r3
    f638:	08c9      	lsrs	r1, r1, #3
    f63a:	0189      	lsls	r1, r1, #6
    f63c:	f041 0103 	orr.w	r1, r1, #3
    f640:	f002 fd64 	bl	1210c <log_0>
    f644:	e799      	b.n	f57a <spi_nrfx_transceive+0x116>
			return NRF_SPIM_MODE_0;
    f646:	3b00      	subs	r3, #0
    f648:	bf18      	it	ne
    f64a:	2301      	movne	r3, #1
    f64c:	e7a0      	b.n	f590 <spi_nrfx_transceive+0x12c>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    f64e:	f045 0504 	orr.w	r5, r5, #4
        break;
    f652:	e7a7      	b.n	f5a4 <spi_nrfx_transceive+0x140>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    f654:	f045 0506 	orr.w	r5, r5, #6
        break;
    f658:	e7a4      	b.n	f5a4 <spi_nrfx_transceive+0x140>
		return NRF_SPIM_FREQ_125K;
    f65a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    f65e:	e7bb      	b.n	f5d8 <spi_nrfx_transceive+0x174>
		return NRF_SPIM_FREQ_250K;
    f660:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    f664:	e7b8      	b.n	f5d8 <spi_nrfx_transceive+0x174>
		return NRF_SPIM_FREQ_500K;
    f666:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    f66a:	e7b5      	b.n	f5d8 <spi_nrfx_transceive+0x174>
		return NRF_SPIM_FREQ_1M;
    f66c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    f670:	e7b2      	b.n	f5d8 <spi_nrfx_transceive+0x174>
		return NRF_SPIM_FREQ_2M;
    f672:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    f676:	e7af      	b.n	f5d8 <spi_nrfx_transceive+0x174>
		ctx->tx_count = 0;
    f678:	e9c4 770a 	strd	r7, r7, [r4, #40]	; 0x28
		ctx->tx_len = 0;
    f67c:	e9c4 770e 	strd	r7, r7, [r4, #56]	; 0x38
    f680:	e7b9      	b.n	f5f6 <spi_nrfx_transceive+0x192>
		ctx->rx_count = 0;
    f682:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
		ctx->rx_len = 0;
    f686:	e9c4 6610 	strd	r6, r6, [r4, #64]	; 0x40
    f68a:	e7be      	b.n	f60a <spi_nrfx_transceive+0x1a6>
    f68c:	000143e4 	.word	0x000143e4
    f690:	00014394 	.word	0x00014394
    f694:	00014e95 	.word	0x00014e95
    f698:	00014eb7 	.word	0x00014eb7
    f69c:	00014ed6 	.word	0x00014ed6
    f6a0:	00014ef9 	.word	0x00014ef9
    f6a4:	0001e847 	.word	0x0001e847
    f6a8:	00014f28 	.word	0x00014f28
    f6ac:	0003d08f 	.word	0x0003d08f
    f6b0:	0007a11f 	.word	0x0007a11f
    f6b4:	000f423f 	.word	0x000f423f
    f6b8:	001e847f 	.word	0x001e847f
    f6bc:	003d08ff 	.word	0x003d08ff
    f6c0:	007a1200 	.word	0x007a1200
    f6c4:	00014f59 	.word	0x00014f59

0000f6c8 <event_handler>:
{
    f6c8:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    f6ca:	7803      	ldrb	r3, [r0, #0]
{
    f6cc:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    f6ce:	2b00      	cmp	r3, #0
    f6d0:	d14e      	bne.n	f770 <event_handler+0xa8>
	if (!ctx->tx_len) {
    f6d2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    f6d4:	b163      	cbz	r3, f6f0 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    f6d6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
	if (len > ctx->tx_len) {
    f6d8:	429a      	cmp	r2, r3
    f6da:	d91d      	bls.n	f718 <event_handler+0x50>
    f6dc:	4925      	ldr	r1, [pc, #148]	; (f774 <event_handler+0xac>)
    f6de:	4b26      	ldr	r3, [pc, #152]	; (f778 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    f6e0:	4826      	ldr	r0, [pc, #152]	; (f77c <event_handler+0xb4>)
    f6e2:	1ac9      	subs	r1, r1, r3
    f6e4:	08c9      	lsrs	r1, r1, #3
    f6e6:	0189      	lsls	r1, r1, #6
    f6e8:	f041 0101 	orr.w	r1, r1, #1
    f6ec:	f002 fd0e 	bl	1210c <log_0>
	if (!ctx->rx_len) {
    f6f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    f6f2:	b163      	cbz	r3, f70e <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    f6f4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	if (len > ctx->rx_len) {
    f6f6:	429a      	cmp	r2, r3
    f6f8:	d924      	bls.n	f744 <event_handler+0x7c>
    f6fa:	491e      	ldr	r1, [pc, #120]	; (f774 <event_handler+0xac>)
    f6fc:	4b1e      	ldr	r3, [pc, #120]	; (f778 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    f6fe:	481f      	ldr	r0, [pc, #124]	; (f77c <event_handler+0xb4>)
    f700:	1ac9      	subs	r1, r1, r3
    f702:	08c9      	lsrs	r1, r1, #3
    f704:	0189      	lsls	r1, r1, #6
    f706:	f041 0101 	orr.w	r1, r1, #1
    f70a:	f002 fcff 	bl	1210c <log_0>
		transfer_next_chunk(dev_data->dev);
    f70e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    f710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    f714:	f7ff be54 	b.w	f3c0 <transfer_next_chunk>
	ctx->tx_len -= len;
    f718:	1a9b      	subs	r3, r3, r2
    f71a:	63cb      	str	r3, [r1, #60]	; 0x3c
	if (!ctx->tx_len) {
    f71c:	b963      	cbnz	r3, f738 <event_handler+0x70>
		ctx->tx_count--;
    f71e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    f720:	3b01      	subs	r3, #1
    f722:	62cb      	str	r3, [r1, #44]	; 0x2c
		if (ctx->tx_count) {
    f724:	b163      	cbz	r3, f740 <event_handler+0x78>
			ctx->current_tx++;
    f726:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    f728:	f103 0208 	add.w	r2, r3, #8
    f72c:	628a      	str	r2, [r1, #40]	; 0x28
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    f72e:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    f730:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    f732:	638a      	str	r2, [r1, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
    f734:	63cb      	str	r3, [r1, #60]	; 0x3c
    f736:	e7db      	b.n	f6f0 <event_handler+0x28>
	} else if (ctx->tx_buf) {
    f738:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    f73a:	2b00      	cmp	r3, #0
    f73c:	d0d8      	beq.n	f6f0 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
    f73e:	4413      	add	r3, r2
    f740:	63a3      	str	r3, [r4, #56]	; 0x38
    f742:	e7d5      	b.n	f6f0 <event_handler+0x28>
	ctx->rx_len -= len;
    f744:	1a9b      	subs	r3, r3, r2
    f746:	6463      	str	r3, [r4, #68]	; 0x44
	if (!ctx->rx_len) {
    f748:	b963      	cbnz	r3, f764 <event_handler+0x9c>
		ctx->rx_count--;
    f74a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f74c:	3b01      	subs	r3, #1
    f74e:	6363      	str	r3, [r4, #52]	; 0x34
		if (ctx->rx_count) {
    f750:	b163      	cbz	r3, f76c <event_handler+0xa4>
			ctx->current_rx++;
    f752:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f754:	f103 0208 	add.w	r2, r3, #8
    f758:	6322      	str	r2, [r4, #48]	; 0x30
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    f75a:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    f75c:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    f75e:	6422      	str	r2, [r4, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
    f760:	6463      	str	r3, [r4, #68]	; 0x44
    f762:	e7d4      	b.n	f70e <event_handler+0x46>
	} else if (ctx->rx_buf) {
    f764:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f766:	2b00      	cmp	r3, #0
    f768:	d0d1      	beq.n	f70e <event_handler+0x46>
		ctx->rx_buf += dfs * len;
    f76a:	4413      	add	r3, r2
    f76c:	6423      	str	r3, [r4, #64]	; 0x40
    f76e:	e7ce      	b.n	f70e <event_handler+0x46>
}
    f770:	bd10      	pop	{r4, pc}
    f772:	bf00      	nop
    f774:	000143e4 	.word	0x000143e4
    f778:	00014394 	.word	0x00014394
    f77c:	00014f7f 	.word	0x00014f7f

0000f780 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    f780:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    f782:	794b      	ldrb	r3, [r1, #5]
    f784:	2b01      	cmp	r3, #1
    f786:	d029      	beq.n	f7dc <uarte_nrfx_configure+0x5c>
    f788:	2b03      	cmp	r3, #3
    f78a:	d124      	bne.n	f7d6 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    f78c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    f78e:	798b      	ldrb	r3, [r1, #6]
    f790:	2b03      	cmp	r3, #3
    f792:	d120      	bne.n	f7d6 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    f794:	79cc      	ldrb	r4, [r1, #7]
    f796:	b124      	cbz	r4, f7a2 <uarte_nrfx_configure+0x22>
    f798:	2c01      	cmp	r4, #1
    f79a:	d11c      	bne.n	f7d6 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    f79c:	6843      	ldr	r3, [r0, #4]
    f79e:	791b      	ldrb	r3, [r3, #4]
    f7a0:	b1cb      	cbz	r3, f7d6 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    f7a2:	790a      	ldrb	r2, [r1, #4]
    f7a4:	b112      	cbz	r2, f7ac <uarte_nrfx_configure+0x2c>
    f7a6:	2a02      	cmp	r2, #2
    f7a8:	d115      	bne.n	f7d6 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    f7aa:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    f7ac:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    f7ae:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    f7b0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    f7b4:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    f7b6:	d065      	beq.n	f884 <uarte_nrfx_configure+0x104>
    f7b8:	d82d      	bhi.n	f816 <uarte_nrfx_configure+0x96>
    f7ba:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    f7be:	d064      	beq.n	f88a <uarte_nrfx_configure+0x10a>
    f7c0:	d816      	bhi.n	f7f0 <uarte_nrfx_configure+0x70>
    f7c2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    f7c6:	d062      	beq.n	f88e <uarte_nrfx_configure+0x10e>
    f7c8:	d80a      	bhi.n	f7e0 <uarte_nrfx_configure+0x60>
    f7ca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    f7ce:	d061      	beq.n	f894 <uarte_nrfx_configure+0x114>
    f7d0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    f7d4:	d061      	beq.n	f89a <uarte_nrfx_configure+0x11a>
    f7d6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    f7da:	e052      	b.n	f882 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
    f7dc:	2600      	movs	r6, #0
    f7de:	e7d6      	b.n	f78e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    f7e0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    f7e4:	d05c      	beq.n	f8a0 <uarte_nrfx_configure+0x120>
    f7e6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    f7ea:	d1f4      	bne.n	f7d6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    f7ec:	4b37      	ldr	r3, [pc, #220]	; (f8cc <uarte_nrfx_configure+0x14c>)
    f7ee:	e03c      	b.n	f86a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    f7f0:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    f7f4:	d057      	beq.n	f8a6 <uarte_nrfx_configure+0x126>
    f7f6:	d807      	bhi.n	f808 <uarte_nrfx_configure+0x88>
    f7f8:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    f7fc:	d055      	beq.n	f8aa <uarte_nrfx_configure+0x12a>
    f7fe:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    f802:	d1e8      	bne.n	f7d6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    f804:	4b32      	ldr	r3, [pc, #200]	; (f8d0 <uarte_nrfx_configure+0x150>)
    f806:	e030      	b.n	f86a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    f808:	f647 2712 	movw	r7, #31250	; 0x7a12
    f80c:	42bb      	cmp	r3, r7
    f80e:	d1e2      	bne.n	f7d6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    f810:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    f814:	e029      	b.n	f86a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    f816:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    f81a:	d048      	beq.n	f8ae <uarte_nrfx_configure+0x12e>
    f81c:	d813      	bhi.n	f846 <uarte_nrfx_configure+0xc6>
    f81e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    f822:	d047      	beq.n	f8b4 <uarte_nrfx_configure+0x134>
    f824:	d809      	bhi.n	f83a <uarte_nrfx_configure+0xba>
    f826:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    f82a:	42bb      	cmp	r3, r7
    f82c:	d044      	beq.n	f8b8 <uarte_nrfx_configure+0x138>
    f82e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    f832:	d1d0      	bne.n	f7d6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    f834:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    f838:	e017      	b.n	f86a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    f83a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    f83e:	d1ca      	bne.n	f7d6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    f840:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    f844:	e011      	b.n	f86a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    f846:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f84a:	d038      	beq.n	f8be <uarte_nrfx_configure+0x13e>
    f84c:	d808      	bhi.n	f860 <uarte_nrfx_configure+0xe0>
    f84e:	4f21      	ldr	r7, [pc, #132]	; (f8d4 <uarte_nrfx_configure+0x154>)
    f850:	42bb      	cmp	r3, r7
    f852:	d037      	beq.n	f8c4 <uarte_nrfx_configure+0x144>
    f854:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    f858:	d1bd      	bne.n	f7d6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    f85a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    f85e:	e004      	b.n	f86a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    f860:	4f1d      	ldr	r7, [pc, #116]	; (f8d8 <uarte_nrfx_configure+0x158>)
    f862:	42bb      	cmp	r3, r7
    f864:	d1b7      	bne.n	f7d6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    f866:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    f86a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    f86e:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    f870:	4334      	orrs	r4, r6
    f872:	4322      	orrs	r2, r4
    f874:	3304      	adds	r3, #4
    f876:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f878:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    f87c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    f880:	2000      	movs	r0, #0
}
    f882:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    f884:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    f888:	e7ef      	b.n	f86a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    f88a:	4b14      	ldr	r3, [pc, #80]	; (f8dc <uarte_nrfx_configure+0x15c>)
    f88c:	e7ed      	b.n	f86a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    f88e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    f892:	e7ea      	b.n	f86a <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    f894:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    f898:	e7e7      	b.n	f86a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    f89a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    f89e:	e7e4      	b.n	f86a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    f8a0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    f8a4:	e7e1      	b.n	f86a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    f8a6:	4b0e      	ldr	r3, [pc, #56]	; (f8e0 <uarte_nrfx_configure+0x160>)
    f8a8:	e7df      	b.n	f86a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    f8aa:	4b0e      	ldr	r3, [pc, #56]	; (f8e4 <uarte_nrfx_configure+0x164>)
    f8ac:	e7dd      	b.n	f86a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    f8ae:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    f8b2:	e7da      	b.n	f86a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    f8b4:	4b0c      	ldr	r3, [pc, #48]	; (f8e8 <uarte_nrfx_configure+0x168>)
    f8b6:	e7d8      	b.n	f86a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    f8b8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    f8bc:	e7d5      	b.n	f86a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    f8be:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    f8c2:	e7d2      	b.n	f86a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    f8c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    f8c8:	e7cf      	b.n	f86a <uarte_nrfx_configure+0xea>
    f8ca:	bf00      	nop
    f8cc:	0013b000 	.word	0x0013b000
    f8d0:	004ea000 	.word	0x004ea000
    f8d4:	0003d090 	.word	0x0003d090
    f8d8:	000f4240 	.word	0x000f4240
    f8dc:	00275000 	.word	0x00275000
    f8e0:	0075c000 	.word	0x0075c000
    f8e4:	003af000 	.word	0x003af000
    f8e8:	013a9000 	.word	0x013a9000

0000f8ec <uarte_instance_init.isra.0>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(const struct device *dev,
    f8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	nrf_uarte_disable(uarte);

	data->dev = dev;

	nrf_gpio_pin_write(config->pseltxd, 1);
    f8ee:	680f      	ldr	r7, [r1, #0]
static int uarte_instance_init(const struct device *dev,
    f8f0:	460d      	mov	r5, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f8f2:	2101      	movs	r1, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f8f4:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
    f8f8:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    f8fa:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    f8fc:	681c      	ldr	r4, [r3, #0]
    *p_pin = pin_number & 0x1F;
    f8fe:	f007 021f 	and.w	r2, r7, #31
    p_reg->OUTSET = set_mask;
    f902:	4b25      	ldr	r3, [pc, #148]	; (f998 <uarte_instance_init.isra.0+0xac>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f904:	4091      	lsls	r1, r2
    f906:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
	data->dev = dev;
    f90a:	6030      	str	r0, [r6, #0]
    p_reg->OUTSET = set_mask;
    f90c:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f90e:	2103      	movs	r1, #3
    f910:	3280      	adds	r2, #128	; 0x80
    f912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    f916:	686a      	ldr	r2, [r5, #4]
    f918:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
    f91a:	bf1e      	ittt	ne
    f91c:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f920:	3180      	addne	r1, #128	; 0x80
    f922:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    f926:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
    f928:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    f92c:	1c4f      	adds	r7, r1, #1
    f92e:	bf18      	it	ne
    f930:	2700      	movne	r7, #0
    p_reg->PSEL.RXD = pselrxd;
    f932:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    f936:	bf1e      	ittt	ne
    f938:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f93c:	3280      	addne	r2, #128	; 0x80
    f93e:	f843 7022 	strne.w	r7, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    f942:	68ef      	ldr	r7, [r5, #12]
    f944:	1c7a      	adds	r2, r7, #1
    f946:	d00c      	beq.n	f962 <uarte_instance_init.isra.0+0x76>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f948:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    f94c:	f007 021f 	and.w	r2, r7, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f950:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    f954:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    f958:	f04f 0c03 	mov.w	ip, #3
    f95c:	3280      	adds	r2, #128	; 0x80
    f95e:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    f962:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    f966:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    f96a:	68c1      	ldr	r1, [r0, #12]
    f96c:	3104      	adds	r1, #4
    f96e:	f7ff ff07 	bl	f780 <uarte_nrfx_configure>
	if (err) {
    f972:	b980      	cbnz	r0, f996 <uarte_instance_init.isra.0+0xaa>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f974:	2308      	movs	r3, #8
    f976:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    f97a:	686b      	ldr	r3, [r5, #4]
    f97c:	3301      	adds	r3, #1
    f97e:	d00a      	beq.n	f996 <uarte_instance_init.isra.0+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f980:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    f984:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    f988:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    f98a:	3610      	adds	r6, #16
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    f98c:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    f990:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f994:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    f996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f998:	40842500 	.word	0x40842500

0000f99c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    f99c:	b530      	push	{r4, r5, lr}
    f99e:	b085      	sub	sp, #20
    f9a0:	4605      	mov	r5, r0
    f9a2:	466c      	mov	r4, sp
    f9a4:	4b04      	ldr	r3, [pc, #16]	; (f9b8 <uarte_0_init+0x1c>)
    f9a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f9a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    f9ac:	4621      	mov	r1, r4
    f9ae:	4628      	mov	r0, r5
    f9b0:	f7ff ff9c 	bl	f8ec <uarte_instance_init.isra.0>
    f9b4:	b005      	add	sp, #20
    f9b6:	bd30      	pop	{r4, r5, pc}
    f9b8:	00014410 	.word	0x00014410

0000f9bc <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    f9bc:	b530      	push	{r4, r5, lr}
    f9be:	b085      	sub	sp, #20
    f9c0:	4605      	mov	r5, r0
    f9c2:	466c      	mov	r4, sp
    f9c4:	4b04      	ldr	r3, [pc, #16]	; (f9d8 <uarte_1_init+0x1c>)
    f9c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f9c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    f9cc:	4621      	mov	r1, r4
    f9ce:	4628      	mov	r0, r5
    f9d0:	f7ff ff8c 	bl	f8ec <uarte_instance_init.isra.0>
    f9d4:	b005      	add	sp, #20
    f9d6:	bd30      	pop	{r4, r5, pc}
    f9d8:	00014420 	.word	0x00014420

0000f9dc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    f9dc:	b508      	push	{r3, lr}
	z_impl_log_panic();
    f9de:	f7fd fb3b 	bl	d058 <z_impl_log_panic>
    f9e2:	4b06      	ldr	r3, [pc, #24]	; (f9fc <k_sys_fatal_error_handler+0x20>)
    f9e4:	4906      	ldr	r1, [pc, #24]	; (fa00 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    f9e6:	4807      	ldr	r0, [pc, #28]	; (fa04 <k_sys_fatal_error_handler+0x28>)
    f9e8:	1ac9      	subs	r1, r1, r3
    f9ea:	08c9      	lsrs	r1, r1, #3
    f9ec:	0189      	lsls	r1, r1, #6
    f9ee:	f041 0101 	orr.w	r1, r1, #1
    f9f2:	f002 fb8b 	bl	1210c <log_0>
	sys_arch_reboot(0);
    f9f6:	2000      	movs	r0, #0
    f9f8:	f7fe fc88 	bl	e30c <sys_arch_reboot>

	CODE_UNREACHABLE;
    f9fc:	00014394 	.word	0x00014394
    fa00:	000143a4 	.word	0x000143a4
    fa04:	00014fc8 	.word	0x00014fc8

0000fa08 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    fa08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    fa0c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    fa0e:	4c21      	ldr	r4, [pc, #132]	; (fa94 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    fa10:	4e21      	ldr	r6, [pc, #132]	; (fa98 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    fa12:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    fa16:	f8df 9088 	ldr.w	r9, [pc, #136]	; faa0 <check_ext_api_requests+0x98>
{
    fa1a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    fa1c:	45a8      	cmp	r8, r5
    fa1e:	d803      	bhi.n	fa28 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    fa20:	2000      	movs	r0, #0
    fa22:	b005      	add	sp, #20
    fa24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    fa28:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa2a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    fa2e:	681f      	ldr	r7, [r3, #0]
    fa30:	ab01      	add	r3, sp, #4
    fa32:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    fa36:	220c      	movs	r2, #12
    fa38:	4619      	mov	r1, r3
    fa3a:	4638      	mov	r0, r7
    fa3c:	f002 ff4f 	bl	128de <memcmp>
    fa40:	b990      	cbnz	r0, fa68 <check_ext_api_requests+0x60>
    fa42:	b18f      	cbz	r7, fa68 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    fa44:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    fa46:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    fa48:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    fa4a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    fa4c:	4291      	cmp	r1, r2
    fa4e:	d10b      	bne.n	fa68 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    fa50:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    fa52:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    fa54:	4291      	cmp	r1, r2
    fa56:	d807      	bhi.n	fa68 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    fa58:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    fa5a:	4291      	cmp	r1, r2
    fa5c:	d904      	bls.n	fa68 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    fa5e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    fa60:	695b      	ldr	r3, [r3, #20]
    fa62:	ea32 0303 	bics.w	r3, r2, r3
    fa66:	d00a      	beq.n	fa7e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    fa68:	6a27      	ldr	r7, [r4, #32]
    fa6a:	b167      	cbz	r7, fa86 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    fa6c:	480b      	ldr	r0, [pc, #44]	; (fa9c <check_ext_api_requests+0x94>)
    fa6e:	f002 f95c 	bl	11d2a <printk>
			k_panic();
    fa72:	4040      	eors	r0, r0
    fa74:	f380 8811 	msr	BASEPRI, r0
    fa78:	f04f 0004 	mov.w	r0, #4
    fa7c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    fa7e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    fa80:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    fa82:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    fa84:	e7ca      	b.n	fa1c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    fa86:	4648      	mov	r0, r9
    fa88:	f002 f94f 	bl	11d2a <printk>
			*ext_api_req->ext_api = NULL;
    fa8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa8e:	601f      	str	r7, [r3, #0]
    fa90:	e7f5      	b.n	fa7e <check_ext_api_requests+0x76>
    fa92:	bf00      	nop
    fa94:	0000c23c 	.word	0x0000c23c
    fa98:	00014430 	.word	0x00014430
    fa9c:	00014fe5 	.word	0x00014fe5
    faa0:	0001500e 	.word	0x0001500e

0000faa4 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
    faa4:	6801      	ldr	r1, [r0, #0]
{
    faa6:	b5f0      	push	{r4, r5, r6, r7, lr}
    faa8:	4604      	mov	r4, r0
	if (*path) {	/* If the pointer is not a null */
    faaa:	b319      	cbz	r1, faf4 <get_ldnumber+0x50>
    faac:	460b      	mov	r3, r1
    faae:	461a      	mov	r2, r3
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    fab0:	f813 0b01 	ldrb.w	r0, [r3], #1
    fab4:	2820      	cmp	r0, #32
    fab6:	d928      	bls.n	fb0a <get_ldnumber+0x66>
    fab8:	283a      	cmp	r0, #58	; 0x3a
    faba:	d1f8      	bne.n	faae <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
    fabc:	780b      	ldrb	r3, [r1, #0]
    fabe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
    fac2:	2809      	cmp	r0, #9
    fac4:	d919      	bls.n	fafa <get_ldnumber+0x56>
					*path = ++tt;
				}
			}
#if _STR_VOLUME_ID
			 else {	/* No numeric drive number, find string drive id */
				i = 0; tt++;
    fac6:	2000      	movs	r0, #0
    fac8:	4e12      	ldr	r6, [pc, #72]	; (fb14 <get_ldnumber+0x70>)
    faca:	3201      	adds	r2, #1
				do {
					sp = str[i]; tp = *path;
    facc:	460d      	mov	r5, r1
    face:	f856 cb04 	ldr.w	ip, [r6], #4
					do {	/* Compare a string drive id with path name */
						c = *sp++; tc = *tp++;
    fad2:	f815 3b01 	ldrb.w	r3, [r5], #1
    fad6:	f81c 7b01 	ldrb.w	r7, [ip], #1
						if (IsLower(tc)) tc -= 0x20;
    fada:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
    fade:	f1be 0f19 	cmp.w	lr, #25
    fae2:	bf9c      	itt	ls
    fae4:	3b20      	subls	r3, #32
    fae6:	b2db      	uxtbls	r3, r3
					} while (c && (TCHAR)c == tc);
    fae8:	b18f      	cbz	r7, fb0e <get_ldnumber+0x6a>
    faea:	42bb      	cmp	r3, r7
    faec:	d0f1      	beq.n	fad2 <get_ldnumber+0x2e>
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
    faee:	3001      	adds	r0, #1
    faf0:	2808      	cmp	r0, #8
    faf2:	d1eb      	bne.n	facc <get_ldnumber+0x28>
	int vol = -1;
    faf4:	f04f 30ff 	mov.w	r0, #4294967295
    faf8:	e008      	b.n	fb0c <get_ldnumber+0x68>
			i = *tp++ - '0'; 
    fafa:	1c4b      	adds	r3, r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
    fafc:	429a      	cmp	r2, r3
    fafe:	d1e2      	bne.n	fac6 <get_ldnumber+0x22>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
    fb00:	2807      	cmp	r0, #7
    fb02:	d8f7      	bhi.n	faf4 <get_ldnumber+0x50>
					*path = ++tt;
    fb04:	3201      	adds	r2, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
					*path = tt;
    fb06:	6022      	str	r2, [r4, #0]
    fb08:	e000      	b.n	fb0c <get_ldnumber+0x68>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
    fb0a:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
    fb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
    fb0e:	42aa      	cmp	r2, r5
    fb10:	d1ed      	bne.n	faee <get_ldnumber+0x4a>
    fb12:	e7f8      	b.n	fb06 <get_ldnumber+0x62>
    fb14:	000145c8 	.word	0x000145c8

0000fb18 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
    fb18:	2300      	movs	r3, #0
{
    fb1a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
    fb1c:	70c3      	strb	r3, [r0, #3]
    fb1e:	f04f 33ff 	mov.w	r3, #4294967295
    fb22:	62c3      	str	r3, [r0, #44]	; 0x2c
{
    fb24:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
    fb26:	f003 f90e 	bl	12d46 <move_window>
    fb2a:	4601      	mov	r1, r0
    fb2c:	bb30      	cbnz	r0, fb7c <check_fs+0x64>
	rv = rv << 8 | ptr[0];
    fb2e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    fb32:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
    fb36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
    fb3a:	f64a 2255 	movw	r2, #43605	; 0xaa55
    fb3e:	4293      	cmp	r3, r2
    fb40:	d11e      	bne.n	fb80 <check_fs+0x68>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
    fb42:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    fb46:	2be9      	cmp	r3, #233	; 0xe9
    fb48:	d005      	beq.n	fb56 <check_fs+0x3e>
    fb4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    fb4c:	4a0e      	ldr	r2, [pc, #56]	; (fb88 <check_fs+0x70>)
    fb4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    fb52:	4293      	cmp	r3, r2
    fb54:	d116      	bne.n	fb84 <check_fs+0x6c>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
    fb56:	f104 0066 	add.w	r0, r4, #102	; 0x66
    fb5a:	f003 f840 	bl	12bde <ld_dword>
    fb5e:	4b0b      	ldr	r3, [pc, #44]	; (fb8c <check_fs+0x74>)
    fb60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    fb64:	4298      	cmp	r0, r3
    fb66:	d007      	beq.n	fb78 <check_fs+0x60>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
    fb68:	f104 0082 	add.w	r0, r4, #130	; 0x82
    fb6c:	f003 f837 	bl	12bde <ld_dword>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
    fb70:	4b07      	ldr	r3, [pc, #28]	; (fb90 <check_fs+0x78>)
    fb72:	4298      	cmp	r0, r3
    fb74:	bf18      	it	ne
    fb76:	2102      	movne	r1, #2
}
    fb78:	4608      	mov	r0, r1
    fb7a:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
    fb7c:	2104      	movs	r1, #4
    fb7e:	e7fb      	b.n	fb78 <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
    fb80:	2103      	movs	r1, #3
    fb82:	e7f9      	b.n	fb78 <check_fs+0x60>
	return 2;
    fb84:	2102      	movs	r1, #2
    fb86:	e7f7      	b.n	fb78 <check_fs+0x60>
    fb88:	009000eb 	.word	0x009000eb
    fb8c:	00544146 	.word	0x00544146
    fb90:	33544146 	.word	0x33544146

0000fb94 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
    fb94:	2300      	movs	r3, #0
{
    fb96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
    fb9a:	600b      	str	r3, [r1, #0]
{
    fb9c:	b085      	sub	sp, #20
    fb9e:	460f      	mov	r7, r1
    fba0:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
    fba2:	f7ff ff7f 	bl	faa4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    fba6:	1e06      	subs	r6, r0, #0
    fba8:	f2c0 813a 	blt.w	fe20 <find_volume+0x28c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
    fbac:	4b9f      	ldr	r3, [pc, #636]	; (fe2c <find_volume+0x298>)
    fbae:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    fbb2:	2c00      	cmp	r4, #0
    fbb4:	f000 8136 	beq.w	fe24 <find_volume+0x290>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
    fbb8:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
    fbba:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    fbbc:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
    fbc0:	b16b      	cbz	r3, fbde <find_volume+0x4a>
		stat = disk_status(fs->drv);
    fbc2:	7860      	ldrb	r0, [r4, #1]
    fbc4:	f000 fcda 	bl	1057c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    fbc8:	07c7      	lsls	r7, r0, #31
    fbca:	d408      	bmi.n	fbde <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    fbcc:	b11d      	cbz	r5, fbd6 <find_volume+0x42>
    fbce:	f010 0504 	ands.w	r5, r0, #4
    fbd2:	d000      	beq.n	fbd6 <find_volume+0x42>
				return FR_WRITE_PROTECTED;
    fbd4:	250a      	movs	r5, #10
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
    fbd6:	4628      	mov	r0, r5
    fbd8:	b005      	add	sp, #20
    fbda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
    fbde:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    fbe0:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
    fbe2:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    fbe4:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    fbe6:	f000 fcd5 	bl	10594 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    fbea:	07c1      	lsls	r1, r0, #31
    fbec:	f100 811c 	bmi.w	fe28 <find_volume+0x294>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    fbf0:	b10d      	cbz	r5, fbf6 <find_volume+0x62>
    fbf2:	0742      	lsls	r2, r0, #29
    fbf4:	d4ee      	bmi.n	fbd4 <find_volume+0x40>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
    fbf6:	2100      	movs	r1, #0
    fbf8:	4620      	mov	r0, r4
    fbfa:	f7ff ff8d 	bl	fb18 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
    fbfe:	2802      	cmp	r0, #2
    fc00:	f040 80f2 	bne.w	fde8 <find_volume+0x254>
    fc04:	466e      	mov	r6, sp
    fc06:	4635      	mov	r5, r6
    fc08:	f504 71fb 	add.w	r1, r4, #502	; 0x1f6
    fc0c:	f204 2736 	addw	r7, r4, #566	; 0x236
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    fc10:	f811 0c04 	ldrb.w	r0, [r1, #-4]
    fc14:	b110      	cbz	r0, fc1c <find_volume+0x88>
    fc16:	4608      	mov	r0, r1
    fc18:	f002 ffe1 	bl	12bde <ld_dword>
    fc1c:	3110      	adds	r1, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
    fc1e:	428f      	cmp	r7, r1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    fc20:	f845 0b04 	str.w	r0, [r5], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
    fc24:	d1f4      	bne.n	fc10 <find_volume+0x7c>
    fc26:	2500      	movs	r5, #0
			bsect = br[i];
    fc28:	f856 8b04 	ldr.w	r8, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    fc2c:	f1b8 0f00 	cmp.w	r8, #0
    fc30:	f000 80d1 	beq.w	fdd6 <find_volume+0x242>
    fc34:	4641      	mov	r1, r8
    fc36:	4620      	mov	r0, r4
    fc38:	f7ff ff6e 	bl	fb18 <check_fs>
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
    fc3c:	2801      	cmp	r0, #1
    fc3e:	f200 80cb 	bhi.w	fdd8 <find_volume+0x244>
	rv = rv << 8 | ptr[0];
    fc42:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    fc46:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
    fc4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    fc4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    fc52:	f040 80cd 	bne.w	fdf0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
    fc56:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
    fc5a:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    fc5e:	ea55 2500 	orrs.w	r5, r5, r0, lsl #8
    fc62:	d104      	bne.n	fc6e <find_volume+0xda>
    fc64:	f104 0054 	add.w	r0, r4, #84	; 0x54
    fc68:	f002 ffb9 	bl	12bde <ld_dword>
    fc6c:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
    fc6e:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
		fs->fsize = fasize;
    fc72:	61a5      	str	r5, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    fc74:	1e73      	subs	r3, r6, #1
    fc76:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
    fc78:	70a6      	strb	r6, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    fc7a:	f200 80b9 	bhi.w	fdf0 <find_volume+0x25c>
		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
    fc7e:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
    fc82:	464b      	mov	r3, r9
    fc84:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    fc88:	2b00      	cmp	r3, #0
    fc8a:	f000 80b1 	beq.w	fdf0 <find_volume+0x25c>
    fc8e:	f109 33ff 	add.w	r3, r9, #4294967295
    fc92:	ea13 0f09 	tst.w	r3, r9
    fc96:	f040 80ab 	bne.w	fdf0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
    fc9a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    fc9e:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
    fca2:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    fca6:	073b      	lsls	r3, r7, #28
	rv = rv << 8 | ptr[0];
    fca8:	b239      	sxth	r1, r7
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    fcaa:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    fcac:	f040 80a0 	bne.w	fdf0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
    fcb0:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
    fcb4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    fcb8:	ea53 2000 	orrs.w	r0, r3, r0, lsl #8
    fcbc:	d103      	bne.n	fcc6 <find_volume+0x132>
    fcbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
    fcc2:	f002 ff8c 	bl	12bde <ld_dword>
	rv = rv << 8 | ptr[0];
    fcc6:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    fcca:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
    fcce:	ea53 2202 	orrs.w	r2, r3, r2, lsl #8
    fcd2:	f000 808d 	beq.w	fdf0 <find_volume+0x25c>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
    fcd6:	fb05 fe06 	mul.w	lr, r5, r6
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    fcda:	eb02 1c17 	add.w	ip, r2, r7, lsr #4
    fcde:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    fce0:	4560      	cmp	r0, ip
    fce2:	f0c0 8085 	bcc.w	fdf0 <find_volume+0x25c>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    fce6:	eba0 030c 	sub.w	r3, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
    fcea:	454b      	cmp	r3, r9
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    fcec:	fbb3 f6f9 	udiv	r6, r3, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
    fcf0:	d37e      	bcc.n	fdf0 <find_volume+0x25c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    fcf2:	f64f 73f5 	movw	r3, #65525	; 0xfff5
    fcf6:	429e      	cmp	r6, r3
    fcf8:	d87f      	bhi.n	fdfa <find_volume+0x266>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    fcfa:	f640 79f5 	movw	r9, #4085	; 0xff5
    fcfe:	454e      	cmp	r6, r9
    fd00:	bf8c      	ite	hi
    fd02:	f04f 0902 	movhi.w	r9, #2
    fd06:	f04f 0901 	movls.w	r9, #1
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    fd0a:	eb02 0308 	add.w	r3, r2, r8
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    fd0e:	3602      	adds	r6, #2
		fs->database = bsect + sysect;						/* Data start sector */
    fd10:	eb0c 0208 	add.w	r2, ip, r8
		if (fmt == FS_FAT32) {
    fd14:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    fd18:	6166      	str	r6, [r4, #20]
		fs->volbase = bsect;								/* Volume start sector */
    fd1a:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    fd1e:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;						/* Data start sector */
    fd20:	62a2      	str	r2, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
    fd22:	d16d      	bne.n	fe00 <find_volume+0x26c>
	rv = rv << 8 | ptr[0];
    fd24:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
    fd28:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    fd2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    fd30:	4319      	orrs	r1, r3
    fd32:	b209      	sxth	r1, r1
    fd34:	2900      	cmp	r1, #0
    fd36:	d15b      	bne.n	fdf0 <find_volume+0x25c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    fd38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    fd3c:	f002 ff4f 	bl	12bde <ld_dword>
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
    fd40:	00b6      	lsls	r6, r6, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    fd42:	6260      	str	r0, [r4, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    fd44:	f206 16ff 	addw	r6, r6, #511	; 0x1ff
    fd48:	ebb5 2f56 	cmp.w	r5, r6, lsr #9
    fd4c:	d350      	bcc.n	fdf0 <find_volume+0x25c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    fd4e:	f04f 33ff 	mov.w	r3, #4294967295
    fd52:	e9c4 3303 	strd	r3, r3, [r4, #12]
		fs->fsi_flag = 0x80;
    fd56:	2380      	movs	r3, #128	; 0x80
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
    fd58:	f1b9 0f03 	cmp.w	r9, #3
		fs->fsi_flag = 0x80;
    fd5c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
    fd5e:	d130      	bne.n	fdc2 <find_volume+0x22e>
	rv = rv << 8 | ptr[0];
    fd60:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
    fd64:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    fd68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    fd6c:	2b01      	cmp	r3, #1
    fd6e:	d128      	bne.n	fdc2 <find_volume+0x22e>
			&& move_window(fs, bsect + 1) == FR_OK)
    fd70:	4620      	mov	r0, r4
    fd72:	f108 0101 	add.w	r1, r8, #1
    fd76:	f002 ffe6 	bl	12d46 <move_window>
    fd7a:	bb10      	cbnz	r0, fdc2 <find_volume+0x22e>
	rv = rv << 8 | ptr[0];
    fd7c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    fd80:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
    fd84:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
    fd86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    fd8a:	f64a 2255 	movw	r2, #43605	; 0xaa55
    fd8e:	4293      	cmp	r3, r2
    fd90:	d117      	bne.n	fdc2 <find_volume+0x22e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    fd92:	f104 0030 	add.w	r0, r4, #48	; 0x30
    fd96:	f002 ff22 	bl	12bde <ld_dword>
    fd9a:	4b25      	ldr	r3, [pc, #148]	; (fe30 <find_volume+0x29c>)
    fd9c:	4298      	cmp	r0, r3
    fd9e:	d110      	bne.n	fdc2 <find_volume+0x22e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    fda0:	f504 7005 	add.w	r0, r4, #532	; 0x214
    fda4:	f002 ff1b 	bl	12bde <ld_dword>
    fda8:	4b22      	ldr	r3, [pc, #136]	; (fe34 <find_volume+0x2a0>)
    fdaa:	4298      	cmp	r0, r3
    fdac:	d109      	bne.n	fdc2 <find_volume+0x22e>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    fdae:	f504 7006 	add.w	r0, r4, #536	; 0x218
    fdb2:	f002 ff14 	bl	12bde <ld_dword>
    fdb6:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    fdb8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
    fdbc:	f002 ff0f 	bl	12bde <ld_dword>
    fdc0:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;	/* File system mount ID */
    fdc2:	4a1d      	ldr	r2, [pc, #116]	; (fe38 <find_volume+0x2a4>)
	return FR_OK;
    fdc4:	2500      	movs	r5, #0
	fs->id = ++Fsid;	/* File system mount ID */
    fdc6:	8813      	ldrh	r3, [r2, #0]
	fs->fs_type = fmt;	/* FAT sub-type */
    fdc8:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;	/* File system mount ID */
    fdcc:	3301      	adds	r3, #1
    fdce:	b29b      	uxth	r3, r3
    fdd0:	8013      	strh	r3, [r2, #0]
    fdd2:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
    fdd4:	e6ff      	b.n	fbd6 <find_volume+0x42>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    fdd6:	2003      	movs	r0, #3
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
    fdd8:	3501      	adds	r5, #1
    fdda:	2d04      	cmp	r5, #4
    fddc:	f47f af24 	bne.w	fc28 <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    fde0:	2804      	cmp	r0, #4
    fde2:	d105      	bne.n	fdf0 <find_volume+0x25c>
    fde4:	2501      	movs	r5, #1
    fde6:	e6f6      	b.n	fbd6 <find_volume+0x42>
    fde8:	2804      	cmp	r0, #4
    fdea:	d0fb      	beq.n	fde4 <find_volume+0x250>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    fdec:	2801      	cmp	r0, #1
    fdee:	d901      	bls.n	fdf4 <find_volume+0x260>
    fdf0:	250d      	movs	r5, #13
    fdf2:	e6f0      	b.n	fbd6 <find_volume+0x42>
	bsect = 0;
    fdf4:	f04f 0800 	mov.w	r8, #0
    fdf8:	e723      	b.n	fc42 <find_volume+0xae>
		fmt = FS_FAT32;
    fdfa:	f04f 0903 	mov.w	r9, #3
    fdfe:	e784      	b.n	fd0a <find_volume+0x176>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
    fe00:	2f00      	cmp	r7, #0
    fe02:	d0f5      	beq.n	fdf0 <find_volume+0x25c>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    fe04:	4473      	add	r3, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    fe06:	f1b9 0f02 	cmp.w	r9, #2
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    fe0a:	6263      	str	r3, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
    fe0c:	ea4f 0346 	mov.w	r3, r6, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    fe10:	bf1b      	ittet	ne
    fe12:	199b      	addne	r3, r3, r6
    fe14:	f006 0601 	andne.w	r6, r6, #1
    fe18:	461e      	moveq	r6, r3
    fe1a:	eb06 0653 	addne.w	r6, r6, r3, lsr #1
    fe1e:	e791      	b.n	fd44 <find_volume+0x1b0>
	if (vol < 0) return FR_INVALID_DRIVE;
    fe20:	250b      	movs	r5, #11
    fe22:	e6d8      	b.n	fbd6 <find_volume+0x42>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    fe24:	250c      	movs	r5, #12
    fe26:	e6d6      	b.n	fbd6 <find_volume+0x42>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    fe28:	2503      	movs	r5, #3
    fe2a:	e6d4      	b.n	fbd6 <find_volume+0x42>
    fe2c:	200106c8 	.word	0x200106c8
    fe30:	41615252 	.word	0x41615252
    fe34:	61417272 	.word	0x61417272
    fe38:	20010754 	.word	0x20010754

0000fe3c <follow_path>:
{
    fe3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fe40:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
    fe42:	6806      	ldr	r6, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    fe44:	460c      	mov	r4, r1
    fe46:	f811 3b01 	ldrb.w	r3, [r1], #1
    fe4a:	2b2f      	cmp	r3, #47	; 0x2f
    fe4c:	d0fa      	beq.n	fe44 <follow_path+0x8>
    fe4e:	2b5c      	cmp	r3, #92	; 0x5c
    fe50:	d0f8      	beq.n	fe44 <follow_path+0x8>
		obj->sclust = 0;					/* Start from the root directory */
    fe52:	2300      	movs	r3, #0
    fe54:	f8c8 3008 	str.w	r3, [r8, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    fe58:	7823      	ldrb	r3, [r4, #0]
    fe5a:	2b1f      	cmp	r3, #31
    fe5c:	d958      	bls.n	ff10 <follow_path+0xd4>
	p = *path; sfn = dp->fn;
    fe5e:	f108 0520 	add.w	r5, r8, #32
	mem_set(sfn, ' ', 11);
    fe62:	220b      	movs	r2, #11
    fe64:	4628      	mov	r0, r5
    fe66:	2120      	movs	r1, #32
    fe68:	f002 fec9 	bl	12bfe <mem_set>
	si = i = 0; ni = 8;
    fe6c:	2200      	movs	r2, #0
    fe6e:	2008      	movs	r0, #8
    fe70:	1e67      	subs	r7, r4, #1
    fe72:	f1c4 0902 	rsb	r9, r4, #2
		c = (BYTE)p[si++];
    fe76:	eb09 0107 	add.w	r1, r9, r7
    fe7a:	f817 3f01 	ldrb.w	r3, [r7, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
    fe7e:	2b20      	cmp	r3, #32
    fe80:	d908      	bls.n	fe94 <follow_path+0x58>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
    fe82:	2b2f      	cmp	r3, #47	; 0x2f
    fe84:	d001      	beq.n	fe8a <follow_path+0x4e>
    fe86:	2b5c      	cmp	r3, #92	; 0x5c
    fe88:	d14c      	bne.n	ff24 <follow_path+0xe8>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    fe8a:	5c60      	ldrb	r0, [r4, r1]
    fe8c:	282f      	cmp	r0, #47	; 0x2f
    fe8e:	d047      	beq.n	ff20 <follow_path+0xe4>
    fe90:	285c      	cmp	r0, #92	; 0x5c
    fe92:	d045      	beq.n	ff20 <follow_path+0xe4>
	*path = p + si;						/* Return pointer to the next segment */
    fe94:	440c      	add	r4, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    fe96:	2a00      	cmp	r2, #0
    fe98:	d054      	beq.n	ff44 <follow_path+0x108>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    fe9a:	f898 2020 	ldrb.w	r2, [r8, #32]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    fe9e:	4640      	mov	r0, r8
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    fea0:	2ae5      	cmp	r2, #229	; 0xe5
    fea2:	bf04      	itt	eq
    fea4:	2205      	moveq	r2, #5
    fea6:	f888 2020 	strbeq.w	r2, [r8, #32]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    feaa:	2b21      	cmp	r3, #33	; 0x21
    feac:	bf34      	ite	cc
    feae:	2304      	movcc	r3, #4
    feb0:	2300      	movcs	r3, #0
    feb2:	f888 302b 	strb.w	r3, [r8, #43]	; 0x2b
	FATFS *fs = dp->obj.fs;
    feb6:	f8d8 7000 	ldr.w	r7, [r8]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    feba:	f003 f90d 	bl	130d8 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
    febe:	2800      	cmp	r0, #0
    fec0:	d144      	bne.n	ff4c <follow_path+0x110>
		res = move_window(fs, dp->sect);
    fec2:	4638      	mov	r0, r7
    fec4:	f8d8 1018 	ldr.w	r1, [r8, #24]
    fec8:	f002 ff3d 	bl	12d46 <move_window>
		if (res != FR_OK) break;
    fecc:	2800      	cmp	r0, #0
    fece:	d13d      	bne.n	ff4c <follow_path+0x110>
		c = dp->dir[DIR_Name];
    fed0:	f8d8 301c 	ldr.w	r3, [r8, #28]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    fed4:	781a      	ldrb	r2, [r3, #0]
    fed6:	2a00      	cmp	r2, #0
    fed8:	d043      	beq.n	ff62 <follow_path+0x126>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    feda:	7ada      	ldrb	r2, [r3, #11]
    fedc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    fee0:	f888 2006 	strb.w	r2, [r8, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    fee4:	7ad8      	ldrb	r0, [r3, #11]
    fee6:	f010 0008 	ands.w	r0, r0, #8
    feea:	d10c      	bne.n	ff06 <follow_path+0xca>
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    feec:	4629      	mov	r1, r5
    feee:	f103 0c0b 	add.w	ip, r3, #11
		r = *d++ - *s++;
    fef2:	f813 2b01 	ldrb.w	r2, [r3], #1
    fef6:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
    fefa:	459c      	cmp	ip, r3
		r = *d++ - *s++;
    fefc:	eba2 020e 	sub.w	r2, r2, lr
	} while (--cnt && r == 0);
    ff00:	d022      	beq.n	ff48 <follow_path+0x10c>
    ff02:	2a00      	cmp	r2, #0
    ff04:	d0f5      	beq.n	fef2 <follow_path+0xb6>
		res = dir_next(dp, 0);	/* Next entry */
    ff06:	2100      	movs	r1, #0
    ff08:	4640      	mov	r0, r8
    ff0a:	f003 f917 	bl	1313c <dir_next>
    ff0e:	e7d6      	b.n	febe <follow_path+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
    ff10:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
    ff12:	4640      	mov	r0, r8
		dp->fn[NSFLAG] = NS_NONAME;
    ff14:	f888 302b 	strb.w	r3, [r8, #43]	; 0x2b
}
    ff18:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
    ff1c:	f003 b8dc 	b.w	130d8 <dir_sdi.constprop.0>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    ff20:	3101      	adds	r1, #1
    ff22:	e7b2      	b.n	fe8a <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
    ff24:	2b2e      	cmp	r3, #46	; 0x2e
    ff26:	d033      	beq.n	ff90 <follow_path+0x154>
    ff28:	4282      	cmp	r2, r0
    ff2a:	d20b      	bcs.n	ff44 <follow_path+0x108>
		if (c >= 0x80) {				/* Extended character? */
    ff2c:	b259      	sxtb	r1, r3
    ff2e:	2900      	cmp	r1, #0
    ff30:	db08      	blt.n	ff44 <follow_path+0x108>
    ff32:	f8df e07c 	ldr.w	lr, [pc, #124]	; ffb0 <follow_path+0x174>
	while (*str && *str != chr) str++;
    ff36:	f81e cb01 	ldrb.w	ip, [lr], #1
    ff3a:	f1bc 0f00 	cmp.w	ip, #0
    ff3e:	d02c      	beq.n	ff9a <follow_path+0x15e>
    ff40:	4563      	cmp	r3, ip
    ff42:	d1f8      	bne.n	ff36 <follow_path+0xfa>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
    ff44:	2006      	movs	r0, #6
	return res;
    ff46:	e00a      	b.n	ff5e <follow_path+0x122>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    ff48:	2a00      	cmp	r2, #0
    ff4a:	d1dc      	bne.n	ff06 <follow_path+0xca>
			ns = dp->fn[NSFLAG];
    ff4c:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
    ff50:	b148      	cbz	r0, ff66 <follow_path+0x12a>
				if (res == FR_NO_FILE) {	/* Object is not found */
    ff52:	2804      	cmp	r0, #4
    ff54:	d103      	bne.n	ff5e <follow_path+0x122>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    ff56:	f013 0f04 	tst.w	r3, #4
    ff5a:	bf08      	it	eq
    ff5c:	2005      	moveq	r0, #5
}
    ff5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    ff62:	2004      	movs	r0, #4
    ff64:	e7f2      	b.n	ff4c <follow_path+0x110>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    ff66:	075a      	lsls	r2, r3, #29
    ff68:	d4f9      	bmi.n	ff5e <follow_path+0x122>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    ff6a:	f898 3006 	ldrb.w	r3, [r8, #6]
    ff6e:	06db      	lsls	r3, r3, #27
    ff70:	d50c      	bpl.n	ff8c <follow_path+0x150>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    ff72:	f8d8 3010 	ldr.w	r3, [r8, #16]
    ff76:	f106 0130 	add.w	r1, r6, #48	; 0x30
    ff7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    ff7e:	7830      	ldrb	r0, [r6, #0]
    ff80:	4419      	add	r1, r3
    ff82:	f002 fe70 	bl	12c66 <ld_clust.isra.0>
    ff86:	f8c8 0008 	str.w	r0, [r8, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
    ff8a:	e76a      	b.n	fe62 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    ff8c:	2005      	movs	r0, #5
    ff8e:	e7e6      	b.n	ff5e <follow_path+0x122>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
    ff90:	280b      	cmp	r0, #11
    ff92:	d0d7      	beq.n	ff44 <follow_path+0x108>
			i = 8; ni = 11;				/* Goto extension */
    ff94:	2208      	movs	r2, #8
    ff96:	200b      	movs	r0, #11
    ff98:	e76d      	b.n	fe76 <follow_path+0x3a>
			if (IsLower(c)) c -= 0x20;	/* To upper */
    ff9a:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
    ff9e:	f1bc 0f19 	cmp.w	ip, #25
    ffa2:	d802      	bhi.n	ffaa <follow_path+0x16e>
    ffa4:	f1a1 0320 	sub.w	r3, r1, #32
    ffa8:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
    ffaa:	54ab      	strb	r3, [r5, r2]
    ffac:	3201      	adds	r2, #1
    ffae:	e762      	b.n	fe76 <follow_path+0x3a>
    ffb0:	00015041 	.word	0x00015041

0000ffb4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    ffb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ffb6:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
    ffba:	a803      	add	r0, sp, #12
{
    ffbc:	4614      	mov	r4, r2
	const TCHAR *rp = path;
    ffbe:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
    ffc0:	f7ff fd70 	bl	faa4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    ffc4:	1e03      	subs	r3, r0, #0
    ffc6:	db15      	blt.n	fff4 <f_mount+0x40>
	cfs = FatFs[vol];					/* Pointer to fs object */
    ffc8:	490c      	ldr	r1, [pc, #48]	; (fffc <f_mount+0x48>)
    ffca:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]

	if (cfs) {
    ffce:	b10a      	cbz	r2, ffd4 <f_mount+0x20>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    ffd0:	2000      	movs	r0, #0
    ffd2:	7010      	strb	r0, [r2, #0]
	}

	if (fs) {
    ffd4:	9801      	ldr	r0, [sp, #4]
    ffd6:	b108      	cbz	r0, ffdc <f_mount+0x28>
		fs->fs_type = 0;				/* Clear new fs object */
    ffd8:	2200      	movs	r2, #0
    ffda:	7002      	strb	r2, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    ffdc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    ffe0:	b130      	cbz	r0, fff0 <f_mount+0x3c>
    ffe2:	2c01      	cmp	r4, #1
    ffe4:	d108      	bne.n	fff8 <f_mount+0x44>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
    ffe6:	2200      	movs	r2, #0
    ffe8:	4668      	mov	r0, sp
    ffea:	a901      	add	r1, sp, #4
    ffec:	f7ff fdd2 	bl	fb94 <find_volume>
	LEAVE_FF(fs, res);
}
    fff0:	b004      	add	sp, #16
    fff2:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
    fff4:	200b      	movs	r0, #11
    fff6:	e7fb      	b.n	fff0 <f_mount+0x3c>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    fff8:	2000      	movs	r0, #0
    fffa:	e7f9      	b.n	fff0 <f_mount+0x3c>
    fffc:	200106c8 	.word	0x200106c8

00010000 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
   10000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10004:	b089      	sub	sp, #36	; 0x24
   10006:	9005      	str	r0, [sp, #20]
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
   10008:	a805      	add	r0, sp, #20
{
   1000a:	460d      	mov	r5, r1
   1000c:	4616      	mov	r6, r2
   1000e:	461c      	mov	r4, r3
	vol = get_ldnumber(&path);					/* Get target logical drive */
   10010:	f7ff fd48 	bl	faa4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
   10014:	1e07      	subs	r7, r0, #0
   10016:	f2c0 823e 	blt.w	10496 <f_mkfs+0x496>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear mounted volume */
   1001a:	4ba3      	ldr	r3, [pc, #652]	; (102a8 <f_mkfs+0x2a8>)
   1001c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   10020:	b10b      	cbz	r3, 10026 <f_mkfs+0x26>
   10022:	2200      	movs	r2, #0
   10024:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
   10026:	b2ff      	uxtb	r7, r7
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
   10028:	4638      	mov	r0, r7
   1002a:	f000 fab3 	bl	10594 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
   1002e:	07c2      	lsls	r2, r0, #31
   10030:	f100 8233 	bmi.w	1049a <f_mkfs+0x49a>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
   10034:	0743      	lsls	r3, r0, #29
   10036:	f100 8232 	bmi.w	1049e <f_mkfs+0x49e>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
   1003a:	2103      	movs	r1, #3
   1003c:	4638      	mov	r0, r7
   1003e:	aa06      	add	r2, sp, #24
   10040:	f000 facc 	bl	105dc <disk_ioctl>
   10044:	b930      	cbnz	r0, 10054 <f_mkfs+0x54>
   10046:	9a06      	ldr	r2, [sp, #24]
   10048:	1e53      	subs	r3, r2, #1
   1004a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1004e:	d201      	bcs.n	10054 <f_mkfs+0x54>
   10050:	421a      	tst	r2, r3
   10052:	d001      	beq.n	10058 <f_mkfs+0x58>
   10054:	2301      	movs	r3, #1
   10056:	9306      	str	r3, [sp, #24]
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
   10058:	b15e      	cbz	r6, 10072 <f_mkfs+0x72>
   1005a:	4b94      	ldr	r3, [pc, #592]	; (102ac <f_mkfs+0x2ac>)
   1005c:	f5a6 7200 	sub.w	r2, r6, #512	; 0x200
   10060:	429a      	cmp	r2, r3
   10062:	d903      	bls.n	1006c <f_mkfs+0x6c>
   10064:	2013      	movs	r0, #19
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;

	return FR_OK;
}
   10066:	b009      	add	sp, #36	; 0x24
   10068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
   1006c:	1e73      	subs	r3, r6, #1
   1006e:	4233      	tst	r3, r6
   10070:	d1f8      	bne.n	10064 <f_mkfs+0x64>
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
   10072:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10074:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   10078:	f023 0301 	bic.w	r3, r3, #1
   1007c:	9304      	str	r3, [sp, #16]
	if (!szb_buf) return FR_MKFS_ABORTED;
   1007e:	b90b      	cbnz	r3, 10084 <f_mkfs+0x84>
   10080:	200e      	movs	r0, #14
   10082:	e7f0      	b.n	10066 <f_mkfs+0x66>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
   10084:	2101      	movs	r1, #1
   10086:	4638      	mov	r0, r7
   10088:	aa07      	add	r2, sp, #28
   1008a:	f000 faa7 	bl	105dc <disk_ioctl>
   1008e:	2800      	cmp	r0, #0
   10090:	f040 80ea 	bne.w	10268 <f_mkfs+0x268>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
   10094:	f015 0308 	ands.w	r3, r5, #8
   10098:	bf14      	ite	ne
   1009a:	f04f 0900 	movne.w	r9, #0
   1009e:	f04f 093f 	moveq.w	r9, #63	; 0x3f
   100a2:	9301      	str	r3, [sp, #4]
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
   100a4:	9b07      	ldr	r3, [sp, #28]
   100a6:	454b      	cmp	r3, r9
   100a8:	d3ea      	bcc.n	10080 <f_mkfs+0x80>
		sz_vol -= b_vol;						/* Volume size */
   100aa:	eba3 0309 	sub.w	r3, r3, r9
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
   100ae:	2b7f      	cmp	r3, #127	; 0x7f
		sz_vol -= b_vol;						/* Volume size */
   100b0:	9307      	str	r3, [sp, #28]
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
   100b2:	d9e5      	bls.n	10080 <f_mkfs+0x80>
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
   100b4:	f5b6 3f81 	cmp.w	r6, #66048	; 0x10200
   100b8:	d2d4      	bcs.n	10064 <f_mkfs+0x64>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
   100ba:	f015 0e02 	ands.w	lr, r5, #2
	au /= ss;	/* Cluster size in unit of sector */
   100be:	ea4f 2256 	mov.w	r2, r6, lsr #9
		if (opt & FM_FAT32) {	/* FAT32 possible? */
   100c2:	d02c      	beq.n	1011e <f_mkfs+0x11e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
   100c4:	f005 0107 	and.w	r1, r5, #7
   100c8:	2902      	cmp	r1, #2
   100ca:	f000 81ee 	beq.w	104aa <f_mkfs+0x4aa>
   100ce:	07e8      	lsls	r0, r5, #31
   100d0:	f140 81eb 	bpl.w	104aa <f_mkfs+0x4aa>
				if (!pau) {	/* au auto-selection */
   100d4:	bb62      	cbnz	r2, 10130 <f_mkfs+0x130>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   100d6:	2601      	movs	r6, #1
   100d8:	4875      	ldr	r0, [pc, #468]	; (102b0 <f_mkfs+0x2b0>)
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
   100da:	0b1d      	lsrs	r5, r3, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   100dc:	f830 1b02 	ldrh.w	r1, [r0], #2
   100e0:	b109      	cbz	r1, 100e6 <f_mkfs+0xe6>
   100e2:	42a9      	cmp	r1, r5
   100e4:	d922      	bls.n	1012c <f_mkfs+0x12c>
				n_clst = sz_vol / pau;
   100e6:	fbb3 f5f6 	udiv	r5, r3, r6
				if (n_clst > MAX_FAT12) {
   100ea:	f640 71f5 	movw	r1, #4085	; 0xff5
   100ee:	428d      	cmp	r5, r1
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
   100f0:	f04f 0120 	mov.w	r1, #32
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   100f4:	bf9b      	ittet	ls
   100f6:	eb05 0545 	addls.w	r5, r5, r5, lsl #1
   100fa:	3501      	addls	r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
   100fc:	3502      	addhi	r5, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   100fe:	086d      	lsrls	r5, r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
   10100:	bf8c      	ite	hi
   10102:	006d      	lslhi	r5, r5, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   10104:	3503      	addls	r5, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
   10106:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
   1010a:	bf8c      	ite	hi
   1010c:	f04f 0802 	movhi.w	r8, #2
					fmt = FS_FAT12;
   10110:	f04f 0801 	movls.w	r8, #1
				sz_rsv = 1;						/* Number of reserved sectors */
   10114:	f04f 0b01 	mov.w	fp, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
   10118:	0a6d      	lsrs	r5, r5, #9
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
   1011a:	9103      	str	r1, [sp, #12]
   1011c:	e1e8      	b.n	104f0 <f_mkfs+0x4f0>
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
   1011e:	07e9      	lsls	r1, r5, #31
   10120:	d4d8      	bmi.n	100d4 <f_mkfs+0xd4>
   10122:	e79f      	b.n	10064 <f_mkfs+0x64>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   10124:	0052      	lsls	r2, r2, #1
   10126:	e1c6      	b.n	104b6 <f_mkfs+0x4b6>
   10128:	4611      	mov	r1, r2
   1012a:	e1cb      	b.n	104c4 <f_mkfs+0x4c4>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   1012c:	0076      	lsls	r6, r6, #1
   1012e:	e7d5      	b.n	100dc <f_mkfs+0xdc>
   10130:	4616      	mov	r6, r2
   10132:	e7d8      	b.n	100e6 <f_mkfs+0xe6>
			if (fmt == FS_FAT16) {
   10134:	f1b8 0f02 	cmp.w	r8, #2
   10138:	d118      	bne.n	1016c <f_mkfs+0x16c>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
   1013a:	f64f 71f5 	movw	r1, #65525	; 0xfff5
   1013e:	9802      	ldr	r0, [sp, #8]
   10140:	4288      	cmp	r0, r1
   10142:	d908      	bls.n	10156 <f_mkfs+0x156>
					if (!au && (pau * 2) <= 64) {
   10144:	2a00      	cmp	r2, #0
   10146:	f040 81ac 	bne.w	104a2 <f_mkfs+0x4a2>
   1014a:	0076      	lsls	r6, r6, #1
   1014c:	2e40      	cmp	r6, #64	; 0x40
   1014e:	f200 8207 	bhi.w	10560 <f_mkfs+0x560>
   10152:	4632      	mov	r2, r6
   10154:	e7be      	b.n	100d4 <f_mkfs+0xd4>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
   10156:	f640 71f5 	movw	r1, #4085	; 0xff5
   1015a:	9802      	ldr	r0, [sp, #8]
   1015c:	4288      	cmp	r0, r1
   1015e:	d80c      	bhi.n	1017a <f_mkfs+0x17a>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   10160:	2a00      	cmp	r2, #0
   10162:	d18d      	bne.n	10080 <f_mkfs+0x80>
   10164:	0072      	lsls	r2, r6, #1
   10166:	2a80      	cmp	r2, #128	; 0x80
   10168:	d9b4      	bls.n	100d4 <f_mkfs+0xd4>
   1016a:	e789      	b.n	10080 <f_mkfs+0x80>
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
   1016c:	f640 73f5 	movw	r3, #4085	; 0xff5
   10170:	9a02      	ldr	r2, [sp, #8]
   10172:	429a      	cmp	r2, r3
   10174:	d884      	bhi.n	10080 <f_mkfs+0x80>
   10176:	f04f 0801 	mov.w	r8, #1
		mem_set(buf, 0, ss);
   1017a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1017e:	2100      	movs	r1, #0
   10180:	4620      	mov	r0, r4
   10182:	f002 fd3c 	bl	12bfe <mem_set>
	if (cnt) {
   10186:	220b      	movs	r2, #11
   10188:	494a      	ldr	r1, [pc, #296]	; (102b4 <f_mkfs+0x2b4>)
   1018a:	4620      	mov	r0, r4
   1018c:	f002 fd62 	bl	12c54 <mem_cpy.part.0>
	*ptr++ = (BYTE)val; val >>= 8;
   10190:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
   10192:	2202      	movs	r2, #2
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
   10194:	f1b8 0f03 	cmp.w	r8, #3
	*ptr++ = (BYTE)val; val >>= 8;
   10198:	72e3      	strb	r3, [r4, #11]
	*ptr++ = (BYTE)val;
   1019a:	7322      	strb	r2, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
   1019c:	7463      	strb	r3, [r4, #17]
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
   1019e:	f04f 0201 	mov.w	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
   101a2:	bf18      	it	ne
   101a4:	2302      	movne	r3, #2
		if (sz_vol < 0x10000) {
   101a6:	9907      	ldr	r1, [sp, #28]
	*ptr++ = (BYTE)val; val >>= 8;
   101a8:	f884 b00e 	strb.w	fp, [r4, #14]
		if (sz_vol < 0x10000) {
   101ac:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
	*ptr++ = (BYTE)val; val >>= 8;
   101b0:	f3cb 2b07 	ubfx	fp, fp, #8, #8
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
   101b4:	7366      	strb	r6, [r4, #13]
	*ptr++ = (BYTE)val;
   101b6:	f884 b00f 	strb.w	fp, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
   101ba:	7422      	strb	r2, [r4, #16]
	*ptr++ = (BYTE)val;
   101bc:	74a3      	strb	r3, [r4, #18]
		if (sz_vol < 0x10000) {
   101be:	d255      	bcs.n	1026c <f_mkfs+0x26c>
	*ptr++ = (BYTE)val; val >>= 8;
   101c0:	74e1      	strb	r1, [r4, #19]
   101c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
	*ptr++ = (BYTE)val;
   101c6:	7521      	strb	r1, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
   101c8:	23f8      	movs	r3, #248	; 0xf8
   101ca:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
   101cc:	233f      	movs	r3, #63	; 0x3f
	*ptr++ = (BYTE)val;
   101ce:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
   101d0:	7623      	strb	r3, [r4, #24]
   101d2:	23ff      	movs	r3, #255	; 0xff
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
   101d4:	4649      	mov	r1, r9
	*ptr++ = (BYTE)val; val >>= 8;
   101d6:	76a3      	strb	r3, [r4, #26]
	*ptr++ = (BYTE)val;
   101d8:	7662      	strb	r2, [r4, #25]
   101da:	76e2      	strb	r2, [r4, #27]
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
   101dc:	f104 001c 	add.w	r0, r4, #28
   101e0:	f002 fd05 	bl	12bee <st_dword>
		if (fmt == FS_FAT32) {
   101e4:	f1b8 0f03 	cmp.w	r8, #3
   101e8:	f04f 0321 	mov.w	r3, #33	; 0x21
   101ec:	d143      	bne.n	10276 <f_mkfs+0x276>
	*ptr++ = (BYTE)val; val >>= 8;
   101ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	*ptr++ = (BYTE)val;
   101f2:	2348      	movs	r3, #72	; 0x48
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
   101f4:	4629      	mov	r1, r5
	*ptr++ = (BYTE)val; val >>= 8;
   101f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
	*ptr++ = (BYTE)val; val >>= 8;
   101fa:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	*ptr++ = (BYTE)val;
   101fe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
   10202:	f104 0024 	add.w	r0, r4, #36	; 0x24
   10206:	f002 fcf2 	bl	12bee <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
   1020a:	2302      	movs	r3, #2
   1020c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
   10210:	2301      	movs	r3, #1
   10212:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   10216:	2306      	movs	r3, #6
   10218:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
   1021c:	2380      	movs	r3, #128	; 0x80
   1021e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
   10222:	2329      	movs	r3, #41	; 0x29
	*ptr++ = (BYTE)val; val >>= 8;
   10224:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
   10228:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	*ptr++ = (BYTE)val;
   1022c:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	*ptr++ = (BYTE)val;
   10230:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
   10234:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
   10238:	2213      	movs	r2, #19
   1023a:	491f      	ldr	r1, [pc, #124]	; (102b8 <f_mkfs+0x2b8>)
   1023c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	if (cnt) {
   10240:	f104 0047 	add.w	r0, r4, #71	; 0x47
   10244:	f002 fd06 	bl	12c54 <mem_cpy.part.0>
	*ptr++ = (BYTE)val; val >>= 8;
   10248:	f04f 0355 	mov.w	r3, #85	; 0x55
   1024c:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   10250:	f06f 0355 	mvn.w	r3, #85	; 0x55
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
   10254:	464a      	mov	r2, r9
	*ptr++ = (BYTE)val;
   10256:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
   1025a:	4621      	mov	r1, r4
   1025c:	2301      	movs	r3, #1
   1025e:	4638      	mov	r0, r7
   10260:	f000 f9b0 	bl	105c4 <disk_write>
   10264:	4683      	mov	fp, r0
   10266:	b358      	cbz	r0, 102c0 <f_mkfs+0x2c0>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
   10268:	2001      	movs	r0, #1
   1026a:	e6fc      	b.n	10066 <f_mkfs+0x66>
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
   1026c:	f104 0020 	add.w	r0, r4, #32
   10270:	f002 fcbd 	bl	12bee <st_dword>
   10274:	e7a8      	b.n	101c8 <f_mkfs+0x1c8>
	*ptr++ = (BYTE)val; val >>= 8;
   10276:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	*ptr++ = (BYTE)val;
   1027a:	2348      	movs	r3, #72	; 0x48
   1027c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	*ptr++ = (BYTE)val; val >>= 8;
   10280:	f3c5 2307 	ubfx	r3, r5, #8, #8
	*ptr++ = (BYTE)val;
   10284:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
   10286:	2380      	movs	r3, #128	; 0x80
   10288:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
   1028c:	2329      	movs	r3, #41	; 0x29
	*ptr++ = (BYTE)val; val >>= 8;
   1028e:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
	*ptr++ = (BYTE)val; val >>= 8;
   10292:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
   10296:	4909      	ldr	r1, [pc, #36]	; (102bc <f_mkfs+0x2bc>)
   10298:	2213      	movs	r2, #19
   1029a:	75a5      	strb	r5, [r4, #22]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
   1029c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	if (cnt) {
   102a0:	f104 002b 	add.w	r0, r4, #43	; 0x2b
   102a4:	e7ce      	b.n	10244 <f_mkfs+0x244>
   102a6:	bf00      	nop
   102a8:	200106c8 	.word	0x200106c8
   102ac:	00fffe00 	.word	0x00fffe00
   102b0:	00014634 	.word	0x00014634
   102b4:	00015050 	.word	0x00015050
   102b8:	0001505c 	.word	0x0001505c
   102bc:	00015070 	.word	0x00015070
		if (fmt == FS_FAT32) {
   102c0:	f1b8 0f03 	cmp.w	r8, #3
   102c4:	d141      	bne.n	1034a <f_mkfs+0x34a>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
   102c6:	2301      	movs	r3, #1
   102c8:	4621      	mov	r1, r4
   102ca:	f109 0206 	add.w	r2, r9, #6
   102ce:	4638      	mov	r0, r7
   102d0:	f000 f978 	bl	105c4 <disk_write>
			mem_set(buf, 0, ss);
   102d4:	f44f 7200 	mov.w	r2, #512	; 0x200
   102d8:	4659      	mov	r1, fp
   102da:	4620      	mov	r0, r4
   102dc:	f002 fc8f 	bl	12bfe <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
   102e0:	2352      	movs	r3, #82	; 0x52
   102e2:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   102e4:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
   102e6:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val;
   102e8:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
   102ea:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
   102ec:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
   102ee:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   102f2:	9b02      	ldr	r3, [sp, #8]
	*ptr++ = (BYTE)val;
   102f4:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
   102f6:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
   102fa:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
   102fe:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   10302:	1e59      	subs	r1, r3, #1
   10304:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
   10308:	f002 fc71 	bl	12bee <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
   1030c:	2302      	movs	r3, #2
   1030e:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
	*ptr++ = (BYTE)val; val >>= 8;
   10312:	f04f 0355 	mov.w	r3, #85	; 0x55
   10316:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   1031a:	f06f 0355 	mvn.w	r3, #85	; 0x55
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   1031e:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val;
   10320:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   10324:	f109 0207 	add.w	r2, r9, #7
   10328:	2301      	movs	r3, #1
   1032a:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
   1032c:	f884 b1ed 	strb.w	fp, [r4, #493]	; 0x1ed
	*ptr++ = (BYTE)val; val >>= 8;
   10330:	f884 b1ee 	strb.w	fp, [r4, #494]	; 0x1ee
	*ptr++ = (BYTE)val;
   10334:	f884 b1ef 	strb.w	fp, [r4, #495]	; 0x1ef
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   10338:	f000 f944 	bl	105c4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
   1033c:	2301      	movs	r3, #1
   1033e:	4621      	mov	r1, r4
   10340:	4638      	mov	r0, r7
   10342:	eb09 0203 	add.w	r2, r9, r3
   10346:	f000 f93d 	bl	105c4 <disk_write>
		mem_set(buf, 0, (UINT)szb_buf);
   1034a:	2100      	movs	r1, #0
   1034c:	4620      	mov	r0, r4
   1034e:	9a04      	ldr	r2, [sp, #16]
   10350:	f002 fc55 	bl	12bfe <mem_set>
			if (fmt == FS_FAT32) {
   10354:	f1b8 0f03 	cmp.w	r8, #3
   10358:	d154      	bne.n	10404 <f_mkfs+0x404>
	*ptr++ = (BYTE)val; val >>= 8;
   1035a:	23f8      	movs	r3, #248	; 0xf8
   1035c:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   1035e:	23ff      	movs	r3, #255	; 0xff
   10360:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
   10362:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
   10364:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
   10366:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   10368:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
   1036a:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
   1036c:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
   1036e:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
   10370:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
   10372:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
   10374:	230f      	movs	r3, #15
   10376:	72e3      	strb	r3, [r4, #11]
	sz_buf = len / ss;		/* Size of working buffer (sector) */
   10378:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1037a:	0a5b      	lsrs	r3, r3, #9
   1037c:	9302      	str	r3, [sp, #8]
				n = (nsect > sz_buf) ? sz_buf : nsect;
   1037e:	9b02      	ldr	r3, [sp, #8]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
   10380:	4621      	mov	r1, r4
				n = (nsect > sz_buf) ? sz_buf : nsect;
   10382:	42ab      	cmp	r3, r5
   10384:	bf28      	it	cs
   10386:	462b      	movcs	r3, r5
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
   10388:	4652      	mov	r2, sl
   1038a:	4638      	mov	r0, r7
				n = (nsect > sz_buf) ? sz_buf : nsect;
   1038c:	469b      	mov	fp, r3
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
   1038e:	f000 f919 	bl	105c4 <disk_write>
   10392:	4601      	mov	r1, r0
   10394:	2800      	cmp	r0, #0
   10396:	f47f af67 	bne.w	10268 <f_mkfs+0x268>
				mem_set(buf, 0, ss);
   1039a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1039e:	4620      	mov	r0, r4
   103a0:	f002 fc2d 	bl	12bfe <mem_set>
			} while (nsect);
   103a4:	ebb5 050b 	subs.w	r5, r5, fp
				sect += n; nsect -= n;
   103a8:	44da      	add	sl, fp
			} while (nsect);
   103aa:	d1e8      	bne.n	1037e <f_mkfs+0x37e>
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
   103ac:	9b03      	ldr	r3, [sp, #12]
   103ae:	f1b8 0f03 	cmp.w	r8, #3
   103b2:	bf18      	it	ne
   103b4:	461e      	movne	r6, r3
			n = (nsect > sz_buf) ? sz_buf : nsect;
   103b6:	9b02      	ldr	r3, [sp, #8]
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
   103b8:	4652      	mov	r2, sl
			n = (nsect > sz_buf) ? sz_buf : nsect;
   103ba:	42b3      	cmp	r3, r6
   103bc:	bf28      	it	cs
   103be:	4633      	movcs	r3, r6
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
   103c0:	4621      	mov	r1, r4
   103c2:	4638      	mov	r0, r7
			n = (nsect > sz_buf) ? sz_buf : nsect;
   103c4:	461d      	mov	r5, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
   103c6:	f000 f8fd 	bl	105c4 <disk_write>
   103ca:	2800      	cmp	r0, #0
   103cc:	f47f af4c 	bne.w	10268 <f_mkfs+0x268>
		} while (nsect);
   103d0:	1b76      	subs	r6, r6, r5
			sect += n; nsect -= n;
   103d2:	44aa      	add	sl, r5
		} while (nsect);
   103d4:	d1ef      	bne.n	103b6 <f_mkfs+0x3b6>
		if (fmt == FS_FAT32) {
   103d6:	f1b8 0f03 	cmp.w	r8, #3
   103da:	d01d      	beq.n	10418 <f_mkfs+0x418>
			if (sz_vol >= 0x10000) {
   103dc:	9b07      	ldr	r3, [sp, #28]
   103de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   103e2:	d21b      	bcs.n	1041c <f_mkfs+0x41c>
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
   103e4:	f1b8 0f02 	cmp.w	r8, #2
   103e8:	bf0c      	ite	eq
   103ea:	2304      	moveq	r3, #4
   103ec:	2301      	movne	r3, #1
		if (!(opt & FM_SFD)) {
   103ee:	9a01      	ldr	r2, [sp, #4]
   103f0:	b1b2      	cbz	r2, 10420 <f_mkfs+0x420>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
   103f2:	2200      	movs	r2, #0
   103f4:	4638      	mov	r0, r7
   103f6:	4611      	mov	r1, r2
   103f8:	f000 f8f0 	bl	105dc <disk_ioctl>
	if (vol < 0) return FR_INVALID_DRIVE;
   103fc:	3800      	subs	r0, #0
   103fe:	bf18      	it	ne
   10400:	2001      	movne	r0, #1
   10402:	e630      	b.n	10066 <f_mkfs+0x66>
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
   10404:	f1b8 0f01 	cmp.w	r8, #1
   10408:	4959      	ldr	r1, [pc, #356]	; (10570 <f_mkfs+0x570>)
   1040a:	4620      	mov	r0, r4
   1040c:	bf18      	it	ne
   1040e:	f06f 0107 	mvnne.w	r1, #7
   10412:	f002 fbec 	bl	12bee <st_dword>
   10416:	e7af      	b.n	10378 <f_mkfs+0x378>
			sys = 0x0C;		/* FAT32X */
   10418:	230c      	movs	r3, #12
   1041a:	e7e8      	b.n	103ee <f_mkfs+0x3ee>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
   1041c:	2306      	movs	r3, #6
   1041e:	e7e6      	b.n	103ee <f_mkfs+0x3ee>
			mem_set(buf, 0, ss);
   10420:	f44f 7200 	mov.w	r2, #512	; 0x200
   10424:	4620      	mov	r0, r4
   10426:	9901      	ldr	r1, [sp, #4]
   10428:	f002 fbe9 	bl	12bfe <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
   1042c:	2255      	movs	r2, #85	; 0x55
   1042e:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
   10432:	22aa      	movs	r2, #170	; 0xaa
			pte[PTE_System] = sys;				/* System type */
   10434:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
   10438:	f643 63c1 	movw	r3, #16065	; 0x3ec1
	*ptr++ = (BYTE)val;
   1043c:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			pte[PTE_Boot] = 0;					/* Boot indicator */
   10440:	9a01      	ldr	r2, [sp, #4]
			pte[PTE_StHead] = 1;				/* Start head */
   10442:	2501      	movs	r5, #1
			pte[PTE_Boot] = 0;					/* Boot indicator */
   10444:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
			pte[PTE_StCyl] = 0;					/* Start cylinder */
   10448:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
   1044c:	9a07      	ldr	r2, [sp, #28]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
   1044e:	4649      	mov	r1, r9
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
   10450:	444a      	add	r2, r9
   10452:	fbb2 f2f3 	udiv	r2, r2, r3
			pte[PTE_EdHead] = 254;				/* End head */
   10456:	23fe      	movs	r3, #254	; 0xfe
   10458:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
   1045c:	0893      	lsrs	r3, r2, #2
   1045e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   10462:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
   10466:	f884 21c5 	strb.w	r2, [r4, #453]	; 0x1c5
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
   1046a:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
			pte[PTE_StHead] = 1;				/* Start head */
   1046e:	f884 51bf 	strb.w	r5, [r4, #447]	; 0x1bf
			pte[PTE_StSec] = 1;					/* Start sector */
   10472:	f884 51c0 	strb.w	r5, [r4, #448]	; 0x1c0
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
   10476:	f002 fbba 	bl	12bee <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
   1047a:	9907      	ldr	r1, [sp, #28]
   1047c:	f504 70e5 	add.w	r0, r4, #458	; 0x1ca
   10480:	f002 fbb5 	bl	12bee <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
   10484:	462b      	mov	r3, r5
   10486:	4621      	mov	r1, r4
   10488:	4638      	mov	r0, r7
   1048a:	9a01      	ldr	r2, [sp, #4]
   1048c:	f000 f89a 	bl	105c4 <disk_write>
   10490:	2800      	cmp	r0, #0
   10492:	d0ae      	beq.n	103f2 <f_mkfs+0x3f2>
   10494:	e6e8      	b.n	10268 <f_mkfs+0x268>
	if (vol < 0) return FR_INVALID_DRIVE;
   10496:	200b      	movs	r0, #11
   10498:	e5e5      	b.n	10066 <f_mkfs+0x66>
	if (stat & STA_NOINIT) return FR_NOT_READY;
   1049a:	2003      	movs	r0, #3
   1049c:	e5e3      	b.n	10066 <f_mkfs+0x66>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
   1049e:	200a      	movs	r0, #10
   104a0:	e5e1      	b.n	10066 <f_mkfs+0x66>
					if ((opt & FM_FAT32)) {
   104a2:	f1be 0f00 	cmp.w	lr, #0
   104a6:	f43f adeb 	beq.w	10080 <f_mkfs+0x80>
				if (!pau) {	/* au auto-selection */
   104aa:	2a00      	cmp	r2, #0
   104ac:	f47f ae3c 	bne.w	10128 <f_mkfs+0x128>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   104b0:	2201      	movs	r2, #1
   104b2:	4830      	ldr	r0, [pc, #192]	; (10574 <f_mkfs+0x574>)
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
   104b4:	0c5d      	lsrs	r5, r3, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   104b6:	f830 1b02 	ldrh.w	r1, [r0], #2
   104ba:	b119      	cbz	r1, 104c4 <f_mkfs+0x4c4>
   104bc:	42a9      	cmp	r1, r5
   104be:	f67f ae31 	bls.w	10124 <f_mkfs+0x124>
   104c2:	2100      	movs	r1, #0
				n_clst = sz_vol / pau;	/* Number of clusters */
   104c4:	fbb3 f0f2 	udiv	r0, r3, r2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
   104c8:	4e2b      	ldr	r6, [pc, #172]	; (10578 <f_mkfs+0x578>)
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
   104ca:	0085      	lsls	r5, r0, #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
   104cc:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   104d0:	38f6      	subs	r0, #246	; 0xf6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
   104d2:	f205 2507 	addw	r5, r5, #519	; 0x207
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
   104d6:	42b0      	cmp	r0, r6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
   104d8:	ea4f 2555 	mov.w	r5, r5, lsr #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
   104dc:	f63f add0 	bhi.w	10080 <f_mkfs+0x80>
   104e0:	4616      	mov	r6, r2
   104e2:	460a      	mov	r2, r1
				sz_dir = 0;		/* No static directory */
   104e4:	2100      	movs	r1, #0
				sz_rsv = 32;	/* Number of reserved sectors */
   104e6:	f04f 0b20 	mov.w	fp, #32
   104ea:	f04f 0803 	mov.w	r8, #3
				sz_dir = 0;		/* No static directory */
   104ee:	9103      	str	r1, [sp, #12]
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
   104f0:	9903      	ldr	r1, [sp, #12]
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
   104f2:	f8dd c018 	ldr.w	ip, [sp, #24]
			b_fat = b_vol + sz_rsv;						/* FAT base */
   104f6:	eb0b 0a09 	add.w	sl, fp, r9
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
   104fa:	1948      	adds	r0, r1, r5
   104fc:	4450      	add	r0, sl
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
   104fe:	f10c 31ff 	add.w	r1, ip, #4294967295
   10502:	4401      	add	r1, r0
   10504:	f1cc 0c00 	rsb	ip, ip, #0
   10508:	ea01 0c0c 	and.w	ip, r1, ip
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
   1050c:	ebc9 1106 	rsb	r1, r9, r6, lsl #4
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
   10510:	ebac 0c00 	sub.w	ip, ip, r0
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
   10514:	f1b8 0f03 	cmp.w	r8, #3
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
   10518:	4408      	add	r0, r1
				sz_rsv += n; b_fat += n;
   1051a:	bf06      	itte	eq
   1051c:	44e3      	addeq	fp, ip
   1051e:	44e2      	addeq	sl, ip
				sz_fat += n / n_fats;
   10520:	4465      	addne	r5, ip
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
   10522:	4283      	cmp	r3, r0
   10524:	f4ff adac 	bcc.w	10080 <f_mkfs+0x80>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
   10528:	9903      	ldr	r1, [sp, #12]
			if (fmt == FS_FAT32) {
   1052a:	f1b8 0f03 	cmp.w	r8, #3
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
   1052e:	eba3 0101 	sub.w	r1, r3, r1
   10532:	eba1 010b 	sub.w	r1, r1, fp
   10536:	eba1 0105 	sub.w	r1, r1, r5
   1053a:	fbb1 f1f6 	udiv	r1, r1, r6
   1053e:	9102      	str	r1, [sp, #8]
			if (fmt == FS_FAT32) {
   10540:	f47f adf8 	bne.w	10134 <f_mkfs+0x134>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
   10544:	f64f 71f5 	movw	r1, #65525	; 0xfff5
   10548:	9802      	ldr	r0, [sp, #8]
   1054a:	4288      	cmp	r0, r1
   1054c:	f63f ae15 	bhi.w	1017a <f_mkfs+0x17a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
   10550:	2a00      	cmp	r2, #0
   10552:	f47f ad95 	bne.w	10080 <f_mkfs+0x80>
   10556:	2e01      	cmp	r6, #1
   10558:	f67f ad92 	bls.w	10080 <f_mkfs+0x80>
   1055c:	0872      	lsrs	r2, r6, #1
   1055e:	e7a4      	b.n	104aa <f_mkfs+0x4aa>
					if ((opt & FM_FAT32)) {
   10560:	f1be 0f00 	cmp.w	lr, #0
   10564:	d1a4      	bne.n	104b0 <f_mkfs+0x4b0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   10566:	2e80      	cmp	r6, #128	; 0x80
   10568:	f63f ad8a 	bhi.w	10080 <f_mkfs+0x80>
   1056c:	4632      	mov	r2, r6
   1056e:	e5ba      	b.n	100e6 <f_mkfs+0xe6>
   10570:	00fffff8 	.word	0x00fffff8
   10574:	00014642 	.word	0x00014642
   10578:	0ffeffff 	.word	0x0ffeffff

0001057c <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE pdrv)
{
   1057c:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_status(pdrv_str[pdrv]) != 0) {
   1057e:	4b04      	ldr	r3, [pc, #16]	; (10590 <disk_status+0x14>)
   10580:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   10584:	f002 f84d 	bl	12622 <disk_access_status>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
   10588:	3800      	subs	r0, #0
   1058a:	bf18      	it	ne
   1058c:	2001      	movne	r0, #1
   1058e:	bd08      	pop	{r3, pc}
   10590:	000145e8 	.word	0x000145e8

00010594 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE pdrv)
{
   10594:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_init(pdrv_str[pdrv]) != 0) {
   10596:	4b04      	ldr	r3, [pc, #16]	; (105a8 <disk_initialize+0x14>)
   10598:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1059c:	f002 f833 	bl	12606 <disk_access_init>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
   105a0:	3800      	subs	r0, #0
   105a2:	bf18      	it	ne
   105a4:	2001      	movne	r0, #1
   105a6:	bd08      	pop	{r3, pc}
   105a8:	000145e8 	.word	0x000145e8

000105ac <disk_read>:
/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
   105ac:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_read(pdrv_str[pdrv], buff, sector, count) != 0) {
   105ae:	4c04      	ldr	r4, [pc, #16]	; (105c0 <disk_read+0x14>)
   105b0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   105b4:	f002 f843 	bl	1263e <disk_access_read>
		return RES_ERROR;
	} else {
		return RES_OK;
	}

}
   105b8:	3800      	subs	r0, #0
   105ba:	bf18      	it	ne
   105bc:	2001      	movne	r0, #1
   105be:	bd10      	pop	{r4, pc}
   105c0:	000145e8 	.word	0x000145e8

000105c4 <disk_write>:

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
   105c4:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if(disk_access_write(pdrv_str[pdrv], buff, sector, count) != 0) {
   105c6:	4c04      	ldr	r4, [pc, #16]	; (105d8 <disk_write+0x14>)
   105c8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   105cc:	f002 f84e 	bl	1266c <disk_access_write>
		return RES_ERROR;
	} else {
		return RES_OK;
	}
}
   105d0:	3800      	subs	r0, #0
   105d2:	bf18      	it	ne
   105d4:	2001      	movne	r0, #1
   105d6:	bd10      	pop	{r4, pc}
   105d8:	000145e8 	.word	0x000145e8

000105dc <disk_ioctl>:
{
	int ret =  RES_OK;

	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	switch (cmd) {
   105dc:	2901      	cmp	r1, #1
{
   105de:	b508      	push	{r3, lr}
	switch (cmd) {
   105e0:	d003      	beq.n	105ea <disk_ioctl+0xe>
   105e2:	2903      	cmp	r1, #3
   105e4:	d00a      	beq.n	105fc <disk_ioctl+0x20>
   105e6:	b959      	cbnz	r1, 10600 <disk_ioctl+0x24>
	case CTRL_SYNC:
		if(disk_access_ioctl(pdrv_str[pdrv],
   105e8:	2105      	movs	r1, #5
			ret = RES_ERROR;
                }
		break;

	case GET_BLOCK_SIZE:
		if (disk_access_ioctl(pdrv_str[pdrv],
   105ea:	4b06      	ldr	r3, [pc, #24]	; (10604 <disk_ioctl+0x28>)
   105ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   105f0:	f002 f853 	bl	1269a <disk_access_ioctl>
   105f4:	3800      	subs	r0, #0
   105f6:	bf18      	it	ne
   105f8:	2001      	movne	r0, #1
	default:
		ret = RES_PARERR;
		break;
	}
	return ret;
}
   105fa:	bd08      	pop	{r3, pc}
		if (disk_access_ioctl(pdrv_str[pdrv],
   105fc:	2104      	movs	r1, #4
   105fe:	e7f4      	b.n	105ea <disk_ioctl+0xe>
	switch (cmd) {
   10600:	2004      	movs	r0, #4
   10602:	e7fa      	b.n	105fa <disk_ioctl+0x1e>
   10604:	000145e8 	.word	0x000145e8

00010608 <SystemInit>:
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   10608:	4b01      	ldr	r3, [pc, #4]	; (10610 <SystemInit+0x8>)
   1060a:	4a02      	ldr	r2, [pc, #8]	; (10614 <SystemInit+0xc>)
   1060c:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1060e:	4770      	bx	lr
   10610:	200100b0 	.word	0x200100b0
   10614:	03d09000 	.word	0x03d09000

00010618 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   10618:	4b04      	ldr	r3, [pc, #16]	; (1062c <nrfx_clock_init+0x14>)
   1061a:	791a      	ldrb	r2, [r3, #4]
   1061c:	b922      	cbnz	r2, 10628 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1061e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   10620:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   10622:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   10624:	4802      	ldr	r0, [pc, #8]	; (10630 <nrfx_clock_init+0x18>)
   10626:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   10628:	4802      	ldr	r0, [pc, #8]	; (10634 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1062a:	4770      	bx	lr
   1062c:	200106e8 	.word	0x200106e8
   10630:	0bad0000 	.word	0x0bad0000
   10634:	0bad000c 	.word	0x0bad000c

00010638 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   10638:	b110      	cbz	r0, 10640 <nrfx_clock_start+0x8>
   1063a:	2801      	cmp	r0, #1
   1063c:	d01e      	beq.n	1067c <nrfx_clock_start+0x44>
   1063e:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10640:	4b13      	ldr	r3, [pc, #76]	; (10690 <nrfx_clock_start+0x58>)
   10642:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   10646:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1064a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   1064e:	4619      	mov	r1, r3
   10650:	d010      	beq.n	10674 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   10652:	f002 0203 	and.w	r2, r2, #3
   10656:	2a02      	cmp	r2, #2
   10658:	d10c      	bne.n	10674 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1065a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1065e:	2200      	movs	r2, #0
   10660:	4b0c      	ldr	r3, [pc, #48]	; (10694 <nrfx_clock_start+0x5c>)
   10662:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   10664:	2202      	movs	r2, #2
   10666:	681b      	ldr	r3, [r3, #0]
   10668:	4b09      	ldr	r3, [pc, #36]	; (10690 <nrfx_clock_start+0x58>)
   1066a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1066e:	2201      	movs	r2, #1
   10670:	609a      	str	r2, [r3, #8]
}
   10672:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   10674:	2301      	movs	r3, #1
   10676:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   1067a:	e7f0      	b.n	1065e <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1067c:	2200      	movs	r2, #0
   1067e:	4b06      	ldr	r3, [pc, #24]	; (10698 <nrfx_clock_start+0x60>)
   10680:	601a      	str	r2, [r3, #0]
   10682:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   10684:	4b02      	ldr	r3, [pc, #8]	; (10690 <nrfx_clock_start+0x58>)
   10686:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1068a:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1068c:	4770      	bx	lr
   1068e:	bf00      	nop
   10690:	40005000 	.word	0x40005000
   10694:	40005104 	.word	0x40005104
   10698:	40005100 	.word	0x40005100

0001069c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1069c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1069e:	b110      	cbz	r0, 106a6 <nrfx_clock_stop+0xa>
   106a0:	2801      	cmp	r0, #1
   106a2:	d016      	beq.n	106d2 <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   106a4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   106a6:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   106a8:	2101      	movs	r1, #1
   106aa:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   106ae:	4c16      	ldr	r4, [pc, #88]	; (10708 <nrfx_clock_stop+0x6c>)
   106b0:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   106b4:	4a15      	ldr	r2, [pc, #84]	; (1070c <nrfx_clock_stop+0x70>)
   106b6:	6010      	str	r0, [r2, #0]
   106b8:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   106ba:	4a15      	ldr	r2, [pc, #84]	; (10710 <nrfx_clock_stop+0x74>)
   106bc:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   106be:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   106c2:	03db      	lsls	r3, r3, #15
   106c4:	d5ee      	bpl.n	106a4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   106c6:	2001      	movs	r0, #1
   106c8:	f003 fb96 	bl	13df8 <nrfx_busy_wait>
   106cc:	3d01      	subs	r5, #1
   106ce:	d1f6      	bne.n	106be <nrfx_clock_stop+0x22>
   106d0:	e7e8      	b.n	106a4 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   106d2:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   106d4:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   106d8:	4b0e      	ldr	r3, [pc, #56]	; (10714 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   106da:	4c0b      	ldr	r4, [pc, #44]	; (10708 <nrfx_clock_stop+0x6c>)
   106dc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   106e0:	601a      	str	r2, [r3, #0]
   106e2:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   106e4:	4b0c      	ldr	r3, [pc, #48]	; (10718 <nrfx_clock_stop+0x7c>)
   106e6:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   106e8:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   106ec:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   106f0:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   106f4:	03d2      	lsls	r2, r2, #15
   106f6:	d5d5      	bpl.n	106a4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   106f8:	2b00      	cmp	r3, #0
   106fa:	d0d3      	beq.n	106a4 <nrfx_clock_stop+0x8>
   106fc:	2001      	movs	r0, #1
   106fe:	f003 fb7b 	bl	13df8 <nrfx_busy_wait>
   10702:	3d01      	subs	r5, #1
   10704:	d1f0      	bne.n	106e8 <nrfx_clock_stop+0x4c>
   10706:	e7cd      	b.n	106a4 <nrfx_clock_stop+0x8>
   10708:	40005000 	.word	0x40005000
   1070c:	40005104 	.word	0x40005104
   10710:	4000500c 	.word	0x4000500c
   10714:	40005100 	.word	0x40005100
   10718:	40005004 	.word	0x40005004

0001071c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1071c:	4b15      	ldr	r3, [pc, #84]	; (10774 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1071e:	b510      	push	{r4, lr}
   10720:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   10722:	b14a      	cbz	r2, 10738 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10724:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   10726:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10728:	6018      	str	r0, [r3, #0]
   1072a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1072c:	4b12      	ldr	r3, [pc, #72]	; (10778 <nrfx_power_clock_irq_handler+0x5c>)
   1072e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   10732:	4b12      	ldr	r3, [pc, #72]	; (1077c <nrfx_power_clock_irq_handler+0x60>)
   10734:	681b      	ldr	r3, [r3, #0]
   10736:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10738:	4b11      	ldr	r3, [pc, #68]	; (10780 <nrfx_power_clock_irq_handler+0x64>)
   1073a:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1073c:	b182      	cbz	r2, 10760 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1073e:	2200      	movs	r2, #0
   10740:	601a      	str	r2, [r3, #0]
   10742:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10744:	4b0c      	ldr	r3, [pc, #48]	; (10778 <nrfx_power_clock_irq_handler+0x5c>)
   10746:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1074a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1074e:	f002 0203 	and.w	r2, r2, #3
   10752:	2a01      	cmp	r2, #1
   10754:	f04f 0102 	mov.w	r1, #2
   10758:	d103      	bne.n	10762 <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1075a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1075e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   10760:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   10762:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   10766:	4b05      	ldr	r3, [pc, #20]	; (1077c <nrfx_power_clock_irq_handler+0x60>)
   10768:	2001      	movs	r0, #1
}
   1076a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1076e:	681b      	ldr	r3, [r3, #0]
   10770:	4718      	bx	r3
   10772:	bf00      	nop
   10774:	40005100 	.word	0x40005100
   10778:	40005000 	.word	0x40005000
   1077c:	200106e8 	.word	0x200106e8
   10780:	40005104 	.word	0x40005104

00010784 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   10784:	4694      	mov	ip, r2
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   10786:	2224      	movs	r2, #36	; 0x24
{
   10788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1078c:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1078e:	4e4c      	ldr	r6, [pc, #304]	; (108c0 <nrfx_spim_init+0x13c>)
   10790:	436a      	muls	r2, r5
   10792:	18b4      	adds	r4, r6, r2
   10794:	7f27      	ldrb	r7, [r4, #28]
   10796:	2f00      	cmp	r7, #0
   10798:	f040 8090 	bne.w	108bc <nrfx_spim_init+0x138>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1079c:	6800      	ldr	r0, [r0, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   1079e:	6063      	str	r3, [r4, #4]
   107a0:	2401      	movs	r4, #1
   107a2:	2701      	movs	r7, #1
    p_cb->handler = handler;
   107a4:	f846 c002 	str.w	ip, [r6, r2]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
   107a8:	f891 8000 	ldrb.w	r8, [r1]
   107ac:	f891 e00c 	ldrb.w	lr, [r1, #12]
   107b0:	4b44      	ldr	r3, [pc, #272]	; (108c4 <nrfx_spim_init+0x140>)
    p_reg->OUTCLR = clr_mask;
   107b2:	f008 021f 	and.w	r2, r8, #31
   107b6:	4094      	lsls	r4, r2
   107b8:	f1be 0f01 	cmp.w	lr, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   107bc:	f102 0280 	add.w	r2, r2, #128	; 0x80
    p_reg->OUTCLR = clr_mask;
   107c0:	bf94      	ite	ls
   107c2:	60dc      	strls	r4, [r3, #12]
    p_reg->OUTSET = set_mask;
   107c4:	609c      	strhi	r4, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   107c6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   107ca:	784a      	ldrb	r2, [r1, #1]
   107cc:	2aff      	cmp	r2, #255	; 0xff
    *p_pin = pin_number & 0x1F;
   107ce:	bf1f      	itttt	ne
   107d0:	f002 041f 	andne.w	r4, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   107d4:	40a7      	lslne	r7, r4
    p_reg->OUTCLR = clr_mask;
   107d6:	60df      	strne	r7, [r3, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   107d8:	2703      	movne	r7, #3
   107da:	bf1c      	itt	ne
   107dc:	3480      	addne	r4, #128	; 0x80
   107de:	f843 7024 	strne.w	r7, [r3, r4, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   107e2:	788f      	ldrb	r7, [r1, #2]
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   107e4:	bf08      	it	eq
   107e6:	f04f 32ff 	moveq.w	r2, #4294967295
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   107ea:	2fff      	cmp	r7, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   107ec:	bf1f      	itttt	ne
   107ee:	f891 900e 	ldrbne.w	r9, [r1, #14]
    *p_pin = pin_number & 0x1F;
   107f2:	f007 041f 	andne.w	r4, r7, #31
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   107f6:	ea4f 0989 	movne.w	r9, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   107fa:	3480      	addne	r4, #128	; 0x80
   107fc:	bf18      	it	ne
   107fe:	f843 9024 	strne.w	r9, [r3, r4, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
   10802:	f04f 0924 	mov.w	r9, #36	; 0x24
   10806:	fb09 6905 	mla	r9, r9, r5, r6
   1080a:	78cc      	ldrb	r4, [r1, #3]
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   1080c:	bf08      	it	eq
   1080e:	f04f 37ff 	moveq.w	r7, #4294967295

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   10812:	2cff      	cmp	r4, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
   10814:	f889 401f 	strb.w	r4, [r9, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   10818:	d016      	beq.n	10848 <nrfx_spim_init+0xc4>
    {
        if (p_config->ss_active_high)
   1081a:	f04f 0a01 	mov.w	sl, #1
   1081e:	f891 9004 	ldrb.w	r9, [r1, #4]
   10822:	f004 041f 	and.w	r4, r4, #31
   10826:	fa0a fa04 	lsl.w	sl, sl, r4
   1082a:	f1b9 0f00 	cmp.w	r9, #0
   1082e:	d03c      	beq.n	108aa <nrfx_spim_init+0x126>
    p_reg->OUTCLR = clr_mask;
   10830:	f8c3 a00c 	str.w	sl, [r3, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10834:	f04f 0a03 	mov.w	sl, #3
   10838:	3480      	adds	r4, #128	; 0x80
   1083a:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
   1083e:	2324      	movs	r3, #36	; 0x24
   10840:	fb03 6305 	mla	r3, r3, r5, r6
   10844:	f883 901e 	strb.w	r9, [r3, #30]
    p_reg->FREQUENCY = (uint32_t)frequency;
   10848:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCK  = sck_pin;
   1084a:	f8c0 8508 	str.w	r8, [r0, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   1084e:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   10852:	f8c0 7510 	str.w	r7, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   10856:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1085a:	7b4b      	ldrb	r3, [r1, #13]
   1085c:	3b00      	subs	r3, #0
   1085e:	bf18      	it	ne
   10860:	2301      	movne	r3, #1
    switch (spi_mode)
   10862:	f1be 0f02 	cmp.w	lr, #2
   10866:	d023      	beq.n	108b0 <nrfx_spim_init+0x12c>
   10868:	f1be 0f03 	cmp.w	lr, #3
   1086c:	d023      	beq.n	108b6 <nrfx_spim_init+0x132>
   1086e:	f1be 0f01 	cmp.w	lr, #1
   10872:	d101      	bne.n	10878 <nrfx_spim_init+0xf4>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   10874:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   10878:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   1087c:	798b      	ldrb	r3, [r1, #6]
   1087e:	f8c0 35c0 	str.w	r3, [r0, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   10882:	2307      	movs	r3, #7
   10884:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   10888:	f1bc 0f00 	cmp.w	ip, #0
   1088c:	d003      	beq.n	10896 <nrfx_spim_init+0x112>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1088e:	f340 3007 	sbfx	r0, r0, #12, #8
   10892:	f7fd f9e9 	bl	dc68 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   10896:	2324      	movs	r3, #36	; 0x24
   10898:	fb03 6505 	mla	r5, r3, r5, r6
   1089c:	2300      	movs	r3, #0
   1089e:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   108a0:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   108a2:	4809      	ldr	r0, [pc, #36]	; (108c8 <nrfx_spim_init+0x144>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   108a4:	772b      	strb	r3, [r5, #28]
}
   108a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->OUTSET = set_mask;
   108aa:	f8c3 a008 	str.w	sl, [r3, #8]
}
   108ae:	e7c1      	b.n	10834 <nrfx_spim_init+0xb0>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   108b0:	f043 0304 	orr.w	r3, r3, #4
        break;
   108b4:	e7e0      	b.n	10878 <nrfx_spim_init+0xf4>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   108b6:	f043 0306 	orr.w	r3, r3, #6
        break;
   108ba:	e7dd      	b.n	10878 <nrfx_spim_init+0xf4>
        return err_code;
   108bc:	4803      	ldr	r0, [pc, #12]	; (108cc <nrfx_spim_init+0x148>)
   108be:	e7f2      	b.n	108a6 <nrfx_spim_init+0x122>
   108c0:	200106f0 	.word	0x200106f0
   108c4:	40842500 	.word	0x40842500
   108c8:	0bad0000 	.word	0x0bad0000
   108cc:	0bad0005 	.word	0x0bad0005

000108d0 <nrfx_spim_xfer>:
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   108d0:	2324      	movs	r3, #36	; 0x24
{
   108d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   108d6:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->transfer_in_progress)
   108d8:	4f43      	ldr	r7, [pc, #268]	; (109e8 <nrfx_spim_xfer+0x118>)
   108da:	4373      	muls	r3, r6
{
   108dc:	4614      	mov	r4, r2
    if (p_cb->transfer_in_progress)
   108de:	18fa      	adds	r2, r7, r3
{
   108e0:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
   108e2:	7f51      	ldrb	r1, [r2, #29]
{
   108e4:	4686      	mov	lr, r0
    if (p_cb->transfer_in_progress)
   108e6:	2900      	cmp	r1, #0
   108e8:	d17b      	bne.n	109e2 <nrfx_spim_xfer+0x112>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   108ea:	58fb      	ldr	r3, [r7, r3]
   108ec:	b123      	cbz	r3, 108f8 <nrfx_spim_xfer+0x28>
   108ee:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   108f2:	bf04      	itt	eq
   108f4:	2301      	moveq	r3, #1
   108f6:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   108f8:	f04f 0c24 	mov.w	ip, #36	; 0x24
   108fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   10900:	fb0c 7c06 	mla	ip, ip, r6, r7
   10904:	f10c 080c 	add.w	r8, ip, #12
   10908:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1090c:	f89c 301f 	ldrb.w	r3, [ip, #31]
   10910:	2bff      	cmp	r3, #255	; 0xff
   10912:	d008      	beq.n	10926 <nrfx_spim_xfer+0x56>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
   10914:	f003 021f 	and.w	r2, r3, #31
   10918:	2301      	movs	r3, #1
   1091a:	f89c 101e 	ldrb.w	r1, [ip, #30]
   1091e:	4093      	lsls	r3, r2
   10920:	4a32      	ldr	r2, [pc, #200]	; (109ec <nrfx_spim_xfer+0x11c>)
   10922:	b1b1      	cbz	r1, 10952 <nrfx_spim_xfer+0x82>
    p_reg->OUTSET = set_mask;
   10924:	6093      	str	r3, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   10926:	6829      	ldr	r1, [r5, #0]
   10928:	b121      	cbz	r1, 10934 <nrfx_spim_xfer+0x64>
   1092a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   1092e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   10932:	d106      	bne.n	10942 <nrfx_spim_xfer+0x72>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   10934:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   10936:	b172      	cbz	r2, 10956 <nrfx_spim_xfer+0x86>
   10938:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1093c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   10940:	d009      	beq.n	10956 <nrfx_spim_xfer+0x86>
        p_cb->transfer_in_progress = false;
   10942:	2324      	movs	r3, #36	; 0x24
   10944:	fb03 7606 	mla	r6, r3, r6, r7
   10948:	2300      	movs	r3, #0
        return err_code;
   1094a:	4829      	ldr	r0, [pc, #164]	; (109f0 <nrfx_spim_xfer+0x120>)
        p_cb->transfer_in_progress = false;
   1094c:	7773      	strb	r3, [r6, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   1094e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->OUTCLR = clr_mask;
   10952:	60d3      	str	r3, [r2, #12]
}
   10954:	e7e7      	b.n	10926 <nrfx_spim_xfer+0x56>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   10956:	f8de 3000 	ldr.w	r3, [lr]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   1095a:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1095c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   10960:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
   10962:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   10966:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1096a:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   1096c:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10970:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   10974:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   10978:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   1097c:	bf18      	it	ne
   1097e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   10980:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   10984:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   10988:	bf18      	it	ne
   1098a:	2201      	movne	r2, #1
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1098c:	f014 0108 	ands.w	r1, r4, #8
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   10990:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10994:	bf04      	itt	eq
   10996:	2201      	moveq	r2, #1
   10998:	611a      	streq	r2, [r3, #16]
    if (!p_cb->handler)
   1099a:	2224      	movs	r2, #36	; 0x24
   1099c:	4372      	muls	r2, r6
   1099e:	58ba      	ldr	r2, [r7, r2]
   109a0:	b9b2      	cbnz	r2, 109d0 <nrfx_spim_xfer+0x100>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   109a2:	b919      	cbnz	r1, 109ac <nrfx_spim_xfer+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   109a4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   109a8:	2a00      	cmp	r2, #0
   109aa:	d0fb      	beq.n	109a4 <nrfx_spim_xfer+0xd4>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   109ac:	2324      	movs	r3, #36	; 0x24
   109ae:	fb03 7606 	mla	r6, r3, r6, r7
   109b2:	7ff3      	ldrb	r3, [r6, #31]
   109b4:	2bff      	cmp	r3, #255	; 0xff
   109b6:	d007      	beq.n	109c8 <nrfx_spim_xfer+0xf8>
                if (p_cb->ss_active_high)
   109b8:	f003 021f 	and.w	r2, r3, #31
   109bc:	2301      	movs	r3, #1
   109be:	7fb1      	ldrb	r1, [r6, #30]
   109c0:	4093      	lsls	r3, r2
   109c2:	4a0a      	ldr	r2, [pc, #40]	; (109ec <nrfx_spim_xfer+0x11c>)
   109c4:	b111      	cbz	r1, 109cc <nrfx_spim_xfer+0xfc>
    p_reg->OUTCLR = clr_mask;
   109c6:	60d3      	str	r3, [r2, #12]
    return err_code;
   109c8:	480a      	ldr	r0, [pc, #40]	; (109f4 <nrfx_spim_xfer+0x124>)
   109ca:	e7c0      	b.n	1094e <nrfx_spim_xfer+0x7e>
    p_reg->OUTSET = set_mask;
   109cc:	6093      	str	r3, [r2, #8]
   109ce:	e7fb      	b.n	109c8 <nrfx_spim_xfer+0xf8>
    if (!enable)
   109d0:	2240      	movs	r2, #64	; 0x40
   109d2:	f014 0f04 	tst.w	r4, #4
    p_reg->INTENCLR = mask;
   109d6:	bf14      	ite	ne
   109d8:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   109dc:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   109e0:	e7f2      	b.n	109c8 <nrfx_spim_xfer+0xf8>
        return err_code;
   109e2:	4805      	ldr	r0, [pc, #20]	; (109f8 <nrfx_spim_xfer+0x128>)
   109e4:	e7b3      	b.n	1094e <nrfx_spim_xfer+0x7e>
   109e6:	bf00      	nop
   109e8:	200106f0 	.word	0x200106f0
   109ec:	40842500 	.word	0x40842500
   109f0:	0bad000a 	.word	0x0bad000a
   109f4:	0bad0000 	.word	0x0bad0000
   109f8:	0bad000b 	.word	0x0bad000b

000109fc <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   109fc:	4b0f      	ldr	r3, [pc, #60]	; (10a3c <nrfx_spim_3_irq_handler+0x40>)
   109fe:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
        nrf_spim_task_trigger(p_spim, NRF_SPIM_TASK_START);
        return;
    }
#endif

    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   10a02:	b1ca      	cbz	r2, 10a38 <nrfx_spim_3_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10a04:	2200      	movs	r2, #0
   10a06:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   10a0a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   10a0e:	4b0c      	ldr	r3, [pc, #48]	; (10a40 <nrfx_spim_3_irq_handler+0x44>)
   10a10:	7fda      	ldrb	r2, [r3, #31]
   10a12:	2aff      	cmp	r2, #255	; 0xff
   10a14:	d007      	beq.n	10a26 <nrfx_spim_3_irq_handler+0x2a>
            if (p_cb->ss_active_high)
   10a16:	f002 011f 	and.w	r1, r2, #31
   10a1a:	2201      	movs	r2, #1
   10a1c:	7f98      	ldrb	r0, [r3, #30]
   10a1e:	408a      	lsls	r2, r1
   10a20:	4908      	ldr	r1, [pc, #32]	; (10a44 <nrfx_spim_3_irq_handler+0x48>)
   10a22:	b138      	cbz	r0, 10a34 <nrfx_spim_3_irq_handler+0x38>
    p_reg->OUTCLR = clr_mask;
   10a24:	60ca      	str	r2, [r1, #12]
    p_cb->transfer_in_progress = false;
   10a26:	2200      	movs	r2, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   10a28:	4807      	ldr	r0, [pc, #28]	; (10a48 <nrfx_spim_3_irq_handler+0x4c>)
    p_cb->transfer_in_progress = false;
   10a2a:	775a      	strb	r2, [r3, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   10a2c:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   10a2e:	e9d3 2100 	ldrd	r2, r1, [r3]
   10a32:	4710      	bx	r2
    p_reg->OUTSET = set_mask;
   10a34:	608a      	str	r2, [r1, #8]
}
   10a36:	e7f6      	b.n	10a26 <nrfx_spim_3_irq_handler+0x2a>

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   10a38:	4770      	bx	lr
   10a3a:	bf00      	nop
   10a3c:	4000b000 	.word	0x4000b000
   10a40:	200106f0 	.word	0x200106f0
   10a44:	40842500 	.word	0x40842500
   10a48:	200106f8 	.word	0x200106f8

00010a4c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   10a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10a4e:	4b10      	ldr	r3, [pc, #64]	; (10a90 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   10a50:	4f10      	ldr	r7, [pc, #64]	; (10a94 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10a52:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   10a56:	3001      	adds	r0, #1
   10a58:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   10a5c:	42ae      	cmp	r6, r5
   10a5e:	d800      	bhi.n	10a62 <z_sys_init_run_level+0x16>
		}
	}
}
   10a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   10a62:	e9d5 3400 	ldrd	r3, r4, [r5]
   10a66:	4620      	mov	r0, r4
   10a68:	4798      	blx	r3
   10a6a:	b170      	cbz	r0, 10a8a <z_sys_init_run_level+0x3e>
   10a6c:	b16c      	cbz	r4, 10a8a <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   10a6e:	2301      	movs	r3, #1
				(dev - __device_start));
   10a70:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   10a72:	4a09      	ldr	r2, [pc, #36]	; (10a98 <z_sys_init_run_level+0x4c>)
   10a74:	1124      	asrs	r4, r4, #4
   10a76:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   10a78:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   10a7c:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   10a80:	fa03 f404 	lsl.w	r4, r3, r4
   10a84:	4304      	orrs	r4, r0
   10a86:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10a8a:	3508      	adds	r5, #8
   10a8c:	e7e6      	b.n	10a5c <z_sys_init_run_level+0x10>
   10a8e:	bf00      	nop
   10a90:	00014608 	.word	0x00014608
   10a94:	200100bc 	.word	0x200100bc
   10a98:	2001011c 	.word	0x2001011c

00010a9c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   10a9c:	4b08      	ldr	r3, [pc, #32]	; (10ac0 <z_device_ready+0x24>)
   10a9e:	1ac0      	subs	r0, r0, r3
   10aa0:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   10aa2:	4b08      	ldr	r3, [pc, #32]	; (10ac4 <z_device_ready+0x28>)
   10aa4:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   10aa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   10aaa:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   10aac:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   10ab0:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   10ab4:	4210      	tst	r0, r2
}
   10ab6:	bf0c      	ite	eq
   10ab8:	4618      	moveq	r0, r3
   10aba:	2000      	movne	r0, #0
   10abc:	4770      	bx	lr
   10abe:	bf00      	nop
   10ac0:	200100bc 	.word	0x200100bc
   10ac4:	2001011c 	.word	0x2001011c

00010ac8 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   10ac8:	4911      	ldr	r1, [pc, #68]	; (10b10 <z_impl_device_get_binding+0x48>)
{
   10aca:	b570      	push	{r4, r5, r6, lr}
   10acc:	4605      	mov	r5, r0
   10ace:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   10ad0:	4c10      	ldr	r4, [pc, #64]	; (10b14 <z_impl_device_get_binding+0x4c>)
   10ad2:	428c      	cmp	r4, r1
   10ad4:	d104      	bne.n	10ae0 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   10ad6:	4c0f      	ldr	r4, [pc, #60]	; (10b14 <z_impl_device_get_binding+0x4c>)
   10ad8:	42b4      	cmp	r4, r6
   10ada:	d10a      	bne.n	10af2 <z_impl_device_get_binding+0x2a>
	return NULL;
   10adc:	2400      	movs	r4, #0
   10ade:	e014      	b.n	10b0a <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   10ae0:	4620      	mov	r0, r4
   10ae2:	f7ff ffdb 	bl	10a9c <z_device_ready>
   10ae6:	b110      	cbz	r0, 10aee <z_impl_device_get_binding+0x26>
   10ae8:	6823      	ldr	r3, [r4, #0]
   10aea:	42ab      	cmp	r3, r5
   10aec:	d00d      	beq.n	10b0a <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   10aee:	3410      	adds	r4, #16
   10af0:	e7ef      	b.n	10ad2 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   10af2:	4620      	mov	r0, r4
   10af4:	f7ff ffd2 	bl	10a9c <z_device_ready>
   10af8:	b908      	cbnz	r0, 10afe <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   10afa:	3410      	adds	r4, #16
   10afc:	e7ec      	b.n	10ad8 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   10afe:	4628      	mov	r0, r5
   10b00:	6821      	ldr	r1, [r4, #0]
   10b02:	f001 fed1 	bl	128a8 <strcmp>
   10b06:	2800      	cmp	r0, #0
   10b08:	d1f7      	bne.n	10afa <z_impl_device_get_binding+0x32>
}
   10b0a:	4620      	mov	r0, r4
   10b0c:	bd70      	pop	{r4, r5, r6, pc}
   10b0e:	bf00      	nop
   10b10:	2001011c 	.word	0x2001011c
   10b14:	200100bc 	.word	0x200100bc

00010b18 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10b18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10b1c:	4605      	mov	r5, r0
   10b1e:	460f      	mov	r7, r1
   10b20:	f04f 0320 	mov.w	r3, #32
   10b24:	f3ef 8811 	mrs	r8, BASEPRI
   10b28:	f383 8811 	msr	BASEPRI, r3
   10b2c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   10b30:	f000 fdd2 	bl	116d8 <z_impl_k_current_get>
   10b34:	4c22      	ldr	r4, [pc, #136]	; (10bc0 <z_fatal_error+0xa8>)
   10b36:	4b23      	ldr	r3, [pc, #140]	; (10bc4 <z_fatal_error+0xac>)
   10b38:	2d04      	cmp	r5, #4
   10b3a:	eba4 0403 	sub.w	r4, r4, r3
   10b3e:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   10b42:	bf98      	it	ls
   10b44:	4a20      	ldrls	r2, [pc, #128]	; (10bc8 <z_fatal_error+0xb0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   10b46:	ea4f 1484 	mov.w	r4, r4, lsl #6
   10b4a:	f044 0301 	orr.w	r3, r4, #1
   10b4e:	4606      	mov	r6, r0
	switch (reason) {
   10b50:	bf94      	ite	ls
   10b52:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   10b56:	4a1d      	ldrhi	r2, [pc, #116]	; (10bcc <z_fatal_error+0xb4>)
   10b58:	f8ad 3000 	strh.w	r3, [sp]
   10b5c:	4629      	mov	r1, r5
   10b5e:	2300      	movs	r3, #0
   10b60:	481b      	ldr	r0, [pc, #108]	; (10bd0 <z_fatal_error+0xb8>)
   10b62:	f001 fb0d 	bl	12180 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   10b66:	b147      	cbz	r7, 10b7a <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   10b68:	69fb      	ldr	r3, [r7, #28]
   10b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   10b6e:	b123      	cbz	r3, 10b7a <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   10b70:	4818      	ldr	r0, [pc, #96]	; (10bd4 <z_fatal_error+0xbc>)
   10b72:	f044 0101 	orr.w	r1, r4, #1
   10b76:	f001 fac9 	bl	1210c <log_0>
	const char *thread_name = k_thread_name_get(thread);
   10b7a:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   10b7c:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   10b80:	f003 fa42 	bl	14008 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   10b84:	b1d0      	cbz	r0, 10bbc <z_fatal_error+0xa4>
   10b86:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   10b88:	4b13      	ldr	r3, [pc, #76]	; (10bd8 <z_fatal_error+0xc0>)
   10b8a:	2a00      	cmp	r2, #0
   10b8c:	bf08      	it	eq
   10b8e:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   10b90:	f7fc f8ec 	bl	cd6c <log_strdup>
   10b94:	4623      	mov	r3, r4
   10b96:	4602      	mov	r2, r0
   10b98:	4631      	mov	r1, r6
   10b9a:	4810      	ldr	r0, [pc, #64]	; (10bdc <z_fatal_error+0xc4>)
   10b9c:	f001 fad7 	bl	1214e <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   10ba0:	4639      	mov	r1, r7
   10ba2:	4628      	mov	r0, r5
   10ba4:	f7fe ff1a 	bl	f9dc <k_sys_fatal_error_handler>
	__asm__ volatile(
   10ba8:	f388 8811 	msr	BASEPRI, r8
   10bac:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   10bb0:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   10bb2:	b002      	add	sp, #8
   10bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10bb8:	f7fd bbc6 	b.w	e348 <z_impl_k_thread_abort>
		thread_name = "unknown";
   10bbc:	4806      	ldr	r0, [pc, #24]	; (10bd8 <z_fatal_error+0xc0>)
   10bbe:	e7e7      	b.n	10b90 <z_fatal_error+0x78>
   10bc0:	000143cc 	.word	0x000143cc
   10bc4:	00014394 	.word	0x00014394
   10bc8:	00014620 	.word	0x00014620
   10bcc:	000150a2 	.word	0x000150a2
   10bd0:	000150b8 	.word	0x000150b8
   10bd4:	000150e0 	.word	0x000150e0
   10bd8:	000150b0 	.word	0x000150b0
   10bdc:	00015101 	.word	0x00015101

00010be0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   10be0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   10be2:	4d0b      	ldr	r5, [pc, #44]	; (10c10 <idle+0x30>)
	__asm__ volatile(
   10be4:	f04f 0220 	mov.w	r2, #32
   10be8:	f3ef 8311 	mrs	r3, BASEPRI
   10bec:	f382 8811 	msr	BASEPRI, r2
   10bf0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   10bf4:	f003 fa20 	bl	14038 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   10bf8:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   10bfa:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   10bfc:	2802      	cmp	r0, #2
   10bfe:	bfd8      	it	le
   10c00:	4608      	movle	r0, r1
   10c02:	f003 fa29 	bl	14058 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   10c06:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   10c08:	f7fd f89e 	bl	dd48 <arch_cpu_idle>
}
   10c0c:	e7ea      	b.n	10be4 <idle+0x4>
   10c0e:	bf00      	nop
   10c10:	20010714 	.word	0x20010714

00010c14 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   10c14:	4802      	ldr	r0, [pc, #8]	; (10c20 <z_bss_zero+0xc>)
   10c16:	4a03      	ldr	r2, [pc, #12]	; (10c24 <z_bss_zero+0x10>)
   10c18:	2100      	movs	r1, #0
   10c1a:	1a12      	subs	r2, r2, r0
   10c1c:	f001 be9a 	b.w	12954 <memset>
   10c20:	20010168 	.word	0x20010168
   10c24:	2001075c 	.word	0x2001075c

00010c28 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   10c28:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   10c2a:	4806      	ldr	r0, [pc, #24]	; (10c44 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   10c2c:	4a06      	ldr	r2, [pc, #24]	; (10c48 <z_data_copy+0x20>)
   10c2e:	4907      	ldr	r1, [pc, #28]	; (10c4c <z_data_copy+0x24>)
   10c30:	1a12      	subs	r2, r2, r0
   10c32:	f001 fe64 	bl	128fe <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   10c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   10c3a:	4a05      	ldr	r2, [pc, #20]	; (10c50 <z_data_copy+0x28>)
   10c3c:	4905      	ldr	r1, [pc, #20]	; (10c54 <z_data_copy+0x2c>)
   10c3e:	4806      	ldr	r0, [pc, #24]	; (10c58 <z_data_copy+0x30>)
   10c40:	f001 be5d 	b.w	128fe <memcpy>
   10c44:	20010000 	.word	0x20010000
   10c48:	20010168 	.word	0x20010168
   10c4c:	000151a0 	.word	0x000151a0
   10c50:	00000000 	.word	0x00000000
   10c54:	000151a0 	.word	0x000151a0
   10c58:	20010000 	.word	0x20010000

00010c5c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   10c5c:	2201      	movs	r2, #1
{
   10c5e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   10c60:	4b0b      	ldr	r3, [pc, #44]	; (10c90 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10c62:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   10c64:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10c66:	f7ff fef1 	bl	10a4c <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   10c6a:	4a0a      	ldr	r2, [pc, #40]	; (10c94 <bg_thread_main+0x38>)
   10c6c:	490a      	ldr	r1, [pc, #40]	; (10c98 <bg_thread_main+0x3c>)
   10c6e:	480b      	ldr	r0, [pc, #44]	; (10c9c <bg_thread_main+0x40>)
   10c70:	f001 f85b 	bl	11d2a <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   10c74:	2003      	movs	r0, #3
   10c76:	f7ff fee9 	bl	10a4c <z_sys_init_run_level>

	z_init_static_threads();
   10c7a:	f000 fdd9 	bl	11830 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   10c7e:	f7fb fc5b 	bl	c538 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   10c82:	4a07      	ldr	r2, [pc, #28]	; (10ca0 <bg_thread_main+0x44>)
   10c84:	7b13      	ldrb	r3, [r2, #12]
   10c86:	f023 0301 	bic.w	r3, r3, #1
   10c8a:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   10c8c:	bd08      	pop	{r3, pc}
   10c8e:	bf00      	nop
   10c90:	2001075b 	.word	0x2001075b
   10c94:	00015040 	.word	0x00015040
   10c98:	00015163 	.word	0x00015163
   10c9c:	0001516f 	.word	0x0001516f
   10ca0:	200102a0 	.word	0x200102a0

00010ca4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   10ca4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   10ca8:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   10caa:	f7fb ffc3 	bl	cc34 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   10cae:	4b34      	ldr	r3, [pc, #208]	; (10d80 <z_cstart+0xdc>)
	uint32_t msp =
   10cb0:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   10cb4:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   10cb8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10cbc:	2400      	movs	r4, #0
   10cbe:	23e0      	movs	r3, #224	; 0xe0
   10cc0:	4d30      	ldr	r5, [pc, #192]	; (10d84 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10cc2:	f04f 0b01 	mov.w	fp, #1
   10cc6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   10cca:	77ec      	strb	r4, [r5, #31]
   10ccc:	762c      	strb	r4, [r5, #24]
   10cce:	766c      	strb	r4, [r5, #25]
   10cd0:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   10cd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   10cd4:	4e2c      	ldr	r6, [pc, #176]	; (10d88 <z_cstart+0xe4>)
   10cd6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   10cda:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   10cdc:	f7fd fafc 	bl	e2d8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   10ce0:	f7fd f82c 	bl	dd3c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   10ce4:	f04f 33ff 	mov.w	r3, #4294967295
   10ce8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   10cea:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   10cec:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   10cf0:	4d26      	ldr	r5, [pc, #152]	; (10d8c <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   10cf2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   10cf6:	ab06      	add	r3, sp, #24
   10cf8:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   10cfa:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   10cfc:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   10d00:	f7ff fea4 	bl	10a4c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   10d04:	2001      	movs	r0, #1
   10d06:	f7ff fea1 	bl	10a4c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10d0a:	f8df a098 	ldr.w	sl, [pc, #152]	; 10da4 <z_cstart+0x100>
	z_sched_init();
   10d0e:	f000 fc69 	bl	115e4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10d12:	4b1f      	ldr	r3, [pc, #124]	; (10d90 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   10d14:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10d16:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10d1a:	491e      	ldr	r1, [pc, #120]	; (10d94 <z_cstart+0xf0>)
   10d1c:	9305      	str	r3, [sp, #20]
   10d1e:	4630      	mov	r0, r6
   10d20:	4653      	mov	r3, sl
   10d22:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   10d26:	e9cd 4401 	strd	r4, r4, [sp, #4]
   10d2a:	9400      	str	r4, [sp, #0]
   10d2c:	f000 fd24 	bl	11778 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10d30:	7b73      	ldrb	r3, [r6, #13]
   10d32:	4680      	mov	r8, r0
   10d34:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   10d38:	4630      	mov	r0, r6
   10d3a:	7373      	strb	r3, [r6, #13]
   10d3c:	f003 f8d9 	bl	13ef2 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   10d40:	230f      	movs	r3, #15
   10d42:	4f15      	ldr	r7, [pc, #84]	; (10d98 <z_cstart+0xf4>)
   10d44:	f44f 72a0 	mov.w	r2, #320	; 0x140
   10d48:	e9cd 4302 	strd	r4, r3, [sp, #8]
   10d4c:	4913      	ldr	r1, [pc, #76]	; (10d9c <z_cstart+0xf8>)
   10d4e:	4b14      	ldr	r3, [pc, #80]	; (10da0 <z_cstart+0xfc>)
   10d50:	4638      	mov	r0, r7
   10d52:	e9cd b404 	strd	fp, r4, [sp, #16]
   10d56:	e9cd 4400 	strd	r4, r4, [sp]
   10d5a:	f000 fd0d 	bl	11778 <z_setup_new_thread>
   10d5e:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   10d60:	4652      	mov	r2, sl
   10d62:	f023 0304 	bic.w	r3, r3, #4
   10d66:	737b      	strb	r3, [r7, #13]
	list->head = (sys_dnode_t *)list;
   10d68:	f105 0318 	add.w	r3, r5, #24
   10d6c:	4641      	mov	r1, r8
   10d6e:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   10d70:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   10d74:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   10d76:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   10d78:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   10d7c:	f7fc ffc4 	bl	dd08 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   10d80:	200113a0 	.word	0x200113a0
   10d84:	e000ed00 	.word	0xe000ed00
   10d88:	200102a0 	.word	0x200102a0
   10d8c:	20010714 	.word	0x20010714
   10d90:	0001474c 	.word	0x0001474c
   10d94:	20010a60 	.word	0x20010a60
   10d98:	20010220 	.word	0x20010220
   10d9c:	20011260 	.word	0x20011260
   10da0:	00010be1 	.word	0x00010be1
   10da4:	00010c5d 	.word	0x00010c5d

00010da8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   10da8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   10daa:	4b0e      	ldr	r3, [pc, #56]	; (10de4 <init_mem_slab_module+0x3c>)
   10dac:	4c0e      	ldr	r4, [pc, #56]	; (10de8 <init_mem_slab_module+0x40>)
   10dae:	42a3      	cmp	r3, r4
   10db0:	d301      	bcc.n	10db6 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   10db2:	2000      	movs	r0, #0
	return rc;
}
   10db4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   10db6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   10dba:	ea41 0200 	orr.w	r2, r1, r0
   10dbe:	f012 0203 	ands.w	r2, r2, #3
   10dc2:	d10b      	bne.n	10ddc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   10dc4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   10dc6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   10dc8:	42aa      	cmp	r2, r5
   10dca:	d101      	bne.n	10dd0 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   10dcc:	331c      	adds	r3, #28
   10dce:	e7ee      	b.n	10dae <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   10dd0:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   10dd2:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   10dd4:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   10dd6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   10dd8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   10dda:	e7f5      	b.n	10dc8 <init_mem_slab_module+0x20>
		return -EINVAL;
   10ddc:	f06f 0015 	mvn.w	r0, #21
	return rc;
   10de0:	e7e8      	b.n	10db4 <init_mem_slab_module+0xc>
   10de2:	bf00      	nop
   10de4:	20010120 	.word	0x20010120
   10de8:	20010158 	.word	0x20010158

00010dec <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   10dec:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   10dee:	460c      	mov	r4, r1
   10df0:	4616      	mov	r6, r2
   10df2:	461f      	mov	r7, r3
   10df4:	f04f 0320 	mov.w	r3, #32
   10df8:	f3ef 8111 	mrs	r1, BASEPRI
   10dfc:	f383 8811 	msr	BASEPRI, r3
   10e00:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   10e04:	6943      	ldr	r3, [r0, #20]
   10e06:	b15b      	cbz	r3, 10e20 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   10e08:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   10e0a:	681b      	ldr	r3, [r3, #0]
   10e0c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   10e0e:	6983      	ldr	r3, [r0, #24]
   10e10:	3301      	adds	r3, #1
   10e12:	6183      	str	r3, [r0, #24]
		result = 0;
   10e14:	2000      	movs	r0, #0
	__asm__ volatile(
   10e16:	f381 8811 	msr	BASEPRI, r1
   10e1a:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   10e1e:	e011      	b.n	10e44 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10e20:	ea56 0207 	orrs.w	r2, r6, r7
   10e24:	d103      	bne.n	10e2e <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   10e26:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   10e2a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   10e2c:	e7f3      	b.n	10e16 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   10e2e:	4602      	mov	r2, r0
   10e30:	e9cd 6700 	strd	r6, r7, [sp]
   10e34:	4804      	ldr	r0, [pc, #16]	; (10e48 <k_mem_slab_alloc+0x5c>)
   10e36:	f000 fb4f 	bl	114d8 <z_pend_curr>
		if (result == 0) {
   10e3a:	b918      	cbnz	r0, 10e44 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   10e3c:	4b03      	ldr	r3, [pc, #12]	; (10e4c <k_mem_slab_alloc+0x60>)
   10e3e:	689b      	ldr	r3, [r3, #8]
   10e40:	695b      	ldr	r3, [r3, #20]
   10e42:	6023      	str	r3, [r4, #0]
}
   10e44:	b002      	add	sp, #8
   10e46:	bdd0      	pop	{r4, r6, r7, pc}
   10e48:	2001075c 	.word	0x2001075c
   10e4c:	20010714 	.word	0x20010714

00010e50 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   10e50:	b570      	push	{r4, r5, r6, lr}
   10e52:	4604      	mov	r4, r0
   10e54:	460d      	mov	r5, r1
	__asm__ volatile(
   10e56:	f04f 0320 	mov.w	r3, #32
   10e5a:	f3ef 8611 	mrs	r6, BASEPRI
   10e5e:	f383 8811 	msr	BASEPRI, r3
   10e62:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   10e66:	f003 f89f 	bl	13fa8 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   10e6a:	b158      	cbz	r0, 10e84 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   10e6c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   10e6e:	682a      	ldr	r2, [r5, #0]
   10e70:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   10e72:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   10e74:	f003 f83d 	bl	13ef2 <z_ready_thread>
		z_reschedule(&lock, key);
   10e78:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   10e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   10e7e:	4808      	ldr	r0, [pc, #32]	; (10ea0 <k_mem_slab_free+0x50>)
   10e80:	f000 b910 	b.w	110a4 <z_reschedule>
		**(char ***)mem = slab->free_list;
   10e84:	682b      	ldr	r3, [r5, #0]
   10e86:	6962      	ldr	r2, [r4, #20]
   10e88:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   10e8a:	682b      	ldr	r3, [r5, #0]
   10e8c:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   10e8e:	69a3      	ldr	r3, [r4, #24]
   10e90:	3b01      	subs	r3, #1
   10e92:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   10e94:	f386 8811 	msr	BASEPRI, r6
   10e98:	f3bf 8f6f 	isb	sy
}
   10e9c:	bd70      	pop	{r4, r5, r6, pc}
   10e9e:	bf00      	nop
   10ea0:	2001075c 	.word	0x2001075c

00010ea4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   10ea4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10ea8:	4604      	mov	r4, r0
   10eaa:	4616      	mov	r6, r2
   10eac:	461f      	mov	r7, r3
	__asm__ volatile(
   10eae:	f04f 0320 	mov.w	r3, #32
   10eb2:	f3ef 8811 	mrs	r8, BASEPRI
   10eb6:	f383 8811 	msr	BASEPRI, r3
   10eba:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   10ebe:	68c3      	ldr	r3, [r0, #12]
   10ec0:	4a32      	ldr	r2, [pc, #200]	; (10f8c <z_impl_k_mutex_lock+0xe8>)
   10ec2:	b16b      	cbz	r3, 10ee0 <z_impl_k_mutex_lock+0x3c>
   10ec4:	6880      	ldr	r0, [r0, #8]
   10ec6:	6891      	ldr	r1, [r2, #8]
   10ec8:	4288      	cmp	r0, r1
   10eca:	d019      	beq.n	10f00 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   10ecc:	ea56 0307 	orrs.w	r3, r6, r7
   10ed0:	d118      	bne.n	10f04 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   10ed2:	f388 8811 	msr	BASEPRI, r8
   10ed6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   10eda:	f06f 000f 	mvn.w	r0, #15
   10ede:	e00c      	b.n	10efa <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   10ee0:	6891      	ldr	r1, [r2, #8]
   10ee2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   10ee6:	3301      	adds	r3, #1
   10ee8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   10eea:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   10eec:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   10eee:	60a3      	str	r3, [r4, #8]
   10ef0:	f388 8811 	msr	BASEPRI, r8
   10ef4:	f3bf 8f6f 	isb	sy
		return 0;
   10ef8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   10efa:	b002      	add	sp, #8
   10efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   10f00:	6921      	ldr	r1, [r4, #16]
   10f02:	e7f0      	b.n	10ee6 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   10f04:	f990 300e 	ldrsb.w	r3, [r0, #14]
   10f08:	f991 100e 	ldrsb.w	r1, [r1, #14]
   10f0c:	4299      	cmp	r1, r3
   10f0e:	bfa8      	it	ge
   10f10:	4619      	movge	r1, r3
   10f12:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   10f16:	428b      	cmp	r3, r1
   10f18:	dd2c      	ble.n	10f74 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   10f1a:	f000 fb1f 	bl	1155c <z_set_prio>
   10f1e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   10f20:	4622      	mov	r2, r4
   10f22:	4641      	mov	r1, r8
   10f24:	e9cd 6700 	strd	r6, r7, [sp]
   10f28:	4819      	ldr	r0, [pc, #100]	; (10f90 <z_impl_k_mutex_lock+0xec>)
   10f2a:	f000 fad5 	bl	114d8 <z_pend_curr>
	if (got_mutex == 0) {
   10f2e:	2800      	cmp	r0, #0
   10f30:	d0e3      	beq.n	10efa <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   10f32:	f04f 0320 	mov.w	r3, #32
   10f36:	f3ef 8611 	mrs	r6, BASEPRI
   10f3a:	f383 8811 	msr	BASEPRI, r3
   10f3e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   10f42:	6823      	ldr	r3, [r4, #0]
   10f44:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10f46:	42a3      	cmp	r3, r4
   10f48:	d007      	beq.n	10f5a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   10f4a:	b133      	cbz	r3, 10f5a <z_impl_k_mutex_lock+0xb6>
   10f4c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   10f50:	4299      	cmp	r1, r3
   10f52:	bfa8      	it	ge
   10f54:	4619      	movge	r1, r3
   10f56:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   10f5a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   10f5c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   10f60:	4299      	cmp	r1, r3
   10f62:	d109      	bne.n	10f78 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   10f64:	b16d      	cbz	r5, 10f82 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   10f66:	4631      	mov	r1, r6
   10f68:	4809      	ldr	r0, [pc, #36]	; (10f90 <z_impl_k_mutex_lock+0xec>)
   10f6a:	f000 f89b 	bl	110a4 <z_reschedule>
	return -EAGAIN;
   10f6e:	f06f 000a 	mvn.w	r0, #10
   10f72:	e7c2      	b.n	10efa <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   10f74:	2500      	movs	r5, #0
   10f76:	e7d3      	b.n	10f20 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   10f78:	f000 faf0 	bl	1155c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   10f7c:	2800      	cmp	r0, #0
   10f7e:	d1f2      	bne.n	10f66 <z_impl_k_mutex_lock+0xc2>
   10f80:	e7f0      	b.n	10f64 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   10f82:	f386 8811 	msr	BASEPRI, r6
   10f86:	f3bf 8f6f 	isb	sy
   10f8a:	e7f0      	b.n	10f6e <z_impl_k_mutex_lock+0xca>
   10f8c:	20010714 	.word	0x20010714
   10f90:	2001075c 	.word	0x2001075c

00010f94 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   10f94:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   10f96:	6883      	ldr	r3, [r0, #8]
{
   10f98:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   10f9a:	2b00      	cmp	r3, #0
   10f9c:	d036      	beq.n	1100c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   10f9e:	4a1e      	ldr	r2, [pc, #120]	; (11018 <z_impl_k_mutex_unlock+0x84>)
   10fa0:	6892      	ldr	r2, [r2, #8]
   10fa2:	4293      	cmp	r3, r2
   10fa4:	d135      	bne.n	11012 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   10fa6:	7bda      	ldrb	r2, [r3, #15]
   10fa8:	3a01      	subs	r2, #1
   10faa:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   10fac:	68c3      	ldr	r3, [r0, #12]
   10fae:	2b01      	cmp	r3, #1
   10fb0:	d005      	beq.n	10fbe <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   10fb2:	3b01      	subs	r3, #1
   10fb4:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   10fb6:	f000 f8d5 	bl	11164 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   10fba:	2000      	movs	r0, #0
}
   10fbc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   10fbe:	f04f 0320 	mov.w	r3, #32
   10fc2:	f3ef 8511 	mrs	r5, BASEPRI
   10fc6:	f383 8811 	msr	BASEPRI, r3
   10fca:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   10fce:	6901      	ldr	r1, [r0, #16]
   10fd0:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   10fd2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   10fd6:	4299      	cmp	r1, r3
   10fd8:	d001      	beq.n	10fde <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   10fda:	f000 fabf 	bl	1155c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   10fde:	4620      	mov	r0, r4
   10fe0:	f002 ffe2 	bl	13fa8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   10fe4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   10fe6:	b158      	cbz	r0, 11000 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   10fe8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   10fec:	6122      	str	r2, [r4, #16]
   10fee:	2200      	movs	r2, #0
   10ff0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   10ff2:	f002 ff7e 	bl	13ef2 <z_ready_thread>
		z_reschedule(&lock, key);
   10ff6:	4629      	mov	r1, r5
   10ff8:	4808      	ldr	r0, [pc, #32]	; (1101c <z_impl_k_mutex_unlock+0x88>)
   10ffa:	f000 f853 	bl	110a4 <z_reschedule>
   10ffe:	e7da      	b.n	10fb6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   11000:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11002:	f385 8811 	msr	BASEPRI, r5
   11006:	f3bf 8f6f 	isb	sy
   1100a:	e7d4      	b.n	10fb6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1100c:	f06f 0015 	mvn.w	r0, #21
   11010:	e7d4      	b.n	10fbc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   11012:	f04f 30ff 	mov.w	r0, #4294967295
   11016:	e7d1      	b.n	10fbc <z_impl_k_mutex_unlock+0x28>
   11018:	20010714 	.word	0x20010714
   1101c:	2001075c 	.word	0x2001075c

00011020 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   11020:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   11022:	4c08      	ldr	r4, [pc, #32]	; (11044 <z_reset_time_slice+0x24>)
   11024:	6823      	ldr	r3, [r4, #0]
   11026:	b15b      	cbz	r3, 11040 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   11028:	f7fc fd94 	bl	db54 <z_clock_elapsed>
   1102c:	4603      	mov	r3, r0
   1102e:	6820      	ldr	r0, [r4, #0]
   11030:	4a05      	ldr	r2, [pc, #20]	; (11048 <z_reset_time_slice+0x28>)
   11032:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   11034:	2100      	movs	r1, #0
	}
}
   11036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1103a:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1103c:	f003 b80c 	b.w	14058 <z_set_timeout_expiry>
}
   11040:	bd10      	pop	{r4, pc}
   11042:	bf00      	nop
   11044:	2001074c 	.word	0x2001074c
   11048:	20010714 	.word	0x20010714

0001104c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1104e:	4605      	mov	r5, r0
   11050:	460c      	mov	r4, r1
	__asm__ volatile(
   11052:	f04f 0320 	mov.w	r3, #32
   11056:	f3ef 8611 	mrs	r6, BASEPRI
   1105a:	f383 8811 	msr	BASEPRI, r3
   1105e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   11062:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   11064:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   11068:	f240 30e7 	movw	r0, #999	; 0x3e7
   1106c:	2100      	movs	r1, #0
   1106e:	4b0a      	ldr	r3, [pc, #40]	; (11098 <k_sched_time_slice_set+0x4c>)
   11070:	fbe7 0105 	umlal	r0, r1, r7, r5
   11074:	611a      	str	r2, [r3, #16]
   11076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1107a:	2300      	movs	r3, #0
   1107c:	f7fb f8de 	bl	c23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   11080:	4b06      	ldr	r3, [pc, #24]	; (1109c <k_sched_time_slice_set+0x50>)
   11082:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   11084:	4b06      	ldr	r3, [pc, #24]	; (110a0 <k_sched_time_slice_set+0x54>)
   11086:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   11088:	f7ff ffca 	bl	11020 <z_reset_time_slice>
	__asm__ volatile(
   1108c:	f386 8811 	msr	BASEPRI, r6
   11090:	f3bf 8f6f 	isb	sy
	}
}
   11094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11096:	bf00      	nop
   11098:	20010714 	.word	0x20010714
   1109c:	2001074c 	.word	0x2001074c
   110a0:	20010748 	.word	0x20010748

000110a4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   110a4:	b949      	cbnz	r1, 110ba <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   110a6:	f3ef 8005 	mrs	r0, IPSR
   110aa:	b930      	cbnz	r0, 110ba <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   110ac:	4b05      	ldr	r3, [pc, #20]	; (110c4 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   110ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   110b0:	689b      	ldr	r3, [r3, #8]
   110b2:	429a      	cmp	r2, r3
   110b4:	d001      	beq.n	110ba <z_reschedule+0x16>
	ret = arch_swap(key);
   110b6:	f7fc bd81 	b.w	dbbc <arch_swap>
   110ba:	f381 8811 	msr	BASEPRI, r1
   110be:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   110c2:	4770      	bx	lr
   110c4:	20010714 	.word	0x20010714

000110c8 <k_sched_lock>:
	__asm__ volatile(
   110c8:	f04f 0320 	mov.w	r3, #32
   110cc:	f3ef 8111 	mrs	r1, BASEPRI
   110d0:	f383 8811 	msr	BASEPRI, r3
   110d4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   110d8:	4b04      	ldr	r3, [pc, #16]	; (110ec <k_sched_lock+0x24>)
   110da:	689a      	ldr	r2, [r3, #8]
   110dc:	7bd3      	ldrb	r3, [r2, #15]
   110de:	3b01      	subs	r3, #1
   110e0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   110e2:	f381 8811 	msr	BASEPRI, r1
   110e6:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   110ea:	4770      	bx	lr
   110ec:	20010714 	.word	0x20010714

000110f0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   110f0:	4b09      	ldr	r3, [pc, #36]	; (11118 <z_priq_dumb_remove+0x28>)
   110f2:	f103 0228 	add.w	r2, r3, #40	; 0x28
   110f6:	4282      	cmp	r2, r0
   110f8:	d105      	bne.n	11106 <z_priq_dumb_remove+0x16>
   110fa:	689b      	ldr	r3, [r3, #8]
   110fc:	428b      	cmp	r3, r1
   110fe:	d102      	bne.n	11106 <z_priq_dumb_remove+0x16>
   11100:	7b4b      	ldrb	r3, [r1, #13]
   11102:	06db      	lsls	r3, r3, #27
   11104:	d106      	bne.n	11114 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   11106:	e9d1 3200 	ldrd	r3, r2, [r1]
   1110a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1110c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1110e:	2300      	movs	r3, #0
	node->prev = NULL;
   11110:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   11114:	4770      	bx	lr
   11116:	bf00      	nop
   11118:	20010714 	.word	0x20010714

0001111c <update_cache>:
{
   1111c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1111e:	4c10      	ldr	r4, [pc, #64]	; (11160 <update_cache+0x44>)
{
   11120:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   11122:	f104 0028 	add.w	r0, r4, #40	; 0x28
   11126:	f002 feda 	bl	13ede <z_priq_dumb_best>
   1112a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1112c:	68a3      	ldr	r3, [r4, #8]
   1112e:	7b59      	ldrb	r1, [r3, #13]
   11130:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   11132:	bf44      	itt	mi
   11134:	f041 0108 	orrmi.w	r1, r1, #8
   11138:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1113a:	b905      	cbnz	r5, 1113e <update_cache+0x22>
   1113c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1113e:	b94e      	cbnz	r6, 11154 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   11140:	7b5a      	ldrb	r2, [r3, #13]
   11142:	06d2      	lsls	r2, r2, #27
   11144:	d106      	bne.n	11154 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   11146:	69aa      	ldr	r2, [r5, #24]
   11148:	b922      	cbnz	r2, 11154 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1114a:	89da      	ldrh	r2, [r3, #14]
   1114c:	2a7f      	cmp	r2, #127	; 0x7f
   1114e:	d901      	bls.n	11154 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   11150:	6263      	str	r3, [r4, #36]	; 0x24
}
   11152:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   11154:	42ab      	cmp	r3, r5
   11156:	d001      	beq.n	1115c <update_cache+0x40>
			z_reset_time_slice();
   11158:	f7ff ff62 	bl	11020 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1115c:	6265      	str	r5, [r4, #36]	; 0x24
}
   1115e:	e7f8      	b.n	11152 <update_cache+0x36>
   11160:	20010714 	.word	0x20010714

00011164 <k_sched_unlock>:
{
   11164:	b510      	push	{r4, lr}
	__asm__ volatile(
   11166:	f04f 0320 	mov.w	r3, #32
   1116a:	f3ef 8411 	mrs	r4, BASEPRI
   1116e:	f383 8811 	msr	BASEPRI, r3
   11172:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   11176:	4b08      	ldr	r3, [pc, #32]	; (11198 <k_sched_unlock+0x34>)
		update_cache(0);
   11178:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1117a:	689a      	ldr	r2, [r3, #8]
   1117c:	7bd3      	ldrb	r3, [r2, #15]
   1117e:	3301      	adds	r3, #1
   11180:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   11182:	f7ff ffcb 	bl	1111c <update_cache>
	__asm__ volatile(
   11186:	f384 8811 	msr	BASEPRI, r4
   1118a:	f3bf 8f6f 	isb	sy
}
   1118e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   11192:	f002 be8e 	b.w	13eb2 <z_reschedule_unlocked>
   11196:	bf00      	nop
   11198:	20010714 	.word	0x20010714

0001119c <ready_thread>:
{
   1119c:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1119e:	7b43      	ldrb	r3, [r0, #13]
   111a0:	06db      	lsls	r3, r3, #27
   111a2:	d12a      	bne.n	111fa <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   111a4:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   111a6:	bb43      	cbnz	r3, 111fa <ready_thread+0x5e>
	return list->head == list;
   111a8:	4a15      	ldr	r2, [pc, #84]	; (11200 <ready_thread+0x64>)
   111aa:	4611      	mov	r1, r2
   111ac:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   111b0:	428c      	cmp	r4, r1
   111b2:	bf18      	it	ne
   111b4:	4623      	movne	r3, r4
   111b6:	2b00      	cmp	r3, #0
   111b8:	bf38      	it	cc
   111ba:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   111bc:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   111be:	b1b3      	cbz	r3, 111ee <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   111c0:	f990 600e 	ldrsb.w	r6, [r0, #14]
   111c4:	f993 500e 	ldrsb.w	r5, [r3, #14]
   111c8:	42ae      	cmp	r6, r5
   111ca:	db03      	blt.n	111d4 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   111cc:	42a3      	cmp	r3, r4
   111ce:	d00e      	beq.n	111ee <ready_thread+0x52>
   111d0:	681b      	ldr	r3, [r3, #0]
   111d2:	e7f4      	b.n	111be <ready_thread+0x22>
	node->prev = successor->prev;
   111d4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   111d6:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   111da:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   111dc:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   111de:	7b43      	ldrb	r3, [r0, #13]
   111e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   111e4:	7343      	strb	r3, [r0, #13]
}
   111e6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   111e8:	2000      	movs	r0, #0
   111ea:	f7ff bf97 	b.w	1111c <update_cache>
	node->prev = list->tail;
   111ee:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   111f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   111f4:	6018      	str	r0, [r3, #0]
	list->tail = node;
   111f6:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   111f8:	e7f1      	b.n	111de <ready_thread+0x42>
}
   111fa:	bc70      	pop	{r4, r5, r6}
   111fc:	4770      	bx	lr
   111fe:	bf00      	nop
   11200:	20010714 	.word	0x20010714

00011204 <z_sched_start>:
{
   11204:	b510      	push	{r4, lr}
	__asm__ volatile(
   11206:	f04f 0220 	mov.w	r2, #32
   1120a:	f3ef 8411 	mrs	r4, BASEPRI
   1120e:	f382 8811 	msr	BASEPRI, r2
   11212:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   11216:	7b42      	ldrb	r2, [r0, #13]
   11218:	0751      	lsls	r1, r2, #29
   1121a:	d404      	bmi.n	11226 <z_sched_start+0x22>
	__asm__ volatile(
   1121c:	f384 8811 	msr	BASEPRI, r4
   11220:	f3bf 8f6f 	isb	sy
}
   11224:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11226:	f022 0204 	bic.w	r2, r2, #4
   1122a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1122c:	f7ff ffb6 	bl	1119c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   11230:	4621      	mov	r1, r4
}
   11232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   11236:	4801      	ldr	r0, [pc, #4]	; (1123c <z_sched_start+0x38>)
   11238:	f7ff bf34 	b.w	110a4 <z_reschedule>
   1123c:	2001075c 	.word	0x2001075c

00011240 <move_thread_to_end_of_prio_q>:
{
   11240:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   11242:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   11246:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   11248:	2b00      	cmp	r3, #0
   1124a:	da02      	bge.n	11252 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1124c:	4817      	ldr	r0, [pc, #92]	; (112ac <move_thread_to_end_of_prio_q+0x6c>)
   1124e:	f7ff ff4f 	bl	110f0 <z_priq_dumb_remove>
	return list->head == list;
   11252:	4a17      	ldr	r2, [pc, #92]	; (112b0 <move_thread_to_end_of_prio_q+0x70>)
   11254:	4610      	mov	r0, r2
   11256:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1125a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1125c:	4283      	cmp	r3, r0
   1125e:	bf08      	it	eq
   11260:	2300      	moveq	r3, #0
   11262:	2b00      	cmp	r3, #0
   11264:	bf38      	it	cc
   11266:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11268:	b1d3      	cbz	r3, 112a0 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1126a:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1126e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   11272:	42ae      	cmp	r6, r5
   11274:	db03      	blt.n	1127e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   11276:	42a3      	cmp	r3, r4
   11278:	d012      	beq.n	112a0 <move_thread_to_end_of_prio_q+0x60>
   1127a:	681b      	ldr	r3, [r3, #0]
   1127c:	e7f4      	b.n	11268 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1127e:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   11280:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   11284:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   11286:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   11288:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1128a:	6890      	ldr	r0, [r2, #8]
   1128c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11290:	734b      	strb	r3, [r1, #13]
   11292:	1a43      	subs	r3, r0, r1
   11294:	4258      	negs	r0, r3
   11296:	4158      	adcs	r0, r3
}
   11298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1129c:	f7ff bf3e 	b.w	1111c <update_cache>
	node->prev = list->tail;
   112a0:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   112a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   112a6:	6019      	str	r1, [r3, #0]
	list->tail = node;
   112a8:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   112aa:	e7ed      	b.n	11288 <move_thread_to_end_of_prio_q+0x48>
   112ac:	2001073c 	.word	0x2001073c
   112b0:	20010714 	.word	0x20010714

000112b4 <z_time_slice>:
{
   112b4:	4601      	mov	r1, r0
   112b6:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   112b8:	f04f 0320 	mov.w	r3, #32
   112bc:	f3ef 8411 	mrs	r4, BASEPRI
   112c0:	f383 8811 	msr	BASEPRI, r3
   112c4:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   112c8:	4b16      	ldr	r3, [pc, #88]	; (11324 <z_time_slice+0x70>)
   112ca:	4a17      	ldr	r2, [pc, #92]	; (11328 <z_time_slice+0x74>)
   112cc:	6898      	ldr	r0, [r3, #8]
   112ce:	6815      	ldr	r5, [r2, #0]
   112d0:	42a8      	cmp	r0, r5
   112d2:	461d      	mov	r5, r3
   112d4:	d106      	bne.n	112e4 <z_time_slice+0x30>
			z_reset_time_slice();
   112d6:	f7ff fea3 	bl	11020 <z_reset_time_slice>
	__asm__ volatile(
   112da:	f384 8811 	msr	BASEPRI, r4
   112de:	f3bf 8f6f 	isb	sy
}
   112e2:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   112e4:	2600      	movs	r6, #0
   112e6:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   112e8:	4a10      	ldr	r2, [pc, #64]	; (1132c <z_time_slice+0x78>)
   112ea:	6812      	ldr	r2, [r2, #0]
   112ec:	b1ba      	cbz	r2, 1131e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   112ee:	89c2      	ldrh	r2, [r0, #14]
   112f0:	2a7f      	cmp	r2, #127	; 0x7f
   112f2:	d814      	bhi.n	1131e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   112f4:	7b42      	ldrb	r2, [r0, #13]
   112f6:	06d2      	lsls	r2, r2, #27
   112f8:	d111      	bne.n	1131e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   112fa:	4a0d      	ldr	r2, [pc, #52]	; (11330 <z_time_slice+0x7c>)
   112fc:	f990 600e 	ldrsb.w	r6, [r0, #14]
   11300:	6812      	ldr	r2, [r2, #0]
   11302:	4296      	cmp	r6, r2
   11304:	db0b      	blt.n	1131e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   11306:	4a0b      	ldr	r2, [pc, #44]	; (11334 <z_time_slice+0x80>)
   11308:	4290      	cmp	r0, r2
   1130a:	d008      	beq.n	1131e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1130c:	691a      	ldr	r2, [r3, #16]
   1130e:	428a      	cmp	r2, r1
   11310:	dc02      	bgt.n	11318 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   11312:	f7ff ff95 	bl	11240 <move_thread_to_end_of_prio_q>
   11316:	e7de      	b.n	112d6 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   11318:	1a52      	subs	r2, r2, r1
   1131a:	611a      	str	r2, [r3, #16]
   1131c:	e7dd      	b.n	112da <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1131e:	2300      	movs	r3, #0
   11320:	612b      	str	r3, [r5, #16]
   11322:	e7da      	b.n	112da <z_time_slice+0x26>
   11324:	20010714 	.word	0x20010714
   11328:	20010744 	.word	0x20010744
   1132c:	2001074c 	.word	0x2001074c
   11330:	20010748 	.word	0x20010748
   11334:	20010220 	.word	0x20010220

00011338 <z_impl_k_thread_suspend>:
{
   11338:	b570      	push	{r4, r5, r6, lr}
   1133a:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1133c:	3018      	adds	r0, #24
   1133e:	f002 fe65 	bl	1400c <z_abort_timeout>
	__asm__ volatile(
   11342:	f04f 0320 	mov.w	r3, #32
   11346:	f3ef 8611 	mrs	r6, BASEPRI
   1134a:	f383 8811 	msr	BASEPRI, r3
   1134e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   11352:	f994 300d 	ldrsb.w	r3, [r4, #13]
   11356:	2b00      	cmp	r3, #0
   11358:	da07      	bge.n	1136a <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1135a:	4621      	mov	r1, r4
   1135c:	480e      	ldr	r0, [pc, #56]	; (11398 <z_impl_k_thread_suspend+0x60>)
   1135e:	f7ff fec7 	bl	110f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   11362:	7b63      	ldrb	r3, [r4, #13]
   11364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11368:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1136a:	4d0c      	ldr	r5, [pc, #48]	; (1139c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1136c:	7b63      	ldrb	r3, [r4, #13]
   1136e:	68a8      	ldr	r0, [r5, #8]
   11370:	f043 0310 	orr.w	r3, r3, #16
   11374:	7363      	strb	r3, [r4, #13]
   11376:	1b03      	subs	r3, r0, r4
   11378:	4258      	negs	r0, r3
   1137a:	4158      	adcs	r0, r3
   1137c:	f7ff fece 	bl	1111c <update_cache>
	__asm__ volatile(
   11380:	f386 8811 	msr	BASEPRI, r6
   11384:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   11388:	68ab      	ldr	r3, [r5, #8]
   1138a:	42a3      	cmp	r3, r4
   1138c:	d103      	bne.n	11396 <z_impl_k_thread_suspend+0x5e>
}
   1138e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   11392:	f002 bd8e 	b.w	13eb2 <z_reschedule_unlocked>
}
   11396:	bd70      	pop	{r4, r5, r6, pc}
   11398:	2001073c 	.word	0x2001073c
   1139c:	20010714 	.word	0x20010714

000113a0 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   113a0:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   113a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113a6:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   113a8:	b103      	cbz	r3, 113ac <z_thread_single_abort+0xc>
		thread->fn_abort();
   113aa:	4798      	blx	r3
   113ac:	f104 0018 	add.w	r0, r4, #24
   113b0:	f002 fe2c 	bl	1400c <z_abort_timeout>
	__asm__ volatile(
   113b4:	f04f 0320 	mov.w	r3, #32
   113b8:	f3ef 8611 	mrs	r6, BASEPRI
   113bc:	f383 8811 	msr	BASEPRI, r3
   113c0:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   113c4:	7b63      	ldrb	r3, [r4, #13]
   113c6:	06d8      	lsls	r0, r3, #27
   113c8:	d123      	bne.n	11412 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   113ca:	69a2      	ldr	r2, [r4, #24]
   113cc:	bb0a      	cbnz	r2, 11412 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   113ce:	0619      	lsls	r1, r3, #24
   113d0:	d507      	bpl.n	113e2 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   113d2:	4621      	mov	r1, r4
   113d4:	481e      	ldr	r0, [pc, #120]	; (11450 <z_thread_single_abort+0xb0>)
   113d6:	f7ff fe8b 	bl	110f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   113da:	7b63      	ldrb	r3, [r4, #13]
   113dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   113e0:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   113e2:	4b1c      	ldr	r3, [pc, #112]	; (11454 <z_thread_single_abort+0xb4>)
   113e4:	6898      	ldr	r0, [r3, #8]
   113e6:	1b02      	subs	r2, r0, r4
   113e8:	4250      	negs	r0, r2
   113ea:	4150      	adcs	r0, r2
   113ec:	f7ff fe96 	bl	1111c <update_cache>
			waiter->base.pended_on = NULL;
   113f0:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   113f2:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   113f4:	f104 0830 	add.w	r8, r4, #48	; 0x30
   113f8:	f043 0308 	orr.w	r3, r3, #8
   113fc:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   113fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11400:	4545      	cmp	r5, r8
   11402:	d000      	beq.n	11406 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   11404:	b995      	cbnz	r5, 1142c <z_thread_single_abort+0x8c>
	__asm__ volatile(
   11406:	f386 8811 	msr	BASEPRI, r6
   1140a:	f3bf 8f6f 	isb	sy
}
   1140e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   11412:	079b      	lsls	r3, r3, #30
   11414:	d5ec      	bpl.n	113f0 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   11416:	4621      	mov	r1, r4
   11418:	68a0      	ldr	r0, [r4, #8]
   1141a:	f7ff fe69 	bl	110f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1141e:	7b63      	ldrb	r3, [r4, #13]
   11420:	f023 0302 	bic.w	r3, r3, #2
   11424:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   11426:	2300      	movs	r3, #0
   11428:	60a3      	str	r3, [r4, #8]
   1142a:	e7e1      	b.n	113f0 <z_thread_single_abort+0x50>
   1142c:	f105 0018 	add.w	r0, r5, #24
   11430:	f002 fdec 	bl	1400c <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   11434:	68a8      	ldr	r0, [r5, #8]
   11436:	4629      	mov	r1, r5
   11438:	f7ff fe5a 	bl	110f0 <z_priq_dumb_remove>
   1143c:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1143e:	4628      	mov	r0, r5
   11440:	f023 0302 	bic.w	r3, r3, #2
   11444:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   11446:	60af      	str	r7, [r5, #8]
   11448:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   1144a:	f7ff fea7 	bl	1119c <ready_thread>
   1144e:	e7d6      	b.n	113fe <z_thread_single_abort+0x5e>
   11450:	2001073c 	.word	0x2001073c
   11454:	20010714 	.word	0x20010714

00011458 <unready_thread>:
{
   11458:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1145a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1145e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   11460:	2b00      	cmp	r3, #0
   11462:	da06      	bge.n	11472 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   11464:	4807      	ldr	r0, [pc, #28]	; (11484 <unready_thread+0x2c>)
   11466:	f7ff fe43 	bl	110f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1146a:	7b4b      	ldrb	r3, [r1, #13]
   1146c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11470:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   11472:	4b05      	ldr	r3, [pc, #20]	; (11488 <unready_thread+0x30>)
   11474:	6898      	ldr	r0, [r3, #8]
   11476:	1a43      	subs	r3, r0, r1
   11478:	4258      	negs	r0, r3
   1147a:	4158      	adcs	r0, r3
}
   1147c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   11480:	f7ff be4c 	b.w	1111c <update_cache>
   11484:	2001073c 	.word	0x2001073c
   11488:	20010714 	.word	0x20010714

0001148c <pend>:
{
   1148c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11490:	4606      	mov	r6, r0
   11492:	4614      	mov	r4, r2
   11494:	461d      	mov	r5, r3
	__asm__ volatile(
   11496:	f04f 0320 	mov.w	r3, #32
   1149a:	f3ef 8711 	mrs	r7, BASEPRI
   1149e:	f383 8811 	msr	BASEPRI, r3
   114a2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   114a6:	f002 fd54 	bl	13f52 <add_to_waitq_locked>
	__asm__ volatile(
   114aa:	f387 8811 	msr	BASEPRI, r7
   114ae:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   114b2:	1c6b      	adds	r3, r5, #1
   114b4:	bf08      	it	eq
   114b6:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   114ba:	d008      	beq.n	114ce <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   114bc:	4622      	mov	r2, r4
   114be:	462b      	mov	r3, r5
   114c0:	f106 0018 	add.w	r0, r6, #24
   114c4:	4903      	ldr	r1, [pc, #12]	; (114d4 <pend+0x48>)
}
   114c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   114ca:	f000 ba5b 	b.w	11984 <z_add_timeout>
   114ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   114d2:	bf00      	nop
   114d4:	00013f13 	.word	0x00013f13

000114d8 <z_pend_curr>:
{
   114d8:	b510      	push	{r4, lr}
   114da:	460c      	mov	r4, r1
	pending_current = _current;
   114dc:	4b06      	ldr	r3, [pc, #24]	; (114f8 <z_pend_curr+0x20>)
{
   114de:	4611      	mov	r1, r2
	pending_current = _current;
   114e0:	6898      	ldr	r0, [r3, #8]
   114e2:	4b06      	ldr	r3, [pc, #24]	; (114fc <z_pend_curr+0x24>)
   114e4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   114e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   114ea:	f7ff ffcf 	bl	1148c <pend>
   114ee:	4620      	mov	r0, r4
}
   114f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   114f4:	f7fc bb62 	b.w	dbbc <arch_swap>
   114f8:	20010714 	.word	0x20010714
   114fc:	20010744 	.word	0x20010744

00011500 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   11500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11502:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   11504:	f002 fdc2 	bl	1408c <z_tick_get_32>
   11508:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1150a:	f04f 0320 	mov.w	r3, #32
   1150e:	f3ef 8711 	mrs	r7, BASEPRI
   11512:	f383 8811 	msr	BASEPRI, r3
   11516:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1151a:	4e0d      	ldr	r6, [pc, #52]	; (11550 <z_tick_sleep.part.0+0x50>)
   1151c:	4b0d      	ldr	r3, [pc, #52]	; (11554 <z_tick_sleep.part.0+0x54>)
   1151e:	68b0      	ldr	r0, [r6, #8]
   11520:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   11522:	f7ff ff99 	bl	11458 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   11526:	68b0      	ldr	r0, [r6, #8]
   11528:	490b      	ldr	r1, [pc, #44]	; (11558 <z_tick_sleep.part.0+0x58>)
   1152a:	462a      	mov	r2, r5
   1152c:	17eb      	asrs	r3, r5, #31
   1152e:	3018      	adds	r0, #24
   11530:	f000 fa28 	bl	11984 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   11534:	68b2      	ldr	r2, [r6, #8]
   11536:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11538:	7b53      	ldrb	r3, [r2, #13]
   1153a:	f043 0310 	orr.w	r3, r3, #16
   1153e:	7353      	strb	r3, [r2, #13]
   11540:	f7fc fb3c 	bl	dbbc <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   11544:	f002 fda2 	bl	1408c <z_tick_get_32>
   11548:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1154a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1154e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11550:	20010714 	.word	0x20010714
   11554:	20010744 	.word	0x20010744
   11558:	00013f13 	.word	0x00013f13

0001155c <z_set_prio>:
{
   1155c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11560:	4604      	mov	r4, r0
   11562:	f04f 0320 	mov.w	r3, #32
   11566:	f3ef 8811 	mrs	r8, BASEPRI
   1156a:	f383 8811 	msr	BASEPRI, r3
   1156e:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   11572:	7b43      	ldrb	r3, [r0, #13]
   11574:	b24e      	sxtb	r6, r1
   11576:	06db      	lsls	r3, r3, #27
   11578:	d12e      	bne.n	115d8 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1157a:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1157c:	bb65      	cbnz	r5, 115d8 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1157e:	4f18      	ldr	r7, [pc, #96]	; (115e0 <z_set_prio+0x84>)
   11580:	4621      	mov	r1, r4
   11582:	f107 0028 	add.w	r0, r7, #40	; 0x28
   11586:	f7ff fdb3 	bl	110f0 <z_priq_dumb_remove>
	return list->head == list;
   1158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1158c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1158e:	4283      	cmp	r3, r0
   11590:	bf18      	it	ne
   11592:	461d      	movne	r5, r3
   11594:	2d00      	cmp	r5, #0
   11596:	bf38      	it	cc
   11598:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   1159a:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1159c:	b1b5      	cbz	r5, 115cc <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1159e:	f995 100e 	ldrsb.w	r1, [r5, #14]
   115a2:	42b1      	cmp	r1, r6
   115a4:	dc03      	bgt.n	115ae <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   115a6:	42aa      	cmp	r2, r5
   115a8:	d010      	beq.n	115cc <z_set_prio+0x70>
   115aa:	682d      	ldr	r5, [r5, #0]
   115ac:	e7f6      	b.n	1159c <z_set_prio+0x40>
	node->prev = successor->prev;
   115ae:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   115b0:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   115b4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   115b6:	606c      	str	r4, [r5, #4]
			update_cache(1);
   115b8:	2001      	movs	r0, #1
   115ba:	f7ff fdaf 	bl	1111c <update_cache>
   115be:	2001      	movs	r0, #1
	__asm__ volatile(
   115c0:	f388 8811 	msr	BASEPRI, r8
   115c4:	f3bf 8f6f 	isb	sy
}
   115c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   115cc:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   115d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   115d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   115d4:	62fc      	str	r4, [r7, #44]	; 0x2c
}
   115d6:	e7ef      	b.n	115b8 <z_set_prio+0x5c>
			thread->base.prio = prio;
   115d8:	2000      	movs	r0, #0
   115da:	73a6      	strb	r6, [r4, #14]
   115dc:	e7f0      	b.n	115c0 <z_set_prio+0x64>
   115de:	bf00      	nop
   115e0:	20010714 	.word	0x20010714

000115e4 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   115e4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   115e6:	4b04      	ldr	r3, [pc, #16]	; (115f8 <z_sched_init+0x14>)
   115e8:	4608      	mov	r0, r1
   115ea:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   115ee:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   115f2:	f7ff bd2b 	b.w	1104c <k_sched_time_slice_set>
   115f6:	bf00      	nop
   115f8:	20010714 	.word	0x20010714

000115fc <z_impl_k_yield>:
{
   115fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   115fe:	4c24      	ldr	r4, [pc, #144]	; (11690 <z_impl_k_yield+0x94>)
   11600:	4b24      	ldr	r3, [pc, #144]	; (11694 <z_impl_k_yield+0x98>)
   11602:	68a2      	ldr	r2, [r4, #8]
   11604:	429a      	cmp	r2, r3
   11606:	d030      	beq.n	1166a <z_impl_k_yield+0x6e>
	__asm__ volatile(
   11608:	f04f 0320 	mov.w	r3, #32
   1160c:	f3ef 8511 	mrs	r5, BASEPRI
   11610:	f383 8811 	msr	BASEPRI, r3
   11614:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   11618:	68a1      	ldr	r1, [r4, #8]
   1161a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1161e:	f7ff fd67 	bl	110f0 <z_priq_dumb_remove>
	return list->head == list;
   11622:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   11624:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11626:	4283      	cmp	r3, r0
   11628:	bf08      	it	eq
   1162a:	2300      	moveq	r3, #0
   1162c:	2b00      	cmp	r3, #0
   1162e:	bf38      	it	cc
   11630:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11632:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11634:	b32b      	cbz	r3, 11682 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   11636:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1163a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1163e:	42b7      	cmp	r7, r6
   11640:	db03      	blt.n	1164a <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   11642:	428b      	cmp	r3, r1
   11644:	d01d      	beq.n	11682 <z_impl_k_yield+0x86>
   11646:	681b      	ldr	r3, [r3, #0]
   11648:	e7f4      	b.n	11634 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1164a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1164c:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   11650:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   11652:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   11654:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   11656:	2001      	movs	r0, #1
   11658:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1165c:	7353      	strb	r3, [r2, #13]
   1165e:	f7ff fd5d 	bl	1111c <update_cache>
	__asm__ volatile(
   11662:	f385 8811 	msr	BASEPRI, r5
   11666:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1166a:	f04f 0320 	mov.w	r3, #32
   1166e:	f3ef 8011 	mrs	r0, BASEPRI
   11672:	f383 8811 	msr	BASEPRI, r3
   11676:	f3bf 8f6f 	isb	sy
}
   1167a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1167e:	f7fc ba9d 	b.w	dbbc <arch_swap>
	node->prev = list->tail;
   11682:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   11686:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11688:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1168a:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   1168c:	e7e2      	b.n	11654 <z_impl_k_yield+0x58>
   1168e:	bf00      	nop
   11690:	20010714 	.word	0x20010714
   11694:	20010220 	.word	0x20010220

00011698 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   11698:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1169a:	3301      	adds	r3, #1
   1169c:	bf08      	it	eq
   1169e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   116a2:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   116a4:	d106      	bne.n	116b4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   116a6:	4b0b      	ldr	r3, [pc, #44]	; (116d4 <z_impl_k_sleep+0x3c>)
   116a8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   116aa:	f7ff fe45 	bl	11338 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   116ae:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   116b2:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   116b4:	4604      	mov	r4, r0
	if (ticks == 0) {
   116b6:	b948      	cbnz	r0, 116cc <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   116b8:	f7ff ffa0 	bl	115fc <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   116bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   116c0:	fb84 3400 	smull	r3, r4, r4, r0
   116c4:	0bd8      	lsrs	r0, r3, #15
   116c6:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   116ca:	e7f2      	b.n	116b2 <z_impl_k_sleep+0x1a>
   116cc:	f7ff ff18 	bl	11500 <z_tick_sleep.part.0>
   116d0:	4604      	mov	r4, r0
   116d2:	e7f3      	b.n	116bc <z_impl_k_sleep+0x24>
   116d4:	20010714 	.word	0x20010714

000116d8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   116d8:	4b01      	ldr	r3, [pc, #4]	; (116e0 <z_impl_k_current_get+0x8>)
   116da:	6898      	ldr	r0, [r3, #8]
   116dc:	4770      	bx	lr
   116de:	bf00      	nop
   116e0:	20010714 	.word	0x20010714

000116e4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   116e4:	b538      	push	{r3, r4, r5, lr}
   116e6:	4604      	mov	r4, r0
   116e8:	f04f 0320 	mov.w	r3, #32
   116ec:	f3ef 8511 	mrs	r5, BASEPRI
   116f0:	f383 8811 	msr	BASEPRI, r3
   116f4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   116f8:	f002 fc56 	bl	13fa8 <z_unpend_first_thread>

	if (thread != NULL) {
   116fc:	b148      	cbz	r0, 11712 <z_impl_k_sem_give+0x2e>
   116fe:	2200      	movs	r2, #0
   11700:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   11702:	f002 fbf6 	bl	13ef2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   11706:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   11708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1170c:	4804      	ldr	r0, [pc, #16]	; (11720 <z_impl_k_sem_give+0x3c>)
   1170e:	f7ff bcc9 	b.w	110a4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   11712:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   11716:	429a      	cmp	r2, r3
   11718:	bf18      	it	ne
   1171a:	3301      	addne	r3, #1
   1171c:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   1171e:	e7f2      	b.n	11706 <z_impl_k_sem_give+0x22>
   11720:	2001075c 	.word	0x2001075c

00011724 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   11724:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11726:	4614      	mov	r4, r2
   11728:	461d      	mov	r5, r3
   1172a:	f04f 0320 	mov.w	r3, #32
   1172e:	f3ef 8111 	mrs	r1, BASEPRI
   11732:	f383 8811 	msr	BASEPRI, r3
   11736:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1173a:	6883      	ldr	r3, [r0, #8]
   1173c:	b143      	cbz	r3, 11750 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1173e:	3b01      	subs	r3, #1
   11740:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   11742:	f381 8811 	msr	BASEPRI, r1
   11746:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1174a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1174c:	b003      	add	sp, #12
   1174e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   11750:	ea54 0305 	orrs.w	r3, r4, r5
   11754:	d106      	bne.n	11764 <z_impl_k_sem_take+0x40>
   11756:	f381 8811 	msr	BASEPRI, r1
   1175a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1175e:	f06f 000f 	mvn.w	r0, #15
   11762:	e7f3      	b.n	1174c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   11764:	4602      	mov	r2, r0
   11766:	e9cd 4500 	strd	r4, r5, [sp]
   1176a:	4802      	ldr	r0, [pc, #8]	; (11774 <z_impl_k_sem_take+0x50>)
   1176c:	f7ff feb4 	bl	114d8 <z_pend_curr>
	return ret;
   11770:	e7ec      	b.n	1174c <z_impl_k_sem_take+0x28>
   11772:	bf00      	nop
   11774:	2001075c 	.word	0x2001075c

00011778 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   11778:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1177c:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   11780:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   11784:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   11786:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   11788:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1178a:	2504      	movs	r5, #4
   1178c:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   1178e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   11790:	1dd6      	adds	r6, r2, #7
	thread_base->prio = priority;
   11792:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   11794:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   11796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   11798:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   1179c:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   117a0:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->sched_locked = 0U;
   117a4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   117a6:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   117a8:	9202      	str	r2, [sp, #8]
   117aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   117ac:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   117b0:	9201      	str	r2, [sp, #4]
   117b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   117b4:	9200      	str	r2, [sp, #0]
   117b6:	4642      	mov	r2, r8
   117b8:	f7fc fa8a 	bl	dcd0 <arch_new_thread>
	if (!_current) {
   117bc:	4b05      	ldr	r3, [pc, #20]	; (117d4 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
   117be:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   117c2:	689b      	ldr	r3, [r3, #8]
   117c4:	b103      	cbz	r3, 117c8 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   117c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   117c8:	4640      	mov	r0, r8
   117ca:	6763      	str	r3, [r4, #116]	; 0x74
   117cc:	b004      	add	sp, #16
   117ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117d2:	bf00      	nop
   117d4:	20010714 	.word	0x20010714

000117d8 <z_impl_k_thread_create>:
{
   117d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   117da:	2500      	movs	r5, #0
{
   117dc:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   117de:	9505      	str	r5, [sp, #20]
   117e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   117e2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   117e6:	9504      	str	r5, [sp, #16]
   117e8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   117ea:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   117ec:	9503      	str	r5, [sp, #12]
   117ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   117f0:	9502      	str	r5, [sp, #8]
   117f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   117f4:	9501      	str	r5, [sp, #4]
   117f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   117f8:	9500      	str	r5, [sp, #0]
   117fa:	f7ff ffbd 	bl	11778 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   117fe:	1c7b      	adds	r3, r7, #1
   11800:	bf08      	it	eq
   11802:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   11806:	d005      	beq.n	11814 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   11808:	ea56 0307 	orrs.w	r3, r6, r7
   1180c:	d105      	bne.n	1181a <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1180e:	4620      	mov	r0, r4
   11810:	f7ff fcf8 	bl	11204 <z_sched_start>
}
   11814:	4620      	mov	r0, r4
   11816:	b007      	add	sp, #28
   11818:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1181a:	4632      	mov	r2, r6
   1181c:	463b      	mov	r3, r7
   1181e:	4903      	ldr	r1, [pc, #12]	; (1182c <z_impl_k_thread_create+0x54>)
   11820:	f104 0018 	add.w	r0, r4, #24
   11824:	f000 f8ae 	bl	11984 <z_add_timeout>
   11828:	e7f4      	b.n	11814 <z_impl_k_thread_create+0x3c>
   1182a:	bf00      	nop
   1182c:	00013f13 	.word	0x00013f13

00011830 <z_init_static_threads>:
{
   11830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   11834:	4e2a      	ldr	r6, [pc, #168]	; (118e0 <z_init_static_threads+0xb0>)
   11836:	4d2b      	ldr	r5, [pc, #172]	; (118e4 <z_init_static_threads+0xb4>)
   11838:	46b0      	mov	r8, r6
{
   1183a:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1183c:	42b5      	cmp	r5, r6
   1183e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   11842:	d310      	bcc.n	11866 <z_init_static_threads+0x36>
	k_sched_lock();
   11844:	f7ff fc40 	bl	110c8 <k_sched_lock>
   11848:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1184c:	f240 36e7 	movw	r6, #999	; 0x3e7
   11850:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   11852:	4c24      	ldr	r4, [pc, #144]	; (118e4 <z_init_static_threads+0xb4>)
   11854:	f8df a090 	ldr.w	sl, [pc, #144]	; 118e8 <z_init_static_threads+0xb8>
   11858:	4544      	cmp	r4, r8
   1185a:	d321      	bcc.n	118a0 <z_init_static_threads+0x70>
}
   1185c:	b006      	add	sp, #24
   1185e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   11862:	f7ff bc7f 	b.w	11164 <k_sched_unlock>
		z_setup_new_thread(
   11866:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1186a:	9305      	str	r3, [sp, #20]
   1186c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   11870:	9304      	str	r3, [sp, #16]
   11872:	f854 3c14 	ldr.w	r3, [r4, #-20]
   11876:	9303      	str	r3, [sp, #12]
   11878:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1187c:	9302      	str	r3, [sp, #8]
   1187e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   11882:	9301      	str	r3, [sp, #4]
   11884:	f854 3c20 	ldr.w	r3, [r4, #-32]
   11888:	9300      	str	r3, [sp, #0]
   1188a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1188e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   11892:	f7ff ff71 	bl	11778 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   11896:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1189a:	65dd      	str	r5, [r3, #92]	; 0x5c
   1189c:	4625      	mov	r5, r4
   1189e:	e7cd      	b.n	1183c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   118a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   118a2:	1c5a      	adds	r2, r3, #1
   118a4:	d00d      	beq.n	118c2 <z_init_static_threads+0x92>
   118a6:	4630      	mov	r0, r6
   118a8:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   118aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   118ae:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   118b2:	42b9      	cmp	r1, r7
   118b4:	bf08      	it	eq
   118b6:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   118b8:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   118ba:	d104      	bne.n	118c6 <z_init_static_threads+0x96>
	z_sched_start(thread);
   118bc:	4628      	mov	r0, r5
   118be:	f7ff fca1 	bl	11204 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   118c2:	3430      	adds	r4, #48	; 0x30
   118c4:	e7c8      	b.n	11858 <z_init_static_threads+0x28>
   118c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   118ca:	2300      	movs	r3, #0
   118cc:	f7fa fcb6 	bl	c23c <__aeabi_uldivmod>
   118d0:	4602      	mov	r2, r0
   118d2:	460b      	mov	r3, r1
   118d4:	f105 0018 	add.w	r0, r5, #24
   118d8:	4651      	mov	r1, sl
   118da:	f000 f853 	bl	11984 <z_add_timeout>
   118de:	e7f0      	b.n	118c2 <z_init_static_threads+0x92>
   118e0:	20010120 	.word	0x20010120
   118e4:	20010120 	.word	0x20010120
   118e8:	00013f13 	.word	0x00013f13

000118ec <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   118ec:	4b03      	ldr	r3, [pc, #12]	; (118fc <elapsed+0x10>)
   118ee:	681b      	ldr	r3, [r3, #0]
   118f0:	b90b      	cbnz	r3, 118f6 <elapsed+0xa>
   118f2:	f7fc b92f 	b.w	db54 <z_clock_elapsed>
}
   118f6:	2000      	movs	r0, #0
   118f8:	4770      	bx	lr
   118fa:	bf00      	nop
   118fc:	20010750 	.word	0x20010750

00011900 <remove_timeout>:
{
   11900:	b530      	push	{r4, r5, lr}
   11902:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11904:	b168      	cbz	r0, 11922 <remove_timeout+0x22>
   11906:	4a0a      	ldr	r2, [pc, #40]	; (11930 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   11908:	6852      	ldr	r2, [r2, #4]
   1190a:	4290      	cmp	r0, r2
   1190c:	d009      	beq.n	11922 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1190e:	b143      	cbz	r3, 11922 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   11910:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   11914:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   11918:	1912      	adds	r2, r2, r4
   1191a:	eb45 0101 	adc.w	r1, r5, r1
   1191e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   11922:	6842      	ldr	r2, [r0, #4]
   11924:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   11926:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11928:	2300      	movs	r3, #0
	node->prev = NULL;
   1192a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1192e:	bd30      	pop	{r4, r5, pc}
   11930:	200100b4 	.word	0x200100b4

00011934 <next_timeout>:

static int32_t next_timeout(void)
{
   11934:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   11936:	4b11      	ldr	r3, [pc, #68]	; (1197c <next_timeout+0x48>)
   11938:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1193a:	429c      	cmp	r4, r3
   1193c:	bf08      	it	eq
   1193e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   11940:	f7ff ffd4 	bl	118ec <elapsed>
   11944:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   11946:	b1ac      	cbz	r4, 11974 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   11948:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1194c:	1b40      	subs	r0, r0, r5
   1194e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   11952:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   11956:	f171 0300 	sbcs.w	r3, r1, #0
   1195a:	da0b      	bge.n	11974 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   1195c:	2800      	cmp	r0, #0
   1195e:	f171 0300 	sbcs.w	r3, r1, #0
   11962:	da00      	bge.n	11966 <next_timeout+0x32>
   11964:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   11966:	4b06      	ldr	r3, [pc, #24]	; (11980 <next_timeout+0x4c>)
   11968:	691b      	ldr	r3, [r3, #16]
   1196a:	b113      	cbz	r3, 11972 <next_timeout+0x3e>
   1196c:	4298      	cmp	r0, r3
   1196e:	bfa8      	it	ge
   11970:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   11972:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   11974:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11978:	e7f5      	b.n	11966 <next_timeout+0x32>
   1197a:	bf00      	nop
   1197c:	200100b4 	.word	0x200100b4
   11980:	20010714 	.word	0x20010714

00011984 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   11984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11988:	9101      	str	r1, [sp, #4]
   1198a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1198c:	1c4b      	adds	r3, r1, #1
   1198e:	bf08      	it	eq
   11990:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   11994:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11996:	d06b      	beq.n	11a70 <z_add_timeout+0xec>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   11998:	f06f 0301 	mvn.w	r3, #1
   1199c:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   119a0:	1c54      	adds	r4, r2, #1
   119a2:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   119a6:	ebb3 0804 	subs.w	r8, r3, r4
   119aa:	eb6b 0905 	sbc.w	r9, fp, r5
   119ae:	f1b8 0f00 	cmp.w	r8, #0
   119b2:	f179 0300 	sbcs.w	r3, r9, #0
   119b6:	db0f      	blt.n	119d8 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   119b8:	f7ff ff98 	bl	118ec <elapsed>
   119bc:	f06f 0301 	mvn.w	r3, #1
   119c0:	4a32      	ldr	r2, [pc, #200]	; (11a8c <z_add_timeout+0x108>)
   119c2:	e9d2 1c00 	ldrd	r1, ip, [r2]
   119c6:	1a5b      	subs	r3, r3, r1
   119c8:	eb6b 020c 	sbc.w	r2, fp, ip
   119cc:	1b1e      	subs	r6, r3, r4
   119ce:	eb62 0705 	sbc.w	r7, r2, r5
   119d2:	1a34      	subs	r4, r6, r0
   119d4:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   119d8:	9b01      	ldr	r3, [sp, #4]
   119da:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   119de:	f04f 0320 	mov.w	r3, #32
   119e2:	f3ef 8611 	mrs	r6, BASEPRI
   119e6:	f383 8811 	msr	BASEPRI, r3
   119ea:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   119ee:	f7ff ff7d 	bl	118ec <elapsed>
	ticks = MAX(1, ticks);
   119f2:	2c01      	cmp	r4, #1
   119f4:	f175 0300 	sbcs.w	r3, r5, #0
   119f8:	bfbc      	itt	lt
   119fa:	2401      	movlt	r4, #1
   119fc:	2500      	movlt	r5, #0
	return list->head == list;
   119fe:	4b24      	ldr	r3, [pc, #144]	; (11a90 <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
   11a00:	1824      	adds	r4, r4, r0
   11a02:	681a      	ldr	r2, [r3, #0]
   11a04:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a08:	429a      	cmp	r2, r3
   11a0a:	e9ca 4504 	strd	r4, r5, [sl, #16]
   11a0e:	d001      	beq.n	11a14 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11a10:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   11a12:	b952      	cbnz	r2, 11a2a <z_add_timeout+0xa6>
	node->prev = list->tail;
   11a14:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   11a16:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   11a1a:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   11a1e:	685a      	ldr	r2, [r3, #4]
   11a20:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   11a24:	f8c3 a004 	str.w	sl, [r3, #4]
}
   11a28:	e014      	b.n	11a54 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   11a2a:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   11a2e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   11a32:	4544      	cmp	r4, r8
   11a34:	eb75 0109 	sbcs.w	r1, r5, r9
   11a38:	da1d      	bge.n	11a76 <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
   11a3a:	ebb8 0004 	subs.w	r0, r8, r4
   11a3e:	eb69 0105 	sbc.w	r1, r9, r5
   11a42:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   11a46:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   11a48:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   11a4c:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   11a50:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   11a54:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a56:	429a      	cmp	r2, r3
   11a58:	d006      	beq.n	11a68 <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11a5a:	4592      	cmp	sl, r2
   11a5c:	d104      	bne.n	11a68 <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
   11a5e:	f7ff ff69 	bl	11934 <next_timeout>
   11a62:	2100      	movs	r1, #0
   11a64:	f7fc f810 	bl	da88 <z_clock_set_timeout>
	__asm__ volatile(
   11a68:	f386 8811 	msr	BASEPRI, r6
   11a6c:	f3bf 8f6f 	isb	sy
		}
	}
}
   11a70:	b003      	add	sp, #12
   11a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   11a76:	ebb4 0008 	subs.w	r0, r4, r8
   11a7a:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   11a7e:	42ba      	cmp	r2, r7
   11a80:	e9ca 0104 	strd	r0, r1, [sl, #16]
   11a84:	d0c6      	beq.n	11a14 <z_add_timeout+0x90>
   11a86:	6812      	ldr	r2, [r2, #0]
   11a88:	e7c3      	b.n	11a12 <z_add_timeout+0x8e>
   11a8a:	bf00      	nop
   11a8c:	20010320 	.word	0x20010320
   11a90:	200100b4 	.word	0x200100b4

00011a94 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   11a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a98:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   11a9a:	f7ff fc0b 	bl	112b4 <z_time_slice>
	__asm__ volatile(
   11a9e:	f04f 0320 	mov.w	r3, #32
   11aa2:	f3ef 8411 	mrs	r4, BASEPRI
   11aa6:	f383 8811 	msr	BASEPRI, r3
   11aaa:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   11aae:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 11b60 <z_clock_announce+0xcc>
   11ab2:	4d2a      	ldr	r5, [pc, #168]	; (11b5c <z_clock_announce+0xc8>)
   11ab4:	4651      	mov	r1, sl
	return list->head == list;
   11ab6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 11b64 <z_clock_announce+0xd0>
   11aba:	602e      	str	r6, [r5, #0]
   11abc:	f8d5 c000 	ldr.w	ip, [r5]
   11ac0:	f8db 0000 	ldr.w	r0, [fp]
   11ac4:	4662      	mov	r2, ip
   11ac6:	e9da 8900 	ldrd	r8, r9, [sl]
   11aca:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11acc:	4558      	cmp	r0, fp
   11ace:	e9cd 2300 	strd	r2, r3, [sp]
   11ad2:	d00d      	beq.n	11af0 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   11ad4:	b160      	cbz	r0, 11af0 <z_clock_announce+0x5c>
   11ad6:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   11ada:	45b4      	cmp	ip, r6
   11adc:	41bb      	sbcs	r3, r7
   11ade:	da1d      	bge.n	11b1c <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   11ae0:	9b00      	ldr	r3, [sp, #0]
   11ae2:	ebb6 0c03 	subs.w	ip, r6, r3
   11ae6:	9b01      	ldr	r3, [sp, #4]
   11ae8:	eb67 0603 	sbc.w	r6, r7, r3
   11aec:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   11af0:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   11af2:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   11af4:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   11af6:	eb13 0208 	adds.w	r2, r3, r8
   11afa:	9b01      	ldr	r3, [sp, #4]
   11afc:	eb43 0309 	adc.w	r3, r3, r9
   11b00:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   11b04:	f7ff ff16 	bl	11934 <next_timeout>
   11b08:	4631      	mov	r1, r6
   11b0a:	f7fb ffbd 	bl	da88 <z_clock_set_timeout>
	__asm__ volatile(
   11b0e:	f384 8811 	msr	BASEPRI, r4
   11b12:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   11b16:	b003      	add	sp, #12
   11b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   11b1c:	2200      	movs	r2, #0
   11b1e:	2300      	movs	r3, #0
		curr_tick += dt;
   11b20:	eb18 0806 	adds.w	r8, r8, r6
   11b24:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   11b28:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   11b2c:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   11b30:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   11b34:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   11b36:	f7ff fee3 	bl	11900 <remove_timeout>
   11b3a:	f384 8811 	msr	BASEPRI, r4
   11b3e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   11b42:	6883      	ldr	r3, [r0, #8]
   11b44:	4798      	blx	r3
	__asm__ volatile(
   11b46:	f04f 0320 	mov.w	r3, #32
   11b4a:	f3ef 8411 	mrs	r4, BASEPRI
   11b4e:	f383 8811 	msr	BASEPRI, r3
   11b52:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   11b56:	4902      	ldr	r1, [pc, #8]	; (11b60 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   11b58:	e7b0      	b.n	11abc <z_clock_announce+0x28>
   11b5a:	bf00      	nop
   11b5c:	20010750 	.word	0x20010750
   11b60:	20010320 	.word	0x20010320
   11b64:	200100b4 	.word	0x200100b4

00011b68 <z_tick_get>:

int64_t z_tick_get(void)
{
   11b68:	b510      	push	{r4, lr}
   11b6a:	f04f 0320 	mov.w	r3, #32
   11b6e:	f3ef 8411 	mrs	r4, BASEPRI
   11b72:	f383 8811 	msr	BASEPRI, r3
   11b76:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   11b7a:	f7fb ffeb 	bl	db54 <z_clock_elapsed>
   11b7e:	4b06      	ldr	r3, [pc, #24]	; (11b98 <z_tick_get+0x30>)
   11b80:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b84:	1812      	adds	r2, r2, r0
   11b86:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   11b8a:	f384 8811 	msr	BASEPRI, r4
   11b8e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   11b92:	4610      	mov	r0, r2
   11b94:	4619      	mov	r1, r3
   11b96:	bd10      	pop	{r4, pc}
   11b98:	20010320 	.word	0x20010320

00011b9c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   11b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   11b9e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   11ba2:	1c56      	adds	r6, r2, #1
   11ba4:	f143 0700 	adc.w	r7, r3, #0
   11ba8:	2f00      	cmp	r7, #0
   11baa:	bf08      	it	eq
   11bac:	2e02      	cmpeq	r6, #2
{
   11bae:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   11bb0:	d302      	bcc.n	11bb8 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11bb2:	490c      	ldr	r1, [pc, #48]	; (11be4 <z_timer_expiration_handler+0x48>)
   11bb4:	f7ff fee6 	bl	11984 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   11bb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11bba:	3301      	adds	r3, #1
   11bbc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   11bbe:	6a23      	ldr	r3, [r4, #32]
   11bc0:	b10b      	cbz	r3, 11bc6 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   11bc2:	4620      	mov	r0, r4
   11bc4:	4798      	blx	r3
	return list->head == list;
   11bc6:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11bca:	42a5      	cmp	r5, r4
   11bcc:	d008      	beq.n	11be0 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   11bce:	b13d      	cbz	r5, 11be0 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   11bd0:	4628      	mov	r0, r5
   11bd2:	f002 f952 	bl	13e7a <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   11bd6:	4628      	mov	r0, r5
   11bd8:	f002 f98b 	bl	13ef2 <z_ready_thread>
   11bdc:	2300      	movs	r3, #0
   11bde:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
   11be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11be2:	bf00      	nop
   11be4:	00011b9d 	.word	0x00011b9d

00011be8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   11be8:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   11bec:	4619      	mov	r1, r3
   11bee:	4606      	mov	r6, r0
   11bf0:	4610      	mov	r0, r2
   11bf2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   11bf6:	1c4c      	adds	r4, r1, #1
   11bf8:	bf08      	it	eq
   11bfa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   11bfe:	4680      	mov	r8, r0
   11c00:	4689      	mov	r9, r1
   11c02:	d047      	beq.n	11c94 <z_impl_k_timer_start+0xac>
   11c04:	4614      	mov	r4, r2
   11c06:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   11c08:	ea54 0305 	orrs.w	r3, r4, r5
   11c0c:	d016      	beq.n	11c3c <z_impl_k_timer_start+0x54>
   11c0e:	f06f 0301 	mvn.w	r3, #1
   11c12:	ebb3 0a02 	subs.w	sl, r3, r2
   11c16:	f04f 33ff 	mov.w	r3, #4294967295
   11c1a:	eb63 0b05 	sbc.w	fp, r3, r5
   11c1e:	f1ba 0f00 	cmp.w	sl, #0
   11c22:	f17b 0300 	sbcs.w	r3, fp, #0
   11c26:	da09      	bge.n	11c3c <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   11c28:	f112 34ff 	adds.w	r4, r2, #4294967295
   11c2c:	f145 35ff 	adc.w	r5, r5, #4294967295
   11c30:	2c01      	cmp	r4, #1
   11c32:	f175 0300 	sbcs.w	r3, r5, #0
   11c36:	bfbc      	itt	lt
   11c38:	2401      	movlt	r4, #1
   11c3a:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   11c3c:	f06f 0301 	mvn.w	r3, #1
   11c40:	1a1b      	subs	r3, r3, r0
   11c42:	9300      	str	r3, [sp, #0]
   11c44:	f04f 33ff 	mov.w	r3, #4294967295
   11c48:	eb63 0301 	sbc.w	r3, r3, r1
   11c4c:	9301      	str	r3, [sp, #4]
   11c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
   11c52:	2a00      	cmp	r2, #0
   11c54:	f173 0300 	sbcs.w	r3, r3, #0
   11c58:	da0c      	bge.n	11c74 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   11c5a:	f110 38ff 	adds.w	r8, r0, #4294967295
   11c5e:	f141 39ff 	adc.w	r9, r1, #4294967295
   11c62:	f1b8 0f00 	cmp.w	r8, #0
   11c66:	f179 0300 	sbcs.w	r3, r9, #0
   11c6a:	bfbc      	itt	lt
   11c6c:	f04f 0800 	movlt.w	r8, #0
   11c70:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   11c74:	4630      	mov	r0, r6
   11c76:	f002 f9c9 	bl	1400c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   11c7a:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11c7c:	4642      	mov	r2, r8
	timer->status = 0U;
   11c7e:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11c80:	4630      	mov	r0, r6
   11c82:	464b      	mov	r3, r9
   11c84:	4905      	ldr	r1, [pc, #20]	; (11c9c <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   11c86:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   11c8a:	b002      	add	sp, #8
   11c8c:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11c90:	f7ff be78 	b.w	11984 <z_add_timeout>
}
   11c94:	b002      	add	sp, #8
   11c96:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   11c9a:	bf00      	nop
   11c9c:	00011b9d 	.word	0x00011b9d

00011ca0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   11ca0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   11ca2:	4c06      	ldr	r4, [pc, #24]	; (11cbc <statics_init+0x1c>)
   11ca4:	4d06      	ldr	r5, [pc, #24]	; (11cc0 <statics_init+0x20>)
   11ca6:	42ac      	cmp	r4, r5
   11ca8:	d301      	bcc.n	11cae <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   11caa:	2000      	movs	r0, #0
   11cac:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   11cae:	4620      	mov	r0, r4
   11cb0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   11cb4:	f002 fa1c 	bl	140f0 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   11cb8:	3414      	adds	r4, #20
   11cba:	e7f4      	b.n	11ca6 <statics_init+0x6>
   11cbc:	20010158 	.word	0x20010158
   11cc0:	20010158 	.word	0x20010158

00011cc4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   11cc4:	4603      	mov	r3, r0
   11cc6:	b158      	cbz	r0, 11ce0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11cc8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   11cca:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   11cce:	2a01      	cmp	r2, #1
   11cd0:	d003      	beq.n	11cda <sys_notify_validate+0x16>
   11cd2:	2a03      	cmp	r2, #3
   11cd4:	d104      	bne.n	11ce0 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   11cd6:	6802      	ldr	r2, [r0, #0]
   11cd8:	b112      	cbz	r2, 11ce0 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   11cda:	2000      	movs	r0, #0
   11cdc:	6098      	str	r0, [r3, #8]
   11cde:	4770      	bx	lr
		return -EINVAL;
   11ce0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   11ce4:	4770      	bx	lr

00011ce6 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11ce6:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   11ce8:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   11cea:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   11cee:	2a03      	cmp	r2, #3
   11cf0:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
   11cf4:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = 0;
   11cf6:	bf14      	ite	ne
   11cf8:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   11cfa:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11cfc:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11cfe:	4770      	bx	lr

00011d00 <arch_printk_char_out>:
}
   11d00:	2000      	movs	r0, #0
   11d02:	4770      	bx	lr

00011d04 <str_out>:
{
   11d04:	b530      	push	{r4, r5, lr}
   11d06:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   11d08:	680c      	ldr	r4, [r1, #0]
   11d0a:	1c55      	adds	r5, r2, #1
   11d0c:	b114      	cbz	r4, 11d14 <str_out+0x10>
   11d0e:	684b      	ldr	r3, [r1, #4]
   11d10:	4293      	cmp	r3, r2
   11d12:	dc01      	bgt.n	11d18 <str_out+0x14>
		ctx->count++;
   11d14:	608d      	str	r5, [r1, #8]
}
   11d16:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   11d18:	3b01      	subs	r3, #1
   11d1a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   11d1c:	bf08      	it	eq
   11d1e:	2200      	moveq	r2, #0
   11d20:	608d      	str	r5, [r1, #8]
   11d22:	bf0c      	ite	eq
   11d24:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   11d26:	54a0      	strbne	r0, [r4, r2]
   11d28:	e7f5      	b.n	11d16 <str_out+0x12>

00011d2a <printk>:
{
   11d2a:	b40f      	push	{r0, r1, r2, r3}
   11d2c:	b507      	push	{r0, r1, r2, lr}
   11d2e:	a904      	add	r1, sp, #16
   11d30:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   11d34:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   11d36:	f7fa fe23 	bl	c980 <vprintk>
}
   11d3a:	b003      	add	sp, #12
   11d3c:	f85d eb04 	ldr.w	lr, [sp], #4
   11d40:	b004      	add	sp, #16
   11d42:	4770      	bx	lr

00011d44 <snprintk>:
{
   11d44:	b40c      	push	{r2, r3}
   11d46:	b507      	push	{r0, r1, r2, lr}
   11d48:	ab04      	add	r3, sp, #16
   11d4a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   11d4e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   11d50:	f7fa fe24 	bl	c99c <vsnprintk>
}
   11d54:	b003      	add	sp, #12
   11d56:	f85d eb04 	ldr.w	lr, [sp], #4
   11d5a:	b002      	add	sp, #8
   11d5c:	4770      	bx	lr

00011d5e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11d5e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   11d60:	f013 0307 	ands.w	r3, r3, #7
   11d64:	d105      	bne.n	11d72 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   11d66:	6803      	ldr	r3, [r0, #0]
   11d68:	2b00      	cmp	r3, #0
		evt = EVT_START;
   11d6a:	bf0c      	ite	eq
   11d6c:	2000      	moveq	r0, #0
   11d6e:	2003      	movne	r0, #3
   11d70:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   11d72:	2b02      	cmp	r3, #2
   11d74:	d105      	bne.n	11d82 <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   11d76:	8b43      	ldrh	r3, [r0, #26]
   11d78:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   11d7a:	bf14      	ite	ne
   11d7c:	2000      	movne	r0, #0
   11d7e:	2004      	moveq	r0, #4
   11d80:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   11d82:	2b01      	cmp	r3, #1
   11d84:	d105      	bne.n	11d92 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   11d86:	6803      	ldr	r3, [r0, #0]
   11d88:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   11d8a:	bf0c      	ite	eq
   11d8c:	2000      	moveq	r0, #0
   11d8e:	2005      	movne	r0, #5
   11d90:	4770      	bx	lr
	int evt = EVT_NOP;
   11d92:	2000      	movs	r0, #0
}
   11d94:	4770      	bx	lr

00011d96 <notify_one>:
{
   11d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d9a:	460d      	mov	r5, r1
   11d9c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11d9e:	4619      	mov	r1, r3
   11da0:	1d28      	adds	r0, r5, #4
{
   11da2:	4690      	mov	r8, r2
   11da4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11da6:	f7ff ff9e 	bl	11ce6 <sys_notify_finalize>
	if (cb) {
   11daa:	4604      	mov	r4, r0
   11dac:	b138      	cbz	r0, 11dbe <notify_one+0x28>
		cb(mgr, cli, state, res);
   11dae:	4633      	mov	r3, r6
   11db0:	4642      	mov	r2, r8
   11db2:	4629      	mov	r1, r5
   11db4:	4638      	mov	r0, r7
   11db6:	46a4      	mov	ip, r4
}
   11db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   11dbc:	4760      	bx	ip
}
   11dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011dc2 <transition_complete>:
{
   11dc2:	b410      	push	{r4}
	__asm__ volatile(
   11dc4:	f04f 0420 	mov.w	r4, #32
   11dc8:	f3ef 8211 	mrs	r2, BASEPRI
   11dcc:	f384 8811 	msr	BASEPRI, r4
   11dd0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   11dd4:	6141      	str	r1, [r0, #20]
}
   11dd6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   11dd8:	2101      	movs	r1, #1
   11dda:	f7fa bdf3 	b.w	c9c4 <process_event>

00011dde <validate_args>:
{
   11dde:	b510      	push	{r4, lr}
   11de0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   11de2:	b140      	cbz	r0, 11df6 <validate_args+0x18>
   11de4:	b139      	cbz	r1, 11df6 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   11de6:	1d08      	adds	r0, r1, #4
   11de8:	f7ff ff6c 	bl	11cc4 <sys_notify_validate>
	if ((rv == 0)
   11dec:	b928      	cbnz	r0, 11dfa <validate_args+0x1c>
	    && ((cli->notify.flags
   11dee:	68a3      	ldr	r3, [r4, #8]
   11df0:	f033 0303 	bics.w	r3, r3, #3
   11df4:	d001      	beq.n	11dfa <validate_args+0x1c>
		rv = -EINVAL;
   11df6:	f06f 0015 	mvn.w	r0, #21
}
   11dfa:	bd10      	pop	{r4, pc}

00011dfc <onoff_manager_init>:
{
   11dfc:	b538      	push	{r3, r4, r5, lr}
   11dfe:	460c      	mov	r4, r1
	if ((mgr == NULL)
   11e00:	4605      	mov	r5, r0
   11e02:	b158      	cbz	r0, 11e1c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   11e04:	b151      	cbz	r1, 11e1c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   11e06:	680b      	ldr	r3, [r1, #0]
   11e08:	b143      	cbz	r3, 11e1c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   11e0a:	684b      	ldr	r3, [r1, #4]
   11e0c:	b133      	cbz	r3, 11e1c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   11e0e:	221c      	movs	r2, #28
   11e10:	2100      	movs	r1, #0
   11e12:	f000 fd9f 	bl	12954 <memset>
	return 0;
   11e16:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   11e18:	612c      	str	r4, [r5, #16]
}
   11e1a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11e1c:	f06f 0015 	mvn.w	r0, #21
   11e20:	e7fb      	b.n	11e1a <onoff_manager_init+0x1e>

00011e22 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11e22:	b570      	push	{r4, r5, r6, lr}
   11e24:	4604      	mov	r4, r0
   11e26:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11e28:	f7ff ffd9 	bl	11dde <validate_args>

	if (rv < 0) {
   11e2c:	1e05      	subs	r5, r0, #0
   11e2e:	db31      	blt.n	11e94 <onoff_request+0x72>
   11e30:	f04f 0320 	mov.w	r3, #32
   11e34:	f3ef 8111 	mrs	r1, BASEPRI
   11e38:	f383 8811 	msr	BASEPRI, r3
   11e3c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   11e40:	f64f 75ff 	movw	r5, #65535	; 0xffff
   11e44:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11e46:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   11e48:	42ab      	cmp	r3, r5
   11e4a:	f000 0207 	and.w	r2, r0, #7
   11e4e:	d02e      	beq.n	11eae <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   11e50:	2a02      	cmp	r2, #2
   11e52:	d10e      	bne.n	11e72 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   11e54:	3301      	adds	r3, #1
   11e56:	8363      	strh	r3, [r4, #26]
	rv = state;
   11e58:	4615      	mov	r5, r2
		notify = true;
   11e5a:	2301      	movs	r3, #1
	__asm__ volatile(
   11e5c:	f381 8811 	msr	BASEPRI, r1
   11e60:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   11e64:	b1b3      	cbz	r3, 11e94 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   11e66:	2300      	movs	r3, #0
   11e68:	4631      	mov	r1, r6
   11e6a:	4620      	mov	r0, r4
   11e6c:	f7ff ff93 	bl	11d96 <notify_one>
   11e70:	e010      	b.n	11e94 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   11e72:	0783      	lsls	r3, r0, #30
   11e74:	d001      	beq.n	11e7a <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   11e76:	2a06      	cmp	r2, #6
   11e78:	d10e      	bne.n	11e98 <onoff_request+0x76>
	parent->next = child;
   11e7a:	2300      	movs	r3, #0
   11e7c:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   11e7e:	6863      	ldr	r3, [r4, #4]
   11e80:	b993      	cbnz	r3, 11ea8 <onoff_request+0x86>
	list->head = node;
   11e82:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   11e86:	4615      	mov	r5, r2
   11e88:	b962      	cbnz	r2, 11ea4 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   11e8a:	460a      	mov	r2, r1
   11e8c:	4620      	mov	r0, r4
   11e8e:	2102      	movs	r1, #2
   11e90:	f7fa fd98 	bl	c9c4 <process_event>
		}
	}

	return rv;
}
   11e94:	4628      	mov	r0, r5
   11e96:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   11e98:	2a05      	cmp	r2, #5
   11e9a:	bf0c      	ite	eq
   11e9c:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   11ea0:	f06f 0504 	mvnne.w	r5, #4
   11ea4:	2300      	movs	r3, #0
   11ea6:	e7d9      	b.n	11e5c <onoff_request+0x3a>
	parent->next = child;
   11ea8:	601e      	str	r6, [r3, #0]
	list->tail = node;
   11eaa:	6066      	str	r6, [r4, #4]
}
   11eac:	e7eb      	b.n	11e86 <onoff_request+0x64>
		rv = -EAGAIN;
   11eae:	f06f 050a 	mvn.w	r5, #10
   11eb2:	e7f7      	b.n	11ea4 <onoff_request+0x82>

00011eb4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   11eb4:	4604      	mov	r4, r0
   11eb6:	b508      	push	{r3, lr}
   11eb8:	4608      	mov	r0, r1
   11eba:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   11ebc:	461a      	mov	r2, r3
   11ebe:	47a0      	blx	r4
	return z_impl_k_current_get();
   11ec0:	f7ff fc0a 	bl	116d8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   11ec4:	f7fc fa40 	bl	e348 <z_impl_k_thread_abort>

00011ec8 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   11ec8:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   11eca:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   11ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   11ed2:	bf2c      	ite	cs
   11ed4:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   11ed8:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   11edc:	4770      	bx	lr

00011ede <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   11ede:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   11ee2:	6880      	ldr	r0, [r0, #8]
   11ee4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   11ee8:	bf2c      	ite	cs
   11eea:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   11eee:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   11ef2:	4770      	bx	lr

00011ef4 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   11ef4:	2201      	movs	r2, #1
{
   11ef6:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   11ef8:	f7ff ffe6 	bl	11ec8 <chunk_field>
}
   11efc:	0840      	lsrs	r0, r0, #1
   11efe:	bd08      	pop	{r3, pc}

00011f00 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   11f00:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   11f02:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   11f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11f0a:	d308      	bcc.n	11f1e <set_chunk_used+0x1e>
		if (used) {
   11f0c:	684b      	ldr	r3, [r1, #4]
   11f0e:	b11a      	cbz	r2, 11f18 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   11f10:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   11f14:	604b      	str	r3, [r1, #4]
   11f16:	4770      	bx	lr
   11f18:	f023 0301 	bic.w	r3, r3, #1
   11f1c:	e7fa      	b.n	11f14 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   11f1e:	884b      	ldrh	r3, [r1, #2]
   11f20:	b11a      	cbz	r2, 11f2a <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   11f22:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   11f26:	804b      	strh	r3, [r1, #2]
		}
	}
}
   11f28:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   11f2a:	f023 0301 	bic.w	r3, r3, #1
   11f2e:	e7fa      	b.n	11f26 <set_chunk_used+0x26>

00011f30 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11f30:	0053      	lsls	r3, r2, #1
   11f32:	2201      	movs	r2, #1
   11f34:	f7ff bfd3 	b.w	11ede <chunk_set>

00011f38 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   11f38:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   11f3a:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   11f3c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   11f40:	bf2c      	ite	cs
   11f42:	2002      	movcs	r0, #2
   11f44:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   11f46:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   11f48:	fab0 f080 	clz	r0, r0
}
   11f4c:	f1c0 001f 	rsb	r0, r0, #31
   11f50:	4770      	bx	lr

00011f52 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   11f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f56:	4604      	mov	r4, r0
   11f58:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   11f5a:	f7ff ffcb 	bl	11ef4 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   11f5e:	68a3      	ldr	r3, [r4, #8]
   11f60:	4601      	mov	r1, r0
   11f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11f66:	d301      	bcc.n	11f6c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   11f68:	2801      	cmp	r0, #1
   11f6a:	d035      	beq.n	11fd8 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   11f6c:	4620      	mov	r0, r4
   11f6e:	f7ff ffe3 	bl	11f38 <bucket_idx>
	if (b->next == 0) {
   11f72:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   11f76:	6916      	ldr	r6, [r2, #16]
   11f78:	b99e      	cbnz	r6, 11fa2 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   11f7a:	2301      	movs	r3, #1
   11f7c:	fa03 f000 	lsl.w	r0, r3, r0
   11f80:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   11f82:	4629      	mov	r1, r5
   11f84:	4303      	orrs	r3, r0
   11f86:	60e3      	str	r3, [r4, #12]
   11f88:	4620      	mov	r0, r4
		b->next = c;
   11f8a:	6115      	str	r5, [r2, #16]
   11f8c:	462b      	mov	r3, r5
   11f8e:	2202      	movs	r2, #2
   11f90:	f7ff ffa5 	bl	11ede <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   11f94:	2203      	movs	r2, #3
   11f96:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   11f98:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
   11f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11f9e:	f7ff bf9e 	b.w	11ede <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   11fa2:	2202      	movs	r2, #2
   11fa4:	4631      	mov	r1, r6
   11fa6:	4620      	mov	r0, r4
   11fa8:	f7ff ff8e 	bl	11ec8 <chunk_field>
   11fac:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   11fae:	4603      	mov	r3, r0
   11fb0:	2202      	movs	r2, #2
   11fb2:	4629      	mov	r1, r5
   11fb4:	4620      	mov	r0, r4
   11fb6:	f7ff ff92 	bl	11ede <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   11fba:	4633      	mov	r3, r6
   11fbc:	2203      	movs	r2, #3
   11fbe:	4629      	mov	r1, r5
   11fc0:	4620      	mov	r0, r4
   11fc2:	f7ff ff8c 	bl	11ede <chunk_set>
   11fc6:	2203      	movs	r2, #3
   11fc8:	4639      	mov	r1, r7
   11fca:	462b      	mov	r3, r5
   11fcc:	4620      	mov	r0, r4
   11fce:	f7ff ff86 	bl	11ede <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   11fd2:	2202      	movs	r2, #2
   11fd4:	4631      	mov	r1, r6
   11fd6:	e7df      	b.n	11f98 <free_list_add+0x46>
   11fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011fdc <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   11fdc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   11fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11fe2:	bf2c      	ite	cs
   11fe4:	2508      	movcs	r5, #8
   11fe6:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   11fe8:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   11fea:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   11fec:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11fee:	1dcc      	adds	r4, r1, #7
   11ff0:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   11ff4:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   11ff6:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   11ffa:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11ffc:	440d      	add	r5, r1
   11ffe:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   12002:	1b2d      	subs	r5, r5, r4
   12004:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12006:	4629      	mov	r1, r5
   12008:	4620      	mov	r0, r4
	h->len = buf_sz;
   1200a:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1200c:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1200e:	f7ff ff93 	bl	11f38 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12012:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   12014:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   12016:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   12018:	361b      	adds	r6, #27
   1201a:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   1201c:	f104 0210 	add.w	r2, r4, #16
   12020:	428b      	cmp	r3, r1
   12022:	db29      	blt.n	12078 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   12024:	4632      	mov	r2, r6
   12026:	4620      	mov	r0, r4
   12028:	2100      	movs	r1, #0
   1202a:	f7ff ff81 	bl	11f30 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1202e:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   12030:	4620      	mov	r0, r4
   12032:	2201      	movs	r2, #1
   12034:	2100      	movs	r1, #0
   12036:	f7ff ff63 	bl	11f00 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1203a:	463a      	mov	r2, r7
   1203c:	4631      	mov	r1, r6
   1203e:	f7ff ff77 	bl	11f30 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   12042:	4633      	mov	r3, r6
   12044:	4631      	mov	r1, r6
   12046:	4620      	mov	r0, r4
   12048:	2200      	movs	r2, #0
   1204a:	f7ff ff48 	bl	11ede <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1204e:	4629      	mov	r1, r5
   12050:	4620      	mov	r0, r4
   12052:	2200      	movs	r2, #0
   12054:	f7ff ff6c 	bl	11f30 <set_chunk_size>
   12058:	463b      	mov	r3, r7
   1205a:	4629      	mov	r1, r5
   1205c:	4620      	mov	r0, r4
   1205e:	2200      	movs	r2, #0
   12060:	f7ff ff3d 	bl	11ede <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   12064:	4629      	mov	r1, r5
   12066:	4620      	mov	r0, r4
   12068:	2201      	movs	r2, #1
   1206a:	f7ff ff49 	bl	11f00 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1206e:	4631      	mov	r1, r6
}
   12070:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   12074:	f7ff bf6d 	b.w	11f52 <free_list_add>
		h->buckets[i].next = 0;
   12078:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1207c:	3301      	adds	r3, #1
   1207e:	e7cf      	b.n	12020 <sys_heap_init+0x44>

00012080 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   12080:	4770      	bx	lr

00012082 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   12082:	f7fe bac1 	b.w	10608 <SystemInit>

00012086 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   12086:	2300      	movs	r3, #0
	list->head = NULL;
   12088:	e9c0 3300 	strd	r3, r3, [r0]
}
   1208c:	4770      	bx	lr

0001208e <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1208e:	6803      	ldr	r3, [r0, #0]
   12090:	b923      	cbnz	r3, 1209c <log_list_add_tail+0xe>
		list->head = msg;
   12092:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   12094:	2300      	movs	r3, #0
	list->tail = msg;
   12096:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   12098:	600b      	str	r3, [r1, #0]
}
   1209a:	4770      	bx	lr
		list->tail->next = msg;
   1209c:	6843      	ldr	r3, [r0, #4]
   1209e:	6019      	str	r1, [r3, #0]
   120a0:	e7f8      	b.n	12094 <log_list_add_tail+0x6>

000120a2 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   120a2:	6800      	ldr	r0, [r0, #0]
   120a4:	4770      	bx	lr

000120a6 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   120a6:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   120a8:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   120aa:	b108      	cbz	r0, 120b0 <log_list_head_get+0xa>
		list->head = list->head->next;
   120ac:	6802      	ldr	r2, [r0, #0]
   120ae:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   120b0:	4770      	bx	lr

000120b2 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   120b2:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   120b4:	f7fb f82c 	bl	d110 <log_msg_chunk_alloc>

	if (msg != NULL) {
   120b8:	b118      	cbz	r0, 120c2 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   120ba:	2301      	movs	r3, #1
   120bc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   120be:	2300      	movs	r3, #0
   120c0:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   120c2:	bd08      	pop	{r3, pc}

000120c4 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   120c4:	f7fb bd60 	b.w	db88 <z_timer_cycle_get_32>

000120c8 <dummy_timestamp>:
   120c8:	2000      	movs	r0, #0
   120ca:	4770      	bx	lr

000120cc <z_log_get_s_mask>:
{
   120cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   120ce:	4605      	mov	r5, r0
	uint32_t mask = 0;
   120d0:	2000      	movs	r0, #0
				mask |= BIT(arg);
   120d2:	2701      	movs	r7, #1
	uint32_t arg = 0;
   120d4:	4603      	mov	r3, r0
	bool arm = false;
   120d6:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
   120d8:	f815 4b01 	ldrb.w	r4, [r5], #1
   120dc:	b10c      	cbz	r4, 120e2 <z_log_get_s_mask+0x16>
   120de:	428b      	cmp	r3, r1
   120e0:	d300      	bcc.n	120e4 <z_log_get_s_mask+0x18>
}
   120e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   120e4:	2c25      	cmp	r4, #37	; 0x25
   120e6:	d102      	bne.n	120ee <z_log_get_s_mask+0x22>
			arm = !arm;
   120e8:	f082 0201 	eor.w	r2, r2, #1
   120ec:	e7f4      	b.n	120d8 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   120ee:	2a00      	cmp	r2, #0
   120f0:	d0f2      	beq.n	120d8 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   120f2:	f044 0620 	orr.w	r6, r4, #32
   120f6:	3e61      	subs	r6, #97	; 0x61
   120f8:	2e19      	cmp	r6, #25
   120fa:	d8ed      	bhi.n	120d8 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   120fc:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   120fe:	bf04      	itt	eq
   12100:	fa07 f203 	lsleq.w	r2, r7, r3
   12104:	4310      	orreq	r0, r2
			arg++;
   12106:	3301      	adds	r3, #1
			arm = false;
   12108:	2200      	movs	r2, #0
   1210a:	e7e5      	b.n	120d8 <z_log_get_s_mask+0xc>

0001210c <log_0>:
{
   1210c:	b538      	push	{r3, r4, r5, lr}
   1210e:	4605      	mov	r5, r0
   12110:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   12112:	f7ff ffce 	bl	120b2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   12116:	b128      	cbz	r0, 12124 <log_0+0x18>
		msg_finalize(msg, src_level);
   12118:	4621      	mov	r1, r4
		msg->str = str;
   1211a:	6105      	str	r5, [r0, #16]
}
   1211c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   12120:	f7fa bf18 	b.w	cf54 <msg_finalize>
}
   12124:	bd38      	pop	{r3, r4, r5, pc}

00012126 <log_1>:
{
   12126:	b570      	push	{r4, r5, r6, lr}
   12128:	4606      	mov	r6, r0
   1212a:	460d      	mov	r5, r1
   1212c:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1212e:	f7ff ffc0 	bl	120b2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   12132:	b158      	cbz	r0, 1214c <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   12134:	2101      	movs	r1, #1
   12136:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   12138:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1213a:	f361 1207 	bfi	r2, r1, #4, #4
   1213e:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   12140:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
   12142:	6145      	str	r5, [r0, #20]
}
   12144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   12148:	f7fa bf04 	b.w	cf54 <msg_finalize>
}
   1214c:	bd70      	pop	{r4, r5, r6, pc}

0001214e <log_2>:
{
   1214e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12152:	4680      	mov	r8, r0
   12154:	460f      	mov	r7, r1
   12156:	4616      	mov	r6, r2
   12158:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1215a:	f7ff ffaa 	bl	120b2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1215e:	b168      	cbz	r0, 1217c <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   12160:	2202      	movs	r2, #2
   12162:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   12164:	4629      	mov	r1, r5
   12166:	f362 1307 	bfi	r3, r2, #4, #4
   1216a:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1216c:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   12170:	f8c0 8010 	str.w	r8, [r0, #16]
}
   12174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   12178:	f7fa beec 	b.w	cf54 <msg_finalize>
}
   1217c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012180 <log_3>:
{
   12180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12184:	4680      	mov	r8, r0
   12186:	460f      	mov	r7, r1
   12188:	4616      	mov	r6, r2
   1218a:	461d      	mov	r5, r3
   1218c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   12190:	f7ff ff8f 	bl	120b2 <z_log_msg_std_alloc>

	if (msg != NULL) {
   12194:	b170      	cbz	r0, 121b4 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   12196:	2203      	movs	r2, #3
   12198:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1219a:	4649      	mov	r1, r9
   1219c:	f362 1307 	bfi	r3, r2, #4, #4
   121a0:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   121a2:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   121a6:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   121aa:	61c5      	str	r5, [r0, #28]
}
   121ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   121b0:	f7fa bed0 	b.w	cf54 <msg_finalize>
}
   121b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000121b8 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   121b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   121bc:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   121be:	8903      	ldrh	r3, [r0, #8]
{
   121c0:	460e      	mov	r6, r1
   121c2:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   121c4:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   121c8:	42a2      	cmp	r2, r4
{
   121ca:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   121ce:	d803      	bhi.n	121d8 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   121d0:	2300      	movs	r3, #0
   121d2:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   121d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   121d8:	680b      	ldr	r3, [r1, #0]
   121da:	4423      	add	r3, r4
   121dc:	4293      	cmp	r3, r2
		*length = available_len - offset;
   121de:	bf84      	itt	hi
   121e0:	1b13      	subhi	r3, r2, r4
   121e2:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   121e4:	2a0c      	cmp	r2, #12
	req_len = *length;
   121e6:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   121ea:	d92a      	bls.n	12242 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   121ec:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   121ee:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   121f2:	d82d      	bhi.n	12250 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   121f4:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
   121f6:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   121f8:	454a      	cmp	r2, r9
   121fa:	bf28      	it	cs
   121fc:	464a      	movcs	r2, r9
   121fe:	4420      	add	r0, r4
   12200:	4615      	mov	r5, r2
		if (put_op) {
   12202:	b317      	cbz	r7, 1224a <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   12204:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   12206:	f000 fb7a 	bl	128fe <memcpy>
		req_len -= cpy_len;
   1220a:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1220e:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   12210:	f1b9 0f00 	cmp.w	r9, #0
   12214:	d0de      	beq.n	121d4 <log_msg_hexdump_data_op+0x1c>
   12216:	f1b8 0f00 	cmp.w	r8, #0
   1221a:	d0db      	beq.n	121d4 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1221c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   12220:	454d      	cmp	r5, r9
   12222:	bf28      	it	cs
   12224:	464d      	movcs	r5, r9
		if (put_op) {
   12226:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
   12228:	462a      	mov	r2, r5
   1222a:	4440      	add	r0, r8
		if (put_op) {
   1222c:	b1bf      	cbz	r7, 1225e <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   1222e:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   12230:	f000 fb65 	bl	128fe <memcpy>
		offset = 0;
   12234:	2400      	movs	r4, #0
		cont = cont->next;
   12236:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   1223a:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1223e:	442e      	add	r6, r5
   12240:	e7e6      	b.n	12210 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   12242:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   12246:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   12248:	e7d6      	b.n	121f8 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1224a:	4601      	mov	r1, r0
   1224c:	4630      	mov	r0, r6
   1224e:	e7da      	b.n	12206 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   12250:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   12252:	2c1b      	cmp	r4, #27
   12254:	d9dc      	bls.n	12210 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   12256:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1225a:	3c1c      	subs	r4, #28
   1225c:	e7f9      	b.n	12252 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1225e:	4601      	mov	r1, r0
   12260:	4630      	mov	r0, r6
   12262:	e7e5      	b.n	12230 <log_msg_hexdump_data_op+0x78>

00012264 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12264:	3004      	adds	r0, #4
   12266:	e8d0 3fef 	ldaex	r3, [r0]
   1226a:	3301      	adds	r3, #1
   1226c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   12270:	2a00      	cmp	r2, #0
   12272:	d1f8      	bne.n	12266 <log_msg_get+0x2>
}
   12274:	4770      	bx	lr

00012276 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   12276:	7a40      	ldrb	r0, [r0, #9]
}
   12278:	0900      	lsrs	r0, r0, #4
   1227a:	4770      	bx	lr

0001227c <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1227c:	7a43      	ldrb	r3, [r0, #9]
   1227e:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   12282:	ea4f 1213 	mov.w	r2, r3, lsr #4
   12286:	d216      	bcs.n	122b6 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   12288:	2a03      	cmp	r2, #3
   1228a:	d803      	bhi.n	12294 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1228c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   12290:	6948      	ldr	r0, [r1, #20]
   12292:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   12294:	2901      	cmp	r1, #1
   12296:	d803      	bhi.n	122a0 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   12298:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1229c:	6988      	ldr	r0, [r1, #24]
   1229e:	4770      	bx	lr
	cont = msg->payload.ext.next;
   122a0:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   122a2:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   122a4:	2906      	cmp	r1, #6
   122a6:	d803      	bhi.n	122b0 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   122a8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   122ac:	6848      	ldr	r0, [r1, #4]
   122ae:	4770      	bx	lr
		cont = cont->next;
   122b0:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   122b2:	3907      	subs	r1, #7
		cont = cont->next;
   122b4:	e7f6      	b.n	122a4 <log_msg_arg_get+0x28>
		return 0;
   122b6:	2000      	movs	r0, #0
}
   122b8:	4770      	bx	lr

000122ba <log_msg_put>:
{
   122ba:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   122bc:	1d02      	adds	r2, r0, #4
   122be:	e8d2 1fef 	ldaex	r1, [r2]
   122c2:	3901      	subs	r1, #1
   122c4:	e8c2 1fec 	stlex	ip, r1, [r2]
   122c8:	f1bc 0f00 	cmp.w	ip, #0
   122cc:	d1f7      	bne.n	122be <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   122ce:	685b      	ldr	r3, [r3, #4]
   122d0:	b90b      	cbnz	r3, 122d6 <log_msg_put+0x1c>
		msg_free(msg);
   122d2:	f7fa bf31 	b.w	d138 <msg_free>
}
   122d6:	4770      	bx	lr

000122d8 <log_msg_str_get>:
}
   122d8:	6900      	ldr	r0, [r0, #16]
   122da:	4770      	bx	lr

000122dc <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   122dc:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   122de:	2400      	movs	r4, #0
   122e0:	9400      	str	r4, [sp, #0]
   122e2:	f7ff ff69 	bl	121b8 <log_msg_hexdump_data_op>
}
   122e6:	b002      	add	sp, #8
   122e8:	bd10      	pop	{r4, pc}

000122ea <buffer_write>:
{
   122ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   122ec:	4606      	mov	r6, r0
   122ee:	460d      	mov	r5, r1
   122f0:	4614      	mov	r4, r2
   122f2:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   122f4:	4621      	mov	r1, r4
   122f6:	4628      	mov	r0, r5
   122f8:	463a      	mov	r2, r7
   122fa:	47b0      	blx	r6
	} while (len != 0);
   122fc:	1a24      	subs	r4, r4, r0
		buf += processed;
   122fe:	4405      	add	r5, r0
	} while (len != 0);
   12300:	d1f8      	bne.n	122f4 <buffer_write+0xa>
}
   12302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012304 <std_print>:
{
   12304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12308:	b08e      	sub	sp, #56	; 0x38
   1230a:	af0e      	add	r7, sp, #56	; 0x38
   1230c:	4680      	mov	r8, r0
   1230e:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   12310:	f7ff ffe2 	bl	122d8 <log_msg_str_get>
   12314:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   12316:	4640      	mov	r0, r8
   12318:	f7ff ffad 	bl	12276 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1231c:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   12320:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   12322:	0083      	lsls	r3, r0, #2
   12324:	3307      	adds	r3, #7
   12326:	f023 0307 	bic.w	r3, r3, #7
   1232a:	ebad 0d03 	sub.w	sp, sp, r3
   1232e:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   12330:	45d1      	cmp	r9, sl
   12332:	d116      	bne.n	12362 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   12334:	4640      	mov	r0, r8
   12336:	f7ff ff9e 	bl	12276 <log_msg_nargs_get>
   1233a:	280f      	cmp	r0, #15
   1233c:	d81e      	bhi.n	1237c <std_print+0x78>
   1233e:	e8df f010 	tbh	[pc, r0, lsl #1]
   12342:	0019      	.short	0x0019
   12344:	00260020 	.word	0x00260020
   12348:	0036002d 	.word	0x0036002d
   1234c:	004e0041 	.word	0x004e0041
   12350:	006e005d 	.word	0x006e005d
   12354:	00960081 	.word	0x00960081
   12358:	00c600ad 	.word	0x00c600ad
   1235c:	00fe00e1 	.word	0x00fe00e1
   12360:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   12362:	4649      	mov	r1, r9
   12364:	4640      	mov	r0, r8
   12366:	f7ff ff89 	bl	1227c <log_msg_arg_get>
   1236a:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1236e:	f109 0901 	add.w	r9, r9, #1
   12372:	e7dd      	b.n	12330 <std_print+0x2c>
		print_formatted(log_output, str);
   12374:	4631      	mov	r1, r6
   12376:	4628      	mov	r0, r5
   12378:	f7fa ff1c 	bl	d1b4 <print_formatted>
}
   1237c:	46bd      	mov	sp, r7
   1237e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   12382:	4631      	mov	r1, r6
   12384:	4628      	mov	r0, r5
   12386:	6822      	ldr	r2, [r4, #0]
   12388:	f7fa ff14 	bl	d1b4 <print_formatted>
		break;
   1238c:	e7f6      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1238e:	4631      	mov	r1, r6
   12390:	e9d4 2300 	ldrd	r2, r3, [r4]
   12394:	4628      	mov	r0, r5
   12396:	f7fa ff0d 	bl	d1b4 <print_formatted>
		break;
   1239a:	e7ef      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1239c:	68a3      	ldr	r3, [r4, #8]
   1239e:	4631      	mov	r1, r6
   123a0:	9300      	str	r3, [sp, #0]
   123a2:	4628      	mov	r0, r5
   123a4:	e9d4 2300 	ldrd	r2, r3, [r4]
   123a8:	f7fa ff04 	bl	d1b4 <print_formatted>
		break;
   123ac:	e7e6      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   123ae:	68e3      	ldr	r3, [r4, #12]
   123b0:	4631      	mov	r1, r6
   123b2:	9301      	str	r3, [sp, #4]
   123b4:	68a3      	ldr	r3, [r4, #8]
   123b6:	4628      	mov	r0, r5
   123b8:	9300      	str	r3, [sp, #0]
   123ba:	e9d4 2300 	ldrd	r2, r3, [r4]
   123be:	f7fa fef9 	bl	d1b4 <print_formatted>
		break;
   123c2:	e7db      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   123c4:	6923      	ldr	r3, [r4, #16]
   123c6:	4631      	mov	r1, r6
   123c8:	9302      	str	r3, [sp, #8]
   123ca:	68e3      	ldr	r3, [r4, #12]
   123cc:	4628      	mov	r0, r5
   123ce:	9301      	str	r3, [sp, #4]
   123d0:	68a3      	ldr	r3, [r4, #8]
   123d2:	9300      	str	r3, [sp, #0]
   123d4:	e9d4 2300 	ldrd	r2, r3, [r4]
   123d8:	f7fa feec 	bl	d1b4 <print_formatted>
		break;
   123dc:	e7ce      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   123de:	6963      	ldr	r3, [r4, #20]
   123e0:	4631      	mov	r1, r6
   123e2:	9303      	str	r3, [sp, #12]
   123e4:	6923      	ldr	r3, [r4, #16]
   123e6:	4628      	mov	r0, r5
   123e8:	9302      	str	r3, [sp, #8]
   123ea:	68e3      	ldr	r3, [r4, #12]
   123ec:	9301      	str	r3, [sp, #4]
   123ee:	68a3      	ldr	r3, [r4, #8]
   123f0:	9300      	str	r3, [sp, #0]
   123f2:	e9d4 2300 	ldrd	r2, r3, [r4]
   123f6:	f7fa fedd 	bl	d1b4 <print_formatted>
		break;
   123fa:	e7bf      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   123fc:	69a3      	ldr	r3, [r4, #24]
   123fe:	4631      	mov	r1, r6
   12400:	9304      	str	r3, [sp, #16]
   12402:	6963      	ldr	r3, [r4, #20]
   12404:	4628      	mov	r0, r5
   12406:	9303      	str	r3, [sp, #12]
   12408:	6923      	ldr	r3, [r4, #16]
   1240a:	9302      	str	r3, [sp, #8]
   1240c:	68e3      	ldr	r3, [r4, #12]
   1240e:	9301      	str	r3, [sp, #4]
   12410:	68a3      	ldr	r3, [r4, #8]
   12412:	9300      	str	r3, [sp, #0]
   12414:	e9d4 2300 	ldrd	r2, r3, [r4]
   12418:	f7fa fecc 	bl	d1b4 <print_formatted>
		break;
   1241c:	e7ae      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1241e:	69e3      	ldr	r3, [r4, #28]
   12420:	4631      	mov	r1, r6
   12422:	9305      	str	r3, [sp, #20]
   12424:	69a3      	ldr	r3, [r4, #24]
   12426:	4628      	mov	r0, r5
   12428:	9304      	str	r3, [sp, #16]
   1242a:	6963      	ldr	r3, [r4, #20]
   1242c:	9303      	str	r3, [sp, #12]
   1242e:	6923      	ldr	r3, [r4, #16]
   12430:	9302      	str	r3, [sp, #8]
   12432:	68e3      	ldr	r3, [r4, #12]
   12434:	9301      	str	r3, [sp, #4]
   12436:	68a3      	ldr	r3, [r4, #8]
   12438:	9300      	str	r3, [sp, #0]
   1243a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1243e:	f7fa feb9 	bl	d1b4 <print_formatted>
		break;
   12442:	e79b      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   12444:	6a23      	ldr	r3, [r4, #32]
   12446:	4631      	mov	r1, r6
   12448:	9306      	str	r3, [sp, #24]
   1244a:	69e3      	ldr	r3, [r4, #28]
   1244c:	4628      	mov	r0, r5
   1244e:	9305      	str	r3, [sp, #20]
   12450:	69a3      	ldr	r3, [r4, #24]
   12452:	9304      	str	r3, [sp, #16]
   12454:	6963      	ldr	r3, [r4, #20]
   12456:	9303      	str	r3, [sp, #12]
   12458:	6923      	ldr	r3, [r4, #16]
   1245a:	9302      	str	r3, [sp, #8]
   1245c:	68e3      	ldr	r3, [r4, #12]
   1245e:	9301      	str	r3, [sp, #4]
   12460:	68a3      	ldr	r3, [r4, #8]
   12462:	9300      	str	r3, [sp, #0]
   12464:	e9d4 2300 	ldrd	r2, r3, [r4]
   12468:	f7fa fea4 	bl	d1b4 <print_formatted>
		break;
   1246c:	e786      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1246e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12470:	4631      	mov	r1, r6
   12472:	9307      	str	r3, [sp, #28]
   12474:	6a23      	ldr	r3, [r4, #32]
   12476:	4628      	mov	r0, r5
   12478:	9306      	str	r3, [sp, #24]
   1247a:	69e3      	ldr	r3, [r4, #28]
   1247c:	9305      	str	r3, [sp, #20]
   1247e:	69a3      	ldr	r3, [r4, #24]
   12480:	9304      	str	r3, [sp, #16]
   12482:	6963      	ldr	r3, [r4, #20]
   12484:	9303      	str	r3, [sp, #12]
   12486:	6923      	ldr	r3, [r4, #16]
   12488:	9302      	str	r3, [sp, #8]
   1248a:	68e3      	ldr	r3, [r4, #12]
   1248c:	9301      	str	r3, [sp, #4]
   1248e:	68a3      	ldr	r3, [r4, #8]
   12490:	9300      	str	r3, [sp, #0]
   12492:	e9d4 2300 	ldrd	r2, r3, [r4]
   12496:	f7fa fe8d 	bl	d1b4 <print_formatted>
		break;
   1249a:	e76f      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1249c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1249e:	4631      	mov	r1, r6
   124a0:	9308      	str	r3, [sp, #32]
   124a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   124a4:	4628      	mov	r0, r5
   124a6:	9307      	str	r3, [sp, #28]
   124a8:	6a23      	ldr	r3, [r4, #32]
   124aa:	9306      	str	r3, [sp, #24]
   124ac:	69e3      	ldr	r3, [r4, #28]
   124ae:	9305      	str	r3, [sp, #20]
   124b0:	69a3      	ldr	r3, [r4, #24]
   124b2:	9304      	str	r3, [sp, #16]
   124b4:	6963      	ldr	r3, [r4, #20]
   124b6:	9303      	str	r3, [sp, #12]
   124b8:	6923      	ldr	r3, [r4, #16]
   124ba:	9302      	str	r3, [sp, #8]
   124bc:	68e3      	ldr	r3, [r4, #12]
   124be:	9301      	str	r3, [sp, #4]
   124c0:	68a3      	ldr	r3, [r4, #8]
   124c2:	9300      	str	r3, [sp, #0]
   124c4:	e9d4 2300 	ldrd	r2, r3, [r4]
   124c8:	f7fa fe74 	bl	d1b4 <print_formatted>
		break;
   124cc:	e756      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   124ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   124d0:	4631      	mov	r1, r6
   124d2:	9309      	str	r3, [sp, #36]	; 0x24
   124d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   124d6:	4628      	mov	r0, r5
   124d8:	9308      	str	r3, [sp, #32]
   124da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   124dc:	9307      	str	r3, [sp, #28]
   124de:	6a23      	ldr	r3, [r4, #32]
   124e0:	9306      	str	r3, [sp, #24]
   124e2:	69e3      	ldr	r3, [r4, #28]
   124e4:	9305      	str	r3, [sp, #20]
   124e6:	69a3      	ldr	r3, [r4, #24]
   124e8:	9304      	str	r3, [sp, #16]
   124ea:	6963      	ldr	r3, [r4, #20]
   124ec:	9303      	str	r3, [sp, #12]
   124ee:	6923      	ldr	r3, [r4, #16]
   124f0:	9302      	str	r3, [sp, #8]
   124f2:	68e3      	ldr	r3, [r4, #12]
   124f4:	9301      	str	r3, [sp, #4]
   124f6:	68a3      	ldr	r3, [r4, #8]
   124f8:	9300      	str	r3, [sp, #0]
   124fa:	e9d4 2300 	ldrd	r2, r3, [r4]
   124fe:	f7fa fe59 	bl	d1b4 <print_formatted>
		break;
   12502:	e73b      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   12504:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12506:	4631      	mov	r1, r6
   12508:	930a      	str	r3, [sp, #40]	; 0x28
   1250a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1250c:	4628      	mov	r0, r5
   1250e:	9309      	str	r3, [sp, #36]	; 0x24
   12510:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12512:	9308      	str	r3, [sp, #32]
   12514:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12516:	9307      	str	r3, [sp, #28]
   12518:	6a23      	ldr	r3, [r4, #32]
   1251a:	9306      	str	r3, [sp, #24]
   1251c:	69e3      	ldr	r3, [r4, #28]
   1251e:	9305      	str	r3, [sp, #20]
   12520:	69a3      	ldr	r3, [r4, #24]
   12522:	9304      	str	r3, [sp, #16]
   12524:	6963      	ldr	r3, [r4, #20]
   12526:	9303      	str	r3, [sp, #12]
   12528:	6923      	ldr	r3, [r4, #16]
   1252a:	9302      	str	r3, [sp, #8]
   1252c:	68e3      	ldr	r3, [r4, #12]
   1252e:	9301      	str	r3, [sp, #4]
   12530:	68a3      	ldr	r3, [r4, #8]
   12532:	9300      	str	r3, [sp, #0]
   12534:	e9d4 2300 	ldrd	r2, r3, [r4]
   12538:	f7fa fe3c 	bl	d1b4 <print_formatted>
		break;
   1253c:	e71e      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1253e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12540:	4631      	mov	r1, r6
   12542:	930b      	str	r3, [sp, #44]	; 0x2c
   12544:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12546:	4628      	mov	r0, r5
   12548:	930a      	str	r3, [sp, #40]	; 0x28
   1254a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1254c:	9309      	str	r3, [sp, #36]	; 0x24
   1254e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12550:	9308      	str	r3, [sp, #32]
   12552:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12554:	9307      	str	r3, [sp, #28]
   12556:	6a23      	ldr	r3, [r4, #32]
   12558:	9306      	str	r3, [sp, #24]
   1255a:	69e3      	ldr	r3, [r4, #28]
   1255c:	9305      	str	r3, [sp, #20]
   1255e:	69a3      	ldr	r3, [r4, #24]
   12560:	9304      	str	r3, [sp, #16]
   12562:	6963      	ldr	r3, [r4, #20]
   12564:	9303      	str	r3, [sp, #12]
   12566:	6923      	ldr	r3, [r4, #16]
   12568:	9302      	str	r3, [sp, #8]
   1256a:	68e3      	ldr	r3, [r4, #12]
   1256c:	9301      	str	r3, [sp, #4]
   1256e:	68a3      	ldr	r3, [r4, #8]
   12570:	9300      	str	r3, [sp, #0]
   12572:	e9d4 2300 	ldrd	r2, r3, [r4]
   12576:	f7fa fe1d 	bl	d1b4 <print_formatted>
		break;
   1257a:	e6ff      	b.n	1237c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1257c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1257e:	4631      	mov	r1, r6
   12580:	930c      	str	r3, [sp, #48]	; 0x30
   12582:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12584:	4628      	mov	r0, r5
   12586:	930b      	str	r3, [sp, #44]	; 0x2c
   12588:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1258a:	930a      	str	r3, [sp, #40]	; 0x28
   1258c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1258e:	9309      	str	r3, [sp, #36]	; 0x24
   12590:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12592:	9308      	str	r3, [sp, #32]
   12594:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12596:	9307      	str	r3, [sp, #28]
   12598:	6a23      	ldr	r3, [r4, #32]
   1259a:	9306      	str	r3, [sp, #24]
   1259c:	69e3      	ldr	r3, [r4, #28]
   1259e:	9305      	str	r3, [sp, #20]
   125a0:	69a3      	ldr	r3, [r4, #24]
   125a2:	9304      	str	r3, [sp, #16]
   125a4:	6963      	ldr	r3, [r4, #20]
   125a6:	9303      	str	r3, [sp, #12]
   125a8:	6923      	ldr	r3, [r4, #16]
   125aa:	9302      	str	r3, [sp, #8]
   125ac:	68e3      	ldr	r3, [r4, #12]
   125ae:	9301      	str	r3, [sp, #4]
   125b0:	68a3      	ldr	r3, [r4, #8]
   125b2:	9300      	str	r3, [sp, #0]
   125b4:	e9d4 2300 	ldrd	r2, r3, [r4]
   125b8:	f7fa fdfc 	bl	d1b4 <print_formatted>
}
   125bc:	e6de      	b.n	1237c <std_print+0x78>

000125be <log_output_flush>:
		     log_output->control_block->offset,
   125be:	6842      	ldr	r2, [r0, #4]
{
   125c0:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   125c2:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   125c6:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   125c8:	6881      	ldr	r1, [r0, #8]
   125ca:	6800      	ldr	r0, [r0, #0]
   125cc:	f7ff fe8d 	bl	122ea <buffer_write>
	log_output->control_block->offset = 0;
   125d0:	2200      	movs	r2, #0
   125d2:	6863      	ldr	r3, [r4, #4]
   125d4:	601a      	str	r2, [r3, #0]
}
   125d6:	bd10      	pop	{r4, pc}

000125d8 <out_func>:
{
   125d8:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   125da:	684b      	ldr	r3, [r1, #4]
{
   125dc:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   125de:	681a      	ldr	r2, [r3, #0]
   125e0:	68cb      	ldr	r3, [r1, #12]
{
   125e2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   125e4:	429a      	cmp	r2, r3
   125e6:	d102      	bne.n	125ee <out_func+0x16>
		log_output_flush(out_ctx);
   125e8:	4608      	mov	r0, r1
   125ea:	f7ff ffe8 	bl	125be <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   125ee:	6863      	ldr	r3, [r4, #4]
   125f0:	e8d3 2fef 	ldaex	r2, [r3]
   125f4:	1c51      	adds	r1, r2, #1
   125f6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   125fa:	2800      	cmp	r0, #0
   125fc:	d1f8      	bne.n	125f0 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   125fe:	68a3      	ldr	r3, [r4, #8]
}
   12600:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   12602:	549d      	strb	r5, [r3, r2]
}
   12604:	bd38      	pop	{r3, r4, r5, pc}

00012606 <disk_access_init>:
{
   12606:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
   12608:	f7fb f80a 	bl	d620 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   1260c:	b130      	cbz	r0, 1261c <disk_access_init+0x16>
   1260e:	68c3      	ldr	r3, [r0, #12]
   12610:	b123      	cbz	r3, 1261c <disk_access_init+0x16>
				(disk->ops->init != NULL)) {
   12612:	681b      	ldr	r3, [r3, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
   12614:	b113      	cbz	r3, 1261c <disk_access_init+0x16>
}
   12616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->init(disk);
   1261a:	4718      	bx	r3
}
   1261c:	f06f 0015 	mvn.w	r0, #21
   12620:	bd10      	pop	{r4, pc}

00012622 <disk_access_status>:
{
   12622:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
   12624:	f7fa fffc 	bl	d620 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   12628:	b130      	cbz	r0, 12638 <disk_access_status+0x16>
   1262a:	68c3      	ldr	r3, [r0, #12]
   1262c:	b123      	cbz	r3, 12638 <disk_access_status+0x16>
				(disk->ops->status != NULL)) {
   1262e:	685b      	ldr	r3, [r3, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
   12630:	b113      	cbz	r3, 12638 <disk_access_status+0x16>
}
   12632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->status(disk);
   12636:	4718      	bx	r3
}
   12638:	f06f 0015 	mvn.w	r0, #21
   1263c:	bd10      	pop	{r4, pc}

0001263e <disk_access_read>:
{
   1263e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12642:	460d      	mov	r5, r1
   12644:	4616      	mov	r6, r2
   12646:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
   12648:	f7fa ffea 	bl	d620 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   1264c:	b150      	cbz	r0, 12664 <disk_access_read+0x26>
   1264e:	68c3      	ldr	r3, [r0, #12]
   12650:	b143      	cbz	r3, 12664 <disk_access_read+0x26>
				(disk->ops->read != NULL)) {
   12652:	689c      	ldr	r4, [r3, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
   12654:	b134      	cbz	r4, 12664 <disk_access_read+0x26>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
   12656:	463b      	mov	r3, r7
   12658:	4632      	mov	r2, r6
   1265a:	4629      	mov	r1, r5
   1265c:	46a4      	mov	ip, r4
}
   1265e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
   12662:	4760      	bx	ip
}
   12664:	f06f 0015 	mvn.w	r0, #21
   12668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001266c <disk_access_write>:
{
   1266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12670:	460d      	mov	r5, r1
   12672:	4616      	mov	r6, r2
   12674:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
   12676:	f7fa ffd3 	bl	d620 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   1267a:	b150      	cbz	r0, 12692 <disk_access_write+0x26>
   1267c:	68c3      	ldr	r3, [r0, #12]
   1267e:	b143      	cbz	r3, 12692 <disk_access_write+0x26>
				(disk->ops->write != NULL)) {
   12680:	68dc      	ldr	r4, [r3, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
   12682:	b134      	cbz	r4, 12692 <disk_access_write+0x26>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
   12684:	463b      	mov	r3, r7
   12686:	4632      	mov	r2, r6
   12688:	4629      	mov	r1, r5
   1268a:	46a4      	mov	ip, r4
}
   1268c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
   12690:	4760      	bx	ip
}
   12692:	f06f 0015 	mvn.w	r0, #21
   12696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001269a <disk_access_ioctl>:
{
   1269a:	b570      	push	{r4, r5, r6, lr}
   1269c:	460c      	mov	r4, r1
   1269e:	4615      	mov	r5, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
   126a0:	f7fa ffbe 	bl	d620 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
   126a4:	b140      	cbz	r0, 126b8 <disk_access_ioctl+0x1e>
   126a6:	68c3      	ldr	r3, [r0, #12]
   126a8:	b133      	cbz	r3, 126b8 <disk_access_ioctl+0x1e>
				(disk->ops->ioctl != NULL)) {
   126aa:	691b      	ldr	r3, [r3, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
   126ac:	b123      	cbz	r3, 126b8 <disk_access_ioctl+0x1e>
		rc = disk->ops->ioctl(disk, cmd, buf);
   126ae:	462a      	mov	r2, r5
   126b0:	4621      	mov	r1, r4
}
   126b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rc = disk->ops->ioctl(disk, cmd, buf);
   126b6:	4718      	bx	r3
}
   126b8:	f06f 0015 	mvn.w	r0, #21
   126bc:	bd70      	pop	{r4, r5, r6, pc}

000126be <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   126be:	b2cb      	uxtb	r3, r1
   126c0:	210c      	movs	r1, #12
   126c2:	68c2      	ldr	r2, [r0, #12]
   126c4:	fb03 2101 	mla	r1, r3, r1, r2
   126c8:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   126ca:	f000 0007 	and.w	r0, r0, #7
   126ce:	4770      	bx	lr

000126d0 <set_off_state>:
	__asm__ volatile(
   126d0:	f04f 0320 	mov.w	r3, #32
   126d4:	f3ef 8211 	mrs	r2, BASEPRI
   126d8:	f383 8811 	msr	BASEPRI, r3
   126dc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   126e0:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   126e2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   126e6:	d001      	beq.n	126ec <set_off_state+0x1c>
   126e8:	428b      	cmp	r3, r1
   126ea:	d107      	bne.n	126fc <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   126ec:	2301      	movs	r3, #1
   126ee:	6003      	str	r3, [r0, #0]
	int err = 0;
   126f0:	2000      	movs	r0, #0
	__asm__ volatile(
   126f2:	f382 8811 	msr	BASEPRI, r2
   126f6:	f3bf 8f6f 	isb	sy
}
   126fa:	4770      	bx	lr
		err = -EPERM;
   126fc:	f04f 30ff 	mov.w	r0, #4294967295
   12700:	e7f7      	b.n	126f2 <set_off_state+0x22>

00012702 <set_starting_state>:
{
   12702:	b510      	push	{r4, lr}
	__asm__ volatile(
   12704:	f04f 0320 	mov.w	r3, #32
   12708:	f3ef 8211 	mrs	r2, BASEPRI
   1270c:	f383 8811 	msr	BASEPRI, r3
   12710:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   12714:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   12716:	f003 0407 	and.w	r4, r3, #7
   1271a:	2c01      	cmp	r4, #1
   1271c:	d106      	bne.n	1272c <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1271e:	6001      	str	r1, [r0, #0]
	int err = 0;
   12720:	2000      	movs	r0, #0
	__asm__ volatile(
   12722:	f382 8811 	msr	BASEPRI, r2
   12726:	f3bf 8f6f 	isb	sy
}
   1272a:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1272c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   12730:	428b      	cmp	r3, r1
		err = -EBUSY;
   12732:	bf14      	ite	ne
   12734:	f04f 30ff 	movne.w	r0, #4294967295
   12738:	f06f 000f 	mvneq.w	r0, #15
   1273c:	e7f1      	b.n	12722 <set_starting_state+0x20>

0001273e <set_on_state>:
	__asm__ volatile(
   1273e:	f04f 0320 	mov.w	r3, #32
   12742:	f3ef 8211 	mrs	r2, BASEPRI
   12746:	f383 8811 	msr	BASEPRI, r3
   1274a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1274e:	6803      	ldr	r3, [r0, #0]
   12750:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12754:	f043 0302 	orr.w	r3, r3, #2
   12758:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1275a:	f382 8811 	msr	BASEPRI, r2
   1275e:	f3bf 8f6f 	isb	sy
}
   12762:	4770      	bx	lr

00012764 <onoff_started_callback>:
{
   12764:	b410      	push	{r4}
	notify(mgr, 0);
   12766:	241c      	movs	r4, #28
	return &data->mgr[type];
   12768:	68c0      	ldr	r0, [r0, #12]
   1276a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1276c:	fb03 0004 	mla	r0, r3, r4, r0
   12770:	2100      	movs	r1, #0
}
   12772:	bc10      	pop	{r4}
	notify(mgr, 0);
   12774:	4710      	bx	r2

00012776 <blocking_start_callback>:
{
   12776:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   12778:	f7fe bfb4 	b.w	116e4 <z_impl_k_sem_give>

0001277c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1277c:	2000      	movs	r0, #0
   1277e:	f7fd bf8d 	b.w	1069c <nrfx_clock_stop>

00012782 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   12782:	2000      	movs	r0, #0
   12784:	f7fd bf58 	b.w	10638 <nrfx_clock_start>

00012788 <api_stop>:
{
   12788:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   1278a:	240c      	movs	r4, #12
   1278c:	b2c9      	uxtb	r1, r1
   1278e:	434c      	muls	r4, r1
{
   12790:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   12792:	68c0      	ldr	r0, [r0, #12]
   12794:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12798:	2180      	movs	r1, #128	; 0x80
   1279a:	4418      	add	r0, r3
   1279c:	f7ff ff98 	bl	126d0 <set_off_state>
	if (err < 0) {
   127a0:	2800      	cmp	r0, #0
   127a2:	db04      	blt.n	127ae <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   127a4:	6869      	ldr	r1, [r5, #4]
   127a6:	440c      	add	r4, r1
   127a8:	6863      	ldr	r3, [r4, #4]
   127aa:	4798      	blx	r3
	return 0;
   127ac:	2000      	movs	r0, #0
}
   127ae:	bd38      	pop	{r3, r4, r5, pc}

000127b0 <api_start>:
{
   127b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   127b2:	240c      	movs	r4, #12
   127b4:	b2c9      	uxtb	r1, r1
   127b6:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   127b8:	68c5      	ldr	r5, [r0, #12]
{
   127ba:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   127bc:	f104 0040 	add.w	r0, r4, #64	; 0x40
   127c0:	2180      	movs	r1, #128	; 0x80
   127c2:	4428      	add	r0, r5
{
   127c4:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   127c6:	f7ff ff9c 	bl	12702 <set_starting_state>
	if (err < 0) {
   127ca:	2800      	cmp	r0, #0
   127cc:	db08      	blt.n	127e0 <api_start+0x30>
	subdata->cb = data->cb;
   127ce:	687b      	ldr	r3, [r7, #4]
   127d0:	4425      	add	r5, r4
   127d2:	63ab      	str	r3, [r5, #56]	; 0x38
	subdata->user_data = data->user_data;
   127d4:	68bb      	ldr	r3, [r7, #8]
   127d6:	63eb      	str	r3, [r5, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
   127d8:	6873      	ldr	r3, [r6, #4]
   127da:	591b      	ldr	r3, [r3, r4]
   127dc:	4798      	blx	r3
	return 0;
   127de:	2000      	movs	r0, #0
}
   127e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000127e2 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   127e2:	4770      	bx	lr

000127e4 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   127e4:	4770      	bx	lr

000127e6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   127e6:	2100      	movs	r1, #0
   127e8:	2001      	movs	r0, #1
   127ea:	f7fb bac5 	b.w	dd78 <z_arm_fatal_error>

000127ee <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   127ee:	6e83      	ldr	r3, [r0, #104]	; 0x68
   127f0:	f383 880b 	msr	PSPLIM, r3
}
   127f4:	4770      	bx	lr

000127f6 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   127f6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   127f8:	6800      	ldr	r0, [r0, #0]
   127fa:	f7fb babd 	b.w	dd78 <z_arm_fatal_error>

000127fe <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   127fe:	b508      	push	{r3, lr}
	handler();
   12800:	f7fb faf2 	bl	dde8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   12804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   12808:	f7fb bd72 	b.w	e2f0 <z_arm_exc_exit>

0001280c <mpu_configure_region>:
{
   1280c:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   1280e:	890a      	ldrh	r2, [r1, #8]
   12810:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   12812:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   12814:	684c      	ldr	r4, [r1, #4]
   12816:	f002 021f 	and.w	r2, r2, #31
{
   1281a:	b085      	sub	sp, #20
   1281c:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   12820:	9300      	str	r3, [sp, #0]
   12822:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   12826:	f023 031f 	bic.w	r3, r3, #31
   1282a:	1e62      	subs	r2, r4, #1
   1282c:	4413      	add	r3, r2
   1282e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   12832:	280f      	cmp	r0, #15
   12834:	4604      	mov	r4, r0
   12836:	9303      	str	r3, [sp, #12]
   12838:	d905      	bls.n	12846 <mpu_configure_region+0x3a>
   1283a:	f7fb fdf3 	bl	e424 <region_allocate_and_init.part.0>
   1283e:	4604      	mov	r4, r0
}
   12840:	4620      	mov	r0, r4
   12842:	b005      	add	sp, #20
   12844:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   12846:	4669      	mov	r1, sp
   12848:	f7fb fdd4 	bl	e3f4 <region_init>
	return region_allocate_and_init(index,
   1284c:	e7f8      	b.n	12840 <mpu_configure_region+0x34>

0001284e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1284e:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   12852:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   12856:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   12858:	bf08      	it	eq
   1285a:	f06f 0015 	mvneq.w	r0, #21
   1285e:	4770      	bx	lr

00012860 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   12860:	4603      	mov	r3, r0
   12862:	3901      	subs	r1, #1
   12864:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   12868:	b90a      	cbnz	r2, 1286e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1286a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1286c:	4770      	bx	lr
		*d = *s;
   1286e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   12872:	e7f7      	b.n	12864 <strcpy+0x4>

00012874 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   12874:	b570      	push	{r4, r5, r6, lr}
   12876:	4605      	mov	r5, r0
   12878:	3901      	subs	r1, #1
   1287a:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1287c:	b142      	cbz	r2, 12890 <strncpy+0x1c>
   1287e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   12882:	1e56      	subs	r6, r2, #1
   12884:	b92b      	cbnz	r3, 12892 <strncpy+0x1e>
   12886:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   12888:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1288c:	42a2      	cmp	r2, r4
   1288e:	d1fb      	bne.n	12888 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   12890:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   12892:	4632      	mov	r2, r6
		*d = *s;
   12894:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   12898:	e7ef      	b.n	1287a <strncpy+0x6>

0001289a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1289a:	4603      	mov	r3, r0
	size_t n = 0;
   1289c:	2000      	movs	r0, #0

	while (*s != '\0') {
   1289e:	5c1a      	ldrb	r2, [r3, r0]
   128a0:	b902      	cbnz	r2, 128a4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   128a2:	4770      	bx	lr
		n++;
   128a4:	3001      	adds	r0, #1
   128a6:	e7fa      	b.n	1289e <strlen+0x4>

000128a8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   128a8:	1e43      	subs	r3, r0, #1
   128aa:	3901      	subs	r1, #1
   128ac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   128b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   128b4:	4282      	cmp	r2, r0
   128b6:	d101      	bne.n	128bc <strcmp+0x14>
   128b8:	2a00      	cmp	r2, #0
   128ba:	d1f7      	bne.n	128ac <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   128bc:	1a10      	subs	r0, r2, r0
   128be:	4770      	bx	lr

000128c0 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   128c0:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   128c2:	2400      	movs	r4, #0
   128c4:	42a2      	cmp	r2, r4
   128c6:	d008      	beq.n	128da <strncmp+0x1a>
   128c8:	5d03      	ldrb	r3, [r0, r4]
   128ca:	5d0d      	ldrb	r5, [r1, r4]
   128cc:	42ab      	cmp	r3, r5
   128ce:	d102      	bne.n	128d6 <strncmp+0x16>
   128d0:	3401      	adds	r4, #1
   128d2:	2b00      	cmp	r3, #0
   128d4:	d1f6      	bne.n	128c4 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   128d6:	1b58      	subs	r0, r3, r5
   128d8:	e000      	b.n	128dc <strncmp+0x1c>
   128da:	2000      	movs	r0, #0
}
   128dc:	bd30      	pop	{r4, r5, pc}

000128de <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   128de:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   128e0:	b15a      	cbz	r2, 128fa <memcmp+0x1c>
   128e2:	3901      	subs	r1, #1
   128e4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   128e6:	f810 2b01 	ldrb.w	r2, [r0], #1
   128ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   128ee:	42a0      	cmp	r0, r4
   128f0:	d001      	beq.n	128f6 <memcmp+0x18>
   128f2:	429a      	cmp	r2, r3
   128f4:	d0f7      	beq.n	128e6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   128f6:	1ad0      	subs	r0, r2, r3
}
   128f8:	bd10      	pop	{r4, pc}
		return 0;
   128fa:	4610      	mov	r0, r2
   128fc:	e7fc      	b.n	128f8 <memcmp+0x1a>

000128fe <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   128fe:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   12900:	ea81 0400 	eor.w	r4, r1, r0
   12904:	07a5      	lsls	r5, r4, #30
   12906:	4603      	mov	r3, r0
   12908:	d00b      	beq.n	12922 <memcpy+0x24>
   1290a:	3b01      	subs	r3, #1
   1290c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1290e:	4291      	cmp	r1, r2
   12910:	d11b      	bne.n	1294a <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   12912:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   12914:	2a00      	cmp	r2, #0
   12916:	d0fc      	beq.n	12912 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   12918:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1291c:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1291e:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   12922:	079c      	lsls	r4, r3, #30
   12924:	d1f6      	bne.n	12914 <memcpy+0x16>
   12926:	f022 0403 	bic.w	r4, r2, #3
   1292a:	1f1d      	subs	r5, r3, #4
   1292c:	0896      	lsrs	r6, r2, #2
   1292e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   12930:	42b9      	cmp	r1, r7
   12932:	d105      	bne.n	12940 <memcpy+0x42>
   12934:	f06f 0503 	mvn.w	r5, #3
   12938:	4423      	add	r3, r4
   1293a:	fb05 2206 	mla	r2, r5, r6, r2
   1293e:	e7e4      	b.n	1290a <memcpy+0xc>
			*(d_word++) = *(s_word++);
   12940:	f851 cb04 	ldr.w	ip, [r1], #4
   12944:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   12948:	e7f2      	b.n	12930 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1294a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1294e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   12952:	e7dc      	b.n	1290e <memcpy+0x10>

00012954 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   12954:	4603      	mov	r3, r0
{
   12956:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   12958:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1295a:	079c      	lsls	r4, r3, #30
   1295c:	d111      	bne.n	12982 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1295e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   12962:	f022 0603 	bic.w	r6, r2, #3
   12966:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1296a:	441e      	add	r6, r3
   1296c:	0894      	lsrs	r4, r2, #2
   1296e:	42b3      	cmp	r3, r6
   12970:	d10d      	bne.n	1298e <memset+0x3a>
   12972:	f06f 0503 	mvn.w	r5, #3
   12976:	fb05 2204 	mla	r2, r5, r4, r2
   1297a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1297c:	4293      	cmp	r3, r2
   1297e:	d109      	bne.n	12994 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   12980:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   12982:	2a00      	cmp	r2, #0
   12984:	d0fc      	beq.n	12980 <memset+0x2c>
		*(d_byte++) = c_byte;
   12986:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1298a:	3a01      	subs	r2, #1
   1298c:	e7e5      	b.n	1295a <memset+0x6>
		*(d_word++) = c_word;
   1298e:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   12992:	e7ec      	b.n	1296e <memset+0x1a>
		*(d_byte++) = c_byte;
   12994:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   12998:	e7f0      	b.n	1297c <memset+0x28>

0001299a <_stdout_hook_default>:
}
   1299a:	f04f 30ff 	mov.w	r0, #4294967295
   1299e:	4770      	bx	lr

000129a0 <fatfs_tell>:
	return f_tell((FIL *)zfp->filep);
   129a0:	6803      	ldr	r3, [r0, #0]
}
   129a2:	6958      	ldr	r0, [r3, #20]
   129a4:	4770      	bx	lr

000129a6 <fatfs_statvfs>:
{
   129a6:	b513      	push	{r0, r1, r4, lr}
   129a8:	4614      	mov	r4, r2
	res = f_getfree(&mountp->mnt_point[1], &stat->f_bfree, &fs);
   129aa:	68c0      	ldr	r0, [r0, #12]
   129ac:	aa01      	add	r2, sp, #4
   129ae:	f104 010c 	add.w	r1, r4, #12
   129b2:	3001      	adds	r0, #1
   129b4:	f000 fffb 	bl	139ae <f_getfree>
	if (res != FR_OK) {
   129b8:	b958      	cbnz	r0, 129d2 <fatfs_statvfs+0x2c>
	stat->f_bsize = _MIN_SS;
   129ba:	f44f 7300 	mov.w	r3, #512	; 0x200
	stat->f_frsize = fs->csize * stat->f_bsize;
   129be:	9a01      	ldr	r2, [sp, #4]
	stat->f_bsize = _MIN_SS;
   129c0:	6023      	str	r3, [r4, #0]
	stat->f_frsize = fs->csize * stat->f_bsize;
   129c2:	8953      	ldrh	r3, [r2, #10]
   129c4:	025b      	lsls	r3, r3, #9
   129c6:	6063      	str	r3, [r4, #4]
	stat->f_blocks = (fs->n_fatent - 2);
   129c8:	6953      	ldr	r3, [r2, #20]
   129ca:	3b02      	subs	r3, #2
   129cc:	60a3      	str	r3, [r4, #8]
}
   129ce:	b002      	add	sp, #8
   129d0:	bd10      	pop	{r4, pc}
		return -EIO;
   129d2:	f06f 0004 	mvn.w	r0, #4
   129d6:	e7fa      	b.n	129ce <fatfs_statvfs+0x28>

000129d8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   129d8:	6843      	ldr	r3, [r0, #4]
}
   129da:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   129dc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   129de:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   129e0:	600b      	str	r3, [r1, #0]
}
   129e2:	4770      	bx	lr

000129e4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   129e4:	6843      	ldr	r3, [r0, #4]
   129e6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   129e8:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   129ea:	4042      	eors	r2, r0
   129ec:	400a      	ands	r2, r1
   129ee:	4042      	eors	r2, r0
    p_reg->OUT = value;
   129f0:	605a      	str	r2, [r3, #4]
}
   129f2:	2000      	movs	r0, #0
   129f4:	4770      	bx	lr

000129f6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   129f6:	6843      	ldr	r3, [r0, #4]
}
   129f8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   129fa:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   129fc:	6099      	str	r1, [r3, #8]
}
   129fe:	4770      	bx	lr

00012a00 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12a00:	6843      	ldr	r3, [r0, #4]
}
   12a02:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12a04:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   12a06:	60d9      	str	r1, [r3, #12]
}
   12a08:	4770      	bx	lr

00012a0a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12a0a:	6843      	ldr	r3, [r0, #4]
}
   12a0c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12a0e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   12a10:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   12a12:	404b      	eors	r3, r1
    p_reg->OUT = value;
   12a14:	6053      	str	r3, [r2, #4]
}
   12a16:	4770      	bx	lr

00012a18 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   12a18:	68c3      	ldr	r3, [r0, #12]
{
   12a1a:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   12a1c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   12a1e:	b158      	cbz	r0, 12a38 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12a20:	2400      	movs	r4, #0
   12a22:	4281      	cmp	r1, r0
   12a24:	d113      	bne.n	12a4e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   12a26:	6808      	ldr	r0, [r1, #0]
   12a28:	b95c      	cbnz	r4, 12a42 <gpio_nrfx_manage_callback+0x2a>
   12a2a:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   12a2c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   12a2e:	42a1      	cmp	r1, r4
   12a30:	d100      	bne.n	12a34 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   12a32:	6098      	str	r0, [r3, #8]
	parent->next = child;
   12a34:	2000      	movs	r0, #0
   12a36:	6008      	str	r0, [r1, #0]
	if (set) {
   12a38:	b972      	cbnz	r2, 12a58 <gpio_nrfx_manage_callback+0x40>
	return 0;
   12a3a:	2000      	movs	r0, #0
}
   12a3c:	bd30      	pop	{r4, r5, pc}
   12a3e:	4628      	mov	r0, r5
   12a40:	e7ef      	b.n	12a22 <gpio_nrfx_manage_callback+0xa>
   12a42:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   12a44:	6898      	ldr	r0, [r3, #8]
   12a46:	4281      	cmp	r1, r0
	list->tail = node;
   12a48:	bf08      	it	eq
   12a4a:	609c      	streq	r4, [r3, #8]
}
   12a4c:	e7f2      	b.n	12a34 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12a4e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12a50:	4604      	mov	r4, r0
   12a52:	2d00      	cmp	r5, #0
   12a54:	d1f3      	bne.n	12a3e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   12a56:	b13a      	cbz	r2, 12a68 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   12a58:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   12a5a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   12a5c:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   12a5e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   12a60:	2800      	cmp	r0, #0
   12a62:	d1ea      	bne.n	12a3a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   12a64:	6099      	str	r1, [r3, #8]
}
   12a66:	e7e9      	b.n	12a3c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   12a68:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   12a6c:	e7e6      	b.n	12a3c <gpio_nrfx_manage_callback+0x24>

00012a6e <gpio_pin_set>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12a6e:	2301      	movs	r3, #1
   12a70:	fa03 f101 	lsl.w	r1, r3, r1
   12a74:	68c3      	ldr	r3, [r0, #12]
   12a76:	681b      	ldr	r3, [r3, #0]
   12a78:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   12a7a:	bf18      	it	ne
   12a7c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   12a80:	b112      	cbz	r2, 12a88 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   12a82:	6883      	ldr	r3, [r0, #8]
   12a84:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   12a86:	4718      	bx	r3
   12a88:	6883      	ldr	r3, [r0, #8]
   12a8a:	691b      	ldr	r3, [r3, #16]
   12a8c:	e7fb      	b.n	12a86 <gpio_pin_set+0x18>

00012a8e <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   12a8e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   12a90:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   12a92:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   12a94:	b1fd      	cbz	r5, 12ad6 <_spi_context_cs_control.isra.0+0x48>
   12a96:	68ab      	ldr	r3, [r5, #8]
   12a98:	b1eb      	cbz	r3, 12ad6 <_spi_context_cs_control.isra.0+0x48>
   12a9a:	6818      	ldr	r0, [r3, #0]
   12a9c:	b1d8      	cbz	r0, 12ad6 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   12a9e:	b151      	cbz	r1, 12ab6 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   12aa0:	7a19      	ldrb	r1, [r3, #8]
   12aa2:	2201      	movs	r2, #1
   12aa4:	f7ff ffe3 	bl	12a6e <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   12aa8:	6823      	ldr	r3, [r4, #0]
   12aaa:	689b      	ldr	r3, [r3, #8]
   12aac:	6858      	ldr	r0, [r3, #4]
}
   12aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   12ab2:	f001 baa4 	b.w	13ffe <z_impl_k_busy_wait>
			if (!force_off &&
   12ab6:	b912      	cbnz	r2, 12abe <_spi_context_cs_control.isra.0+0x30>
   12ab8:	88aa      	ldrh	r2, [r5, #4]
   12aba:	0492      	lsls	r2, r2, #18
   12abc:	d40b      	bmi.n	12ad6 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   12abe:	6858      	ldr	r0, [r3, #4]
   12ac0:	f001 fa9d 	bl	13ffe <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   12ac4:	6823      	ldr	r3, [r4, #0]
   12ac6:	2200      	movs	r2, #0
   12ac8:	689b      	ldr	r3, [r3, #8]
   12aca:	7a19      	ldrb	r1, [r3, #8]
   12acc:	6818      	ldr	r0, [r3, #0]
}
   12ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   12ad2:	f7ff bfcc 	b.w	12a6e <gpio_pin_set>
}
   12ad6:	bd38      	pop	{r3, r4, r5, pc}

00012ad8 <spi_context_unlock_unconditionally>:
{
   12ad8:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   12ada:	2201      	movs	r2, #1
   12adc:	2100      	movs	r1, #0
{
   12ade:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   12ae0:	f7ff ffd5 	bl	12a8e <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   12ae4:	68e3      	ldr	r3, [r4, #12]
   12ae6:	b923      	cbnz	r3, 12af2 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   12ae8:	1d20      	adds	r0, r4, #4
}
   12aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12aee:	f7fe bdf9 	b.w	116e4 <z_impl_k_sem_give>
   12af2:	bd10      	pop	{r4, pc}

00012af4 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   12af4:	68c0      	ldr	r0, [r0, #12]
{
   12af6:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   12af8:	6803      	ldr	r3, [r0, #0]
   12afa:	428b      	cmp	r3, r1
   12afc:	d106      	bne.n	12b0c <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   12afe:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
   12b02:	b934      	cbnz	r4, 12b12 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   12b04:	f7ff ffe8 	bl	12ad8 <spi_context_unlock_unconditionally>
	return 0;
   12b08:	4620      	mov	r0, r4
}
   12b0a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   12b0c:	f06f 0015 	mvn.w	r0, #21
   12b10:	e7fb      	b.n	12b0a <spi_nrfx_release+0x16>
		return -EBUSY;
   12b12:	f06f 000f 	mvn.w	r0, #15
   12b16:	e7f8      	b.n	12b0a <spi_nrfx_release+0x16>

00012b18 <uarte_nrfx_config_get>:
{
   12b18:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   12b1a:	68c2      	ldr	r2, [r0, #12]
   12b1c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   12b20:	e883 0003 	stmia.w	r3, {r0, r1}
}
   12b24:	2000      	movs	r0, #0
   12b26:	4770      	bx	lr

00012b28 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   12b28:	6843      	ldr	r3, [r0, #4]
   12b2a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12b2c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   12b30:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   12b34:	4770      	bx	lr

00012b36 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   12b36:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   12b38:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   12b3a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12b3c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12b40:	b148      	cbz	r0, 12b56 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12b42:	2000      	movs	r0, #0
	*c = data->rx_data;
   12b44:	7c12      	ldrb	r2, [r2, #16]
   12b46:	700a      	strb	r2, [r1, #0]
   12b48:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   12b4c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12b50:	2201      	movs	r2, #1
   12b52:	601a      	str	r2, [r3, #0]
	return 0;
   12b54:	4770      	bx	lr
		return -1;
   12b56:	f04f 30ff 	mov.w	r0, #4294967295
}
   12b5a:	4770      	bx	lr

00012b5c <uarte_nrfx_poll_out>:
{
   12b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   12b60:	6843      	ldr	r3, [r0, #4]
{
   12b62:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   12b66:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   12b68:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   12b6a:	f001 fa42 	bl	13ff2 <k_is_in_isr>
   12b6e:	bb98      	cbnz	r0, 12bd8 <uarte_nrfx_poll_out+0x7c>
		lock = &data->poll_out_lock;
   12b70:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12b72:	f04f 0801 	mov.w	r8, #1
   12b76:	f106 070c 	add.w	r7, r6, #12
   12b7a:	e8d7 3fef 	ldaex	r3, [r7]
   12b7e:	2b00      	cmp	r3, #0
   12b80:	d103      	bne.n	12b8a <uarte_nrfx_poll_out+0x2e>
   12b82:	e8c7 8fe2 	stlex	r2, r8, [r7]
   12b86:	2a00      	cmp	r2, #0
   12b88:	d1f7      	bne.n	12b7a <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   12b8a:	d007      	beq.n	12b9c <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   12b8c:	2021      	movs	r0, #33	; 0x21
   12b8e:	2100      	movs	r1, #0
   12b90:	3d01      	subs	r5, #1
   12b92:	f7fe fd81 	bl	11698 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   12b96:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   12b9a:	d1ee      	bne.n	12b7a <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12b9c:	2300      	movs	r3, #0
   12b9e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12ba2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12ba6:	f10d 0307 	add.w	r3, sp, #7
   12baa:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   12bae:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12bb0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   12bb4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12bb8:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12bba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   12bbe:	b923      	cbnz	r3, 12bca <uarte_nrfx_poll_out+0x6e>
   12bc0:	2001      	movs	r0, #1
   12bc2:	f001 f919 	bl	13df8 <nrfx_busy_wait>
   12bc6:	3d01      	subs	r5, #1
   12bc8:	d1f7      	bne.n	12bba <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12bca:	2301      	movs	r3, #1
   12bcc:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   12bce:	2300      	movs	r3, #0
   12bd0:	60f3      	str	r3, [r6, #12]
}
   12bd2:	b002      	add	sp, #8
   12bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   12bd8:	2301      	movs	r3, #1
   12bda:	60f3      	str	r3, [r6, #12]
   12bdc:	e7de      	b.n	12b9c <uarte_nrfx_poll_out+0x40>

00012bde <ld_dword>:
	rv = rv << 8 | ptr[2];
   12bde:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
   12be0:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
   12be2:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
   12be4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
}
   12be8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   12bec:	4770      	bx	lr

00012bee <st_dword>:
	*ptr++ = (BYTE)val; val >>= 8;
   12bee:	0a0b      	lsrs	r3, r1, #8
   12bf0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   12bf2:	7043      	strb	r3, [r0, #1]
   12bf4:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
   12bf6:	0e09      	lsrs	r1, r1, #24
   12bf8:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
   12bfa:	70c1      	strb	r1, [r0, #3]
}
   12bfc:	4770      	bx	lr

00012bfe <mem_set>:
	BYTE *d = (BYTE*)dst;
   12bfe:	4402      	add	r2, r0
	do *d++ = (BYTE)val; while (--cnt);
   12c00:	f800 1b01 	strb.w	r1, [r0], #1
   12c04:	4290      	cmp	r0, r2
   12c06:	d1fb      	bne.n	12c00 <mem_set+0x2>
}
   12c08:	4770      	bx	lr

00012c0a <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
   12c0a:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
   12c0c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
   12c0e:	3b02      	subs	r3, #2
   12c10:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
   12c12:	bf83      	ittte	hi
   12c14:	8943      	ldrhhi	r3, [r0, #10]
   12c16:	6a80      	ldrhi	r0, [r0, #40]	; 0x28
   12c18:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
   12c1c:	2000      	movls	r0, #0
}
   12c1e:	4770      	bx	lr

00012c20 <validate>:
{
   12c20:	b538      	push	{r3, r4, r5, lr}
   12c22:	460d      	mov	r5, r1
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
   12c24:	4604      	mov	r4, r0
   12c26:	b918      	cbnz	r0, 12c30 <validate+0x10>
		*fs = 0;				/* The object is invalid */
   12c28:	2300      	movs	r3, #0
		res = FR_INVALID_OBJECT;
   12c2a:	2009      	movs	r0, #9
   12c2c:	602b      	str	r3, [r5, #0]
}
   12c2e:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
   12c30:	6803      	ldr	r3, [r0, #0]
   12c32:	2b00      	cmp	r3, #0
   12c34:	d0f8      	beq.n	12c28 <validate+0x8>
   12c36:	781a      	ldrb	r2, [r3, #0]
   12c38:	2a00      	cmp	r2, #0
   12c3a:	d0f5      	beq.n	12c28 <validate+0x8>
   12c3c:	88d9      	ldrh	r1, [r3, #6]
   12c3e:	8882      	ldrh	r2, [r0, #4]
   12c40:	4291      	cmp	r1, r2
   12c42:	d1f1      	bne.n	12c28 <validate+0x8>
   12c44:	7858      	ldrb	r0, [r3, #1]
   12c46:	f7fd fc99 	bl	1057c <disk_status>
   12c4a:	f010 0001 	ands.w	r0, r0, #1
   12c4e:	d1eb      	bne.n	12c28 <validate+0x8>
		*fs = obj->fs;			/* Owner file sytem object */
   12c50:	6823      	ldr	r3, [r4, #0]
		res = FR_OK;
   12c52:	e7eb      	b.n	12c2c <validate+0xc>

00012c54 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
   12c54:	3801      	subs	r0, #1
   12c56:	440a      	add	r2, r1
		do *d++ = *s++; while (--cnt);
   12c58:	f811 3b01 	ldrb.w	r3, [r1], #1
   12c5c:	4291      	cmp	r1, r2
   12c5e:	f800 3f01 	strb.w	r3, [r0, #1]!
   12c62:	d1f9      	bne.n	12c58 <mem_cpy.part.0+0x4>
}
   12c64:	4770      	bx	lr

00012c66 <ld_clust.isra.0>:
	rv = rv << 8 | ptr[0];
   12c66:	7eca      	ldrb	r2, [r1, #27]
   12c68:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
   12c6a:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
   12c6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
   12c70:	bf01      	itttt	eq
   12c72:	7d48      	ldrbeq	r0, [r1, #21]
   12c74:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
   12c76:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
   12c7a:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
   12c7e:	4618      	mov	r0, r3
   12c80:	4770      	bx	lr

00012c82 <st_clust.isra.0>:
	*ptr++ = (BYTE)val; val >>= 8;
   12c82:	f3c2 2307 	ubfx	r3, r2, #8, #8
   12c86:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
   12c88:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
   12c8a:	7803      	ldrb	r3, [r0, #0]
   12c8c:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
   12c8e:	bf01      	itttt	eq
   12c90:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
   12c92:	750a      	strbeq	r2, [r1, #20]
   12c94:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
   12c96:	754a      	strbeq	r2, [r1, #21]
}
   12c98:	4770      	bx	lr

00012c9a <get_fileinfo.part.0>:
void get_fileinfo (		/* No return code */
   12c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i = j = 0;
   12c9c:	2300      	movs	r3, #0
		c = (TCHAR)dp->dir[i++];
   12c9e:	69c4      	ldr	r4, [r0, #28]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
   12ca0:	262e      	movs	r6, #46	; 0x2e
	i = j = 0;
   12ca2:	4618      	mov	r0, r3
   12ca4:	1e65      	subs	r5, r4, #1
		c = (TCHAR)dp->dir[i++];
   12ca6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   12caa:	3001      	adds	r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
   12cac:	2a20      	cmp	r2, #32
   12cae:	d00a      	beq.n	12cc6 <get_fileinfo.part.0+0x2c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
   12cb0:	2a05      	cmp	r2, #5
   12cb2:	bf08      	it	eq
   12cb4:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
   12cb6:	2809      	cmp	r0, #9
   12cb8:	bf02      	ittt	eq
   12cba:	18cf      	addeq	r7, r1, r3
   12cbc:	3301      	addeq	r3, #1
   12cbe:	727e      	strbeq	r6, [r7, #9]
		fno->fname[j++] = c;
   12cc0:	18cf      	adds	r7, r1, r3
   12cc2:	727a      	strb	r2, [r7, #9]
   12cc4:	3301      	adds	r3, #1
	while (i < 11) {		/* Copy name body and extension */
   12cc6:	280b      	cmp	r0, #11
   12cc8:	d1ed      	bne.n	12ca6 <get_fileinfo.part.0+0xc>
	fno->fname[j] = 0;
   12cca:	2200      	movs	r2, #0
   12ccc:	440b      	add	r3, r1
   12cce:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
   12cd0:	7ae3      	ldrb	r3, [r4, #11]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
   12cd2:	f104 001c 	add.w	r0, r4, #28
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
   12cd6:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
   12cd8:	f7ff ff81 	bl	12bde <ld_dword>
   12cdc:	6008      	str	r0, [r1, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
   12cde:	f104 0016 	add.w	r0, r4, #22
   12ce2:	f7ff ff7c 	bl	12bde <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
   12ce6:	80c8      	strh	r0, [r1, #6]
   12ce8:	0c00      	lsrs	r0, r0, #16
   12cea:	8088      	strh	r0, [r1, #4]
}
   12cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012cee <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
   12cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
   12cf2:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
   12cf4:	f100 0830 	add.w	r8, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
   12cf8:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
   12cfa:	2301      	movs	r3, #1
   12cfc:	4632      	mov	r2, r6
   12cfe:	4641      	mov	r1, r8
   12d00:	7840      	ldrb	r0, [r0, #1]
   12d02:	f7fd fc5f 	bl	105c4 <disk_write>
   12d06:	4605      	mov	r5, r0
   12d08:	b9a8      	cbnz	r0, 12d36 <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
   12d0a:	6a23      	ldr	r3, [r4, #32]
   12d0c:	69a2      	ldr	r2, [r4, #24]
   12d0e:	1af3      	subs	r3, r6, r3
   12d10:	4293      	cmp	r3, r2
			fs->wflag = 0;
   12d12:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
   12d14:	d202      	bcs.n	12d1c <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
   12d16:	78a7      	ldrb	r7, [r4, #2]
   12d18:	2f01      	cmp	r7, #1
   12d1a:	d802      	bhi.n	12d22 <sync_window.part.0+0x34>
}
   12d1c:	4628      	mov	r0, r5
   12d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
   12d22:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
   12d24:	4641      	mov	r1, r8
					wsect += fs->fsize;
   12d26:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
   12d28:	4632      	mov	r2, r6
   12d2a:	2301      	movs	r3, #1
   12d2c:	7860      	ldrb	r0, [r4, #1]
   12d2e:	f7fd fc49 	bl	105c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
   12d32:	3f01      	subs	r7, #1
   12d34:	e7f0      	b.n	12d18 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
   12d36:	2501      	movs	r5, #1
   12d38:	e7f0      	b.n	12d1c <sync_window.part.0+0x2e>

00012d3a <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
   12d3a:	78c3      	ldrb	r3, [r0, #3]
   12d3c:	b10b      	cbz	r3, 12d42 <sync_window+0x8>
   12d3e:	f7ff bfd6 	b.w	12cee <sync_window.part.0>
}
   12d42:	4618      	mov	r0, r3
   12d44:	4770      	bx	lr

00012d46 <move_window>:
{
   12d46:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
   12d48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   12d4a:	4605      	mov	r5, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
   12d4c:	428b      	cmp	r3, r1
{
   12d4e:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
   12d50:	d010      	beq.n	12d74 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
   12d52:	f7ff fff2 	bl	12d3a <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
   12d56:	b960      	cbnz	r0, 12d72 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
   12d58:	4622      	mov	r2, r4
   12d5a:	2301      	movs	r3, #1
   12d5c:	7868      	ldrb	r0, [r5, #1]
   12d5e:	f105 0130 	add.w	r1, r5, #48	; 0x30
   12d62:	f7fd fc23 	bl	105ac <disk_read>
				res = FR_DISK_ERR;
   12d66:	2800      	cmp	r0, #0
   12d68:	bf1c      	itt	ne
   12d6a:	f04f 34ff 	movne.w	r4, #4294967295
   12d6e:	2001      	movne	r0, #1
			fs->winsect = sector;
   12d70:	62ec      	str	r4, [r5, #44]	; 0x2c
}
   12d72:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
   12d74:	2000      	movs	r0, #0
   12d76:	e7fc      	b.n	12d72 <move_window+0x2c>

00012d78 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   12d78:	2901      	cmp	r1, #1
{
   12d7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12d7e:	4606      	mov	r6, r0
   12d80:	460c      	mov	r4, r1
   12d82:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   12d84:	d972      	bls.n	12e6c <put_fat+0xf4>
   12d86:	6943      	ldr	r3, [r0, #20]
   12d88:	428b      	cmp	r3, r1
   12d8a:	d96f      	bls.n	12e6c <put_fat+0xf4>
		switch (fs->fs_type) {
   12d8c:	7803      	ldrb	r3, [r0, #0]
   12d8e:	2b02      	cmp	r3, #2
   12d90:	d03f      	beq.n	12e12 <put_fat+0x9a>
   12d92:	2b03      	cmp	r3, #3
   12d94:	d050      	beq.n	12e38 <put_fat+0xc0>
   12d96:	2b01      	cmp	r3, #1
   12d98:	d168      	bne.n	12e6c <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
   12d9a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12d9e:	6a01      	ldr	r1, [r0, #32]
   12da0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
   12da4:	f7ff ffcf 	bl	12d46 <move_window>
   12da8:	4605      	mov	r5, r0
			if (res != FR_OK) break;
   12daa:	bb38      	cbnz	r0, 12dfc <put_fat+0x84>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   12dac:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
   12db0:	f106 0930 	add.w	r9, r6, #48	; 0x30
   12db4:	f108 0a01 	add.w	sl, r8, #1
   12db8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   12dbc:	bf17      	itett	ne
   12dbe:	f819 3008 	ldrbne.w	r3, [r9, r8]
   12dc2:	b2fb      	uxtbeq	r3, r7
   12dc4:	f003 020f 	andne.w	r2, r3, #15
   12dc8:	013b      	lslne	r3, r7, #4
   12dca:	bf1c      	itt	ne
   12dcc:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
   12dd0:	4313      	orrne	r3, r2
   12dd2:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
   12dd6:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12dd8:	6a31      	ldr	r1, [r6, #32]
   12dda:	4630      	mov	r0, r6
			fs->wflag = 1;
   12ddc:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12dde:	eb01 215a 	add.w	r1, r1, sl, lsr #9
   12de2:	f7ff ffb0 	bl	12d46 <move_window>
			if (res != FR_OK) break;
   12de6:	4605      	mov	r5, r0
   12de8:	b940      	cbnz	r0, 12dfc <put_fat+0x84>
			p = fs->win + bc % SS(fs);
   12dea:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   12dee:	b144      	cbz	r4, 12e02 <put_fat+0x8a>
   12df0:	f3c7 1707 	ubfx	r7, r7, #4, #8
   12df4:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
   12df8:	2301      	movs	r3, #1
   12dfa:	70f3      	strb	r3, [r6, #3]
}
   12dfc:	4628      	mov	r0, r5
   12dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   12e02:	f819 300a 	ldrb.w	r3, [r9, sl]
   12e06:	f3c7 2703 	ubfx	r7, r7, #8, #4
   12e0a:	f023 030f 	bic.w	r3, r3, #15
   12e0e:	431f      	orrs	r7, r3
   12e10:	e7f0      	b.n	12df4 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   12e12:	6a01      	ldr	r1, [r0, #32]
   12e14:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   12e18:	f7ff ff95 	bl	12d46 <move_window>
			if (res != FR_OK) break;
   12e1c:	4605      	mov	r5, r0
   12e1e:	2800      	cmp	r0, #0
   12e20:	d1ec      	bne.n	12dfc <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
   12e22:	0064      	lsls	r4, r4, #1
   12e24:	f106 0330 	add.w	r3, r6, #48	; 0x30
   12e28:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
   12e2c:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
   12e2e:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
   12e30:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
   12e34:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
   12e36:	e7df      	b.n	12df8 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   12e38:	6a01      	ldr	r1, [r0, #32]
   12e3a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   12e3e:	f7ff ff82 	bl	12d46 <move_window>
			if (res != FR_OK) break;
   12e42:	4605      	mov	r5, r0
   12e44:	2800      	cmp	r0, #0
   12e46:	d1d9      	bne.n	12dfc <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   12e48:	00a4      	lsls	r4, r4, #2
   12e4a:	f106 0330 	add.w	r3, r6, #48	; 0x30
   12e4e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
   12e52:	441c      	add	r4, r3
   12e54:	4620      	mov	r0, r4
   12e56:	f7ff fec2 	bl	12bde <ld_dword>
   12e5a:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
   12e5e:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
   12e62:	4339      	orrs	r1, r7
   12e64:	4620      	mov	r0, r4
   12e66:	f7ff fec2 	bl	12bee <st_dword>
   12e6a:	e7c5      	b.n	12df8 <put_fat+0x80>
		switch (fs->fs_type) {
   12e6c:	2502      	movs	r5, #2
   12e6e:	e7c5      	b.n	12dfc <put_fat+0x84>

00012e70 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   12e70:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
   12e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e74:	4605      	mov	r5, r0
   12e76:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   12e78:	d952      	bls.n	12f20 <get_fat.isra.0+0xb0>
   12e7a:	6943      	ldr	r3, [r0, #20]
   12e7c:	4299      	cmp	r1, r3
   12e7e:	d24f      	bcs.n	12f20 <get_fat.isra.0+0xb0>
		switch (fs->fs_type) {
   12e80:	7803      	ldrb	r3, [r0, #0]
   12e82:	2b02      	cmp	r3, #2
   12e84:	d029      	beq.n	12eda <get_fat.isra.0+0x6a>
   12e86:	2b03      	cmp	r3, #3
   12e88:	d038      	beq.n	12efc <get_fat.isra.0+0x8c>
   12e8a:	2b01      	cmp	r3, #1
   12e8c:	d148      	bne.n	12f20 <get_fat.isra.0+0xb0>
			bc = (UINT)clst; bc += bc / 2;
   12e8e:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   12e92:	6a01      	ldr	r1, [r0, #32]
   12e94:	eb01 2156 	add.w	r1, r1, r6, lsr #9
   12e98:	f7ff ff55 	bl	12d46 <move_window>
   12e9c:	b110      	cbz	r0, 12ea4 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   12e9e:	f04f 30ff 	mov.w	r0, #4294967295
}
   12ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   12ea4:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
   12ea6:	1c77      	adds	r7, r6, #1
   12ea8:	f3c6 0608 	ubfx	r6, r6, #0, #9
   12eac:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   12eae:	4628      	mov	r0, r5
   12eb0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
   12eb4:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   12eb8:	f7ff ff45 	bl	12d46 <move_window>
   12ebc:	2800      	cmp	r0, #0
   12ebe:	d1ee      	bne.n	12e9e <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
   12ec0:	f3c7 0708 	ubfx	r7, r7, #0, #9
   12ec4:	443d      	add	r5, r7
   12ec6:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   12eca:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
   12ecc:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   12ed0:	bf4c      	ite	mi
   12ed2:	0900      	lsrmi	r0, r0, #4
   12ed4:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
   12ed8:	e7e3      	b.n	12ea2 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   12eda:	6a01      	ldr	r1, [r0, #32]
   12edc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
   12ee0:	f7ff ff31 	bl	12d46 <move_window>
   12ee4:	2800      	cmp	r0, #0
   12ee6:	d1da      	bne.n	12e9e <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
   12ee8:	0064      	lsls	r4, r4, #1
   12eea:	3530      	adds	r5, #48	; 0x30
   12eec:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   12ef0:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
   12ef2:	785b      	ldrb	r3, [r3, #1]
   12ef4:	5d28      	ldrb	r0, [r5, r4]
			val = ld_word(fs->win + clst * 2 % SS(fs));
   12ef6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
   12efa:	e7d2      	b.n	12ea2 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   12efc:	6a01      	ldr	r1, [r0, #32]
   12efe:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   12f02:	f7ff ff20 	bl	12d46 <move_window>
   12f06:	2800      	cmp	r0, #0
   12f08:	d1c9      	bne.n	12e9e <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
   12f0a:	00a4      	lsls	r4, r4, #2
   12f0c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   12f10:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
   12f14:	4420      	add	r0, r4
   12f16:	f7ff fe62 	bl	12bde <ld_dword>
   12f1a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
   12f1e:	e7c0      	b.n	12ea2 <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
   12f20:	2001      	movs	r0, #1
	return val;
   12f22:	e7be      	b.n	12ea2 <get_fat.isra.0+0x32>

00012f24 <create_chain>:
{
   12f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f28:	4680      	mov	r8, r0
	if (clst == 0) {	/* Create a new chain */
   12f2a:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
   12f2c:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
   12f2e:	b971      	cbnz	r1, 12f4e <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
   12f30:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   12f32:	b1ee      	cbz	r6, 12f70 <create_chain+0x4c>
   12f34:	696b      	ldr	r3, [r5, #20]
   12f36:	42b3      	cmp	r3, r6
   12f38:	bf98      	it	ls
   12f3a:	2601      	movls	r6, #1
		ncl = scl;	/* Start cluster */
   12f3c:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   12f3e:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
   12f40:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   12f42:	42a3      	cmp	r3, r4
   12f44:	d817      	bhi.n	12f76 <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
   12f46:	2e01      	cmp	r6, #1
   12f48:	d814      	bhi.n	12f74 <create_chain+0x50>
   12f4a:	2400      	movs	r4, #0
   12f4c:	e006      	b.n	12f5c <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
   12f4e:	4628      	mov	r0, r5
   12f50:	f7ff ff8e 	bl	12e70 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid value */
   12f54:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
   12f56:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid value */
   12f58:	d803      	bhi.n	12f62 <create_chain+0x3e>
   12f5a:	2401      	movs	r4, #1
}
   12f5c:	4620      	mov	r0, r4
   12f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
   12f62:	1c43      	adds	r3, r0, #1
   12f64:	d030      	beq.n	12fc8 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   12f66:	696b      	ldr	r3, [r5, #20]
   12f68:	4283      	cmp	r3, r0
   12f6a:	d8f7      	bhi.n	12f5c <create_chain+0x38>
   12f6c:	463e      	mov	r6, r7
   12f6e:	e7e5      	b.n	12f3c <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   12f70:	2601      	movs	r6, #1
   12f72:	e7e3      	b.n	12f3c <create_chain+0x18>
				ncl = 2;
   12f74:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
   12f76:	4621      	mov	r1, r4
   12f78:	f8d8 0000 	ldr.w	r0, [r8]
   12f7c:	f7ff ff78 	bl	12e70 <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
   12f80:	b130      	cbz	r0, 12f90 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
   12f82:	2801      	cmp	r0, #1
   12f84:	d0e9      	beq.n	12f5a <create_chain+0x36>
   12f86:	3001      	adds	r0, #1
   12f88:	d01e      	beq.n	12fc8 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
   12f8a:	42b4      	cmp	r4, r6
   12f8c:	d1d7      	bne.n	12f3e <create_chain+0x1a>
   12f8e:	e7dc      	b.n	12f4a <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
   12f90:	f04f 32ff 	mov.w	r2, #4294967295
   12f94:	4621      	mov	r1, r4
   12f96:	4628      	mov	r0, r5
   12f98:	f7ff feee 	bl	12d78 <put_fat>
		if (res == FR_OK && clst) {
   12f9c:	b990      	cbnz	r0, 12fc4 <create_chain+0xa0>
   12f9e:	b957      	cbnz	r7, 12fb6 <create_chain+0x92>
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
   12fa0:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
   12fa4:	3a02      	subs	r2, #2
   12fa6:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
   12fa8:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
   12faa:	d310      	bcc.n	12fce <create_chain+0xaa>
		fs->fsi_flag |= 1;
   12fac:	792b      	ldrb	r3, [r5, #4]
   12fae:	f043 0301 	orr.w	r3, r3, #1
   12fb2:	712b      	strb	r3, [r5, #4]
   12fb4:	e7d2      	b.n	12f5c <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
   12fb6:	4622      	mov	r2, r4
   12fb8:	4639      	mov	r1, r7
   12fba:	4628      	mov	r0, r5
   12fbc:	f7ff fedc 	bl	12d78 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   12fc0:	2800      	cmp	r0, #0
   12fc2:	d0ed      	beq.n	12fa0 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
   12fc4:	2801      	cmp	r0, #1
   12fc6:	d1c8      	bne.n	12f5a <create_chain+0x36>
   12fc8:	f04f 34ff 	mov.w	r4, #4294967295
   12fcc:	e7c6      	b.n	12f5c <create_chain+0x38>
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
   12fce:	3b01      	subs	r3, #1
   12fd0:	612b      	str	r3, [r5, #16]
   12fd2:	e7eb      	b.n	12fac <create_chain+0x88>

00012fd4 <remove_chain>:
{
   12fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12fd6:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   12fd8:	2c01      	cmp	r4, #1
{
   12fda:	4606      	mov	r6, r0
   12fdc:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
   12fde:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   12fe0:	d92b      	bls.n	1303a <remove_chain+0x66>
   12fe2:	696b      	ldr	r3, [r5, #20]
   12fe4:	42a3      	cmp	r3, r4
   12fe6:	d928      	bls.n	1303a <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   12fe8:	b12a      	cbz	r2, 12ff6 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
   12fea:	f04f 32ff 	mov.w	r2, #4294967295
   12fee:	4628      	mov	r0, r5
   12ff0:	f7ff fec2 	bl	12d78 <put_fat>
		if (res != FR_OK) return res;
   12ff4:	b938      	cbnz	r0, 13006 <remove_chain+0x32>
		nxt = get_fat(obj, clst);			/* Get cluster status */
   12ff6:	4621      	mov	r1, r4
   12ff8:	6830      	ldr	r0, [r6, #0]
   12ffa:	f7ff ff39 	bl	12e70 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
   12ffe:	4627      	mov	r7, r4
   13000:	4604      	mov	r4, r0
   13002:	b908      	cbnz	r0, 13008 <remove_chain+0x34>
	return FR_OK;
   13004:	2000      	movs	r0, #0
}
   13006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
   13008:	2801      	cmp	r0, #1
   1300a:	d016      	beq.n	1303a <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   1300c:	1c43      	adds	r3, r0, #1
   1300e:	d016      	beq.n	1303e <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
   13010:	2200      	movs	r2, #0
   13012:	4639      	mov	r1, r7
   13014:	4628      	mov	r0, r5
   13016:	f7ff feaf 	bl	12d78 <put_fat>
			if (res != FR_OK) return res;
   1301a:	2800      	cmp	r0, #0
   1301c:	d1f3      	bne.n	13006 <remove_chain+0x32>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
   1301e:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
   13022:	1e91      	subs	r1, r2, #2
   13024:	428b      	cmp	r3, r1
   13026:	d205      	bcs.n	13034 <remove_chain+0x60>
			fs->free_clst++;
   13028:	3301      	adds	r3, #1
   1302a:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
   1302c:	792b      	ldrb	r3, [r5, #4]
   1302e:	f043 0301 	orr.w	r3, r3, #1
   13032:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
   13034:	42a2      	cmp	r2, r4
   13036:	d8de      	bhi.n	12ff6 <remove_chain+0x22>
   13038:	e7e4      	b.n	13004 <remove_chain+0x30>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   1303a:	2002      	movs	r0, #2
   1303c:	e7e3      	b.n	13006 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   1303e:	2001      	movs	r0, #1
   13040:	e7e1      	b.n	13006 <remove_chain+0x32>

00013042 <sync_fs>:
{
   13042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13044:	4604      	mov	r4, r0
	res = sync_window(fs);
   13046:	f7ff fe78 	bl	12d3a <sync_window>
   1304a:	4605      	mov	r5, r0
	if (res == FR_OK) {
   1304c:	2800      	cmp	r0, #0
   1304e:	d142      	bne.n	130d6 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
   13050:	7823      	ldrb	r3, [r4, #0]
   13052:	2b03      	cmp	r3, #3
   13054:	d137      	bne.n	130c6 <sync_fs+0x84>
   13056:	7927      	ldrb	r7, [r4, #4]
   13058:	2f01      	cmp	r7, #1
   1305a:	d134      	bne.n	130c6 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
   1305c:	f104 0630 	add.w	r6, r4, #48	; 0x30
   13060:	4601      	mov	r1, r0
   13062:	f44f 7200 	mov.w	r2, #512	; 0x200
   13066:	4630      	mov	r0, r6
   13068:	f7ff fdc9 	bl	12bfe <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
   1306c:	2355      	movs	r3, #85	; 0x55
   1306e:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
   13072:	23aa      	movs	r3, #170	; 0xaa
   13074:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
   13078:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
   1307a:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
   1307c:	2172      	movs	r1, #114	; 0x72
   1307e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
   13082:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
   13086:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val;
   13088:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
   1308c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   13090:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
	*ptr++ = (BYTE)val;
   13094:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
	*ptr++ = (BYTE)val; val >>= 8;
   13098:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
   1309c:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
   130a0:	f504 7006 	add.w	r0, r4, #536	; 0x218
   130a4:	6921      	ldr	r1, [r4, #16]
   130a6:	f7ff fda2 	bl	12bee <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
   130aa:	68e1      	ldr	r1, [r4, #12]
   130ac:	f504 7007 	add.w	r0, r4, #540	; 0x21c
   130b0:	f7ff fd9d 	bl	12bee <st_dword>
			fs->winsect = fs->volbase + 1;
   130b4:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
   130b6:	463b      	mov	r3, r7
			fs->winsect = fs->volbase + 1;
   130b8:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
   130ba:	4631      	mov	r1, r6
   130bc:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
   130be:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
   130c0:	f7fd fa80 	bl	105c4 <disk_write>
			fs->fsi_flag = 0;
   130c4:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
   130c6:	2200      	movs	r2, #0
   130c8:	7860      	ldrb	r0, [r4, #1]
   130ca:	4611      	mov	r1, r2
   130cc:	f7fd fa86 	bl	105dc <disk_ioctl>
	res = sync_window(fs);
   130d0:	3800      	subs	r0, #0
   130d2:	bf18      	it	ne
   130d4:	2001      	movne	r0, #1
}
   130d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000130d8 <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
   130d8:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
   130da:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
   130dc:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
   130de:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   130e0:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
   130e2:	6103      	str	r3, [r0, #16]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
   130e4:	b99a      	cbnz	r2, 1310e <dir_sdi.constprop.0+0x36>
   130e6:	782b      	ldrb	r3, [r5, #0]
   130e8:	2b02      	cmp	r3, #2
   130ea:	d901      	bls.n	130f0 <dir_sdi.constprop.0+0x18>
		clst = fs->dirbase;
   130ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
   130ee:	b96b      	cbnz	r3, 1310c <dir_sdi.constprop.0+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
   130f0:	892b      	ldrh	r3, [r5, #8]
   130f2:	b90b      	cbnz	r3, 130f8 <dir_sdi.constprop.0+0x20>
   130f4:	2002      	movs	r0, #2
}
   130f6:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
   130f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   130fa:	61a3      	str	r3, [r4, #24]
	if (!dp->sect) return FR_INT_ERR;
   130fc:	69a3      	ldr	r3, [r4, #24]
	dp->clust = clst;					/* Current cluster# */
   130fe:	6162      	str	r2, [r4, #20]
	if (!dp->sect) return FR_INT_ERR;
   13100:	2b00      	cmp	r3, #0
   13102:	d0f7      	beq.n	130f4 <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   13104:	3530      	adds	r5, #48	; 0x30
	return FR_OK;
   13106:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   13108:	61e5      	str	r5, [r4, #28]
	return FR_OK;
   1310a:	e7f4      	b.n	130f6 <dir_sdi.constprop.0+0x1e>
   1310c:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
   1310e:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
   13110:	b963      	cbnz	r3, 1312c <dir_sdi.constprop.0+0x54>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   13112:	4611      	mov	r1, r2
   13114:	6820      	ldr	r0, [r4, #0]
   13116:	f7ff feab 	bl	12e70 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   1311a:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   1311c:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   1311e:	d00b      	beq.n	13138 <dir_sdi.constprop.0+0x60>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
   13120:	2801      	cmp	r0, #1
   13122:	d9e7      	bls.n	130f4 <dir_sdi.constprop.0+0x1c>
   13124:	696b      	ldr	r3, [r5, #20]
   13126:	4298      	cmp	r0, r3
   13128:	d3f3      	bcc.n	13112 <dir_sdi.constprop.0+0x3a>
   1312a:	e7e3      	b.n	130f4 <dir_sdi.constprop.0+0x1c>
		dp->sect = clust2sect(fs, clst);
   1312c:	4611      	mov	r1, r2
   1312e:	4628      	mov	r0, r5
   13130:	f7ff fd6b 	bl	12c0a <clust2sect>
   13134:	61a0      	str	r0, [r4, #24]
   13136:	e7e1      	b.n	130fc <dir_sdi.constprop.0+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   13138:	2001      	movs	r0, #1
   1313a:	e7dc      	b.n	130f6 <dir_sdi.constprop.0+0x1e>

0001313c <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
   1313c:	6903      	ldr	r3, [r0, #16]
{
   1313e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
   13142:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
   13146:	6983      	ldr	r3, [r0, #24]
{
   13148:	4605      	mov	r5, r0
   1314a:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
   1314c:	b193      	cbz	r3, 13174 <dir_next+0x38>
   1314e:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
   13152:	d20f      	bcs.n	13174 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
   13154:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
   13158:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
   1315a:	f1b9 0f00 	cmp.w	r9, #0
   1315e:	d14d      	bne.n	131fc <dir_next+0xc0>
		if (!dp->clust) {		/* Static table */
   13160:	6941      	ldr	r1, [r0, #20]
		dp->sect++;				/* Next sector */
   13162:	3301      	adds	r3, #1
   13164:	6183      	str	r3, [r0, #24]
		if (!dp->clust) {		/* Static table */
   13166:	b939      	cbnz	r1, 13178 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
   13168:	8923      	ldrh	r3, [r4, #8]
   1316a:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
   1316e:	d845      	bhi.n	131fc <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
   13170:	2300      	movs	r3, #0
   13172:	61ab      	str	r3, [r5, #24]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
   13174:	2004      	movs	r0, #4
   13176:	e00b      	b.n	13190 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
   13178:	8967      	ldrh	r7, [r4, #10]
   1317a:	3f01      	subs	r7, #1
   1317c:	ea17 2758 	ands.w	r7, r7, r8, lsr #9
   13180:	d13c      	bne.n	131fc <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
   13182:	4620      	mov	r0, r4
   13184:	f7ff fe74 	bl	12e70 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
   13188:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
   1318a:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
   1318c:	d802      	bhi.n	13194 <dir_next+0x58>
   1318e:	2002      	movs	r0, #2
}
   13190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
   13194:	1c42      	adds	r2, r0, #1
   13196:	d101      	bne.n	1319c <dir_next+0x60>
   13198:	2001      	movs	r0, #1
   1319a:	e7f9      	b.n	13190 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
   1319c:	6963      	ldr	r3, [r4, #20]
   1319e:	4283      	cmp	r3, r0
   131a0:	d826      	bhi.n	131f0 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
   131a2:	f1ba 0f00 	cmp.w	sl, #0
   131a6:	d0e3      	beq.n	13170 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
   131a8:	4628      	mov	r0, r5
   131aa:	6969      	ldr	r1, [r5, #20]
   131ac:	f7ff feba 	bl	12f24 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   131b0:	4606      	mov	r6, r0
   131b2:	2800      	cmp	r0, #0
   131b4:	d035      	beq.n	13222 <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
   131b6:	2801      	cmp	r0, #1
   131b8:	d0e9      	beq.n	1318e <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   131ba:	1c43      	adds	r3, r0, #1
   131bc:	d0ec      	beq.n	13198 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   131be:	4620      	mov	r0, r4
   131c0:	f7ff fdbb 	bl	12d3a <sync_window>
   131c4:	4601      	mov	r1, r0
   131c6:	2800      	cmp	r0, #0
   131c8:	d1e6      	bne.n	13198 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
   131ca:	f44f 7200 	mov.w	r2, #512	; 0x200
   131ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
   131d2:	f7ff fd14 	bl	12bfe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
   131d6:	4631      	mov	r1, r6
   131d8:	4620      	mov	r0, r4
   131da:	f7ff fd16 	bl	12c0a <clust2sect>
						fs->wflag = 1;
   131de:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
   131e2:	62e0      	str	r0, [r4, #44]	; 0x2c
   131e4:	8963      	ldrh	r3, [r4, #10]
   131e6:	429f      	cmp	r7, r3
   131e8:	d30f      	bcc.n	1320a <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
   131ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   131ec:	1bdf      	subs	r7, r3, r7
   131ee:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->sect = clust2sect(fs, clst);
   131f0:	4631      	mov	r1, r6
   131f2:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
   131f4:	616e      	str	r6, [r5, #20]
				dp->sect = clust2sect(fs, clst);
   131f6:	f7ff fd08 	bl	12c0a <clust2sect>
   131fa:	61a8      	str	r0, [r5, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   131fc:	3430      	adds	r4, #48	; 0x30
   131fe:	444c      	add	r4, r9
	return FR_OK;
   13200:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
   13202:	f8c5 8010 	str.w	r8, [r5, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   13206:	61ec      	str	r4, [r5, #28]
	return FR_OK;
   13208:	e7c2      	b.n	13190 <dir_next+0x54>
						fs->wflag = 1;
   1320a:	4620      	mov	r0, r4
   1320c:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
   13210:	f7ff fd6d 	bl	12cee <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
   13214:	2800      	cmp	r0, #0
   13216:	d1bf      	bne.n	13198 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
   13218:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1321a:	3701      	adds	r7, #1
   1321c:	3301      	adds	r3, #1
   1321e:	62e3      	str	r3, [r4, #44]	; 0x2c
   13220:	e7e0      	b.n	131e4 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   13222:	2007      	movs	r0, #7
   13224:	e7b4      	b.n	13190 <dir_next+0x54>

00013226 <dir_read.constprop.0>:
FRESULT dir_read (
   13226:	b538      	push	{r3, r4, r5, lr}
   13228:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
   1322a:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
   1322c:	2004      	movs	r0, #4
	while (dp->sect) {
   1322e:	69a1      	ldr	r1, [r4, #24]
   13230:	b909      	cbnz	r1, 13236 <dir_read.constprop.0+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   13232:	b1a8      	cbz	r0, 13260 <dir_read.constprop.0+0x3a>
   13234:	e01c      	b.n	13270 <dir_read.constprop.0+0x4a>
		res = move_window(fs, dp->sect);
   13236:	4628      	mov	r0, r5
   13238:	f7ff fd85 	bl	12d46 <move_window>
		if (res != FR_OK) break;
   1323c:	b9c0      	cbnz	r0, 13270 <dir_read.constprop.0+0x4a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
   1323e:	69e3      	ldr	r3, [r4, #28]
   13240:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
   13242:	b1c2      	cbz	r2, 13276 <dir_read.constprop.0+0x50>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
   13244:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
   13246:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
   13248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1324c:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
   1324e:	d009      	beq.n	13264 <dir_read.constprop.0+0x3e>
   13250:	2a2e      	cmp	r2, #46	; 0x2e
   13252:	d007      	beq.n	13264 <dir_read.constprop.0+0x3e>
   13254:	2b0f      	cmp	r3, #15
   13256:	d005      	beq.n	13264 <dir_read.constprop.0+0x3e>
   13258:	f023 0320 	bic.w	r3, r3, #32
   1325c:	2b08      	cmp	r3, #8
   1325e:	d001      	beq.n	13264 <dir_read.constprop.0+0x3e>
		res = move_window(fs, dp->sect);
   13260:	2000      	movs	r0, #0
}
   13262:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
   13264:	2100      	movs	r1, #0
   13266:	4620      	mov	r0, r4
   13268:	f7ff ff68 	bl	1313c <dir_next>
		if (res != FR_OK) break;
   1326c:	2800      	cmp	r0, #0
   1326e:	d0de      	beq.n	1322e <dir_read.constprop.0+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   13270:	2300      	movs	r3, #0
   13272:	61a3      	str	r3, [r4, #24]
   13274:	e7f5      	b.n	13262 <dir_read.constprop.0+0x3c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
   13276:	2004      	movs	r0, #4
   13278:	e7fa      	b.n	13270 <dir_read.constprop.0+0x4a>

0001327a <dir_register>:
{
   1327a:	b570      	push	{r4, r5, r6, lr}
   1327c:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
   1327e:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
   13280:	f7ff ff2a 	bl	130d8 <dir_sdi.constprop.0>
	if (res == FR_OK) {
   13284:	4604      	mov	r4, r0
   13286:	bb28      	cbnz	r0, 132d4 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
   13288:	4630      	mov	r0, r6
   1328a:	69a9      	ldr	r1, [r5, #24]
   1328c:	f7ff fd5b 	bl	12d46 <move_window>
			if (res != FR_OK) break;
   13290:	4604      	mov	r4, r0
   13292:	b9f8      	cbnz	r0, 132d4 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
   13294:	69eb      	ldr	r3, [r5, #28]
   13296:	781b      	ldrb	r3, [r3, #0]
   13298:	2be5      	cmp	r3, #229	; 0xe5
   1329a:	d114      	bne.n	132c6 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
   1329c:	4630      	mov	r0, r6
   1329e:	69a9      	ldr	r1, [r5, #24]
   132a0:	f7ff fd51 	bl	12d46 <move_window>
		if (res == FR_OK) {
   132a4:	4604      	mov	r4, r0
   132a6:	b960      	cbnz	r0, 132c2 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
   132a8:	4601      	mov	r1, r0
   132aa:	2220      	movs	r2, #32
   132ac:	69e8      	ldr	r0, [r5, #28]
   132ae:	f7ff fca6 	bl	12bfe <mem_set>
	if (cnt) {
   132b2:	220b      	movs	r2, #11
   132b4:	69e8      	ldr	r0, [r5, #28]
   132b6:	f105 0120 	add.w	r1, r5, #32
   132ba:	f7ff fccb 	bl	12c54 <mem_cpy.part.0>
			fs->wflag = 1;
   132be:	2301      	movs	r3, #1
   132c0:	70f3      	strb	r3, [r6, #3]
}
   132c2:	4620      	mov	r0, r4
   132c4:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
   132c6:	2b00      	cmp	r3, #0
   132c8:	d0e8      	beq.n	1329c <dir_register+0x22>
			res = dir_next(dp, 1);
   132ca:	2101      	movs	r1, #1
   132cc:	4628      	mov	r0, r5
   132ce:	f7ff ff35 	bl	1313c <dir_next>
   132d2:	e7d7      	b.n	13284 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   132d4:	2c04      	cmp	r4, #4
   132d6:	bf08      	it	eq
   132d8:	2407      	moveq	r4, #7
   132da:	e7f2      	b.n	132c2 <dir_register+0x48>

000132dc <f_open>:
{
   132dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   132e0:	b08e      	sub	sp, #56	; 0x38
   132e2:	4616      	mov	r6, r2
	if (!fp) return FR_INVALID_OBJECT;
   132e4:	4605      	mov	r5, r0
{
   132e6:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
   132e8:	2800      	cmp	r0, #0
   132ea:	f000 80c7 	beq.w	1347c <f_open+0x1a0>
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
   132ee:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
   132f2:	463a      	mov	r2, r7
   132f4:	a902      	add	r1, sp, #8
   132f6:	a801      	add	r0, sp, #4
   132f8:	f7fc fc4c 	bl	fb94 <find_volume>
	if (res == FR_OK) {
   132fc:	2800      	cmp	r0, #0
   132fe:	f040 80b5 	bne.w	1346c <f_open+0x190>
		dj.obj.fs = fs;
   13302:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
   13304:	9901      	ldr	r1, [sp, #4]
   13306:	a803      	add	r0, sp, #12
		dj.obj.fs = fs;
   13308:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
   1330a:	f7fc fd97 	bl	fe3c <follow_path>
		if (res == FR_OK) {
   1330e:	4604      	mov	r4, r0
   13310:	b920      	cbnz	r0, 1331c <f_open+0x40>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
   13312:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
				res = FR_INVALID_NAME;
   13316:	2b00      	cmp	r3, #0
   13318:	bfb8      	it	lt
   1331a:	2406      	movlt	r4, #6
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1331c:	f016 0f1c 	tst.w	r6, #28
   13320:	d073      	beq.n	1340a <f_open+0x12e>
			if (res != FR_OK) {					/* No file, create new */
   13322:	2c00      	cmp	r4, #0
   13324:	d043      	beq.n	133ae <f_open+0xd2>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   13326:	2c04      	cmp	r4, #4
   13328:	d13e      	bne.n	133a8 <f_open+0xcc>
					res = dir_register(&dj);
   1332a:	a803      	add	r0, sp, #12
   1332c:	f7ff ffa5 	bl	1327a <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   13330:	4604      	mov	r4, r0
   13332:	2800      	cmp	r0, #0
   13334:	d138      	bne.n	133a8 <f_open+0xcc>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
   13336:	f047 0708 	orr.w	r7, r7, #8
	*ptr++ = (BYTE)val; val >>= 8;
   1333a:	2400      	movs	r4, #0
	*ptr++ = (BYTE)val; val >>= 8;
   1333c:	2121      	movs	r1, #33	; 0x21
	*ptr++ = (BYTE)val;
   1333e:	2248      	movs	r2, #72	; 0x48
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
   13340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
   13342:	f8dd 8008 	ldr.w	r8, [sp, #8]
	*ptr++ = (BYTE)val;
   13346:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
   13348:	739c      	strb	r4, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
   1334a:	73dc      	strb	r4, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
   1334c:	7419      	strb	r1, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
   1334e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val;
   13350:	765a      	strb	r2, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
   13352:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val; val >>= 8;
   13354:	759c      	strb	r4, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
   13356:	75dc      	strb	r4, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
   13358:	7619      	strb	r1, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
   1335a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1335c:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
   1335e:	990a      	ldr	r1, [sp, #40]	; 0x28
   13360:	f898 0000 	ldrb.w	r0, [r8]
   13364:	f7ff fc7f 	bl	12c66 <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
   13368:	4622      	mov	r2, r4
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
   1336a:	4606      	mov	r6, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
   1336c:	4640      	mov	r0, r8
   1336e:	f7ff fc88 	bl	12c82 <st_clust.isra.0>
					fs->wflag = 1;
   13372:	2201      	movs	r2, #1
					st_dword(dj.dir + DIR_FileSize, 0);
   13374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
   13376:	771c      	strb	r4, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
   13378:	775c      	strb	r4, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
   1337a:	779c      	strb	r4, [r3, #30]
	*ptr++ = (BYTE)val;
   1337c:	77dc      	strb	r4, [r3, #31]
					fs->wflag = 1;
   1337e:	9b02      	ldr	r3, [sp, #8]
   13380:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
   13382:	b1ee      	cbz	r6, 133c0 <f_open+0xe4>
						res = remove_chain(&dj.obj, cl, 0);
   13384:	4622      	mov	r2, r4
   13386:	4631      	mov	r1, r6
   13388:	a803      	add	r0, sp, #12
						dw = fs->winsect;
   1338a:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
   1338e:	f7ff fe21 	bl	12fd4 <remove_chain>
						if (res == FR_OK) {
   13392:	4604      	mov	r4, r0
   13394:	b940      	cbnz	r0, 133a8 <f_open+0xcc>
							res = move_window(fs, dw);
   13396:	4641      	mov	r1, r8
   13398:	9802      	ldr	r0, [sp, #8]
   1339a:	f7ff fcd4 	bl	12d46 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
   1339e:	9b02      	ldr	r3, [sp, #8]
   133a0:	3e01      	subs	r6, #1
		if (res == FR_OK) {
   133a2:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
   133a4:	60de      	str	r6, [r3, #12]
		if (res == FR_OK) {
   133a6:	b158      	cbz	r0, 133c0 <f_open+0xe4>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   133a8:	2300      	movs	r3, #0
   133aa:	602b      	str	r3, [r5, #0]
   133ac:	e029      	b.n	13402 <f_open+0x126>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   133ae:	f89d 3012 	ldrb.w	r3, [sp, #18]
   133b2:	f013 0f11 	tst.w	r3, #17
   133b6:	d132      	bne.n	1341e <f_open+0x142>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
   133b8:	0770      	lsls	r0, r6, #29
   133ba:	d459      	bmi.n	13470 <f_open+0x194>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   133bc:	0731      	lsls	r1, r6, #28
   133be:	d4bc      	bmi.n	1333a <f_open+0x5e>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   133c0:	9c02      	ldr	r4, [sp, #8]
			fp->dir_ptr = dj.dir;
   133c2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   133c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			fp->dir_ptr = dj.dir;
   133c6:	626e      	str	r6, [r5, #36]	; 0x24
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   133c8:	622b      	str	r3, [r5, #32]
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
   133ca:	7820      	ldrb	r0, [r4, #0]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
   133cc:	0739      	lsls	r1, r7, #28
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
   133ce:	4631      	mov	r1, r6
				mode |= FA_MODIFIED;
   133d0:	bf48      	it	mi
   133d2:	f047 0740 	orrmi.w	r7, r7, #64	; 0x40
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
   133d6:	f7ff fc46 	bl	12c66 <ld_clust.isra.0>
   133da:	4601      	mov	r1, r0
   133dc:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   133de:	f106 001c 	add.w	r0, r6, #28
   133e2:	f7ff fbfc 	bl	12bde <ld_dword>
			fp->obj.id = fs->id;
   133e6:	88e3      	ldrh	r3, [r4, #6]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   133e8:	06ba      	lsls	r2, r7, #26
			fp->obj.id = fs->id;
   133ea:	80ab      	strh	r3, [r5, #4]
			fp->err = 0;			/* Clear error flag */
   133ec:	f04f 0300 	mov.w	r3, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   133f0:	4606      	mov	r6, r0
   133f2:	60e8      	str	r0, [r5, #12]
			fp->obj.fs = fs;	 	/* Validate the file object */
   133f4:	602c      	str	r4, [r5, #0]
			fp->flag = mode;		/* Set file access mode */
   133f6:	742f      	strb	r7, [r5, #16]
			fp->err = 0;			/* Clear error flag */
   133f8:	746b      	strb	r3, [r5, #17]
			fp->sect = 0;			/* Invalidate current data sector */
   133fa:	61eb      	str	r3, [r5, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
   133fc:	616b      	str	r3, [r5, #20]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   133fe:	d410      	bmi.n	13422 <f_open+0x146>
						res = FR_INT_ERR;
   13400:	2400      	movs	r4, #0
}
   13402:	4620      	mov	r0, r4
   13404:	b00e      	add	sp, #56	; 0x38
   13406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (res == FR_OK) {					/* Following succeeded */
   1340a:	2c00      	cmp	r4, #0
   1340c:	d1cc      	bne.n	133a8 <f_open+0xcc>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
   1340e:	f89d 3012 	ldrb.w	r3, [sp, #18]
   13412:	06da      	lsls	r2, r3, #27
   13414:	d42e      	bmi.n	13474 <f_open+0x198>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
   13416:	07b4      	lsls	r4, r6, #30
   13418:	d5d2      	bpl.n	133c0 <f_open+0xe4>
   1341a:	07d8      	lsls	r0, r3, #31
   1341c:	d5d0      	bpl.n	133c0 <f_open+0xe4>
					res = FR_DENIED;
   1341e:	2407      	movs	r4, #7
   13420:	e7c2      	b.n	133a8 <f_open+0xcc>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   13422:	2800      	cmp	r0, #0
   13424:	d0ec      	beq.n	13400 <f_open+0x124>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   13426:	8964      	ldrh	r4, [r4, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
   13428:	6168      	str	r0, [r5, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   1342a:	0264      	lsls	r4, r4, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   1342c:	42b4      	cmp	r4, r6
   1342e:	d30f      	bcc.n	13450 <f_open+0x174>
   13430:	2400      	movs	r4, #0
				fp->clust = clst;
   13432:	61a9      	str	r1, [r5, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
   13434:	2c00      	cmp	r4, #0
   13436:	d1b7      	bne.n	133a8 <f_open+0xcc>
   13438:	f3c6 0308 	ubfx	r3, r6, #0, #9
   1343c:	2b00      	cmp	r3, #0
   1343e:	d0df      	beq.n	13400 <f_open+0x124>
					if ((sc = clust2sect(fs, clst)) == 0) {
   13440:	9802      	ldr	r0, [sp, #8]
   13442:	f7ff fbe2 	bl	12c0a <clust2sect>
   13446:	b1b8      	cbz	r0, 13478 <f_open+0x19c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
   13448:	eb00 2056 	add.w	r0, r0, r6, lsr #9
   1344c:	61e8      	str	r0, [r5, #28]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   1344e:	e7d8      	b.n	13402 <f_open+0x126>
					clst = get_fat(&fp->obj, clst);
   13450:	6828      	ldr	r0, [r5, #0]
   13452:	f7ff fd0d 	bl	12e70 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
   13456:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
   13458:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
   1345a:	eba6 0604 	sub.w	r6, r6, r4
   1345e:	d903      	bls.n	13468 <f_open+0x18c>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   13460:	1c43      	adds	r3, r0, #1
   13462:	d1e3      	bne.n	1342c <f_open+0x150>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
   13464:	2401      	movs	r4, #1
   13466:	e7e4      	b.n	13432 <f_open+0x156>
					if (clst <= 1) res = FR_INT_ERR;
   13468:	2402      	movs	r4, #2
   1346a:	e7e2      	b.n	13432 <f_open+0x156>
   1346c:	4604      	mov	r4, r0
   1346e:	e79b      	b.n	133a8 <f_open+0xcc>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
   13470:	2408      	movs	r4, #8
   13472:	e799      	b.n	133a8 <f_open+0xcc>
					res = FR_NO_FILE;
   13474:	2404      	movs	r4, #4
   13476:	e797      	b.n	133a8 <f_open+0xcc>
						res = FR_INT_ERR;
   13478:	2402      	movs	r4, #2
   1347a:	e795      	b.n	133a8 <f_open+0xcc>
	if (!fp) return FR_INVALID_OBJECT;
   1347c:	2409      	movs	r4, #9
   1347e:	e7c0      	b.n	13402 <f_open+0x126>

00013480 <f_read>:
{
   13480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13484:	4699      	mov	r9, r3
	*br = 0;	/* Clear read byte counter */
   13486:	2300      	movs	r3, #0
{
   13488:	b085      	sub	sp, #20
   1348a:	4688      	mov	r8, r1
	*br = 0;	/* Clear read byte counter */
   1348c:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   13490:	a903      	add	r1, sp, #12
{
   13492:	4604      	mov	r4, r0
   13494:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   13496:	f7ff fbc3 	bl	12c20 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   1349a:	4606      	mov	r6, r0
   1349c:	b9f8      	cbnz	r0, 134de <f_read+0x5e>
   1349e:	7c66      	ldrb	r6, [r4, #17]
   134a0:	b9ee      	cbnz	r6, 134de <f_read+0x5e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   134a2:	f894 a010 	ldrb.w	sl, [r4, #16]
   134a6:	f01a 0301 	ands.w	r3, sl, #1
   134aa:	9300      	str	r3, [sp, #0]
   134ac:	d07c      	beq.n	135a8 <f_read+0x128>
	remain = fp->obj.objsize - fp->fptr;
   134ae:	68e7      	ldr	r7, [r4, #12]
   134b0:	6962      	ldr	r2, [r4, #20]
   134b2:	1abf      	subs	r7, r7, r2
   134b4:	42af      	cmp	r7, r5
   134b6:	bf28      	it	cs
   134b8:	462f      	movcs	r7, r5
	for ( ;  btr;								/* Repeat until all data read */
   134ba:	b187      	cbz	r7, 134de <f_read+0x5e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
   134bc:	6962      	ldr	r2, [r4, #20]
   134be:	f3c2 0308 	ubfx	r3, r2, #0, #9
   134c2:	2b00      	cmp	r3, #0
   134c4:	d157      	bne.n	13576 <f_read+0xf6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
   134c6:	9b03      	ldr	r3, [sp, #12]
   134c8:	895b      	ldrh	r3, [r3, #10]
   134ca:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
   134cc:	ea13 2a52 	ands.w	sl, r3, r2, lsr #9
   134d0:	d115      	bne.n	134fe <f_read+0x7e>
				if (fp->fptr == 0) {			/* On the top of the file? */
   134d2:	b942      	cbnz	r2, 134e6 <f_read+0x66>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
   134d4:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
   134d6:	2801      	cmp	r0, #1
   134d8:	d80a      	bhi.n	134f0 <f_read+0x70>
   134da:	2602      	movs	r6, #2
   134dc:	7466      	strb	r6, [r4, #17]
}
   134de:	4630      	mov	r0, r6
   134e0:	b005      	add	sp, #20
   134e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
   134e6:	69a1      	ldr	r1, [r4, #24]
   134e8:	6820      	ldr	r0, [r4, #0]
   134ea:	f7ff fcc1 	bl	12e70 <get_fat.isra.0>
   134ee:	e7f2      	b.n	134d6 <f_read+0x56>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   134f0:	1c43      	adds	r3, r0, #1
   134f2:	d103      	bne.n	134fc <f_read+0x7c>
   134f4:	2301      	movs	r3, #1
   134f6:	9e00      	ldr	r6, [sp, #0]
   134f8:	7463      	strb	r3, [r4, #17]
   134fa:	e7f0      	b.n	134de <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
   134fc:	61a0      	str	r0, [r4, #24]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
   134fe:	f8dd b00c 	ldr.w	fp, [sp, #12]
   13502:	69a1      	ldr	r1, [r4, #24]
   13504:	4658      	mov	r0, fp
   13506:	f7ff fb80 	bl	12c0a <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
   1350a:	2800      	cmp	r0, #0
   1350c:	d0e5      	beq.n	134da <f_read+0x5a>
			if (cc) {							/* Read maximum contiguous sectors directly */
   1350e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
   13512:	eb0a 0200 	add.w	r2, sl, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
   13516:	d32d      	bcc.n	13574 <f_read+0xf4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   13518:	f8bb 100a 	ldrh.w	r1, [fp, #10]
   1351c:	eb0a 2057 	add.w	r0, sl, r7, lsr #9
   13520:	4288      	cmp	r0, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
   13522:	ea4f 2557 	mov.w	r5, r7, lsr #9
					cc = fs->csize - csect;
   13526:	bf88      	it	hi
   13528:	eba1 050a 	subhi.w	r5, r1, sl
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   1352c:	462b      	mov	r3, r5
   1352e:	4641      	mov	r1, r8
   13530:	f89b 0001 	ldrb.w	r0, [fp, #1]
   13534:	9201      	str	r2, [sp, #4]
   13536:	f7fd f839 	bl	105ac <disk_read>
   1353a:	2800      	cmp	r0, #0
   1353c:	d1da      	bne.n	134f4 <f_read+0x74>
				if (fs->wflag && fs->winsect - sect < cc) {
   1353e:	9903      	ldr	r1, [sp, #12]
   13540:	78cb      	ldrb	r3, [r1, #3]
   13542:	b15b      	cbz	r3, 1355c <f_read+0xdc>
   13544:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   13546:	9a01      	ldr	r2, [sp, #4]
   13548:	1a80      	subs	r0, r0, r2
   1354a:	42a8      	cmp	r0, r5
   1354c:	d206      	bcs.n	1355c <f_read+0xdc>
	if (cnt) {
   1354e:	f44f 7200 	mov.w	r2, #512	; 0x200
   13552:	3130      	adds	r1, #48	; 0x30
   13554:	eb08 2040 	add.w	r0, r8, r0, lsl #9
   13558:	f7ff fb7c 	bl	12c54 <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
   1355c:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   1355e:	6963      	ldr	r3, [r4, #20]
   13560:	44a8      	add	r8, r5
   13562:	442b      	add	r3, r5
   13564:	6163      	str	r3, [r4, #20]
   13566:	f8d9 3000 	ldr.w	r3, [r9]
   1356a:	1b7f      	subs	r7, r7, r5
   1356c:	442b      	add	r3, r5
   1356e:	f8c9 3000 	str.w	r3, [r9]
   13572:	e7a2      	b.n	134ba <f_read+0x3a>
			fp->sect = sect;
   13574:	61e2      	str	r2, [r4, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
   13576:	6965      	ldr	r5, [r4, #20]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   13578:	69e1      	ldr	r1, [r4, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
   1357a:	f3c5 0508 	ubfx	r5, r5, #0, #9
   1357e:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
   13582:	42bd      	cmp	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   13584:	9803      	ldr	r0, [sp, #12]
   13586:	bf28      	it	cs
   13588:	463d      	movcs	r5, r7
   1358a:	f7ff fbdc 	bl	12d46 <move_window>
   1358e:	2800      	cmp	r0, #0
   13590:	d1b0      	bne.n	134f4 <f_read+0x74>
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
   13592:	9903      	ldr	r1, [sp, #12]
   13594:	6963      	ldr	r3, [r4, #20]
   13596:	3130      	adds	r1, #48	; 0x30
   13598:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1359c:	462a      	mov	r2, r5
   1359e:	4640      	mov	r0, r8
   135a0:	4419      	add	r1, r3
   135a2:	f7ff fb57 	bl	12c54 <mem_cpy.part.0>
}
   135a6:	e7da      	b.n	1355e <f_read+0xde>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   135a8:	2607      	movs	r6, #7
   135aa:	e798      	b.n	134de <f_read+0x5e>

000135ac <f_write>:
{
   135ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135b0:	4699      	mov	r9, r3
	*bw = 0;	/* Clear write byte counter */
   135b2:	2300      	movs	r3, #0
{
   135b4:	b085      	sub	sp, #20
   135b6:	4688      	mov	r8, r1
	*bw = 0;	/* Clear write byte counter */
   135b8:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   135bc:	a903      	add	r1, sp, #12
{
   135be:	4604      	mov	r4, r0
   135c0:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   135c2:	f7ff fb2d 	bl	12c20 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   135c6:	4605      	mov	r5, r0
   135c8:	bb08      	cbnz	r0, 1360e <f_write+0x62>
   135ca:	7c65      	ldrb	r5, [r4, #17]
   135cc:	b9fd      	cbnz	r5, 1360e <f_write+0x62>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   135ce:	7c23      	ldrb	r3, [r4, #16]
   135d0:	079a      	lsls	r2, r3, #30
   135d2:	f140 80a5 	bpl.w	13720 <f_write+0x174>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
   135d6:	6963      	ldr	r3, [r4, #20]
   135d8:	42f3      	cmn	r3, r6
   135da:	d300      	bcc.n	135de <f_write+0x32>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
   135dc:	43de      	mvns	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
   135de:	b196      	cbz	r6, 13606 <f_write+0x5a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
   135e0:	6963      	ldr	r3, [r4, #20]
   135e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
   135e6:	2a00      	cmp	r2, #0
   135e8:	d17d      	bne.n	136e6 <f_write+0x13a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
   135ea:	9a03      	ldr	r2, [sp, #12]
   135ec:	8957      	ldrh	r7, [r2, #10]
   135ee:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
   135f0:	ea17 2753 	ands.w	r7, r7, r3, lsr #9
   135f4:	d11e      	bne.n	13634 <f_write+0x88>
				if (fp->fptr == 0) {		/* On the top of the file? */
   135f6:	b973      	cbnz	r3, 13616 <f_write+0x6a>
					clst = fp->obj.sclust;	/* Follow from the origin */
   135f8:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
   135fa:	b971      	cbnz	r1, 1361a <f_write+0x6e>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   135fc:	4620      	mov	r0, r4
   135fe:	f7ff fc91 	bl	12f24 <create_chain>
   13602:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   13604:	b948      	cbnz	r0, 1361a <f_write+0x6e>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
   13606:	7c23      	ldrb	r3, [r4, #16]
   13608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1360c:	7423      	strb	r3, [r4, #16]
}
   1360e:	4628      	mov	r0, r5
   13610:	b005      	add	sp, #20
   13612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   13616:	69a1      	ldr	r1, [r4, #24]
   13618:	e7f0      	b.n	135fc <f_write+0x50>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   1361a:	2901      	cmp	r1, #1
   1361c:	d102      	bne.n	13624 <f_write+0x78>
   1361e:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   13620:	7465      	strb	r5, [r4, #17]
   13622:	e7f4      	b.n	1360e <f_write+0x62>
   13624:	1c4b      	adds	r3, r1, #1
   13626:	d101      	bne.n	1362c <f_write+0x80>
   13628:	2501      	movs	r5, #1
   1362a:	e7f9      	b.n	13620 <f_write+0x74>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   1362c:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
   1362e:	61a1      	str	r1, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   13630:	b903      	cbnz	r3, 13634 <f_write+0x88>
   13632:	60a1      	str	r1, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
   13634:	9803      	ldr	r0, [sp, #12]
   13636:	69e3      	ldr	r3, [r4, #28]
   13638:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   1363a:	429a      	cmp	r2, r3
   1363c:	d103      	bne.n	13646 <f_write+0x9a>
   1363e:	f7ff fb7c 	bl	12d3a <sync_window>
   13642:	2800      	cmp	r0, #0
   13644:	d1f0      	bne.n	13628 <f_write+0x7c>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
   13646:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1364a:	69a1      	ldr	r1, [r4, #24]
   1364c:	4658      	mov	r0, fp
   1364e:	f7ff fadc 	bl	12c0a <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
   13652:	2800      	cmp	r0, #0
   13654:	d0e3      	beq.n	1361e <f_write+0x72>
			if (cc) {						/* Write maximum contiguous sectors directly */
   13656:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
   1365a:	eb07 0a00 	add.w	sl, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
   1365e:	d334      	bcc.n	136ca <f_write+0x11e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   13660:	f8bb 100a 	ldrh.w	r1, [fp, #10]
   13664:	eb07 2056 	add.w	r0, r7, r6, lsr #9
   13668:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
   1366a:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   1366e:	4652      	mov	r2, sl
					cc = fs->csize - csect;
   13670:	bf88      	it	hi
   13672:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   13674:	f89b 0001 	ldrb.w	r0, [fp, #1]
   13678:	4641      	mov	r1, r8
   1367a:	9301      	str	r3, [sp, #4]
   1367c:	f7fc ffa2 	bl	105c4 <disk_write>
   13680:	4607      	mov	r7, r0
   13682:	2800      	cmp	r0, #0
   13684:	d1d0      	bne.n	13628 <f_write+0x7c>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   13686:	9803      	ldr	r0, [sp, #12]
   13688:	9b01      	ldr	r3, [sp, #4]
   1368a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   1368c:	eba1 010a 	sub.w	r1, r1, sl
   13690:	4299      	cmp	r1, r3
   13692:	d209      	bcs.n	136a8 <f_write+0xfc>
	if (cnt) {
   13694:	f44f 7200 	mov.w	r2, #512	; 0x200
   13698:	eb08 2141 	add.w	r1, r8, r1, lsl #9
   1369c:	3030      	adds	r0, #48	; 0x30
   1369e:	f7ff fad9 	bl	12c54 <mem_cpy.part.0>
					fs->wflag = 0;
   136a2:	9a03      	ldr	r2, [sp, #12]
   136a4:	9b01      	ldr	r3, [sp, #4]
   136a6:	70d7      	strb	r7, [r2, #3]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
   136a8:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
   136aa:	6963      	ldr	r3, [r4, #20]
   136ac:	68e2      	ldr	r2, [r4, #12]
   136ae:	443b      	add	r3, r7
   136b0:	6163      	str	r3, [r4, #20]
   136b2:	429a      	cmp	r2, r3
   136b4:	bf2c      	ite	cs
   136b6:	60e2      	strcs	r2, [r4, #12]
   136b8:	60e3      	strcc	r3, [r4, #12]
   136ba:	f8d9 3000 	ldr.w	r3, [r9]
   136be:	44b8      	add	r8, r7
   136c0:	443b      	add	r3, r7
   136c2:	f8c9 3000 	str.w	r3, [r9]
   136c6:	1bf6      	subs	r6, r6, r7
   136c8:	e789      	b.n	135de <f_write+0x32>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
   136ca:	6961      	ldr	r1, [r4, #20]
   136cc:	68e3      	ldr	r3, [r4, #12]
   136ce:	4299      	cmp	r1, r3
   136d0:	d307      	bcc.n	136e2 <f_write+0x136>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
   136d2:	4658      	mov	r0, fp
   136d4:	f7ff fb31 	bl	12d3a <sync_window>
   136d8:	2800      	cmp	r0, #0
   136da:	d1a5      	bne.n	13628 <f_write+0x7c>
				fs->winsect = sect;
   136dc:	9b03      	ldr	r3, [sp, #12]
   136de:	f8c3 a02c 	str.w	sl, [r3, #44]	; 0x2c
			fp->sect = sect;
   136e2:	f8c4 a01c 	str.w	sl, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
   136e6:	6967      	ldr	r7, [r4, #20]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   136e8:	69e1      	ldr	r1, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
   136ea:	f3c7 0708 	ubfx	r7, r7, #0, #9
   136ee:	f5c7 7700 	rsb	r7, r7, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
   136f2:	42b7      	cmp	r7, r6
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   136f4:	9803      	ldr	r0, [sp, #12]
   136f6:	bf28      	it	cs
   136f8:	4637      	movcs	r7, r6
   136fa:	f7ff fb24 	bl	12d46 <move_window>
   136fe:	2800      	cmp	r0, #0
   13700:	d192      	bne.n	13628 <f_write+0x7c>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
   13702:	9803      	ldr	r0, [sp, #12]
   13704:	6963      	ldr	r3, [r4, #20]
   13706:	3030      	adds	r0, #48	; 0x30
   13708:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1370c:	463a      	mov	r2, r7
   1370e:	4418      	add	r0, r3
   13710:	4641      	mov	r1, r8
   13712:	f7ff fa9f 	bl	12c54 <mem_cpy.part.0>
		fs->wflag = 1;
   13716:	f04f 0201 	mov.w	r2, #1
   1371a:	9b03      	ldr	r3, [sp, #12]
   1371c:	70da      	strb	r2, [r3, #3]
   1371e:	e7c4      	b.n	136aa <f_write+0xfe>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   13720:	2507      	movs	r5, #7
   13722:	e774      	b.n	1360e <f_write+0x62>

00013724 <f_sync>:
{
   13724:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   13726:	a901      	add	r1, sp, #4
{
   13728:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   1372a:	f7ff fa79 	bl	12c20 <validate>
	if (res == FR_OK) {
   1372e:	4604      	mov	r4, r0
   13730:	bb50      	cbnz	r0, 13788 <f_sync+0x64>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
   13732:	7c2c      	ldrb	r4, [r5, #16]
   13734:	f014 0440 	ands.w	r4, r4, #64	; 0x40
   13738:	d026      	beq.n	13788 <f_sync+0x64>
				res = move_window(fs, fp->dir_sect);
   1373a:	6a29      	ldr	r1, [r5, #32]
   1373c:	9801      	ldr	r0, [sp, #4]
   1373e:	f7ff fb02 	bl	12d46 <move_window>
				if (res == FR_OK) {
   13742:	4604      	mov	r4, r0
   13744:	bb00      	cbnz	r0, 13788 <f_sync+0x64>
					dir = fp->dir_ptr;
   13746:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
   13748:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
   1374a:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
   1374c:	f043 0320 	orr.w	r3, r3, #32
   13750:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
   13752:	68aa      	ldr	r2, [r5, #8]
   13754:	6828      	ldr	r0, [r5, #0]
   13756:	f7ff fa94 	bl	12c82 <st_clust.isra.0>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
   1375a:	68e9      	ldr	r1, [r5, #12]
   1375c:	f106 001c 	add.w	r0, r6, #28
   13760:	f7ff fa45 	bl	12bee <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
   13764:	2321      	movs	r3, #33	; 0x21
   13766:	7633      	strb	r3, [r6, #24]
	*ptr++ = (BYTE)val;
   13768:	2348      	movs	r3, #72	; 0x48
   1376a:	7673      	strb	r3, [r6, #25]
					fs->wflag = 1;
   1376c:	2301      	movs	r3, #1
   1376e:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
   13770:	75b4      	strb	r4, [r6, #22]
	*ptr++ = (BYTE)val; val >>= 8;
   13772:	75f4      	strb	r4, [r6, #23]
	*ptr++ = (BYTE)val; val >>= 8;
   13774:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
   13776:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
   13778:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
   1377a:	f7ff fc62 	bl	13042 <sync_fs>
   1377e:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
   13780:	7c2b      	ldrb	r3, [r5, #16]
   13782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13786:	742b      	strb	r3, [r5, #16]
}
   13788:	4620      	mov	r0, r4
   1378a:	b002      	add	sp, #8
   1378c:	bd70      	pop	{r4, r5, r6, pc}

0001378e <f_close>:
{
   1378e:	b513      	push	{r0, r1, r4, lr}
   13790:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
   13792:	f7ff ffc7 	bl	13724 <f_sync>
	if (res == FR_OK)
   13796:	b928      	cbnz	r0, 137a4 <f_close+0x16>
		res = validate(&fp->obj, &fs);	/* Lock volume */
   13798:	4620      	mov	r0, r4
   1379a:	a901      	add	r1, sp, #4
   1379c:	f7ff fa40 	bl	12c20 <validate>
		if (res == FR_OK) {
   137a0:	b900      	cbnz	r0, 137a4 <f_close+0x16>
				fp->obj.fs = 0;			/* Invalidate file object */
   137a2:	6020      	str	r0, [r4, #0]
}
   137a4:	b002      	add	sp, #8
   137a6:	bd10      	pop	{r4, pc}

000137a8 <f_lseek>:
{
   137a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   137ac:	460d      	mov	r5, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   137ae:	a901      	add	r1, sp, #4
{
   137b0:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   137b2:	f7ff fa35 	bl	12c20 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   137b6:	4606      	mov	r6, r0
   137b8:	2800      	cmp	r0, #0
   137ba:	d150      	bne.n	1385e <f_lseek+0xb6>
   137bc:	7c66      	ldrb	r6, [r4, #17]
   137be:	2e00      	cmp	r6, #0
   137c0:	d14d      	bne.n	1385e <f_lseek+0xb6>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
   137c2:	68e3      	ldr	r3, [r4, #12]
   137c4:	42ab      	cmp	r3, r5
   137c6:	d204      	bcs.n	137d2 <f_lseek+0x2a>
   137c8:	7c22      	ldrb	r2, [r4, #16]
   137ca:	f012 0f02 	tst.w	r2, #2
   137ce:	bf08      	it	eq
   137d0:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
   137d2:	2200      	movs	r2, #0
		ifptr = fp->fptr;
   137d4:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
   137d6:	6162      	str	r2, [r4, #20]
		if (ofs) {
   137d8:	b99d      	cbnz	r5, 13802 <f_lseek+0x5a>
		fp->fptr = nsect = 0;
   137da:	2000      	movs	r0, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
   137dc:	68e2      	ldr	r2, [r4, #12]
   137de:	6963      	ldr	r3, [r4, #20]
   137e0:	4293      	cmp	r3, r2
			fp->flag |= FA_MODIFIED;
   137e2:	bf82      	ittt	hi
   137e4:	7c22      	ldrbhi	r2, [r4, #16]
			fp->obj.objsize = fp->fptr;
   137e6:	60e3      	strhi	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
   137e8:	f042 0240 	orrhi.w	r2, r2, #64	; 0x40
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   137ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
   137f0:	bf88      	it	hi
   137f2:	7422      	strbhi	r2, [r4, #16]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   137f4:	2b00      	cmp	r3, #0
   137f6:	d032      	beq.n	1385e <f_lseek+0xb6>
   137f8:	69e3      	ldr	r3, [r4, #28]
   137fa:	4283      	cmp	r3, r0
			fp->sect = nsect;
   137fc:	bf18      	it	ne
   137fe:	61e0      	strne	r0, [r4, #28]
   13800:	e02d      	b.n	1385e <f_lseek+0xb6>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   13802:	9a01      	ldr	r2, [sp, #4]
   13804:	8957      	ldrh	r7, [r2, #10]
   13806:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
   13808:	b1fb      	cbz	r3, 1384a <f_lseek+0xa2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   1380a:	3b01      	subs	r3, #1
   1380c:	1e6a      	subs	r2, r5, #1
   1380e:	fbb2 f2f7 	udiv	r2, r2, r7
   13812:	fbb3 f1f7 	udiv	r1, r3, r7
			if (ifptr > 0 &&
   13816:	428a      	cmp	r2, r1
   13818:	d317      	bcc.n	1384a <f_lseek+0xa2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
   1381a:	427a      	negs	r2, r7
   1381c:	4013      	ands	r3, r2
				clst = fp->clust;
   1381e:	69a1      	ldr	r1, [r4, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
   13820:	6163      	str	r3, [r4, #20]
				ofs -= fp->fptr;
   13822:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
   13824:	2900      	cmp	r1, #0
   13826:	d0d8      	beq.n	137da <f_lseek+0x32>
				while (ofs > bcs) {						/* Cluster following loop */
   13828:	42bd      	cmp	r5, r7
   1382a:	6963      	ldr	r3, [r4, #20]
   1382c:	d822      	bhi.n	13874 <f_lseek+0xcc>
				fp->fptr += ofs;
   1382e:	6963      	ldr	r3, [r4, #20]
   13830:	442b      	add	r3, r5
   13832:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
   13834:	f3c5 0308 	ubfx	r3, r5, #0, #9
   13838:	2b00      	cmp	r3, #0
   1383a:	d0ce      	beq.n	137da <f_lseek+0x32>
					nsect = clust2sect(fs, clst);	/* Current sector */
   1383c:	9801      	ldr	r0, [sp, #4]
   1383e:	f7ff f9e4 	bl	12c0a <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
   13842:	b150      	cbz	r0, 1385a <f_lseek+0xb2>
					nsect += (DWORD)(ofs / SS(fs));
   13844:	eb00 2055 	add.w	r0, r0, r5, lsr #9
   13848:	e7c8      	b.n	137dc <f_lseek+0x34>
				clst = fp->obj.sclust;					/* start from the first cluster */
   1384a:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
   1384c:	b981      	cbnz	r1, 13870 <f_lseek+0xc8>
					clst = create_chain(&fp->obj, 0);
   1384e:	4620      	mov	r0, r4
   13850:	f7ff fb68 	bl	12f24 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   13854:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
   13856:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   13858:	d105      	bne.n	13866 <f_lseek+0xbe>
   1385a:	2602      	movs	r6, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   1385c:	7466      	strb	r6, [r4, #17]
}
   1385e:	4630      	mov	r0, r6
   13860:	b002      	add	sp, #8
   13862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   13866:	1c48      	adds	r0, r1, #1
   13868:	d101      	bne.n	1386e <f_lseek+0xc6>
   1386a:	2601      	movs	r6, #1
   1386c:	e7f6      	b.n	1385c <f_lseek+0xb4>
					fp->obj.sclust = clst;
   1386e:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
   13870:	61a1      	str	r1, [r4, #24]
   13872:	e7d7      	b.n	13824 <f_lseek+0x7c>
					ofs -= bcs; fp->fptr += bcs;
   13874:	443b      	add	r3, r7
   13876:	6163      	str	r3, [r4, #20]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   13878:	7c23      	ldrb	r3, [r4, #16]
					ofs -= bcs; fp->fptr += bcs;
   1387a:	eba5 0807 	sub.w	r8, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   1387e:	079a      	lsls	r2, r3, #30
   13880:	d506      	bpl.n	13890 <f_lseek+0xe8>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
   13882:	4620      	mov	r0, r4
   13884:	f7ff fb4e 	bl	12f24 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
   13888:	4605      	mov	r5, r0
   1388a:	b928      	cbnz	r0, 13898 <f_lseek+0xf0>
   1388c:	4601      	mov	r1, r0
   1388e:	e7ce      	b.n	1382e <f_lseek+0x86>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
   13890:	6820      	ldr	r0, [r4, #0]
   13892:	f7ff faed 	bl	12e70 <get_fat.isra.0>
   13896:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   13898:	1c6b      	adds	r3, r5, #1
   1389a:	d0e6      	beq.n	1386a <f_lseek+0xc2>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   1389c:	2d01      	cmp	r5, #1
   1389e:	d9dc      	bls.n	1385a <f_lseek+0xb2>
   138a0:	9b01      	ldr	r3, [sp, #4]
   138a2:	695b      	ldr	r3, [r3, #20]
   138a4:	42ab      	cmp	r3, r5
   138a6:	d9d8      	bls.n	1385a <f_lseek+0xb2>
					fp->clust = clst;
   138a8:	4629      	mov	r1, r5
   138aa:	61a5      	str	r5, [r4, #24]
					ofs -= bcs; fp->fptr += bcs;
   138ac:	4645      	mov	r5, r8
   138ae:	e7bb      	b.n	13828 <f_lseek+0x80>

000138b0 <f_opendir>:
{
   138b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!dp) return FR_INVALID_OBJECT;
   138b2:	4604      	mov	r4, r0
{
   138b4:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
   138b6:	b348      	cbz	r0, 1390c <f_opendir+0x5c>
	res = find_volume(&path, &fs, 0);
   138b8:	2200      	movs	r2, #0
   138ba:	a903      	add	r1, sp, #12
   138bc:	a801      	add	r0, sp, #4
   138be:	f7fc f969 	bl	fb94 <find_volume>
	if (res == FR_OK) {
   138c2:	b970      	cbnz	r0, 138e2 <f_opendir+0x32>
		obj->fs = fs;
   138c4:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
   138c6:	4620      	mov	r0, r4
   138c8:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
   138ca:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
   138cc:	f7fc fab6 	bl	fe3c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
   138d0:	b9f0      	cbnz	r0, 13910 <f_opendir+0x60>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
   138d2:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
   138d6:	2b00      	cmp	r3, #0
   138d8:	db0c      	blt.n	138f4 <f_opendir+0x44>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
   138da:	79a3      	ldrb	r3, [r4, #6]
   138dc:	06db      	lsls	r3, r3, #27
   138de:	d403      	bmi.n	138e8 <f_opendir+0x38>
					res = FR_NO_PATH;
   138e0:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
   138e2:	2300      	movs	r3, #0
   138e4:	6023      	str	r3, [r4, #0]
   138e6:	e00f      	b.n	13908 <f_opendir+0x58>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
   138e8:	9b03      	ldr	r3, [sp, #12]
   138ea:	69e1      	ldr	r1, [r4, #28]
   138ec:	7818      	ldrb	r0, [r3, #0]
   138ee:	f7ff f9ba 	bl	12c66 <ld_clust.isra.0>
   138f2:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
   138f4:	9b03      	ldr	r3, [sp, #12]
				res = dir_sdi(dp, 0);			/* Rewind directory */
   138f6:	4620      	mov	r0, r4
				obj->id = fs->id;
   138f8:	88db      	ldrh	r3, [r3, #6]
   138fa:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
   138fc:	f7ff fbec 	bl	130d8 <dir_sdi.constprop.0>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   13900:	2804      	cmp	r0, #4
   13902:	d0ed      	beq.n	138e0 <f_opendir+0x30>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
   13904:	2800      	cmp	r0, #0
   13906:	d1ec      	bne.n	138e2 <f_opendir+0x32>
}
   13908:	b004      	add	sp, #16
   1390a:	bd10      	pop	{r4, pc}
	if (!dp) return FR_INVALID_OBJECT;
   1390c:	2009      	movs	r0, #9
   1390e:	e7fb      	b.n	13908 <f_opendir+0x58>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   13910:	2804      	cmp	r0, #4
   13912:	d0e5      	beq.n	138e0 <f_opendir+0x30>
   13914:	e7e5      	b.n	138e2 <f_opendir+0x32>

00013916 <f_closedir>:
{
   13916:	b513      	push	{r0, r1, r4, lr}
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
   13918:	a901      	add	r1, sp, #4
{
   1391a:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
   1391c:	f7ff f980 	bl	12c20 <validate>
	if (res == FR_OK) {
   13920:	b900      	cbnz	r0, 13924 <f_closedir+0xe>
			dp->obj.fs = 0;			/* Invalidate directory object */
   13922:	6020      	str	r0, [r4, #0]
}
   13924:	b002      	add	sp, #8
   13926:	bd10      	pop	{r4, pc}

00013928 <f_readdir>:
{
   13928:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1392a:	460d      	mov	r5, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
   1392c:	a901      	add	r1, sp, #4
{
   1392e:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
   13930:	f7ff f976 	bl	12c20 <validate>
	if (res == FR_OK) {
   13934:	b918      	cbnz	r0, 1393e <f_readdir+0x16>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
   13936:	4620      	mov	r0, r4
		if (!fno) {
   13938:	b91d      	cbnz	r5, 13942 <f_readdir+0x1a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
   1393a:	f7ff fbcd 	bl	130d8 <dir_sdi.constprop.0>
}
   1393e:	b003      	add	sp, #12
   13940:	bd30      	pop	{r4, r5, pc}
			res = dir_read(dp, 0);			/* Read an item */
   13942:	f7ff fc70 	bl	13226 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
   13946:	f010 03fb 	ands.w	r3, r0, #251	; 0xfb
   1394a:	d1f8      	bne.n	1393e <f_readdir+0x16>
	fno->fname[0] = 0;		/* Invaidate file info */
   1394c:	726b      	strb	r3, [r5, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
   1394e:	69a3      	ldr	r3, [r4, #24]
   13950:	b11b      	cbz	r3, 1395a <f_readdir+0x32>
   13952:	4629      	mov	r1, r5
   13954:	4620      	mov	r0, r4
   13956:	f7ff f9a0 	bl	12c9a <get_fileinfo.part.0>
				res = dir_next(dp, 0);		/* Increment index for next */
   1395a:	2100      	movs	r1, #0
   1395c:	4620      	mov	r0, r4
   1395e:	f7ff fbed 	bl	1313c <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
   13962:	2804      	cmp	r0, #4
   13964:	bf08      	it	eq
   13966:	2000      	moveq	r0, #0
   13968:	e7e9      	b.n	1393e <f_readdir+0x16>

0001396a <f_stat>:
{
   1396a:	b530      	push	{r4, r5, lr}
   1396c:	b08f      	sub	sp, #60	; 0x3c
   1396e:	9001      	str	r0, [sp, #4]
   13970:	460d      	mov	r5, r1
	res = find_volume(&path, &dj.obj.fs, 0);
   13972:	2200      	movs	r2, #0
   13974:	a903      	add	r1, sp, #12
   13976:	a801      	add	r0, sp, #4
   13978:	f7fc f90c 	bl	fb94 <find_volume>
	if (res == FR_OK) {
   1397c:	4604      	mov	r4, r0
   1397e:	b988      	cbnz	r0, 139a4 <f_stat+0x3a>
		res = follow_path(&dj, path);	/* Follow the file path */
   13980:	9901      	ldr	r1, [sp, #4]
   13982:	a803      	add	r0, sp, #12
   13984:	f7fc fa5a 	bl	fe3c <follow_path>
		if (res == FR_OK) {				/* Follow completed */
   13988:	4604      	mov	r4, r0
   1398a:	b958      	cbnz	r0, 139a4 <f_stat+0x3a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
   1398c:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
   13990:	2b00      	cmp	r3, #0
   13992:	db0a      	blt.n	139aa <f_stat+0x40>
				if (fno) get_fileinfo(&dj, fno);
   13994:	b135      	cbz	r5, 139a4 <f_stat+0x3a>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
   13996:	9b09      	ldr	r3, [sp, #36]	; 0x24
	fno->fname[0] = 0;		/* Invaidate file info */
   13998:	7268      	strb	r0, [r5, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
   1399a:	b11b      	cbz	r3, 139a4 <f_stat+0x3a>
   1399c:	4629      	mov	r1, r5
   1399e:	a803      	add	r0, sp, #12
   139a0:	f7ff f97b 	bl	12c9a <get_fileinfo.part.0>
}
   139a4:	4620      	mov	r0, r4
   139a6:	b00f      	add	sp, #60	; 0x3c
   139a8:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
   139aa:	2406      	movs	r4, #6
   139ac:	e7fa      	b.n	139a4 <f_stat+0x3a>

000139ae <f_getfree>:
{
   139ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   139b2:	b085      	sub	sp, #20
   139b4:	9001      	str	r0, [sp, #4]
   139b6:	4688      	mov	r8, r1
   139b8:	4616      	mov	r6, r2
	res = find_volume(&path, &fs, 0);
   139ba:	a903      	add	r1, sp, #12
   139bc:	2200      	movs	r2, #0
   139be:	a801      	add	r0, sp, #4
   139c0:	f7fc f8e8 	bl	fb94 <find_volume>
	if (res == FR_OK) {
   139c4:	4604      	mov	r4, r0
   139c6:	b948      	cbnz	r0, 139dc <f_getfree+0x2e>
		*fatfs = fs;				/* Return ptr to the fs object */
   139c8:	9d03      	ldr	r5, [sp, #12]
		if (fs->free_clst <= fs->n_fatent - 2) {
   139ca:	e9d5 3904 	ldrd	r3, r9, [r5, #16]
   139ce:	f1a9 0202 	sub.w	r2, r9, #2
   139d2:	4293      	cmp	r3, r2
		*fatfs = fs;				/* Return ptr to the fs object */
   139d4:	6035      	str	r5, [r6, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
   139d6:	d805      	bhi.n	139e4 <f_getfree+0x36>
			*nclst = fs->free_clst;
   139d8:	f8c8 3000 	str.w	r3, [r8]
}
   139dc:	4620      	mov	r0, r4
   139de:	b005      	add	sp, #20
   139e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
   139e4:	782b      	ldrb	r3, [r5, #0]
   139e6:	2b01      	cmp	r3, #1
   139e8:	d119      	bne.n	13a1e <f_getfree+0x70>
				clst = 2; obj.fs = fs;
   139ea:	2702      	movs	r7, #2
			nfree = 0;
   139ec:	4606      	mov	r6, r0
					stat = get_fat(&obj, clst);
   139ee:	4639      	mov	r1, r7
   139f0:	4628      	mov	r0, r5
   139f2:	f7ff fa3d 	bl	12e70 <get_fat.isra.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   139f6:	1c43      	adds	r3, r0, #1
   139f8:	d03a      	beq.n	13a70 <f_getfree+0xc2>
					if (stat == 1) { res = FR_INT_ERR; break; }
   139fa:	2801      	cmp	r0, #1
   139fc:	d03a      	beq.n	13a74 <f_getfree+0xc6>
					if (stat == 0) nfree++;
   139fe:	b900      	cbnz	r0, 13a02 <f_getfree+0x54>
   13a00:	3601      	adds	r6, #1
				} while (++clst < fs->n_fatent);
   13a02:	9b03      	ldr	r3, [sp, #12]
   13a04:	3701      	adds	r7, #1
   13a06:	695b      	ldr	r3, [r3, #20]
   13a08:	42bb      	cmp	r3, r7
   13a0a:	d8f0      	bhi.n	139ee <f_getfree+0x40>
			fs->free_clst = nfree;	/* Now free_clst is valid */
   13a0c:	9b03      	ldr	r3, [sp, #12]
			*nclst = nfree;			/* Return the free clusters */
   13a0e:	f8c8 6000 	str.w	r6, [r8]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
   13a12:	791a      	ldrb	r2, [r3, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
   13a14:	611e      	str	r6, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
   13a16:	f042 0201 	orr.w	r2, r2, #1
   13a1a:	711a      	strb	r2, [r3, #4]
   13a1c:	e7de      	b.n	139dc <f_getfree+0x2e>
					clst = fs->n_fatent; sect = fs->fatbase;
   13a1e:	6a29      	ldr	r1, [r5, #32]
					i = 0; p = 0;
   13a20:	4607      	mov	r7, r0
   13a22:	4605      	mov	r5, r0
			nfree = 0;
   13a24:	4606      	mov	r6, r0
						if (i == 0) {
   13a26:	b94f      	cbnz	r7, 13a3c <f_getfree+0x8e>
							res = move_window(fs, sect++);
   13a28:	9803      	ldr	r0, [sp, #12]
   13a2a:	1c4f      	adds	r7, r1, #1
   13a2c:	f7ff f98b 	bl	12d46 <move_window>
							if (res != FR_OK) break;
   13a30:	bb10      	cbnz	r0, 13a78 <f_getfree+0xca>
							res = move_window(fs, sect++);
   13a32:	4639      	mov	r1, r7
							i = SS(fs);
   13a34:	f44f 7700 	mov.w	r7, #512	; 0x200
							p = fs->win;
   13a38:	9d03      	ldr	r5, [sp, #12]
   13a3a:	3530      	adds	r5, #48	; 0x30
						if (fs->fs_type == FS_FAT16) {
   13a3c:	9b03      	ldr	r3, [sp, #12]
   13a3e:	781b      	ldrb	r3, [r3, #0]
   13a40:	2b02      	cmp	r3, #2
   13a42:	d10b      	bne.n	13a5c <f_getfree+0xae>
	rv = rv << 8 | ptr[0];
   13a44:	786a      	ldrb	r2, [r5, #1]
   13a46:	782b      	ldrb	r3, [r5, #0]
							p += 2; i -= 2;
   13a48:	3f02      	subs	r7, #2
							if (ld_word(p) == 0) nfree++;
   13a4a:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
   13a4e:	bf08      	it	eq
   13a50:	3601      	addeq	r6, #1
							p += 2; i -= 2;
   13a52:	3502      	adds	r5, #2
					} while (--clst);
   13a54:	f1b9 0901 	subs.w	r9, r9, #1
   13a58:	d1e5      	bne.n	13a26 <f_getfree+0x78>
   13a5a:	e7d7      	b.n	13a0c <f_getfree+0x5e>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
   13a5c:	4628      	mov	r0, r5
   13a5e:	f7ff f8be 	bl	12bde <ld_dword>
   13a62:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
   13a66:	bf08      	it	eq
   13a68:	3601      	addeq	r6, #1
							p += 4; i -= 4;
   13a6a:	3504      	adds	r5, #4
   13a6c:	3f04      	subs	r7, #4
   13a6e:	e7f1      	b.n	13a54 <f_getfree+0xa6>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   13a70:	2401      	movs	r4, #1
   13a72:	e7cb      	b.n	13a0c <f_getfree+0x5e>
					if (stat == 1) { res = FR_INT_ERR; break; }
   13a74:	2402      	movs	r4, #2
   13a76:	e7c9      	b.n	13a0c <f_getfree+0x5e>
							res = move_window(fs, sect++);
   13a78:	4604      	mov	r4, r0
   13a7a:	e7c7      	b.n	13a0c <f_getfree+0x5e>

00013a7c <f_truncate>:
{
   13a7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   13a7e:	a901      	add	r1, sp, #4
{
   13a80:	4606      	mov	r6, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   13a82:	f7ff f8cd 	bl	12c20 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
   13a86:	4604      	mov	r4, r0
   13a88:	b9c0      	cbnz	r0, 13abc <f_truncate+0x40>
   13a8a:	7c74      	ldrb	r4, [r6, #17]
   13a8c:	b9b4      	cbnz	r4, 13abc <f_truncate+0x40>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   13a8e:	7c33      	ldrb	r3, [r6, #16]
   13a90:	079a      	lsls	r2, r3, #30
   13a92:	d52d      	bpl.n	13af0 <f_truncate+0x74>
	if (fp->obj.objsize > fp->fptr) {
   13a94:	6975      	ldr	r5, [r6, #20]
   13a96:	68f3      	ldr	r3, [r6, #12]
   13a98:	42ab      	cmp	r3, r5
   13a9a:	d90f      	bls.n	13abc <f_truncate+0x40>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   13a9c:	b98d      	cbnz	r5, 13ac2 <f_truncate+0x46>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   13a9e:	4622      	mov	r2, r4
   13aa0:	4630      	mov	r0, r6
   13aa2:	68b1      	ldr	r1, [r6, #8]
   13aa4:	f7ff fa96 	bl	12fd4 <remove_chain>
   13aa8:	4604      	mov	r4, r0
			fp->obj.sclust = 0;
   13aaa:	60b5      	str	r5, [r6, #8]
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
   13aac:	6973      	ldr	r3, [r6, #20]
   13aae:	60f3      	str	r3, [r6, #12]
		fp->flag |= FA_MODIFIED;
   13ab0:	7c33      	ldrb	r3, [r6, #16]
   13ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13ab6:	7433      	strb	r3, [r6, #16]
		if (res != FR_OK) ABORT(fs, res);
   13ab8:	b104      	cbz	r4, 13abc <f_truncate+0x40>
   13aba:	7474      	strb	r4, [r6, #17]
}
   13abc:	4620      	mov	r0, r4
   13abe:	b002      	add	sp, #8
   13ac0:	bd70      	pop	{r4, r5, r6, pc}
			ncl = get_fat(&fp->obj, fp->clust);
   13ac2:	69b1      	ldr	r1, [r6, #24]
   13ac4:	6830      	ldr	r0, [r6, #0]
   13ac6:	f7ff f9d3 	bl	12e70 <get_fat.isra.0>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   13aca:	1c43      	adds	r3, r0, #1
			ncl = get_fat(&fp->obj, fp->clust);
   13acc:	4601      	mov	r1, r0
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   13ace:	d00b      	beq.n	13ae8 <f_truncate+0x6c>
			if (ncl == 1) res = FR_INT_ERR;
   13ad0:	2801      	cmp	r0, #1
   13ad2:	d00b      	beq.n	13aec <f_truncate+0x70>
			if (res == FR_OK && ncl < fs->n_fatent) {
   13ad4:	9b01      	ldr	r3, [sp, #4]
   13ad6:	695b      	ldr	r3, [r3, #20]
   13ad8:	4283      	cmp	r3, r0
   13ada:	d9e7      	bls.n	13aac <f_truncate+0x30>
				res = remove_chain(&fp->obj, ncl, fp->clust);
   13adc:	4630      	mov	r0, r6
   13ade:	69b2      	ldr	r2, [r6, #24]
   13ae0:	f7ff fa78 	bl	12fd4 <remove_chain>
   13ae4:	4604      	mov	r4, r0
   13ae6:	e7e1      	b.n	13aac <f_truncate+0x30>
   13ae8:	2401      	movs	r4, #1
   13aea:	e7df      	b.n	13aac <f_truncate+0x30>
			if (ncl == 1) res = FR_INT_ERR;
   13aec:	2402      	movs	r4, #2
   13aee:	e7dd      	b.n	13aac <f_truncate+0x30>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   13af0:	2407      	movs	r4, #7
   13af2:	e7e3      	b.n	13abc <f_truncate+0x40>

00013af4 <f_unlink>:
{
   13af4:	b570      	push	{r4, r5, r6, lr}
   13af6:	b09a      	sub	sp, #104	; 0x68
   13af8:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
   13afa:	2202      	movs	r2, #2
   13afc:	a903      	add	r1, sp, #12
   13afe:	a801      	add	r0, sp, #4
   13b00:	f7fc f848 	bl	fb94 <find_volume>
	dj.obj.fs = fs;
   13b04:	9b03      	ldr	r3, [sp, #12]
   13b06:	9304      	str	r3, [sp, #16]
	if (res == FR_OK) {
   13b08:	b968      	cbnz	r0, 13b26 <f_unlink+0x32>
		res = follow_path(&dj, path);		/* Follow the file path */
   13b0a:	9901      	ldr	r1, [sp, #4]
   13b0c:	a804      	add	r0, sp, #16
   13b0e:	f7fc f995 	bl	fe3c <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
   13b12:	b940      	cbnz	r0, 13b26 <f_unlink+0x32>
			if (dj.fn[NSFLAG] & NS_NONAME) {
   13b14:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
   13b18:	2b00      	cmp	r3, #0
   13b1a:	db36      	blt.n	13b8a <f_unlink+0x96>
				if (dj.obj.attr & AM_RDO) {
   13b1c:	f89d 6016 	ldrb.w	r6, [sp, #22]
   13b20:	07f2      	lsls	r2, r6, #31
   13b22:	d502      	bpl.n	13b2a <f_unlink+0x36>
					res = FR_DENIED;		/* Cannot remove R/O object */
   13b24:	2007      	movs	r0, #7
}
   13b26:	b01a      	add	sp, #104	; 0x68
   13b28:	bd70      	pop	{r4, r5, r6, pc}
					dclst = ld_clust(fs, dj.dir);
   13b2a:	9d03      	ldr	r5, [sp, #12]
   13b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13b2e:	7828      	ldrb	r0, [r5, #0]
   13b30:	f7ff f899 	bl	12c66 <ld_clust.isra.0>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
   13b34:	06f3      	lsls	r3, r6, #27
					dclst = ld_clust(fs, dj.dir);
   13b36:	4604      	mov	r4, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
   13b38:	d410      	bmi.n	13b5c <f_unlink+0x68>
	FATFS *fs = dp->obj.fs;
   13b3a:	9d04      	ldr	r5, [sp, #16]
	res = move_window(fs, dp->sect);
   13b3c:	990a      	ldr	r1, [sp, #40]	; 0x28
   13b3e:	4628      	mov	r0, r5
   13b40:	f7ff f901 	bl	12d46 <move_window>
	if (res == FR_OK) {
   13b44:	2800      	cmp	r0, #0
   13b46:	d1ee      	bne.n	13b26 <f_unlink+0x32>
		dp->dir[DIR_Name] = DDEM;
   13b48:	22e5      	movs	r2, #229	; 0xe5
   13b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13b4c:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
   13b4e:	2301      	movs	r3, #1
   13b50:	70eb      	strb	r3, [r5, #3]
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
   13b52:	b994      	cbnz	r4, 13b7a <f_unlink+0x86>
				if (res == FR_OK) res = sync_fs(fs);
   13b54:	9803      	ldr	r0, [sp, #12]
   13b56:	f7ff fa74 	bl	13042 <sync_fs>
   13b5a:	e7e4      	b.n	13b26 <f_unlink+0x32>
						sdj.obj.sclust = dclst;
   13b5c:	9011      	str	r0, [sp, #68]	; 0x44
						res = dir_sdi(&sdj, 0);
   13b5e:	a80f      	add	r0, sp, #60	; 0x3c
						sdj.obj.fs = fs;						/* Open the sub-directory */
   13b60:	950f      	str	r5, [sp, #60]	; 0x3c
						res = dir_sdi(&sdj, 0);
   13b62:	f7ff fab9 	bl	130d8 <dir_sdi.constprop.0>
						if (res == FR_OK) {
   13b66:	2800      	cmp	r0, #0
   13b68:	d1dd      	bne.n	13b26 <f_unlink+0x32>
							res = dir_read(&sdj, 0);			/* Read an item */
   13b6a:	a80f      	add	r0, sp, #60	; 0x3c
   13b6c:	f7ff fb5b 	bl	13226 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
   13b70:	2800      	cmp	r0, #0
   13b72:	d0d7      	beq.n	13b24 <f_unlink+0x30>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
   13b74:	2804      	cmp	r0, #4
   13b76:	d1d6      	bne.n	13b26 <f_unlink+0x32>
   13b78:	e7df      	b.n	13b3a <f_unlink+0x46>
					res = remove_chain(&dj.obj, dclst, 0);
   13b7a:	4602      	mov	r2, r0
   13b7c:	4621      	mov	r1, r4
   13b7e:	a804      	add	r0, sp, #16
   13b80:	f7ff fa28 	bl	12fd4 <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
   13b84:	2800      	cmp	r0, #0
   13b86:	d1ce      	bne.n	13b26 <f_unlink+0x32>
   13b88:	e7e4      	b.n	13b54 <f_unlink+0x60>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
   13b8a:	2006      	movs	r0, #6
   13b8c:	e7cb      	b.n	13b26 <f_unlink+0x32>

00013b8e <f_mkdir>:
{
   13b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b92:	b08e      	sub	sp, #56	; 0x38
   13b94:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
   13b96:	2202      	movs	r2, #2
   13b98:	a902      	add	r1, sp, #8
   13b9a:	a801      	add	r0, sp, #4
   13b9c:	f7fb fffa 	bl	fb94 <find_volume>
	dj.obj.fs = fs;
   13ba0:	9b02      	ldr	r3, [sp, #8]
	res = find_volume(&path, &fs, FA_WRITE);
   13ba2:	4604      	mov	r4, r0
   13ba4:	4605      	mov	r5, r0
	dj.obj.fs = fs;
   13ba6:	9303      	str	r3, [sp, #12]
	if (res == FR_OK) {
   13ba8:	2800      	cmp	r0, #0
   13baa:	d17f      	bne.n	13cac <f_mkdir+0x11e>
		res = follow_path(&dj, path);			/* Follow the file path */
   13bac:	9901      	ldr	r1, [sp, #4]
   13bae:	a803      	add	r0, sp, #12
   13bb0:	f7fc f944 	bl	fe3c <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
   13bb4:	4604      	mov	r4, r0
   13bb6:	2800      	cmp	r0, #0
   13bb8:	f000 809a 	beq.w	13cf0 <f_mkdir+0x162>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
   13bbc:	2804      	cmp	r0, #4
   13bbe:	d175      	bne.n	13cac <f_mkdir+0x11e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
   13bc0:	4629      	mov	r1, r5
   13bc2:	a803      	add	r0, sp, #12
   13bc4:	f7ff f9ae 	bl	12f24 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
   13bc8:	9a02      	ldr	r2, [sp, #8]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
   13bca:	4605      	mov	r5, r0
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
   13bcc:	8953      	ldrh	r3, [r2, #10]
   13bce:	025b      	lsls	r3, r3, #9
   13bd0:	9306      	str	r3, [sp, #24]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
   13bd2:	2800      	cmp	r0, #0
   13bd4:	f000 8081 	beq.w	13cda <f_mkdir+0x14c>
			if (dcl == 1) res = FR_INT_ERR;
   13bd8:	2801      	cmp	r0, #1
   13bda:	f000 8085 	beq.w	13ce8 <f_mkdir+0x15a>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
   13bde:	1c43      	adds	r3, r0, #1
   13be0:	f000 8084 	beq.w	13cec <f_mkdir+0x15e>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
   13be4:	4610      	mov	r0, r2
   13be6:	f7ff f8a8 	bl	12d3a <sync_window>
   13bea:	4606      	mov	r6, r0
   13bec:	4604      	mov	r4, r0
			if (res == FR_OK) {					/* Initialize the new directory table */
   13bee:	2800      	cmp	r0, #0
   13bf0:	d174      	bne.n	13cdc <f_mkdir+0x14e>
				dsc = clust2sect(fs, dcl);
   13bf2:	f8dd 9008 	ldr.w	r9, [sp, #8]
   13bf6:	4629      	mov	r1, r5
   13bf8:	4648      	mov	r0, r9
   13bfa:	f7ff f806 	bl	12c0a <clust2sect>
				dir = fs->win;
   13bfe:	f109 0730 	add.w	r7, r9, #48	; 0x30
				mem_set(dir, 0, SS(fs));
   13c02:	f44f 7200 	mov.w	r2, #512	; 0x200
   13c06:	4631      	mov	r1, r6
				dsc = clust2sect(fs, dcl);
   13c08:	4680      	mov	r8, r0
				mem_set(dir, 0, SS(fs));
   13c0a:	4638      	mov	r0, r7
   13c0c:	f7fe fff7 	bl	12bfe <mem_set>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
   13c10:	220b      	movs	r2, #11
   13c12:	2120      	movs	r1, #32
   13c14:	4638      	mov	r0, r7
   13c16:	f7fe fff2 	bl	12bfe <mem_set>
					dir[DIR_Attr] = AM_DIR;
   13c1a:	2310      	movs	r3, #16
   13c1c:	f889 303b 	strb.w	r3, [r9, #59]	; 0x3b
	*ptr++ = (BYTE)val; val >>= 8;
   13c20:	2321      	movs	r3, #33	; 0x21
					dir[DIR_Name] = '.';
   13c22:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
   13c26:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
	*ptr++ = (BYTE)val;
   13c2a:	2348      	movs	r3, #72	; 0x48
					st_clust(fs, dir, dcl);
   13c2c:	462a      	mov	r2, r5
	*ptr++ = (BYTE)val;
   13c2e:	f889 3049 	strb.w	r3, [r9, #73]	; 0x49
					st_clust(fs, dir, dcl);
   13c32:	4639      	mov	r1, r7
   13c34:	9802      	ldr	r0, [sp, #8]
					dir[DIR_Name] = '.';
   13c36:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
   13c3a:	f889 6046 	strb.w	r6, [r9, #70]	; 0x46
	*ptr++ = (BYTE)val; val >>= 8;
   13c3e:	f889 6047 	strb.w	r6, [r9, #71]	; 0x47
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
   13c42:	f109 0450 	add.w	r4, r9, #80	; 0x50
					st_clust(fs, dir, dcl);
   13c46:	f7ff f81c 	bl	12c82 <st_clust.isra.0>
	if (cnt) {
   13c4a:	2220      	movs	r2, #32
   13c4c:	4620      	mov	r0, r4
   13c4e:	f7ff f801 	bl	12c54 <mem_cpy.part.0>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
   13c52:	9802      	ldr	r0, [sp, #8]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   13c54:	f889 a051 	strb.w	sl, [r9, #81]	; 0x51
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
   13c58:	7803      	ldrb	r3, [r0, #0]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   13c5a:	9a05      	ldr	r2, [sp, #20]
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
   13c5c:	2b03      	cmp	r3, #3
   13c5e:	d103      	bne.n	13c68 <f_mkdir+0xda>
   13c60:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13c62:	4293      	cmp	r3, r2
   13c64:	bf08      	it	eq
   13c66:	2200      	moveq	r2, #0
					fs->wflag = 1;
   13c68:	f04f 0901 	mov.w	r9, #1
					st_clust(fs, dir + SZDIRE, pcl);
   13c6c:	4621      	mov	r1, r4
   13c6e:	f7ff f808 	bl	12c82 <st_clust.isra.0>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
   13c72:	9b02      	ldr	r3, [sp, #8]
   13c74:	895e      	ldrh	r6, [r3, #10]
   13c76:	4446      	add	r6, r8
   13c78:	45b0      	cmp	r8, r6
   13c7a:	d11b      	bne.n	13cb4 <f_mkdir+0x126>
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
   13c7c:	a803      	add	r0, sp, #12
   13c7e:	f7ff fafc 	bl	1327a <dir_register>
			if (res == FR_OK) {
   13c82:	4604      	mov	r4, r0
   13c84:	bb50      	cbnz	r0, 13cdc <f_mkdir+0x14e>
	*ptr++ = (BYTE)val; val >>= 8;
   13c86:	2321      	movs	r3, #33	; 0x21
					dir = dj.dir;
   13c88:	990a      	ldr	r1, [sp, #40]	; 0x28
					st_clust(fs, dir, dcl);				/* Table start cluster */
   13c8a:	462a      	mov	r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
   13c8c:	760b      	strb	r3, [r1, #24]
	*ptr++ = (BYTE)val;
   13c8e:	2348      	movs	r3, #72	; 0x48
	*ptr++ = (BYTE)val; val >>= 8;
   13c90:	758c      	strb	r4, [r1, #22]
	*ptr++ = (BYTE)val; val >>= 8;
   13c92:	75cc      	strb	r4, [r1, #23]
	*ptr++ = (BYTE)val;
   13c94:	764b      	strb	r3, [r1, #25]
					st_clust(fs, dir, dcl);				/* Table start cluster */
   13c96:	9802      	ldr	r0, [sp, #8]
   13c98:	f7fe fff3 	bl	12c82 <st_clust.isra.0>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
   13c9c:	2310      	movs	r3, #16
   13c9e:	72cb      	strb	r3, [r1, #11]
					fs->wflag = 1;
   13ca0:	2301      	movs	r3, #1
   13ca2:	9802      	ldr	r0, [sp, #8]
   13ca4:	70c3      	strb	r3, [r0, #3]
				if (res == FR_OK) res = sync_fs(fs);
   13ca6:	f7ff f9cc 	bl	13042 <sync_fs>
   13caa:	4604      	mov	r4, r0
}
   13cac:	4620      	mov	r0, r4
   13cae:	b00e      	add	sp, #56	; 0x38
   13cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					fs->winsect = dsc++;
   13cb4:	9802      	ldr	r0, [sp, #8]
   13cb6:	f108 0a01 	add.w	sl, r8, #1
   13cba:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
					fs->wflag = 1;
   13cbe:	f880 9003 	strb.w	r9, [r0, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
   13cc2:	f7ff f814 	bl	12cee <sync_window.part.0>
					if (res != FR_OK) break;
   13cc6:	4604      	mov	r4, r0
   13cc8:	b940      	cbnz	r0, 13cdc <f_mkdir+0x14e>
					mem_set(dir, 0, SS(fs));
   13cca:	4601      	mov	r1, r0
   13ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
   13cd0:	4638      	mov	r0, r7
   13cd2:	f7fe ff94 	bl	12bfe <mem_set>
					fs->winsect = dsc++;
   13cd6:	46d0      	mov	r8, sl
   13cd8:	e7ce      	b.n	13c78 <f_mkdir+0xea>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
   13cda:	2407      	movs	r4, #7
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
   13cdc:	2200      	movs	r2, #0
   13cde:	4629      	mov	r1, r5
   13ce0:	a803      	add	r0, sp, #12
   13ce2:	f7ff f977 	bl	12fd4 <remove_chain>
   13ce6:	e7e1      	b.n	13cac <f_mkdir+0x11e>
			if (dcl == 1) res = FR_INT_ERR;
   13ce8:	2402      	movs	r4, #2
   13cea:	e7f7      	b.n	13cdc <f_mkdir+0x14e>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
   13cec:	2401      	movs	r4, #1
   13cee:	e7f5      	b.n	13cdc <f_mkdir+0x14e>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
   13cf0:	2408      	movs	r4, #8
	LEAVE_FF(fs, res);
   13cf2:	e7db      	b.n	13cac <f_mkdir+0x11e>

00013cf4 <f_rename>:
{
   13cf4:	b570      	push	{r4, r5, r6, lr}
   13cf6:	b0a0      	sub	sp, #128	; 0x80
   13cf8:	e9cd 1000 	strd	r1, r0, [sp]
	get_ldnumber(&path_new);						/* Ignore drive number of new name */
   13cfc:	4668      	mov	r0, sp
   13cfe:	f7fb fed1 	bl	faa4 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
   13d02:	2202      	movs	r2, #2
   13d04:	a903      	add	r1, sp, #12
   13d06:	a801      	add	r0, sp, #4
   13d08:	f7fb ff44 	bl	fb94 <find_volume>
	if (res == FR_OK) {
   13d0c:	2800      	cmp	r0, #0
   13d0e:	d16c      	bne.n	13dea <f_rename+0xf6>
		djo.obj.fs = fs;
   13d10:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&djo, path_old);		/* Check old object */
   13d12:	9901      	ldr	r1, [sp, #4]
   13d14:	a80a      	add	r0, sp, #40	; 0x28
		djo.obj.fs = fs;
   13d16:	930a      	str	r3, [sp, #40]	; 0x28
		res = follow_path(&djo, path_old);		/* Check old object */
   13d18:	f7fc f890 	bl	fe3c <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   13d1c:	2800      	cmp	r0, #0
   13d1e:	d164      	bne.n	13dea <f_rename+0xf6>
   13d20:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13d24:	f013 0fa0 	tst.w	r3, #160	; 0xa0
   13d28:	d161      	bne.n	13dee <f_rename+0xfa>
	if (cnt) {
   13d2a:	9911      	ldr	r1, [sp, #68]	; 0x44
   13d2c:	2215      	movs	r2, #21
   13d2e:	310b      	adds	r1, #11
   13d30:	a804      	add	r0, sp, #16
   13d32:	f7fe ff8f 	bl	12c54 <mem_cpy.part.0>
   13d36:	a90a      	add	r1, sp, #40	; 0x28
   13d38:	a815      	add	r0, sp, #84	; 0x54
   13d3a:	222c      	movs	r2, #44	; 0x2c
   13d3c:	f7fe ff8a 	bl	12c54 <mem_cpy.part.0>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   13d40:	9900      	ldr	r1, [sp, #0]
   13d42:	a815      	add	r0, sp, #84	; 0x54
   13d44:	f7fc f87a 	bl	fe3c <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
   13d48:	b948      	cbnz	r0, 13d5e <f_rename+0x6a>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   13d4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   13d4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13d4e:	429a      	cmp	r2, r3
   13d50:	d103      	bne.n	13d5a <f_rename+0x66>
   13d52:	9a19      	ldr	r2, [sp, #100]	; 0x64
   13d54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13d56:	429a      	cmp	r2, r3
   13d58:	d003      	beq.n	13d62 <f_rename+0x6e>
   13d5a:	2008      	movs	r0, #8
   13d5c:	e045      	b.n	13dea <f_rename+0xf6>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   13d5e:	2804      	cmp	r0, #4
   13d60:	d143      	bne.n	13dea <f_rename+0xf6>
					res = dir_register(&djn);			/* Register the new entry */
   13d62:	a815      	add	r0, sp, #84	; 0x54
   13d64:	f7ff fa89 	bl	1327a <dir_register>
					if (res == FR_OK) {
   13d68:	2800      	cmp	r0, #0
   13d6a:	d13e      	bne.n	13dea <f_rename+0xf6>
						fs->wflag = 1;
   13d6c:	2601      	movs	r6, #1
						dir = djn.dir;					/* Copy information about object except name */
   13d6e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
	if (cnt) {
   13d70:	2213      	movs	r2, #19
   13d72:	f10d 0112 	add.w	r1, sp, #18
   13d76:	f105 000d 	add.w	r0, r5, #13
   13d7a:	f7fe ff6b 	bl	12c54 <mem_cpy.part.0>
						dir[DIR_Attr] = buf[0] | AM_ARC;
   13d7e:	f89d 3010 	ldrb.w	r3, [sp, #16]
						fs->wflag = 1;
   13d82:	9c03      	ldr	r4, [sp, #12]
						dir[DIR_Attr] = buf[0] | AM_ARC;
   13d84:	f043 0320 	orr.w	r3, r3, #32
   13d88:	72eb      	strb	r3, [r5, #11]
						fs->wflag = 1;
   13d8a:	70e6      	strb	r6, [r4, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
   13d8c:	7aeb      	ldrb	r3, [r5, #11]
   13d8e:	06db      	lsls	r3, r3, #27
   13d90:	d51d      	bpl.n	13dce <f_rename+0xda>
   13d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13d94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13d96:	429a      	cmp	r2, r3
   13d98:	d019      	beq.n	13dce <f_rename+0xda>
							dw = clust2sect(fs, ld_clust(fs, dir));
   13d9a:	4629      	mov	r1, r5
   13d9c:	7820      	ldrb	r0, [r4, #0]
   13d9e:	f7fe ff62 	bl	12c66 <ld_clust.isra.0>
   13da2:	4601      	mov	r1, r0
   13da4:	4620      	mov	r0, r4
   13da6:	f7fe ff30 	bl	12c0a <clust2sect>
							if (!dw) {
   13daa:	4601      	mov	r1, r0
   13dac:	b308      	cbz	r0, 13df2 <f_rename+0xfe>
								res = move_window(fs, dw);
   13dae:	4620      	mov	r0, r4
   13db0:	f7fe ffc9 	bl	12d46 <move_window>
								if (res == FR_OK && dir[1] == '.') {
   13db4:	b9c8      	cbnz	r0, 13dea <f_rename+0xf6>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
   13db6:	9803      	ldr	r0, [sp, #12]
								if (res == FR_OK && dir[1] == '.') {
   13db8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
   13dbc:	2b2e      	cmp	r3, #46	; 0x2e
   13dbe:	d106      	bne.n	13dce <f_rename+0xda>
									st_clust(fs, dir, djn.obj.sclust);
   13dc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   13dc2:	f100 0150 	add.w	r1, r0, #80	; 0x50
   13dc6:	f7fe ff5c 	bl	12c82 <st_clust.isra.0>
									fs->wflag = 1;
   13dca:	9b03      	ldr	r3, [sp, #12]
   13dcc:	70de      	strb	r6, [r3, #3]
	FATFS *fs = dp->obj.fs;
   13dce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	res = move_window(fs, dp->sect);
   13dd0:	9910      	ldr	r1, [sp, #64]	; 0x40
   13dd2:	4620      	mov	r0, r4
   13dd4:	f7fe ffb7 	bl	12d46 <move_window>
	if (res == FR_OK) {
   13dd8:	b938      	cbnz	r0, 13dea <f_rename+0xf6>
		dp->dir[DIR_Name] = DDEM;
   13dda:	22e5      	movs	r2, #229	; 0xe5
   13ddc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13dde:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
   13de0:	2301      	movs	r3, #1
   13de2:	70e3      	strb	r3, [r4, #3]
					res = sync_fs(fs);
   13de4:	9803      	ldr	r0, [sp, #12]
   13de6:	f7ff f92c 	bl	13042 <sync_fs>
}
   13dea:	b020      	add	sp, #128	; 0x80
   13dec:	bd70      	pop	{r4, r5, r6, pc}
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   13dee:	2006      	movs	r0, #6
   13df0:	e7fb      	b.n	13dea <f_rename+0xf6>
								res = FR_INT_ERR;
   13df2:	2002      	movs	r0, #2
   13df4:	e7f9      	b.n	13dea <f_rename+0xf6>

00013df6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   13df6:	4700      	bx	r0

00013df8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   13df8:	f000 b901 	b.w	13ffe <z_impl_k_busy_wait>

00013dfc <nrfx_clock_enable>:
{
   13dfc:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   13dfe:	2005      	movs	r0, #5
   13e00:	f7f9 ff42 	bl	dc88 <arch_irq_is_enabled>
   13e04:	b920      	cbnz	r0, 13e10 <nrfx_clock_enable+0x14>
}
   13e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   13e0a:	2005      	movs	r0, #5
   13e0c:	f7f9 bf2c 	b.w	dc68 <arch_irq_enable>
   13e10:	bd08      	pop	{r3, pc}

00013e12 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   13e12:	f7fe bce7 	b.w	127e4 <z_clock_idle_exit>

00013e16 <k_mem_slab_init>:
{
   13e16:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   13e18:	2400      	movs	r4, #0
   13e1a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   13e1c:	ea41 0402 	orr.w	r4, r1, r2
   13e20:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   13e24:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   13e28:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   13e2a:	d10c      	bne.n	13e46 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   13e2c:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   13e2e:	42a3      	cmp	r3, r4
   13e30:	d103      	bne.n	13e3a <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   13e32:	e9c0 0000 	strd	r0, r0, [r0]
}
   13e36:	2000      	movs	r0, #0
}
   13e38:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   13e3a:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   13e3c:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   13e3e:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   13e40:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   13e42:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   13e44:	e7f3      	b.n	13e2e <k_mem_slab_init+0x18>
		return -EINVAL;
   13e46:	f06f 0015 	mvn.w	r0, #21
	return rc;
   13e4a:	e7f5      	b.n	13e38 <k_mem_slab_init+0x22>

00013e4c <z_impl_k_mutex_init>:
{
   13e4c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   13e4e:	2000      	movs	r0, #0
   13e50:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   13e54:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   13e58:	4770      	bx	lr

00013e5a <z_find_first_thread_to_unpend>:
{
   13e5a:	b510      	push	{r4, lr}
	__asm__ volatile(
   13e5c:	f04f 0320 	mov.w	r3, #32
   13e60:	f3ef 8411 	mrs	r4, BASEPRI
   13e64:	f383 8811 	msr	BASEPRI, r3
   13e68:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   13e6c:	f000 f837 	bl	13ede <z_priq_dumb_best>
	__asm__ volatile(
   13e70:	f384 8811 	msr	BASEPRI, r4
   13e74:	f3bf 8f6f 	isb	sy
}
   13e78:	bd10      	pop	{r4, pc}

00013e7a <z_unpend_thread_no_timeout>:
{
   13e7a:	b510      	push	{r4, lr}
	__asm__ volatile(
   13e7c:	f04f 0320 	mov.w	r3, #32
   13e80:	f3ef 8411 	mrs	r4, BASEPRI
   13e84:	f383 8811 	msr	BASEPRI, r3
   13e88:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   13e8c:	f000 f81b 	bl	13ec6 <unpend_thread_no_timeout>
	__asm__ volatile(
   13e90:	f384 8811 	msr	BASEPRI, r4
   13e94:	f3bf 8f6f 	isb	sy
}
   13e98:	bd10      	pop	{r4, pc}

00013e9a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13e9a:	4603      	mov	r3, r0
   13e9c:	b920      	cbnz	r0, 13ea8 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13e9e:	f3ef 8205 	mrs	r2, IPSR
   13ea2:	b90a      	cbnz	r2, 13ea8 <z_reschedule_irqlock+0xe>
   13ea4:	f7f9 be8a 	b.w	dbbc <arch_swap>
   13ea8:	f383 8811 	msr	BASEPRI, r3
   13eac:	f3bf 8f6f 	isb	sy
}
   13eb0:	4770      	bx	lr

00013eb2 <z_reschedule_unlocked>:
	__asm__ volatile(
   13eb2:	f04f 0320 	mov.w	r3, #32
   13eb6:	f3ef 8011 	mrs	r0, BASEPRI
   13eba:	f383 8811 	msr	BASEPRI, r3
   13ebe:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   13ec2:	f7ff bfea 	b.w	13e9a <z_reschedule_irqlock>

00013ec6 <unpend_thread_no_timeout>:
{
   13ec6:	4601      	mov	r1, r0
   13ec8:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   13eca:	6880      	ldr	r0, [r0, #8]
   13ecc:	f7fd f910 	bl	110f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13ed0:	7b4b      	ldrb	r3, [r1, #13]
   13ed2:	f023 0302 	bic.w	r3, r3, #2
   13ed6:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   13ed8:	2300      	movs	r3, #0
   13eda:	608b      	str	r3, [r1, #8]
}
   13edc:	bd08      	pop	{r3, pc}

00013ede <z_priq_dumb_best>:
{
   13ede:	4603      	mov	r3, r0
	return list->head == list;
   13ee0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13ee2:	4283      	cmp	r3, r0
   13ee4:	d003      	beq.n	13eee <z_priq_dumb_best+0x10>
	if (n != NULL) {
   13ee6:	2800      	cmp	r0, #0
   13ee8:	bf38      	it	cc
   13eea:	2000      	movcc	r0, #0
   13eec:	4770      	bx	lr
	struct k_thread *thread = NULL;
   13eee:	2000      	movs	r0, #0
}
   13ef0:	4770      	bx	lr

00013ef2 <z_ready_thread>:
{
   13ef2:	b510      	push	{r4, lr}
   13ef4:	f04f 0320 	mov.w	r3, #32
   13ef8:	f3ef 8411 	mrs	r4, BASEPRI
   13efc:	f383 8811 	msr	BASEPRI, r3
   13f00:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   13f04:	f7fd f94a 	bl	1119c <ready_thread>
	__asm__ volatile(
   13f08:	f384 8811 	msr	BASEPRI, r4
   13f0c:	f3bf 8f6f 	isb	sy
}
   13f10:	bd10      	pop	{r4, pc}

00013f12 <z_thread_timeout>:
{
   13f12:	b570      	push	{r4, r5, r6, lr}
   13f14:	4604      	mov	r4, r0
	__asm__ volatile(
   13f16:	f04f 0320 	mov.w	r3, #32
   13f1a:	f3ef 8611 	mrs	r6, BASEPRI
   13f1e:	f383 8811 	msr	BASEPRI, r3
   13f22:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   13f26:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   13f2a:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   13f2e:	b113      	cbz	r3, 13f36 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   13f30:	4628      	mov	r0, r5
   13f32:	f7ff ffc8 	bl	13ec6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   13f36:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   13f3a:	4628      	mov	r0, r5
   13f3c:	f023 0314 	bic.w	r3, r3, #20
   13f40:	f804 3c0b 	strb.w	r3, [r4, #-11]
   13f44:	f7fd f92a 	bl	1119c <ready_thread>
	__asm__ volatile(
   13f48:	f386 8811 	msr	BASEPRI, r6
   13f4c:	f3bf 8f6f 	isb	sy
}
   13f50:	bd70      	pop	{r4, r5, r6, pc}

00013f52 <add_to_waitq_locked>:
{
   13f52:	b538      	push	{r3, r4, r5, lr}
   13f54:	4604      	mov	r4, r0
   13f56:	460d      	mov	r5, r1
	unready_thread(thread);
   13f58:	f7fd fa7e 	bl	11458 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   13f5c:	7b63      	ldrb	r3, [r4, #13]
   13f5e:	f043 0302 	orr.w	r3, r3, #2
   13f62:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   13f64:	b1c5      	cbz	r5, 13f98 <add_to_waitq_locked+0x46>
	return list->head == list;
   13f66:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   13f68:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13f6a:	429d      	cmp	r5, r3
   13f6c:	bf08      	it	eq
   13f6e:	2300      	moveq	r3, #0
   13f70:	2b00      	cmp	r3, #0
   13f72:	bf38      	it	cc
   13f74:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13f76:	b183      	cbz	r3, 13f9a <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   13f78:	f994 100e 	ldrsb.w	r1, [r4, #14]
   13f7c:	f993 200e 	ldrsb.w	r2, [r3, #14]
   13f80:	4291      	cmp	r1, r2
   13f82:	db04      	blt.n	13f8e <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   13f84:	686a      	ldr	r2, [r5, #4]
   13f86:	429a      	cmp	r2, r3
   13f88:	d007      	beq.n	13f9a <add_to_waitq_locked+0x48>
   13f8a:	681b      	ldr	r3, [r3, #0]
   13f8c:	e7f3      	b.n	13f76 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   13f8e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   13f90:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   13f94:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   13f96:	605c      	str	r4, [r3, #4]
}
   13f98:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   13f9a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   13f9c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   13f9e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   13fa0:	686b      	ldr	r3, [r5, #4]
   13fa2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   13fa4:	606c      	str	r4, [r5, #4]
   13fa6:	e7f7      	b.n	13f98 <add_to_waitq_locked+0x46>

00013fa8 <z_unpend_first_thread>:
{
   13fa8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   13faa:	f04f 0320 	mov.w	r3, #32
   13fae:	f3ef 8211 	mrs	r2, BASEPRI
   13fb2:	f383 8811 	msr	BASEPRI, r3
   13fb6:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   13fba:	f7ff ff90 	bl	13ede <z_priq_dumb_best>
   13fbe:	4604      	mov	r4, r0
	__asm__ volatile(
   13fc0:	f382 8811 	msr	BASEPRI, r2
   13fc4:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   13fc8:	b188      	cbz	r0, 13fee <z_unpend_first_thread+0x46>
	__asm__ volatile(
   13fca:	f04f 0320 	mov.w	r3, #32
   13fce:	f3ef 8511 	mrs	r5, BASEPRI
   13fd2:	f383 8811 	msr	BASEPRI, r3
   13fd6:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   13fda:	f7ff ff74 	bl	13ec6 <unpend_thread_no_timeout>
	__asm__ volatile(
   13fde:	f385 8811 	msr	BASEPRI, r5
   13fe2:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   13fe6:	f104 0018 	add.w	r0, r4, #24
   13fea:	f000 f80f 	bl	1400c <z_abort_timeout>
}
   13fee:	4620      	mov	r0, r4
   13ff0:	bd38      	pop	{r3, r4, r5, pc}

00013ff2 <k_is_in_isr>:
   13ff2:	f3ef 8005 	mrs	r0, IPSR
}
   13ff6:	3800      	subs	r0, #0
   13ff8:	bf18      	it	ne
   13ffa:	2001      	movne	r0, #1
   13ffc:	4770      	bx	lr

00013ffe <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   13ffe:	f7f8 bddb 	b.w	cbb8 <arch_busy_wait>

00014002 <z_impl_k_thread_name_set>:
}
   14002:	f06f 0046 	mvn.w	r0, #70	; 0x46
   14006:	4770      	bx	lr

00014008 <k_thread_name_get>:
}
   14008:	2000      	movs	r0, #0
   1400a:	4770      	bx	lr

0001400c <z_abort_timeout>:
{
   1400c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1400e:	f04f 0220 	mov.w	r2, #32
   14012:	f3ef 8411 	mrs	r4, BASEPRI
   14016:	f382 8811 	msr	BASEPRI, r2
   1401a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1401e:	6803      	ldr	r3, [r0, #0]
   14020:	b13b      	cbz	r3, 14032 <z_abort_timeout+0x26>
			remove_timeout(to);
   14022:	f7fd fc6d 	bl	11900 <remove_timeout>
			ret = 0;
   14026:	2000      	movs	r0, #0
	__asm__ volatile(
   14028:	f384 8811 	msr	BASEPRI, r4
   1402c:	f3bf 8f6f 	isb	sy
}
   14030:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   14032:	f06f 0015 	mvn.w	r0, #21
   14036:	e7f7      	b.n	14028 <z_abort_timeout+0x1c>

00014038 <z_get_next_timeout_expiry>:
{
   14038:	b510      	push	{r4, lr}
	__asm__ volatile(
   1403a:	f04f 0320 	mov.w	r3, #32
   1403e:	f3ef 8411 	mrs	r4, BASEPRI
   14042:	f383 8811 	msr	BASEPRI, r3
   14046:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1404a:	f7fd fc73 	bl	11934 <next_timeout>
	__asm__ volatile(
   1404e:	f384 8811 	msr	BASEPRI, r4
   14052:	f3bf 8f6f 	isb	sy
}
   14056:	bd10      	pop	{r4, pc}

00014058 <z_set_timeout_expiry>:
{
   14058:	b570      	push	{r4, r5, r6, lr}
   1405a:	4604      	mov	r4, r0
   1405c:	460d      	mov	r5, r1
	__asm__ volatile(
   1405e:	f04f 0320 	mov.w	r3, #32
   14062:	f3ef 8611 	mrs	r6, BASEPRI
   14066:	f383 8811 	msr	BASEPRI, r3
   1406a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1406e:	f7fd fc61 	bl	11934 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   14072:	2801      	cmp	r0, #1
   14074:	dd05      	ble.n	14082 <z_set_timeout_expiry+0x2a>
   14076:	42a0      	cmp	r0, r4
   14078:	dd03      	ble.n	14082 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   1407a:	4629      	mov	r1, r5
   1407c:	4620      	mov	r0, r4
   1407e:	f7f9 fd03 	bl	da88 <z_clock_set_timeout>
	__asm__ volatile(
   14082:	f386 8811 	msr	BASEPRI, r6
   14086:	f3bf 8f6f 	isb	sy
}
   1408a:	bd70      	pop	{r4, r5, r6, pc}

0001408c <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1408c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1408e:	f7fd fd6b 	bl	11b68 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   14092:	bd08      	pop	{r3, pc}

00014094 <k_timer_init>:
	timer->status = 0U;
   14094:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   14096:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   1409a:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1409e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   140a2:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   140a6:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   140a8:	6343      	str	r3, [r0, #52]	; 0x34
}
   140aa:	4770      	bx	lr

000140ac <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   140ac:	b510      	push	{r4, lr}
   140ae:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   140b0:	f7ff ffac 	bl	1400c <z_abort_timeout>

	if (inactive) {
   140b4:	b9d8      	cbnz	r0, 140ee <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   140b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   140b8:	b10b      	cbz	r3, 140be <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   140ba:	4620      	mov	r0, r4
   140bc:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   140be:	f104 0018 	add.w	r0, r4, #24
   140c2:	2100      	movs	r1, #0
   140c4:	f7ff fec9 	bl	13e5a <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   140c8:	4604      	mov	r4, r0
   140ca:	b180      	cbz	r0, 140ee <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   140cc:	f7ff fed5 	bl	13e7a <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   140d0:	4620      	mov	r0, r4
   140d2:	f7ff ff0e 	bl	13ef2 <z_ready_thread>
	__asm__ volatile(
   140d6:	f04f 0320 	mov.w	r3, #32
   140da:	f3ef 8011 	mrs	r0, BASEPRI
   140de:	f383 8811 	msr	BASEPRI, r3
   140e2:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   140e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   140ea:	f7ff bed6 	b.w	13e9a <z_reschedule_irqlock>
   140ee:	bd10      	pop	{r4, pc}

000140f0 <k_heap_init>:
{
   140f0:	b410      	push	{r4}
   140f2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   140f6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   140fa:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   140fc:	f7fd bf6e 	b.w	11fdc <sys_heap_init>

00014100 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   14100:	4770      	bx	lr
