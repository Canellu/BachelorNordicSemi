
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	20025330 	.word	0x20025330
    c004:	0000fd85 	.word	0x0000fd85
    c008:	0001e523 	.word	0x0001e523
    c00c:	0000fdb5 	.word	0x0000fdb5
    c010:	0000fdb5 	.word	0x0000fdb5
    c014:	0000fdb5 	.word	0x0000fdb5
    c018:	0000fdb5 	.word	0x0000fdb5
    c01c:	0000fdb5 	.word	0x0000fdb5
	...
    c02c:	0000fa91 	.word	0x0000fa91
    c030:	0000fdb5 	.word	0x0000fdb5
    c034:	00000000 	.word	0x00000000
    c038:	0000f9e1 	.word	0x0000f9e1
    c03c:	0001e4ef 	.word	0x0001e4ef

0000c040 <_irq_vector_table>:
    c040:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c050:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c060:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c070:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c080:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c090:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c0a0:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c0b0:	000112a9 0001f7ff 0000fd45 0000fd45     ........E...E...
    c0c0:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c0d0:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c0e0:	0000fd45 0000fd45 0001f81d 0000fd45     E...E.......E...
    c0f0:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c100:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c110:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c120:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c130:	0000fd45 0000fd45 0000fd45 0000fd45     E...E...E...E...
    c140:	0000fd45                                E...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00016fe4 00000001 0000c000 0000c000     .o..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_dmul>:
    c240:	b570      	push	{r4, r5, r6, lr}
    c242:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c246:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c24a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c24e:	bf1d      	ittte	ne
    c250:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c254:	ea94 0f0c 	teqne	r4, ip
    c258:	ea95 0f0c 	teqne	r5, ip
    c25c:	f000 f8de 	bleq	c41c <__aeabi_dmul+0x1dc>
    c260:	442c      	add	r4, r5
    c262:	ea81 0603 	eor.w	r6, r1, r3
    c266:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c26a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c26e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c272:	bf18      	it	ne
    c274:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c280:	d038      	beq.n	c2f4 <__aeabi_dmul+0xb4>
    c282:	fba0 ce02 	umull	ip, lr, r0, r2
    c286:	f04f 0500 	mov.w	r5, #0
    c28a:	fbe1 e502 	umlal	lr, r5, r1, r2
    c28e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c292:	fbe0 e503 	umlal	lr, r5, r0, r3
    c296:	f04f 0600 	mov.w	r6, #0
    c29a:	fbe1 5603 	umlal	r5, r6, r1, r3
    c29e:	f09c 0f00 	teq	ip, #0
    c2a2:	bf18      	it	ne
    c2a4:	f04e 0e01 	orrne.w	lr, lr, #1
    c2a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c2ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c2b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c2b4:	d204      	bcs.n	c2c0 <__aeabi_dmul+0x80>
    c2b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c2ba:	416d      	adcs	r5, r5
    c2bc:	eb46 0606 	adc.w	r6, r6, r6
    c2c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c2c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c2c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c2cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c2d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c2d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c2d8:	bf88      	it	hi
    c2da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c2de:	d81e      	bhi.n	c31e <__aeabi_dmul+0xde>
    c2e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c2e4:	bf08      	it	eq
    c2e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c2ea:	f150 0000 	adcs.w	r0, r0, #0
    c2ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c2f2:	bd70      	pop	{r4, r5, r6, pc}
    c2f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c2f8:	ea46 0101 	orr.w	r1, r6, r1
    c2fc:	ea40 0002 	orr.w	r0, r0, r2
    c300:	ea81 0103 	eor.w	r1, r1, r3
    c304:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c308:	bfc2      	ittt	gt
    c30a:	ebd4 050c 	rsbsgt	r5, r4, ip
    c30e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c312:	bd70      	popgt	{r4, r5, r6, pc}
    c314:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c318:	f04f 0e00 	mov.w	lr, #0
    c31c:	3c01      	subs	r4, #1
    c31e:	f300 80ab 	bgt.w	c478 <__aeabi_dmul+0x238>
    c322:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c326:	bfde      	ittt	le
    c328:	2000      	movle	r0, #0
    c32a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c32e:	bd70      	pople	{r4, r5, r6, pc}
    c330:	f1c4 0400 	rsb	r4, r4, #0
    c334:	3c20      	subs	r4, #32
    c336:	da35      	bge.n	c3a4 <__aeabi_dmul+0x164>
    c338:	340c      	adds	r4, #12
    c33a:	dc1b      	bgt.n	c374 <__aeabi_dmul+0x134>
    c33c:	f104 0414 	add.w	r4, r4, #20
    c340:	f1c4 0520 	rsb	r5, r4, #32
    c344:	fa00 f305 	lsl.w	r3, r0, r5
    c348:	fa20 f004 	lsr.w	r0, r0, r4
    c34c:	fa01 f205 	lsl.w	r2, r1, r5
    c350:	ea40 0002 	orr.w	r0, r0, r2
    c354:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c358:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c35c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c360:	fa21 f604 	lsr.w	r6, r1, r4
    c364:	eb42 0106 	adc.w	r1, r2, r6
    c368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c36c:	bf08      	it	eq
    c36e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c372:	bd70      	pop	{r4, r5, r6, pc}
    c374:	f1c4 040c 	rsb	r4, r4, #12
    c378:	f1c4 0520 	rsb	r5, r4, #32
    c37c:	fa00 f304 	lsl.w	r3, r0, r4
    c380:	fa20 f005 	lsr.w	r0, r0, r5
    c384:	fa01 f204 	lsl.w	r2, r1, r4
    c388:	ea40 0002 	orr.w	r0, r0, r2
    c38c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c390:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c394:	f141 0100 	adc.w	r1, r1, #0
    c398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c39c:	bf08      	it	eq
    c39e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c3a2:	bd70      	pop	{r4, r5, r6, pc}
    c3a4:	f1c4 0520 	rsb	r5, r4, #32
    c3a8:	fa00 f205 	lsl.w	r2, r0, r5
    c3ac:	ea4e 0e02 	orr.w	lr, lr, r2
    c3b0:	fa20 f304 	lsr.w	r3, r0, r4
    c3b4:	fa01 f205 	lsl.w	r2, r1, r5
    c3b8:	ea43 0302 	orr.w	r3, r3, r2
    c3bc:	fa21 f004 	lsr.w	r0, r1, r4
    c3c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c3c4:	fa21 f204 	lsr.w	r2, r1, r4
    c3c8:	ea20 0002 	bic.w	r0, r0, r2
    c3cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c3d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c3d4:	bf08      	it	eq
    c3d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c3da:	bd70      	pop	{r4, r5, r6, pc}
    c3dc:	f094 0f00 	teq	r4, #0
    c3e0:	d10f      	bne.n	c402 <__aeabi_dmul+0x1c2>
    c3e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c3e6:	0040      	lsls	r0, r0, #1
    c3e8:	eb41 0101 	adc.w	r1, r1, r1
    c3ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c3f0:	bf08      	it	eq
    c3f2:	3c01      	subeq	r4, #1
    c3f4:	d0f7      	beq.n	c3e6 <__aeabi_dmul+0x1a6>
    c3f6:	ea41 0106 	orr.w	r1, r1, r6
    c3fa:	f095 0f00 	teq	r5, #0
    c3fe:	bf18      	it	ne
    c400:	4770      	bxne	lr
    c402:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c406:	0052      	lsls	r2, r2, #1
    c408:	eb43 0303 	adc.w	r3, r3, r3
    c40c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c410:	bf08      	it	eq
    c412:	3d01      	subeq	r5, #1
    c414:	d0f7      	beq.n	c406 <__aeabi_dmul+0x1c6>
    c416:	ea43 0306 	orr.w	r3, r3, r6
    c41a:	4770      	bx	lr
    c41c:	ea94 0f0c 	teq	r4, ip
    c420:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c424:	bf18      	it	ne
    c426:	ea95 0f0c 	teqne	r5, ip
    c42a:	d00c      	beq.n	c446 <__aeabi_dmul+0x206>
    c42c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c430:	bf18      	it	ne
    c432:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c436:	d1d1      	bne.n	c3dc <__aeabi_dmul+0x19c>
    c438:	ea81 0103 	eor.w	r1, r1, r3
    c43c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c440:	f04f 0000 	mov.w	r0, #0
    c444:	bd70      	pop	{r4, r5, r6, pc}
    c446:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c44a:	bf06      	itte	eq
    c44c:	4610      	moveq	r0, r2
    c44e:	4619      	moveq	r1, r3
    c450:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c454:	d019      	beq.n	c48a <__aeabi_dmul+0x24a>
    c456:	ea94 0f0c 	teq	r4, ip
    c45a:	d102      	bne.n	c462 <__aeabi_dmul+0x222>
    c45c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c460:	d113      	bne.n	c48a <__aeabi_dmul+0x24a>
    c462:	ea95 0f0c 	teq	r5, ip
    c466:	d105      	bne.n	c474 <__aeabi_dmul+0x234>
    c468:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c46c:	bf1c      	itt	ne
    c46e:	4610      	movne	r0, r2
    c470:	4619      	movne	r1, r3
    c472:	d10a      	bne.n	c48a <__aeabi_dmul+0x24a>
    c474:	ea81 0103 	eor.w	r1, r1, r3
    c478:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c47c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c484:	f04f 0000 	mov.w	r0, #0
    c488:	bd70      	pop	{r4, r5, r6, pc}
    c48a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c48e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c492:	bd70      	pop	{r4, r5, r6, pc}

0000c494 <__aeabi_drsub>:
    c494:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c498:	e002      	b.n	c4a0 <__adddf3>
    c49a:	bf00      	nop

0000c49c <__aeabi_dsub>:
    c49c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c4a0 <__adddf3>:
    c4a0:	b530      	push	{r4, r5, lr}
    c4a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c4a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c4aa:	ea94 0f05 	teq	r4, r5
    c4ae:	bf08      	it	eq
    c4b0:	ea90 0f02 	teqeq	r0, r2
    c4b4:	bf1f      	itttt	ne
    c4b6:	ea54 0c00 	orrsne.w	ip, r4, r0
    c4ba:	ea55 0c02 	orrsne.w	ip, r5, r2
    c4be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c4c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c4c6:	f000 80e2 	beq.w	c68e <__adddf3+0x1ee>
    c4ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c4ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c4d2:	bfb8      	it	lt
    c4d4:	426d      	neglt	r5, r5
    c4d6:	dd0c      	ble.n	c4f2 <__adddf3+0x52>
    c4d8:	442c      	add	r4, r5
    c4da:	ea80 0202 	eor.w	r2, r0, r2
    c4de:	ea81 0303 	eor.w	r3, r1, r3
    c4e2:	ea82 0000 	eor.w	r0, r2, r0
    c4e6:	ea83 0101 	eor.w	r1, r3, r1
    c4ea:	ea80 0202 	eor.w	r2, r0, r2
    c4ee:	ea81 0303 	eor.w	r3, r1, r3
    c4f2:	2d36      	cmp	r5, #54	; 0x36
    c4f4:	bf88      	it	hi
    c4f6:	bd30      	pophi	{r4, r5, pc}
    c4f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c4fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c500:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c504:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c508:	d002      	beq.n	c510 <__adddf3+0x70>
    c50a:	4240      	negs	r0, r0
    c50c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c510:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c514:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c518:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c51c:	d002      	beq.n	c524 <__adddf3+0x84>
    c51e:	4252      	negs	r2, r2
    c520:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c524:	ea94 0f05 	teq	r4, r5
    c528:	f000 80a7 	beq.w	c67a <__adddf3+0x1da>
    c52c:	f1a4 0401 	sub.w	r4, r4, #1
    c530:	f1d5 0e20 	rsbs	lr, r5, #32
    c534:	db0d      	blt.n	c552 <__adddf3+0xb2>
    c536:	fa02 fc0e 	lsl.w	ip, r2, lr
    c53a:	fa22 f205 	lsr.w	r2, r2, r5
    c53e:	1880      	adds	r0, r0, r2
    c540:	f141 0100 	adc.w	r1, r1, #0
    c544:	fa03 f20e 	lsl.w	r2, r3, lr
    c548:	1880      	adds	r0, r0, r2
    c54a:	fa43 f305 	asr.w	r3, r3, r5
    c54e:	4159      	adcs	r1, r3
    c550:	e00e      	b.n	c570 <__adddf3+0xd0>
    c552:	f1a5 0520 	sub.w	r5, r5, #32
    c556:	f10e 0e20 	add.w	lr, lr, #32
    c55a:	2a01      	cmp	r2, #1
    c55c:	fa03 fc0e 	lsl.w	ip, r3, lr
    c560:	bf28      	it	cs
    c562:	f04c 0c02 	orrcs.w	ip, ip, #2
    c566:	fa43 f305 	asr.w	r3, r3, r5
    c56a:	18c0      	adds	r0, r0, r3
    c56c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c574:	d507      	bpl.n	c586 <__adddf3+0xe6>
    c576:	f04f 0e00 	mov.w	lr, #0
    c57a:	f1dc 0c00 	rsbs	ip, ip, #0
    c57e:	eb7e 0000 	sbcs.w	r0, lr, r0
    c582:	eb6e 0101 	sbc.w	r1, lr, r1
    c586:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c58a:	d31b      	bcc.n	c5c4 <__adddf3+0x124>
    c58c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c590:	d30c      	bcc.n	c5ac <__adddf3+0x10c>
    c592:	0849      	lsrs	r1, r1, #1
    c594:	ea5f 0030 	movs.w	r0, r0, rrx
    c598:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c59c:	f104 0401 	add.w	r4, r4, #1
    c5a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c5a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c5a8:	f080 809a 	bcs.w	c6e0 <__adddf3+0x240>
    c5ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c5b0:	bf08      	it	eq
    c5b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c5b6:	f150 0000 	adcs.w	r0, r0, #0
    c5ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c5be:	ea41 0105 	orr.w	r1, r1, r5
    c5c2:	bd30      	pop	{r4, r5, pc}
    c5c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c5c8:	4140      	adcs	r0, r0
    c5ca:	eb41 0101 	adc.w	r1, r1, r1
    c5ce:	3c01      	subs	r4, #1
    c5d0:	bf28      	it	cs
    c5d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c5d6:	d2e9      	bcs.n	c5ac <__adddf3+0x10c>
    c5d8:	f091 0f00 	teq	r1, #0
    c5dc:	bf04      	itt	eq
    c5de:	4601      	moveq	r1, r0
    c5e0:	2000      	moveq	r0, #0
    c5e2:	fab1 f381 	clz	r3, r1
    c5e6:	bf08      	it	eq
    c5e8:	3320      	addeq	r3, #32
    c5ea:	f1a3 030b 	sub.w	r3, r3, #11
    c5ee:	f1b3 0220 	subs.w	r2, r3, #32
    c5f2:	da0c      	bge.n	c60e <__adddf3+0x16e>
    c5f4:	320c      	adds	r2, #12
    c5f6:	dd08      	ble.n	c60a <__adddf3+0x16a>
    c5f8:	f102 0c14 	add.w	ip, r2, #20
    c5fc:	f1c2 020c 	rsb	r2, r2, #12
    c600:	fa01 f00c 	lsl.w	r0, r1, ip
    c604:	fa21 f102 	lsr.w	r1, r1, r2
    c608:	e00c      	b.n	c624 <__adddf3+0x184>
    c60a:	f102 0214 	add.w	r2, r2, #20
    c60e:	bfd8      	it	le
    c610:	f1c2 0c20 	rsble	ip, r2, #32
    c614:	fa01 f102 	lsl.w	r1, r1, r2
    c618:	fa20 fc0c 	lsr.w	ip, r0, ip
    c61c:	bfdc      	itt	le
    c61e:	ea41 010c 	orrle.w	r1, r1, ip
    c622:	4090      	lslle	r0, r2
    c624:	1ae4      	subs	r4, r4, r3
    c626:	bfa2      	ittt	ge
    c628:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c62c:	4329      	orrge	r1, r5
    c62e:	bd30      	popge	{r4, r5, pc}
    c630:	ea6f 0404 	mvn.w	r4, r4
    c634:	3c1f      	subs	r4, #31
    c636:	da1c      	bge.n	c672 <__adddf3+0x1d2>
    c638:	340c      	adds	r4, #12
    c63a:	dc0e      	bgt.n	c65a <__adddf3+0x1ba>
    c63c:	f104 0414 	add.w	r4, r4, #20
    c640:	f1c4 0220 	rsb	r2, r4, #32
    c644:	fa20 f004 	lsr.w	r0, r0, r4
    c648:	fa01 f302 	lsl.w	r3, r1, r2
    c64c:	ea40 0003 	orr.w	r0, r0, r3
    c650:	fa21 f304 	lsr.w	r3, r1, r4
    c654:	ea45 0103 	orr.w	r1, r5, r3
    c658:	bd30      	pop	{r4, r5, pc}
    c65a:	f1c4 040c 	rsb	r4, r4, #12
    c65e:	f1c4 0220 	rsb	r2, r4, #32
    c662:	fa20 f002 	lsr.w	r0, r0, r2
    c666:	fa01 f304 	lsl.w	r3, r1, r4
    c66a:	ea40 0003 	orr.w	r0, r0, r3
    c66e:	4629      	mov	r1, r5
    c670:	bd30      	pop	{r4, r5, pc}
    c672:	fa21 f004 	lsr.w	r0, r1, r4
    c676:	4629      	mov	r1, r5
    c678:	bd30      	pop	{r4, r5, pc}
    c67a:	f094 0f00 	teq	r4, #0
    c67e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c682:	bf06      	itte	eq
    c684:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c688:	3401      	addeq	r4, #1
    c68a:	3d01      	subne	r5, #1
    c68c:	e74e      	b.n	c52c <__adddf3+0x8c>
    c68e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c692:	bf18      	it	ne
    c694:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c698:	d029      	beq.n	c6ee <__adddf3+0x24e>
    c69a:	ea94 0f05 	teq	r4, r5
    c69e:	bf08      	it	eq
    c6a0:	ea90 0f02 	teqeq	r0, r2
    c6a4:	d005      	beq.n	c6b2 <__adddf3+0x212>
    c6a6:	ea54 0c00 	orrs.w	ip, r4, r0
    c6aa:	bf04      	itt	eq
    c6ac:	4619      	moveq	r1, r3
    c6ae:	4610      	moveq	r0, r2
    c6b0:	bd30      	pop	{r4, r5, pc}
    c6b2:	ea91 0f03 	teq	r1, r3
    c6b6:	bf1e      	ittt	ne
    c6b8:	2100      	movne	r1, #0
    c6ba:	2000      	movne	r0, #0
    c6bc:	bd30      	popne	{r4, r5, pc}
    c6be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c6c2:	d105      	bne.n	c6d0 <__adddf3+0x230>
    c6c4:	0040      	lsls	r0, r0, #1
    c6c6:	4149      	adcs	r1, r1
    c6c8:	bf28      	it	cs
    c6ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c6ce:	bd30      	pop	{r4, r5, pc}
    c6d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c6d4:	bf3c      	itt	cc
    c6d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c6da:	bd30      	popcc	{r4, r5, pc}
    c6dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c6e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c6e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c6e8:	f04f 0000 	mov.w	r0, #0
    c6ec:	bd30      	pop	{r4, r5, pc}
    c6ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c6f2:	bf1a      	itte	ne
    c6f4:	4619      	movne	r1, r3
    c6f6:	4610      	movne	r0, r2
    c6f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c6fc:	bf1c      	itt	ne
    c6fe:	460b      	movne	r3, r1
    c700:	4602      	movne	r2, r0
    c702:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c706:	bf06      	itte	eq
    c708:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c70c:	ea91 0f03 	teqeq	r1, r3
    c710:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c714:	bd30      	pop	{r4, r5, pc}
    c716:	bf00      	nop

0000c718 <__aeabi_ui2d>:
    c718:	f090 0f00 	teq	r0, #0
    c71c:	bf04      	itt	eq
    c71e:	2100      	moveq	r1, #0
    c720:	4770      	bxeq	lr
    c722:	b530      	push	{r4, r5, lr}
    c724:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c728:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c72c:	f04f 0500 	mov.w	r5, #0
    c730:	f04f 0100 	mov.w	r1, #0
    c734:	e750      	b.n	c5d8 <__adddf3+0x138>
    c736:	bf00      	nop

0000c738 <__aeabi_i2d>:
    c738:	f090 0f00 	teq	r0, #0
    c73c:	bf04      	itt	eq
    c73e:	2100      	moveq	r1, #0
    c740:	4770      	bxeq	lr
    c742:	b530      	push	{r4, r5, lr}
    c744:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c748:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c74c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c750:	bf48      	it	mi
    c752:	4240      	negmi	r0, r0
    c754:	f04f 0100 	mov.w	r1, #0
    c758:	e73e      	b.n	c5d8 <__adddf3+0x138>
    c75a:	bf00      	nop

0000c75c <__aeabi_f2d>:
    c75c:	0042      	lsls	r2, r0, #1
    c75e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c762:	ea4f 0131 	mov.w	r1, r1, rrx
    c766:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c76a:	bf1f      	itttt	ne
    c76c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c770:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c774:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c778:	4770      	bxne	lr
    c77a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c77e:	bf08      	it	eq
    c780:	4770      	bxeq	lr
    c782:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c786:	bf04      	itt	eq
    c788:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c78c:	4770      	bxeq	lr
    c78e:	b530      	push	{r4, r5, lr}
    c790:	f44f 7460 	mov.w	r4, #896	; 0x380
    c794:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c798:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c79c:	e71c      	b.n	c5d8 <__adddf3+0x138>
    c79e:	bf00      	nop

0000c7a0 <__aeabi_ul2d>:
    c7a0:	ea50 0201 	orrs.w	r2, r0, r1
    c7a4:	bf08      	it	eq
    c7a6:	4770      	bxeq	lr
    c7a8:	b530      	push	{r4, r5, lr}
    c7aa:	f04f 0500 	mov.w	r5, #0
    c7ae:	e00a      	b.n	c7c6 <__aeabi_l2d+0x16>

0000c7b0 <__aeabi_l2d>:
    c7b0:	ea50 0201 	orrs.w	r2, r0, r1
    c7b4:	bf08      	it	eq
    c7b6:	4770      	bxeq	lr
    c7b8:	b530      	push	{r4, r5, lr}
    c7ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c7be:	d502      	bpl.n	c7c6 <__aeabi_l2d+0x16>
    c7c0:	4240      	negs	r0, r0
    c7c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c7c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c7ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c7ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c7d2:	f43f aed8 	beq.w	c586 <__adddf3+0xe6>
    c7d6:	f04f 0203 	mov.w	r2, #3
    c7da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c7de:	bf18      	it	ne
    c7e0:	3203      	addne	r2, #3
    c7e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c7e6:	bf18      	it	ne
    c7e8:	3203      	addne	r2, #3
    c7ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c7ee:	f1c2 0320 	rsb	r3, r2, #32
    c7f2:	fa00 fc03 	lsl.w	ip, r0, r3
    c7f6:	fa20 f002 	lsr.w	r0, r0, r2
    c7fa:	fa01 fe03 	lsl.w	lr, r1, r3
    c7fe:	ea40 000e 	orr.w	r0, r0, lr
    c802:	fa21 f102 	lsr.w	r1, r1, r2
    c806:	4414      	add	r4, r2
    c808:	e6bd      	b.n	c586 <__adddf3+0xe6>
    c80a:	bf00      	nop

0000c80c <__aeabi_d2f>:
    c80c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c810:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c814:	bf24      	itt	cs
    c816:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c81a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c81e:	d90d      	bls.n	c83c <__aeabi_d2f+0x30>
    c820:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c824:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c828:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c82c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c830:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c834:	bf08      	it	eq
    c836:	f020 0001 	biceq.w	r0, r0, #1
    c83a:	4770      	bx	lr
    c83c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c840:	d121      	bne.n	c886 <__aeabi_d2f+0x7a>
    c842:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c846:	bfbc      	itt	lt
    c848:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c84c:	4770      	bxlt	lr
    c84e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c852:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c856:	f1c2 0218 	rsb	r2, r2, #24
    c85a:	f1c2 0c20 	rsb	ip, r2, #32
    c85e:	fa10 f30c 	lsls.w	r3, r0, ip
    c862:	fa20 f002 	lsr.w	r0, r0, r2
    c866:	bf18      	it	ne
    c868:	f040 0001 	orrne.w	r0, r0, #1
    c86c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c870:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c874:	fa03 fc0c 	lsl.w	ip, r3, ip
    c878:	ea40 000c 	orr.w	r0, r0, ip
    c87c:	fa23 f302 	lsr.w	r3, r3, r2
    c880:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c884:	e7cc      	b.n	c820 <__aeabi_d2f+0x14>
    c886:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c88a:	d107      	bne.n	c89c <__aeabi_d2f+0x90>
    c88c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c890:	bf1e      	ittt	ne
    c892:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c896:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c89a:	4770      	bxne	lr
    c89c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c8a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c8a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c8a8:	4770      	bx	lr
    c8aa:	bf00      	nop

0000c8ac <__aeabi_uldivmod>:
    c8ac:	b953      	cbnz	r3, c8c4 <__aeabi_uldivmod+0x18>
    c8ae:	b94a      	cbnz	r2, c8c4 <__aeabi_uldivmod+0x18>
    c8b0:	2900      	cmp	r1, #0
    c8b2:	bf08      	it	eq
    c8b4:	2800      	cmpeq	r0, #0
    c8b6:	bf1c      	itt	ne
    c8b8:	f04f 31ff 	movne.w	r1, #4294967295
    c8bc:	f04f 30ff 	movne.w	r0, #4294967295
    c8c0:	f000 b96c 	b.w	cb9c <__aeabi_idiv0>
    c8c4:	f1ad 0c08 	sub.w	ip, sp, #8
    c8c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c8cc:	f000 f806 	bl	c8dc <__udivmoddi4>
    c8d0:	f8dd e004 	ldr.w	lr, [sp, #4]
    c8d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c8d8:	b004      	add	sp, #16
    c8da:	4770      	bx	lr

0000c8dc <__udivmoddi4>:
    c8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c8e0:	9d08      	ldr	r5, [sp, #32]
    c8e2:	4604      	mov	r4, r0
    c8e4:	4688      	mov	r8, r1
    c8e6:	2b00      	cmp	r3, #0
    c8e8:	d17d      	bne.n	c9e6 <__udivmoddi4+0x10a>
    c8ea:	428a      	cmp	r2, r1
    c8ec:	4617      	mov	r7, r2
    c8ee:	d93f      	bls.n	c970 <__udivmoddi4+0x94>
    c8f0:	fab2 f282 	clz	r2, r2
    c8f4:	b142      	cbz	r2, c908 <__udivmoddi4+0x2c>
    c8f6:	f1c2 0020 	rsb	r0, r2, #32
    c8fa:	4091      	lsls	r1, r2
    c8fc:	4097      	lsls	r7, r2
    c8fe:	fa24 f000 	lsr.w	r0, r4, r0
    c902:	4094      	lsls	r4, r2
    c904:	ea40 0801 	orr.w	r8, r0, r1
    c908:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c90c:	0c23      	lsrs	r3, r4, #16
    c90e:	fa1f fe87 	uxth.w	lr, r7
    c912:	fbb8 f6fc 	udiv	r6, r8, ip
    c916:	fb0c 8116 	mls	r1, ip, r6, r8
    c91a:	fb06 f00e 	mul.w	r0, r6, lr
    c91e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c922:	4298      	cmp	r0, r3
    c924:	d905      	bls.n	c932 <__udivmoddi4+0x56>
    c926:	18fb      	adds	r3, r7, r3
    c928:	d202      	bcs.n	c930 <__udivmoddi4+0x54>
    c92a:	4298      	cmp	r0, r3
    c92c:	f200 8124 	bhi.w	cb78 <__udivmoddi4+0x29c>
    c930:	3e01      	subs	r6, #1
    c932:	1a19      	subs	r1, r3, r0
    c934:	b2a3      	uxth	r3, r4
    c936:	fbb1 f0fc 	udiv	r0, r1, ip
    c93a:	fb0c 1110 	mls	r1, ip, r0, r1
    c93e:	fb00 fe0e 	mul.w	lr, r0, lr
    c942:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c946:	45a6      	cmp	lr, r4
    c948:	d905      	bls.n	c956 <__udivmoddi4+0x7a>
    c94a:	193c      	adds	r4, r7, r4
    c94c:	d202      	bcs.n	c954 <__udivmoddi4+0x78>
    c94e:	45a6      	cmp	lr, r4
    c950:	f200 810f 	bhi.w	cb72 <__udivmoddi4+0x296>
    c954:	3801      	subs	r0, #1
    c956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    c95a:	eba4 040e 	sub.w	r4, r4, lr
    c95e:	2600      	movs	r6, #0
    c960:	b11d      	cbz	r5, c96a <__udivmoddi4+0x8e>
    c962:	40d4      	lsrs	r4, r2
    c964:	2300      	movs	r3, #0
    c966:	e9c5 4300 	strd	r4, r3, [r5]
    c96a:	4631      	mov	r1, r6
    c96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c970:	b902      	cbnz	r2, c974 <__udivmoddi4+0x98>
    c972:	deff      	udf	#255	; 0xff
    c974:	fab2 f282 	clz	r2, r2
    c978:	2a00      	cmp	r2, #0
    c97a:	d150      	bne.n	ca1e <__udivmoddi4+0x142>
    c97c:	1bcb      	subs	r3, r1, r7
    c97e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c982:	fa1f f887 	uxth.w	r8, r7
    c986:	2601      	movs	r6, #1
    c988:	0c21      	lsrs	r1, r4, #16
    c98a:	fbb3 fcfe 	udiv	ip, r3, lr
    c98e:	fb0e 301c 	mls	r0, lr, ip, r3
    c992:	460b      	mov	r3, r1
    c994:	fb08 f90c 	mul.w	r9, r8, ip
    c998:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c99c:	4589      	cmp	r9, r1
    c99e:	d90a      	bls.n	c9b6 <__udivmoddi4+0xda>
    c9a0:	1879      	adds	r1, r7, r1
    c9a2:	bf2c      	ite	cs
    c9a4:	2301      	movcs	r3, #1
    c9a6:	2300      	movcc	r3, #0
    c9a8:	4589      	cmp	r9, r1
    c9aa:	d902      	bls.n	c9b2 <__udivmoddi4+0xd6>
    c9ac:	2b00      	cmp	r3, #0
    c9ae:	f000 80d9 	beq.w	cb64 <__udivmoddi4+0x288>
    c9b2:	f10c 3cff 	add.w	ip, ip, #4294967295
    c9b6:	eba1 0109 	sub.w	r1, r1, r9
    c9ba:	b2a3      	uxth	r3, r4
    c9bc:	fbb1 f0fe 	udiv	r0, r1, lr
    c9c0:	fb0e 1110 	mls	r1, lr, r0, r1
    c9c4:	fb08 f800 	mul.w	r8, r8, r0
    c9c8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c9cc:	45a0      	cmp	r8, r4
    c9ce:	d905      	bls.n	c9dc <__udivmoddi4+0x100>
    c9d0:	193c      	adds	r4, r7, r4
    c9d2:	d202      	bcs.n	c9da <__udivmoddi4+0xfe>
    c9d4:	45a0      	cmp	r8, r4
    c9d6:	f200 80c9 	bhi.w	cb6c <__udivmoddi4+0x290>
    c9da:	3801      	subs	r0, #1
    c9dc:	eba4 0408 	sub.w	r4, r4, r8
    c9e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c9e4:	e7bc      	b.n	c960 <__udivmoddi4+0x84>
    c9e6:	428b      	cmp	r3, r1
    c9e8:	d909      	bls.n	c9fe <__udivmoddi4+0x122>
    c9ea:	2d00      	cmp	r5, #0
    c9ec:	f000 80b1 	beq.w	cb52 <__udivmoddi4+0x276>
    c9f0:	2600      	movs	r6, #0
    c9f2:	e9c5 0100 	strd	r0, r1, [r5]
    c9f6:	4630      	mov	r0, r6
    c9f8:	4631      	mov	r1, r6
    c9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c9fe:	fab3 f683 	clz	r6, r3
    ca02:	2e00      	cmp	r6, #0
    ca04:	d146      	bne.n	ca94 <__udivmoddi4+0x1b8>
    ca06:	428b      	cmp	r3, r1
    ca08:	f0c0 80a6 	bcc.w	cb58 <__udivmoddi4+0x27c>
    ca0c:	4282      	cmp	r2, r0
    ca0e:	f240 80a3 	bls.w	cb58 <__udivmoddi4+0x27c>
    ca12:	4630      	mov	r0, r6
    ca14:	2d00      	cmp	r5, #0
    ca16:	d0a8      	beq.n	c96a <__udivmoddi4+0x8e>
    ca18:	e9c5 4800 	strd	r4, r8, [r5]
    ca1c:	e7a5      	b.n	c96a <__udivmoddi4+0x8e>
    ca1e:	4097      	lsls	r7, r2
    ca20:	f1c2 0320 	rsb	r3, r2, #32
    ca24:	fa01 f002 	lsl.w	r0, r1, r2
    ca28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    ca2c:	40d9      	lsrs	r1, r3
    ca2e:	fa24 f303 	lsr.w	r3, r4, r3
    ca32:	fa1f f887 	uxth.w	r8, r7
    ca36:	4094      	lsls	r4, r2
    ca38:	4303      	orrs	r3, r0
    ca3a:	fbb1 f0fe 	udiv	r0, r1, lr
    ca3e:	0c1e      	lsrs	r6, r3, #16
    ca40:	fb0e 1110 	mls	r1, lr, r0, r1
    ca44:	fb00 fc08 	mul.w	ip, r0, r8
    ca48:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    ca4c:	458c      	cmp	ip, r1
    ca4e:	d909      	bls.n	ca64 <__udivmoddi4+0x188>
    ca50:	1879      	adds	r1, r7, r1
    ca52:	bf2c      	ite	cs
    ca54:	2601      	movcs	r6, #1
    ca56:	2600      	movcc	r6, #0
    ca58:	458c      	cmp	ip, r1
    ca5a:	d902      	bls.n	ca62 <__udivmoddi4+0x186>
    ca5c:	2e00      	cmp	r6, #0
    ca5e:	f000 8093 	beq.w	cb88 <__udivmoddi4+0x2ac>
    ca62:	3801      	subs	r0, #1
    ca64:	eba1 010c 	sub.w	r1, r1, ip
    ca68:	b29b      	uxth	r3, r3
    ca6a:	fbb1 f6fe 	udiv	r6, r1, lr
    ca6e:	fb0e 1116 	mls	r1, lr, r6, r1
    ca72:	fb06 fc08 	mul.w	ip, r6, r8
    ca76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    ca7a:	458c      	cmp	ip, r1
    ca7c:	d905      	bls.n	ca8a <__udivmoddi4+0x1ae>
    ca7e:	1879      	adds	r1, r7, r1
    ca80:	d202      	bcs.n	ca88 <__udivmoddi4+0x1ac>
    ca82:	458c      	cmp	ip, r1
    ca84:	f200 8087 	bhi.w	cb96 <__udivmoddi4+0x2ba>
    ca88:	3e01      	subs	r6, #1
    ca8a:	eba1 030c 	sub.w	r3, r1, ip
    ca8e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    ca92:	e779      	b.n	c988 <__udivmoddi4+0xac>
    ca94:	f1c6 0720 	rsb	r7, r6, #32
    ca98:	fa03 f406 	lsl.w	r4, r3, r6
    ca9c:	fa02 fc06 	lsl.w	ip, r2, r6
    caa0:	fa01 fe06 	lsl.w	lr, r1, r6
    caa4:	40fa      	lsrs	r2, r7
    caa6:	fa20 f807 	lsr.w	r8, r0, r7
    caaa:	40f9      	lsrs	r1, r7
    caac:	fa00 f306 	lsl.w	r3, r0, r6
    cab0:	4322      	orrs	r2, r4
    cab2:	ea48 040e 	orr.w	r4, r8, lr
    cab6:	ea4f 4812 	mov.w	r8, r2, lsr #16
    caba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    cabe:	fa1f f982 	uxth.w	r9, r2
    cac2:	fbb1 faf8 	udiv	sl, r1, r8
    cac6:	fb08 111a 	mls	r1, r8, sl, r1
    caca:	fb0a f009 	mul.w	r0, sl, r9
    cace:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    cad2:	4570      	cmp	r0, lr
    cad4:	d90a      	bls.n	caec <__udivmoddi4+0x210>
    cad6:	eb12 0e0e 	adds.w	lr, r2, lr
    cada:	bf2c      	ite	cs
    cadc:	2101      	movcs	r1, #1
    cade:	2100      	movcc	r1, #0
    cae0:	4570      	cmp	r0, lr
    cae2:	d901      	bls.n	cae8 <__udivmoddi4+0x20c>
    cae4:	2900      	cmp	r1, #0
    cae6:	d052      	beq.n	cb8e <__udivmoddi4+0x2b2>
    cae8:	f10a 3aff 	add.w	sl, sl, #4294967295
    caec:	ebae 0e00 	sub.w	lr, lr, r0
    caf0:	b2a4      	uxth	r4, r4
    caf2:	fbbe f0f8 	udiv	r0, lr, r8
    caf6:	fb08 ee10 	mls	lr, r8, r0, lr
    cafa:	fb00 f909 	mul.w	r9, r0, r9
    cafe:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    cb02:	45f1      	cmp	r9, lr
    cb04:	d905      	bls.n	cb12 <__udivmoddi4+0x236>
    cb06:	eb12 0e0e 	adds.w	lr, r2, lr
    cb0a:	d201      	bcs.n	cb10 <__udivmoddi4+0x234>
    cb0c:	45f1      	cmp	r9, lr
    cb0e:	d838      	bhi.n	cb82 <__udivmoddi4+0x2a6>
    cb10:	3801      	subs	r0, #1
    cb12:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    cb16:	ebae 0e09 	sub.w	lr, lr, r9
    cb1a:	fba0 890c 	umull	r8, r9, r0, ip
    cb1e:	45ce      	cmp	lr, r9
    cb20:	4641      	mov	r1, r8
    cb22:	464c      	mov	r4, r9
    cb24:	d302      	bcc.n	cb2c <__udivmoddi4+0x250>
    cb26:	d106      	bne.n	cb36 <__udivmoddi4+0x25a>
    cb28:	4543      	cmp	r3, r8
    cb2a:	d204      	bcs.n	cb36 <__udivmoddi4+0x25a>
    cb2c:	3801      	subs	r0, #1
    cb2e:	ebb8 010c 	subs.w	r1, r8, ip
    cb32:	eb69 0402 	sbc.w	r4, r9, r2
    cb36:	b315      	cbz	r5, cb7e <__udivmoddi4+0x2a2>
    cb38:	1a5a      	subs	r2, r3, r1
    cb3a:	eb6e 0e04 	sbc.w	lr, lr, r4
    cb3e:	40f2      	lsrs	r2, r6
    cb40:	fa0e f707 	lsl.w	r7, lr, r7
    cb44:	fa2e f306 	lsr.w	r3, lr, r6
    cb48:	2600      	movs	r6, #0
    cb4a:	4317      	orrs	r7, r2
    cb4c:	e9c5 7300 	strd	r7, r3, [r5]
    cb50:	e70b      	b.n	c96a <__udivmoddi4+0x8e>
    cb52:	462e      	mov	r6, r5
    cb54:	4628      	mov	r0, r5
    cb56:	e708      	b.n	c96a <__udivmoddi4+0x8e>
    cb58:	1a84      	subs	r4, r0, r2
    cb5a:	eb61 0103 	sbc.w	r1, r1, r3
    cb5e:	2001      	movs	r0, #1
    cb60:	4688      	mov	r8, r1
    cb62:	e757      	b.n	ca14 <__udivmoddi4+0x138>
    cb64:	f1ac 0c02 	sub.w	ip, ip, #2
    cb68:	4439      	add	r1, r7
    cb6a:	e724      	b.n	c9b6 <__udivmoddi4+0xda>
    cb6c:	3802      	subs	r0, #2
    cb6e:	443c      	add	r4, r7
    cb70:	e734      	b.n	c9dc <__udivmoddi4+0x100>
    cb72:	3802      	subs	r0, #2
    cb74:	443c      	add	r4, r7
    cb76:	e6ee      	b.n	c956 <__udivmoddi4+0x7a>
    cb78:	3e02      	subs	r6, #2
    cb7a:	443b      	add	r3, r7
    cb7c:	e6d9      	b.n	c932 <__udivmoddi4+0x56>
    cb7e:	462e      	mov	r6, r5
    cb80:	e6f3      	b.n	c96a <__udivmoddi4+0x8e>
    cb82:	3802      	subs	r0, #2
    cb84:	4496      	add	lr, r2
    cb86:	e7c4      	b.n	cb12 <__udivmoddi4+0x236>
    cb88:	3802      	subs	r0, #2
    cb8a:	4439      	add	r1, r7
    cb8c:	e76a      	b.n	ca64 <__udivmoddi4+0x188>
    cb8e:	f1aa 0a02 	sub.w	sl, sl, #2
    cb92:	4496      	add	lr, r2
    cb94:	e7aa      	b.n	caec <__udivmoddi4+0x210>
    cb96:	3e02      	subs	r6, #2
    cb98:	4439      	add	r1, r7
    cb9a:	e776      	b.n	ca8a <__udivmoddi4+0x1ae>

0000cb9c <__aeabi_idiv0>:
    cb9c:	4770      	bx	lr
    cb9e:	bf00      	nop

0000cba0 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
    cba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cba4:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
    cba8:	460e      	mov	r6, r1
{
    cbaa:	b08c      	sub	sp, #48	; 0x30
	if (response == NULL) {
    cbac:	b971      	cbnz	r1, cbcc <at_handler+0x2c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    cbae:	49b3      	ldr	r1, [pc, #716]	; (ce7c <at_handler+0x2dc>)
    cbb0:	4bb3      	ldr	r3, [pc, #716]	; (ce80 <at_handler+0x2e0>)
		LOG_ERR("Response buffer is NULL-pointer");
    cbb2:	48b4      	ldr	r0, [pc, #720]	; (ce84 <at_handler+0x2e4>)
    cbb4:	1ac9      	subs	r1, r1, r3
    cbb6:	08c9      	lsrs	r1, r1, #3
    cbb8:	0189      	lsls	r1, r1, #6
    cbba:	f041 0101 	orr.w	r1, r1, #1
    cbbe:	f011 f88d 	bl	1dcdc <log_0>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
    cbc2:	b00c      	add	sp, #48	; 0x30
    cbc4:	ecbd 8b02 	vpop	{d8}
    cbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    cbcc:	2700      	movs	r7, #0
    cbce:	4cae      	ldr	r4, [pc, #696]	; (ce88 <at_handler+0x2e8>)
		if (strncmp(at_notifs[i], notif,
    cbd0:	f854 5b04 	ldr.w	r5, [r4], #4
    cbd4:	4628      	mov	r0, r5
    cbd6:	f011 fe2c 	bl	1e832 <strlen>
    cbda:	4631      	mov	r1, r6
    cbdc:	4602      	mov	r2, r0
    cbde:	4628      	mov	r0, r5
    cbe0:	f011 fe3a 	bl	1e858 <strncmp>
    cbe4:	4605      	mov	r5, r0
    cbe6:	bb60      	cbnz	r0, cc42 <at_handler+0xa2>
	switch (notif_type) {
    cbe8:	2f01      	cmp	r7, #1
			*type = i;
    cbea:	b2fb      	uxtb	r3, r7
	switch (notif_type) {
    cbec:	f000 8109 	beq.w	ce02 <at_handler+0x262>
    cbf0:	2b02      	cmp	r3, #2
    cbf2:	f000 818f 	beq.w	cf14 <at_handler+0x374>
	size_t len = sizeof(str_buf) - 1;
    cbf6:	f04f 0809 	mov.w	r8, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    cbfa:	210a      	movs	r1, #10
    cbfc:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
    cbfe:	f8cd 8008 	str.w	r8, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
    cc02:	f013 fa0d 	bl	20020 <at_params_list_init>
	if (err) {
    cc06:	4604      	mov	r4, r0
    cc08:	b1f8      	cbz	r0, cc4a <at_handler+0xaa>
    cc0a:	4a9c      	ldr	r2, [pc, #624]	; (ce7c <at_handler+0x2dc>)
    cc0c:	4b9c      	ldr	r3, [pc, #624]	; (ce80 <at_handler+0x2e0>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    cc0e:	4601      	mov	r1, r0
    cc10:	1ad2      	subs	r2, r2, r3
    cc12:	08d2      	lsrs	r2, r2, #3
    cc14:	0192      	lsls	r2, r2, #6
    cc16:	489d      	ldr	r0, [pc, #628]	; (ce8c <at_handler+0x2ec>)
    cc18:	f042 0201 	orr.w	r2, r2, #1
    cc1c:	f011 f86d 	bl	1dcfa <log_1>
    cc20:	4b97      	ldr	r3, [pc, #604]	; (ce80 <at_handler+0x2e0>)
    cc22:	4d96      	ldr	r5, [pc, #600]	; (ce7c <at_handler+0x2dc>)
			LOG_ERR("Failed to parse notification (error %d): %s",
    cc24:	4630      	mov	r0, r6
    cc26:	1aed      	subs	r5, r5, r3
    cc28:	f001 fe96 	bl	e958 <log_strdup>
    cc2c:	08ed      	lsrs	r5, r5, #3
    cc2e:	01ad      	lsls	r5, r5, #6
    cc30:	f045 0501 	orr.w	r5, r5, #1
    cc34:	4602      	mov	r2, r0
    cc36:	462b      	mov	r3, r5
    cc38:	4621      	mov	r1, r4
    cc3a:	4895      	ldr	r0, [pc, #596]	; (ce90 <at_handler+0x2f0>)
    cc3c:	f011 f874 	bl	1dd28 <log_2>
			return;
    cc40:	e7bf      	b.n	cbc2 <at_handler+0x22>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
    cc42:	3701      	adds	r7, #1
    cc44:	2f03      	cmp	r7, #3
    cc46:	d1c3      	bne.n	cbd0 <at_handler+0x30>
    cc48:	e7bb      	b.n	cbc2 <at_handler+0x22>
	err = at_parser_params_from_str(notification,
    cc4a:	4601      	mov	r1, r0
    cc4c:	aa07      	add	r2, sp, #28
    cc4e:	4630      	mov	r0, r6
    cc50:	f013 f9be 	bl	1ffd0 <at_parser_params_from_str>
	if (err) {
    cc54:	4604      	mov	r4, r0
    cc56:	2800      	cmp	r0, #0
    cc58:	d05e      	beq.n	cd18 <at_handler+0x178>
    cc5a:	4a88      	ldr	r2, [pc, #544]	; (ce7c <at_handler+0x2dc>)
    cc5c:	4b88      	ldr	r3, [pc, #544]	; (ce80 <at_handler+0x2e0>)
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
    cc5e:	4601      	mov	r1, r0
    cc60:	1ad2      	subs	r2, r2, r3
    cc62:	08d2      	lsrs	r2, r2, #3
    cc64:	0192      	lsls	r2, r2, #6
    cc66:	488b      	ldr	r0, [pc, #556]	; (ce94 <at_handler+0x2f4>)
    cc68:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get registration status, error: %d", err);
    cc6c:	f011 f845 	bl	1dcfa <log_1>
	at_params_list_free(&resp_list);
    cc70:	a807      	add	r0, sp, #28
    cc72:	f013 fa01 	bl	20078 <at_params_list_free>
		if (err) {
    cc76:	2c00      	cmp	r4, #0
    cc78:	d1d2      	bne.n	cc20 <at_handler+0x80>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    cc7a:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    cc7e:	2b01      	cmp	r3, #1
    cc80:	d102      	bne.n	cc88 <at_handler+0xe8>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    cc82:	4885      	ldr	r0, [pc, #532]	; (ce98 <at_handler+0x2f8>)
    cc84:	f00f fffe 	bl	1cc84 <z_impl_k_sem_give>
		if (!evt_handler) {
    cc88:	4c84      	ldr	r4, [pc, #528]	; (ce9c <at_handler+0x2fc>)
    cc8a:	6823      	ldr	r3, [r4, #0]
    cc8c:	2b00      	cmp	r3, #0
    cc8e:	d098      	beq.n	cbc2 <at_handler+0x22>
		if (reg_status != prev_reg_status) {
    cc90:	4a83      	ldr	r2, [pc, #524]	; (cea0 <at_handler+0x300>)
    cc92:	7811      	ldrb	r1, [r2, #0]
    cc94:	42a9      	cmp	r1, r5
    cc96:	d007      	beq.n	cca8 <at_handler+0x108>
			prev_reg_status = reg_status;
    cc98:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    cc9a:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
    cc9c:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
    cca0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
    cca4:	a809      	add	r0, sp, #36	; 0x24
    cca6:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
    cca8:	2208      	movs	r2, #8
    ccaa:	497e      	ldr	r1, [pc, #504]	; (cea4 <at_handler+0x304>)
    ccac:	a803      	add	r0, sp, #12
    ccae:	f011 fde2 	bl	1e876 <memcmp>
    ccb2:	b178      	cbz	r0, ccd4 <at_handler+0x134>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    ccb4:	2304      	movs	r3, #4
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    ccb6:	2208      	movs	r2, #8
    ccb8:	a903      	add	r1, sp, #12
    ccba:	487a      	ldr	r0, [pc, #488]	; (cea4 <at_handler+0x304>)
			evt.type = LTE_LC_EVT_CELL_UPDATE;
    ccbc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
    ccc0:	f011 fde9 	bl	1e896 <memcpy>
			memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
    ccc4:	2208      	movs	r2, #8
    ccc6:	a903      	add	r1, sp, #12
    ccc8:	a80a      	add	r0, sp, #40	; 0x28
    ccca:	f011 fde4 	bl	1e896 <memcpy>
			evt_handler(&evt);
    ccce:	6823      	ldr	r3, [r4, #0]
    ccd0:	a809      	add	r0, sp, #36	; 0x24
    ccd2:	4798      	blx	r3
		if (memcmp(&psm_cfg, &prev_psm_cfg,
    ccd4:	2208      	movs	r2, #8
    ccd6:	4974      	ldr	r1, [pc, #464]	; (cea8 <at_handler+0x308>)
    ccd8:	a805      	add	r0, sp, #20
    ccda:	f011 fdcc 	bl	1e876 <memcmp>
    ccde:	b178      	cbz	r0, cd00 <at_handler+0x160>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    cce0:	2301      	movs	r3, #1
			memcpy(&prev_psm_cfg, &psm_cfg,
    cce2:	2208      	movs	r2, #8
    cce4:	a905      	add	r1, sp, #20
    cce6:	4870      	ldr	r0, [pc, #448]	; (cea8 <at_handler+0x308>)
			evt.type = LTE_LC_EVT_PSM_UPDATE;
    cce8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_psm_cfg, &psm_cfg,
    ccec:	f011 fdd3 	bl	1e896 <memcpy>
			memcpy(&evt.psm_cfg, &psm_cfg,
    ccf0:	2208      	movs	r2, #8
    ccf2:	a905      	add	r1, sp, #20
    ccf4:	a80a      	add	r0, sp, #40	; 0x28
    ccf6:	f011 fdce 	bl	1e896 <memcpy>
			evt_handler(&evt);
    ccfa:	6823      	ldr	r3, [r4, #0]
    ccfc:	a809      	add	r0, sp, #36	; 0x24
    ccfe:	4798      	blx	r3
	bool notify = false;
    cd00:	2300      	movs	r3, #0
	if (evt_handler && notify) {
    cd02:	4a66      	ldr	r2, [pc, #408]	; (ce9c <at_handler+0x2fc>)
    cd04:	6812      	ldr	r2, [r2, #0]
    cd06:	2a00      	cmp	r2, #0
    cd08:	f43f af5b 	beq.w	cbc2 <at_handler+0x22>
    cd0c:	2b00      	cmp	r3, #0
    cd0e:	f43f af58 	beq.w	cbc2 <at_handler+0x22>
		evt_handler(&evt);
    cd12:	a809      	add	r0, sp, #36	; 0x24
    cd14:	4790      	blx	r2
    cd16:	e754      	b.n	cbc2 <at_handler+0x22>
	err = at_params_int_get(&resp_list,
    cd18:	2101      	movs	r1, #1
    cd1a:	aa01      	add	r2, sp, #4
    cd1c:	a807      	add	r0, sp, #28
    cd1e:	f013 fa37 	bl	20190 <at_params_int_get>
	if (err) {
    cd22:	4604      	mov	r4, r0
    cd24:	b148      	cbz	r0, cd3a <at_handler+0x19a>
    cd26:	4a55      	ldr	r2, [pc, #340]	; (ce7c <at_handler+0x2dc>)
    cd28:	4b55      	ldr	r3, [pc, #340]	; (ce80 <at_handler+0x2e0>)
		LOG_ERR("Could not get registration status, error: %d", err);
    cd2a:	4601      	mov	r1, r0
    cd2c:	1ad2      	subs	r2, r2, r3
    cd2e:	08d2      	lsrs	r2, r2, #3
    cd30:	0192      	lsls	r2, r2, #6
    cd32:	485e      	ldr	r0, [pc, #376]	; (ceac <at_handler+0x30c>)
    cd34:	f042 0201 	orr.w	r2, r2, #1
    cd38:	e798      	b.n	cc6c <at_handler+0xcc>
	*reg_status = status;
    cd3a:	f89d 5004 	ldrb.w	r5, [sp, #4]
	if (*reg_status != LTE_LC_NW_REG_UICC_FAIL) {
    cd3e:	2d5a      	cmp	r5, #90	; 0x5a
    cd40:	d047      	beq.n	cdd2 <at_handler+0x232>
		err = at_params_string_get(&resp_list,
    cd42:	2102      	movs	r1, #2
    cd44:	ab02      	add	r3, sp, #8
    cd46:	aa09      	add	r2, sp, #36	; 0x24
    cd48:	a807      	add	r0, sp, #28
    cd4a:	f013 fa34 	bl	201b6 <at_params_string_get>
		if (err) {
    cd4e:	4607      	mov	r7, r0
    cd50:	b160      	cbz	r0, cd6c <at_handler+0x1cc>
    cd52:	4a4a      	ldr	r2, [pc, #296]	; (ce7c <at_handler+0x2dc>)
    cd54:	4b4a      	ldr	r3, [pc, #296]	; (ce80 <at_handler+0x2e0>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
    cd56:	4601      	mov	r1, r0
    cd58:	1ad2      	subs	r2, r2, r3
    cd5a:	08d2      	lsrs	r2, r2, #3
    cd5c:	0192      	lsls	r2, r2, #6
    cd5e:	4854      	ldr	r0, [pc, #336]	; (ceb0 <at_handler+0x310>)
    cd60:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not get cell ID, error: %d", err);
    cd64:	f010 ffc9 	bl	1dcfa <log_1>
			goto clean_exit;
    cd68:	463c      	mov	r4, r7
    cd6a:	e781      	b.n	cc70 <at_handler+0xd0>
		str_buf[len] = '\0';
    cd6c:	9b02      	ldr	r3, [sp, #8]
    cd6e:	aa0c      	add	r2, sp, #48	; 0x30
    cd70:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
    cd72:	4621      	mov	r1, r4
    cd74:	2210      	movs	r2, #16
    cd76:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    cd78:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
    cd7c:	f011 fc9f 	bl	1e6be <strtoul>
		err = at_params_string_get(&resp_list,
    cd80:	2103      	movs	r1, #3
		cell->tac = strtoul(str_buf, NULL, 16);
    cd82:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
    cd84:	ab02      	add	r3, sp, #8
    cd86:	aa09      	add	r2, sp, #36	; 0x24
    cd88:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
    cd8a:	f8cd 8008 	str.w	r8, [sp, #8]
		err = at_params_string_get(&resp_list,
    cd8e:	f013 fa12 	bl	201b6 <at_params_string_get>
		if (err) {
    cd92:	4607      	mov	r7, r0
    cd94:	b148      	cbz	r0, cdaa <at_handler+0x20a>
    cd96:	4a39      	ldr	r2, [pc, #228]	; (ce7c <at_handler+0x2dc>)
    cd98:	4b39      	ldr	r3, [pc, #228]	; (ce80 <at_handler+0x2e0>)
			LOG_ERR("Could not get cell ID, error: %d", err);
    cd9a:	4601      	mov	r1, r0
    cd9c:	1ad2      	subs	r2, r2, r3
    cd9e:	08d2      	lsrs	r2, r2, #3
    cda0:	0192      	lsls	r2, r2, #6
    cda2:	4844      	ldr	r0, [pc, #272]	; (ceb4 <at_handler+0x314>)
    cda4:	f042 0201 	orr.w	r2, r2, #1
    cda8:	e7dc      	b.n	cd64 <at_handler+0x1c4>
		str_buf[len] = '\0';
    cdaa:	9b02      	ldr	r3, [sp, #8]
    cdac:	aa0c      	add	r2, sp, #48	; 0x30
    cdae:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
    cdb0:	4621      	mov	r1, r4
    cdb2:	2210      	movs	r2, #16
    cdb4:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
    cdb6:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
    cdba:	f011 fc80 	bl	1e6be <strtoul>
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    cdbe:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
    cdc2:	2b01      	cmp	r3, #1
		cell->id = strtoul(str_buf, NULL, 16);
    cdc4:	9003      	str	r0, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    cdc6:	d009      	beq.n	cddc <at_handler+0x23c>
		psm_cfg->tau = -1;
    cdc8:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
    cdcc:	e9cd 3305 	strd	r3, r3, [sp, #20]
    cdd0:	e74e      	b.n	cc70 <at_handler+0xd0>
		cell->tac = UINT32_MAX;
    cdd2:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
    cdd6:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
    cdda:	e7f5      	b.n	cdc8 <at_handler+0x228>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
    cddc:	2101      	movs	r1, #1
    cdde:	aa05      	add	r2, sp, #20
    cde0:	a807      	add	r0, sp, #28
    cde2:	f006 f80f 	bl	12e04 <parse_psm_cfg>
		if (err) {
    cde6:	4604      	mov	r4, r0
    cde8:	2800      	cmp	r0, #0
    cdea:	f43f af41 	beq.w	cc70 <at_handler+0xd0>
    cdee:	4a23      	ldr	r2, [pc, #140]	; (ce7c <at_handler+0x2dc>)
    cdf0:	4b23      	ldr	r3, [pc, #140]	; (ce80 <at_handler+0x2e0>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
    cdf2:	4601      	mov	r1, r0
    cdf4:	1ad2      	subs	r2, r2, r3
    cdf6:	08d2      	lsrs	r2, r2, #3
    cdf8:	0192      	lsls	r2, r2, #6
    cdfa:	482f      	ldr	r0, [pc, #188]	; (ceb8 <at_handler+0x318>)
    cdfc:	f042 0201 	orr.w	r2, r2, #1
    ce00:	e734      	b.n	cc6c <at_handler+0xcc>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
    ce02:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
    ce06:	2104      	movs	r1, #4
    ce08:	a807      	add	r0, sp, #28
    ce0a:	f013 f909 	bl	20020 <at_params_list_init>
	if (err) {
    ce0e:	4604      	mov	r4, r0
    ce10:	b1b0      	cbz	r0, ce40 <at_handler+0x2a0>
    ce12:	4a1a      	ldr	r2, [pc, #104]	; (ce7c <at_handler+0x2dc>)
    ce14:	4b1a      	ldr	r3, [pc, #104]	; (ce80 <at_handler+0x2e0>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    ce16:	4601      	mov	r1, r0
    ce18:	1ad2      	subs	r2, r2, r3
    ce1a:	08d2      	lsrs	r2, r2, #3
    ce1c:	0192      	lsls	r2, r2, #6
    ce1e:	481b      	ldr	r0, [pc, #108]	; (ce8c <at_handler+0x2ec>)
    ce20:	f042 0201 	orr.w	r2, r2, #1
    ce24:	f010 ff69 	bl	1dcfa <log_1>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
    ce28:	4621      	mov	r1, r4
    ce2a:	4a14      	ldr	r2, [pc, #80]	; (ce7c <at_handler+0x2dc>)
    ce2c:	4b14      	ldr	r3, [pc, #80]	; (ce80 <at_handler+0x2e0>)
    ce2e:	4823      	ldr	r0, [pc, #140]	; (cebc <at_handler+0x31c>)
    ce30:	1ad2      	subs	r2, r2, r3
    ce32:	08d2      	lsrs	r2, r2, #3
    ce34:	0192      	lsls	r2, r2, #6
    ce36:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Can't parse eDRX, error: %d", err);
    ce3a:	f010 ff5e 	bl	1dcfa <log_1>
			return;
    ce3e:	e6c0      	b.n	cbc2 <at_handler+0x22>
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    ce40:	4601      	mov	r1, r0
    ce42:	aa07      	add	r2, sp, #28
    ce44:	4630      	mov	r0, r6
    ce46:	f013 f8c3 	bl	1ffd0 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    ce4a:	4604      	mov	r4, r0
    ce4c:	2800      	cmp	r0, #0
    ce4e:	d039      	beq.n	cec4 <at_handler+0x324>
    ce50:	4a0a      	ldr	r2, [pc, #40]	; (ce7c <at_handler+0x2dc>)
    ce52:	4b0b      	ldr	r3, [pc, #44]	; (ce80 <at_handler+0x2e0>)
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
    ce54:	4601      	mov	r1, r0
    ce56:	1ad2      	subs	r2, r2, r3
    ce58:	08d2      	lsrs	r2, r2, #3
    ce5a:	0192      	lsls	r2, r2, #6
    ce5c:	4818      	ldr	r0, [pc, #96]	; (cec0 <at_handler+0x320>)
    ce5e:	f042 0201 	orr.w	r2, r2, #1
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
    ce62:	f010 ff4a 	bl	1dcfa <log_1>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
    ce66:	a807      	add	r0, sp, #28
    ce68:	f013 f906 	bl	20078 <at_params_list_free>
		if (err) {
    ce6c:	2c00      	cmp	r4, #0
    ce6e:	d1db      	bne.n	ce28 <at_handler+0x288>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
    ce70:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    ce72:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
    ce76:	2301      	movs	r3, #1
		break;
    ce78:	e743      	b.n	cd02 <at_handler+0x162>
    ce7a:	bf00      	nop
    ce7c:	00020e50 	.word	0x00020e50
    ce80:	00020e10 	.word	0x00020e10
    ce84:	0002248b 	.word	0x0002248b
    ce88:	000210c0 	.word	0x000210c0
    ce8c:	000224ab 	.word	0x000224ab
    ce90:	000225a8 	.word	0x000225a8
    ce94:	000224d4 	.word	0x000224d4
    ce98:	20020a24 	.word	0x20020a24
    ce9c:	20020a20 	.word	0x20020a20
    cea0:	200236b3 	.word	0x200236b3
    cea4:	20020a3c 	.word	0x20020a3c
    cea8:	20020a44 	.word	0x20020a44
    ceac:	00022501 	.word	0x00022501
    ceb0:	0002252e 	.word	0x0002252e
    ceb4:	0002255a 	.word	0x0002255a
    ceb8:	0002257b 	.word	0x0002257b
    cebc:	00022644 	.word	0x00022644
    cec0:	000225d4 	.word	0x000225d4
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
    cec4:	4639      	mov	r1, r7
    cec6:	aa05      	add	r2, sp, #20
    cec8:	a807      	add	r0, sp, #28
    ceca:	f013 f961 	bl	20190 <at_params_int_get>
	if (err) {
    cece:	4604      	mov	r4, r0
    ced0:	b148      	cbz	r0, cee6 <at_handler+0x346>
    ced2:	4a83      	ldr	r2, [pc, #524]	; (d0e0 <at_handler+0x540>)
    ced4:	4b83      	ldr	r3, [pc, #524]	; (d0e4 <at_handler+0x544>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
    ced6:	4601      	mov	r1, r0
    ced8:	1ad2      	subs	r2, r2, r3
    ceda:	08d2      	lsrs	r2, r2, #3
    cedc:	0192      	lsls	r2, r2, #6
    cede:	4882      	ldr	r0, [pc, #520]	; (d0e8 <at_handler+0x548>)
    cee0:	f042 0201 	orr.w	r2, r2, #1
    cee4:	e7bd      	b.n	ce62 <at_handler+0x2c2>
	if (temp_mode == 0) {
    cee6:	9905      	ldr	r1, [sp, #20]
    cee8:	b911      	cbnz	r1, cef0 <at_handler+0x350>
		*mode = LTE_LC_RRC_MODE_IDLE;
    ceea:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    ceee:	e7ba      	b.n	ce66 <at_handler+0x2c6>
	} else if (temp_mode == 1) {
    cef0:	2901      	cmp	r1, #1
    cef2:	d102      	bne.n	cefa <at_handler+0x35a>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
    cef4:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
    cef8:	e7b5      	b.n	ce66 <at_handler+0x2c6>
    cefa:	4b7a      	ldr	r3, [pc, #488]	; (d0e4 <at_handler+0x544>)
    cefc:	4a78      	ldr	r2, [pc, #480]	; (d0e0 <at_handler+0x540>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
    cefe:	487b      	ldr	r0, [pc, #492]	; (d0ec <at_handler+0x54c>)
    cf00:	1ad2      	subs	r2, r2, r3
    cf02:	08d2      	lsrs	r2, r2, #3
    cf04:	0192      	lsls	r2, r2, #6
    cf06:	f042 0201 	orr.w	r2, r2, #1
    cf0a:	f010 fef6 	bl	1dcfa <log_1>
		err = -EINVAL;
    cf0e:	f06f 0415 	mvn.w	r4, #21
    cf12:	e7a8      	b.n	ce66 <at_handler+0x2c6>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
    cf14:	2304      	movs	r3, #4
	switch (sys_mode_current) {
    cf16:	4d76      	ldr	r5, [pc, #472]	; (d0f0 <at_handler+0x550>)
	size_t len = sizeof(tmp_buf) - 1;
    cf18:	9303      	str	r3, [sp, #12]
    cf1a:	782b      	ldrb	r3, [r5, #0]
	struct at_param_list resp_list = {0};
    cf1c:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
    cf20:	3b01      	subs	r3, #1
    cf22:	2b04      	cmp	r3, #4
    cf24:	d804      	bhi.n	cf30 <at_handler+0x390>
    cf26:	e8df f003 	tbb	[pc, r3]
    cf2a:	2d19      	.short	0x2d19
    cf2c:	1903      	.short	0x1903
    cf2e:	2d          	.byte	0x2d
    cf2f:	00          	.byte	0x00
    cf30:	4b6c      	ldr	r3, [pc, #432]	; (d0e4 <at_handler+0x544>)
    cf32:	496b      	ldr	r1, [pc, #428]	; (d0e0 <at_handler+0x540>)
		LOG_ERR("No LTE connection available in this system mode");
    cf34:	486f      	ldr	r0, [pc, #444]	; (d0f4 <at_handler+0x554>)
    cf36:	1ac9      	subs	r1, r1, r3
    cf38:	08c9      	lsrs	r1, r1, #3
    cf3a:	0189      	lsls	r1, r1, #6
    cf3c:	f041 0101 	orr.w	r1, r1, #1
    cf40:	f010 fecc 	bl	1dcdc <log_0>
		return -ENOTCONN;
    cf44:	f06f 0438 	mvn.w	r4, #56	; 0x38
    cf48:	4a65      	ldr	r2, [pc, #404]	; (d0e0 <at_handler+0x540>)
    cf4a:	4b66      	ldr	r3, [pc, #408]	; (d0e4 <at_handler+0x544>)
			LOG_ERR("Can't parse eDRX, error: %d", err);
    cf4c:	4621      	mov	r1, r4
    cf4e:	1ad2      	subs	r2, r2, r3
    cf50:	08d2      	lsrs	r2, r2, #3
    cf52:	0192      	lsls	r2, r2, #6
    cf54:	4868      	ldr	r0, [pc, #416]	; (d0f8 <at_handler+0x558>)
    cf56:	f042 0201 	orr.w	r2, r2, #1
    cf5a:	e76e      	b.n	ce3a <at_handler+0x29a>
	switch (sys_mode_current) {
    cf5c:	ed9f 8a67 	vldr	s16, [pc, #412]	; d0fc <at_handler+0x55c>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
    cf60:	2105      	movs	r1, #5
    cf62:	a807      	add	r0, sp, #28
    cf64:	f013 f85c 	bl	20020 <at_params_list_init>
	if (err) {
    cf68:	4604      	mov	r4, r0
    cf6a:	b170      	cbz	r0, cf8a <at_handler+0x3ea>
    cf6c:	4b5d      	ldr	r3, [pc, #372]	; (d0e4 <at_handler+0x544>)
    cf6e:	4a5c      	ldr	r2, [pc, #368]	; (d0e0 <at_handler+0x540>)
		LOG_ERR("Could not init AT params list, error: %d", err);
    cf70:	4601      	mov	r1, r0
    cf72:	1ad2      	subs	r2, r2, r3
    cf74:	08d2      	lsrs	r2, r2, #3
    cf76:	0192      	lsls	r2, r2, #6
    cf78:	4861      	ldr	r0, [pc, #388]	; (d100 <at_handler+0x560>)
    cf7a:	f042 0201 	orr.w	r2, r2, #1
    cf7e:	f010 febc 	bl	1dcfa <log_1>
		return err;
    cf82:	e7e1      	b.n	cf48 <at_handler+0x3a8>
		*ptw_multiplier = 2.56;
    cf84:	ed9f 8a5f 	vldr	s16, [pc, #380]	; d104 <at_handler+0x564>
    cf88:	e7ea      	b.n	cf60 <at_handler+0x3c0>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
    cf8a:	4601      	mov	r1, r0
    cf8c:	aa07      	add	r2, sp, #28
    cf8e:	4630      	mov	r0, r6
    cf90:	f013 f81e 	bl	1ffd0 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
    cf94:	4604      	mov	r4, r0
    cf96:	b188      	cbz	r0, cfbc <at_handler+0x41c>
    cf98:	4a51      	ldr	r2, [pc, #324]	; (d0e0 <at_handler+0x540>)
    cf9a:	4b52      	ldr	r3, [pc, #328]	; (d0e4 <at_handler+0x544>)
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
    cf9c:	4601      	mov	r1, r0
    cf9e:	1ad2      	subs	r2, r2, r3
    cfa0:	08d2      	lsrs	r2, r2, #3
    cfa2:	0192      	lsls	r2, r2, #6
    cfa4:	4858      	ldr	r0, [pc, #352]	; (d108 <at_handler+0x568>)
    cfa6:	f042 0201 	orr.w	r2, r2, #1
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    cfaa:	f010 fea6 	bl	1dcfa <log_1>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
    cfae:	a807      	add	r0, sp, #28
    cfb0:	f013 f862 	bl	20078 <at_params_list_free>
		if (err) {
    cfb4:	2c00      	cmp	r4, #0
    cfb6:	d1c7      	bne.n	cf48 <at_handler+0x3a8>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
    cfb8:	2302      	movs	r3, #2
    cfba:	e75a      	b.n	ce72 <at_handler+0x2d2>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
    cfbc:	2103      	movs	r1, #3
    cfbe:	ab03      	add	r3, sp, #12
    cfc0:	aa05      	add	r2, sp, #20
    cfc2:	a807      	add	r0, sp, #28
    cfc4:	f013 f8f7 	bl	201b6 <at_params_string_get>
	if (err) {
    cfc8:	4604      	mov	r4, r0
    cfca:	b148      	cbz	r0, cfe0 <at_handler+0x440>
    cfcc:	4a44      	ldr	r2, [pc, #272]	; (d0e0 <at_handler+0x540>)
    cfce:	4b45      	ldr	r3, [pc, #276]	; (d0e4 <at_handler+0x544>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
    cfd0:	4601      	mov	r1, r0
    cfd2:	1ad2      	subs	r2, r2, r3
    cfd4:	08d2      	lsrs	r2, r2, #3
    cfd6:	0192      	lsls	r2, r2, #6
    cfd8:	484c      	ldr	r0, [pc, #304]	; (d10c <at_handler+0x56c>)
    cfda:	f042 0201 	orr.w	r2, r2, #1
    cfde:	e7e4      	b.n	cfaa <at_handler+0x40a>
	tmp_buf[len] = '\0';
    cfe0:	9b03      	ldr	r3, [sp, #12]
    cfe2:	aa0c      	add	r2, sp, #48	; 0x30
    cfe4:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    cfe6:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    cfe8:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    cfec:	2202      	movs	r2, #2
    cfee:	a805      	add	r0, sp, #20
    cff0:	f011 fb65 	bl	1e6be <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
    cff4:	b2c0      	uxtb	r0, r0
    cff6:	280f      	cmp	r0, #15
    cff8:	d844      	bhi.n	d084 <at_handler+0x4e4>
	switch (sys_mode_current) {
    cffa:	782b      	ldrb	r3, [r5, #0]
    cffc:	3b01      	subs	r3, #1
    cffe:	2b04      	cmp	r3, #4
    d000:	d828      	bhi.n	d054 <at_handler+0x4b4>
    d002:	e8df f003 	tbb	[pc, r3]
    d006:	2503      	.short	0x2503
    d008:	0327      	.short	0x0327
    d00a:	25          	.byte	0x25
    d00b:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
    d00c:	4b40      	ldr	r3, [pc, #256]	; (d110 <at_handler+0x570>)
		multiplier = edrx_lookup_nbiot[idx];
    d00e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d012:	2800      	cmp	r0, #0
    d014:	d034      	beq.n	d080 <at_handler+0x4e0>
    d016:	f7ff fb8f 	bl	c738 <__aeabi_i2d>
    d01a:	a32f      	add	r3, pc, #188	; (adr r3, d0d8 <at_handler+0x538>)
    d01c:	e9d3 2300 	ldrd	r2, r3, [r3]
    d020:	f7ff f90e 	bl	c240 <__aeabi_dmul>
    d024:	f7ff fbf2 	bl	c80c <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
    d028:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d02a:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d02c:	ab03      	add	r3, sp, #12
    d02e:	aa05      	add	r2, sp, #20
    d030:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
    d032:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
    d034:	f013 f8bf 	bl	201b6 <at_params_string_get>
	if (err) {
    d038:	4604      	mov	r4, r0
    d03a:	b330      	cbz	r0, d08a <at_handler+0x4ea>
    d03c:	4a28      	ldr	r2, [pc, #160]	; (d0e0 <at_handler+0x540>)
    d03e:	4b29      	ldr	r3, [pc, #164]	; (d0e4 <at_handler+0x544>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
    d040:	4601      	mov	r1, r0
    d042:	1ad2      	subs	r2, r2, r3
    d044:	08d2      	lsrs	r2, r2, #3
    d046:	0192      	lsls	r2, r2, #6
    d048:	4832      	ldr	r0, [pc, #200]	; (d114 <at_handler+0x574>)
    d04a:	f042 0201 	orr.w	r2, r2, #1
    d04e:	e7ac      	b.n	cfaa <at_handler+0x40a>
		multiplier = edrx_lookup_nbiot[idx];
    d050:	4b31      	ldr	r3, [pc, #196]	; (d118 <at_handler+0x578>)
    d052:	e7dc      	b.n	d00e <at_handler+0x46e>
    d054:	4b23      	ldr	r3, [pc, #140]	; (d0e4 <at_handler+0x544>)
    d056:	4922      	ldr	r1, [pc, #136]	; (d0e0 <at_handler+0x540>)
		LOG_ERR("No LTE connection available in this system mode");
    d058:	4826      	ldr	r0, [pc, #152]	; (d0f4 <at_handler+0x554>)
    d05a:	1ac9      	subs	r1, r1, r3
    d05c:	08c9      	lsrs	r1, r1, #3
    d05e:	0189      	lsls	r1, r1, #6
    d060:	f041 0101 	orr.w	r1, r1, #1
    d064:	f010 fe3a 	bl	1dcdc <log_0>
		return -ENOTCONN;
    d068:	f06f 0438 	mvn.w	r4, #56	; 0x38
    d06c:	4a1c      	ldr	r2, [pc, #112]	; (d0e0 <at_handler+0x540>)
    d06e:	4b1d      	ldr	r3, [pc, #116]	; (d0e4 <at_handler+0x544>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
    d070:	4621      	mov	r1, r4
    d072:	1ad2      	subs	r2, r2, r3
    d074:	08d2      	lsrs	r2, r2, #3
    d076:	0192      	lsls	r2, r2, #6
    d078:	4828      	ldr	r0, [pc, #160]	; (d11c <at_handler+0x57c>)
    d07a:	f042 0201 	orr.w	r2, r2, #1
    d07e:	e794      	b.n	cfaa <at_handler+0x40a>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
    d080:	4827      	ldr	r0, [pc, #156]	; (d120 <at_handler+0x580>)
    d082:	e7d1      	b.n	d028 <at_handler+0x488>
		return -EINVAL;
    d084:	f06f 0415 	mvn.w	r4, #21
    d088:	e7f0      	b.n	d06c <at_handler+0x4cc>
	tmp_buf[len] = '\0';
    d08a:	9b03      	ldr	r3, [sp, #12]
    d08c:	aa0c      	add	r2, sp, #48	; 0x30
    d08e:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
    d090:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
    d092:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
    d096:	2202      	movs	r2, #2
    d098:	a805      	add	r0, sp, #20
    d09a:	f011 fb10 	bl	1e6be <strtoul>
	if (idx > 15) {
    d09e:	b2c1      	uxtb	r1, r0
    d0a0:	290f      	cmp	r1, #15
    d0a2:	d90c      	bls.n	d0be <at_handler+0x51e>
    d0a4:	4b0f      	ldr	r3, [pc, #60]	; (d0e4 <at_handler+0x544>)
    d0a6:	4a0e      	ldr	r2, [pc, #56]	; (d0e0 <at_handler+0x540>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
    d0a8:	481e      	ldr	r0, [pc, #120]	; (d124 <at_handler+0x584>)
    d0aa:	1ad2      	subs	r2, r2, r3
    d0ac:	08d2      	lsrs	r2, r2, #3
    d0ae:	0192      	lsls	r2, r2, #6
    d0b0:	f042 0201 	orr.w	r2, r2, #1
    d0b4:	f010 fe21 	bl	1dcfa <log_1>
		err = -EINVAL;
    d0b8:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
    d0bc:	e777      	b.n	cfae <at_handler+0x40e>
	idx += 1;
    d0be:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
    d0c0:	b2c0      	uxtb	r0, r0
    d0c2:	ee07 0a90 	vmov	s15, r0
    d0c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d0ca:	ee67 7a88 	vmul.f32	s15, s15, s16
    d0ce:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
    d0d2:	e76c      	b.n	cfae <at_handler+0x40e>
    d0d4:	f3af 8000 	nop.w
    d0d8:	47ae147b 	.word	0x47ae147b
    d0dc:	40247ae1 	.word	0x40247ae1
    d0e0:	00020e50 	.word	0x00020e50
    d0e4:	00020e10 	.word	0x00020e10
    d0e8:	000225ff 	.word	0x000225ff
    d0ec:	00022628 	.word	0x00022628
    d0f0:	200236b9 	.word	0x200236b9
    d0f4:	0002266b 	.word	0x0002266b
    d0f8:	0002275f 	.word	0x0002275f
    d0fc:	3fa3d70a 	.word	0x3fa3d70a
    d100:	000224ab 	.word	0x000224ab
    d104:	4023d70a 	.word	0x4023d70a
    d108:	0002269b 	.word	0x0002269b
    d10c:	000226c7 	.word	0x000226c7
    d110:	00021470 	.word	0x00021470
    d114:	00022717 	.word	0x00022717
    d118:	00021490 	.word	0x00021490
    d11c:	000226f3 	.word	0x000226f3
    d120:	40a3d70a 	.word	0x40a3d70a
    d124:	00022742 	.word	0x00022742

0000d128 <data_print>:
#endif /* defined(CONFIG_LWM2M_CARRIER) */

/**@brief Function to print strings without null-termination
 */
static void data_print(uint8_t *prefix, uint8_t *data, size_t len)
{
    d128:	b5b0      	push	{r4, r5, r7, lr}
	char buf[len + 1];
    d12a:	f102 0308 	add.w	r3, r2, #8
{
    d12e:	b082      	sub	sp, #8
	char buf[len + 1];
    d130:	f023 0307 	bic.w	r3, r3, #7
{
    d134:	af00      	add	r7, sp, #0
	char buf[len + 1];
    d136:	ebad 0d03 	sub.w	sp, sp, r3
{
    d13a:	4605      	mov	r5, r0

	memcpy(buf, data, len);
    d13c:	4668      	mov	r0, sp
{
    d13e:	4614      	mov	r4, r2
	memcpy(buf, data, len);
    d140:	f011 fba9 	bl	1e896 <memcpy>
	buf[len] = 0;
    d144:	2300      	movs	r3, #0
    d146:	f80d 3004 	strb.w	r3, [sp, r4]
    d14a:	4b0b      	ldr	r3, [pc, #44]	; (d178 <data_print+0x50>)
    d14c:	4c0b      	ldr	r4, [pc, #44]	; (d17c <data_print+0x54>)
	LOG_INF("%s%s", log_strdup(prefix), log_strdup(buf));
    d14e:	4628      	mov	r0, r5
    d150:	1ae4      	subs	r4, r4, r3
    d152:	f001 fc01 	bl	e958 <log_strdup>
    d156:	6078      	str	r0, [r7, #4]
    d158:	4668      	mov	r0, sp
    d15a:	f001 fbfd 	bl	e958 <log_strdup>
    d15e:	08e4      	lsrs	r4, r4, #3
    d160:	01a4      	lsls	r4, r4, #6
    d162:	f044 0403 	orr.w	r4, r4, #3
    d166:	4602      	mov	r2, r0
    d168:	6879      	ldr	r1, [r7, #4]
    d16a:	4623      	mov	r3, r4
    d16c:	4804      	ldr	r0, [pc, #16]	; (d180 <data_print+0x58>)
    d16e:	f010 fddb 	bl	1dd28 <log_2>
}
    d172:	3708      	adds	r7, #8
    d174:	46bd      	mov	sp, r7
    d176:	bdb0      	pop	{r4, r5, r7, pc}
    d178:	00020e10 	.word	0x00020e10
    d17c:	00020e60 	.word	0x00020e60
    d180:	000214b0 	.word	0x000214b0

0000d184 <data_publish.constprop.0>:
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
	uint8_t *data, size_t len)
{
	struct mqtt_publish_param param;

	param.message.topic.qos = qos;
    d184:	2301      	movs	r3, #1
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
    d186:	b570      	push	{r4, r5, r6, lr}
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    d188:	4d18      	ldr	r5, [pc, #96]	; (d1ec <data_publish.constprop.0+0x68>)
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
    d18a:	b086      	sub	sp, #24
    d18c:	4604      	mov	r4, r0
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    d18e:	4628      	mov	r0, r5
static int data_publish(struct mqtt_client *c, enum mqtt_qos qos,
    d190:	460e      	mov	r6, r1
	param.message.topic.qos = qos;
    d192:	f88d 3008 	strb.w	r3, [sp, #8]
	param.message.topic.topic.utf8 = CONFIG_MQTT_PUB_TOPIC;
    d196:	9500      	str	r5, [sp, #0]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    d198:	f011 fb4b 	bl	1e832 <strlen>
	param.message.payload.data = data;
	param.message.payload.len = len;
    d19c:	e9cd 4603 	strd	r4, r6, [sp, #12]
	param.message.topic.topic.size = strlen(CONFIG_MQTT_PUB_TOPIC);
    d1a0:	9001      	str	r0, [sp, #4]
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    d1a2:	f003 fc6d 	bl	10a80 <z_impl_sys_rand32_get>
	param.message_id = sys_rand32_get();
	param.dup_flag = 0;
    d1a6:	f89d 3016 	ldrb.w	r3, [sp, #22]
	param.retain_flag = 0;

	data_print("Publishing: ", data, len);
    d1aa:	4632      	mov	r2, r6
    d1ac:	4621      	mov	r1, r4
	param.message_id = sys_rand32_get();
    d1ae:	f8ad 0014 	strh.w	r0, [sp, #20]
	param.dup_flag = 0;
    d1b2:	f023 0303 	bic.w	r3, r3, #3
	data_print("Publishing: ", data, len);
    d1b6:	480e      	ldr	r0, [pc, #56]	; (d1f0 <data_publish.constprop.0+0x6c>)
	param.dup_flag = 0;
    d1b8:	f88d 3016 	strb.w	r3, [sp, #22]
    d1bc:	4c0d      	ldr	r4, [pc, #52]	; (d1f4 <data_publish.constprop.0+0x70>)
	data_print("Publishing: ", data, len);
    d1be:	f7ff ffb3 	bl	d128 <data_print>
    d1c2:	4b0d      	ldr	r3, [pc, #52]	; (d1f8 <data_publish.constprop.0+0x74>)
	LOG_INF("to topic: %s len: %u",
    d1c4:	4628      	mov	r0, r5
    d1c6:	1ae4      	subs	r4, r4, r3
    d1c8:	f011 fb33 	bl	1e832 <strlen>
    d1cc:	08e4      	lsrs	r4, r4, #3
    d1ce:	01a4      	lsls	r4, r4, #6
    d1d0:	f044 0403 	orr.w	r4, r4, #3
    d1d4:	4602      	mov	r2, r0
    d1d6:	4623      	mov	r3, r4
    d1d8:	4629      	mov	r1, r5
    d1da:	4808      	ldr	r0, [pc, #32]	; (d1fc <data_publish.constprop.0+0x78>)
    d1dc:	f010 fda4 	bl	1dd28 <log_2>
		CONFIG_MQTT_PUB_TOPIC,
		(unsigned int)strlen(CONFIG_MQTT_PUB_TOPIC));

	return mqtt_publish(c, &param);
    d1e0:	4669      	mov	r1, sp
    d1e2:	4807      	ldr	r0, [pc, #28]	; (d200 <data_publish.constprop.0+0x7c>)
    d1e4:	f012 f81c 	bl	1f220 <mqtt_publish>
}
    d1e8:	b006      	add	sp, #24
    d1ea:	bd70      	pop	{r4, r5, r6, pc}
    d1ec:	000214b5 	.word	0x000214b5
    d1f0:	000214c8 	.word	0x000214c8
    d1f4:	00020e60 	.word	0x00020e60
    d1f8:	00020e10 	.word	0x00020e10
    d1fc:	000214d5 	.word	0x000214d5
    d200:	20020758 	.word	0x20020758

0000d204 <button_handler>:
	// printk("button 1: %d\n", gpio_pin_get(dev, button_1));
	// printk("button 2: %d\n", gpio_pin_get(dev, button_2));

	int ret;

	if(button_states == 1)
    d204:	2801      	cmp	r0, #1
{
    d206:	b508      	push	{r3, lr}
	if(button_states == 1)
    d208:	d111      	bne.n	d22e <button_handler+0x2a>
	{
		ret = data_publish(&client,
    d20a:	2104      	movs	r1, #4
    d20c:	4812      	ldr	r0, [pc, #72]	; (d258 <button_handler+0x54>)
			LOG_ERR("Publish failed: %d", ret);
		}		
	}
	else if(button_states == 2)
	{
		ret = data_publish(&client,
    d20e:	f7ff ffb9 	bl	d184 <data_publish.constprop.0>
				   MQTT_QOS_1_AT_LEAST_ONCE,
				   MSG_5,
				   sizeof(MSG_5)-1);

		if (ret) {
    d212:	4601      	mov	r1, r0
    d214:	b1f8      	cbz	r0, d256 <button_handler+0x52>
    d216:	4b11      	ldr	r3, [pc, #68]	; (d25c <button_handler+0x58>)
    d218:	4a11      	ldr	r2, [pc, #68]	; (d260 <button_handler+0x5c>)
			LOG_ERR("Publish failed: %d", ret);
    d21a:	4812      	ldr	r0, [pc, #72]	; (d264 <button_handler+0x60>)
    d21c:	1ad2      	subs	r2, r2, r3
    d21e:	08d2      	lsrs	r2, r2, #3
    d220:	0192      	lsls	r2, r2, #6
    d222:	f042 0201 	orr.w	r2, r2, #1
		}
	}


}
    d226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			LOG_ERR("Publish failed: %d", ret);
    d22a:	f010 bd66 	b.w	1dcfa <log_1>
	else if(button_states == 5)
    d22e:	2805      	cmp	r0, #5
    d230:	d102      	bne.n	d238 <button_handler+0x34>
		ret = data_publish(&client,
    d232:	2102      	movs	r1, #2
    d234:	480c      	ldr	r0, [pc, #48]	; (d268 <button_handler+0x64>)
    d236:	e7ea      	b.n	d20e <button_handler+0xa>
	else if(button_states == 9)
    d238:	2809      	cmp	r0, #9
    d23a:	d102      	bne.n	d242 <button_handler+0x3e>
		ret = data_publish(&client,
    d23c:	210a      	movs	r1, #10
    d23e:	480b      	ldr	r0, [pc, #44]	; (d26c <button_handler+0x68>)
    d240:	e7e5      	b.n	d20e <button_handler+0xa>
	else if(button_states == 13)
    d242:	280d      	cmp	r0, #13
    d244:	d102      	bne.n	d24c <button_handler+0x48>
		ret = data_publish(&client,
    d246:	210b      	movs	r1, #11
    d248:	4809      	ldr	r0, [pc, #36]	; (d270 <button_handler+0x6c>)
    d24a:	e7e0      	b.n	d20e <button_handler+0xa>
	else if(button_states == 2)
    d24c:	2802      	cmp	r0, #2
    d24e:	d102      	bne.n	d256 <button_handler+0x52>
		ret = data_publish(&client,
    d250:	2103      	movs	r1, #3
    d252:	4808      	ldr	r0, [pc, #32]	; (d274 <button_handler+0x70>)
    d254:	e7db      	b.n	d20e <button_handler+0xa>
}
    d256:	bd08      	pop	{r3, pc}
    d258:	000214ea 	.word	0x000214ea
    d25c:	00020e10 	.word	0x00020e10
    d260:	00020e60 	.word	0x00020e60
    d264:	000214ef 	.word	0x000214ef
    d268:	000214ec 	.word	0x000214ec
    d26c:	00021502 	.word	0x00021502
    d270:	0002150d 	.word	0x0002150d
    d274:	00021519 	.word	0x00021519

0000d278 <mqtt_evt_handler>:
{
    d278:	b5f0      	push	{r4, r5, r6, r7, lr}
    d27a:	460c      	mov	r4, r1
	switch (evt->type) {
    d27c:	7809      	ldrb	r1, [r1, #0]
{
    d27e:	4607      	mov	r7, r0
    d280:	b087      	sub	sp, #28
    d282:	2909      	cmp	r1, #9
    d284:	f200 80ae 	bhi.w	d3e4 <mqtt_evt_handler+0x16c>
    d288:	e8df f001 	tbb	[pc, r1]
    d28c:	803e3405 	.word	0x803e3405
    d290:	90acacac 	.word	0x90acacac
    d294:	a0ac      	.short	0xa0ac
		if (evt->result != 0) {
    d296:	69e1      	ldr	r1, [r4, #28]
    d298:	4a57      	ldr	r2, [pc, #348]	; (d3f8 <mqtt_evt_handler+0x180>)
    d29a:	4c58      	ldr	r4, [pc, #352]	; (d3fc <mqtt_evt_handler+0x184>)
    d29c:	1b12      	subs	r2, r2, r4
    d29e:	08d2      	lsrs	r2, r2, #3
    d2a0:	0192      	lsls	r2, r2, #6
    d2a2:	b129      	cbz	r1, d2b0 <mqtt_evt_handler+0x38>
			LOG_ERR("MQTT connect failed: %d", evt->result);
    d2a4:	4856      	ldr	r0, [pc, #344]	; (d400 <mqtt_evt_handler+0x188>)
    d2a6:	f042 0201 	orr.w	r2, r2, #1
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
    d2aa:	f010 fd26 	bl	1dcfa <log_1>
}
    d2ae:	e01f      	b.n	d2f0 <mqtt_evt_handler+0x78>
		LOG_INF("MQTT client connected");
    d2b0:	f042 0403 	orr.w	r4, r2, #3
	struct mqtt_topic subscribe_topic = {
    d2b4:	4d53      	ldr	r5, [pc, #332]	; (d404 <mqtt_evt_handler+0x18c>)
		LOG_INF("MQTT client connected");
    d2b6:	4621      	mov	r1, r4
    d2b8:	4853      	ldr	r0, [pc, #332]	; (d408 <mqtt_evt_handler+0x190>)
    d2ba:	f010 fd0f 	bl	1dcdc <log_0>
			.size = strlen(CONFIG_MQTT_SUB_TOPIC)
    d2be:	4628      	mov	r0, r5
	struct mqtt_topic subscribe_topic = {
    d2c0:	9503      	str	r5, [sp, #12]
			.size = strlen(CONFIG_MQTT_SUB_TOPIC)
    d2c2:	f011 fab6 	bl	1e832 <strlen>
	struct mqtt_topic subscribe_topic = {
    d2c6:	2301      	movs	r3, #1
    d2c8:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
    d2cc:	ab03      	add	r3, sp, #12
    d2ce:	9301      	str	r3, [sp, #4]
    d2d0:	4b4e      	ldr	r3, [pc, #312]	; (d40c <mqtt_evt_handler+0x194>)
	struct mqtt_topic subscribe_topic = {
    d2d2:	9004      	str	r0, [sp, #16]
	LOG_INF("Subscribing to: %s len %u", CONFIG_MQTT_SUB_TOPIC,
    d2d4:	4628      	mov	r0, r5
	const struct mqtt_subscription_list subscription_list = {
    d2d6:	9302      	str	r3, [sp, #8]
	LOG_INF("Subscribing to: %s len %u", CONFIG_MQTT_SUB_TOPIC,
    d2d8:	f011 faab 	bl	1e832 <strlen>
    d2dc:	4629      	mov	r1, r5
    d2de:	4602      	mov	r2, r0
    d2e0:	4623      	mov	r3, r4
    d2e2:	484b      	ldr	r0, [pc, #300]	; (d410 <mqtt_evt_handler+0x198>)
    d2e4:	f010 fd20 	bl	1dd28 <log_2>
	return mqtt_subscribe(&client, &subscription_list);
    d2e8:	484a      	ldr	r0, [pc, #296]	; (d414 <mqtt_evt_handler+0x19c>)
    d2ea:	a901      	add	r1, sp, #4
    d2ec:	f012 f82d 	bl	1f34a <mqtt_subscribe>
}
    d2f0:	b007      	add	sp, #28
    d2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2f4:	4a40      	ldr	r2, [pc, #256]	; (d3f8 <mqtt_evt_handler+0x180>)
    d2f6:	4b41      	ldr	r3, [pc, #260]	; (d3fc <mqtt_evt_handler+0x184>)
		LOG_INF("MQTT client disconnected: %d", evt->result);
    d2f8:	69e1      	ldr	r1, [r4, #28]
    d2fa:	1ad2      	subs	r2, r2, r3
    d2fc:	08d2      	lsrs	r2, r2, #3
    d2fe:	0192      	lsls	r2, r2, #6
    d300:	4845      	ldr	r0, [pc, #276]	; (d418 <mqtt_evt_handler+0x1a0>)
    d302:	f042 0203 	orr.w	r2, r2, #3
    d306:	e7d0      	b.n	d2aa <mqtt_evt_handler+0x32>
    d308:	4b3c      	ldr	r3, [pc, #240]	; (d3fc <mqtt_evt_handler+0x184>)
    d30a:	4d3b      	ldr	r5, [pc, #236]	; (d3f8 <mqtt_evt_handler+0x180>)
		LOG_INF("MQTT PUBLISH result=%d len=%d",
    d30c:	6962      	ldr	r2, [r4, #20]
    d30e:	1aed      	subs	r5, r5, r3
    d310:	08ed      	lsrs	r5, r5, #3
    d312:	01ad      	lsls	r5, r5, #6
    d314:	69e1      	ldr	r1, [r4, #28]
    d316:	4841      	ldr	r0, [pc, #260]	; (d41c <mqtt_evt_handler+0x1a4>)
    d318:	f045 0303 	orr.w	r3, r5, #3
    d31c:	f010 fd04 	bl	1dd28 <log_2>
		err = publish_get_payload(c, p->message.payload.len);
    d320:	6962      	ldr	r2, [r4, #20]
	if (length > sizeof(payload_buf)) {
    d322:	2a80      	cmp	r2, #128	; 0x80
    d324:	d81a      	bhi.n	d35c <mqtt_evt_handler+0xe4>
	return mqtt_readall_publish_payload(c, payload_buf, length);
    d326:	4638      	mov	r0, r7
    d328:	493d      	ldr	r1, [pc, #244]	; (d420 <mqtt_evt_handler+0x1a8>)
    d32a:	f012 f8c2 	bl	1f4b2 <mqtt_readall_publish_payload>
    d32e:	4606      	mov	r6, r0
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
    d330:	7b23      	ldrb	r3, [r4, #12]
    d332:	2b01      	cmp	r3, #1
    d334:	d106      	bne.n	d344 <mqtt_evt_handler+0xcc>
			const struct mqtt_puback_param ack = {
    d336:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(&client, &ack);
    d338:	4836      	ldr	r0, [pc, #216]	; (d414 <mqtt_evt_handler+0x19c>)
    d33a:	a903      	add	r1, sp, #12
			const struct mqtt_puback_param ack = {
    d33c:	f8ad 300c 	strh.w	r3, [sp, #12]
			mqtt_publish_qos1_ack(&client, &ack);
    d340:	f011 ffb3 	bl	1f2aa <mqtt_publish_qos1_ack>
		if (err >= 0) {
    d344:	2e00      	cmp	r6, #0
    d346:	db0c      	blt.n	d362 <mqtt_evt_handler+0xea>
			data_print("Received: ", payload_buf,
    d348:	6962      	ldr	r2, [r4, #20]
    d34a:	4935      	ldr	r1, [pc, #212]	; (d420 <mqtt_evt_handler+0x1a8>)
    d34c:	4835      	ldr	r0, [pc, #212]	; (d424 <mqtt_evt_handler+0x1ac>)
    d34e:	f7ff feeb 	bl	d128 <data_print>
			data_publish(&client, MQTT_QOS_1_AT_LEAST_ONCE,
    d352:	6961      	ldr	r1, [r4, #20]
    d354:	4832      	ldr	r0, [pc, #200]	; (d420 <mqtt_evt_handler+0x1a8>)
    d356:	f7ff ff15 	bl	d184 <data_publish.constprop.0>
    d35a:	e7c9      	b.n	d2f0 <mqtt_evt_handler+0x78>
		return -EMSGSIZE;
    d35c:	f06f 0623 	mvn.w	r6, #35	; 0x23
    d360:	e7e6      	b.n	d330 <mqtt_evt_handler+0xb8>
			LOG_ERR("publish_get_payload failed: %d", err);
    d362:	f045 0401 	orr.w	r4, r5, #1
    d366:	4622      	mov	r2, r4
    d368:	4631      	mov	r1, r6
    d36a:	482f      	ldr	r0, [pc, #188]	; (d428 <mqtt_evt_handler+0x1b0>)
    d36c:	f010 fcc5 	bl	1dcfa <log_1>
			LOG_INF("Disconnecting MQTT client...");
    d370:	f045 0103 	orr.w	r1, r5, #3
    d374:	482d      	ldr	r0, [pc, #180]	; (d42c <mqtt_evt_handler+0x1b4>)
    d376:	f010 fcb1 	bl	1dcdc <log_0>
			err = mqtt_disconnect(c);
    d37a:	4638      	mov	r0, r7
    d37c:	f011 ffbc 	bl	1f2f8 <mqtt_disconnect>
			if (err) {
    d380:	4601      	mov	r1, r0
    d382:	2800      	cmp	r0, #0
    d384:	d0b4      	beq.n	d2f0 <mqtt_evt_handler+0x78>
				LOG_ERR("Could not disconnect: %d", err);
    d386:	4622      	mov	r2, r4
    d388:	4829      	ldr	r0, [pc, #164]	; (d430 <mqtt_evt_handler+0x1b8>)
    d38a:	e78e      	b.n	d2aa <mqtt_evt_handler+0x32>
		if (evt->result != 0) {
    d38c:	4a1a      	ldr	r2, [pc, #104]	; (d3f8 <mqtt_evt_handler+0x180>)
    d38e:	4b1b      	ldr	r3, [pc, #108]	; (d3fc <mqtt_evt_handler+0x184>)
    d390:	69e1      	ldr	r1, [r4, #28]
    d392:	1ad2      	subs	r2, r2, r3
    d394:	08d2      	lsrs	r2, r2, #3
    d396:	0192      	lsls	r2, r2, #6
    d398:	b119      	cbz	r1, d3a2 <mqtt_evt_handler+0x12a>
			LOG_ERR("MQTT PUBACK error: %d", evt->result);
    d39a:	4826      	ldr	r0, [pc, #152]	; (d434 <mqtt_evt_handler+0x1bc>)
    d39c:	f042 0201 	orr.w	r2, r2, #1
    d3a0:	e783      	b.n	d2aa <mqtt_evt_handler+0x32>
		LOG_INF("PUBACK packet id: %u", evt->param.puback.message_id);
    d3a2:	88a1      	ldrh	r1, [r4, #4]
    d3a4:	4824      	ldr	r0, [pc, #144]	; (d438 <mqtt_evt_handler+0x1c0>)
    d3a6:	f042 0203 	orr.w	r2, r2, #3
    d3aa:	e77e      	b.n	d2aa <mqtt_evt_handler+0x32>
		if (evt->result != 0) {
    d3ac:	4a12      	ldr	r2, [pc, #72]	; (d3f8 <mqtt_evt_handler+0x180>)
    d3ae:	4b13      	ldr	r3, [pc, #76]	; (d3fc <mqtt_evt_handler+0x184>)
    d3b0:	69e1      	ldr	r1, [r4, #28]
    d3b2:	1ad2      	subs	r2, r2, r3
    d3b4:	08d2      	lsrs	r2, r2, #3
    d3b6:	0192      	lsls	r2, r2, #6
    d3b8:	b119      	cbz	r1, d3c2 <mqtt_evt_handler+0x14a>
			LOG_ERR("MQTT SUBACK error: %d", evt->result);
    d3ba:	4820      	ldr	r0, [pc, #128]	; (d43c <mqtt_evt_handler+0x1c4>)
    d3bc:	f042 0201 	orr.w	r2, r2, #1
    d3c0:	e773      	b.n	d2aa <mqtt_evt_handler+0x32>
		LOG_INF("SUBACK packet id: %u", evt->param.suback.message_id);
    d3c2:	88a1      	ldrh	r1, [r4, #4]
    d3c4:	481e      	ldr	r0, [pc, #120]	; (d440 <mqtt_evt_handler+0x1c8>)
    d3c6:	f042 0203 	orr.w	r2, r2, #3
    d3ca:	e76e      	b.n	d2aa <mqtt_evt_handler+0x32>
		if (evt->result != 0) {
    d3cc:	69e1      	ldr	r1, [r4, #28]
    d3ce:	2900      	cmp	r1, #0
    d3d0:	d08e      	beq.n	d2f0 <mqtt_evt_handler+0x78>
    d3d2:	4a09      	ldr	r2, [pc, #36]	; (d3f8 <mqtt_evt_handler+0x180>)
    d3d4:	4b09      	ldr	r3, [pc, #36]	; (d3fc <mqtt_evt_handler+0x184>)
			LOG_ERR("MQTT PINGRESP error: %d", evt->result);
    d3d6:	481b      	ldr	r0, [pc, #108]	; (d444 <mqtt_evt_handler+0x1cc>)
    d3d8:	1ad2      	subs	r2, r2, r3
    d3da:	08d2      	lsrs	r2, r2, #3
    d3dc:	0192      	lsls	r2, r2, #6
    d3de:	f042 0201 	orr.w	r2, r2, #1
    d3e2:	e762      	b.n	d2aa <mqtt_evt_handler+0x32>
    d3e4:	4a04      	ldr	r2, [pc, #16]	; (d3f8 <mqtt_evt_handler+0x180>)
    d3e6:	4b05      	ldr	r3, [pc, #20]	; (d3fc <mqtt_evt_handler+0x184>)
		LOG_INF("Unhandled MQTT event type: %d", evt->type);
    d3e8:	4817      	ldr	r0, [pc, #92]	; (d448 <mqtt_evt_handler+0x1d0>)
    d3ea:	1ad2      	subs	r2, r2, r3
    d3ec:	08d2      	lsrs	r2, r2, #3
    d3ee:	0192      	lsls	r2, r2, #6
    d3f0:	f042 0203 	orr.w	r2, r2, #3
    d3f4:	e759      	b.n	d2aa <mqtt_evt_handler+0x32>
    d3f6:	bf00      	nop
    d3f8:	00020e60 	.word	0x00020e60
    d3fc:	00020e10 	.word	0x00020e10
    d400:	0002151d 	.word	0x0002151d
    d404:	0002154b 	.word	0x0002154b
    d408:	00021535 	.word	0x00021535
    d40c:	04d20001 	.word	0x04d20001
    d410:	00021560 	.word	0x00021560
    d414:	20020758 	.word	0x20020758
    d418:	0002157a 	.word	0x0002157a
    d41c:	00021597 	.word	0x00021597
    d420:	200219da 	.word	0x200219da
    d424:	000215b5 	.word	0x000215b5
    d428:	000215c0 	.word	0x000215c0
    d42c:	000215df 	.word	0x000215df
    d430:	000215fc 	.word	0x000215fc
    d434:	00021615 	.word	0x00021615
    d438:	0002162b 	.word	0x0002162b
    d43c:	00021640 	.word	0x00021640
    d440:	00021656 	.word	0x00021656
    d444:	0002166b 	.word	0x0002166b
    d448:	00021683 	.word	0x00021683

0000d44c <bsd_recoverable_error_handler>:
    d44c:	4a05      	ldr	r2, [pc, #20]	; (d464 <bsd_recoverable_error_handler+0x18>)
    d44e:	4b06      	ldr	r3, [pc, #24]	; (d468 <bsd_recoverable_error_handler+0x1c>)
{
    d450:	4601      	mov	r1, r0
    d452:	1ad2      	subs	r2, r2, r3
    d454:	08d2      	lsrs	r2, r2, #3
	LOG_ERR("bsdlib recoverable error: %u", (unsigned int)err);
    d456:	0192      	lsls	r2, r2, #6
    d458:	4804      	ldr	r0, [pc, #16]	; (d46c <bsd_recoverable_error_handler+0x20>)
    d45a:	f042 0201 	orr.w	r2, r2, #1
    d45e:	f010 bc4c 	b.w	1dcfa <log_1>
    d462:	bf00      	nop
    d464:	00020e60 	.word	0x00020e60
    d468:	00020e10 	.word	0x00020e10
    d46c:	000216a1 	.word	0x000216a1

0000d470 <main>:

	return 0;
}

void main(void)
{
    d470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d474:	4b8d      	ldr	r3, [pc, #564]	; (d6ac <main+0x23c>)
    d476:	4c8e      	ldr	r4, [pc, #568]	; (d6b0 <main+0x240>)
	int err;
	uint32_t connect_attempt = 0;

	LOG_INF("The MQTT simple sample started");
    d478:	488e      	ldr	r0, [pc, #568]	; (d6b4 <main+0x244>)
    d47a:	1ae4      	subs	r4, r4, r3
    d47c:	08e4      	lsrs	r4, r4, #3
    d47e:	01a4      	lsls	r4, r4, #6
{
    d480:	b09c      	sub	sp, #112	; 0x70
	LOG_INF("The MQTT simple sample started");
    d482:	f044 0103 	orr.w	r1, r4, #3
    d486:	f010 fc29 	bl	1dcdc <log_0>
		LOG_INF("LTE Link Connecting...");
    d48a:	f8df a290 	ldr.w	sl, [pc, #656]	; d71c <main+0x2ac>
			LOG_INF("Failed to establish LTE connection: %d", err);
    d48e:	f8df 9290 	ldr.w	r9, [pc, #656]	; d720 <main+0x2b0>
#endif /* defined(CONFIG_MQTT_LIB_TLS) */

	do {
		err = modem_configure();
		if (err) {
			LOG_INF("Retrying in %d seconds",
    d492:	f8df 8290 	ldr.w	r8, [pc, #656]	; d724 <main+0x2b4>
		LOG_INF("LTE Link Connecting...");
    d496:	f044 0703 	orr.w	r7, r4, #3
    d49a:	4639      	mov	r1, r7
    d49c:	4650      	mov	r0, sl
    d49e:	f010 fc1d 	bl	1dcdc <log_0>
		err = lte_lc_init_and_connect();
    d4a2:	f012 fec0 	bl	20226 <lte_lc_init_and_connect>
		LOG_INF("LTE Link Connecting...");
    d4a6:	4626      	mov	r6, r4
		if (err) {
    d4a8:	4605      	mov	r5, r0
    d4aa:	b178      	cbz	r0, d4cc <main+0x5c>
			LOG_INF("Failed to establish LTE connection: %d", err);
    d4ac:	463a      	mov	r2, r7
    d4ae:	4601      	mov	r1, r0
    d4b0:	4648      	mov	r0, r9
    d4b2:	f010 fc22 	bl	1dcfa <log_1>
			LOG_INF("Retrying in %d seconds",
    d4b6:	463a      	mov	r2, r7
    d4b8:	2178      	movs	r1, #120	; 0x78
    d4ba:	4640      	mov	r0, r8
    d4bc:	f010 fc1d 	bl	1dcfa <log_1>
	return z_impl_k_sleep(timeout);
    d4c0:	2100      	movs	r1, #0
    d4c2:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
    d4c6:	f00f fbb7 	bl	1cc38 <z_impl_k_sleep>
				CONFIG_LTE_CONNECT_RETRY_DELAY_S);
			k_sleep(K_SECONDS(CONFIG_LTE_CONNECT_RETRY_DELAY_S));
		}
	} while (err);
    d4ca:	e7e4      	b.n	d496 <main+0x26>
		LOG_INF("LTE Link Connected!");
    d4cc:	4639      	mov	r1, r7
    d4ce:	487a      	ldr	r0, [pc, #488]	; (d6b8 <main+0x248>)
    d4d0:	f010 fc04 	bl	1dcdc <log_0>
	LOG_INF("Disabling PSM and eDRX");
    d4d4:	4639      	mov	r1, r7
    d4d6:	4879      	ldr	r0, [pc, #484]	; (d6bc <main+0x24c>)
    d4d8:	f010 fc00 	bl	1dcdc <log_0>
	lte_lc_psm_req(false);
    d4dc:	4628      	mov	r0, r5
    d4de:	f005 fd3d 	bl	12f5c <lte_lc_psm_req>
	lte_lc_edrx_req(false);
    d4e2:	4628      	mov	r0, r5
    d4e4:	f005 ff88 	bl	133f8 <lte_lc_edrx_req>
	mqtt_client_init(client);
    d4e8:	4875      	ldr	r0, [pc, #468]	; (d6c0 <main+0x250>)
    d4ea:	f011 fe3d 	bl	1f168 <mqtt_client_init>
	struct addrinfo hints = {
    d4ee:	2250      	movs	r2, #80	; 0x50
    d4f0:	4629      	mov	r1, r5
    d4f2:	a808      	add	r0, sp, #32
    d4f4:	f011 f9fa 	bl	1e8ec <memset>
    d4f8:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
    d4fa:	4629      	mov	r1, r5
    d4fc:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    d500:	4870      	ldr	r0, [pc, #448]	; (d6c4 <main+0x254>)
    d502:	ab03      	add	r3, sp, #12
    d504:	aa08      	add	r2, sp, #32
    d506:	f010 fecd 	bl	1e2a4 <zsock_getaddrinfo>
	if (err) {
    d50a:	4601      	mov	r1, r0
    d50c:	b190      	cbz	r0, d534 <main+0xc4>
		LOG_ERR("getaddrinfo failed: %d", err);
    d50e:	f046 0601 	orr.w	r6, r6, #1
    d512:	4632      	mov	r2, r6
    d514:	486c      	ldr	r0, [pc, #432]	; (d6c8 <main+0x258>)
    d516:	f010 fbf0 	bl	1dcfa <log_1>
		LOG_ERR("Failed to initialize broker connection");
    d51a:	4631      	mov	r1, r6
    d51c:	486b      	ldr	r0, [pc, #428]	; (d6cc <main+0x25c>)
    d51e:	f010 fbdd 	bl	1dcdc <log_0>

	err = client_init(&client);
	if (err != 0) {
		LOG_ERR("client_init: %d", err);
    d522:	4632      	mov	r2, r6
    d524:	f06f 0109 	mvn.w	r1, #9
    d528:	4869      	ldr	r0, [pc, #420]	; (d6d0 <main+0x260>)
		goto do_connect;
	}

	err = fds_init(&client);
	if (err != 0) {
		LOG_ERR("fds_init: %d", err);
    d52a:	f010 fbe6 	bl	1dcfa <log_1>
	err = mqtt_disconnect(&client);
	if (err) {
		LOG_ERR("Could not disconnect MQTT client: %d", err);
	}
	goto do_connect;
}
    d52e:	b01c      	add	sp, #112	; 0x70
    d530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	addr = result;
    d534:	9d03      	ldr	r5, [sp, #12]
			LOG_ERR("ai_addrlen = %u should be %u or %u",
    d536:	4f67      	ldr	r7, [pc, #412]	; (d6d4 <main+0x264>)
    d538:	f044 0601 	orr.w	r6, r4, #1
	while (addr != NULL) {
    d53c:	b1dd      	cbz	r5, d576 <main+0x106>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
    d53e:	6969      	ldr	r1, [r5, #20]
    d540:	2908      	cmp	r1, #8
    d542:	d152      	bne.n	d5ea <main+0x17a>
				->sin_addr.s_addr;
    d544:	69ab      	ldr	r3, [r5, #24]
			broker4->sin_addr.s_addr =
    d546:	4964      	ldr	r1, [pc, #400]	; (d6d8 <main+0x268>)
				->sin_addr.s_addr;
    d548:	685b      	ldr	r3, [r3, #4]
			broker4->sin_family = AF_INET;
    d54a:	2001      	movs	r0, #1
			broker4->sin_addr.s_addr =
    d54c:	604b      	str	r3, [r1, #4]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    d54e:	f645 3307 	movw	r3, #23303	; 0x5b07
			broker4->sin_family = AF_INET;
    d552:	8008      	strh	r0, [r1, #0]
			broker4->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
    d554:	804b      	strh	r3, [r1, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
    d556:	2310      	movs	r3, #16
    d558:	3104      	adds	r1, #4
    d55a:	eb0d 0203 	add.w	r2, sp, r3
    d55e:	f003 f8b7 	bl	106d0 <z_impl_net_addr_ntop>
			LOG_INF("IPv4 Address found %s", log_strdup(ipv4_addr));
    d562:	a804      	add	r0, sp, #16
    d564:	f001 f9f8 	bl	e958 <log_strdup>
    d568:	f044 0503 	orr.w	r5, r4, #3
    d56c:	4601      	mov	r1, r0
    d56e:	462a      	mov	r2, r5
    d570:	485a      	ldr	r0, [pc, #360]	; (d6dc <main+0x26c>)
    d572:	f010 fbc2 	bl	1dcfa <log_1>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
    d576:	9803      	ldr	r0, [sp, #12]
	client->broker = &broker;
    d578:	4d51      	ldr	r5, [pc, #324]	; (d6c0 <main+0x250>)
    d57a:	f010 fe95 	bl	1e2a8 <zsock_freeaddrinfo>
    d57e:	4b56      	ldr	r3, [pc, #344]	; (d6d8 <main+0x268>)
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
    d580:	4857      	ldr	r0, [pc, #348]	; (d6e0 <main+0x270>)
	client->broker = &broker;
    d582:	636b      	str	r3, [r5, #52]	; 0x34
	client->evt_cb = mqtt_evt_handler;
    d584:	4b57      	ldr	r3, [pc, #348]	; (d6e4 <main+0x274>)
	client->client_id.utf8 = (uint8_t *)CONFIG_MQTT_CLIENT_ID;
    d586:	62e8      	str	r0, [r5, #44]	; 0x2c
	client->evt_cb = mqtt_evt_handler;
    d588:	64ab      	str	r3, [r5, #72]	; 0x48
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
    d58a:	f011 f952 	bl	1e832 <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
    d58e:	2304      	movs	r3, #4
    d590:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
	client->rx_buf = rx_buffer;
    d594:	4b54      	ldr	r3, [pc, #336]	; (d6e8 <main+0x278>)
	client->password = NULL;
    d596:	2600      	movs	r6, #0
	client->rx_buf = rx_buffer;
    d598:	64eb      	str	r3, [r5, #76]	; 0x4c
	client->rx_buf_size = sizeof(rx_buffer);
    d59a:	2380      	movs	r3, #128	; 0x80
	client->tx_buf = tx_buffer;
    d59c:	4a53      	ldr	r2, [pc, #332]	; (d6ec <main+0x27c>)
	client->client_id.size = strlen(CONFIG_MQTT_CLIENT_ID);
    d59e:	6328      	str	r0, [r5, #48]	; 0x30
	dk_buttons_init(button_handler);
    d5a0:	4853      	ldr	r0, [pc, #332]	; (d6f0 <main+0x280>)
	client->user_name = NULL;
    d5a2:	e9c5 660e 	strd	r6, r6, [r5, #56]	; 0x38
	client->tx_buf_size = sizeof(tx_buffer);
    d5a6:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
	client->rx_buf_size = sizeof(rx_buffer);
    d5aa:	652b      	str	r3, [r5, #80]	; 0x50
	client->transport.type = MQTT_TRANSPORT_NON_SECURE;
    d5ac:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
	dk_buttons_init(button_handler);
    d5b0:	f004 fc6c 	bl	11e8c <dk_buttons_init>
		LOG_INF("Reconnecting in %d seconds...",
    d5b4:	f8df 8170 	ldr.w	r8, [pc, #368]	; d728 <main+0x2b8>
		fds.fd = c->transport.tcp.sock;
    d5b8:	4f4e      	ldr	r7, [pc, #312]	; (d6f4 <main+0x284>)
	if (connect_attempt++ > 0) {
    d5ba:	b156      	cbz	r6, d5d2 <main+0x162>
		LOG_INF("Reconnecting in %d seconds...",
    d5bc:	213c      	movs	r1, #60	; 0x3c
    d5be:	4640      	mov	r0, r8
    d5c0:	f044 0203 	orr.w	r2, r4, #3
    d5c4:	f010 fb99 	bl	1dcfa <log_1>
    d5c8:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
    d5cc:	2100      	movs	r1, #0
    d5ce:	f00f fb33 	bl	1cc38 <z_impl_k_sleep>
	err = mqtt_connect(&client);
    d5d2:	483b      	ldr	r0, [pc, #236]	; (d6c0 <main+0x250>)
    d5d4:	f011 fde1 	bl	1f19a <mqtt_connect>
	if (err != 0) {
    d5d8:	4601      	mov	r1, r0
    d5da:	b178      	cbz	r0, d5fc <main+0x18c>
		LOG_ERR("mqtt_connect %d", err);
    d5dc:	4846      	ldr	r0, [pc, #280]	; (d6f8 <main+0x288>)
    d5de:	f044 0201 	orr.w	r2, r4, #1
		LOG_ERR("Could not disconnect MQTT client: %d", err);
    d5e2:	f010 fb8a 	bl	1dcfa <log_1>
    d5e6:	3601      	adds	r6, #1
    d5e8:	e7e7      	b.n	d5ba <main+0x14a>
			LOG_ERR("ai_addrlen = %u should be %u or %u",
    d5ea:	2318      	movs	r3, #24
    d5ec:	2208      	movs	r2, #8
    d5ee:	4638      	mov	r0, r7
    d5f0:	f8ad 6000 	strh.w	r6, [sp]
    d5f4:	f010 fbb1 	bl	1dd5a <log_3>
		addr = addr->ai_next;
    d5f8:	682d      	ldr	r5, [r5, #0]
    d5fa:	e79f      	b.n	d53c <main+0xcc>
	if (c->transport.type == MQTT_TRANSPORT_NON_SECURE) {
    d5fc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
    d600:	bb3b      	cbnz	r3, d652 <main+0x1e2>
		fds.fd = c->transport.tcp.sock;
    d602:	6aab      	ldr	r3, [r5, #40]	; 0x28
		err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
    d604:	f8df 90b8 	ldr.w	r9, [pc, #184]	; d6c0 <main+0x250>
		fds.fd = c->transport.tcp.sock;
    d608:	603b      	str	r3, [r7, #0]
	fds.events = POLLIN;
    d60a:	2301      	movs	r3, #1
    d60c:	80bb      	strh	r3, [r7, #4]
		err = poll(&fds, 1, mqtt_keepalive_time_left(&client));
    d60e:	4648      	mov	r0, r9
    d610:	f011 ff14 	bl	1f43c <mqtt_keepalive_time_left>
    d614:	4602      	mov	r2, r0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
    d616:	2101      	movs	r1, #1
    d618:	4638      	mov	r0, r7
    d61a:	f001 fe0f 	bl	f23c <z_impl_zsock_poll>
		if (err < 0) {
    d61e:	2800      	cmp	r0, #0
    d620:	da1d      	bge.n	d65e <main+0x1ee>
			LOG_ERR("poll: %d", errno);
    d622:	f044 0901 	orr.w	r9, r4, #1
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    d626:	f00e fc49 	bl	1bebc <z_impl_z_errno>
    d62a:	464a      	mov	r2, r9
    d62c:	6801      	ldr	r1, [r0, #0]
    d62e:	4833      	ldr	r0, [pc, #204]	; (d6fc <main+0x28c>)
			LOG_ERR("ERROR: mqtt_live: %d", err);
    d630:	f010 fb63 	bl	1dcfa <log_1>
	LOG_INF("Disconnecting MQTT client...");
    d634:	f044 0103 	orr.w	r1, r4, #3
    d638:	4831      	ldr	r0, [pc, #196]	; (d700 <main+0x290>)
    d63a:	f010 fb4f 	bl	1dcdc <log_0>
	err = mqtt_disconnect(&client);
    d63e:	4820      	ldr	r0, [pc, #128]	; (d6c0 <main+0x250>)
    d640:	f011 fe5a 	bl	1f2f8 <mqtt_disconnect>
	if (err) {
    d644:	4601      	mov	r1, r0
    d646:	2800      	cmp	r0, #0
    d648:	d0cd      	beq.n	d5e6 <main+0x176>
		LOG_ERR("Could not disconnect MQTT client: %d", err);
    d64a:	482e      	ldr	r0, [pc, #184]	; (d704 <main+0x294>)
    d64c:	f044 0201 	orr.w	r2, r4, #1
    d650:	e7c7      	b.n	d5e2 <main+0x172>
		LOG_ERR("fds_init: %d", err);
    d652:	f06f 0122 	mvn.w	r1, #34	; 0x22
    d656:	482c      	ldr	r0, [pc, #176]	; (d708 <main+0x298>)
    d658:	f044 0201 	orr.w	r2, r4, #1
    d65c:	e765      	b.n	d52a <main+0xba>
		err = mqtt_live(&client);
    d65e:	4648      	mov	r0, r9
    d660:	f011 fec5 	bl	1f3ee <mqtt_live>
		if ((err != 0) && (err != -EAGAIN)) {
    d664:	4601      	mov	r1, r0
    d666:	b130      	cbz	r0, d676 <main+0x206>
    d668:	f110 0f0b 	cmn.w	r0, #11
    d66c:	d003      	beq.n	d676 <main+0x206>
			LOG_ERR("ERROR: mqtt_live: %d", err);
    d66e:	4827      	ldr	r0, [pc, #156]	; (d70c <main+0x29c>)
    d670:	f044 0201 	orr.w	r2, r4, #1
    d674:	e7dc      	b.n	d630 <main+0x1c0>
		if ((fds.revents & POLLIN) == POLLIN) {
    d676:	88fb      	ldrh	r3, [r7, #6]
    d678:	07d9      	lsls	r1, r3, #31
    d67a:	d508      	bpl.n	d68e <main+0x21e>
			err = mqtt_input(&client);
    d67c:	4648      	mov	r0, r9
    d67e:	f011 fef4 	bl	1f46a <mqtt_input>
			if (err != 0) {
    d682:	4601      	mov	r1, r0
    d684:	b118      	cbz	r0, d68e <main+0x21e>
				LOG_ERR("mqtt_input: %d", err);
    d686:	4822      	ldr	r0, [pc, #136]	; (d710 <main+0x2a0>)
    d688:	f044 0201 	orr.w	r2, r4, #1
    d68c:	e7d0      	b.n	d630 <main+0x1c0>
		if ((fds.revents & POLLERR) == POLLERR) {
    d68e:	88fb      	ldrh	r3, [r7, #6]
    d690:	071a      	lsls	r2, r3, #28
    d692:	d505      	bpl.n	d6a0 <main+0x230>
			LOG_ERR("POLLERR");
    d694:	481f      	ldr	r0, [pc, #124]	; (d714 <main+0x2a4>)
    d696:	f044 0101 	orr.w	r1, r4, #1
			LOG_ERR("POLLNVAL");
    d69a:	f010 fb1f 	bl	1dcdc <log_0>
    d69e:	e7c9      	b.n	d634 <main+0x1c4>
		if ((fds.revents & POLLNVAL) == POLLNVAL) {
    d6a0:	069b      	lsls	r3, r3, #26
    d6a2:	d5b4      	bpl.n	d60e <main+0x19e>
			LOG_ERR("POLLNVAL");
    d6a4:	481c      	ldr	r0, [pc, #112]	; (d718 <main+0x2a8>)
    d6a6:	f044 0101 	orr.w	r1, r4, #1
    d6aa:	e7f6      	b.n	d69a <main+0x22a>
    d6ac:	00020e10 	.word	0x00020e10
    d6b0:	00020e60 	.word	0x00020e60
    d6b4:	000216be 	.word	0x000216be
    d6b8:	00021732 	.word	0x00021732
    d6bc:	00021746 	.word	0x00021746
    d6c0:	20020758 	.word	0x20020758
    d6c4:	0002175d 	.word	0x0002175d
    d6c8:	00021776 	.word	0x00021776
    d6cc:	0002178d 	.word	0x0002178d
    d6d0:	000217b4 	.word	0x000217b4
    d6d4:	000217da 	.word	0x000217da
    d6d8:	200219b8 	.word	0x200219b8
    d6dc:	000217c4 	.word	0x000217c4
    d6e0:	000217fd 	.word	0x000217fd
    d6e4:	0000d279 	.word	0x0000d279
    d6e8:	20021a5a 	.word	0x20021a5a
    d6ec:	20021ada 	.word	0x20021ada
    d6f0:	0000d205 	.word	0x0000d205
    d6f4:	200207bc 	.word	0x200207bc
    d6f8:	00021828 	.word	0x00021828
    d6fc:	00021845 	.word	0x00021845
    d700:	000215df 	.word	0x000215df
    d704:	00021883 	.word	0x00021883
    d708:	00021838 	.word	0x00021838
    d70c:	0002184e 	.word	0x0002184e
    d710:	00021863 	.word	0x00021863
    d714:	00021872 	.word	0x00021872
    d718:	0002187a 	.word	0x0002187a
    d71c:	000216dd 	.word	0x000216dd
    d720:	000216f4 	.word	0x000216f4
    d724:	0002171b 	.word	0x0002171b
    d728:	0002180a 	.word	0x0002180a

0000d72c <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    d72c:	2803      	cmp	r0, #3
{
    d72e:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
    d730:	d906      	bls.n	d740 <_check_fd+0x14>
    d732:	f00e fbc3 	bl	1bebc <z_impl_z_errno>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
    d736:	2309      	movs	r3, #9
    d738:	6003      	str	r3, [r0, #0]
    d73a:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
    d73e:	bd08      	pop	{r3, pc}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d740:	220c      	movs	r2, #12
    d742:	4b05      	ldr	r3, [pc, #20]	; (d758 <_check_fd+0x2c>)
    d744:	fb02 3000 	mla	r0, r2, r0, r3
    d748:	3008      	adds	r0, #8
    d74a:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
    d74e:	2b00      	cmp	r3, #0
    d750:	d0ef      	beq.n	d732 <_check_fd+0x6>
	return 0;
    d752:	2000      	movs	r0, #0
    d754:	e7f3      	b.n	d73e <_check_fd+0x12>
    d756:	bf00      	nop
    d758:	200207c4 	.word	0x200207c4

0000d75c <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
    d75c:	b570      	push	{r4, r5, r6, lr}
    d75e:	4604      	mov	r4, r0
    d760:	460d      	mov	r5, r1
    d762:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    d764:	f7ff ffe2 	bl	d72c <_check_fd>
    d768:	2800      	cmp	r0, #0
    d76a:	db0a      	blt.n	d782 <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
    d76c:	4a08      	ldr	r2, [pc, #32]	; (d790 <z_get_fd_obj+0x34>)
    d76e:	b155      	cbz	r5, d786 <z_get_fd_obj+0x2a>
    d770:	230c      	movs	r3, #12
    d772:	fb03 2304 	mla	r3, r3, r4, r2
    d776:	685b      	ldr	r3, [r3, #4]
    d778:	42ab      	cmp	r3, r5
    d77a:	d004      	beq.n	d786 <z_get_fd_obj+0x2a>
    d77c:	f00e fb9e 	bl	1bebc <z_impl_z_errno>
		errno = err;
    d780:	6006      	str	r6, [r0, #0]
		return NULL;
    d782:	2000      	movs	r0, #0
    d784:	e002      	b.n	d78c <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
    d786:	200c      	movs	r0, #12
    d788:	4344      	muls	r4, r0
    d78a:	5910      	ldr	r0, [r2, r4]
}
    d78c:	bd70      	pop	{r4, r5, r6, pc}
    d78e:	bf00      	nop
    d790:	200207c4 	.word	0x200207c4

0000d794 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
    d794:	b538      	push	{r3, r4, r5, lr}
    d796:	4605      	mov	r5, r0
    d798:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
    d79a:	f7ff ffc7 	bl	d72c <_check_fd>
    d79e:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
    d7a0:	bfa3      	ittte	ge
    d7a2:	230c      	movge	r3, #12
    d7a4:	fb03 f005 	mulge.w	r0, r3, r5
    d7a8:	4a03      	ldrge	r2, [pc, #12]	; (d7b8 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
    d7aa:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
    d7ac:	bfa1      	itttt	ge
    d7ae:	1813      	addge	r3, r2, r0
    d7b0:	685b      	ldrge	r3, [r3, #4]
    d7b2:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
    d7b4:	5810      	ldrge	r0, [r2, r0]
}
    d7b6:	bd38      	pop	{r3, r4, r5, pc}
    d7b8:	200207c4 	.word	0x200207c4

0000d7bc <z_reserve_fd>:

int z_reserve_fd(void)
{
    d7bc:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    d7be:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
    d7c0:	f04f 33ff 	mov.w	r3, #4294967295
    d7c4:	f04f 32ff 	mov.w	r2, #4294967295
    d7c8:	4812      	ldr	r0, [pc, #72]	; (d814 <z_reserve_fd+0x58>)
    d7ca:	f00e fe07 	bl	1c3dc <z_impl_k_mutex_lock>
    d7ce:	4b12      	ldr	r3, [pc, #72]	; (d818 <z_reserve_fd+0x5c>)
    d7d0:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
    d7d4:	b17a      	cbz	r2, d7f6 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
    d7d6:	3401      	adds	r4, #1
    d7d8:	2c04      	cmp	r4, #4
    d7da:	f103 030c 	add.w	r3, r3, #12
    d7de:	d1f7      	bne.n	d7d0 <z_reserve_fd+0x14>
    d7e0:	f00e fb6c 	bl	1bebc <z_impl_z_errno>
	errno = ENFILE;
    d7e4:	2317      	movs	r3, #23
	return -1;
    d7e6:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
    d7ea:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    d7ec:	4809      	ldr	r0, [pc, #36]	; (d814 <z_reserve_fd+0x58>)
    d7ee:	f00e fe6d 	bl	1c4cc <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
    d7f2:	4620      	mov	r0, r4
    d7f4:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d7f6:	e8d3 1fef 	ldaex	r1, [r3]
    d7fa:	3101      	adds	r1, #1
    d7fc:	e8c3 1fe0 	stlex	r0, r1, [r3]
    d800:	2800      	cmp	r0, #0
    d802:	d1f8      	bne.n	d7f6 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
    d804:	230c      	movs	r3, #12
    d806:	4363      	muls	r3, r4
    d808:	4904      	ldr	r1, [pc, #16]	; (d81c <z_reserve_fd+0x60>)
    d80a:	18c8      	adds	r0, r1, r3
    d80c:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
    d80e:	6042      	str	r2, [r0, #4]
    d810:	e7ec      	b.n	d7ec <z_reserve_fd+0x30>
    d812:	bf00      	nop
    d814:	2002012c 	.word	0x2002012c
    d818:	200207cc 	.word	0x200207cc
    d81c:	200207c4 	.word	0x200207c4

0000d820 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
    d820:	230c      	movs	r3, #12
{
    d822:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
    d824:	4358      	muls	r0, r3
    d826:	4c02      	ldr	r4, [pc, #8]	; (d830 <z_finalize_fd+0x10>)
    d828:	1823      	adds	r3, r4, r0
    d82a:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
    d82c:	605a      	str	r2, [r3, #4]
}
    d82e:	bd10      	pop	{r4, pc}
    d830:	200207c4 	.word	0x200207c4

0000d834 <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
    d834:	230c      	movs	r3, #12
    d836:	4a0e      	ldr	r2, [pc, #56]	; (d870 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
    d838:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
    d83a:	fb03 2300 	mla	r3, r3, r0, r2
    d83e:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d840:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
    d844:	b191      	cbz	r1, d86c <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
    d846:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d848:	e8d3 5fef 	ldaex	r5, [r3]
    d84c:	428d      	cmp	r5, r1
    d84e:	d104      	bne.n	d85a <z_free_fd+0x26>
    d850:	e8c3 4fec 	stlex	ip, r4, [r3]
    d854:	f1bc 0f00 	cmp.w	ip, #0
    d858:	d1f6      	bne.n	d848 <z_free_fd+0x14>
    d85a:	d1f1      	bne.n	d840 <z_free_fd+0xc>
	if (old_rc != 1) {
    d85c:	2901      	cmp	r1, #1
    d85e:	d105      	bne.n	d86c <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
    d860:	230c      	movs	r3, #12
    d862:	4358      	muls	r0, r3
    d864:	2300      	movs	r3, #0
    d866:	1811      	adds	r1, r2, r0
    d868:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
    d86a:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
    d86c:	bd30      	pop	{r4, r5, pc}
    d86e:	bf00      	nop
    d870:	200207c4 	.word	0x200207c4

0000d874 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
    d874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d878:	b087      	sub	sp, #28
    d87a:	460f      	mov	r7, r1
    d87c:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
    d87e:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
    d880:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    d882:	2514      	movs	r5, #20
{
    d884:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
    d886:	4698      	mov	r8, r3
{
    d888:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    d88c:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
    d890:	4c1e      	ldr	r4, [pc, #120]	; (d90c <print_digits+0x98>)
    d892:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    d896:	ea50 0301 	orrs.w	r3, r0, r1
    d89a:	d11a      	bne.n	d8d2 <print_digits+0x5e>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
    d89c:	2d14      	cmp	r5, #20
		buf[i] = '0';
    d89e:	bf08      	it	eq
    d8a0:	2330      	moveq	r3, #48	; 0x30
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    d8a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
    d8a4:	bf18      	it	ne
    d8a6:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    d8a8:	442c      	add	r4, r5
		buf[i] = '0';
    d8aa:	bf08      	it	eq
    d8ac:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    d8b0:	2c15      	cmp	r4, #21
    d8b2:	d01b      	beq.n	d8ec <print_digits+0x78>
    d8b4:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
    d8b6:	2c00      	cmp	r4, #0
    d8b8:	dc1a      	bgt.n	d8f0 <print_digits+0x7c>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
    d8ba:	f81d 0005 	ldrb.w	r0, [sp, r5]
    d8be:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
    d8c0:	3501      	adds	r5, #1
		out(buf[i], ctx);
    d8c2:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    d8c4:	2d15      	cmp	r5, #21
    d8c6:	d1f8      	bne.n	d8ba <print_digits+0x46>
	}
	for (/**/; pad > 0; pad--) {
    d8c8:	2c00      	cmp	r4, #0
    d8ca:	dc19      	bgt.n	d900 <print_digits+0x8c>
		out(pad_char, ctx);
	}
}
    d8cc:	b007      	add	sp, #28
    d8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
    d8d2:	4642      	mov	r2, r8
    d8d4:	464b      	mov	r3, r9
    d8d6:	f7fe ffe9 	bl	c8ac <__aeabi_uldivmod>
    d8da:	4684      	mov	ip, r0
    d8dc:	460b      	mov	r3, r1
    d8de:	5ca2      	ldrb	r2, [r4, r2]
		num /= base;
    d8e0:	4660      	mov	r0, ip
		buf[i] = "0123456789abcdef"[num % base];
    d8e2:	f80d 2005 	strb.w	r2, [sp, r5]
		num /= base;
    d8e6:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    d8e8:	3d01      	subs	r5, #1
    d8ea:	e7d4      	b.n	d896 <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    d8ec:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
    d8ee:	e7e4      	b.n	d8ba <print_digits+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
    d8f0:	f1bb 0f00 	cmp.w	fp, #0
    d8f4:	d0e1      	beq.n	d8ba <print_digits+0x46>
		out(pad_char, ctx);
    d8f6:	4639      	mov	r1, r7
    d8f8:	4650      	mov	r0, sl
    d8fa:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    d8fc:	3c01      	subs	r4, #1
    d8fe:	e7da      	b.n	d8b6 <print_digits+0x42>
		out(pad_char, ctx);
    d900:	4639      	mov	r1, r7
    d902:	4650      	mov	r0, sl
    d904:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    d906:	3c01      	subs	r4, #1
    d908:	e7de      	b.n	d8c8 <print_digits+0x54>
    d90a:	bf00      	nop
    d90c:	000218b4 	.word	0x000218b4

0000d910 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    d910:	680b      	ldr	r3, [r1, #0]
    d912:	3301      	adds	r3, #1
    d914:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    d916:	4b01      	ldr	r3, [pc, #4]	; (d91c <char_out+0xc>)
    d918:	681b      	ldr	r3, [r3, #0]
    d91a:	4718      	bx	r3
    d91c:	20020000 	.word	0x20020000

0000d920 <__printk_hook_install>:
	_char_out = fn;
    d920:	4b01      	ldr	r3, [pc, #4]	; (d928 <__printk_hook_install+0x8>)
    d922:	6018      	str	r0, [r3, #0]
}
    d924:	4770      	bx	lr
    d926:	bf00      	nop
    d928:	20020000 	.word	0x20020000

0000d92c <z_vprintk>:
{
    d92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    d930:	2600      	movs	r6, #0
{
    d932:	4605      	mov	r5, r0
    d934:	468b      	mov	fp, r1
    d936:	461c      	mov	r4, r3
	int min_width = -1;
    d938:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
    d93c:	4637      	mov	r7, r6
{
    d93e:	b087      	sub	sp, #28
    d940:	f102 3aff 	add.w	sl, r2, #4294967295
			might_format = 0;
    d944:	f04f 0900 	mov.w	r9, #0
					break;
    d948:	e007      	b.n	d95a <z_vprintk+0x2e>
		if (!might_format) {
    d94a:	f1b9 0f00 	cmp.w	r9, #0
    d94e:	d10b      	bne.n	d968 <z_vprintk+0x3c>
			if (*fmt != '%') {
    d950:	2825      	cmp	r0, #37	; 0x25
    d952:	f000 810a 	beq.w	db6a <z_vprintk+0x23e>
				out((int)*fmt, ctx);
    d956:	4659      	mov	r1, fp
    d958:	47a8      	blx	r5
	while (*fmt) {
    d95a:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    d95e:	2800      	cmp	r0, #0
    d960:	d1f3      	bne.n	d94a <z_vprintk+0x1e>
}
    d962:	b007      	add	sp, #28
    d964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    d968:	287a      	cmp	r0, #122	; 0x7a
    d96a:	d80a      	bhi.n	d982 <z_vprintk+0x56>
    d96c:	2862      	cmp	r0, #98	; 0x62
    d96e:	d810      	bhi.n	d992 <z_vprintk+0x66>
    d970:	2830      	cmp	r0, #48	; 0x30
    d972:	d051      	beq.n	da18 <z_vprintk+0xec>
    d974:	d844      	bhi.n	da00 <z_vprintk+0xd4>
    d976:	2825      	cmp	r0, #37	; 0x25
    d978:	f000 80f5 	beq.w	db66 <z_vprintk+0x23a>
    d97c:	282d      	cmp	r0, #45	; 0x2d
    d97e:	f000 80fb 	beq.w	db78 <z_vprintk+0x24c>
					out((int)'%', ctx);
    d982:	4659      	mov	r1, fp
    d984:	2025      	movs	r0, #37	; 0x25
    d986:	47a8      	blx	r5
					out((int)*fmt, ctx);
    d988:	4659      	mov	r1, fp
    d98a:	f89a 0000 	ldrb.w	r0, [sl]
    d98e:	47a8      	blx	r5
    d990:	e7d8      	b.n	d944 <z_vprintk+0x18>
    d992:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    d996:	2b17      	cmp	r3, #23
    d998:	d8f3      	bhi.n	d982 <z_vprintk+0x56>
    d99a:	a201      	add	r2, pc, #4	; (adr r2, d9a0 <z_vprintk+0x74>)
    d99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d9a0:	0000db5f 	.word	0x0000db5f
    d9a4:	0000da61 	.word	0x0000da61
    d9a8:	0000d983 	.word	0x0000d983
    d9ac:	0000d983 	.word	0x0000d983
    d9b0:	0000d983 	.word	0x0000d983
    d9b4:	0000da43 	.word	0x0000da43
    d9b8:	0000da61 	.word	0x0000da61
    d9bc:	0000d983 	.word	0x0000d983
    d9c0:	0000d983 	.word	0x0000d983
    d9c4:	0000da43 	.word	0x0000da43
    d9c8:	0000d983 	.word	0x0000d983
    d9cc:	0000d983 	.word	0x0000d983
    d9d0:	0000d983 	.word	0x0000d983
    d9d4:	0000dadb 	.word	0x0000dadb
    d9d8:	0000d983 	.word	0x0000d983
    d9dc:	0000d983 	.word	0x0000d983
    d9e0:	0000db27 	.word	0x0000db27
    d9e4:	0000d983 	.word	0x0000d983
    d9e8:	0000da61 	.word	0x0000da61
    d9ec:	0000d983 	.word	0x0000d983
    d9f0:	0000d983 	.word	0x0000d983
    d9f4:	0000da09 	.word	0x0000da09
    d9f8:	0000d983 	.word	0x0000d983
    d9fc:	0000da43 	.word	0x0000da43
			switch (*fmt) {
    da00:	2839      	cmp	r0, #57	; 0x39
    da02:	d915      	bls.n	da30 <z_vprintk+0x104>
    da04:	2858      	cmp	r0, #88	; 0x58
    da06:	d1bc      	bne.n	d982 <z_vprintk+0x56>
				if (*fmt == 'p') {
    da08:	f89a 3000 	ldrb.w	r3, [sl]
    da0c:	2b70      	cmp	r3, #112	; 0x70
    da0e:	d16e      	bne.n	daee <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
    da10:	2300      	movs	r3, #0
    da12:	f854 2b04 	ldr.w	r2, [r4], #4
    da16:	e075      	b.n	db04 <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
    da18:	f1b8 0f00 	cmp.w	r8, #0
    da1c:	da0b      	bge.n	da36 <z_vprintk+0x10a>
    da1e:	2f00      	cmp	r7, #0
    da20:	f000 80ac 	beq.w	db7c <z_vprintk+0x250>
					min_width = *fmt - '0';
    da24:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    da28:	2f00      	cmp	r7, #0
    da2a:	bf08      	it	eq
    da2c:	2702      	moveq	r7, #2
    da2e:	e794      	b.n	d95a <z_vprintk+0x2e>
				if (min_width < 0) {
    da30:	f1b8 0f00 	cmp.w	r8, #0
    da34:	dbf6      	blt.n	da24 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    da36:	230a      	movs	r3, #10
    da38:	fb03 0808 	mla	r8, r3, r8, r0
    da3c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    da40:	e7f2      	b.n	da28 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
    da42:	2868      	cmp	r0, #104	; 0x68
    da44:	d103      	bne.n	da4e <z_vprintk+0x122>
    da46:	2e68      	cmp	r6, #104	; 0x68
    da48:	d106      	bne.n	da58 <z_vprintk+0x12c>
					length_mod = 'H';
    da4a:	2648      	movs	r6, #72	; 0x48
    da4c:	e785      	b.n	d95a <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
    da4e:	286c      	cmp	r0, #108	; 0x6c
    da50:	d102      	bne.n	da58 <z_vprintk+0x12c>
    da52:	2e6c      	cmp	r6, #108	; 0x6c
    da54:	f000 8094 	beq.w	db80 <z_vprintk+0x254>
				} else if (length_mod == 0) {
    da58:	2e00      	cmp	r6, #0
    da5a:	d192      	bne.n	d982 <z_vprintk+0x56>
    da5c:	4606      	mov	r6, r0
    da5e:	e77c      	b.n	d95a <z_vprintk+0x2e>
				if (length_mod == 'z') {
    da60:	2e7a      	cmp	r6, #122	; 0x7a
    da62:	d106      	bne.n	da72 <z_vprintk+0x146>
					d = va_arg(ap, long);
    da64:	46a1      	mov	r9, r4
    da66:	f859 2b04 	ldr.w	r2, [r9], #4
    da6a:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    da6c:	2875      	cmp	r0, #117	; 0x75
    da6e:	d123      	bne.n	dab8 <z_vprintk+0x18c>
    da70:	e00f      	b.n	da92 <z_vprintk+0x166>
				} else if (length_mod == 'l') {
    da72:	2e6c      	cmp	r6, #108	; 0x6c
    da74:	d0f6      	beq.n	da64 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
    da76:	2e4c      	cmp	r6, #76	; 0x4c
    da78:	d105      	bne.n	da86 <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
    da7a:	3407      	adds	r4, #7
    da7c:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
    da80:	e8f9 2302 	ldrd	r2, r3, [r9], #8
    da84:	e7f2      	b.n	da6c <z_vprintk+0x140>
				} else if (*fmt == 'u') {
    da86:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
    da88:	6822      	ldr	r2, [r4, #0]
    da8a:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
    da8e:	d112      	bne.n	dab6 <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
    da90:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    da92:	1ef8      	subs	r0, r7, #3
    da94:	bf18      	it	ne
    da96:	2001      	movne	r0, #1
    da98:	2f01      	cmp	r7, #1
    da9a:	bf0c      	ite	eq
    da9c:	2430      	moveq	r4, #48	; 0x30
    da9e:	2420      	movne	r4, #32
    daa0:	9001      	str	r0, [sp, #4]
    daa2:	200a      	movs	r0, #10
    daa4:	e9cd 4802 	strd	r4, r8, [sp, #8]
    daa8:	9000      	str	r0, [sp, #0]
    daaa:	4659      	mov	r1, fp
    daac:	4628      	mov	r0, r5
    daae:	f7ff fee1 	bl	d874 <print_digits>
}
    dab2:	464c      	mov	r4, r9
    dab4:	e746      	b.n	d944 <z_vprintk+0x18>
					d = va_arg(ap, int);
    dab6:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    dab8:	2a00      	cmp	r2, #0
    daba:	f173 0100 	sbcs.w	r1, r3, #0
    dabe:	dae8      	bge.n	da92 <z_vprintk+0x166>
					out((int)'-', ctx);
    dac0:	4659      	mov	r1, fp
    dac2:	202d      	movs	r0, #45	; 0x2d
    dac4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    dac8:	47a8      	blx	r5
					d = -d;
    daca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    dace:	4252      	negs	r2, r2
    dad0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    dad4:	f108 38ff 	add.w	r8, r8, #4294967295
    dad8:	e7db      	b.n	da92 <z_vprintk+0x166>
				out('0', ctx);
    dada:	4659      	mov	r1, fp
    dadc:	2030      	movs	r0, #48	; 0x30
    dade:	47a8      	blx	r5
				out('x', ctx);
    dae0:	4659      	mov	r1, fp
    dae2:	2078      	movs	r0, #120	; 0x78
    dae4:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
    dae6:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
    daea:	2701      	movs	r7, #1
    daec:	e78c      	b.n	da08 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    daee:	2e6c      	cmp	r6, #108	; 0x6c
    daf0:	d08e      	beq.n	da10 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
    daf2:	2e4c      	cmp	r6, #76	; 0x4c
    daf4:	d18c      	bne.n	da10 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
    daf6:	1de3      	adds	r3, r4, #7
    daf8:	f023 0307 	bic.w	r3, r3, #7
    dafc:	461c      	mov	r4, r3
    dafe:	685b      	ldr	r3, [r3, #4]
    db00:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    db04:	1ef8      	subs	r0, r7, #3
    db06:	bf18      	it	ne
    db08:	2001      	movne	r0, #1
    db0a:	2f01      	cmp	r7, #1
    db0c:	bf0c      	ite	eq
    db0e:	2130      	moveq	r1, #48	; 0x30
    db10:	2120      	movne	r1, #32
    db12:	e9cd 1802 	strd	r1, r8, [sp, #8]
    db16:	2110      	movs	r1, #16
    db18:	9001      	str	r0, [sp, #4]
    db1a:	9100      	str	r1, [sp, #0]
    db1c:	4628      	mov	r0, r5
    db1e:	4659      	mov	r1, fp
    db20:	f7ff fea8 	bl	d874 <print_digits>
    db24:	e70e      	b.n	d944 <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
    db26:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
    db2a:	4699      	mov	r9, r3
    db2c:	464a      	mov	r2, r9
    db2e:	f819 0b01 	ldrb.w	r0, [r9], #1
    db32:	b978      	cbnz	r0, db54 <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
    db34:	2f03      	cmp	r7, #3
    db36:	d125      	bne.n	db84 <z_vprintk+0x258>
					int remaining = min_width - (s - start);
    db38:	eba2 0903 	sub.w	r9, r2, r3
    db3c:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
    db40:	f1b9 0f00 	cmp.w	r9, #0
    db44:	f77f aefe 	ble.w	d944 <z_vprintk+0x18>
						out(' ', ctx);
    db48:	4659      	mov	r1, fp
    db4a:	2020      	movs	r0, #32
    db4c:	47a8      	blx	r5
    db4e:	f109 39ff 	add.w	r9, r9, #4294967295
    db52:	e7f5      	b.n	db40 <z_vprintk+0x214>
					out((int)(*s++), ctx);
    db54:	4659      	mov	r1, fp
    db56:	9304      	str	r3, [sp, #16]
    db58:	47a8      	blx	r5
    db5a:	9b04      	ldr	r3, [sp, #16]
    db5c:	e7e6      	b.n	db2c <z_vprintk+0x200>
				out(c, ctx);
    db5e:	4659      	mov	r1, fp
    db60:	f854 0b04 	ldr.w	r0, [r4], #4
    db64:	e713      	b.n	d98e <z_vprintk+0x62>
				out((int)'%', ctx);
    db66:	4659      	mov	r1, fp
    db68:	e711      	b.n	d98e <z_vprintk+0x62>
				length_mod = 0;
    db6a:	464e      	mov	r6, r9
				padding = PAD_NONE;
    db6c:	464f      	mov	r7, r9
				min_width = -1;
    db6e:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
    db72:	f04f 0901 	mov.w	r9, #1
    db76:	e6f0      	b.n	d95a <z_vprintk+0x2e>
			switch (*fmt) {
    db78:	2703      	movs	r7, #3
    db7a:	e6ee      	b.n	d95a <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
    db7c:	2701      	movs	r7, #1
    db7e:	e6ec      	b.n	d95a <z_vprintk+0x2e>
					length_mod = 'L';
    db80:	264c      	movs	r6, #76	; 0x4c
    db82:	e6ea      	b.n	d95a <z_vprintk+0x2e>
			might_format = 0;
    db84:	4681      	mov	r9, r0
    db86:	e6e8      	b.n	d95a <z_vprintk+0x2e>

0000db88 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    db88:	b507      	push	{r0, r1, r2, lr}
    db8a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    db8c:	2100      	movs	r1, #0
{
    db8e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    db90:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    db92:	4803      	ldr	r0, [pc, #12]	; (dba0 <vprintk+0x18>)
    db94:	a901      	add	r1, sp, #4
    db96:	f7ff fec9 	bl	d92c <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    db9a:	b003      	add	sp, #12
    db9c:	f85d fb04 	ldr.w	pc, [sp], #4
    dba0:	0000d911 	.word	0x0000d911

0000dba4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    dba4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    dba6:	2500      	movs	r5, #0
{
    dba8:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    dbaa:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    dbae:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    dbb0:	a901      	add	r1, sp, #4
    dbb2:	4805      	ldr	r0, [pc, #20]	; (dbc8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    dbb4:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    dbb6:	f7ff feb9 	bl	d92c <z_vprintk>

	if (ctx.count < ctx.max) {
    dbba:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    dbbe:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    dbc0:	bfb8      	it	lt
    dbc2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    dbc4:	b005      	add	sp, #20
    dbc6:	bd30      	pop	{r4, r5, pc}
    dbc8:	0001d4fb 	.word	0x0001d4fb

0000dbcc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    dbcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dbd0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    dbd4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    dbd6:	f019 0808 	ands.w	r8, r9, #8
{
    dbda:	4693      	mov	fp, r2
	if (processing) {
    dbdc:	d00e      	beq.n	dbfc <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    dbde:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    dbe0:	bf0c      	ite	eq
    dbe2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    dbe6:	f049 0920 	orrne.w	r9, r9, #32
    dbea:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    dbee:	f38b 8811 	msr	BASEPRI, fp
    dbf2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    dbf6:	b003      	add	sp, #12
    dbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    dbfc:	f8df a198 	ldr.w	sl, [pc, #408]	; dd98 <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dc00:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    dc04:	2902      	cmp	r1, #2
    dc06:	d107      	bne.n	dc18 <process_event+0x4c>
			evt = process_recheck(mgr);
    dc08:	4620      	mov	r0, r4
    dc0a:	f00f fca3 	bl	1d554 <process_recheck>
		if (evt == EVT_NOP) {
    dc0e:	2800      	cmp	r0, #0
    dc10:	d0ed      	beq.n	dbee <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    dc12:	2801      	cmp	r0, #1
    dc14:	8b23      	ldrh	r3, [r4, #24]
    dc16:	d14d      	bne.n	dcb4 <process_event+0xe8>
			res = mgr->last_res;
    dc18:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dc1a:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    dc1c:	2f00      	cmp	r7, #0
    dc1e:	da15      	bge.n	dc4c <process_event+0x80>
		*clients = mgr->clients;
    dc20:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dc22:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    dc26:	e9c4 8800 	strd	r8, r8, [r4]
    dc2a:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    dc2e:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    dc30:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    dc32:	8b21      	ldrh	r1, [r4, #24]
    dc34:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    dc38:	454a      	cmp	r2, r9
    dc3a:	d002      	beq.n	dc42 <process_event+0x76>
		if (do_monitors
    dc3c:	68a3      	ldr	r3, [r4, #8]
    dc3e:	2b00      	cmp	r3, #0
    dc40:	d159      	bne.n	dcf6 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    dc42:	b90d      	cbnz	r5, dc48 <process_event+0x7c>
		    || (transit != NULL)) {
    dc44:	2e00      	cmp	r6, #0
    dc46:	d071      	beq.n	dd2c <process_event+0x160>
    dc48:	2300      	movs	r3, #0
    dc4a:	e055      	b.n	dcf8 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    dc4c:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    dc50:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    dc52:	2a01      	cmp	r2, #1
    dc54:	d81f      	bhi.n	dc96 <process_event+0xca>
		*clients = mgr->clients;
    dc56:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    dc5a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    dc5c:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    dc5e:	b289      	uxth	r1, r1
	list->tail = NULL;
    dc60:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    dc64:	d10c      	bne.n	dc80 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    dc66:	2d00      	cmp	r5, #0
    dc68:	462b      	mov	r3, r5
    dc6a:	bf38      	it	cc
    dc6c:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    dc6e:	b12b      	cbz	r3, dc7c <process_event+0xb0>
				mgr->refs += 1U;
    dc70:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    dc72:	681b      	ldr	r3, [r3, #0]
    dc74:	3201      	adds	r2, #1
    dc76:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    dc78:	2b00      	cmp	r3, #0
    dc7a:	d1f8      	bne.n	dc6e <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dc7c:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    dc80:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    dc82:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    dc84:	f00f fc66 	bl	1d554 <process_recheck>
    dc88:	2800      	cmp	r0, #0
    dc8a:	d0d1      	beq.n	dc30 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dc8c:	8b23      	ldrh	r3, [r4, #24]
    dc8e:	f043 0320 	orr.w	r3, r3, #32
    dc92:	8323      	strh	r3, [r4, #24]
    dc94:	e7cc      	b.n	dc30 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    dc96:	2b04      	cmp	r3, #4
    dc98:	d10a      	bne.n	dcb0 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dc9a:	f021 0107 	bic.w	r1, r1, #7
    dc9e:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    dca0:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    dca2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    dca4:	f00f fc56 	bl	1d554 <process_recheck>
    dca8:	b110      	cbz	r0, dcb0 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    dcaa:	f041 0120 	orr.w	r1, r1, #32
    dcae:	8321      	strh	r1, [r4, #24]
    dcb0:	2500      	movs	r5, #0
    dcb2:	e7bd      	b.n	dc30 <process_event+0x64>
		} else if (evt == EVT_START) {
    dcb4:	2803      	cmp	r0, #3
    dcb6:	d109      	bne.n	dccc <process_event+0x100>
			transit = mgr->transitions->start;
    dcb8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dcba:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    dcbe:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dcc0:	f043 0306 	orr.w	r3, r3, #6
}
    dcc4:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    dcc6:	8323      	strh	r3, [r4, #24]
		res = 0;
    dcc8:	462f      	mov	r7, r5
    dcca:	e7b2      	b.n	dc32 <process_event+0x66>
		} else if (evt == EVT_STOP) {
    dccc:	2804      	cmp	r0, #4
    dcce:	d106      	bne.n	dcde <process_event+0x112>
			transit = mgr->transitions->stop;
    dcd0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dcd2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    dcd6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dcd8:	f043 0304 	orr.w	r3, r3, #4
    dcdc:	e7f2      	b.n	dcc4 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    dcde:	2805      	cmp	r0, #5
    dce0:	d106      	bne.n	dcf0 <process_event+0x124>
			transit = mgr->transitions->reset;
    dce2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dce4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    dce8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    dcea:	f043 0305 	orr.w	r3, r3, #5
    dcee:	e7e9      	b.n	dcc4 <process_event+0xf8>
    dcf0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    dcf2:	462e      	mov	r6, r5
    dcf4:	e7e8      	b.n	dcc8 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    dcf6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    dcf8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    dcfc:	8321      	strh	r1, [r4, #24]
    dcfe:	f38b 8811 	msr	BASEPRI, fp
    dd02:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    dd06:	bb03      	cbnz	r3, dd4a <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    dd08:	2d00      	cmp	r5, #0
    dd0a:	d134      	bne.n	dd76 <process_event+0x1aa>
			if (transit != NULL) {
    dd0c:	b116      	cbz	r6, dd14 <process_event+0x148>
				transit(mgr, transition_complete);
    dd0e:	4651      	mov	r1, sl
    dd10:	4620      	mov	r0, r4
    dd12:	47b0      	blx	r6
	__asm__ volatile(
    dd14:	f04f 0320 	mov.w	r3, #32
    dd18:	f3ef 8b11 	mrs	fp, BASEPRI
    dd1c:	f383 8811 	msr	BASEPRI, r3
    dd20:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    dd24:	8b23      	ldrh	r3, [r4, #24]
    dd26:	f023 0308 	bic.w	r3, r3, #8
    dd2a:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    dd2c:	8b23      	ldrh	r3, [r4, #24]
    dd2e:	06da      	lsls	r2, r3, #27
    dd30:	d52a      	bpl.n	dd88 <process_event+0x1bc>
			evt = EVT_COMPLETE;
    dd32:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    dd34:	f023 0310 	bic.w	r3, r3, #16
    dd38:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    dd3a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    dd3e:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    dd42:	2900      	cmp	r1, #0
    dd44:	f47f af5e 	bne.w	dc04 <process_event+0x38>
out:
    dd48:	e751      	b.n	dbee <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    dd4a:	68a1      	ldr	r1, [r4, #8]
    dd4c:	2900      	cmp	r1, #0
    dd4e:	d0db      	beq.n	dd08 <process_event+0x13c>
	return node->next;
    dd50:	680b      	ldr	r3, [r1, #0]
    dd52:	2b00      	cmp	r3, #0
    dd54:	bf38      	it	cc
    dd56:	2300      	movcc	r3, #0
    dd58:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    dd5a:	4620      	mov	r0, r4
    dd5c:	463b      	mov	r3, r7
    dd5e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    dd62:	9201      	str	r2, [sp, #4]
    dd64:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    dd66:	9a01      	ldr	r2, [sp, #4]
    dd68:	f1b9 0f00 	cmp.w	r9, #0
    dd6c:	d0cc      	beq.n	dd08 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    dd6e:	4649      	mov	r1, r9
    dd70:	f8d9 3000 	ldr.w	r3, [r9]
    dd74:	e7ed      	b.n	dd52 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    dd76:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    dd78:	463b      	mov	r3, r7
    dd7a:	4620      	mov	r0, r4
    dd7c:	9201      	str	r2, [sp, #4]
    dd7e:	682d      	ldr	r5, [r5, #0]
    dd80:	f00f fc04 	bl	1d58c <notify_one>
	while (!sys_slist_is_empty(list)) {
    dd84:	9a01      	ldr	r2, [sp, #4]
    dd86:	e7bf      	b.n	dd08 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    dd88:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    dd8c:	bf1e      	ittt	ne
    dd8e:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    dd92:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    dd94:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    dd96:	e7d0      	b.n	dd3a <process_event+0x16e>
    dd98:	0001d5b9 	.word	0x0001d5b9

0000dd9c <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    dd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dda0:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    dda2:	2300      	movs	r3, #0
{
    dda4:	4689      	mov	r9, r1
    dda6:	b0a1      	sub	sp, #132	; 0x84
    dda8:	9003      	str	r0, [sp, #12]
	count = 0;
    ddaa:	9302      	str	r3, [sp, #8]

	while ((c = *format++)) {
    ddac:	4613      	mov	r3, r2
    ddae:	f813 0b01 	ldrb.w	r0, [r3], #1
    ddb2:	9306      	str	r3, [sp, #24]
    ddb4:	b158      	cbz	r0, ddce <z_prf+0x32>
		if (c != '%') {
    ddb6:	2825      	cmp	r0, #37	; 0x25
    ddb8:	f000 8081 	beq.w	debe <z_prf+0x122>
			PUTC(c);
    ddbc:	4649      	mov	r1, r9
    ddbe:	9b03      	ldr	r3, [sp, #12]
    ddc0:	4798      	blx	r3
    ddc2:	3001      	adds	r0, #1
    ddc4:	f040 844b 	bne.w	e65e <z_prf+0x8c2>
    ddc8:	f04f 33ff 	mov.w	r3, #4294967295
    ddcc:	9302      	str	r3, [sp, #8]
		}
	}
	return count;

#undef PUTC
}
    ddce:	9802      	ldr	r0, [sp, #8]
    ddd0:	b021      	add	sp, #132	; 0x84
    ddd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    ddd6:	2d2b      	cmp	r5, #43	; 0x2b
    ddd8:	d065      	beq.n	dea6 <z_prf+0x10a>
    ddda:	d85c      	bhi.n	de96 <z_prf+0xfa>
    dddc:	2d20      	cmp	r5, #32
    ddde:	d065      	beq.n	deac <z_prf+0x110>
    dde0:	2d23      	cmp	r5, #35	; 0x23
    dde2:	d066      	beq.n	deb2 <z_prf+0x116>
    dde4:	2d00      	cmp	r5, #0
    dde6:	d0f2      	beq.n	ddce <z_prf+0x32>
					fzero = true;
    dde8:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    ddec:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ddf0:	48a4      	ldr	r0, [pc, #656]	; (e084 <z_prf+0x2e8>)
    ddf2:	f818 5b01 	ldrb.w	r5, [r8], #1
    ddf6:	4629      	mov	r1, r5
    ddf8:	f010 fd0d 	bl	1e816 <strchr>
    ddfc:	2800      	cmp	r0, #0
    ddfe:	d1ea      	bne.n	ddd6 <z_prf+0x3a>
			if (c == '*') {
    de00:	2d2a      	cmp	r5, #42	; 0x2a
    de02:	d163      	bne.n	decc <z_prf+0x130>
				width = va_arg(vargs, int);
    de04:	f856 3b04 	ldr.w	r3, [r6], #4
				c = *format++;
    de08:	f898 5000 	ldrb.w	r5, [r8]
				if (width < 0) {
    de0c:	2b00      	cmp	r3, #0
				width = va_arg(vargs, int);
    de0e:	9307      	str	r3, [sp, #28]
					width = -width;
    de10:	bfbf      	itttt	lt
    de12:	425b      	neglt	r3, r3
    de14:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    de16:	2301      	movlt	r3, #1
    de18:	930d      	strlt	r3, [sp, #52]	; 0x34
				c = *format++;
    de1a:	9b06      	ldr	r3, [sp, #24]
    de1c:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    de20:	2d2e      	cmp	r5, #46	; 0x2e
    de22:	d178      	bne.n	df16 <z_prf+0x17a>
				if (c == '*') {
    de24:	f898 3000 	ldrb.w	r3, [r8]
    de28:	2b2a      	cmp	r3, #42	; 0x2a
    de2a:	d171      	bne.n	df10 <z_prf+0x174>
					precision = va_arg(vargs, int);
    de2c:	f856 4b04 	ldr.w	r4, [r6], #4
				c = *format++;
    de30:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    de34:	f818 5b01 	ldrb.w	r5, [r8], #1
			if (strchr("hlz", c) != NULL) {
    de38:	4629      	mov	r1, r5
    de3a:	4893      	ldr	r0, [pc, #588]	; (e088 <z_prf+0x2ec>)
    de3c:	462f      	mov	r7, r5
    de3e:	f010 fcea 	bl	1e816 <strchr>
    de42:	2800      	cmp	r0, #0
    de44:	d06a      	beq.n	df1c <z_prf+0x180>
				c = *format++;
    de46:	4643      	mov	r3, r8
    de48:	f813 5b01 	ldrb.w	r5, [r3], #1
				} else if (i == 'h' && c == 'h') {
    de4c:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    de4e:	9306      	str	r3, [sp, #24]
				} else if (i == 'h' && c == 'h') {
    de50:	d107      	bne.n	de62 <z_prf+0xc6>
    de52:	2d68      	cmp	r5, #104	; 0x68
    de54:	d105      	bne.n	de62 <z_prf+0xc6>
					i = 'H';
    de56:	2748      	movs	r7, #72	; 0x48
					c = *format++;
    de58:	f108 0302 	add.w	r3, r8, #2
    de5c:	f898 5001 	ldrb.w	r5, [r8, #1]
    de60:	9306      	str	r3, [sp, #24]
			switch (c) {
    de62:	2d78      	cmp	r5, #120	; 0x78
    de64:	d808      	bhi.n	de78 <z_prf+0xdc>
    de66:	2d57      	cmp	r5, #87	; 0x57
    de68:	d85c      	bhi.n	df24 <z_prf+0x188>
    de6a:	2d25      	cmp	r5, #37	; 0x25
    de6c:	f000 83f3 	beq.w	e656 <z_prf+0x8ba>
    de70:	f200 80a2 	bhi.w	dfb8 <z_prf+0x21c>
    de74:	2d00      	cmp	r5, #0
    de76:	d0aa      	beq.n	ddce <z_prf+0x32>
				PUTC('%');
    de78:	4649      	mov	r1, r9
    de7a:	2025      	movs	r0, #37	; 0x25
    de7c:	9b03      	ldr	r3, [sp, #12]
    de7e:	4798      	blx	r3
    de80:	3001      	adds	r0, #1
    de82:	d0a1      	beq.n	ddc8 <z_prf+0x2c>
				PUTC(c);
    de84:	4649      	mov	r1, r9
    de86:	4628      	mov	r0, r5
    de88:	9b03      	ldr	r3, [sp, #12]
    de8a:	4798      	blx	r3
    de8c:	3001      	adds	r0, #1
    de8e:	d09b      	beq.n	ddc8 <z_prf+0x2c>
				count += 2;
    de90:	9b02      	ldr	r3, [sp, #8]
    de92:	3302      	adds	r3, #2
    de94:	e3e5      	b.n	e662 <z_prf+0x8c6>
				switch (c) {
    de96:	2d2d      	cmp	r5, #45	; 0x2d
    de98:	d00e      	beq.n	deb8 <z_prf+0x11c>
					fzero = true;
    de9a:	2d30      	cmp	r5, #48	; 0x30
    de9c:	9b08      	ldr	r3, [sp, #32]
    de9e:	bf08      	it	eq
    dea0:	2301      	moveq	r3, #1
    dea2:	9308      	str	r3, [sp, #32]
    dea4:	e7a0      	b.n	dde8 <z_prf+0x4c>
					fplus = true;
    dea6:	2301      	movs	r3, #1
    dea8:	9309      	str	r3, [sp, #36]	; 0x24
    deaa:	e79d      	b.n	dde8 <z_prf+0x4c>
					fspace = true;
    deac:	2301      	movs	r3, #1
    deae:	930c      	str	r3, [sp, #48]	; 0x30
    deb0:	e79a      	b.n	dde8 <z_prf+0x4c>
					falt = true;
    deb2:	f04f 0a01 	mov.w	sl, #1
    deb6:	e797      	b.n	dde8 <z_prf+0x4c>
				switch (c) {
    deb8:	2301      	movs	r3, #1
    deba:	930d      	str	r3, [sp, #52]	; 0x34
    debc:	e794      	b.n	dde8 <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
    debe:	2300      	movs	r3, #0
    dec0:	469a      	mov	sl, r3
    dec2:	9308      	str	r3, [sp, #32]
    dec4:	930c      	str	r3, [sp, #48]	; 0x30
    dec6:	9309      	str	r3, [sp, #36]	; 0x24
    dec8:	930d      	str	r3, [sp, #52]	; 0x34
    deca:	e78f      	b.n	ddec <z_prf+0x50>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    decc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
			} else if (!isdigit((int)c)) {
    ded0:	2b09      	cmp	r3, #9
				width = 0;
    ded2:	9007      	str	r0, [sp, #28]
			} else if (!isdigit((int)c)) {
    ded4:	d8a4      	bhi.n	de20 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    ded6:	220a      	movs	r2, #10
	while (isdigit((int)*p)) {
    ded8:	f8dd 8018 	ldr.w	r8, [sp, #24]
    dedc:	f818 5b01 	ldrb.w	r5, [r8], #1
    dee0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    dee4:	2b09      	cmp	r3, #9
    dee6:	d89b      	bhi.n	de20 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    dee8:	9b07      	ldr	r3, [sp, #28]
    deea:	fb02 5503 	mla	r5, r2, r3, r5
    deee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    def2:	e9cd 8306 	strd	r8, r3, [sp, #24]
    def6:	e7ef      	b.n	ded8 <z_prf+0x13c>
    def8:	4690      	mov	r8, r2
    defa:	fb01 3404 	mla	r4, r1, r4, r3
    defe:	3c30      	subs	r4, #48	; 0x30
	while (isdigit((int)*p)) {
    df00:	4642      	mov	r2, r8
    df02:	f812 3b01 	ldrb.w	r3, [r2], #1
    df06:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    df0a:	2809      	cmp	r0, #9
    df0c:	d9f4      	bls.n	def8 <z_prf+0x15c>
    df0e:	e791      	b.n	de34 <z_prf+0x98>
	int i = 0;
    df10:	2400      	movs	r4, #0
		i = 10 * i + *p++ - '0';
    df12:	210a      	movs	r1, #10
    df14:	e7f4      	b.n	df00 <z_prf+0x164>
			precision = -1;
    df16:	f04f 34ff 	mov.w	r4, #4294967295
    df1a:	e78d      	b.n	de38 <z_prf+0x9c>
			i = 0;
    df1c:	4607      	mov	r7, r0
    df1e:	f8cd 8018 	str.w	r8, [sp, #24]
    df22:	e79e      	b.n	de62 <z_prf+0xc6>
    df24:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    df28:	2b20      	cmp	r3, #32
    df2a:	d8a5      	bhi.n	de78 <z_prf+0xdc>
    df2c:	a201      	add	r2, pc, #4	; (adr r2, df34 <z_prf+0x198>)
    df2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    df32:	bf00      	nop
    df34:	0000e5bb 	.word	0x0000e5bb
    df38:	0000de79 	.word	0x0000de79
    df3c:	0000de79 	.word	0x0000de79
    df40:	0000de79 	.word	0x0000de79
    df44:	0000de79 	.word	0x0000de79
    df48:	0000de79 	.word	0x0000de79
    df4c:	0000de79 	.word	0x0000de79
    df50:	0000de79 	.word	0x0000de79
    df54:	0000de79 	.word	0x0000de79
    df58:	0000de79 	.word	0x0000de79
    df5c:	0000de79 	.word	0x0000de79
    df60:	0000e08d 	.word	0x0000e08d
    df64:	0000e163 	.word	0x0000e163
    df68:	0000dfc5 	.word	0x0000dfc5
    df6c:	0000dfc5 	.word	0x0000dfc5
    df70:	0000dfc5 	.word	0x0000dfc5
    df74:	0000de79 	.word	0x0000de79
    df78:	0000e163 	.word	0x0000e163
    df7c:	0000de79 	.word	0x0000de79
    df80:	0000de79 	.word	0x0000de79
    df84:	0000de79 	.word	0x0000de79
    df88:	0000de79 	.word	0x0000de79
    df8c:	0000e547 	.word	0x0000e547
    df90:	0000e5bb 	.word	0x0000e5bb
    df94:	0000e571 	.word	0x0000e571
    df98:	0000de79 	.word	0x0000de79
    df9c:	0000de79 	.word	0x0000de79
    dfa0:	0000e593 	.word	0x0000e593
    dfa4:	0000de79 	.word	0x0000de79
    dfa8:	0000e5bb 	.word	0x0000e5bb
    dfac:	0000de79 	.word	0x0000de79
    dfb0:	0000de79 	.word	0x0000de79
    dfb4:	0000e5bb 	.word	0x0000e5bb
			switch (c) {
    dfb8:	f1a5 0345 	sub.w	r3, r5, #69	; 0x45
    dfbc:	b2db      	uxtb	r3, r3
    dfbe:	2b02      	cmp	r3, #2
    dfc0:	f63f af5a 	bhi.w	de78 <z_prf+0xdc>
				u.d = va_arg(vargs, double);
    dfc4:	3607      	adds	r6, #7
    dfc6:	f026 0307 	bic.w	r3, r6, #7
    dfca:	4619      	mov	r1, r3
    dfcc:	e8f1 2302 	ldrd	r2, r3, [r1], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    dfd0:	02d8      	lsls	r0, r3, #11
    dfd2:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    dfd6:	02d6      	lsls	r6, r2, #11
    dfd8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
	if (sign) {
    dfdc:	2a00      	cmp	r2, #0
				u.d = va_arg(vargs, double);
    dfde:	9101      	str	r1, [sp, #4]
	fract = (double_temp << 11) & ~HIGHBIT64;
    dfe0:	9604      	str	r6, [sp, #16]
	exp = double_temp >> 52 & 0x7ff;
    dfe2:	f3c3 510a 	ubfx	r1, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    dfe6:	9005      	str	r0, [sp, #20]
	if (sign) {
    dfe8:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    dfec:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    dff0:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
	if (sign) {
    dff4:	f280 80e5 	bge.w	e1c2 <z_prf+0x426>
		*buf++ = '-';
    dff8:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    dffa:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    dffe:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	if (exp == 0x7ff) {
    e002:	f240 73ff 	movw	r3, #2047	; 0x7ff
    e006:	4299      	cmp	r1, r3
    e008:	f040 80f6 	bne.w	e1f8 <z_prf+0x45c>
		if (!fract) {
    e00c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    e010:	430a      	orrs	r2, r1
    e012:	f1a5 0541 	sub.w	r5, r5, #65	; 0x41
    e016:	f107 0303 	add.w	r3, r7, #3
    e01a:	f040 80e2 	bne.w	e1e2 <z_prf+0x446>
			if (isupper((int)c)) {
    e01e:	2d19      	cmp	r5, #25
    e020:	f200 80d9 	bhi.w	e1d6 <z_prf+0x43a>
				*buf++ = 'I';
    e024:	2249      	movs	r2, #73	; 0x49
    e026:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    e028:	224e      	movs	r2, #78	; 0x4e
    e02a:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    e02c:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    e02e:	2400      	movs	r4, #0
			zero.predot = zero.postdot = zero.trail = 0;
    e030:	46a2      	mov	sl, r4
    e032:	46a3      	mov	fp, r4
		return buf - start;
    e034:	ae19      	add	r6, sp, #100	; 0x64
				*buf++ = 'n';
    e036:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    e038:	70fc      	strb	r4, [r7, #3]
		return buf - start;
    e03a:	1b9b      	subs	r3, r3, r6
				if (fplus || fspace || (buf[0] == '-')) {
    e03c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e03e:	2a00      	cmp	r2, #0
    e040:	f040 827e 	bne.w	e540 <z_prf+0x7a4>
    e044:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e046:	2a00      	cmp	r2, #0
    e048:	f040 827a 	bne.w	e540 <z_prf+0x7a4>
    e04c:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    e050:	f1a8 022d 	sub.w	r2, r8, #45	; 0x2d
    e054:	f1d2 0800 	rsbs	r8, r2, #0
    e058:	eb48 0802 	adc.w	r8, r8, r2
				clen += zero.predot + zero.postdot + zero.trail;
    e05c:	eb0b 060a 	add.w	r6, fp, sl
    e060:	4433      	add	r3, r6
    e062:	191e      	adds	r6, r3, r4
				if (!isdigit((int)buf[prefix])) {
    e064:	ab20      	add	r3, sp, #128	; 0x80
    e066:	4443      	add	r3, r8
    e068:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    e06c:	3b30      	subs	r3, #48	; 0x30
    e06e:	2b09      	cmp	r3, #9
    e070:	f200 82ff 	bhi.w	e672 <z_prf+0x8d6>
			} else if (fzero) {
    e074:	9b08      	ldr	r3, [sp, #32]
    e076:	2b00      	cmp	r3, #0
    e078:	f000 82fe 	beq.w	e678 <z_prf+0x8dc>
    e07c:	9b07      	ldr	r3, [sp, #28]
    e07e:	af19      	add	r7, sp, #100	; 0x64
    e080:	1b9b      	subs	r3, r3, r6
    e082:	e014      	b.n	e0ae <z_prf+0x312>
    e084:	000218c5 	.word	0x000218c5
    e088:	000218cb 	.word	0x000218cb
				break;
    e08c:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    e090:	4632      	mov	r2, r6
				break;
    e092:	4644      	mov	r4, r8
				clen = 1;
    e094:	2601      	movs	r6, #1
				buf[0] = va_arg(vargs, int);
    e096:	f852 3b04 	ldr.w	r3, [r2], #4
    e09a:	9201      	str	r2, [sp, #4]
    e09c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				break;
    e0a0:	af19      	add	r7, sp, #100	; 0x64
				zero_head = precision - clen + prefix;
    e0a2:	eb04 0308 	add.w	r3, r4, r8
			zero.predot = zero.postdot = zero.trail = 0;
    e0a6:	2400      	movs	r4, #0
    e0a8:	46a2      	mov	sl, r4
    e0aa:	46a3      	mov	fp, r4
				zero_head = precision - clen + prefix;
    e0ac:	1b9b      	subs	r3, r3, r6
			if (zero_head < 0) {
    e0ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			width -= clen + zero_head;
    e0b2:	199a      	adds	r2, r3, r6
    e0b4:	9208      	str	r2, [sp, #32]
    e0b6:	9a07      	ldr	r2, [sp, #28]
    e0b8:	1999      	adds	r1, r3, r6
    e0ba:	1a55      	subs	r5, r2, r1
			if (!fminus && width > 0) {
    e0bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e0be:	b912      	cbnz	r2, e0c6 <z_prf+0x32a>
    e0c0:	2d00      	cmp	r5, #0
    e0c2:	f300 82ee 	bgt.w	e6a2 <z_prf+0x906>
			while (prefix-- > 0) {
    e0c6:	eb07 0208 	add.w	r2, r7, r8
    e0ca:	42ba      	cmp	r2, r7
    e0cc:	f040 82eb 	bne.w	e6a6 <z_prf+0x90a>
			while (zero_head-- > 0) {
    e0d0:	3b01      	subs	r3, #1
    e0d2:	f080 82f6 	bcs.w	e6c2 <z_prf+0x926>
			clen -= prefix;
    e0d6:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    e0da:	f1bb 0f00 	cmp.w	fp, #0
    e0de:	d010      	beq.n	e102 <z_prf+0x366>
				c = *cptr;
    e0e0:	7838      	ldrb	r0, [r7, #0]
				while (isdigit((int)c)) {
    e0e2:	eb07 0806 	add.w	r8, r7, r6
    e0e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e0ea:	2b09      	cmp	r3, #9
    e0ec:	eba8 0607 	sub.w	r6, r8, r7
    e0f0:	f240 82f2 	bls.w	e6d8 <z_prf+0x93c>
    e0f4:	46d8      	mov	r8, fp
				while (zero.predot-- > 0) {
    e0f6:	f1b8 0801 	subs.w	r8, r8, #1
    e0fa:	f080 82f6 	bcs.w	e6ea <z_prf+0x94e>
				clen -= zero.predot;
    e0fe:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.postdot) {
    e102:	f1ba 0f00 	cmp.w	sl, #0
    e106:	d016      	beq.n	e136 <z_prf+0x39a>
    e108:	eb07 0806 	add.w	r8, r7, r6
					c = *cptr++;
    e10c:	f817 bb01 	ldrb.w	fp, [r7], #1
					PUTC(c);
    e110:	4649      	mov	r1, r9
    e112:	4658      	mov	r0, fp
    e114:	9b03      	ldr	r3, [sp, #12]
    e116:	4798      	blx	r3
    e118:	3001      	adds	r0, #1
    e11a:	f43f ae55 	beq.w	ddc8 <z_prf+0x2c>
				} while (c != '.');
    e11e:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
    e122:	eba8 0607 	sub.w	r6, r8, r7
    e126:	d1f1      	bne.n	e10c <z_prf+0x370>
				while (zero.postdot-- > 0) {
    e128:	46d0      	mov	r8, sl
    e12a:	f1b8 0f00 	cmp.w	r8, #0
    e12e:	f300 82e5 	bgt.w	e6fc <z_prf+0x960>
				clen -= zero.postdot;
    e132:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.trail) {
    e136:	b194      	cbz	r4, e15e <z_prf+0x3c2>
				c = *cptr;
    e138:	7838      	ldrb	r0, [r7, #0]
				while (isdigit((int)c) || c == '.') {
    e13a:	eb07 0806 	add.w	r8, r7, r6
    e13e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e142:	2b09      	cmp	r3, #9
    e144:	eba8 0607 	sub.w	r6, r8, r7
    e148:	f240 82e3 	bls.w	e712 <z_prf+0x976>
    e14c:	282e      	cmp	r0, #46	; 0x2e
    e14e:	f000 82e0 	beq.w	e712 <z_prf+0x976>
				while (zero.trail-- > 0) {
    e152:	46a0      	mov	r8, r4
    e154:	f1b8 0f00 	cmp.w	r8, #0
    e158:	f300 82e4 	bgt.w	e724 <z_prf+0x988>
				clen -= zero.trail;
    e15c:	1b36      	subs	r6, r6, r4
    e15e:	443e      	add	r6, r7
    e160:	e2f3      	b.n	e74a <z_prf+0x9ae>
				switch (i) {
    e162:	6835      	ldr	r5, [r6, #0]
	if (value < 0) {
    e164:	1d33      	adds	r3, r6, #4
    e166:	2d00      	cmp	r5, #0
    e168:	9301      	str	r3, [sp, #4]
    e16a:	da1c      	bge.n	e1a6 <z_prf+0x40a>
		*buf++ = '-';
    e16c:	232d      	movs	r3, #45	; 0x2d
		value = -value;
    e16e:	4269      	negs	r1, r5
		*buf++ = '-';
    e170:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		*buf++ = ' ';
    e174:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	return _to_x(buf, value, 10);
    e178:	220a      	movs	r2, #10
    e17a:	4638      	mov	r0, r7
    e17c:	f00f fcf4 	bl	1db68 <_to_x>
				if (fplus || fspace || val < 0) {
    e180:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    e182:	4438      	add	r0, r7
    e184:	ae19      	add	r6, sp, #100	; 0x64
    e186:	1b86      	subs	r6, r0, r6
				if (fplus || fspace || val < 0) {
    e188:	2b00      	cmp	r3, #0
    e18a:	f040 826d 	bne.w	e668 <z_prf+0x8cc>
    e18e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e190:	2b00      	cmp	r3, #0
    e192:	f040 8269 	bne.w	e668 <z_prf+0x8cc>
    e196:	ea4f 78d5 	mov.w	r8, r5, lsr #31
			if (precision >= 0) {
    e19a:	2c00      	cmp	r4, #0
    e19c:	da80      	bge.n	e0a0 <z_prf+0x304>
			zero.predot = zero.postdot = zero.trail = 0;
    e19e:	2400      	movs	r4, #0
    e1a0:	46a2      	mov	sl, r4
    e1a2:	46a3      	mov	fp, r4
    e1a4:	e766      	b.n	e074 <z_prf+0x2d8>
	} else if (fplus) {
    e1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e1a8:	b123      	cbz	r3, e1b4 <z_prf+0x418>
		*buf++ = '+';
    e1aa:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    e1ac:	4629      	mov	r1, r5
    e1ae:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    e1b2:	e7df      	b.n	e174 <z_prf+0x3d8>
	} else if (fspace) {
    e1b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e1b6:	b10b      	cbz	r3, e1bc <z_prf+0x420>
		*buf++ = ' ';
    e1b8:	2320      	movs	r3, #32
    e1ba:	e7f7      	b.n	e1ac <z_prf+0x410>
    e1bc:	4629      	mov	r1, r5
    e1be:	af19      	add	r7, sp, #100	; 0x64
    e1c0:	e7da      	b.n	e178 <z_prf+0x3dc>
	} else if (fplus) {
    e1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e1c4:	b10b      	cbz	r3, e1ca <z_prf+0x42e>
		*buf++ = '+';
    e1c6:	232b      	movs	r3, #43	; 0x2b
    e1c8:	e717      	b.n	dffa <z_prf+0x25e>
	} else if (fspace) {
    e1ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e1cc:	b10b      	cbz	r3, e1d2 <z_prf+0x436>
		*buf++ = ' ';
    e1ce:	2320      	movs	r3, #32
    e1d0:	e713      	b.n	dffa <z_prf+0x25e>
    e1d2:	af19      	add	r7, sp, #100	; 0x64
    e1d4:	e715      	b.n	e002 <z_prf+0x266>
				*buf++ = 'i';
    e1d6:	2269      	movs	r2, #105	; 0x69
    e1d8:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    e1da:	226e      	movs	r2, #110	; 0x6e
    e1dc:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    e1de:	2266      	movs	r2, #102	; 0x66
    e1e0:	e725      	b.n	e02e <z_prf+0x292>
			if (isupper((int)c)) {
    e1e2:	2d19      	cmp	r5, #25
				*buf++ = 'N';
    e1e4:	bf99      	ittee	ls
    e1e6:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    e1e8:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    e1ea:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    e1ec:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    e1ee:	bf94      	ite	ls
    e1f0:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    e1f2:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    e1f4:	7079      	strb	r1, [r7, #1]
    e1f6:	e71a      	b.n	e02e <z_prf+0x292>
	if ((exp | fract) != 0) {
    e1f8:	9b04      	ldr	r3, [sp, #16]
    e1fa:	9805      	ldr	r0, [sp, #20]
    e1fc:	430b      	orrs	r3, r1
    e1fe:	930e      	str	r3, [sp, #56]	; 0x38
    e200:	17cb      	asrs	r3, r1, #31
    e202:	4303      	orrs	r3, r0
		c = 'f';
    e204:	2d46      	cmp	r5, #70	; 0x46
	if ((exp | fract) != 0) {
    e206:	930f      	str	r3, [sp, #60]	; 0x3c
		c = 'f';
    e208:	bf08      	it	eq
    e20a:	2566      	moveq	r5, #102	; 0x66
	if ((exp | fract) != 0) {
    e20c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    e210:	4313      	orrs	r3, r2
    e212:	f000 8107 	beq.w	e424 <z_prf+0x688>
		if (exp == 0) {
    e216:	2900      	cmp	r1, #0
    e218:	f000 809f 	beq.w	e35a <z_prf+0x5be>
		fract |= HIGHBIT64;
    e21c:	2600      	movs	r6, #0
    e21e:	9b15      	ldr	r3, [sp, #84]	; 0x54
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    e220:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    e224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e228:	9315      	str	r3, [sp, #84]	; 0x54
	while (exp <= -3) {
    e22a:	f118 0f02 	cmn.w	r8, #2
    e22e:	f2c0 80a8 	blt.w	e382 <z_prf+0x5e6>
	while (exp > 0) {
    e232:	f1b8 0f00 	cmp.w	r8, #0
    e236:	f300 80d4 	bgt.w	e3e2 <z_prf+0x646>
		_rlrshift(&fract);
    e23a:	a814      	add	r0, sp, #80	; 0x50
		exp++;
    e23c:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    e240:	f00f fcb6 	bl	1dbb0 <_rlrshift>
	while (exp < (0 + 4)) {
    e244:	f1b8 0f04 	cmp.w	r8, #4
    e248:	d1f7      	bne.n	e23a <z_prf+0x49e>
		precision = 6;		/* Default precision if none given */
    e24a:	2c00      	cmp	r4, #0
	if ((c == 'g') || (c == 'G')) {
    e24c:	f005 03df 	and.w	r3, r5, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    e250:	bfb8      	it	lt
    e252:	2406      	movlt	r4, #6
	if ((c == 'g') || (c == 'G')) {
    e254:	2b47      	cmp	r3, #71	; 0x47
    e256:	f040 80ee 	bne.w	e436 <z_prf+0x69a>
		if (decexp < (-4 + 1) || decexp > precision) {
    e25a:	1cf1      	adds	r1, r6, #3
    e25c:	db02      	blt.n	e264 <z_prf+0x4c8>
    e25e:	42b4      	cmp	r4, r6
    e260:	f280 80e3 	bge.w	e42a <z_prf+0x68e>
			c += 'e' - 'g';
    e264:	3d02      	subs	r5, #2
    e266:	b2ed      	uxtb	r5, r5
			if (precision > 0) {
    e268:	2c00      	cmp	r4, #0
    e26a:	f000 80ea 	beq.w	e442 <z_prf+0x6a6>
				precision--;
    e26e:	3c01      	subs	r4, #1
		if (!falt && (precision > 0)) {
    e270:	f1ba 0f00 	cmp.w	sl, #0
    e274:	f040 80e5 	bne.w	e442 <z_prf+0x6a6>
    e278:	2c00      	cmp	r4, #0
    e27a:	bfd4      	ite	le
    e27c:	f04f 0800 	movle.w	r8, #0
    e280:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    e284:	2d66      	cmp	r5, #102	; 0x66
    e286:	f040 80de 	bne.w	e446 <z_prf+0x6aa>
		if (exp < 0) {
    e28a:	eb14 0b06 	adds.w	fp, r4, r6
    e28e:	f04f 0566 	mov.w	r5, #102	; 0x66
    e292:	f100 80db 	bmi.w	e44c <z_prf+0x6b0>
	if (exp > 16) {
    e296:	f1bb 0f10 	cmp.w	fp, #16
    e29a:	bfa8      	it	ge
    e29c:	f04f 0b10 	movge.w	fp, #16
    e2a0:	2310      	movs	r3, #16
	ltemp = 0x0800000000000000;
    e2a2:	2200      	movs	r2, #0
    e2a4:	9313      	str	r3, [sp, #76]	; 0x4c
    e2a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    e2aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
    e2ae:	f1bb 0b01 	subs.w	fp, fp, #1
    e2b2:	f080 80ce 	bcs.w	e452 <z_prf+0x6b6>
	fract += ltemp;
    e2b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e2b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e2ba:	9917      	ldr	r1, [sp, #92]	; 0x5c
    e2bc:	189b      	adds	r3, r3, r2
    e2be:	9a15      	ldr	r2, [sp, #84]	; 0x54
    e2c0:	eb41 0202 	adc.w	r2, r1, r2
    e2c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
    e2c8:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    e2cc:	9310      	str	r3, [sp, #64]	; 0x40
    e2ce:	2300      	movs	r3, #0
    e2d0:	9311      	str	r3, [sp, #68]	; 0x44
    e2d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    e2d6:	4313      	orrs	r3, r2
    e2d8:	d006      	beq.n	e2e8 <z_prf+0x54c>
		_ldiv5(&fract);
    e2da:	a814      	add	r0, sp, #80	; 0x50
    e2dc:	f00f fc79 	bl	1dbd2 <_ldiv5>
		_rlrshift(&fract);
    e2e0:	a814      	add	r0, sp, #80	; 0x50
    e2e2:	f00f fc65 	bl	1dbb0 <_rlrshift>
		decexp++;
    e2e6:	3601      	adds	r6, #1
	if (c == 'f') {
    e2e8:	2d66      	cmp	r5, #102	; 0x66
    e2ea:	f040 80cf 	bne.w	e48c <z_prf+0x6f0>
		if (decexp > 0) {
    e2ee:	2e00      	cmp	r6, #0
    e2f0:	f340 80b6 	ble.w	e460 <z_prf+0x6c4>
			while (decexp > 0 && digit_count > 0) {
    e2f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e2f6:	2b00      	cmp	r3, #0
    e2f8:	dd07      	ble.n	e30a <z_prf+0x56e>
				*buf++ = _get_digit(&fract, &digit_count);
    e2fa:	a913      	add	r1, sp, #76	; 0x4c
    e2fc:	a814      	add	r0, sp, #80	; 0x50
    e2fe:	f00f fc90 	bl	1dc22 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    e302:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    e304:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    e308:	d1f4      	bne.n	e2f4 <z_prf+0x558>
			zp->predot = decexp;
    e30a:	46b3      	mov	fp, r6
    e30c:	463b      	mov	r3, r7
			decexp = 0;
    e30e:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    e310:	f1ba 0f00 	cmp.w	sl, #0
    e314:	d101      	bne.n	e31a <z_prf+0x57e>
    e316:	2c00      	cmp	r4, #0
    e318:	dd15      	ble.n	e346 <z_prf+0x5aa>
			*buf++ = '.';
    e31a:	222e      	movs	r2, #46	; 0x2e
    e31c:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    e320:	2e00      	cmp	r6, #0
    e322:	f000 80ae 	beq.w	e482 <z_prf+0x6e6>
    e326:	2c00      	cmp	r4, #0
    e328:	f340 80ad 	ble.w	e486 <z_prf+0x6ea>
			zp->postdot = -decexp;
    e32c:	f1c6 0a00 	rsb	sl, r6, #0
    e330:	45a2      	cmp	sl, r4
    e332:	bfa8      	it	ge
    e334:	46a2      	movge	sl, r4
			precision -= zp->postdot;
    e336:	eba4 040a 	sub.w	r4, r4, sl
		while (precision > 0 && digit_count > 0) {
    e33a:	2c00      	cmp	r4, #0
    e33c:	dd03      	ble.n	e346 <z_prf+0x5aa>
    e33e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e340:	2a00      	cmp	r2, #0
    e342:	f300 8094 	bgt.w	e46e <z_prf+0x6d2>
	if (prune_zero) {
    e346:	f1b8 0f00 	cmp.w	r8, #0
    e34a:	f040 80b4 	bne.w	e4b6 <z_prf+0x71a>
	*buf = 0;
    e34e:	2200      	movs	r2, #0
	return buf - start;
    e350:	ae19      	add	r6, sp, #100	; 0x64
	*buf = 0;
    e352:	701a      	strb	r2, [r3, #0]
	return buf - start;
    e354:	1b9b      	subs	r3, r3, r6
    e356:	e671      	b.n	e03c <z_prf+0x2a0>
				exp--;
    e358:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    e35a:	9b04      	ldr	r3, [sp, #16]
    e35c:	18db      	adds	r3, r3, r3
    e35e:	9304      	str	r3, [sp, #16]
    e360:	9b05      	ldr	r3, [sp, #20]
    e362:	415b      	adcs	r3, r3
    e364:	9305      	str	r3, [sp, #20]
    e366:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e36a:	2a00      	cmp	r2, #0
    e36c:	f173 0300 	sbcs.w	r3, r3, #0
    e370:	daf2      	bge.n	e358 <z_prf+0x5bc>
    e372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    e376:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    e37a:	e74f      	b.n	e21c <z_prf+0x480>
			_rlrshift(&fract);
    e37c:	a814      	add	r0, sp, #80	; 0x50
    e37e:	f00f fc17 	bl	1dbb0 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    e382:	e9dd 2c14 	ldrd	r2, ip, [sp, #80]	; 0x50
    e386:	2300      	movs	r3, #0
    e388:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    e38c:	930b      	str	r3, [sp, #44]	; 0x2c
    e38e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    e392:	2900      	cmp	r1, #0
    e394:	bf08      	it	eq
    e396:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
    e39a:	f108 0801 	add.w	r8, r8, #1
    e39e:	d2ed      	bcs.n	e37c <z_prf+0x5e0>
		fract *= 5U;
    e3a0:	2005      	movs	r0, #5
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    e3a2:	f04f 0e00 	mov.w	lr, #0
		fract *= 5U;
    e3a6:	fba2 2300 	umull	r2, r3, r2, r0
    e3aa:	fb00 330c 	mla	r3, r0, ip, r3
    e3ae:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
    e3b2:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    e3b4:	2100      	movs	r1, #0
    e3b6:	f04f 0c00 	mov.w	ip, #0
    e3ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    e3be:	458c      	cmp	ip, r1
    e3c0:	bf08      	it	eq
    e3c2:	459b      	cmpeq	fp, r3
    e3c4:	d206      	bcs.n	e3d4 <z_prf+0x638>
    e3c6:	f1be 0f00 	cmp.w	lr, #0
    e3ca:	f43f af2e 	beq.w	e22a <z_prf+0x48e>
    e3ce:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    e3d2:	e72a      	b.n	e22a <z_prf+0x48e>
			fract <<= 1;
    e3d4:	1892      	adds	r2, r2, r2
			exp--;
    e3d6:	f04f 0e01 	mov.w	lr, #1
			fract <<= 1;
    e3da:	415b      	adcs	r3, r3
			exp--;
    e3dc:	f108 38ff 	add.w	r8, r8, #4294967295
    e3e0:	e7e8      	b.n	e3b4 <z_prf+0x618>
		_ldiv5(&fract);
    e3e2:	a814      	add	r0, sp, #80	; 0x50
    e3e4:	f00f fbf5 	bl	1dbd2 <_ldiv5>
		exp--;
    e3e8:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    e3ec:	f04f 0e00 	mov.w	lr, #0
		exp--;
    e3f0:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    e3f4:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    e3f6:	2300      	movs	r3, #0
    e3f8:	f04f 0c00 	mov.w	ip, #0
    e3fc:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    e400:	459c      	cmp	ip, r3
    e402:	bf08      	it	eq
    e404:	4583      	cmpeq	fp, r0
    e406:	d206      	bcs.n	e416 <z_prf+0x67a>
    e408:	f1be 0f00 	cmp.w	lr, #0
    e40c:	f43f af11 	beq.w	e232 <z_prf+0x496>
    e410:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
    e414:	e70d      	b.n	e232 <z_prf+0x496>
			fract <<= 1;
    e416:	1849      	adds	r1, r1, r1
			exp--;
    e418:	f04f 0e01 	mov.w	lr, #1
			fract <<= 1;
    e41c:	4140      	adcs	r0, r0
			exp--;
    e41e:	f108 38ff 	add.w	r8, r8, #4294967295
    e422:	e7e8      	b.n	e3f6 <z_prf+0x65a>
    e424:	2600      	movs	r6, #0
    e426:	46b0      	mov	r8, r6
    e428:	e707      	b.n	e23a <z_prf+0x49e>
			precision -= decexp;
    e42a:	1ba4      	subs	r4, r4, r6
		if (!falt && (precision > 0)) {
    e42c:	f1ba 0f00 	cmp.w	sl, #0
    e430:	d104      	bne.n	e43c <z_prf+0x6a0>
			c = 'f';
    e432:	2566      	movs	r5, #102	; 0x66
    e434:	e720      	b.n	e278 <z_prf+0x4dc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    e436:	f04f 0800 	mov.w	r8, #0
    e43a:	e723      	b.n	e284 <z_prf+0x4e8>
    e43c:	f04f 0800 	mov.w	r8, #0
    e440:	e723      	b.n	e28a <z_prf+0x4ee>
    e442:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    e446:	f104 0b01 	add.w	fp, r4, #1
    e44a:	e724      	b.n	e296 <z_prf+0x4fa>
			exp = 0;
    e44c:	f04f 0b00 	mov.w	fp, #0
    e450:	e726      	b.n	e2a0 <z_prf+0x504>
		_ldiv5(&ltemp);
    e452:	a816      	add	r0, sp, #88	; 0x58
    e454:	f00f fbbd 	bl	1dbd2 <_ldiv5>
		_rlrshift(&ltemp);
    e458:	a816      	add	r0, sp, #88	; 0x58
    e45a:	f00f fba9 	bl	1dbb0 <_rlrshift>
    e45e:	e726      	b.n	e2ae <z_prf+0x512>
			*buf++ = '0';
    e460:	463b      	mov	r3, r7
    e462:	2230      	movs	r2, #48	; 0x30
			zero.predot = zero.postdot = zero.trail = 0;
    e464:	f04f 0b00 	mov.w	fp, #0
			*buf++ = '0';
    e468:	f803 2b01 	strb.w	r2, [r3], #1
    e46c:	e750      	b.n	e310 <z_prf+0x574>
			*buf++ = _get_digit(&fract, &digit_count);
    e46e:	a913      	add	r1, sp, #76	; 0x4c
    e470:	a814      	add	r0, sp, #80	; 0x50
    e472:	930a      	str	r3, [sp, #40]	; 0x28
    e474:	f00f fbd5 	bl	1dc22 <_get_digit>
    e478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    e47a:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    e47c:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    e480:	e75b      	b.n	e33a <z_prf+0x59e>
			zero.predot = zero.postdot = zero.trail = 0;
    e482:	46b2      	mov	sl, r6
    e484:	e759      	b.n	e33a <z_prf+0x59e>
    e486:	f04f 0a00 	mov.w	sl, #0
    e48a:	e75c      	b.n	e346 <z_prf+0x5aa>
		*buf = _get_digit(&fract, &digit_count);
    e48c:	a913      	add	r1, sp, #76	; 0x4c
    e48e:	a814      	add	r0, sp, #80	; 0x50
    e490:	f00f fbc7 	bl	1dc22 <_get_digit>
		if (*buf++ != '0') {
    e494:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    e496:	7038      	strb	r0, [r7, #0]
			decexp--;
    e498:	bf18      	it	ne
    e49a:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (falt || (precision > 0)) {
    e49e:	f1ba 0f00 	cmp.w	sl, #0
    e4a2:	d138      	bne.n	e516 <z_prf+0x77a>
    e4a4:	2c00      	cmp	r4, #0
    e4a6:	dc36      	bgt.n	e516 <z_prf+0x77a>
		if (*buf++ != '0') {
    e4a8:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    e4aa:	f1b8 0f00 	cmp.w	r8, #0
    e4ae:	d044      	beq.n	e53a <z_prf+0x79e>
			zero.predot = zero.postdot = zero.trail = 0;
    e4b0:	f04f 0b00 	mov.w	fp, #0
    e4b4:	46da      	mov	sl, fp
		while (*--buf == '0')
    e4b6:	4619      	mov	r1, r3
    e4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    e4bc:	2a30      	cmp	r2, #48	; 0x30
    e4be:	d0fa      	beq.n	e4b6 <z_prf+0x71a>
		if (*buf != '.') {
    e4c0:	2a2e      	cmp	r2, #46	; 0x2e
    e4c2:	bf18      	it	ne
    e4c4:	460b      	movne	r3, r1
    e4c6:	2400      	movs	r4, #0
	if ((c == 'e') || (c == 'E')) {
    e4c8:	f005 02df 	and.w	r2, r5, #223	; 0xdf
    e4cc:	2a45      	cmp	r2, #69	; 0x45
    e4ce:	f47f af3e 	bne.w	e34e <z_prf+0x5b2>
		if (decexp < 0) {
    e4d2:	2e00      	cmp	r6, #0
			*buf++ = '-';
    e4d4:	bfb4      	ite	lt
    e4d6:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    e4d8:	222b      	movge	r2, #43	; 0x2b
		*buf++ = c;
    e4da:	4619      	mov	r1, r3
			decexp = -decexp;
    e4dc:	bfb8      	it	lt
    e4de:	4276      	neglt	r6, r6
		if (decexp >= 100) {
    e4e0:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    e4e2:	f801 5b02 	strb.w	r5, [r1], #2
			*buf++ = '-';
    e4e6:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    e4e8:	dd08      	ble.n	e4fc <z_prf+0x760>
			*buf++ = (decexp / 100) + '0';
    e4ea:	2064      	movs	r0, #100	; 0x64
    e4ec:	fb96 f2f0 	sdiv	r2, r6, r0
			decexp %= 100;
    e4f0:	fb00 6612 	mls	r6, r0, r2, r6
			*buf++ = (decexp / 100) + '0';
    e4f4:	f102 0530 	add.w	r5, r2, #48	; 0x30
    e4f8:	1cd9      	adds	r1, r3, #3
    e4fa:	709d      	strb	r5, [r3, #2]
		*buf++ = (decexp / 10) + '0';
    e4fc:	200a      	movs	r0, #10
    e4fe:	fb96 f2f0 	sdiv	r2, r6, r0
    e502:	460b      	mov	r3, r1
		decexp %= 10;
    e504:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    e508:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = decexp + '0';
    e50c:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    e50e:	f803 5b02 	strb.w	r5, [r3], #2
		*buf++ = decexp + '0';
    e512:	704e      	strb	r6, [r1, #1]
    e514:	e71b      	b.n	e34e <z_prf+0x5b2>
			*buf++ = '.';
    e516:	222e      	movs	r2, #46	; 0x2e
    e518:	1cbb      	adds	r3, r7, #2
    e51a:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    e51c:	2c00      	cmp	r4, #0
    e51e:	ddc4      	ble.n	e4aa <z_prf+0x70e>
    e520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e522:	2a00      	cmp	r2, #0
    e524:	ddc1      	ble.n	e4aa <z_prf+0x70e>
			*buf++ = _get_digit(&fract, &digit_count);
    e526:	a913      	add	r1, sp, #76	; 0x4c
    e528:	a814      	add	r0, sp, #80	; 0x50
    e52a:	930a      	str	r3, [sp, #40]	; 0x28
    e52c:	f00f fb79 	bl	1dc22 <_get_digit>
    e530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    e532:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    e534:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    e538:	e7f0      	b.n	e51c <z_prf+0x780>
			zero.predot = zero.postdot = zero.trail = 0;
    e53a:	46c3      	mov	fp, r8
    e53c:	46c2      	mov	sl, r8
    e53e:	e7c3      	b.n	e4c8 <z_prf+0x72c>
					prefix = 1;
    e540:	f04f 0801 	mov.w	r8, #1
    e544:	e58a      	b.n	e05c <z_prf+0x2c0>
				switch (i) {
    e546:	4632      	mov	r2, r6
    e548:	f852 3b04 	ldr.w	r3, [r2], #4
    e54c:	2f68      	cmp	r7, #104	; 0x68
    e54e:	9201      	str	r2, [sp, #4]
    e550:	d006      	beq.n	e560 <z_prf+0x7c4>
    e552:	2f6c      	cmp	r7, #108	; 0x6c
    e554:	d009      	beq.n	e56a <z_prf+0x7ce>
    e556:	2f48      	cmp	r7, #72	; 0x48
    e558:	d107      	bne.n	e56a <z_prf+0x7ce>
					*va_arg(vargs, char *) = count;
    e55a:	9a02      	ldr	r2, [sp, #8]
    e55c:	701a      	strb	r2, [r3, #0]
					break;
    e55e:	e001      	b.n	e564 <z_prf+0x7c8>
					*va_arg(vargs, short *) = count;
    e560:	9a02      	ldr	r2, [sp, #8]
    e562:	801a      	strh	r2, [r3, #0]
				continue;
    e564:	9e01      	ldr	r6, [sp, #4]
    e566:	9a06      	ldr	r2, [sp, #24]
    e568:	e420      	b.n	ddac <z_prf+0x10>
					*va_arg(vargs, int *) = count;
    e56a:	9a02      	ldr	r2, [sp, #8]
    e56c:	601a      	str	r2, [r3, #0]
					break;
    e56e:	e7f9      	b.n	e564 <z_prf+0x7c8>
		*buf++ = '0';
    e570:	f647 0330 	movw	r3, #30768	; 0x7830
    e574:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    e578:	4633      	mov	r3, r6
    e57a:	f853 1b04 	ldr.w	r1, [r3], #4
    e57e:	2210      	movs	r2, #16
    e580:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    e584:	9301      	str	r3, [sp, #4]
    e586:	f00f faef 	bl	1db68 <_to_x>
				prefix = 2;
    e58a:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    e58e:	1c86      	adds	r6, r0, #2
				break;
    e590:	e603      	b.n	e19a <z_prf+0x3fe>
				cptr = va_arg(vargs, char *);
    e592:	4633      	mov	r3, r6
					precision = INT_MAX;
    e594:	2c00      	cmp	r4, #0
    e596:	bfb8      	it	lt
    e598:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    e59c:	2600      	movs	r6, #0
				cptr = va_arg(vargs, char *);
    e59e:	f853 7b04 	ldr.w	r7, [r3], #4
    e5a2:	9301      	str	r3, [sp, #4]
				for (clen = 0; clen < precision; clen++) {
    e5a4:	42b4      	cmp	r4, r6
    e5a6:	d103      	bne.n	e5b0 <z_prf+0x814>
    e5a8:	4626      	mov	r6, r4
    e5aa:	2400      	movs	r4, #0
    e5ac:	46a0      	mov	r8, r4
    e5ae:	e578      	b.n	e0a2 <z_prf+0x306>
					if (cptr[clen] == '\0') {
    e5b0:	5dbb      	ldrb	r3, [r7, r6]
    e5b2:	2b00      	cmp	r3, #0
    e5b4:	d05b      	beq.n	e66e <z_prf+0x8d2>
				for (clen = 0; clen < precision; clen++) {
    e5b6:	3601      	adds	r6, #1
    e5b8:	e7f4      	b.n	e5a4 <z_prf+0x808>
				switch (i) {
    e5ba:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
    e5bc:	2d6f      	cmp	r5, #111	; 0x6f
    e5be:	6831      	ldr	r1, [r6, #0]
    e5c0:	9301      	str	r3, [sp, #4]
    e5c2:	d119      	bne.n	e5f8 <z_prf+0x85c>
	if (alt_form) {
    e5c4:	f1ba 0f00 	cmp.w	sl, #0
    e5c8:	d008      	beq.n	e5dc <z_prf+0x840>
		*buf++ = '0';
    e5ca:	2330      	movs	r3, #48	; 0x30
    e5cc:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (!value) {
    e5d0:	b979      	cbnz	r1, e5f2 <z_prf+0x856>
			prefix = 0;
    e5d2:	4688      	mov	r8, r1
			return 1;
    e5d4:	2601      	movs	r6, #1
			*buf++ = 0;
    e5d6:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
			return 1;
    e5da:	e5de      	b.n	e19a <z_prf+0x3fe>
    e5dc:	ad19      	add	r5, sp, #100	; 0x64
	return (buf - buf0) + _to_x(buf, value, 8);
    e5de:	4628      	mov	r0, r5
    e5e0:	2208      	movs	r2, #8
    e5e2:	f00f fac1 	bl	1db68 <_to_x>
    e5e6:	ae19      	add	r6, sp, #100	; 0x64
    e5e8:	1bad      	subs	r5, r5, r6
    e5ea:	182e      	adds	r6, r5, r0
			prefix = 0;
    e5ec:	f04f 0800 	mov.w	r8, #0
    e5f0:	e5d3      	b.n	e19a <z_prf+0x3fe>
		*buf++ = '0';
    e5f2:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    e5f6:	e7f2      	b.n	e5de <z_prf+0x842>
				} else if (c == 'u') {
    e5f8:	2d75      	cmp	r5, #117	; 0x75
    e5fa:	d105      	bne.n	e608 <z_prf+0x86c>
	return _to_x(buf, value, 10);
    e5fc:	220a      	movs	r2, #10
    e5fe:	a819      	add	r0, sp, #100	; 0x64
    e600:	f00f fab2 	bl	1db68 <_to_x>
    e604:	4606      	mov	r6, r0
    e606:	e7f1      	b.n	e5ec <z_prf+0x850>
	if (alt_form) {
    e608:	f1ba 0f00 	cmp.w	sl, #0
    e60c:	d011      	beq.n	e632 <z_prf+0x896>
		*buf++ = '0';
    e60e:	f647 0330 	movw	r3, #30768	; 0x7830
		*buf++ = 'x';
    e612:	f10d 0766 	add.w	r7, sp, #102	; 0x66
		*buf++ = '0';
    e616:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    e61a:	2210      	movs	r2, #16
    e61c:	4638      	mov	r0, r7
    e61e:	f00f faa3 	bl	1db68 <_to_x>
	if (prefix == 'X') {
    e622:	2d58      	cmp	r5, #88	; 0x58
    e624:	d007      	beq.n	e636 <z_prf+0x89a>
	return len + (buf - buf0);
    e626:	ab19      	add	r3, sp, #100	; 0x64
    e628:	1aff      	subs	r7, r7, r3
    e62a:	183e      	adds	r6, r7, r0
						prefix = 2;
    e62c:	ea4f 084a 	mov.w	r8, sl, lsl #1
    e630:	e5b3      	b.n	e19a <z_prf+0x3fe>
    e632:	af19      	add	r7, sp, #100	; 0x64
    e634:	e7f1      	b.n	e61a <z_prf+0x87e>
    e636:	aa19      	add	r2, sp, #100	; 0x64
		if (*buf >= 'a' && *buf <= 'z') {
    e638:	f812 3b01 	ldrb.w	r3, [r2], #1
    e63c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    e640:	2919      	cmp	r1, #25
    e642:	d803      	bhi.n	e64c <z_prf+0x8b0>
			*buf += 'A' - 'a';
    e644:	3b20      	subs	r3, #32
    e646:	f802 3c01 	strb.w	r3, [r2, #-1]
	} while (*buf++);
    e64a:	e7f5      	b.n	e638 <z_prf+0x89c>
    e64c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    e650:	2b00      	cmp	r3, #0
    e652:	d1f1      	bne.n	e638 <z_prf+0x89c>
    e654:	e7e7      	b.n	e626 <z_prf+0x88a>
				PUTC('%');
    e656:	4649      	mov	r1, r9
    e658:	4628      	mov	r0, r5
    e65a:	f7ff bbb0 	b.w	ddbe <z_prf+0x22>
				count++;
    e65e:	9b02      	ldr	r3, [sp, #8]
    e660:	3301      	adds	r3, #1
				continue;
    e662:	e9cd 6301 	strd	r6, r3, [sp, #4]
    e666:	e77d      	b.n	e564 <z_prf+0x7c8>
					prefix = 1;
    e668:	f04f 0801 	mov.w	r8, #1
    e66c:	e595      	b.n	e19a <z_prf+0x3fe>
    e66e:	461c      	mov	r4, r3
    e670:	e79c      	b.n	e5ac <z_prf+0x810>
				zero_head = 0;
    e672:	2300      	movs	r3, #0
			cptr = buf;
    e674:	af19      	add	r7, sp, #100	; 0x64
    e676:	e51c      	b.n	e0b2 <z_prf+0x316>
				zero_head = 0;
    e678:	9b08      	ldr	r3, [sp, #32]
    e67a:	af19      	add	r7, sp, #100	; 0x64
    e67c:	e519      	b.n	e0b2 <z_prf+0x316>
    e67e:	9309      	str	r3, [sp, #36]	; 0x24
					PUTC(' ');
    e680:	4649      	mov	r1, r9
    e682:	9b03      	ldr	r3, [sp, #12]
    e684:	2020      	movs	r0, #32
    e686:	9207      	str	r2, [sp, #28]
    e688:	4798      	blx	r3
    e68a:	3001      	adds	r0, #1
    e68c:	9a07      	ldr	r2, [sp, #28]
    e68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e690:	f43f ab9a 	beq.w	ddc8 <z_prf+0x2c>
				while (width-- > 0) {
    e694:	3a01      	subs	r2, #1
    e696:	d2f2      	bcs.n	e67e <z_prf+0x8e2>
				count += width;
    e698:	9902      	ldr	r1, [sp, #8]
    e69a:	4429      	add	r1, r5
    e69c:	9102      	str	r1, [sp, #8]
				while (width-- > 0) {
    e69e:	4615      	mov	r5, r2
    e6a0:	e511      	b.n	e0c6 <z_prf+0x32a>
    e6a2:	462a      	mov	r2, r5
    e6a4:	e7f6      	b.n	e694 <z_prf+0x8f8>
    e6a6:	9309      	str	r3, [sp, #36]	; 0x24
				PUTC(*cptr++);
    e6a8:	4649      	mov	r1, r9
    e6aa:	9b03      	ldr	r3, [sp, #12]
    e6ac:	f817 0b01 	ldrb.w	r0, [r7], #1
    e6b0:	9207      	str	r2, [sp, #28]
    e6b2:	4798      	blx	r3
    e6b4:	3001      	adds	r0, #1
    e6b6:	9a07      	ldr	r2, [sp, #28]
    e6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e6ba:	f47f ad06 	bne.w	e0ca <z_prf+0x32e>
    e6be:	f7ff bb83 	b.w	ddc8 <z_prf+0x2c>
    e6c2:	9307      	str	r3, [sp, #28]
				PUTC('0');
    e6c4:	4649      	mov	r1, r9
    e6c6:	9b03      	ldr	r3, [sp, #12]
    e6c8:	2030      	movs	r0, #48	; 0x30
    e6ca:	4798      	blx	r3
    e6cc:	3001      	adds	r0, #1
    e6ce:	9b07      	ldr	r3, [sp, #28]
    e6d0:	f47f acfe 	bne.w	e0d0 <z_prf+0x334>
    e6d4:	f7ff bb78 	b.w	ddc8 <z_prf+0x2c>
					PUTC(c);
    e6d8:	4649      	mov	r1, r9
    e6da:	9b03      	ldr	r3, [sp, #12]
    e6dc:	4798      	blx	r3
    e6de:	3001      	adds	r0, #1
    e6e0:	f43f ab72 	beq.w	ddc8 <z_prf+0x2c>
					c = *++cptr;
    e6e4:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    e6e8:	e4fd      	b.n	e0e6 <z_prf+0x34a>
					PUTC('0');
    e6ea:	4649      	mov	r1, r9
    e6ec:	2030      	movs	r0, #48	; 0x30
    e6ee:	9b03      	ldr	r3, [sp, #12]
    e6f0:	4798      	blx	r3
    e6f2:	3001      	adds	r0, #1
    e6f4:	f47f acff 	bne.w	e0f6 <z_prf+0x35a>
    e6f8:	f7ff bb66 	b.w	ddc8 <z_prf+0x2c>
					PUTC('0');
    e6fc:	4649      	mov	r1, r9
    e6fe:	2030      	movs	r0, #48	; 0x30
    e700:	9b03      	ldr	r3, [sp, #12]
    e702:	4798      	blx	r3
    e704:	3001      	adds	r0, #1
    e706:	f108 38ff 	add.w	r8, r8, #4294967295
    e70a:	f47f ad0e 	bne.w	e12a <z_prf+0x38e>
    e70e:	f7ff bb5b 	b.w	ddc8 <z_prf+0x2c>
					PUTC(c);
    e712:	4649      	mov	r1, r9
    e714:	9b03      	ldr	r3, [sp, #12]
    e716:	4798      	blx	r3
    e718:	3001      	adds	r0, #1
    e71a:	f43f ab55 	beq.w	ddc8 <z_prf+0x2c>
					c = *++cptr;
    e71e:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    e722:	e50c      	b.n	e13e <z_prf+0x3a2>
					PUTC('0');
    e724:	4649      	mov	r1, r9
    e726:	2030      	movs	r0, #48	; 0x30
    e728:	9b03      	ldr	r3, [sp, #12]
    e72a:	4798      	blx	r3
    e72c:	3001      	adds	r0, #1
    e72e:	f108 38ff 	add.w	r8, r8, #4294967295
    e732:	f47f ad0f 	bne.w	e154 <z_prf+0x3b8>
    e736:	f7ff bb47 	b.w	ddc8 <z_prf+0x2c>
				PUTC(*cptr++);
    e73a:	4649      	mov	r1, r9
    e73c:	f817 0b01 	ldrb.w	r0, [r7], #1
    e740:	9b03      	ldr	r3, [sp, #12]
    e742:	4798      	blx	r3
    e744:	3001      	adds	r0, #1
    e746:	f43f ab3f 	beq.w	ddc8 <z_prf+0x2c>
			while (clen-- > 0) {
    e74a:	1bf3      	subs	r3, r6, r7
    e74c:	2b00      	cmp	r3, #0
    e74e:	dcf4      	bgt.n	e73a <z_prf+0x99e>
			count += clen;
    e750:	9b02      	ldr	r3, [sp, #8]
    e752:	9a08      	ldr	r2, [sp, #32]
			if (width > 0) {
    e754:	2d00      	cmp	r5, #0
			count += clen;
    e756:	4413      	add	r3, r2
    e758:	9302      	str	r3, [sp, #8]
			if (width > 0) {
    e75a:	f77f af03 	ble.w	e564 <z_prf+0x7c8>
    e75e:	462c      	mov	r4, r5
    e760:	e006      	b.n	e770 <z_prf+0x9d4>
					PUTC(' ');
    e762:	4649      	mov	r1, r9
    e764:	2020      	movs	r0, #32
    e766:	9b03      	ldr	r3, [sp, #12]
    e768:	4798      	blx	r3
    e76a:	3001      	adds	r0, #1
    e76c:	f43f ab2c 	beq.w	ddc8 <z_prf+0x2c>
				while (width-- > 0) {
    e770:	3c01      	subs	r4, #1
    e772:	d2f6      	bcs.n	e762 <z_prf+0x9c6>
				count += width;
    e774:	9b02      	ldr	r3, [sp, #8]
    e776:	442b      	add	r3, r5
    e778:	9302      	str	r3, [sp, #8]
    e77a:	e6f3      	b.n	e564 <z_prf+0x7c8>

0000e77c <nordicsemi_nrf91_init>:
    e77c:	f04f 0220 	mov.w	r2, #32
    e780:	f3ef 8311 	mrs	r3, BASEPRI
    e784:	f382 8811 	msr	BASEPRI, r2
    e788:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    e78c:	2101      	movs	r1, #1
    e78e:	4a04      	ldr	r2, [pc, #16]	; (e7a0 <nordicsemi_nrf91_init+0x24>)
    e790:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    e794:	f383 8811 	msr	BASEPRI, r3
    e798:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    e79c:	2000      	movs	r0, #0
    e79e:	4770      	bx	lr
    e7a0:	40039000 	.word	0x40039000

0000e7a4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    e7a4:	b120      	cbz	r0, e7b0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    e7a6:	4b03      	ldr	r3, [pc, #12]	; (e7b4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    e7a8:	0180      	lsls	r0, r0, #6
    e7aa:	f043 0301 	orr.w	r3, r3, #1
    e7ae:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    e7b0:	4770      	bx	lr
    e7b2:	bf00      	nop
    e7b4:	00020ef0 	.word	0x00020ef0

0000e7b8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    e7b8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    e7ba:	2200      	movs	r2, #0
{
    e7bc:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    e7be:	490f      	ldr	r1, [pc, #60]	; (e7fc <enable_logger+0x44>)
    e7c0:	480f      	ldr	r0, [pc, #60]	; (e800 <enable_logger+0x48>)
    e7c2:	f012 f85a 	bl	2087a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e7c6:	2200      	movs	r2, #0
    e7c8:	2300      	movs	r3, #0
    e7ca:	2400      	movs	r4, #0
    e7cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e7d0:	230e      	movs	r3, #14
    e7d2:	4d0c      	ldr	r5, [pc, #48]	; (e804 <enable_logger+0x4c>)
    e7d4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    e7d8:	f44f 7240 	mov.w	r2, #768	; 0x300
    e7dc:	4628      	mov	r0, r5
    e7de:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e7e2:	4b09      	ldr	r3, [pc, #36]	; (e808 <enable_logger+0x50>)
    e7e4:	4909      	ldr	r1, [pc, #36]	; (e80c <enable_logger+0x54>)
    e7e6:	9400      	str	r4, [sp, #0]
    e7e8:	f00e fae4 	bl	1cdb4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    e7ec:	4908      	ldr	r1, [pc, #32]	; (e810 <enable_logger+0x58>)
    e7ee:	4628      	mov	r0, r5
    e7f0:	f011 ff6a 	bl	206c8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    e7f4:	4620      	mov	r0, r4
    e7f6:	b009      	add	sp, #36	; 0x24
    e7f8:	bd30      	pop	{r4, r5, pc}
    e7fa:	bf00      	nop
    e7fc:	0000e815 	.word	0x0000e815
    e800:	20020208 	.word	0x20020208
    e804:	20020240 	.word	0x20020240
    e808:	0000ebfd 	.word	0x0000ebfd
    e80c:	20023830 	.word	0x20023830
    e810:	000218d3 	.word	0x000218d3

0000e814 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    e814:	4801      	ldr	r0, [pc, #4]	; (e81c <log_process_thread_timer_expiry_fn+0x8>)
    e816:	f00e ba35 	b.w	1cc84 <z_impl_k_sem_give>
    e81a:	bf00      	nop
    e81c:	200201cc 	.word	0x200201cc

0000e820 <log_core_init>:
{
    e820:	b508      	push	{r3, lr}
		log_msg_pool_init();
    e822:	f000 fa49 	bl	ecb8 <log_msg_pool_init>
		log_list_init(&list);
    e826:	4809      	ldr	r0, [pc, #36]	; (e84c <log_core_init+0x2c>)
    e828:	f00f fa15 	bl	1dc56 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    e82c:	2304      	movs	r3, #4
    e82e:	2234      	movs	r2, #52	; 0x34
    e830:	4907      	ldr	r1, [pc, #28]	; (e850 <log_core_init+0x30>)
    e832:	4808      	ldr	r0, [pc, #32]	; (e854 <log_core_init+0x34>)
    e834:	f011 fd96 	bl	20364 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    e838:	4b07      	ldr	r3, [pc, #28]	; (e858 <log_core_init+0x38>)
    e83a:	4a08      	ldr	r2, [pc, #32]	; (e85c <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
    e83c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    e840:	601a      	str	r2, [r3, #0]
}
    e842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    e846:	f000 bc7f 	b.w	f148 <log_output_timestamp_freq_set>
    e84a:	bf00      	nop
    e84c:	20020800 	.word	0x20020800
    e850:	20026070 	.word	0x20026070
    e854:	20020808 	.word	0x20020808
    e858:	20020004 	.word	0x20020004
    e85c:	0001dc95 	.word	0x0001dc95

0000e860 <dropped_notify>:
{
    e860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e862:	2500      	movs	r5, #0
    e864:	4b0c      	ldr	r3, [pc, #48]	; (e898 <dropped_notify+0x38>)
    e866:	e8d3 7fef 	ldaex	r7, [r3]
    e86a:	e8c3 5fe2 	stlex	r2, r5, [r3]
    e86e:	2a00      	cmp	r2, #0
    e870:	d1f9      	bne.n	e866 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    e872:	4c0a      	ldr	r4, [pc, #40]	; (e89c <dropped_notify+0x3c>)
    e874:	4e0a      	ldr	r6, [pc, #40]	; (e8a0 <dropped_notify+0x40>)
    e876:	1b36      	subs	r6, r6, r4
    e878:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    e87a:	42b5      	cmp	r5, r6
    e87c:	db00      	blt.n	e880 <dropped_notify+0x20>
}
    e87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    e880:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e882:	795b      	ldrb	r3, [r3, #5]
    e884:	b12b      	cbz	r3, e892 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    e886:	6823      	ldr	r3, [r4, #0]
    e888:	68db      	ldr	r3, [r3, #12]
    e88a:	b113      	cbz	r3, e892 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    e88c:	4639      	mov	r1, r7
    e88e:	4620      	mov	r0, r4
    e890:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    e892:	3501      	adds	r5, #1
    e894:	3410      	adds	r4, #16
    e896:	e7f0      	b.n	e87a <dropped_notify+0x1a>
    e898:	200207f8 	.word	0x200207f8
    e89c:	00020e90 	.word	0x00020e90
    e8a0:	00020ea0 	.word	0x00020ea0

0000e8a4 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e8a4:	4b04      	ldr	r3, [pc, #16]	; (e8b8 <log_dropped+0x14>)
    e8a6:	e8d3 2fef 	ldaex	r2, [r3]
    e8aa:	3201      	adds	r2, #1
    e8ac:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e8b0:	2900      	cmp	r1, #0
    e8b2:	d1f8      	bne.n	e8a6 <log_dropped+0x2>
}
    e8b4:	4770      	bx	lr
    e8b6:	bf00      	nop
    e8b8:	200207f8 	.word	0x200207f8

0000e8bc <log_source_name_get>:
    e8bc:	4a04      	ldr	r2, [pc, #16]	; (e8d0 <log_source_name_get+0x14>)
    e8be:	4b05      	ldr	r3, [pc, #20]	; (e8d4 <log_source_name_get+0x18>)
    e8c0:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    e8c2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    e8c6:	bf34      	ite	cc
    e8c8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    e8cc:	2000      	movcs	r0, #0
}
    e8ce:	4770      	bx	lr
    e8d0:	00020e10 	.word	0x00020e10
    e8d4:	00020e90 	.word	0x00020e90

0000e8d8 <log_backend_enable>:
	id += backend - log_backend_get(0);
    e8d8:	4b09      	ldr	r3, [pc, #36]	; (e900 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    e8da:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    e8dc:	1ac3      	subs	r3, r0, r3
    e8de:	111b      	asrs	r3, r3, #4
    e8e0:	3301      	adds	r3, #1
{
    e8e2:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    e8e4:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
    e8e6:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    e8e8:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    e8ea:	4c06      	ldr	r4, [pc, #24]	; (e904 <log_backend_enable+0x2c>)
    e8ec:	715a      	strb	r2, [r3, #5]
    e8ee:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    e8f0:	6019      	str	r1, [r3, #0]
    e8f2:	b912      	cbnz	r2, e8fa <log_backend_enable+0x22>
    e8f4:	4804      	ldr	r0, [pc, #16]	; (e908 <log_backend_enable+0x30>)
    e8f6:	f00e f9c5 	bl	1cc84 <z_impl_k_sem_give>
	backend_attached = true;
    e8fa:	2301      	movs	r3, #1
    e8fc:	7023      	strb	r3, [r4, #0]
}
    e8fe:	bd10      	pop	{r4, pc}
    e900:	00020e90 	.word	0x00020e90
    e904:	20021b5a 	.word	0x20021b5a
    e908:	200201cc 	.word	0x200201cc

0000e90c <log_init>:
{
    e90c:	b570      	push	{r4, r5, r6, lr}
    e90e:	4b0f      	ldr	r3, [pc, #60]	; (e94c <log_init+0x40>)
    e910:	e8d3 5fef 	ldaex	r5, [r3]
    e914:	1c6a      	adds	r2, r5, #1
    e916:	e8c3 2fe1 	stlex	r1, r2, [r3]
    e91a:	2900      	cmp	r1, #0
    e91c:	d1f8      	bne.n	e910 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    e91e:	b92d      	cbnz	r5, e92c <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    e920:	4c0b      	ldr	r4, [pc, #44]	; (e950 <log_init+0x44>)
    e922:	4e0c      	ldr	r6, [pc, #48]	; (e954 <log_init+0x48>)
    e924:	1b36      	subs	r6, r6, r4
    e926:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    e928:	42b5      	cmp	r5, r6
    e92a:	db00      	blt.n	e92e <log_init+0x22>
}
    e92c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    e92e:	7b23      	ldrb	r3, [r4, #12]
    e930:	b143      	cbz	r3, e944 <log_init+0x38>
			if (backend->api->init != NULL) {
    e932:	6823      	ldr	r3, [r4, #0]
    e934:	695b      	ldr	r3, [r3, #20]
    e936:	b103      	cbz	r3, e93a <log_init+0x2e>
				backend->api->init();
    e938:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    e93a:	2204      	movs	r2, #4
    e93c:	2100      	movs	r1, #0
    e93e:	4620      	mov	r0, r4
    e940:	f7ff ffca 	bl	e8d8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    e944:	3501      	adds	r5, #1
    e946:	3410      	adds	r4, #16
    e948:	e7ee      	b.n	e928 <log_init+0x1c>
    e94a:	bf00      	nop
    e94c:	200207fc 	.word	0x200207fc
    e950:	00020e90 	.word	0x00020e90
    e954:	00020ea0 	.word	0x00020ea0

0000e958 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    e958:	4b14      	ldr	r3, [pc, #80]	; (e9ac <log_strdup+0x54>)
{
    e95a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    e95c:	4298      	cmp	r0, r3
{
    e95e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    e960:	d302      	bcc.n	e968 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    e962:	4b13      	ldr	r3, [pc, #76]	; (e9b0 <log_strdup+0x58>)
    e964:	4298      	cmp	r0, r3
    e966:	d31c      	bcc.n	e9a2 <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    e968:	2200      	movs	r2, #0
    e96a:	2300      	movs	r3, #0
    e96c:	4811      	ldr	r0, [pc, #68]	; (e9b4 <log_strdup+0x5c>)
    e96e:	a901      	add	r1, sp, #4
    e970:	f00d fc26 	bl	1c1c0 <k_mem_slab_alloc>
	if (err != 0) {
    e974:	4605      	mov	r5, r0
    e976:	b9b8      	cbnz	r0, e9a8 <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e978:	2201      	movs	r2, #1
    e97a:	9b01      	ldr	r3, [sp, #4]
    e97c:	e8d3 1fef 	ldaex	r1, [r3]
    e980:	e8c3 2fe0 	stlex	r0, r2, [r3]
    e984:	2800      	cmp	r0, #0
    e986:	d1f9      	bne.n	e97c <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    e988:	9801      	ldr	r0, [sp, #4]
    e98a:	4621      	mov	r1, r4
    e98c:	222d      	movs	r2, #45	; 0x2d
    e98e:	3004      	adds	r0, #4
    e990:	f00f ff2e 	bl	1e7f0 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    e994:	237e      	movs	r3, #126	; 0x7e
    e996:	9c01      	ldr	r4, [sp, #4]
    e998:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    e99c:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	return dup->buf;
    e9a0:	3404      	adds	r4, #4
}
    e9a2:	4620      	mov	r0, r4
    e9a4:	b003      	add	sp, #12
    e9a6:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    e9a8:	4c03      	ldr	r4, [pc, #12]	; (e9b8 <log_strdup+0x60>)
    e9aa:	e7fa      	b.n	e9a2 <log_strdup+0x4a>
    e9ac:	00020b5c 	.word	0x00020b5c
    e9b0:	00022de0 	.word	0x00022de0
    e9b4:	20020808 	.word	0x20020808
    e9b8:	000218db 	.word	0x000218db

0000e9bc <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    e9bc:	b148      	cbz	r0, e9d2 <log_is_strdup+0x16>
    e9be:	4b05      	ldr	r3, [pc, #20]	; (e9d4 <log_is_strdup+0x18>)
    e9c0:	4298      	cmp	r0, r3
    e9c2:	d305      	bcc.n	e9d0 <log_is_strdup+0x14>
    e9c4:	33d0      	adds	r3, #208	; 0xd0
    e9c6:	4298      	cmp	r0, r3
    e9c8:	bf2c      	ite	cs
    e9ca:	2000      	movcs	r0, #0
    e9cc:	2001      	movcc	r0, #1
    e9ce:	4770      	bx	lr
    e9d0:	2000      	movs	r0, #0
}
    e9d2:	4770      	bx	lr
    e9d4:	20026070 	.word	0x20026070

0000e9d8 <z_impl_log_process>:
{
    e9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    e9dc:	4b4a      	ldr	r3, [pc, #296]	; (eb08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa8>)
{
    e9de:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    e9e0:	781b      	ldrb	r3, [r3, #0]
{
    e9e2:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
    e9e4:	b903      	cbnz	r3, e9e8 <z_impl_log_process+0x10>
    e9e6:	b340      	cbz	r0, ea3a <z_impl_log_process+0x62>
	__asm__ volatile(
    e9e8:	f04f 0320 	mov.w	r3, #32
    e9ec:	f3ef 8611 	mrs	r6, BASEPRI
    e9f0:	f383 8811 	msr	BASEPRI, r3
    e9f4:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    e9f8:	4844      	ldr	r0, [pc, #272]	; (eb0c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac>)
    e9fa:	f00f f93c 	bl	1dc76 <log_list_head_get>
    e9fe:	4605      	mov	r5, r0
	__asm__ volatile(
    ea00:	f386 8811 	msr	BASEPRI, r6
    ea04:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    ea08:	b158      	cbz	r0, ea22 <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ea0a:	4b41      	ldr	r3, [pc, #260]	; (eb10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0>)
    ea0c:	e8d3 2fef 	ldaex	r2, [r3]
    ea10:	3a01      	subs	r2, #1
    ea12:	e8c3 2fe1 	stlex	r1, r2, [r3]
    ea16:	2900      	cmp	r1, #0
    ea18:	d1f8      	bne.n	ea0c <z_impl_log_process+0x34>
	if (!bypass) {
    ea1a:	b194      	cbz	r4, ea42 <z_impl_log_process+0x6a>
	log_msg_put(msg);
    ea1c:	4628      	mov	r0, r5
    ea1e:	f00f fa47 	bl	1deb0 <log_msg_put>
	if (!bypass && dropped_cnt) {
    ea22:	b924      	cbnz	r4, ea2e <z_impl_log_process+0x56>
    ea24:	4b3b      	ldr	r3, [pc, #236]	; (eb14 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb4>)
    ea26:	681b      	ldr	r3, [r3, #0]
    ea28:	b10b      	cbz	r3, ea2e <z_impl_log_process+0x56>
		dropped_notify();
    ea2a:	f7ff ff19 	bl	e860 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    ea2e:	4837      	ldr	r0, [pc, #220]	; (eb0c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac>)
    ea30:	f00f f91f 	bl	1dc72 <log_list_head_peek>
    ea34:	1e04      	subs	r4, r0, #0
    ea36:	bf18      	it	ne
    ea38:	2401      	movne	r4, #1
}
    ea3a:	4620      	mov	r0, r4
    ea3c:	b005      	add	sp, #20
    ea3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    ea42:	4b35      	ldr	r3, [pc, #212]	; (eb18 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb8>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    ea44:	781b      	ldrb	r3, [r3, #0]
    ea46:	b9cb      	cbnz	r3, ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ea48:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    ea4a:	07db      	lsls	r3, r3, #31
    ea4c:	d416      	bmi.n	ea7c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c>
	msg_str = log_msg_str_get(msg);
    ea4e:	f00f fa3e 	bl	1dece <log_msg_str_get>
    ea52:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    ea54:	4628      	mov	r0, r5
    ea56:	f00f fa09 	bl	1de6c <log_msg_nargs_get>
    ea5a:	4601      	mov	r1, r0
    ea5c:	4640      	mov	r0, r8
    ea5e:	f00f f91d 	bl	1dc9c <z_log_get_s_mask>
    ea62:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    ea64:	4f2d      	ldr	r7, [pc, #180]	; (eb1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbc>)
    ea66:	4b2e      	ldr	r3, [pc, #184]	; (eb20 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc0>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    ea68:	f8df b0d0 	ldr.w	fp, [pc, #208]	; eb3c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xdc>
    ea6c:	1bdb      	subs	r3, r3, r7
    ea6e:	08db      	lsrs	r3, r3, #3
    ea70:	9303      	str	r3, [sp, #12]
    ea72:	4b2c      	ldr	r3, [pc, #176]	; (eb24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc4>)
    ea74:	1bdb      	subs	r3, r3, r7
    ea76:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    ea7a:	b936      	cbnz	r6, ea8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a>
    ea7c:	4e2a      	ldr	r6, [pc, #168]	; (eb28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc8>)
    ea7e:	4f2b      	ldr	r7, [pc, #172]	; (eb2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcc>)
    ea80:	f04f 0800 	mov.w	r8, #0
    ea84:	1bbf      	subs	r7, r7, r6
    ea86:	113f      	asrs	r7, r7, #4
    ea88:	e03a      	b.n	eb00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa0>
		idx = 31 - __builtin_clz(mask);
    ea8a:	fab6 f186 	clz	r1, r6
    ea8e:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    ea92:	4649      	mov	r1, r9
    ea94:	4628      	mov	r0, r5
    ea96:	f00f f9ec 	bl	1de72 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    ea9a:	4b25      	ldr	r3, [pc, #148]	; (eb30 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd0>)
		str = (const char *)log_msg_arg_get(msg, idx);
    ea9c:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    ea9e:	4298      	cmp	r0, r3
    eaa0:	d302      	bcc.n	eaa8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    eaa2:	4a24      	ldr	r2, [pc, #144]	; (eb34 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd4>)
    eaa4:	4290      	cmp	r0, r2
    eaa6:	d31a      	bcc.n	eade <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e>
    eaa8:	4608      	mov	r0, r1
    eaaa:	f7ff ff87 	bl	e9bc <log_is_strdup>
    eaae:	4602      	mov	r2, r0
    eab0:	b9a8      	cbnz	r0, eade <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e>
    eab2:	4b21      	ldr	r3, [pc, #132]	; (eb38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd8>)
    eab4:	4299      	cmp	r1, r3
    eab6:	d012      	beq.n	eade <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e>
	return msg->hdr.ids.source_id;
    eab8:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    eaba:	9903      	ldr	r1, [sp, #12]
    eabc:	f3c3 1389 	ubfx	r3, r3, #6, #10
    eac0:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    eac2:	bf38      	it	cc
    eac4:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    eac8:	ea4f 138a 	mov.w	r3, sl, lsl #6
    eacc:	f043 0301 	orr.w	r3, r3, #1
    ead0:	f8ad 3000 	strh.w	r3, [sp]
    ead4:	4649      	mov	r1, r9
    ead6:	4643      	mov	r3, r8
    ead8:	4658      	mov	r0, fp
    eada:	f00f f93e 	bl	1dd5a <log_3>
		mask &= ~BIT(idx);
    eade:	2301      	movs	r3, #1
    eae0:	fa03 f109 	lsl.w	r1, r3, r9
    eae4:	ea26 0601 	bic.w	r6, r6, r1
    eae8:	e7c7      	b.n	ea7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a>
	return backend->cb->active;
    eaea:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    eaec:	795b      	ldrb	r3, [r3, #5]
    eaee:	b123      	cbz	r3, eafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a>
	backend->api->put(backend, msg);
    eaf0:	6833      	ldr	r3, [r6, #0]
    eaf2:	4629      	mov	r1, r5
    eaf4:	4630      	mov	r0, r6
    eaf6:	681b      	ldr	r3, [r3, #0]
    eaf8:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    eafa:	f108 0801 	add.w	r8, r8, #1
    eafe:	3610      	adds	r6, #16
    eb00:	45b8      	cmp	r8, r7
    eb02:	dbf2      	blt.n	eaea <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8a>
    eb04:	e78a      	b.n	ea1c <z_impl_log_process+0x44>
    eb06:	bf00      	nop
    eb08:	20021b5a 	.word	0x20021b5a
    eb0c:	20020800 	.word	0x20020800
    eb10:	200207f4 	.word	0x200207f4
    eb14:	200207f8 	.word	0x200207f8
    eb18:	20021b5b 	.word	0x20021b5b
    eb1c:	00020e10 	.word	0x00020e10
    eb20:	00020e90 	.word	0x00020e90
    eb24:	00020e48 	.word	0x00020e48
    eb28:	00020e90 	.word	0x00020e90
    eb2c:	00020ea0 	.word	0x00020ea0
    eb30:	00020b5c 	.word	0x00020b5c
    eb34:	00022de0 	.word	0x00022de0
    eb38:	000218db 	.word	0x000218db
    eb3c:	000218f5 	.word	0x000218f5

0000eb40 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    eb40:	4b27      	ldr	r3, [pc, #156]	; (ebe0 <msg_finalize+0xa0>)
{
    eb42:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    eb44:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    eb46:	8141      	strh	r1, [r0, #10]
{
    eb48:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    eb4a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    eb4c:	4d25      	ldr	r5, [pc, #148]	; (ebe4 <msg_finalize+0xa4>)
    eb4e:	60e0      	str	r0, [r4, #12]
    eb50:	e8d5 3fef 	ldaex	r3, [r5]
    eb54:	3301      	adds	r3, #1
    eb56:	e8c5 3fe2 	stlex	r2, r3, [r5]
    eb5a:	2a00      	cmp	r2, #0
    eb5c:	d1f8      	bne.n	eb50 <msg_finalize+0x10>
	__asm__ volatile(
    eb5e:	f04f 0320 	mov.w	r3, #32
    eb62:	f3ef 8611 	mrs	r6, BASEPRI
    eb66:	f383 8811 	msr	BASEPRI, r3
    eb6a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    eb6e:	481e      	ldr	r0, [pc, #120]	; (ebe8 <msg_finalize+0xa8>)
    eb70:	4621      	mov	r1, r4
    eb72:	f00f f874 	bl	1dc5e <log_list_add_tail>
	__asm__ volatile(
    eb76:	f386 8811 	msr	BASEPRI, r6
    eb7a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    eb7e:	4b1b      	ldr	r3, [pc, #108]	; (ebec <msg_finalize+0xac>)
    eb80:	781b      	ldrb	r3, [r3, #0]
    eb82:	b183      	cbz	r3, eba6 <msg_finalize+0x66>
	__asm__ volatile(
    eb84:	f04f 0320 	mov.w	r3, #32
    eb88:	f3ef 8411 	mrs	r4, BASEPRI
    eb8c:	f383 8811 	msr	BASEPRI, r3
    eb90:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    eb94:	2000      	movs	r0, #0
    eb96:	f7ff ff1f 	bl	e9d8 <z_impl_log_process>
	__asm__ volatile(
    eb9a:	f384 8811 	msr	BASEPRI, r4
    eb9e:	f3bf 8f6f 	isb	sy
}
    eba2:	b002      	add	sp, #8
    eba4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    eba6:	4a12      	ldr	r2, [pc, #72]	; (ebf0 <msg_finalize+0xb0>)
    eba8:	682b      	ldr	r3, [r5, #0]
    ebaa:	6812      	ldr	r2, [r2, #0]
    ebac:	2a00      	cmp	r2, #0
    ebae:	d0f8      	beq.n	eba2 <msg_finalize+0x62>
    ebb0:	2b01      	cmp	r3, #1
    ebb2:	d10a      	bne.n	ebca <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
    ebb4:	2200      	movs	r2, #0
    ebb6:	2300      	movs	r3, #0
    ebb8:	480e      	ldr	r0, [pc, #56]	; (ebf4 <msg_finalize+0xb4>)
    ebba:	e9cd 2300 	strd	r2, r3, [sp]
    ebbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ebc2:	2300      	movs	r3, #0
    ebc4:	f00e fb66 	bl	1d294 <z_impl_k_timer_start>
    ebc8:	e7eb      	b.n	eba2 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    ebca:	2b0a      	cmp	r3, #10
    ebcc:	d1e9      	bne.n	eba2 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    ebce:	4809      	ldr	r0, [pc, #36]	; (ebf4 <msg_finalize+0xb4>)
    ebd0:	f011 fe5f 	bl	20892 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    ebd4:	4808      	ldr	r0, [pc, #32]	; (ebf8 <msg_finalize+0xb8>)
}
    ebd6:	b002      	add	sp, #8
    ebd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ebdc:	f00e b852 	b.w	1cc84 <z_impl_k_sem_give>
    ebe0:	20020004 	.word	0x20020004
    ebe4:	200207f4 	.word	0x200207f4
    ebe8:	20020800 	.word	0x20020800
    ebec:	20021b5b 	.word	0x20021b5b
    ebf0:	20020824 	.word	0x20020824
    ebf4:	20020208 	.word	0x20020208
    ebf8:	200201cc 	.word	0x200201cc

0000ebfc <log_process_thread_func>:
{
    ebfc:	b510      	push	{r4, lr}
	log_init();
    ebfe:	f7ff fe85 	bl	e90c <log_init>
	return z_impl_k_current_get();
    ec02:	f00e f839 	bl	1cc78 <z_impl_k_current_get>
	proc_tid = process_tid;
    ec06:	4b0c      	ldr	r3, [pc, #48]	; (ec38 <log_process_thread_func+0x3c>)
    ec08:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    ec0a:	b130      	cbz	r0, ec1a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    ec0c:	4b0b      	ldr	r3, [pc, #44]	; (ec3c <log_process_thread_func+0x40>)
	    process_tid &&
    ec0e:	681b      	ldr	r3, [r3, #0]
    ec10:	2b09      	cmp	r3, #9
    ec12:	dd02      	ble.n	ec1a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    ec14:	480a      	ldr	r0, [pc, #40]	; (ec40 <log_process_thread_func+0x44>)
    ec16:	f00e f835 	bl	1cc84 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    ec1a:	4c09      	ldr	r4, [pc, #36]	; (ec40 <log_process_thread_func+0x44>)
    ec1c:	2000      	movs	r0, #0
    ec1e:	f7ff fedb 	bl	e9d8 <z_impl_log_process>
		if (log_process(false) == false) {
    ec22:	2800      	cmp	r0, #0
    ec24:	d1fa      	bne.n	ec1c <log_process_thread_func+0x20>
    ec26:	f04f 32ff 	mov.w	r2, #4294967295
    ec2a:	f04f 33ff 	mov.w	r3, #4294967295
    ec2e:	4620      	mov	r0, r4
    ec30:	f00e f84e 	bl	1ccd0 <z_impl_k_sem_take>
    ec34:	e7f2      	b.n	ec1c <log_process_thread_func+0x20>
    ec36:	bf00      	nop
    ec38:	20020824 	.word	0x20020824
    ec3c:	200207f4 	.word	0x200207f4
    ec40:	200201cc 	.word	0x200201cc

0000ec44 <z_impl_log_panic>:
{
    ec44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    ec46:	4f0e      	ldr	r7, [pc, #56]	; (ec80 <z_impl_log_panic+0x3c>)
    ec48:	783d      	ldrb	r5, [r7, #0]
    ec4a:	b975      	cbnz	r5, ec6a <z_impl_log_panic+0x26>
	log_init();
    ec4c:	f7ff fe5e 	bl	e90c <log_init>
	return __log_backends_end - __log_backends_start;
    ec50:	4c0c      	ldr	r4, [pc, #48]	; (ec84 <z_impl_log_panic+0x40>)
    ec52:	4e0d      	ldr	r6, [pc, #52]	; (ec88 <z_impl_log_panic+0x44>)
    ec54:	1b36      	subs	r6, r6, r4
    ec56:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ec58:	42b5      	cmp	r5, r6
    ec5a:	db07      	blt.n	ec6c <z_impl_log_panic+0x28>
    ec5c:	2000      	movs	r0, #0
    ec5e:	f7ff febb 	bl	e9d8 <z_impl_log_process>
		while (log_process(false) == true) {
    ec62:	2800      	cmp	r0, #0
    ec64:	d1fa      	bne.n	ec5c <z_impl_log_panic+0x18>
	panic_mode = true;
    ec66:	2301      	movs	r3, #1
    ec68:	703b      	strb	r3, [r7, #0]
}
    ec6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    ec6c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ec6e:	795b      	ldrb	r3, [r3, #5]
    ec70:	b11b      	cbz	r3, ec7a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    ec72:	6823      	ldr	r3, [r4, #0]
    ec74:	4620      	mov	r0, r4
    ec76:	691b      	ldr	r3, [r3, #16]
    ec78:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ec7a:	3501      	adds	r5, #1
    ec7c:	3410      	adds	r4, #16
    ec7e:	e7eb      	b.n	ec58 <z_impl_log_panic+0x14>
    ec80:	20021b5b 	.word	0x20021b5b
    ec84:	00020e90 	.word	0x00020e90
    ec88:	00020ea0 	.word	0x00020ea0

0000ec8c <log_free>:
{
    ec8c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    ec8e:	3804      	subs	r0, #4
    ec90:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ec92:	e8d0 3fef 	ldaex	r3, [r0]
    ec96:	1e5a      	subs	r2, r3, #1
    ec98:	e8c0 2fe1 	stlex	r1, r2, [r0]
    ec9c:	2900      	cmp	r1, #0
    ec9e:	d1f8      	bne.n	ec92 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    eca0:	2b01      	cmp	r3, #1
    eca2:	d103      	bne.n	ecac <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    eca4:	4803      	ldr	r0, [pc, #12]	; (ecb4 <log_free+0x28>)
    eca6:	a901      	add	r1, sp, #4
    eca8:	f00d fabc 	bl	1c224 <k_mem_slab_free>
}
    ecac:	b003      	add	sp, #12
    ecae:	f85d fb04 	ldr.w	pc, [sp], #4
    ecb2:	bf00      	nop
    ecb4:	20020808 	.word	0x20020808

0000ecb8 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    ecb8:	2320      	movs	r3, #32
    ecba:	4902      	ldr	r1, [pc, #8]	; (ecc4 <log_msg_pool_init+0xc>)
    ecbc:	461a      	mov	r2, r3
    ecbe:	4802      	ldr	r0, [pc, #8]	; (ecc8 <log_msg_pool_init+0x10>)
    ecc0:	f011 bb50 	b.w	20364 <k_mem_slab_init>
    ecc4:	20026140 	.word	0x20026140
    ecc8:	20020828 	.word	0x20020828

0000eccc <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    eccc:	2300      	movs	r3, #0
{
    ecce:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    ecd0:	4d09      	ldr	r5, [pc, #36]	; (ecf8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    ecd2:	9301      	str	r3, [sp, #4]
    ecd4:	2001      	movs	r0, #1
    ecd6:	f7ff fe7f 	bl	e9d8 <z_impl_log_process>
    ecda:	4604      	mov	r4, r0
			log_dropped();
    ecdc:	f7ff fde2 	bl	e8a4 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    ece0:	2200      	movs	r2, #0
    ece2:	2300      	movs	r3, #0
    ece4:	4628      	mov	r0, r5
    ece6:	a901      	add	r1, sp, #4
    ece8:	f00d fa6a 	bl	1c1c0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    ecec:	b108      	cbz	r0, ecf2 <log_msg_no_space_handle+0x26>
    ecee:	2c00      	cmp	r4, #0
    ecf0:	d1f0      	bne.n	ecd4 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    ecf2:	9801      	ldr	r0, [sp, #4]
    ecf4:	b003      	add	sp, #12
    ecf6:	bd30      	pop	{r4, r5, pc}
    ecf8:	20020828 	.word	0x20020828

0000ecfc <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
    ecfc:	2300      	movs	r3, #0
{
    ecfe:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    ed00:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
    ed02:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    ed04:	4806      	ldr	r0, [pc, #24]	; (ed20 <log_msg_chunk_alloc+0x24>)
    ed06:	2300      	movs	r3, #0
    ed08:	a901      	add	r1, sp, #4
    ed0a:	f00d fa59 	bl	1c1c0 <k_mem_slab_alloc>
	if (err != 0) {
    ed0e:	b110      	cbz	r0, ed16 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    ed10:	f7ff ffdc 	bl	eccc <log_msg_no_space_handle>
    ed14:	9001      	str	r0, [sp, #4]
}
    ed16:	9801      	ldr	r0, [sp, #4]
    ed18:	b003      	add	sp, #12
    ed1a:	f85d fb04 	ldr.w	pc, [sp], #4
    ed1e:	bf00      	nop
    ed20:	20020828 	.word	0x20020828

0000ed24 <msg_free>:
{
    ed24:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    ed26:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    ed28:	7a45      	ldrb	r5, [r0, #9]
{
    ed2a:	b085      	sub	sp, #20
    ed2c:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    ed2e:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
    ed30:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
    ed34:	d41c      	bmi.n	ed70 <msg_free+0x4c>
    ed36:	b1dd      	cbz	r5, ed70 <msg_free+0x4c>
		uint32_t smask = 0;
    ed38:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    ed3a:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    ed3c:	4631      	mov	r1, r6
    ed3e:	9801      	ldr	r0, [sp, #4]
    ed40:	f00f f897 	bl	1de72 <log_msg_arg_get>
    ed44:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    ed46:	f7ff fe39 	bl	e9bc <log_is_strdup>
    ed4a:	b170      	cbz	r0, ed6a <msg_free+0x46>
				if (smask == 0) {
    ed4c:	b934      	cbnz	r4, ed5c <msg_free+0x38>
					smask = z_log_get_s_mask(
    ed4e:	9b01      	ldr	r3, [sp, #4]
    ed50:	4629      	mov	r1, r5
    ed52:	6918      	ldr	r0, [r3, #16]
    ed54:	f00e ffa2 	bl	1dc9c <z_log_get_s_mask>
					if (smask == 0) {
    ed58:	4604      	mov	r4, r0
    ed5a:	b148      	cbz	r0, ed70 <msg_free+0x4c>
				if (smask & BIT(i)) {
    ed5c:	fa24 f306 	lsr.w	r3, r4, r6
    ed60:	07d9      	lsls	r1, r3, #31
    ed62:	d502      	bpl.n	ed6a <msg_free+0x46>
					log_free(buf);
    ed64:	4638      	mov	r0, r7
    ed66:	f7ff ff91 	bl	ec8c <log_free>
		for (i = 0; i < nargs; i++) {
    ed6a:	3601      	adds	r6, #1
    ed6c:	42ae      	cmp	r6, r5
    ed6e:	d3e5      	bcc.n	ed3c <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
    ed70:	9b01      	ldr	r3, [sp, #4]
    ed72:	7a1a      	ldrb	r2, [r3, #8]
    ed74:	0792      	lsls	r2, r2, #30
    ed76:	d504      	bpl.n	ed82 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
    ed78:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    ed7a:	4c08      	ldr	r4, [pc, #32]	; (ed9c <msg_free+0x78>)
    ed7c:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    ed7e:	9b03      	ldr	r3, [sp, #12]
    ed80:	b92b      	cbnz	r3, ed8e <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    ed82:	4806      	ldr	r0, [pc, #24]	; (ed9c <msg_free+0x78>)
    ed84:	a901      	add	r1, sp, #4
    ed86:	f00d fa4d 	bl	1c224 <k_mem_slab_free>
}
    ed8a:	b005      	add	sp, #20
    ed8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    ed8e:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    ed90:	4620      	mov	r0, r4
    ed92:	a903      	add	r1, sp, #12
    ed94:	f00d fa46 	bl	1c224 <k_mem_slab_free>
		cont = next;
    ed98:	9503      	str	r5, [sp, #12]
    ed9a:	e7f0      	b.n	ed7e <msg_free+0x5a>
    ed9c:	20020828 	.word	0x20020828

0000eda0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    eda0:	b40e      	push	{r1, r2, r3}
    eda2:	b503      	push	{r0, r1, lr}
    eda4:	ab03      	add	r3, sp, #12
    eda6:	f853 2b04 	ldr.w	r2, [r3], #4
    edaa:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    edac:	4804      	ldr	r0, [pc, #16]	; (edc0 <print_formatted+0x20>)
	va_start(args, fmt);
    edae:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    edb0:	f7fe fdbc 	bl	d92c <z_vprintk>
#endif
	va_end(args);

	return length;
}
    edb4:	2000      	movs	r0, #0
    edb6:	b002      	add	sp, #8
    edb8:	f85d eb04 	ldr.w	lr, [sp], #4
    edbc:	b003      	add	sp, #12
    edbe:	4770      	bx	lr
    edc0:	0001e277 	.word	0x0001e277

0000edc4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    edc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    edc8:	f011 0402 	ands.w	r4, r1, #2
{
    edcc:	b085      	sub	sp, #20
    edce:	4606      	mov	r6, r0
    edd0:	4690      	mov	r8, r2
    edd2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    edd6:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    edda:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    edde:	d007      	beq.n	edf0 <prefix_print+0x2c>
	if (!format) {
    ede0:	f011 0f44 	tst.w	r1, #68	; 0x44
    ede4:	d137      	bne.n	ee56 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    ede6:	461a      	mov	r2, r3
    ede8:	4932      	ldr	r1, [pc, #200]	; (eeb4 <prefix_print+0xf0>)
    edea:	f7ff ffd9 	bl	eda0 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    edee:	4604      	mov	r4, r0
	if (color) {
    edf0:	f1b9 0f00 	cmp.w	r9, #0
    edf4:	d00a      	beq.n	ee0c <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
    edf6:	4b30      	ldr	r3, [pc, #192]	; (eeb8 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    edf8:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
    edfa:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    edfe:	4b2f      	ldr	r3, [pc, #188]	; (eebc <prefix_print+0xf8>)
    ee00:	492f      	ldr	r1, [pc, #188]	; (eec0 <prefix_print+0xfc>)
    ee02:	2a00      	cmp	r2, #0
    ee04:	bf08      	it	eq
    ee06:	461a      	moveq	r2, r3
    ee08:	f7ff ffca 	bl	eda0 <print_formatted>
	if (level_on) {
    ee0c:	b13d      	cbz	r5, ee1e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    ee0e:	4b2d      	ldr	r3, [pc, #180]	; (eec4 <prefix_print+0x100>)
    ee10:	4630      	mov	r0, r6
    ee12:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    ee16:	492c      	ldr	r1, [pc, #176]	; (eec8 <prefix_print+0x104>)
    ee18:	f7ff ffc2 	bl	eda0 <print_formatted>
    ee1c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    ee1e:	f1b8 0f00 	cmp.w	r8, #0
    ee22:	d044      	beq.n	eeae <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    ee24:	2301      	movs	r3, #1
    ee26:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    ee2a:	4b28      	ldr	r3, [pc, #160]	; (eecc <prefix_print+0x108>)
    ee2c:	f017 0f10 	tst.w	r7, #16
    ee30:	4f27      	ldr	r7, [pc, #156]	; (eed0 <prefix_print+0x10c>)
    ee32:	bf18      	it	ne
    ee34:	461f      	movne	r7, r3
    ee36:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    ee3a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    ee3e:	f7ff fd3d 	bl	e8bc <log_source_name_get>
    ee42:	4639      	mov	r1, r7
    ee44:	4602      	mov	r2, r0
    ee46:	4630      	mov	r0, r6
    ee48:	f7ff ffaa 	bl	eda0 <print_formatted>
    ee4c:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    ee4e:	4420      	add	r0, r4
    ee50:	b005      	add	sp, #20
    ee52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    ee56:	4a1f      	ldr	r2, [pc, #124]	; (eed4 <prefix_print+0x110>)
    ee58:	6811      	ldr	r1, [r2, #0]
    ee5a:	b331      	cbz	r1, eeaa <prefix_print+0xe6>
		timestamp /= timestamp_div;
    ee5c:	4a1e      	ldr	r2, [pc, #120]	; (eed8 <prefix_print+0x114>)
    ee5e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    ee62:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
    ee64:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
    ee68:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
    ee6c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    ee70:	fbb4 f2fe 	udiv	r2, r4, lr
    ee74:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    ee78:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    ee7c:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ee80:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
    ee84:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ee88:	fb01 441b 	mls	r4, r1, fp, r4
    ee8c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    ee90:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    ee94:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    ee98:	e9cd b101 	strd	fp, r1, [sp, #4]
    ee9c:	fb0a e113 	mls	r1, sl, r3, lr
    eea0:	9100      	str	r1, [sp, #0]
    eea2:	490e      	ldr	r1, [pc, #56]	; (eedc <prefix_print+0x118>)
    eea4:	f7ff ff7c 	bl	eda0 <print_formatted>
    eea8:	e7a1      	b.n	edee <prefix_print+0x2a>
		length = 0;
    eeaa:	4608      	mov	r0, r1
    eeac:	e79f      	b.n	edee <prefix_print+0x2a>
	total += print_formatted(log_output,
    eeae:	4f08      	ldr	r7, [pc, #32]	; (eed0 <prefix_print+0x10c>)
    eeb0:	e7c1      	b.n	ee36 <prefix_print+0x72>
    eeb2:	bf00      	nop
    eeb4:	00021946 	.word	0x00021946
    eeb8:	00020ef8 	.word	0x00020ef8
    eebc:	00021938 	.word	0x00021938
    eec0:	000225d1 	.word	0x000225d1
    eec4:	00020f0c 	.word	0x00020f0c
    eec8:	0002196b 	.word	0x0002196b
    eecc:	00021942 	.word	0x00021942
    eed0:	0002193d 	.word	0x0002193d
    eed4:	20020844 	.word	0x20020844
    eed8:	20020848 	.word	0x20020848
    eedc:	0002194f 	.word	0x0002194f

0000eee0 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    eee0:	b538      	push	{r3, r4, r5, lr}
    eee2:	460c      	mov	r4, r1
	if (color) {
    eee4:	07e1      	lsls	r1, r4, #31
{
    eee6:	4605      	mov	r5, r0
	if (color) {
    eee8:	d503      	bpl.n	eef2 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    eeea:	4a08      	ldr	r2, [pc, #32]	; (ef0c <postfix_print+0x2c>)
    eeec:	4908      	ldr	r1, [pc, #32]	; (ef10 <postfix_print+0x30>)
    eeee:	f7ff ff57 	bl	eda0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    eef2:	06e2      	lsls	r2, r4, #27
    eef4:	d408      	bmi.n	ef08 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    eef6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    eef8:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    eefa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
    eefe:	bf4c      	ite	mi
    ef00:	4904      	ldrmi	r1, [pc, #16]	; (ef14 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    ef02:	4905      	ldrpl	r1, [pc, #20]	; (ef18 <postfix_print+0x38>)
    ef04:	f7ff bf4c 	b.w	eda0 <print_formatted>
}
    ef08:	bd38      	pop	{r3, r4, r5, pc}
    ef0a:	bf00      	nop
    ef0c:	00021938 	.word	0x00021938
    ef10:	000225d1 	.word	0x000225d1
    ef14:	00022cd2 	.word	0x00022cd2
    ef18:	00022cd1 	.word	0x00022cd1

0000ef1c <hexdump_line_print>:
{
    ef1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ef20:	461d      	mov	r5, r3
    ef22:	9b08      	ldr	r3, [sp, #32]
    ef24:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ef26:	06da      	lsls	r2, r3, #27
{
    ef28:	4604      	mov	r4, r0
    ef2a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    ef2c:	d405      	bmi.n	ef3a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    ef2e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    ef30:	bf4c      	ite	mi
    ef32:	492a      	ldrmi	r1, [pc, #168]	; (efdc <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    ef34:	492a      	ldrpl	r1, [pc, #168]	; (efe0 <hexdump_line_print+0xc4>)
    ef36:	f7ff ff33 	bl	eda0 <print_formatted>
{
    ef3a:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
    ef3e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; efe8 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
    ef42:	45a8      	cmp	r8, r5
    ef44:	db2a      	blt.n	ef9c <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ef46:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
    ef48:	f8df 80a0 	ldr.w	r8, [pc, #160]	; efec <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    ef4c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; eff0 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    ef50:	f8df a094 	ldr.w	sl, [pc, #148]	; efe8 <hexdump_line_print+0xcc>
		if (i < length) {
    ef54:	42bd      	cmp	r5, r7
    ef56:	d22f      	bcs.n	efb8 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    ef58:	4649      	mov	r1, r9
    ef5a:	4620      	mov	r0, r4
    ef5c:	5d72      	ldrb	r2, [r6, r5]
    ef5e:	f7ff ff1f 	bl	eda0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ef62:	3501      	adds	r5, #1
    ef64:	2d10      	cmp	r5, #16
    ef66:	d120      	bne.n	efaa <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    ef68:	4620      	mov	r0, r4
    ef6a:	491e      	ldr	r1, [pc, #120]	; (efe4 <hexdump_line_print+0xc8>)
    ef6c:	f7ff ff18 	bl	eda0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ef70:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
    ef72:	f8df 8074 	ldr.w	r8, [pc, #116]	; efe8 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    ef76:	f8df 907c 	ldr.w	r9, [pc, #124]	; eff4 <hexdump_line_print+0xd8>
		if (i < length) {
    ef7a:	42af      	cmp	r7, r5
    ef7c:	d928      	bls.n	efd0 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    ef7e:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    ef80:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
    ef82:	f1a2 0320 	sub.w	r3, r2, #32
    ef86:	2b5f      	cmp	r3, #95	; 0x5f
    ef88:	bf28      	it	cs
    ef8a:	222e      	movcs	r2, #46	; 0x2e
    ef8c:	4620      	mov	r0, r4
    ef8e:	f7ff ff07 	bl	eda0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ef92:	3501      	adds	r5, #1
    ef94:	2d10      	cmp	r5, #16
    ef96:	d114      	bne.n	efc2 <hexdump_line_print+0xa6>
}
    ef98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    ef9c:	4649      	mov	r1, r9
    ef9e:	4620      	mov	r0, r4
    efa0:	f7ff fefe 	bl	eda0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    efa4:	f108 0801 	add.w	r8, r8, #1
    efa8:	e7cb      	b.n	ef42 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    efaa:	076a      	lsls	r2, r5, #29
    efac:	d1d2      	bne.n	ef54 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    efae:	4651      	mov	r1, sl
    efb0:	4620      	mov	r0, r4
    efb2:	f7ff fef5 	bl	eda0 <print_formatted>
    efb6:	e7cd      	b.n	ef54 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    efb8:	4641      	mov	r1, r8
    efba:	4620      	mov	r0, r4
    efbc:	f7ff fef0 	bl	eda0 <print_formatted>
    efc0:	e7cf      	b.n	ef62 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    efc2:	076b      	lsls	r3, r5, #29
    efc4:	d1d9      	bne.n	ef7a <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    efc6:	4641      	mov	r1, r8
    efc8:	4620      	mov	r0, r4
    efca:	f7ff fee9 	bl	eda0 <print_formatted>
    efce:	e7d4      	b.n	ef7a <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    efd0:	4641      	mov	r1, r8
    efd2:	4620      	mov	r0, r4
    efd4:	f7ff fee4 	bl	eda0 <print_formatted>
    efd8:	e7db      	b.n	ef92 <hexdump_line_print+0x76>
    efda:	bf00      	nop
    efdc:	00022cd2 	.word	0x00022cd2
    efe0:	00022cd1 	.word	0x00022cd1
    efe4:	0002197b 	.word	0x0002197b
    efe8:	00021979 	.word	0x00021979
    efec:	00021977 	.word	0x00021977
    eff0:	00021971 	.word	0x00021971
    eff4:	0002197d 	.word	0x0002197d

0000eff8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    eff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    effc:	7a8b      	ldrb	r3, [r1, #10]
    effe:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f000:	f013 0807 	ands.w	r8, r3, #7
{
    f004:	4605      	mov	r5, r0
    f006:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f008:	7a0a      	ldrb	r2, [r1, #8]
    f00a:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f00c:	d021      	beq.n	f052 <log_output_msg_process+0x5a>
    f00e:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
    f010:	8949      	ldrh	r1, [r1, #10]
    f012:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f016:	f3c1 1189 	ubfx	r1, r1, #6, #10
    f01a:	e9cd 8300 	strd	r8, r3, [sp]
    f01e:	9102      	str	r1, [sp, #8]
    f020:	68f3      	ldr	r3, [r6, #12]
    f022:	4639      	mov	r1, r7
    f024:	f002 0201 	and.w	r2, r2, #1
    f028:	f7ff fecc 	bl	edc4 <prefix_print>
    f02c:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    f02e:	7a34      	ldrb	r4, [r6, #8]
    f030:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    f032:	f014 0401 	ands.w	r4, r4, #1
    f036:	d00e      	beq.n	f056 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    f038:	4629      	mov	r1, r5
    f03a:	4630      	mov	r0, r6
    f03c:	f00e ffb1 	bl	1dfa2 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    f040:	f1b8 0f00 	cmp.w	r8, #0
    f044:	d02b      	beq.n	f09e <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    f046:	4642      	mov	r2, r8
    f048:	4639      	mov	r1, r7
    f04a:	4628      	mov	r0, r5
    f04c:	f7ff ff48 	bl	eee0 <postfix_print>
    f050:	e025      	b.n	f09e <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    f052:	46c1      	mov	r9, r8
    f054:	e7eb      	b.n	f02e <log_output_msg_process+0x36>
	} else if (raw_string) {
    f056:	f1b8 0f00 	cmp.w	r8, #0
    f05a:	d126      	bne.n	f0aa <log_output_msg_process+0xb2>
	size_t offset = 0;
    f05c:	4627      	mov	r7, r4
		length = log_output->size;
    f05e:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f060:	aa06      	add	r2, sp, #24
		length = log_output->size;
    f062:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    f064:	4630      	mov	r0, r6
    f066:	463b      	mov	r3, r7
    f068:	68a9      	ldr	r1, [r5, #8]
    f06a:	f00e ff86 	bl	1df7a <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    f06e:	9a06      	ldr	r2, [sp, #24]
    f070:	686b      	ldr	r3, [r5, #4]
    f072:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    f074:	b13a      	cbz	r2, f086 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    f076:	68ab      	ldr	r3, [r5, #8]
    f078:	4413      	add	r3, r2
    f07a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    f07e:	f1a4 030a 	sub.w	r3, r4, #10
    f082:	425c      	negs	r4, r3
    f084:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    f086:	4628      	mov	r0, r5
    f088:	f00f f8e8 	bl	1e25c <log_output_flush>
		offset += length;
    f08c:	9b06      	ldr	r3, [sp, #24]
    f08e:	441f      	add	r7, r3
	} while (length > 0);
    f090:	2b00      	cmp	r3, #0
    f092:	d1e4      	bne.n	f05e <log_output_msg_process+0x66>
	if (eol) {
    f094:	b11c      	cbz	r4, f09e <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    f096:	4628      	mov	r0, r5
    f098:	4913      	ldr	r1, [pc, #76]	; (f0e8 <log_output_msg_process+0xf0>)
    f09a:	f7ff fe81 	bl	eda0 <print_formatted>
	}

	log_output_flush(log_output);
    f09e:	4628      	mov	r0, r5
    f0a0:	f00f f8dc 	bl	1e25c <log_output_flush>
}
    f0a4:	b00a      	add	sp, #40	; 0x28
    f0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    f0aa:	4630      	mov	r0, r6
    f0ac:	f00e ff0f 	bl	1dece <log_msg_str_get>
    f0b0:	490e      	ldr	r1, [pc, #56]	; (f0ec <log_output_msg_process+0xf4>)
    f0b2:	4602      	mov	r2, r0
    f0b4:	4628      	mov	r0, r5
    f0b6:	f7ff fe73 	bl	eda0 <print_formatted>
		length = sizeof(buf);
    f0ba:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f0be:	aa05      	add	r2, sp, #20
    f0c0:	4623      	mov	r3, r4
    f0c2:	4630      	mov	r0, r6
    f0c4:	a906      	add	r1, sp, #24
		length = sizeof(buf);
    f0c6:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    f0ca:	f00e ff56 	bl	1df7a <log_msg_hexdump_data_get>
		if (length) {
    f0ce:	9a05      	ldr	r2, [sp, #20]
    f0d0:	2a00      	cmp	r2, #0
    f0d2:	d0b8      	beq.n	f046 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    f0d4:	464b      	mov	r3, r9
    f0d6:	4628      	mov	r0, r5
    f0d8:	9700      	str	r7, [sp, #0]
    f0da:	a906      	add	r1, sp, #24
    f0dc:	f7ff ff1e 	bl	ef1c <hexdump_line_print>
			offset += length;
    f0e0:	9b05      	ldr	r3, [sp, #20]
    f0e2:	441c      	add	r4, r3
		length = sizeof(buf);
    f0e4:	e7eb      	b.n	f0be <log_output_msg_process+0xc6>
    f0e6:	bf00      	nop
    f0e8:	00021980 	.word	0x00021980
    f0ec:	000225d1 	.word	0x000225d1

0000f0f0 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f0f0:	f242 730f 	movw	r3, #9999	; 0x270f
{
    f0f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f0f6:	428b      	cmp	r3, r1
    f0f8:	bf28      	it	cs
    f0fa:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    f0fc:	6805      	ldr	r5, [r0, #0]
{
    f0fe:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    f100:	2105      	movs	r1, #5
    f102:	4668      	mov	r0, sp
    f104:	4a0d      	ldr	r2, [pc, #52]	; (f13c <log_output_dropped_process+0x4c>)
    f106:	f00e fa18 	bl	1d53a <snprintk>
    f10a:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    f10c:	6863      	ldr	r3, [r4, #4]
    f10e:	4628      	mov	r0, r5
    f110:	220b      	movs	r2, #11
    f112:	685b      	ldr	r3, [r3, #4]
    f114:	490a      	ldr	r1, [pc, #40]	; (f140 <log_output_dropped_process+0x50>)
    f116:	f00e ff37 	bl	1df88 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    f11a:	6863      	ldr	r3, [r4, #4]
    f11c:	4632      	mov	r2, r6
    f11e:	4669      	mov	r1, sp
    f120:	4628      	mov	r0, r5
    f122:	685b      	ldr	r3, [r3, #4]
    f124:	f00e ff30 	bl	1df88 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    f128:	6863      	ldr	r3, [r4, #4]
    f12a:	221b      	movs	r2, #27
    f12c:	4628      	mov	r0, r5
    f12e:	685b      	ldr	r3, [r3, #4]
    f130:	4904      	ldr	r1, [pc, #16]	; (f144 <log_output_dropped_process+0x54>)
    f132:	f00e ff29 	bl	1df88 <buffer_write>
		     log_output->control_block->ctx);
}
    f136:	b002      	add	sp, #8
    f138:	bd70      	pop	{r4, r5, r6, pc}
    f13a:	bf00      	nop
    f13c:	000215dc 	.word	0x000215dc
    f140:	000219be 	.word	0x000219be
    f144:	000219a2 	.word	0x000219a2

0000f148 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    f148:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    f14a:	2100      	movs	r1, #0
	timestamp_div = 1U;
    f14c:	4a07      	ldr	r2, [pc, #28]	; (f16c <log_output_timestamp_freq_set+0x24>)
{
    f14e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
    f150:	4c07      	ldr	r4, [pc, #28]	; (f170 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    f152:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    f154:	42a0      	cmp	r0, r4
    f156:	d804      	bhi.n	f162 <log_output_timestamp_freq_set+0x1a>
    f158:	b101      	cbz	r1, f15c <log_output_timestamp_freq_set+0x14>
    f15a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    f15c:	4b05      	ldr	r3, [pc, #20]	; (f174 <log_output_timestamp_freq_set+0x2c>)
    f15e:	6018      	str	r0, [r3, #0]
}
    f160:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
    f162:	2101      	movs	r1, #1
		frequency /= 2U;
    f164:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    f166:	005b      	lsls	r3, r3, #1
    f168:	e7f4      	b.n	f154 <log_output_timestamp_freq_set+0xc>
    f16a:	bf00      	nop
    f16c:	20020848 	.word	0x20020848
    f170:	000f4240 	.word	0x000f4240
    f174:	20020844 	.word	0x20020844

0000f178 <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    f178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f17a:	460d      	mov	r5, r1
    f17c:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    f17e:	4f06      	ldr	r7, [pc, #24]	; (f198 <char_out+0x20>)
    f180:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    f182:	42b4      	cmp	r4, r6
    f184:	d101      	bne.n	f18a <char_out+0x12>
	}

	return length;
}
    f186:	4628      	mov	r0, r5
    f188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    f18a:	6838      	ldr	r0, [r7, #0]
    f18c:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    f190:	6883      	ldr	r3, [r0, #8]
    f192:	685b      	ldr	r3, [r3, #4]
    f194:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    f196:	e7f4      	b.n	f182 <char_out+0xa>
    f198:	20020860 	.word	0x20020860

0000f19c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    f19c:	4801      	ldr	r0, [pc, #4]	; (f1a4 <panic+0x8>)
    f19e:	f00f b85d 	b.w	1e25c <log_output_flush>
    f1a2:	bf00      	nop
    f1a4:	00020f38 	.word	0x00020f38

0000f1a8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    f1a8:	4801      	ldr	r0, [pc, #4]	; (f1b0 <dropped+0x8>)
    f1aa:	f7ff bfa1 	b.w	f0f0 <log_output_dropped_process>
    f1ae:	bf00      	nop
    f1b0:	00020f38 	.word	0x00020f38

0000f1b4 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    f1b4:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    f1b6:	4803      	ldr	r0, [pc, #12]	; (f1c4 <log_backend_uart_init+0x10>)
    f1b8:	f00c fe58 	bl	1be6c <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f1bc:	4b02      	ldr	r3, [pc, #8]	; (f1c8 <log_backend_uart_init+0x14>)
    f1be:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
}
    f1c0:	bd08      	pop	{r3, pc}
    f1c2:	bf00      	nop
    f1c4:	000219ca 	.word	0x000219ca
    f1c8:	20020860 	.word	0x20020860

0000f1cc <put>:
{
    f1cc:	b510      	push	{r4, lr}
    f1ce:	460c      	mov	r4, r1
	log_msg_get(msg);
    f1d0:	4608      	mov	r0, r1
    f1d2:	f00e fe42 	bl	1de5a <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    f1d6:	4621      	mov	r1, r4
    f1d8:	4804      	ldr	r0, [pc, #16]	; (f1ec <put+0x20>)
    f1da:	220f      	movs	r2, #15
    f1dc:	f7ff ff0c 	bl	eff8 <log_output_msg_process>
	log_msg_put(msg);
    f1e0:	4620      	mov	r0, r4
}
    f1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1e6:	f00e be63 	b.w	1deb0 <log_msg_put>
    f1ea:	bf00      	nop
    f1ec:	00020f38 	.word	0x00020f38

0000f1f0 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
    f1f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f1f2:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    f1f4:	4c0f      	ldr	r4, [pc, #60]	; (f234 <z_impl_zsock_socket+0x44>)
    f1f6:	4e10      	ldr	r6, [pc, #64]	; (f238 <z_impl_zsock_socket+0x48>)
    f1f8:	42b4      	cmp	r4, r6
    f1fa:	d307      	bcc.n	f20c <z_impl_zsock_socket+0x1c>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
    f1fc:	f00f f856 	bl	1e2ac <z_errno>
    f200:	232f      	movs	r3, #47	; 0x2f
    f202:	6003      	str	r3, [r0, #0]
	return -1;
}
    f204:	f04f 30ff 	mov.w	r0, #4294967295
    f208:	b002      	add	sp, #8
    f20a:	bd70      	pop	{r4, r5, r6, pc}
		if (sock_family->family != family &&
    f20c:	6823      	ldr	r3, [r4, #0]
    f20e:	42ab      	cmp	r3, r5
    f210:	d000      	beq.n	f214 <z_impl_zsock_socket+0x24>
    f212:	b96b      	cbnz	r3, f230 <z_impl_zsock_socket+0x40>
		if (!sock_family->is_supported(family, type, proto)) {
    f214:	4628      	mov	r0, r5
    f216:	6863      	ldr	r3, [r4, #4]
    f218:	e9cd 1200 	strd	r1, r2, [sp]
    f21c:	4798      	blx	r3
    f21e:	e9dd 1200 	ldrd	r1, r2, [sp]
    f222:	b128      	cbz	r0, f230 <z_impl_zsock_socket+0x40>
		return sock_family->handler(family, type, proto);
    f224:	4628      	mov	r0, r5
    f226:	68a3      	ldr	r3, [r4, #8]
}
    f228:	b002      	add	sp, #8
    f22a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
    f22e:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
    f230:	340c      	adds	r4, #12
    f232:	e7e1      	b.n	f1f8 <z_impl_zsock_socket+0x8>
    f234:	00020e04 	.word	0x00020e04
    f238:	00020e10 	.word	0x00020e10

0000f23c <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
    f23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
    f240:	1e14      	subs	r4, r2, #0
{
    f242:	b09b      	sub	sp, #108	; 0x6c
    f244:	4606      	mov	r6, r0
    f246:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
    f248:	db30      	blt.n	f2ac <z_impl_zsock_poll+0x70>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    f24a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    f24e:	f240 30e7 	movw	r0, #999	; 0x3e7
    f252:	2100      	movs	r1, #0
    f254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f258:	2300      	movs	r3, #0
    f25a:	fbc5 0104 	smlal	r0, r1, r5, r4
    f25e:	f7fd fb25 	bl	c8ac <__aeabi_uldivmod>
    f262:	4682      	mov	sl, r0
    f264:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
    f266:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
    f268:	4650      	mov	r0, sl
    f26a:	4659      	mov	r1, fp
    f26c:	f011 fadc 	bl	20828 <z_timeout_end_calc>

	pev = poll_events;
    f270:	ab0b      	add	r3, sp, #44	; 0x2c
    f272:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
    f274:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
    f276:	4633      	mov	r3, r6
	bool offload = false;
    f278:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
    f27a:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
    f27e:	f8dd 900c 	ldr.w	r9, [sp, #12]
    f282:	f1b9 0f00 	cmp.w	r9, #0
    f286:	d118      	bne.n	f2ba <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
    f288:	f1b8 0f00 	cmp.w	r8, #0
    f28c:	d049      	beq.n	f322 <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
    f28e:	9b03      	ldr	r3, [sp, #12]
    f290:	9401      	str	r4, [sp, #4]
    f292:	9300      	str	r3, [sp, #0]
    f294:	f44f 7282 	mov.w	r2, #260	; 0x104
    f298:	4633      	mov	r3, r6
    f29a:	4629      	mov	r1, r5
    f29c:	4638      	mov	r0, r7
    f29e:	f00f f807 	bl	1e2b0 <z_fdtable_call_ioctl>
    f2a2:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
    f2a4:	4620      	mov	r0, r4
    f2a6:	b01b      	add	sp, #108	; 0x6c
    f2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
    f2ac:	f04f 3aff 	mov.w	sl, #4294967295
    f2b0:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
    f2b4:	f04f 34ff 	mov.w	r4, #4294967295
    f2b8:	e7d5      	b.n	f266 <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
    f2ba:	6818      	ldr	r0, [r3, #0]
    f2bc:	2800      	cmp	r0, #0
    f2be:	db2c      	blt.n	f31a <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
    f2c0:	a90a      	add	r1, sp, #40	; 0x28
    f2c2:	9306      	str	r3, [sp, #24]
    f2c4:	f7fe fa66 	bl	d794 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
    f2c8:	9b06      	ldr	r3, [sp, #24]
    f2ca:	4601      	mov	r1, r0
    f2cc:	b328      	cbz	r0, f31a <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
    f2ce:	aa1a      	add	r2, sp, #104	; 0x68
    f2d0:	9201      	str	r2, [sp, #4]
    f2d2:	aa09      	add	r2, sp, #36	; 0x24
    f2d4:	9200      	str	r2, [sp, #0]
    f2d6:	9006      	str	r0, [sp, #24]
    f2d8:	f44f 7281 	mov.w	r2, #258	; 0x102
    f2dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    f2de:	9307      	str	r3, [sp, #28]
    f2e0:	f00e ffe6 	bl	1e2b0 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
    f2e4:	f110 0f45 	cmn.w	r0, #69	; 0x45
		result = z_fdtable_call_ioctl(vtable, ctx,
    f2e8:	4602      	mov	r2, r0
		if (result == -EALREADY) {
    f2ea:	9b07      	ldr	r3, [sp, #28]
    f2ec:	d011      	beq.n	f312 <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
    f2ee:	f110 0f12 	cmn.w	r0, #18
    f2f2:	9906      	ldr	r1, [sp, #24]
    f2f4:	d105      	bne.n	f302 <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
    f2f6:	b90f      	cbnz	r7, f2fc <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
    f2f8:	460d      	mov	r5, r1
    f2fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
    f2fc:	f04f 0801 	mov.w	r8, #1
    f300:	e00b      	b.n	f31a <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
    f302:	b150      	cbz	r0, f31a <z_impl_zsock_poll+0xde>
    f304:	9203      	str	r2, [sp, #12]
				errno = -result;
    f306:	f00e ffd1 	bl	1e2ac <z_errno>
    f30a:	9a03      	ldr	r2, [sp, #12]
    f30c:	4252      	negs	r2, r2
    f30e:	6002      	str	r2, [r0, #0]
				return -1;
    f310:	e03e      	b.n	f390 <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
    f312:	f04f 0a00 	mov.w	sl, #0
    f316:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
    f31a:	3308      	adds	r3, #8
    f31c:	f109 39ff 	add.w	r9, r9, #4294967295
    f320:	e7af      	b.n	f282 <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    f322:	ea5a 030b 	orrs.w	r3, sl, fp
    f326:	d016      	beq.n	f356 <z_impl_zsock_poll+0x11a>
    f328:	f1bb 3fff 	cmp.w	fp, #4294967295
    f32c:	bf08      	it	eq
    f32e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
    f332:	d010      	beq.n	f356 <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
    f334:	f00d ff6e 	bl	1d214 <z_tick_get>
    f338:	9b04      	ldr	r3, [sp, #16]
    f33a:	ebb3 0a00 	subs.w	sl, r3, r0
    f33e:	9b05      	ldr	r3, [sp, #20]
    f340:	eb63 0b01 	sbc.w	fp, r3, r1
    f344:	f1ba 0f00 	cmp.w	sl, #0
    f348:	f17b 0300 	sbcs.w	r3, fp, #0
    f34c:	bfbc      	itt	lt
    f34e:	f04f 0a00 	movlt.w	sl, #0
    f352:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
    f356:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
    f35a:	9909      	ldr	r1, [sp, #36]	; 0x24
    f35c:	ac0b      	add	r4, sp, #44	; 0x2c
    f35e:	4b34      	ldr	r3, [pc, #208]	; (f430 <z_impl_zsock_poll+0x1f4>)
    f360:	1b09      	subs	r1, r1, r4
    f362:	1089      	asrs	r1, r1, #2
    f364:	4359      	muls	r1, r3
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    f366:	465b      	mov	r3, fp
    f368:	4652      	mov	r2, sl
    f36a:	4620      	mov	r0, r4
    f36c:	f00d ffee 	bl	1d34c <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
    f370:	f100 030b 	add.w	r3, r0, #11
    f374:	2b0b      	cmp	r3, #11
    f376:	4607      	mov	r7, r0
    f378:	d806      	bhi.n	f388 <z_impl_zsock_poll+0x14c>
    f37a:	f640 0581 	movw	r5, #2177	; 0x881
    f37e:	40dd      	lsrs	r5, r3
    f380:	43ed      	mvns	r5, r5
    f382:	f015 0501 	ands.w	r5, r5, #1
    f386:	d006      	beq.n	f396 <z_impl_zsock_poll+0x15a>
			errno = -ret;
    f388:	f00e ff90 	bl	1e2ac <z_errno>
    f38c:	427f      	negs	r7, r7
    f38e:	6007      	str	r7, [r0, #0]
			return -1;
    f390:	f04f 34ff 	mov.w	r4, #4294967295
    f394:	e786      	b.n	f2a4 <z_impl_zsock_poll+0x68>
		pev = poll_events;
    f396:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
    f398:	46b0      	mov	r8, r6
		ret = 0;
    f39a:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
    f39c:	9f03      	ldr	r7, [sp, #12]
    f39e:	b9ef      	cbnz	r7, f3dc <z_impl_zsock_poll+0x1a0>
		if (retry) {
    f3a0:	2d00      	cmp	r5, #0
    f3a2:	f43f af7f 	beq.w	f2a4 <z_impl_zsock_poll+0x68>
			if (ret > 0) {
    f3a6:	2c00      	cmp	r4, #0
    f3a8:	f73f af7c 	bgt.w	f2a4 <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f3ac:	ea5a 030b 	orrs.w	r3, sl, fp
    f3b0:	f43f af78 	beq.w	f2a4 <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f3b4:	f1bb 3fff 	cmp.w	fp, #4294967295
    f3b8:	bf08      	it	eq
    f3ba:	f1ba 3fff 	cmpeq.w	sl, #4294967295
    f3be:	d0cc      	beq.n	f35a <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
    f3c0:	f00d ff28 	bl	1d214 <z_tick_get>
    f3c4:	9b04      	ldr	r3, [sp, #16]
    f3c6:	ebb3 0a00 	subs.w	sl, r3, r0
    f3ca:	9b05      	ldr	r3, [sp, #20]
    f3cc:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
    f3d0:	f1ba 0f01 	cmp.w	sl, #1
    f3d4:	f17b 0300 	sbcs.w	r3, fp, #0
    f3d8:	dabf      	bge.n	f35a <z_impl_zsock_poll+0x11e>
    f3da:	e763      	b.n	f2a4 <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
    f3dc:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
    f3e0:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
    f3e4:	2800      	cmp	r0, #0
    f3e6:	db1c      	blt.n	f422 <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
    f3e8:	a90a      	add	r1, sp, #40	; 0x28
    f3ea:	f7fe f9d3 	bl	d794 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
    f3ee:	4601      	mov	r1, r0
    f3f0:	b920      	cbnz	r0, f3fc <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
    f3f2:	2220      	movs	r2, #32
    f3f4:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
    f3f8:	3401      	adds	r4, #1
    f3fa:	e012      	b.n	f422 <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
    f3fc:	ab09      	add	r3, sp, #36	; 0x24
    f3fe:	f240 1203 	movw	r2, #259	; 0x103
    f402:	9300      	str	r3, [sp, #0]
    f404:	980a      	ldr	r0, [sp, #40]	; 0x28
    f406:	4643      	mov	r3, r8
    f408:	f00e ff52 	bl	1e2b0 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
    f40c:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
    f410:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
    f412:	d00a      	beq.n	f42a <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
    f414:	2800      	cmp	r0, #0
    f416:	f47f af75 	bne.w	f304 <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
    f41a:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
    f41e:	2a00      	cmp	r2, #0
    f420:	d1ea      	bne.n	f3f8 <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
    f422:	f108 0808 	add.w	r8, r8, #8
    f426:	3f01      	subs	r7, #1
    f428:	e7b9      	b.n	f39e <z_impl_zsock_poll+0x162>
				retry = true;
    f42a:	2501      	movs	r5, #1
    f42c:	e7f9      	b.n	f422 <z_impl_zsock_poll+0x1e6>
    f42e:	bf00      	nop
    f430:	cccccccd 	.word	0xcccccccd

0000f434 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
    f434:	4b01      	ldr	r3, [pc, #4]	; (f43c <socket_offload_dns_register+0x8>)
    f436:	6018      	str	r0, [r3, #0]
}
    f438:	4770      	bx	lr
    f43a:	bf00      	nop
    f43c:	20020864 	.word	0x20020864

0000f440 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
    f440:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
    f442:	4c03      	ldr	r4, [pc, #12]	; (f450 <socket_offload_getaddrinfo+0x10>)
    f444:	6824      	ldr	r4, [r4, #0]
    f446:	6824      	ldr	r4, [r4, #0]
    f448:	46a4      	mov	ip, r4
}
    f44a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
    f44e:	4760      	bx	ip
    f450:	20020864 	.word	0x20020864

0000f454 <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
    f454:	4b01      	ldr	r3, [pc, #4]	; (f45c <socket_offload_freeaddrinfo+0x8>)
    f456:	681b      	ldr	r3, [r3, #0]
    f458:	685b      	ldr	r3, [r3, #4]
    f45a:	4718      	bx	r3
    f45c:	20020864 	.word	0x20020864

0000f460 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    f460:	b508      	push	{r3, lr}
    f462:	4806      	ldr	r0, [pc, #24]	; (f47c <uart_console_init+0x1c>)
    f464:	f00c fd02 	bl	1be6c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    f468:	4b05      	ldr	r3, [pc, #20]	; (f480 <uart_console_init+0x20>)
    f46a:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    f46c:	4805      	ldr	r0, [pc, #20]	; (f484 <uart_console_init+0x24>)
    f46e:	f001 f8cd 	bl	1060c <__stdout_hook_install>
	__printk_hook_install(console_out);
    f472:	4804      	ldr	r0, [pc, #16]	; (f484 <uart_console_init+0x24>)
    f474:	f7fe fa54 	bl	d920 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    f478:	2000      	movs	r0, #0
    f47a:	bd08      	pop	{r3, pc}
    f47c:	000219ca 	.word	0x000219ca
    f480:	20020868 	.word	0x20020868
    f484:	0000f489 	.word	0x0000f489

0000f488 <console_out>:
	if ('\n' == c) {
    f488:	280a      	cmp	r0, #10
{
    f48a:	b538      	push	{r3, r4, r5, lr}
    f48c:	4604      	mov	r4, r0
    f48e:	4d07      	ldr	r5, [pc, #28]	; (f4ac <console_out+0x24>)
	if ('\n' == c) {
    f490:	d104      	bne.n	f49c <console_out+0x14>
    f492:	6828      	ldr	r0, [r5, #0]
    f494:	6883      	ldr	r3, [r0, #8]
    f496:	210d      	movs	r1, #13
    f498:	685b      	ldr	r3, [r3, #4]
    f49a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    f49c:	6828      	ldr	r0, [r5, #0]
    f49e:	6883      	ldr	r3, [r0, #8]
    f4a0:	b2e1      	uxtb	r1, r4
    f4a2:	685b      	ldr	r3, [r3, #4]
    f4a4:	4798      	blx	r3
}
    f4a6:	4620      	mov	r0, r4
    f4a8:	bd38      	pop	{r3, r4, r5, pc}
    f4aa:	bf00      	nop
    f4ac:	20020868 	.word	0x20020868

0000f4b0 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    f4b0:	b570      	push	{r4, r5, r6, lr}
    f4b2:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    f4b4:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    f4b6:	480d      	ldr	r0, [pc, #52]	; (f4ec <onoff_stop+0x3c>)
{
    f4b8:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    f4ba:	1a23      	subs	r3, r4, r0
    f4bc:	109a      	asrs	r2, r3, #2
    f4be:	4b0c      	ldr	r3, [pc, #48]	; (f4f0 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    f4c0:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    f4c2:	4353      	muls	r3, r2
    f4c4:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    f4c6:	435d      	muls	r5, r3
    f4c8:	f105 0340 	add.w	r3, r5, #64	; 0x40
    f4cc:	4418      	add	r0, r3
    f4ce:	f00e ff84 	bl	1e3da <set_off_state>
	if (err < 0) {
    f4d2:	1e01      	subs	r1, r0, #0
    f4d4:	db04      	blt.n	f4e0 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    f4d6:	4b07      	ldr	r3, [pc, #28]	; (f4f4 <onoff_stop+0x44>)
    f4d8:	442b      	add	r3, r5
    f4da:	685b      	ldr	r3, [r3, #4]
    f4dc:	4798      	blx	r3
	return 0;
    f4de:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    f4e0:	4620      	mov	r0, r4
    f4e2:	4633      	mov	r3, r6
}
    f4e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    f4e8:	4718      	bx	r3
    f4ea:	bf00      	nop
    f4ec:	2002087c 	.word	0x2002087c
    f4f0:	b6db6db7 	.word	0xb6db6db7
    f4f4:	00020f5c 	.word	0x00020f5c

0000f4f8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    f4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    f4fc:	4c0f      	ldr	r4, [pc, #60]	; (f53c <onoff_start+0x44>)
    f4fe:	4d10      	ldr	r5, [pc, #64]	; (f540 <onoff_start+0x48>)
    f500:	1b03      	subs	r3, r0, r4
    f502:	109b      	asrs	r3, r3, #2
    f504:	435d      	muls	r5, r3
    f506:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    f508:	250c      	movs	r5, #12
    f50a:	435d      	muls	r5, r3
{
    f50c:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    f50e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    f512:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    f514:	4420      	add	r0, r4
    f516:	2140      	movs	r1, #64	; 0x40
    f518:	f00e ff78 	bl	1e40c <set_starting_state>
	if (err < 0) {
    f51c:	1e01      	subs	r1, r0, #0
    f51e:	db08      	blt.n	f532 <onoff_start+0x3a>
	subdata->cb = data->cb;
    f520:	4b08      	ldr	r3, [pc, #32]	; (f544 <onoff_start+0x4c>)
    f522:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
    f524:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    f528:	4b07      	ldr	r3, [pc, #28]	; (f548 <onoff_start+0x50>)
    f52a:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    f52c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    f530:	4718      	bx	r3
		notify(mgr, err);
    f532:	4638      	mov	r0, r7
    f534:	4633      	mov	r3, r6
}
    f536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    f53a:	4718      	bx	r3
    f53c:	2002087c 	.word	0x2002087c
    f540:	b6db6db7 	.word	0xb6db6db7
    f544:	0001e46f 	.word	0x0001e46f
    f548:	00020f5c 	.word	0x00020f5c

0000f54c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    f54c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    f54e:	2200      	movs	r2, #0
    f550:	2101      	movs	r1, #1
{
    f552:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    f554:	2005      	movs	r0, #5
    f556:	f000 fac9 	bl	faec <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    f55a:	2005      	movs	r0, #5
    f55c:	f000 faa8 	bl	fab0 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
    f560:	480f      	ldr	r0, [pc, #60]	; (f5a0 <clk_init+0x54>)
    f562:	f00c fb8f 	bl	1bc84 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    f566:	4b0f      	ldr	r3, [pc, #60]	; (f5a4 <clk_init+0x58>)
    f568:	4298      	cmp	r0, r3
    f56a:	d115      	bne.n	f598 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    f56c:	f010 fe68 	bl	20240 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    f570:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    f572:	490d      	ldr	r1, [pc, #52]	; (f5a8 <clk_init+0x5c>)
    f574:	4630      	mov	r0, r6
    f576:	f00e f83d 	bl	1d5f4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    f57a:	2800      	cmp	r0, #0
    f57c:	db0b      	blt.n	f596 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    f57e:	2501      	movs	r5, #1
    f580:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    f582:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    f584:	4908      	ldr	r1, [pc, #32]	; (f5a8 <clk_init+0x5c>)
    f586:	f104 001c 	add.w	r0, r4, #28
    f58a:	f00e f833 	bl	1d5f4 <onoff_manager_init>
		if (err < 0) {
    f58e:	2800      	cmp	r0, #0
    f590:	db01      	blt.n	f596 <clk_init+0x4a>
	}

	return 0;
    f592:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    f594:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    f596:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    f598:	f06f 0004 	mvn.w	r0, #4
    f59c:	e7fb      	b.n	f596 <clk_init+0x4a>
    f59e:	bf00      	nop
    f5a0:	0000f5e9 	.word	0x0000f5e9
    f5a4:	0bad0000 	.word	0x0bad0000
    f5a8:	00020f74 	.word	0x00020f74

0000f5ac <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    f5ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    f5ae:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    f5b0:	4601      	mov	r1, r0
	sub_data->cb = NULL;
    f5b2:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
    f5b4:	434b      	muls	r3, r1
    f5b6:	480a      	ldr	r0, [pc, #40]	; (f5e0 <clkstarted_handle.constprop.0+0x34>)
    f5b8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    f5ba:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    f5bc:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    f5c0:	4418      	add	r0, r3
	sub_data->cb = NULL;
    f5c2:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
    f5c4:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    f5c6:	f00e ff3f 	bl	1e448 <set_on_state>
	if (callback) {
    f5ca:	b135      	cbz	r5, f5da <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    f5cc:	462b      	mov	r3, r5
    f5ce:	9a01      	ldr	r2, [sp, #4]
    f5d0:	4804      	ldr	r0, [pc, #16]	; (f5e4 <clkstarted_handle.constprop.0+0x38>)
}
    f5d2:	b002      	add	sp, #8
    f5d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    f5d8:	4718      	bx	r3
}
    f5da:	b002      	add	sp, #8
    f5dc:	bd70      	pop	{r4, r5, r6, pc}
    f5de:	bf00      	nop
    f5e0:	2002087c 	.word	0x2002087c
    f5e4:	20020090 	.word	0x20020090

0000f5e8 <clock_event_handler>:
	switch (event) {
    f5e8:	b110      	cbz	r0, f5f0 <clock_event_handler+0x8>
    f5ea:	2801      	cmp	r0, #1
    f5ec:	d004      	beq.n	f5f8 <clock_event_handler+0x10>
    f5ee:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    f5f0:	4b03      	ldr	r3, [pc, #12]	; (f600 <clock_event_handler+0x18>)
    f5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f5f4:	075b      	lsls	r3, r3, #29
    f5f6:	d101      	bne.n	f5fc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    f5f8:	f7ff bfd8 	b.w	f5ac <clkstarted_handle.constprop.0>
}
    f5fc:	4770      	bx	lr
    f5fe:	bf00      	nop
    f600:	2002087c 	.word	0x2002087c

0000f604 <generic_hfclk_start>:
{
    f604:	b508      	push	{r3, lr}
	__asm__ volatile(
    f606:	f04f 0320 	mov.w	r3, #32
    f60a:	f3ef 8111 	mrs	r1, BASEPRI
    f60e:	f383 8811 	msr	BASEPRI, r3
    f612:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    f616:	4a11      	ldr	r2, [pc, #68]	; (f65c <generic_hfclk_start+0x58>)
    f618:	6813      	ldr	r3, [r2, #0]
    f61a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    f61e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    f622:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    f624:	d00b      	beq.n	f63e <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f626:	4a0e      	ldr	r2, [pc, #56]	; (f660 <generic_hfclk_start+0x5c>)
    f628:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f62c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    f630:	f013 0301 	ands.w	r3, r3, #1
    f634:	d003      	beq.n	f63e <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    f636:	480b      	ldr	r0, [pc, #44]	; (f664 <generic_hfclk_start+0x60>)
    f638:	f00e ff06 	bl	1e448 <set_on_state>
			already_started = true;
    f63c:	2301      	movs	r3, #1
	__asm__ volatile(
    f63e:	f381 8811 	msr	BASEPRI, r1
    f642:	f3bf 8f6f 	isb	sy
	if (already_started) {
    f646:	b123      	cbz	r3, f652 <generic_hfclk_start+0x4e>
}
    f648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    f64c:	2000      	movs	r0, #0
    f64e:	f7ff bfad 	b.w	f5ac <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    f652:	2001      	movs	r0, #1
}
    f654:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f658:	f00c bb24 	b.w	1bca4 <nrfx_clock_start>
    f65c:	200208cc 	.word	0x200208cc
    f660:	40005000 	.word	0x40005000
    f664:	200208bc 	.word	0x200208bc

0000f668 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f668:	4b07      	ldr	r3, [pc, #28]	; (f688 <generic_hfclk_stop+0x20>)
    f66a:	e8d3 2fef 	ldaex	r2, [r3]
    f66e:	f022 0102 	bic.w	r1, r2, #2
    f672:	e8c3 1fe0 	stlex	r0, r1, [r3]
    f676:	2800      	cmp	r0, #0
    f678:	d1f7      	bne.n	f66a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    f67a:	07d3      	lsls	r3, r2, #31
    f67c:	d402      	bmi.n	f684 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    f67e:	2001      	movs	r0, #1
    f680:	f00c bb42 	b.w	1bd08 <nrfx_clock_stop>
}
    f684:	4770      	bx	lr
    f686:	bf00      	nop
    f688:	200208cc 	.word	0x200208cc

0000f68c <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f68c:	2300      	movs	r3, #0
    f68e:	2201      	movs	r2, #1
{
    f690:	b510      	push	{r4, lr}
    f692:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f694:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
    f698:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f69a:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
    f69c:	4b0a      	ldr	r3, [pc, #40]	; (f6c8 <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f69e:	e9cd 2208 	strd	r2, r2, [sp, #32]
    f6a2:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
    f6a4:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f6a6:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
    f6aa:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
    f6ae:	f00e ff05 	bl	1e4bc <api_start>
	if (err < 0) {
    f6b2:	2800      	cmp	r0, #0
    f6b4:	db05      	blt.n	f6c2 <api_blocking_start+0x36>
	return z_impl_k_sem_take(sem, timeout);
    f6b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    f6ba:	2300      	movs	r3, #0
    f6bc:	4620      	mov	r0, r4
    f6be:	f00d fb07 	bl	1ccd0 <z_impl_k_sem_take>
}
    f6c2:	b00a      	add	sp, #40	; 0x28
    f6c4:	bd10      	pop	{r4, pc}
    f6c6:	bf00      	nop
    f6c8:	0001e483 	.word	0x0001e483

0000f6cc <z_nrf_clock_control_lf_on>:
{
    f6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f6d0:	2201      	movs	r2, #1
    f6d2:	4607      	mov	r7, r0
    f6d4:	4936      	ldr	r1, [pc, #216]	; (f7b0 <z_nrf_clock_control_lf_on+0xe4>)
    f6d6:	e8d1 3fef 	ldaex	r3, [r1]
    f6da:	e8c1 2fe0 	stlex	r0, r2, [r1]
    f6de:	2800      	cmp	r0, #0
    f6e0:	d1f9      	bne.n	f6d6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    f6e2:	b933      	cbnz	r3, f6f2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    f6e4:	4933      	ldr	r1, [pc, #204]	; (f7b4 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
    f6e6:	4834      	ldr	r0, [pc, #208]	; (f7b8 <z_nrf_clock_control_lf_on+0xec>)
    f6e8:	604b      	str	r3, [r1, #4]
    f6ea:	60cb      	str	r3, [r1, #12]
    f6ec:	608a      	str	r2, [r1, #8]
    f6ee:	f00d ff94 	bl	1d61a <onoff_request>
	switch (start_mode) {
    f6f2:	1e7b      	subs	r3, r7, #1
    f6f4:	2b01      	cmp	r3, #1
    f6f6:	d82e      	bhi.n	f756 <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    f6f8:	2f01      	cmp	r7, #1
    f6fa:	d106      	bne.n	f70a <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    f6fc:	4b2f      	ldr	r3, [pc, #188]	; (f7bc <z_nrf_clock_control_lf_on+0xf0>)
    f6fe:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    f702:	f003 0303 	and.w	r3, r3, #3
    f706:	2b02      	cmp	r3, #2
    f708:	d025      	beq.n	f756 <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    f70a:	f010 ffd5 	bl	206b8 <k_is_in_isr>
    f70e:	4604      	mov	r4, r0
    f710:	b918      	cbnz	r0, f71a <z_nrf_clock_control_lf_on+0x4e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    f712:	4b2b      	ldr	r3, [pc, #172]	; (f7c0 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
    f714:	781b      	ldrb	r3, [r3, #0]
    f716:	2b00      	cmp	r3, #0
    f718:	d144      	bne.n	f7a4 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
    f71a:	f04f 0320 	mov.w	r3, #32
    f71e:	f3ef 8611 	mrs	r6, BASEPRI
    f722:	f383 8811 	msr	BASEPRI, r3
    f726:	f3bf 8f6f 	isb	sy
    f72a:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f72c:	4d23      	ldr	r5, [pc, #140]	; (f7bc <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f72e:	f8df 809c 	ldr.w	r8, [pc, #156]	; f7cc <z_nrf_clock_control_lf_on+0x100>
    f732:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f734:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f738:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    f73c:	03d2      	lsls	r2, r2, #15
    f73e:	d50c      	bpl.n	f75a <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    f740:	f003 0303 	and.w	r3, r3, #3
    f744:	2b02      	cmp	r3, #2
    f746:	d001      	beq.n	f74c <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    f748:	2f01      	cmp	r7, #1
    f74a:	d106      	bne.n	f75a <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
    f74c:	b334      	cbz	r4, f79c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    f74e:	f386 8811 	msr	BASEPRI, r6
    f752:	f3bf 8f6f 	isb	sy
}
    f756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    f75a:	b1d4      	cbz	r4, f792 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    f75c:	4630      	mov	r0, r6
    f75e:	f000 fa41 	bl	fbe4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    f762:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    f766:	b2db      	uxtb	r3, r3
    f768:	2b01      	cmp	r3, #1
    f76a:	d1e3      	bne.n	f734 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f76c:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
    f770:	2a00      	cmp	r2, #0
    f772:	d0df      	beq.n	f734 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f774:	2200      	movs	r2, #0
    f776:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    f77a:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
    f77e:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f780:	2120      	movs	r1, #32
    f782:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    f786:	4a0f      	ldr	r2, [pc, #60]	; (f7c4 <z_nrf_clock_control_lf_on+0xf8>)
    f788:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f78c:	4a0e      	ldr	r2, [pc, #56]	; (f7c8 <z_nrf_clock_control_lf_on+0xfc>)
    f78e:	6013      	str	r3, [r2, #0]
}
    f790:	e7d0      	b.n	f734 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
    f792:	2100      	movs	r1, #0
    f794:	2021      	movs	r0, #33	; 0x21
    f796:	f00d fa4f 	bl	1cc38 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    f79a:	e7e2      	b.n	f762 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
    f79c:	2302      	movs	r3, #2
    f79e:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    f7a2:	e7d8      	b.n	f756 <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
    f7a4:	2202      	movs	r2, #2
    f7a6:	4b05      	ldr	r3, [pc, #20]	; (f7bc <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
    f7a8:	4606      	mov	r6, r0
    f7aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    f7ae:	e7bd      	b.n	f72c <z_nrf_clock_control_lf_on+0x60>
    f7b0:	200208d0 	.word	0x200208d0
    f7b4:	2002086c 	.word	0x2002086c
    f7b8:	20020898 	.word	0x20020898
    f7bc:	40005000 	.word	0x40005000
    f7c0:	200236c7 	.word	0x200236c7
    f7c4:	e000e100 	.word	0xe000e100
    f7c8:	40005008 	.word	0x40005008
    f7cc:	40005104 	.word	0x40005104

0000f7d0 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    f7d0:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    f7d2:	4b08      	ldr	r3, [pc, #32]	; (f7f4 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f7d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    f7d8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    f7dc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    f7e0:	4290      	cmp	r0, r2
    f7e2:	d100      	bne.n	f7e6 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    f7e4:	4770      	bx	lr
    f7e6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    f7ea:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f7ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    f7f0:	e7f2      	b.n	f7d8 <handle_next_cycle_case+0x8>
    f7f2:	bf00      	nop
    f7f4:	40015000 	.word	0x40015000

0000f7f8 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f7f8:	2200      	movs	r2, #0
    f7fa:	4b07      	ldr	r3, [pc, #28]	; (f818 <rtc_nrf_isr+0x20>)
    f7fc:	601a      	str	r2, [r3, #0]
    f7fe:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    f800:	4a06      	ldr	r2, [pc, #24]	; (f81c <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    f802:	4b07      	ldr	r3, [pc, #28]	; (f820 <rtc_nrf_isr+0x28>)
    f804:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    f808:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    f80a:	1ac0      	subs	r0, r0, r3
    f80c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    f810:	4403      	add	r3, r0
    f812:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    f814:	f00d bc94 	b.w	1d140 <z_clock_announce>
    f818:	40015140 	.word	0x40015140
    f81c:	200208d4 	.word	0x200208d4
    f820:	40015000 	.word	0x40015000

0000f824 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    f824:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    f826:	2400      	movs	r4, #0
    f828:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f82c:	4d0e      	ldr	r5, [pc, #56]	; (f868 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f82e:	4b0f      	ldr	r3, [pc, #60]	; (f86c <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    f830:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f834:	601c      	str	r4, [r3, #0]
    f836:	681b      	ldr	r3, [r3, #0]
    f838:	4b0d      	ldr	r3, [pc, #52]	; (f870 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    f83a:	2101      	movs	r1, #1
    f83c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    f840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f844:	4622      	mov	r2, r4
    f846:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    f84a:	2015      	movs	r0, #21
    f84c:	f000 f94e 	bl	faec <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    f850:	2015      	movs	r0, #21
    f852:	f000 f92d 	bl	fab0 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    f856:	2301      	movs	r3, #1
    f858:	4a06      	ldr	r2, [pc, #24]	; (f874 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    f85a:	2002      	movs	r0, #2
    f85c:	6013      	str	r3, [r2, #0]
    f85e:	602b      	str	r3, [r5, #0]
    f860:	f7ff ff34 	bl	f6cc <z_nrf_clock_control_lf_on>

	return 0;
}
    f864:	4620      	mov	r0, r4
    f866:	bd38      	pop	{r3, r4, r5, pc}
    f868:	40015000 	.word	0x40015000
    f86c:	40015140 	.word	0x40015140
    f870:	e000e100 	.word	0xe000e100
    f874:	40015008 	.word	0x40015008

0000f878 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    f878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    f87a:	4b2d      	ldr	r3, [pc, #180]	; (f930 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    f87c:	4c2d      	ldr	r4, [pc, #180]	; (f934 <z_clock_set_timeout+0xbc>)
    f87e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    f882:	4b2d      	ldr	r3, [pc, #180]	; (f938 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    f884:	f1b0 3fff 	cmp.w	r0, #4294967295
    f888:	bf08      	it	eq
    f88a:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
    f88c:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    f88e:	1a52      	subs	r2, r2, r1
    f890:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    f894:	0212      	lsls	r2, r2, #8
    f896:	d438      	bmi.n	f90a <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    f898:	3801      	subs	r0, #1
    f89a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    f89e:	42a0      	cmp	r0, r4
    f8a0:	bfa8      	it	ge
    f8a2:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    f8a4:	3301      	adds	r3, #1
    f8a6:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    f8a8:	42a0      	cmp	r0, r4
    f8aa:	bf94      	ite	ls
    f8ac:	180c      	addls	r4, r1, r0
    f8ae:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    f8b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f8b4:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
    f8b6:	4a1e      	ldr	r2, [pc, #120]	; (f930 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f8b8:	4d20      	ldr	r5, [pc, #128]	; (f93c <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
    f8ba:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
    f8be:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
    f8c2:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f8c6:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
    f8c8:	1a5b      	subs	r3, r3, r1
    f8ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    f8ce:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
    f8d0:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f8d2:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f8d6:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    f8da:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    f8de:	d104      	bne.n	f8ea <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
    f8e0:	200f      	movs	r0, #15
    f8e2:	f010 feef 	bl	206c4 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f8e6:	602e      	str	r6, [r5, #0]
    f8e8:	682b      	ldr	r3, [r5, #0]
    f8ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    f8ee:	4b14      	ldr	r3, [pc, #80]	; (f940 <z_clock_set_timeout+0xc8>)
    f8f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    f8f4:	4b0e      	ldr	r3, [pc, #56]	; (f930 <z_clock_set_timeout+0xb8>)
    f8f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    f8fa:	1a22      	subs	r2, r4, r0
    f8fc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
    f900:	2a01      	cmp	r2, #1
    f902:	d104      	bne.n	f90e <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
    f904:	f7ff ff64 	bl	f7d0 <handle_next_cycle_case>
    f908:	e00b      	b.n	f922 <z_clock_set_timeout+0xaa>
		ticks = 0;
    f90a:	2000      	movs	r0, #0
    f90c:	e7ca      	b.n	f8a4 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    f90e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    f912:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
    f916:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    f91a:	1a24      	subs	r4, r4, r0
    f91c:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
    f91e:	0223      	lsls	r3, r4, #8
    f920:	d4f0      	bmi.n	f904 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
    f922:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    f926:	4b02      	ldr	r3, [pc, #8]	; (f930 <z_clock_set_timeout+0xb8>)
    f928:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    f92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f92e:	bf00      	nop
    f930:	40015000 	.word	0x40015000
    f934:	007fffff 	.word	0x007fffff
    f938:	200208d4 	.word	0x200208d4
    f93c:	40015140 	.word	0x40015140
    f940:	e000e100 	.word	0xe000e100

0000f944 <z_clock_elapsed>:
	__asm__ volatile(
    f944:	f04f 0220 	mov.w	r2, #32
    f948:	f3ef 8311 	mrs	r3, BASEPRI
    f94c:	f382 8811 	msr	BASEPRI, r2
    f950:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    f954:	4a06      	ldr	r2, [pc, #24]	; (f970 <z_clock_elapsed+0x2c>)
    f956:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    f95a:	4a06      	ldr	r2, [pc, #24]	; (f974 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    f95c:	6812      	ldr	r2, [r2, #0]
    f95e:	1a80      	subs	r0, r0, r2
    f960:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    f964:	f383 8811 	msr	BASEPRI, r3
    f968:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    f96c:	4770      	bx	lr
    f96e:	bf00      	nop
    f970:	40015000 	.word	0x40015000
    f974:	200208d4 	.word	0x200208d4

0000f978 <z_timer_cycle_get_32>:
	__asm__ volatile(
    f978:	f04f 0320 	mov.w	r3, #32
    f97c:	f3ef 8211 	mrs	r2, BASEPRI
    f980:	f383 8811 	msr	BASEPRI, r3
    f984:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    f988:	4906      	ldr	r1, [pc, #24]	; (f9a4 <z_timer_cycle_get_32+0x2c>)
    f98a:	4b07      	ldr	r3, [pc, #28]	; (f9a8 <z_timer_cycle_get_32+0x30>)
    f98c:	6808      	ldr	r0, [r1, #0]
    f98e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    f992:	f382 8811 	msr	BASEPRI, r2
    f996:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    f99a:	1a1b      	subs	r3, r3, r0
    f99c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    f9a0:	4418      	add	r0, r3
    f9a2:	4770      	bx	lr
    f9a4:	200208d4 	.word	0x200208d4
    f9a8:	40015000 	.word	0x40015000

0000f9ac <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    f9ac:	4a09      	ldr	r2, [pc, #36]	; (f9d4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    f9ae:	490a      	ldr	r1, [pc, #40]	; (f9d8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    f9b0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    f9b2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    f9b4:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    f9b6:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f9b8:	4908      	ldr	r1, [pc, #32]	; (f9dc <arch_swap+0x30>)
    f9ba:	684b      	ldr	r3, [r1, #4]
    f9bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f9c0:	604b      	str	r3, [r1, #4]
    f9c2:	2300      	movs	r3, #0
    f9c4:	f383 8811 	msr	BASEPRI, r3
    f9c8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    f9cc:	6893      	ldr	r3, [r2, #8]
}
    f9ce:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    f9d0:	4770      	bx	lr
    f9d2:	bf00      	nop
    f9d4:	20021038 	.word	0x20021038
    f9d8:	00021458 	.word	0x00021458
    f9dc:	e000ed00 	.word	0xe000ed00

0000f9e0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    f9e0:	4929      	ldr	r1, [pc, #164]	; (fa88 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    f9e2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    f9e4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    f9e8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    f9ea:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    f9ee:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
    f9f2:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    f9f6:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
    f9fa:	d004      	beq.n	fa06 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
    f9fc:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
    fa00:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
    fa04:	e007      	b.n	fa16 <out_fp_endif>

0000fa06 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
    fa06:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
    fa0a:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
    fa0e:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
    fa12:	f050 0004 	orrs.w	r0, r0, #4

0000fa16 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
    fa16:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fa1a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fa1c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    fa20:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    fa24:	4f19      	ldr	r7, [pc, #100]	; (fa8c <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    fa26:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    fa2a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    fa2c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    fa2e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    fa30:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    fa32:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    fa34:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    fa36:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
    fa3a:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
    fa3e:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
    fa42:	d105      	bne.n	fa50 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    fa44:	2300      	movs	r3, #0
    vmsr fpscr, r3
    fa46:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    fa4a:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
    fa4e:	e005      	b.n	fa5c <in_fp_endif>

0000fa50 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
    fa50:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
    fa54:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
    fa58:	ec90 8a10 	vldmia	r0, {s16-s31}

0000fa5c <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    fa5c:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    fa60:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    fa64:	f383 8814 	msr	CONTROL, r3
    isb
    fa68:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    fa6c:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    fa70:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    fa74:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    fa78:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    fa7c:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    fa7e:	f00e fd48 	bl	1e512 <configure_builtin_stack_guard>
    pop {r2, lr}
    fa82:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    fa86:	4770      	bx	lr
    ldr r1, =_kernel
    fa88:	20021038 	.word	0x20021038
    ldr v4, =_SCS_ICSR
    fa8c:	e000ed04 	.word	0xe000ed04

0000fa90 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    fa90:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    fa94:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    fa96:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    fa9a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    fa9e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    faa0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    faa4:	2902      	cmp	r1, #2
    beq _oops
    faa6:	d0ff      	beq.n	faa8 <_oops>

0000faa8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    faa8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    faaa:	f00e fd36 	bl	1e51a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    faae:	bd01      	pop	{r0, pc}

0000fab0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    fab0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    fab2:	2b00      	cmp	r3, #0
    fab4:	db08      	blt.n	fac8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fab6:	2201      	movs	r2, #1
    fab8:	f000 001f 	and.w	r0, r0, #31
    fabc:	fa02 f000 	lsl.w	r0, r2, r0
    fac0:	4a02      	ldr	r2, [pc, #8]	; (facc <arch_irq_enable+0x1c>)
    fac2:	095b      	lsrs	r3, r3, #5
    fac4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    fac8:	4770      	bx	lr
    faca:	bf00      	nop
    facc:	e000e100 	.word	0xe000e100

0000fad0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    fad0:	4b05      	ldr	r3, [pc, #20]	; (fae8 <arch_irq_is_enabled+0x18>)
    fad2:	0942      	lsrs	r2, r0, #5
    fad4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    fad8:	2301      	movs	r3, #1
    fada:	f000 001f 	and.w	r0, r0, #31
    fade:	fa03 f000 	lsl.w	r0, r3, r0
}
    fae2:	4010      	ands	r0, r2
    fae4:	4770      	bx	lr
    fae6:	bf00      	nop
    fae8:	e000e100 	.word	0xe000e100

0000faec <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    faec:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    faee:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    faf0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    faf4:	bfac      	ite	ge
    faf6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fafa:	4b06      	ldrlt	r3, [pc, #24]	; (fb14 <z_arm_irq_priority_set+0x28>)
    fafc:	ea4f 1141 	mov.w	r1, r1, lsl #5
    fb00:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb02:	bfab      	itete	ge
    fb04:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb08:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb0c:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fb10:	5419      	strblt	r1, [r3, r0]
}
    fb12:	4770      	bx	lr
    fb14:	e000ed14 	.word	0xe000ed14

0000fb18 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    fb18:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    fb1a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    fb1c:	4b04      	ldr	r3, [pc, #16]	; (fb30 <_arch_isr_direct_pm+0x18>)
    fb1e:	6a18      	ldr	r0, [r3, #32]
    fb20:	b118      	cbz	r0, fb2a <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    fb22:	2200      	movs	r2, #0
    fb24:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    fb26:	f010 fb96 	bl	20256 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    fb2a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    fb2c:	bd08      	pop	{r3, pc}
    fb2e:	bf00      	nop
    fb30:	20021038 	.word	0x20021038

0000fb34 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    fb34:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    fb38:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    fb3a:	490c      	ldr	r1, [pc, #48]	; (fb6c <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
    fb3c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    fb40:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    fb42:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    fb46:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    fb4a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    fb4c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    fb50:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    fb54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    fb58:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    fb5c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    fb5e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    fb60:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    fb62:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
    fb64:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    fb68:	4770      	bx	lr
    fb6a:	bf00      	nop
    fb6c:	0001d6ad 	.word	0x0001d6ad

0000fb70 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    fb70:	b508      	push	{r3, lr}
    fb72:	4604      	mov	r4, r0
    fb74:	460e      	mov	r6, r1
    fb76:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    fb78:	2300      	movs	r3, #0
    fb7a:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    fb7e:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    fb82:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    fb86:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    fb8a:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
    fb8e:	f000 fb8f 	bl	102b0 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    fb92:	4b09      	ldr	r3, [pc, #36]	; (fbb8 <arch_switch_to_main_thread+0x48>)
    fb94:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    fb96:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    fb98:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    fb9c:	4628      	mov	r0, r5
    fb9e:	f386 8809 	msr	PSP, r6
    fba2:	2100      	movs	r1, #0
    fba4:	b663      	cpsie	if
    fba6:	f381 8811 	msr	BASEPRI, r1
    fbaa:	f3bf 8f6f 	isb	sy
    fbae:	2200      	movs	r2, #0
    fbb0:	2300      	movs	r3, #0
    fbb2:	f00d fd7b 	bl	1d6ac <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    fbb6:	bf00      	nop
    fbb8:	20021038 	.word	0x20021038

0000fbbc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    fbbc:	4901      	ldr	r1, [pc, #4]	; (fbc4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    fbbe:	2210      	movs	r2, #16
	str	r2, [r1]
    fbc0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    fbc2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    fbc4:	e000ed10 	.word	0xe000ed10

0000fbc8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    fbc8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    fbca:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    fbcc:	f380 8811 	msr	BASEPRI, r0
	isb
    fbd0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    fbd4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    fbd8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    fbda:	b662      	cpsie	i
	isb
    fbdc:	f3bf 8f6f 	isb	sy

	bx	lr
    fbe0:	4770      	bx	lr
    fbe2:	bf00      	nop

0000fbe4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    fbe4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    fbe6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    fbe8:	f381 8811 	msr	BASEPRI, r1

	wfe
    fbec:	bf20      	wfe

	msr	BASEPRI, r0
    fbee:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    fbf2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    fbf4:	4770      	bx	lr
    fbf6:	bf00      	nop

0000fbf8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    fbf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fbfc:	4606      	mov	r6, r0

	if (esf != NULL) {
    fbfe:	460d      	mov	r5, r1
{
    fc00:	b08b      	sub	sp, #44	; 0x2c
	if (esf != NULL) {
    fc02:	2900      	cmp	r1, #0
    fc04:	d054      	beq.n	fcb0 <z_arm_fatal_error+0xb8>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    fc06:	4b2e      	ldr	r3, [pc, #184]	; (fcc0 <z_arm_fatal_error+0xc8>)
    fc08:	4c2e      	ldr	r4, [pc, #184]	; (fcc4 <z_arm_fatal_error+0xcc>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    fc0a:	482f      	ldr	r0, [pc, #188]	; (fcc8 <z_arm_fatal_error+0xd0>)
    fc0c:	1ae4      	subs	r4, r4, r3
    fc0e:	08e4      	lsrs	r4, r4, #3
    fc10:	01a4      	lsls	r4, r4, #6
    fc12:	f044 0401 	orr.w	r4, r4, #1
    fc16:	f8ad 4000 	strh.w	r4, [sp]
    fc1a:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    fc1e:	6809      	ldr	r1, [r1, #0]
    fc20:	f00e f89b 	bl	1dd5a <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    fc24:	f8ad 4000 	strh.w	r4, [sp]
    fc28:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    fc2c:	68e9      	ldr	r1, [r5, #12]
    fc2e:	4827      	ldr	r0, [pc, #156]	; (fccc <z_arm_fatal_error+0xd4>)
    fc30:	f00e f893 	bl	1dd5a <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    fc34:	4622      	mov	r2, r4
    fc36:	69e9      	ldr	r1, [r5, #28]
    fc38:	4825      	ldr	r0, [pc, #148]	; (fcd0 <z_arm_fatal_error+0xd8>)
    fc3a:	f00e f85e 	bl	1dcfa <log_1>
	for (int i = 0; i < 16; i += 4) {
    fc3e:	46a8      	mov	r8, r5
    fc40:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    fc42:	f8df 9098 	ldr.w	r9, [pc, #152]	; fcdc <z_arm_fatal_error+0xe4>
    fc46:	edd8 7a08 	vldr	s15, [r8, #32]
    fc4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fc4e:	edcd 7a03 	vstr	s15, [sp, #12]
    fc52:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
    fc56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fc5a:	edcd 7a05 	vstr	s15, [sp, #20]
    fc5e:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
    fc62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fc66:	edcd 7a07 	vstr	s15, [sp, #28]
    fc6a:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
    fc6e:	2208      	movs	r2, #8
    fc70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    fc74:	1c7b      	adds	r3, r7, #1
    fc76:	9304      	str	r3, [sp, #16]
    fc78:	1cbb      	adds	r3, r7, #2
    fc7a:	9306      	str	r3, [sp, #24]
    fc7c:	1cfb      	adds	r3, r7, #3
    fc7e:	9702      	str	r7, [sp, #8]
    fc80:	9308      	str	r3, [sp, #32]
    fc82:	4648      	mov	r0, r9
    fc84:	4623      	mov	r3, r4
    fc86:	eb0d 0102 	add.w	r1, sp, r2
	for (int i = 0; i < 16; i += 4) {
    fc8a:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    fc8c:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    fc90:	f00e f882 	bl	1dd98 <log_n>
	for (int i = 0; i < 16; i += 4) {
    fc94:	2f10      	cmp	r7, #16
    fc96:	f108 0810 	add.w	r8, r8, #16
    fc9a:	d1d4      	bne.n	fc46 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    fc9c:	4622      	mov	r2, r4
    fc9e:	6e29      	ldr	r1, [r5, #96]	; 0x60
    fca0:	480c      	ldr	r0, [pc, #48]	; (fcd4 <z_arm_fatal_error+0xdc>)
    fca2:	f00e f82a 	bl	1dcfa <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    fca6:	4622      	mov	r2, r4
    fca8:	69a9      	ldr	r1, [r5, #24]
    fcaa:	480b      	ldr	r0, [pc, #44]	; (fcd8 <z_arm_fatal_error+0xe0>)
    fcac:	f00e f825 	bl	1dcfa <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    fcb0:	4629      	mov	r1, r5
    fcb2:	4630      	mov	r0, r6
    fcb4:	f00c f908 	bl	1bec8 <z_fatal_error>
}
    fcb8:	b00b      	add	sp, #44	; 0x2c
    fcba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fcbe:	bf00      	nop
    fcc0:	00020e10 	.word	0x00020e10
    fcc4:	00020e70 	.word	0x00020e70
    fcc8:	00021a12 	.word	0x00021a12
    fccc:	00021a41 	.word	0x00021a41
    fcd0:	00021a70 	.word	0x00021a70
    fcd4:	00021ac2 	.word	0x00021ac2
    fcd8:	00021ad1 	.word	0x00021ad1
    fcdc:	00021a7f 	.word	0x00021a7f

0000fce0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    fce0:	bf30      	wfi
    b z_SysNmiOnReset
    fce2:	f7ff bffd 	b.w	fce0 <z_SysNmiOnReset>
    fce6:	bf00      	nop

0000fce8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fce8:	4a14      	ldr	r2, [pc, #80]	; (fd3c <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    fcea:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    fcec:	4b14      	ldr	r3, [pc, #80]	; (fd40 <z_arm_prep_c+0x58>)
    fcee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    fcf2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    fcf4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fcf8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    fcfc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    fd00:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    fd04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    fd08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    fd0c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    fd10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    fd14:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    fd18:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    fd1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fd20:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    fd24:	2300      	movs	r3, #0
    fd26:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    fd2a:	f00c f94b 	bl	1bfc4 <z_bss_zero>
	z_data_copy();
    fd2e:	f00c f953 	bl	1bfd8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    fd32:	f000 fa85 	bl	10240 <z_arm_interrupt_init>
	z_cstart();
    fd36:	f00c f98d 	bl	1c054 <z_cstart>
    fd3a:	bf00      	nop
    fd3c:	0000c000 	.word	0x0000c000
    fd40:	e000ed00 	.word	0xe000ed00

0000fd44 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    fd44:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    fd46:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    fd48:	4a0b      	ldr	r2, [pc, #44]	; (fd78 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    fd4a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    fd4c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    fd4e:	bf1e      	ittt	ne
	movne	r1, #0
    fd50:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    fd52:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    fd54:	f010 fa7f 	blne	20256 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    fd58:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    fd5a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    fd5e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    fd62:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    fd66:	4905      	ldr	r1, [pc, #20]	; (fd7c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    fd68:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    fd6a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    fd6c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    fd6e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    fd72:	4903      	ldr	r1, [pc, #12]	; (fd80 <_isr_wrapper+0x3c>)
	bx r1
    fd74:	4708      	bx	r1
    fd76:	0000      	.short	0x0000
	ldr r2, =_kernel
    fd78:	20021038 	.word	0x20021038
	ldr r1, =_sw_isr_table
    fd7c:	00020bfc 	.word	0x00020bfc
	ldr r1, =z_arm_int_exit
    fd80:	00010201 	.word	0x00010201

0000fd84 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    fd84:	f00d ff65 	bl	1dc52 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    fd88:	2020      	movs	r0, #32
    msr BASEPRI, r0
    fd8a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    fd8e:	4808      	ldr	r0, [pc, #32]	; (fdb0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    fd90:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    fd94:	1840      	adds	r0, r0, r1
    msr PSP, r0
    fd96:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    fd9a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    fd9e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    fda0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    fda2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    fda6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    fdaa:	f7ff ff9d 	bl	fce8 <z_arm_prep_c>
    fdae:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    fdb0:	20025470 	.word	0x20025470

0000fdb4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    fdb4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    fdb8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    fdbc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    fdbe:	4672      	mov	r2, lr
	bl z_arm_fault
    fdc0:	f000 f93e 	bl	10040 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    fdc4:	bd01      	pop	{r0, pc}
    fdc6:	bf00      	nop

0000fdc8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    fdc8:	b570      	push	{r4, r5, r6, lr}
    fdca:	4b28      	ldr	r3, [pc, #160]	; (fe6c <usage_fault.isra.0+0xa4>)
    fdcc:	4c28      	ldr	r4, [pc, #160]	; (fe70 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    fdce:	4d29      	ldr	r5, [pc, #164]	; (fe74 <usage_fault.isra.0+0xac>)
    fdd0:	1ae4      	subs	r4, r4, r3
    fdd2:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
    fdd4:	01a4      	lsls	r4, r4, #6
    fdd6:	f044 0601 	orr.w	r6, r4, #1
    fdda:	4631      	mov	r1, r6
    fddc:	4826      	ldr	r0, [pc, #152]	; (fe78 <usage_fault.isra.0+0xb0>)
    fdde:	f00d ff7d 	bl	1dcdc <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    fde2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    fde4:	0193      	lsls	r3, r2, #6
    fde6:	d503      	bpl.n	fdf0 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    fde8:	4631      	mov	r1, r6
    fdea:	4824      	ldr	r0, [pc, #144]	; (fe7c <usage_fault.isra.0+0xb4>)
    fdec:	f00d ff76 	bl	1dcdc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    fdf0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fdf2:	01dd      	lsls	r5, r3, #7
    fdf4:	d504      	bpl.n	fe00 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    fdf6:	4822      	ldr	r0, [pc, #136]	; (fe80 <usage_fault.isra.0+0xb8>)
    fdf8:	f044 0101 	orr.w	r1, r4, #1
    fdfc:	f00d ff6e 	bl	1dcdc <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    fe00:	4d1c      	ldr	r5, [pc, #112]	; (fe74 <usage_fault.isra.0+0xac>)
    fe02:	6aae      	ldr	r6, [r5, #40]	; 0x28
    fe04:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
    fe08:	d005      	beq.n	fe16 <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    fe0a:	481e      	ldr	r0, [pc, #120]	; (fe84 <usage_fault.isra.0+0xbc>)
    fe0c:	f044 0101 	orr.w	r1, r4, #1
    fe10:	f00d ff64 	bl	1dcdc <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    fe14:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    fe16:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fe18:	0318      	lsls	r0, r3, #12
    fe1a:	d504      	bpl.n	fe26 <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
    fe1c:	481a      	ldr	r0, [pc, #104]	; (fe88 <usage_fault.isra.0+0xc0>)
    fe1e:	f044 0101 	orr.w	r1, r4, #1
    fe22:	f00d ff5b 	bl	1dcdc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    fe26:	4d13      	ldr	r5, [pc, #76]	; (fe74 <usage_fault.isra.0+0xac>)
    fe28:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    fe2a:	0351      	lsls	r1, r2, #13
    fe2c:	d504      	bpl.n	fe38 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    fe2e:	4817      	ldr	r0, [pc, #92]	; (fe8c <usage_fault.isra.0+0xc4>)
    fe30:	f044 0101 	orr.w	r1, r4, #1
    fe34:	f00d ff52 	bl	1dcdc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    fe38:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fe3a:	039a      	lsls	r2, r3, #14
    fe3c:	d504      	bpl.n	fe48 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    fe3e:	4814      	ldr	r0, [pc, #80]	; (fe90 <usage_fault.isra.0+0xc8>)
    fe40:	f044 0101 	orr.w	r1, r4, #1
    fe44:	f00d ff4a 	bl	1dcdc <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    fe48:	4d0a      	ldr	r5, [pc, #40]	; (fe74 <usage_fault.isra.0+0xac>)
    fe4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fe4c:	03db      	lsls	r3, r3, #15
    fe4e:	d504      	bpl.n	fe5a <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    fe50:	4810      	ldr	r0, [pc, #64]	; (fe94 <usage_fault.isra.0+0xcc>)
    fe52:	f044 0101 	orr.w	r1, r4, #1
    fe56:	f00d ff41 	bl	1dcdc <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    fe5a:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    fe5c:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    fe5e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    fe62:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    fe66:	62ab      	str	r3, [r5, #40]	; 0x28
}
    fe68:	bd70      	pop	{r4, r5, r6, pc}
    fe6a:	bf00      	nop
    fe6c:	00020e10 	.word	0x00020e10
    fe70:	00020e70 	.word	0x00020e70
    fe74:	e000ed00 	.word	0xe000ed00
    fe78:	00021aff 	.word	0x00021aff
    fe7c:	00021b17 	.word	0x00021b17
    fe80:	00021b2a 	.word	0x00021b2a
    fe84:	00021b44 	.word	0x00021b44
    fe88:	00021b6e 	.word	0x00021b6e
    fe8c:	00021b8c 	.word	0x00021b8c
    fe90:	00021bb1 	.word	0x00021bb1
    fe94:	00021bcb 	.word	0x00021bcb

0000fe98 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    fe98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe9c:	4b27      	ldr	r3, [pc, #156]	; (ff3c <mem_manage_fault.isra.0+0xa4>)
    fe9e:	4c28      	ldr	r4, [pc, #160]	; (ff40 <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    fea0:	4d28      	ldr	r5, [pc, #160]	; (ff44 <mem_manage_fault.isra.0+0xac>)
    fea2:	1ae4      	subs	r4, r4, r3
    fea4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    fea6:	01a4      	lsls	r4, r4, #6
    fea8:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    feac:	4607      	mov	r7, r0
    feae:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    feb0:	4825      	ldr	r0, [pc, #148]	; (ff48 <mem_manage_fault.isra.0+0xb0>)
    feb2:	4641      	mov	r1, r8
    feb4:	f00d ff12 	bl	1dcdc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    feb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    feba:	06d1      	lsls	r1, r2, #27
    febc:	d503      	bpl.n	fec6 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    febe:	4641      	mov	r1, r8
    fec0:	4822      	ldr	r0, [pc, #136]	; (ff4c <mem_manage_fault.isra.0+0xb4>)
    fec2:	f00d ff0b 	bl	1dcdc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    fec6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fec8:	071a      	lsls	r2, r3, #28
    feca:	d504      	bpl.n	fed6 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    fecc:	4820      	ldr	r0, [pc, #128]	; (ff50 <mem_manage_fault.isra.0+0xb8>)
    fece:	f044 0101 	orr.w	r1, r4, #1
    fed2:	f00d ff03 	bl	1dcdc <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    fed6:	4d1b      	ldr	r5, [pc, #108]	; (ff44 <mem_manage_fault.isra.0+0xac>)
    fed8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    feda:	079b      	lsls	r3, r3, #30
    fedc:	d512      	bpl.n	ff04 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    fede:	f044 0801 	orr.w	r8, r4, #1
    fee2:	4641      	mov	r1, r8
    fee4:	481b      	ldr	r0, [pc, #108]	; (ff54 <mem_manage_fault.isra.0+0xbc>)
    fee6:	f00d fef9 	bl	1dcdc <log_0>
		mmfar = SCB->MMFAR;
    feea:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    feec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    feee:	0618      	lsls	r0, r3, #24
    fef0:	d508      	bpl.n	ff04 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    fef2:	4642      	mov	r2, r8
    fef4:	4818      	ldr	r0, [pc, #96]	; (ff58 <mem_manage_fault.isra.0+0xc0>)
    fef6:	f00d ff00 	bl	1dcfa <log_1>
			if (from_hard_fault) {
    fefa:	b11f      	cbz	r7, ff04 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    fefc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    fefe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ff02:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    ff04:	4d0f      	ldr	r5, [pc, #60]	; (ff44 <mem_manage_fault.isra.0+0xac>)
    ff06:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ff08:	07d2      	lsls	r2, r2, #31
    ff0a:	d504      	bpl.n	ff16 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    ff0c:	4813      	ldr	r0, [pc, #76]	; (ff5c <mem_manage_fault.isra.0+0xc4>)
    ff0e:	f044 0101 	orr.w	r1, r4, #1
    ff12:	f00d fee3 	bl	1dcdc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    ff16:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ff18:	069b      	lsls	r3, r3, #26
    ff1a:	d504      	bpl.n	ff26 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    ff1c:	4810      	ldr	r0, [pc, #64]	; (ff60 <mem_manage_fault.isra.0+0xc8>)
    ff1e:	f044 0101 	orr.w	r1, r4, #1
    ff22:	f00d fedb 	bl	1dcdc <log_0>
	*recoverable = memory_fault_recoverable(esf);
    ff26:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    ff28:	4b06      	ldr	r3, [pc, #24]	; (ff44 <mem_manage_fault.isra.0+0xac>)
    ff2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    ff2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ff2e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    ff32:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    ff34:	7030      	strb	r0, [r6, #0]
}
    ff36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff3a:	bf00      	nop
    ff3c:	00020e10 	.word	0x00020e10
    ff40:	00020e70 	.word	0x00020e70
    ff44:	e000ed00 	.word	0xe000ed00
    ff48:	00021bf6 	.word	0x00021bf6
    ff4c:	00021c0c 	.word	0x00021c0c
    ff50:	00021c3f 	.word	0x00021c3f
    ff54:	00021c52 	.word	0x00021c52
    ff58:	00021c6a 	.word	0x00021c6a
    ff5c:	00021c80 	.word	0x00021c80
    ff60:	00021c9f 	.word	0x00021c9f

0000ff64 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    ff64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff68:	4b2a      	ldr	r3, [pc, #168]	; (10014 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x14>)
    ff6a:	4c2b      	ldr	r4, [pc, #172]	; (10018 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x18>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    ff6c:	4d2b      	ldr	r5, [pc, #172]	; (1001c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1c>)
    ff6e:	1ae4      	subs	r4, r4, r3
    ff70:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    ff72:	01a4      	lsls	r4, r4, #6
    ff74:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    ff78:	4607      	mov	r7, r0
    ff7a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    ff7c:	4828      	ldr	r0, [pc, #160]	; (10020 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x20>)
    ff7e:	4641      	mov	r1, r8
    ff80:	f00d feac 	bl	1dcdc <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    ff84:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ff86:	04d1      	lsls	r1, r2, #19
    ff88:	d503      	bpl.n	ff92 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    ff8a:	4641      	mov	r1, r8
    ff8c:	4825      	ldr	r0, [pc, #148]	; (10024 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x24>)
    ff8e:	f00d fea5 	bl	1dcdc <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    ff92:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ff94:	051a      	lsls	r2, r3, #20
    ff96:	d504      	bpl.n	ffa2 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    ff98:	4823      	ldr	r0, [pc, #140]	; (10028 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x28>)
    ff9a:	f044 0101 	orr.w	r1, r4, #1
    ff9e:	f00d fe9d 	bl	1dcdc <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    ffa2:	4d1e      	ldr	r5, [pc, #120]	; (1001c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1c>)
    ffa4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ffa6:	059b      	lsls	r3, r3, #22
    ffa8:	d512      	bpl.n	ffd0 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    ffaa:	f044 0801 	orr.w	r8, r4, #1
    ffae:	4641      	mov	r1, r8
    ffb0:	481e      	ldr	r0, [pc, #120]	; (1002c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x2c>)
    ffb2:	f00d fe93 	bl	1dcdc <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    ffb6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    ffb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ffba:	0418      	lsls	r0, r3, #16
    ffbc:	d508      	bpl.n	ffd0 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    ffbe:	4642      	mov	r2, r8
    ffc0:	481b      	ldr	r0, [pc, #108]	; (10030 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x30>)
    ffc2:	f00d fe9a 	bl	1dcfa <log_1>
			if (from_hard_fault) {
    ffc6:	b11f      	cbz	r7, ffd0 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    ffc8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ffca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    ffce:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    ffd0:	4d12      	ldr	r5, [pc, #72]	; (1001c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1c>)
    ffd2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ffd4:	0559      	lsls	r1, r3, #21
    ffd6:	d504      	bpl.n	ffe2 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    ffd8:	4816      	ldr	r0, [pc, #88]	; (10034 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x34>)
    ffda:	f044 0101 	orr.w	r1, r4, #1
    ffde:	f00d fe7d 	bl	1dcdc <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    ffe2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ffe4:	05da      	lsls	r2, r3, #23
    ffe6:	d50d      	bpl.n	10004 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x4>
		PR_FAULT_INFO("  Instruction bus error");
    ffe8:	4813      	ldr	r0, [pc, #76]	; (10038 <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x38>)
    ffea:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    ffee:	f00d fe75 	bl	1dcdc <log_0>
	*recoverable = memory_fault_recoverable(esf);
    fff2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    fff4:	4a09      	ldr	r2, [pc, #36]	; (1001c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x1c>)
    fff6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    fff8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    fffc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    fffe:	7030      	strb	r0, [r6, #0]
}
   10000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   10004:	6aab      	ldr	r3, [r5, #40]	; 0x28
   10006:	049b      	lsls	r3, r3, #18
   10008:	d5f3      	bpl.n	fff2 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1000a:	480c      	ldr	r0, [pc, #48]	; (1003c <CONFIG_PM_PARTITION_SIZE_BSDLIB_SRAM+0x3c>)
   1000c:	f044 0101 	orr.w	r1, r4, #1
   10010:	e7ed      	b.n	ffee <bus_fault.isra.0+0x8a>
   10012:	bf00      	nop
   10014:	00020e10 	.word	0x00020e10
   10018:	00020e70 	.word	0x00020e70
   1001c:	e000ed00 	.word	0xe000ed00
   10020:	00021cce 	.word	0x00021cce
   10024:	00021ce4 	.word	0x00021ce4
   10028:	00021c3f 	.word	0x00021c3f
   1002c:	00021cf5 	.word	0x00021cf5
   10030:	00021d0e 	.word	0x00021d0e
   10034:	00021d23 	.word	0x00021d23
   10038:	00021d3e 	.word	0x00021d3e
   1003c:	00021c9f 	.word	0x00021c9f

00010040 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   10040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10044:	4b5a      	ldr	r3, [pc, #360]	; (101b0 <z_arm_fault+0x170>)
{
   10046:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10048:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   1004c:	460f      	mov	r7, r1
   1004e:	4614      	mov	r4, r2
   10050:	2500      	movs	r5, #0
   10052:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10054:	f3c8 0608 	ubfx	r6, r8, #0, #9
   10058:	f385 8811 	msr	BASEPRI, r5
   1005c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   10060:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   10064:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   10068:	d123      	bne.n	100b2 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1006a:	07d0      	lsls	r0, r2, #31
   1006c:	d421      	bmi.n	100b2 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1006e:	0651      	lsls	r1, r2, #25
   10070:	d403      	bmi.n	1007a <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   10072:	0722      	lsls	r2, r4, #28
   10074:	d40e      	bmi.n	10094 <z_arm_fault+0x54>
			*nested_exc = true;
   10076:	2501      	movs	r5, #1
   10078:	e00e      	b.n	10098 <z_arm_fault+0x58>
   1007a:	494e      	ldr	r1, [pc, #312]	; (101b4 <z_arm_fault+0x174>)
   1007c:	4b4e      	ldr	r3, [pc, #312]	; (101b8 <z_arm_fault+0x178>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   1007e:	484f      	ldr	r0, [pc, #316]	; (101bc <z_arm_fault+0x17c>)
   10080:	1a5b      	subs	r3, r3, r1
   10082:	08db      	lsrs	r3, r3, #3
   10084:	019b      	lsls	r3, r3, #6
   10086:	f043 0101 	orr.w	r1, r3, #1
   1008a:	f00d fe27 	bl	1dcdc <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1008e:	f014 0504 	ands.w	r5, r4, #4
   10092:	d001      	beq.n	10098 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   10094:	46b9      	mov	r9, r7
	*nested_exc = false;
   10096:	2500      	movs	r5, #0
	*recoverable = false;
   10098:	2300      	movs	r3, #0
   1009a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1009e:	1ef3      	subs	r3, r6, #3
   100a0:	2b09      	cmp	r3, #9
   100a2:	d86c      	bhi.n	1017e <z_arm_fault+0x13e>
   100a4:	e8df f003 	tbb	[pc, r3]
   100a8:	3e5e5a07 	.word	0x3e5e5a07
   100ac:	6b6b6b6b 	.word	0x6b6b6b6b
   100b0:	626b      	.short	0x626b
		return NULL;
   100b2:	46a9      	mov	r9, r5
   100b4:	e7f0      	b.n	10098 <z_arm_fault+0x58>
	*recoverable = false;
   100b6:	f04f 0800 	mov.w	r8, #0
   100ba:	4b3e      	ldr	r3, [pc, #248]	; (101b4 <z_arm_fault+0x174>)
   100bc:	4e3e      	ldr	r6, [pc, #248]	; (101b8 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   100be:	4840      	ldr	r0, [pc, #256]	; (101c0 <z_arm_fault+0x180>)
   100c0:	1af6      	subs	r6, r6, r3
   100c2:	08f6      	lsrs	r6, r6, #3
   100c4:	01b6      	lsls	r6, r6, #6
   100c6:	f046 0601 	orr.w	r6, r6, #1
   100ca:	4631      	mov	r1, r6
   100cc:	f00d fe06 	bl	1dcdc <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   100d0:	4b37      	ldr	r3, [pc, #220]	; (101b0 <z_arm_fault+0x170>)
	*recoverable = false;
   100d2:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   100d6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   100d8:	f014 0402 	ands.w	r4, r4, #2
   100dc:	d005      	beq.n	100ea <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   100de:	4631      	mov	r1, r6
   100e0:	4838      	ldr	r0, [pc, #224]	; (101c4 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
   100e2:	f00d fdfb 	bl	1dcdc <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   100e6:	2400      	movs	r4, #0
}
   100e8:	e01f      	b.n	1012a <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   100ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   100ec:	005b      	lsls	r3, r3, #1
   100ee:	d51c      	bpl.n	1012a <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
   100f0:	4631      	mov	r1, r6
   100f2:	4835      	ldr	r0, [pc, #212]	; (101c8 <z_arm_fault+0x188>)
   100f4:	f00d fdf2 	bl	1dcdc <log_0>
		if (SCB_MMFSR != 0) {
   100f8:	4b34      	ldr	r3, [pc, #208]	; (101cc <z_arm_fault+0x18c>)
   100fa:	781b      	ldrb	r3, [r3, #0]
   100fc:	b12b      	cbz	r3, 1010a <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
   100fe:	2001      	movs	r0, #1
   10100:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   10104:	f7ff fec8 	bl	fe98 <mem_manage_fault.isra.0>
   10108:	e00e      	b.n	10128 <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
   1010a:	4b31      	ldr	r3, [pc, #196]	; (101d0 <z_arm_fault+0x190>)
   1010c:	781b      	ldrb	r3, [r3, #0]
   1010e:	b12b      	cbz	r3, 1011c <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
   10110:	2001      	movs	r0, #1
   10112:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   10116:	f7ff ff25 	bl	ff64 <bus_fault.isra.0>
   1011a:	e005      	b.n	10128 <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
   1011c:	4b2d      	ldr	r3, [pc, #180]	; (101d4 <z_arm_fault+0x194>)
   1011e:	881b      	ldrh	r3, [r3, #0]
   10120:	b29b      	uxth	r3, r3
   10122:	b113      	cbz	r3, 1012a <z_arm_fault+0xea>
			reason = usage_fault(esf);
   10124:	f7ff fe50 	bl	fdc8 <usage_fault.isra.0>
   10128:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1012a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1012e:	b993      	cbnz	r3, 10156 <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   10130:	2268      	movs	r2, #104	; 0x68
   10132:	4649      	mov	r1, r9
   10134:	a802      	add	r0, sp, #8
   10136:	f00e fbae 	bl	1e896 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1013a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1013c:	b39d      	cbz	r5, 101a6 <z_arm_fault+0x166>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1013e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   10142:	b922      	cbnz	r2, 1014e <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   10144:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   10148:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1014c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1014e:	4620      	mov	r0, r4
   10150:	a902      	add	r1, sp, #8
   10152:	f7ff fd51 	bl	fbf8 <z_arm_fatal_error>
}
   10156:	b01d      	add	sp, #116	; 0x74
   10158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   1015c:	2000      	movs	r0, #0
   1015e:	f10d 0107 	add.w	r1, sp, #7
   10162:	e7cf      	b.n	10104 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
   10164:	2000      	movs	r0, #0
   10166:	f10d 0107 	add.w	r1, sp, #7
   1016a:	e7d4      	b.n	10116 <z_arm_fault+0xd6>
   1016c:	4912      	ldr	r1, [pc, #72]	; (101b8 <z_arm_fault+0x178>)
   1016e:	4b11      	ldr	r3, [pc, #68]	; (101b4 <z_arm_fault+0x174>)
	PR_FAULT_INFO(
   10170:	4819      	ldr	r0, [pc, #100]	; (101d8 <z_arm_fault+0x198>)
   10172:	1ac9      	subs	r1, r1, r3
   10174:	08c9      	lsrs	r1, r1, #3
   10176:	0189      	lsls	r1, r1, #6
   10178:	f041 0101 	orr.w	r1, r1, #1
   1017c:	e7b1      	b.n	100e2 <z_arm_fault+0xa2>
   1017e:	4a0d      	ldr	r2, [pc, #52]	; (101b4 <z_arm_fault+0x174>)
   10180:	4b0d      	ldr	r3, [pc, #52]	; (101b8 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** %s %d) *****",
   10182:	4816      	ldr	r0, [pc, #88]	; (101dc <z_arm_fault+0x19c>)
   10184:	1a9b      	subs	r3, r3, r2
   10186:	08db      	lsrs	r3, r3, #3
   10188:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1018c:	ea4f 1383 	mov.w	r3, r3, lsl #6
   10190:	4913      	ldr	r1, [pc, #76]	; (101e0 <z_arm_fault+0x1a0>)
   10192:	f043 0301 	orr.w	r3, r3, #1
   10196:	bf18      	it	ne
   10198:	4601      	movne	r1, r0
   1019a:	f1a6 0210 	sub.w	r2, r6, #16
   1019e:	4811      	ldr	r0, [pc, #68]	; (101e4 <z_arm_fault+0x1a4>)
   101a0:	f00d fdc2 	bl	1dd28 <log_2>
   101a4:	e79f      	b.n	100e6 <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   101a6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   101aa:	f023 0301 	bic.w	r3, r3, #1
   101ae:	e7cd      	b.n	1014c <z_arm_fault+0x10c>
   101b0:	e000ed00 	.word	0xe000ed00
   101b4:	00020e10 	.word	0x00020e10
   101b8:	00020e70 	.word	0x00020e70
   101bc:	00021d56 	.word	0x00021d56
   101c0:	00021d79 	.word	0x00021d79
   101c4:	00021d90 	.word	0x00021d90
   101c8:	00021db1 	.word	0x00021db1
   101cc:	e000ed28 	.word	0xe000ed28
   101d0:	e000ed29 	.word	0xe000ed29
   101d4:	e000ed2a 	.word	0xe000ed2a
   101d8:	00021dd0 	.word	0x00021dd0
   101dc:	00021e1b 	.word	0x00021e1b
   101e0:	00021e06 	.word	0x00021e06
   101e4:	00021e34 	.word	0x00021e34

000101e8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   101e8:	4b04      	ldr	r3, [pc, #16]	; (101fc <z_arm_fault_init+0x14>)
   101ea:	695a      	ldr	r2, [r3, #20]
   101ec:	f042 0210 	orr.w	r2, r2, #16
   101f0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   101f2:	695a      	ldr	r2, [r3, #20]
   101f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   101f8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   101fa:	4770      	bx	lr
   101fc:	e000ed00 	.word	0xe000ed00

00010200 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10200:	4b04      	ldr	r3, [pc, #16]	; (10214 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10202:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10204:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   10206:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   10208:	d003      	beq.n	10212 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1020a:	4903      	ldr	r1, [pc, #12]	; (10218 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1020c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   10210:	600a      	str	r2, [r1, #0]

00010212 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   10212:	4770      	bx	lr
	ldr r3, =_kernel
   10214:	20021038 	.word	0x20021038
	ldr r1, =_SCS_ICSR
   10218:	e000ed04 	.word	0xe000ed04

0001021c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1021c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   10220:	4905      	ldr	r1, [pc, #20]	; (10238 <sys_arch_reboot+0x1c>)
   10222:	4b06      	ldr	r3, [pc, #24]	; (1023c <sys_arch_reboot+0x20>)
   10224:	68ca      	ldr	r2, [r1, #12]
   10226:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1022a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1022c:	60cb      	str	r3, [r1, #12]
   1022e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   10232:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   10234:	e7fd      	b.n	10232 <sys_arch_reboot+0x16>
   10236:	bf00      	nop
   10238:	e000ed00 	.word	0xe000ed00
   1023c:	05fa0004 	.word	0x05fa0004

00010240 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   10240:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10242:	2120      	movs	r1, #32
   10244:	4803      	ldr	r0, [pc, #12]	; (10254 <z_arm_interrupt_init+0x14>)
   10246:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   10248:	3301      	adds	r3, #1
   1024a:	2b41      	cmp	r3, #65	; 0x41
   1024c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   10250:	d1f9      	bne.n	10246 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   10252:	4770      	bx	lr
   10254:	e000e100 	.word	0xe000e100

00010258 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   10258:	b510      	push	{r4, lr}
   1025a:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
   1025c:	f00c fb70 	bl	1c940 <z_thread_single_abort>

	if (_current == thread) {
   10260:	4b11      	ldr	r3, [pc, #68]	; (102a8 <z_impl_k_thread_abort+0x50>)
   10262:	689b      	ldr	r3, [r3, #8]
   10264:	42a3      	cmp	r3, r4
   10266:	d107      	bne.n	10278 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10268:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1026c:	b183      	cbz	r3, 10290 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1026e:	4a0f      	ldr	r2, [pc, #60]	; (102ac <z_impl_k_thread_abort+0x54>)
   10270:	6853      	ldr	r3, [r2, #4]
   10272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10276:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
   10278:	f04f 0320 	mov.w	r3, #32
   1027c:	f3ef 8011 	mrs	r0, BASEPRI
   10280:	f383 8811 	msr	BASEPRI, r3
   10284:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   10288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   1028c:	f010 b932 	b.w	204f4 <z_reschedule_irqlock>
   10290:	f04f 0320 	mov.w	r3, #32
   10294:	f3ef 8011 	mrs	r0, BASEPRI
   10298:	f383 8811 	msr	BASEPRI, r3
   1029c:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
   102a0:	f7ff fb84 	bl	f9ac <arch_swap>
	return ret;
   102a4:	e7e8      	b.n	10278 <z_impl_k_thread_abort+0x20>
   102a6:	bf00      	nop
   102a8:	20021038 	.word	0x20021038
   102ac:	e000ed00 	.word	0xe000ed00

000102b0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   102b0:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   102b2:	4b0e      	ldr	r3, [pc, #56]	; (102ec <z_arm_configure_static_mpu_regions+0x3c>)
{
   102b4:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   102b6:	9302      	str	r3, [sp, #8]
   102b8:	4b0d      	ldr	r3, [pc, #52]	; (102f0 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   102ba:	4c0e      	ldr	r4, [pc, #56]	; (102f4 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   102bc:	9303      	str	r3, [sp, #12]
   102be:	4b0e      	ldr	r3, [pc, #56]	; (102f8 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   102c0:	4a0e      	ldr	r2, [pc, #56]	; (102fc <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   102c2:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   102c4:	ab02      	add	r3, sp, #8
   102c6:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   102c8:	a801      	add	r0, sp, #4
   102ca:	4623      	mov	r3, r4
   102cc:	2101      	movs	r1, #1
   102ce:	f000 f93d 	bl	1054c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   102d2:	2300      	movs	r3, #0
   102d4:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   102d6:	4b0a      	ldr	r3, [pc, #40]	; (10300 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   102d8:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   102da:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   102dc:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   102de:	9305      	str	r3, [sp, #20]
   102e0:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   102e2:	f000 f93d 	bl	10560 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   102e6:	b008      	add	sp, #32
   102e8:	bd10      	pop	{r4, pc}
   102ea:	bf00      	nop
   102ec:	20020000 	.word	0x20020000
   102f0:	00000000 	.word	0x00000000
   102f4:	20040000 	.word	0x20040000
   102f8:	00010006 	.word	0x00010006
   102fc:	20020000 	.word	0x20020000
   10300:	20020208 	.word	0x20020208

00010304 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   10304:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   10306:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   10308:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1030a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1030e:	f004 031f 	and.w	r3, r4, #31
   10312:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10314:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   10316:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   10318:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   1031c:	4904      	ldr	r1, [pc, #16]	; (10330 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1031e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   10322:	f043 0301 	orr.w	r3, r3, #1
   10326:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   10328:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1032a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1032c:	bd10      	pop	{r4, pc}
   1032e:	bf00      	nop
   10330:	e000ed90 	.word	0xe000ed90

00010334 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   10334:	b508      	push	{r3, lr}
   10336:	4a07      	ldr	r2, [pc, #28]	; (10354 <region_allocate_and_init.part.0+0x20>)
   10338:	4b07      	ldr	r3, [pc, #28]	; (10358 <region_allocate_and_init.part.0+0x24>)
   1033a:	4601      	mov	r1, r0
   1033c:	1ad2      	subs	r2, r2, r3
   1033e:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   10340:	0192      	lsls	r2, r2, #6
   10342:	4806      	ldr	r0, [pc, #24]	; (1035c <region_allocate_and_init.part.0+0x28>)
   10344:	f042 0201 	orr.w	r2, r2, #1
   10348:	f00d fcd7 	bl	1dcfa <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   1034c:	f06f 0015 	mvn.w	r0, #21
   10350:	bd08      	pop	{r3, pc}
   10352:	bf00      	nop
   10354:	00020e58 	.word	0x00020e58
   10358:	00020e10 	.word	0x00020e10
   1035c:	00021e4b 	.word	0x00021e4b

00010360 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   10360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10364:	4607      	mov	r7, r0
   10366:	4688      	mov	r8, r1
   10368:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1036a:	2600      	movs	r6, #0
	MPU->RNR = index;
   1036c:	4d56      	ldr	r5, [pc, #344]	; (104c8 <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1036e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   10370:	4546      	cmp	r6, r8
   10372:	da35      	bge.n	103e0 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   10374:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   10378:	f8d3 9004 	ldr.w	r9, [r3, #4]
   1037c:	f1b9 0f00 	cmp.w	r9, #0
   10380:	d051      	beq.n	10426 <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
   10382:	f1b9 0f1f 	cmp.w	r9, #31
   10386:	d91e      	bls.n	103c6 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   10388:	f019 0f1f 	tst.w	r9, #31
   1038c:	d11b      	bne.n	103c6 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   1038e:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   10392:	f01a 0f1f 	tst.w	sl, #31
   10396:	d116      	bne.n	103c6 <mpu_configure_regions_and_partition.constprop.0+0x66>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10398:	4650      	mov	r0, sl
   1039a:	f00e f8ea 	bl	1e572 <arm_cmse_mpu_region_get>
   1039e:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   103a0:	eb09 000a 	add.w	r0, r9, sl
   103a4:	3801      	subs	r0, #1
   103a6:	f00e f8e4 	bl	1e572 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   103aa:	4583      	cmp	fp, r0
   103ac:	d01c      	beq.n	103e8 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   103ae:	f06f 0b15 	mvn.w	fp, #21
   103b2:	4a46      	ldr	r2, [pc, #280]	; (104cc <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   103b4:	4b46      	ldr	r3, [pc, #280]	; (104d0 <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   103b6:	4659      	mov	r1, fp
   103b8:	1ad2      	subs	r2, r2, r3
   103ba:	08d2      	lsrs	r2, r2, #3
   103bc:	0192      	lsls	r2, r2, #6
   103be:	4845      	ldr	r0, [pc, #276]	; (104d4 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   103c0:	f042 0201 	orr.w	r2, r2, #1
   103c4:	e008      	b.n	103d8 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   103c6:	4631      	mov	r1, r6
   103c8:	4a40      	ldr	r2, [pc, #256]	; (104cc <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   103ca:	4b41      	ldr	r3, [pc, #260]	; (104d0 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   103cc:	4842      	ldr	r0, [pc, #264]	; (104d8 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   103ce:	1ad2      	subs	r2, r2, r3
   103d0:	08d2      	lsrs	r2, r2, #3
   103d2:	0192      	lsls	r2, r2, #6
   103d4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   103d8:	f00d fc8f 	bl	1dcfa <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   103dc:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   103e0:	4620      	mov	r0, r4
   103e2:	b005      	add	sp, #20
   103e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   103e8:	f11b 0f16 	cmn.w	fp, #22
   103ec:	d0e1      	beq.n	103b2 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   103ee:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   103f0:	455b      	cmp	r3, fp
   103f2:	dbde      	blt.n	103b2 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   103f4:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   103f8:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   103fa:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   103fe:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10400:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   10404:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   10408:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1040c:	e9d1 3200 	ldrd	r3, r2, [r1]
   10410:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   10412:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   10414:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   10418:	d118      	bne.n	1044c <mpu_configure_regions_and_partition.constprop.0+0xec>
   1041a:	45ca      	cmp	sl, r9
   1041c:	d105      	bne.n	1042a <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
   1041e:	fa5f f08b 	uxtb.w	r0, fp
   10422:	f00e f885 	bl	1e530 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   10426:	3601      	adds	r6, #1
   10428:	e7a2      	b.n	10370 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   1042a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1042e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   10430:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   10434:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   10438:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1043a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   1043c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1043e:	f00e f877 	bl	1e530 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   10442:	f110 0f16 	cmn.w	r0, #22
   10446:	d0c9      	beq.n	103dc <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   10448:	1c44      	adds	r4, r0, #1
   1044a:	e7ec      	b.n	10426 <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
   1044c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10450:	692a      	ldr	r2, [r5, #16]
   10452:	3b01      	subs	r3, #1
   10454:	f023 031f 	bic.w	r3, r3, #31
   10458:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1045c:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1045e:	45ca      	cmp	sl, r9
   10460:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   10462:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   10464:	d0eb      	beq.n	1043e <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
   10466:	f00e f863 	bl	1e530 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1046a:	f110 0f16 	cmn.w	r0, #22
   1046e:	d0b5      	beq.n	103dc <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   10470:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   10474:	68ea      	ldr	r2, [r5, #12]
   10476:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   1047a:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   1047e:	f362 0304 	bfi	r3, r2, #0, #5
   10482:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10486:	692b      	ldr	r3, [r5, #16]
   10488:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1048c:	085b      	lsrs	r3, r3, #1
   1048e:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   10492:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   10496:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   1049a:	e9d3 1300 	ldrd	r1, r3, [r3]
   1049e:	440b      	add	r3, r1
   104a0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   104a2:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   104a6:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   104a8:	4453      	add	r3, sl
   104aa:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   104ae:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   104b0:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   104b4:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   104b6:	9303      	str	r3, [sp, #12]
   104b8:	d902      	bls.n	104c0 <mpu_configure_regions_and_partition.constprop.0+0x160>
   104ba:	f7ff ff3b 	bl	10334 <region_allocate_and_init.part.0>
   104be:	e7c0      	b.n	10442 <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
   104c0:	4669      	mov	r1, sp
   104c2:	f7ff ff1f 	bl	10304 <region_init>
			if (reg_index == -EINVAL) {
   104c6:	e7bf      	b.n	10448 <mpu_configure_regions_and_partition.constprop.0+0xe8>
   104c8:	e000ed90 	.word	0xe000ed90
   104cc:	00020e58 	.word	0x00020e58
   104d0:	00020e10 	.word	0x00020e10
   104d4:	00021e94 	.word	0x00021e94
   104d8:	00021e71 	.word	0x00021e71

000104dc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   104dc:	2205      	movs	r2, #5
   104de:	4b03      	ldr	r3, [pc, #12]	; (104ec <arm_core_mpu_enable+0x10>)
   104e0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   104e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   104e6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   104ea:	4770      	bx	lr
   104ec:	e000ed90 	.word	0xe000ed90

000104f0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   104f0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   104f4:	2200      	movs	r2, #0
   104f6:	4b01      	ldr	r3, [pc, #4]	; (104fc <arm_core_mpu_disable+0xc>)
   104f8:	605a      	str	r2, [r3, #4]
}
   104fa:	4770      	bx	lr
   104fc:	e000ed90 	.word	0xe000ed90

00010500 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   10500:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   10502:	4c0e      	ldr	r4, [pc, #56]	; (1053c <arm_mpu_init+0x3c>)
   10504:	6825      	ldr	r5, [r4, #0]
   10506:	2d10      	cmp	r5, #16
   10508:	d814      	bhi.n	10534 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1050a:	f7ff fff1 	bl	104f0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1050e:	2000      	movs	r0, #0
	MPU->MAIR0 =
   10510:	4b0b      	ldr	r3, [pc, #44]	; (10540 <arm_mpu_init+0x40>)
   10512:	4a0c      	ldr	r2, [pc, #48]	; (10544 <arm_mpu_init+0x44>)
   10514:	631a      	str	r2, [r3, #48]	; 0x30
   10516:	4285      	cmp	r5, r0
   10518:	d105      	bne.n	10526 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1051a:	4b0b      	ldr	r3, [pc, #44]	; (10548 <arm_mpu_init+0x48>)
   1051c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1051e:	f7ff ffdd 	bl	104dc <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   10522:	2000      	movs	r0, #0
}
   10524:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   10526:	6861      	ldr	r1, [r4, #4]
   10528:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1052c:	f7ff feea 	bl	10304 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   10530:	3001      	adds	r0, #1
   10532:	e7f0      	b.n	10516 <arm_mpu_init+0x16>
		return -1;
   10534:	f04f 30ff 	mov.w	r0, #4294967295
   10538:	e7f4      	b.n	10524 <arm_mpu_init+0x24>
   1053a:	bf00      	nop
   1053c:	00020f80 	.word	0x00020f80
   10540:	e000ed90 	.word	0xe000ed90
   10544:	0044ffaa 	.word	0x0044ffaa
   10548:	20021b5d 	.word	0x20021b5d

0001054c <arm_core_mpu_configure_static_mpu_regions>:
{
   1054c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1054e:	4c03      	ldr	r4, [pc, #12]	; (1055c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   10550:	7822      	ldrb	r2, [r4, #0]
   10552:	f7ff ff05 	bl	10360 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   10556:	7020      	strb	r0, [r4, #0]
}
   10558:	bd10      	pop	{r4, pc}
   1055a:	bf00      	nop
   1055c:	20021b5d 	.word	0x20021b5d

00010560 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   10560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10564:	4d26      	ldr	r5, [pc, #152]	; (10600 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   10566:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10568:	4606      	mov	r6, r0
   1056a:	f04f 0800 	mov.w	r8, #0
   1056e:	46ab      	mov	fp, r5
	MPU->RNR = index;
   10570:	4f24      	ldr	r7, [pc, #144]	; (10604 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   10572:	45d0      	cmp	r8, sl
   10574:	da1b      	bge.n	105ae <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   10576:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1057a:	f1b9 0f00 	cmp.w	r9, #0
   1057e:	d039      	beq.n	105f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   10580:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   10582:	4608      	mov	r0, r1
   10584:	9101      	str	r1, [sp, #4]
   10586:	f00d fff4 	bl	1e572 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1058a:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1058c:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1058e:	eb09 0001 	add.w	r0, r9, r1
   10592:	3801      	subs	r0, #1
   10594:	f00d ffed 	bl	1e572 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   10598:	4284      	cmp	r4, r0
   1059a:	f04f 0214 	mov.w	r2, #20
   1059e:	4b1a      	ldr	r3, [pc, #104]	; (10608 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   105a0:	d008      	beq.n	105b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   105a2:	f06f 0315 	mvn.w	r3, #21
   105a6:	fb02 f808 	mul.w	r8, r2, r8
   105aa:	f84b 3008 	str.w	r3, [fp, r8]
}
   105ae:	b003      	add	sp, #12
   105b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   105b4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   105b8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   105ba:	d0f8      	beq.n	105ae <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   105bc:	7819      	ldrb	r1, [r3, #0]
   105be:	42a1      	cmp	r1, r4
   105c0:	ddf5      	ble.n	105ae <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   105c2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   105c6:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   105c8:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   105ca:	68fc      	ldr	r4, [r7, #12]
   105cc:	f100 0108 	add.w	r1, r0, #8
   105d0:	7b00      	ldrb	r0, [r0, #12]
   105d2:	f364 0004 	bfi	r0, r4, #0, #5
   105d6:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   105d8:	6938      	ldr	r0, [r7, #16]
   105da:	790c      	ldrb	r4, [r1, #4]
   105dc:	0840      	lsrs	r0, r0, #1
   105de:	f360 1447 	bfi	r4, r0, #5, #3
   105e2:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   105e4:	68f9      	ldr	r1, [r7, #12]
   105e6:	f021 011f 	bic.w	r1, r1, #31
   105ea:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   105ec:	6939      	ldr	r1, [r7, #16]
   105ee:	f021 011f 	bic.w	r1, r1, #31
   105f2:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   105f4:	f108 0801 	add.w	r8, r8, #1
   105f8:	3514      	adds	r5, #20
   105fa:	360c      	adds	r6, #12
   105fc:	e7b9      	b.n	10572 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   105fe:	bf00      	nop
   10600:	200208d8 	.word	0x200208d8
   10604:	e000ed90 	.word	0xe000ed90
   10608:	20021b5d 	.word	0x20021b5d

0001060c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1060c:	4b01      	ldr	r3, [pc, #4]	; (10614 <__stdout_hook_install+0x8>)
   1060e:	6018      	str	r0, [r3, #0]
}
   10610:	4770      	bx	lr
   10612:	bf00      	nop
   10614:	20020008 	.word	0x20020008

00010618 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   10618:	b40c      	push	{r2, r3}
   1061a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   1061c:	b909      	cbnz	r1, 10622 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
   1061e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
   10622:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   10626:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10628:	9a06      	ldr	r2, [sp, #24]
   1062a:	a902      	add	r1, sp, #8
   1062c:	4805      	ldr	r0, [pc, #20]	; (10644 <snprintf+0x2c>)
	va_start(vargs, format);
   1062e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10630:	f7fd fbb4 	bl	dd9c <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10634:	2200      	movs	r2, #0
   10636:	9b02      	ldr	r3, [sp, #8]
   10638:	701a      	strb	r2, [r3, #0]
	return r;
}
   1063a:	b005      	add	sp, #20
   1063c:	f85d eb04 	ldr.w	lr, [sp], #4
   10640:	b002      	add	sp, #8
   10642:	4770      	bx	lr
   10644:	0001e939 	.word	0x0001e939

00010648 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   10648:	b40e      	push	{r1, r2, r3}
   1064a:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   1064c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   10650:	ab05      	add	r3, sp, #20
   10652:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   10656:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   10658:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   1065a:	4806      	ldr	r0, [pc, #24]	; (10674 <sprintf+0x2c>)
   1065c:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   1065e:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
   10660:	f7fd fb9c 	bl	dd9c <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
   10664:	2200      	movs	r2, #0
   10666:	9b02      	ldr	r3, [sp, #8]
   10668:	701a      	strb	r2, [r3, #0]
	return r;
}
   1066a:	b004      	add	sp, #16
   1066c:	f85d eb04 	ldr.w	lr, [sp], #4
   10670:	b003      	add	sp, #12
   10672:	4770      	bx	lr
   10674:	0001e939 	.word	0x0001e939

00010678 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   10678:	b538      	push	{r3, r4, r5, lr}
   1067a:	4c08      	ldr	r4, [pc, #32]	; (1069c <net_if_init+0x24>)

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1067c:	4d08      	ldr	r5, [pc, #32]	; (106a0 <net_if_init+0x28>)
   1067e:	42ac      	cmp	r4, r5
   10680:	4620      	mov	r0, r4
   10682:	d300      	bcc.n	10686 <net_if_init+0xe>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   10684:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   10686:	6803      	ldr	r3, [r0, #0]
   10688:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   1068a:	681b      	ldr	r3, [r3, #0]
   1068c:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   1068e:	2b00      	cmp	r3, #0
   10690:	d0f5      	beq.n	1067e <net_if_init+0x6>
   10692:	681b      	ldr	r3, [r3, #0]
   10694:	2b00      	cmp	r3, #0
   10696:	d0f2      	beq.n	1067e <net_if_init+0x6>
	api->init(iface);
   10698:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   1069a:	e7f0      	b.n	1067e <net_if_init+0x6>
   1069c:	200201e4 	.word	0x200201e4
   106a0:	200201e8 	.word	0x200201e8

000106a4 <net_if_post_init>:

void net_if_post_init(void)
{
   106a4:	b538      	push	{r3, r4, r5, lr}
   106a6:	4c08      	ldr	r4, [pc, #32]	; (106c8 <net_if_post_init+0x24>)
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   106a8:	4d08      	ldr	r5, [pc, #32]	; (106cc <net_if_post_init+0x28>)
   106aa:	42ac      	cmp	r4, r5
   106ac:	4620      	mov	r0, r4
   106ae:	d300      	bcc.n	106b2 <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   106b0:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   106b2:	6803      	ldr	r3, [r0, #0]
   106b4:	3404      	adds	r4, #4
   106b6:	330c      	adds	r3, #12
   106b8:	e8d3 3faf 	lda	r3, [r3]
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   106bc:	071b      	lsls	r3, r3, #28
   106be:	d4f4      	bmi.n	106aa <net_if_post_init+0x6>
			net_if_up(iface);
   106c0:	f00e f960 	bl	1e984 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   106c4:	e7f1      	b.n	106aa <net_if_post_init+0x6>
   106c6:	bf00      	nop
   106c8:	200201e4 	.word	0x200201e4
   106cc:	200201e8 	.word	0x200201e8

000106d0 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   106d0:	2300      	movs	r3, #0
{
   106d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   106d6:	2802      	cmp	r0, #2
{
   106d8:	b089      	sub	sp, #36	; 0x24
   106da:	4607      	mov	r7, r0
   106dc:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   106de:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   106e2:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   106e4:	d13e      	bne.n	10764 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   106e6:	a806      	add	r0, sp, #24
   106e8:	9105      	str	r1, [sp, #20]
   106ea:	4601      	mov	r1, r0
{
   106ec:	461a      	mov	r2, r3
   106ee:	e006      	b.n	106fe <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   106f0:	780c      	ldrb	r4, [r1, #0]
   106f2:	3201      	adds	r2, #1
   106f4:	3401      	adds	r4, #1
   106f6:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   106f8:	b2d4      	uxtb	r4, r2
   106fa:	2c07      	cmp	r4, #7
   106fc:	d804      	bhi.n	10708 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   106fe:	9c04      	ldr	r4, [sp, #16]
   10700:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   10704:	2c00      	cmp	r4, #0
   10706:	d0f3      	beq.n	106f0 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   10708:	3301      	adds	r3, #1
   1070a:	2b08      	cmp	r3, #8
   1070c:	f101 0101 	add.w	r1, r1, #1
   10710:	d1ec      	bne.n	106ec <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   10712:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   10716:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   1071a:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   1071c:	f810 2b01 	ldrb.w	r2, [r0], #1
   10720:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   10722:	bf88      	it	hi
   10724:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   10728:	f103 0301 	add.w	r3, r3, #1
   1072c:	b2db      	uxtb	r3, r3
				pos = i;
   1072e:	bf88      	it	hi
   10730:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   10732:	2b08      	cmp	r3, #8
   10734:	d1f2      	bne.n	1071c <z_impl_net_addr_ntop+0x4c>
		len = 8;
   10736:	469b      	mov	fp, r3
   10738:	f1b9 0f01 	cmp.w	r9, #1
   1073c:	f04f 033a 	mov.w	r3, #58	; 0x3a
   10740:	bf08      	it	eq
   10742:	f04f 38ff 	moveq.w	r8, #4294967295
   10746:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   10748:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   1074a:	4634      	mov	r4, r6
   1074c:	460d      	mov	r5, r1
   1074e:	455d      	cmp	r5, fp
   10750:	db17      	blt.n	10782 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   10752:	42b4      	cmp	r4, r6
   10754:	d008      	beq.n	10768 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   10756:	2300      	movs	r3, #0
   10758:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   1075a:	bf0c      	ite	eq
   1075c:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   10760:	7023      	strbne	r3, [r4, #0]
   10762:	e002      	b.n	1076a <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   10764:	2801      	cmp	r0, #1
   10766:	d004      	beq.n	10772 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   10768:	2600      	movs	r6, #0
	}

	return dst;
}
   1076a:	4630      	mov	r0, r6
   1076c:	b009      	add	sp, #36	; 0x24
   1076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   10772:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   10774:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   10778:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   1077c:	4681      	mov	r9, r0
		delim = '.';
   1077e:	9303      	str	r3, [sp, #12]
   10780:	e7e2      	b.n	10748 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   10782:	f1bb 0f04 	cmp.w	fp, #4
   10786:	d13b      	bne.n	10800 <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   10788:	9b04      	ldr	r3, [sp, #16]
   1078a:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   1078c:	b94a      	cbnz	r2, 107a2 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   1078e:	2330      	movs	r3, #48	; 0x30
   10790:	4620      	mov	r0, r4
   10792:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   10796:	9b03      	ldr	r3, [sp, #12]
   10798:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   1079a:	3501      	adds	r5, #1
   1079c:	4604      	mov	r4, r0
   1079e:	b2ed      	uxtb	r5, r5
   107a0:	e7d5      	b.n	1074e <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   107a2:	f04f 0e09 	mov.w	lr, #9
   107a6:	f04f 0a00 	mov.w	sl, #0
   107aa:	e9cd 2401 	strd	r2, r4, [sp, #4]
   107ae:	483a      	ldr	r0, [pc, #232]	; (10898 <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   107b0:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   107b4:	45f2      	cmp	sl, lr
		value = value % divisor;
   107b6:	fbbc f2f0 	udiv	r2, ip, r0
   107ba:	fb00 c212 	mls	r2, r0, r2, ip
   107be:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   107c0:	dc01      	bgt.n	107c6 <z_impl_net_addr_ntop+0xf6>
   107c2:	4584      	cmp	ip, r0
   107c4:	d308      	bcc.n	107d8 <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   107c6:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   107ca:	46f2      	mov	sl, lr
   107cc:	9b02      	ldr	r3, [sp, #8]
   107ce:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   107d2:	f803 cb01 	strb.w	ip, [r3], #1
   107d6:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   107d8:	220a      	movs	r2, #10
   107da:	f10e 3eff 	add.w	lr, lr, #4294967295
   107de:	f1be 3fff 	cmp.w	lr, #4294967295
   107e2:	fbb0 f0f2 	udiv	r0, r0, r2
   107e6:	d1e3      	bne.n	107b0 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   107e8:	f04f 0200 	mov.w	r2, #0
   107ec:	9b02      	ldr	r3, [sp, #8]
   107ee:	701a      	strb	r2, [r3, #0]
	return buf - start;
   107f0:	1b1b      	subs	r3, r3, r4
			ptr += l;
   107f2:	b2da      	uxtb	r2, r3
   107f4:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   107f8:	1c58      	adds	r0, r3, #1
   107fa:	9b03      	ldr	r3, [sp, #12]
   107fc:	54a3      	strb	r3, [r4, r2]
			continue;
   107fe:	e7cc      	b.n	1079a <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   10800:	45a8      	cmp	r8, r5
   10802:	d110      	bne.n	10826 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   10804:	b911      	cbnz	r1, 1080c <z_impl_net_addr_ntop+0x13c>
   10806:	f1b8 0f00 	cmp.w	r8, #0
   1080a:	d102      	bne.n	10812 <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   1080c:	233a      	movs	r3, #58	; 0x3a
   1080e:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   10812:	233a      	movs	r3, #58	; 0x3a
   10814:	4620      	mov	r0, r4
   10816:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   1081a:	f109 33ff 	add.w	r3, r9, #4294967295
   1081e:	441d      	add	r5, r3
			needcolon = false;
   10820:	2100      	movs	r1, #0
			i += longest - 1U;
   10822:	b2ed      	uxtb	r5, r5
			continue;
   10824:	e7b9      	b.n	1079a <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   10826:	b111      	cbz	r1, 1082e <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   10828:	233a      	movs	r3, #58	; 0x3a
   1082a:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1082e:	9b05      	ldr	r3, [sp, #20]
   10830:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   10834:	0219      	lsls	r1, r3, #8
   10836:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   1083a:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1083e:	b20a      	sxth	r2, r1
		bh = value >> 8;
   10840:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   10844:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   10848:	d016      	beq.n	10878 <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   1084a:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   1084c:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   1084e:	d90b      	bls.n	10868 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   10850:	2300      	movs	r3, #0
   10852:	2261      	movs	r2, #97	; 0x61
   10854:	4620      	mov	r0, r4
   10856:	f00e f8c6 	bl	1e9e6 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1085a:	2301      	movs	r3, #1
   1085c:	2261      	movs	r2, #97	; 0x61
   1085e:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   10860:	f00e f8c1 	bl	1e9e6 <net_byte_to_hex>
		needcolon = true;
   10864:	2101      	movs	r1, #1
   10866:	e798      	b.n	1079a <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   10868:	b25b      	sxtb	r3, r3
   1086a:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   1086c:	bf94      	ite	ls
   1086e:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   10870:	3357      	addhi	r3, #87	; 0x57
   10872:	1c60      	adds	r0, r4, #1
   10874:	7023      	strb	r3, [r4, #0]
   10876:	e7f0      	b.n	1085a <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   10878:	f1ba 0f0f 	cmp.w	sl, #15
   1087c:	d903      	bls.n	10886 <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1087e:	2261      	movs	r2, #97	; 0x61
   10880:	4651      	mov	r1, sl
   10882:	4620      	mov	r0, r4
   10884:	e7ec      	b.n	10860 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   10886:	b253      	sxtb	r3, r2
   10888:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   1088c:	bf94      	ite	ls
   1088e:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   10890:	3357      	addhi	r3, #87	; 0x57
   10892:	1c60      	adds	r0, r4, #1
   10894:	7023      	strb	r3, [r4, #0]
   10896:	e7e5      	b.n	10864 <z_impl_net_addr_ntop+0x194>
   10898:	3b9aca00 	.word	0x3b9aca00

0001089c <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   1089c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   108a0:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   108a2:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   108a6:	4b3b      	ldr	r3, [pc, #236]	; (10994 <connect_request_encode+0xf8>)
   108a8:	4a3b      	ldr	r2, [pc, #236]	; (10998 <connect_request_encode+0xfc>)
{
   108aa:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   108ac:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   108b0:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   108b2:	2804      	cmp	r0, #4
   108b4:	bf0c      	ite	eq
   108b6:	4610      	moveq	r0, r2
   108b8:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   108ba:	600d      	str	r5, [r1, #0]
{
   108bc:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   108be:	f00e f979 	bl	1ebb4 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   108c2:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   108c6:	4603      	mov	r3, r0
   108c8:	b938      	cbnz	r0, 108da <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   108ca:	e9d8 2000 	ldrd	r2, r0, [r8]
   108ce:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   108d0:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   108d4:	d104      	bne.n	108e0 <connect_request_encode+0x44>
		return -ENOMEM;
   108d6:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   108da:	4618      	mov	r0, r3
   108dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   108e0:	1c50      	adds	r0, r2, #1
   108e2:	f8c8 0000 	str.w	r0, [r8]
   108e6:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   108e8:	e9d8 6200 	ldrd	r6, r2, [r8]
   108ec:	4296      	cmp	r6, r2
   108ee:	d0f2      	beq.n	108d6 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   108f0:	1c72      	adds	r2, r6, #1
   108f2:	f8c8 2000 	str.w	r2, [r8]
   108f6:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   108f8:	4641      	mov	r1, r8
   108fa:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
   108fe:	f00e f947 	bl	1eb90 <pack_uint16>
	if (err_code != 0) {
   10902:	4603      	mov	r3, r0
   10904:	2800      	cmp	r0, #0
   10906:	d1e8      	bne.n	108da <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   10908:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1090c:	f00e f952 	bl	1ebb4 <pack_utf8_str>
	if (err_code != 0) {
   10910:	4603      	mov	r3, r0
   10912:	2800      	cmp	r0, #0
   10914:	d1e1      	bne.n	108da <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   10916:	6c38      	ldr	r0, [r7, #64]	; 0x40
	uint8_t connect_flags = client->clean_session << 1;
   10918:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   1091a:	b1d8      	cbz	r0, 10954 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   1091c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   10920:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   10924:	f003 0301 	and.w	r3, r3, #1
   10928:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   1092c:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   1092e:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   10930:	00db      	lsls	r3, r3, #3
   10932:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   10936:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   10938:	f00e f93c 	bl	1ebb4 <pack_utf8_str>
		if (err_code != 0) {
   1093c:	4603      	mov	r3, r0
   1093e:	2800      	cmp	r0, #0
   10940:	d1cb      	bne.n	108da <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   10942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
			err_code = pack_utf8_str(client->will_message, buf);
   10944:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   10946:	b30b      	cbz	r3, 1098c <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   10948:	4618      	mov	r0, r3
   1094a:	f00e f933 	bl	1ebb4 <pack_utf8_str>
			if (err_code != 0) {
   1094e:	4603      	mov	r3, r0
   10950:	2800      	cmp	r0, #0
   10952:	d1c2      	bne.n	108da <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   10954:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   10956:	b138      	cbz	r0, 10968 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   10958:	4641      	mov	r1, r8
   1095a:	f00e f92b 	bl	1ebb4 <pack_utf8_str>
		if (err_code != 0) {
   1095e:	4603      	mov	r3, r0
   10960:	2800      	cmp	r0, #0
   10962:	d1ba      	bne.n	108da <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   10964:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   10968:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1096a:	b138      	cbz	r0, 1097c <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   1096c:	4641      	mov	r1, r8
   1096e:	f00e f921 	bl	1ebb4 <pack_utf8_str>
		if (err_code != 0) {
   10972:	4603      	mov	r3, r0
   10974:	2800      	cmp	r0, #0
   10976:	d1b0      	bne.n	108da <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   10978:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   1097c:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   1097e:	4642      	mov	r2, r8
   10980:	4629      	mov	r1, r5
}
   10982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   10986:	2010      	movs	r0, #16
   10988:	f00e b92f 	b.w	1ebea <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   1098c:	f00e f900 	bl	1eb90 <pack_uint16>
   10990:	e7dd      	b.n	1094e <connect_request_encode+0xb2>
   10992:	bf00      	nop
   10994:	00020fa8 	.word	0x00020fa8
   10998:	00020fb0 	.word	0x00020fb0

0001099c <disconnect_encode>:

	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
   1099c:	b510      	push	{r4, lr}
   1099e:	4604      	mov	r4, r0
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   109a0:	e9d0 0300 	ldrd	r0, r3, [r0]
   109a4:	1a1b      	subs	r3, r3, r0
   109a6:	2b01      	cmp	r3, #1
   109a8:	d908      	bls.n	109bc <disconnect_encode+0x20>
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
   109aa:	2202      	movs	r2, #2
   109ac:	4905      	ldr	r1, [pc, #20]	; (109c4 <disconnect_encode+0x28>)
   109ae:	f00d ff72 	bl	1e896 <memcpy>
	buf->end = buf->cur + sizeof(disc_packet);

	return 0;
   109b2:	2000      	movs	r0, #0
	buf->end = buf->cur + sizeof(disc_packet);
   109b4:	6823      	ldr	r3, [r4, #0]
   109b6:	3302      	adds	r3, #2
   109b8:	6063      	str	r3, [r4, #4]
}
   109ba:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   109bc:	f06f 000b 	mvn.w	r0, #11
   109c0:	e7fb      	b.n	109ba <disconnect_encode+0x1e>
   109c2:	bf00      	nop
   109c4:	00021eda 	.word	0x00021eda

000109c8 <ping_request_encode>:

	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
   109c8:	b510      	push	{r4, lr}
   109ca:	4604      	mov	r4, r0
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   109cc:	e9d0 0300 	ldrd	r0, r3, [r0]
   109d0:	1a1b      	subs	r3, r3, r0
   109d2:	2b01      	cmp	r3, #1
   109d4:	d908      	bls.n	109e8 <ping_request_encode+0x20>
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
   109d6:	2202      	movs	r2, #2
   109d8:	4905      	ldr	r1, [pc, #20]	; (109f0 <ping_request_encode+0x28>)
   109da:	f00d ff5c 	bl	1e896 <memcpy>
	buf->end = buf->cur + sizeof(ping_packet);

	return 0;
   109de:	2000      	movs	r0, #0
	buf->end = buf->cur + sizeof(ping_packet);
   109e0:	6823      	ldr	r3, [r4, #0]
   109e2:	3302      	adds	r3, #2
   109e4:	6063      	str	r3, [r4, #4]
}
   109e6:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   109e8:	f06f 000b 	mvn.w	r0, #11
   109ec:	e7fb      	b.n	109e6 <ping_request_encode+0x1e>
   109ee:	bf00      	nop
   109f0:	00021edc 	.word	0x00021edc

000109f4 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   109f4:	2314      	movs	r3, #20
   109f6:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   109fa:	4353      	muls	r3, r2
   109fc:	4a01      	ldr	r2, [pc, #4]	; (10a04 <mqtt_transport_connect+0x10>)
   109fe:	58d3      	ldr	r3, [r2, r3]
   10a00:	4718      	bx	r3
   10a02:	bf00      	nop
   10a04:	00020fb8 	.word	0x00020fb8

00010a08 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   10a08:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   10a0a:	2514      	movs	r5, #20
   10a0c:	4c03      	ldr	r4, [pc, #12]	; (10a1c <mqtt_transport_write+0x14>)
   10a0e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   10a12:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   10a16:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   10a18:	685b      	ldr	r3, [r3, #4]
   10a1a:	4718      	bx	r3
   10a1c:	00020fb8 	.word	0x00020fb8

00010a20 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   10a20:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   10a22:	2414      	movs	r4, #20
   10a24:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   10a28:	4a03      	ldr	r2, [pc, #12]	; (10a38 <mqtt_transport_write_msg+0x18>)
   10a2a:	fb04 2303 	mla	r3, r4, r3, r2
}
   10a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   10a32:	689b      	ldr	r3, [r3, #8]
   10a34:	4718      	bx	r3
   10a36:	bf00      	nop
   10a38:	00020fb8 	.word	0x00020fb8

00010a3c <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   10a3c:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   10a3e:	2614      	movs	r6, #20
   10a40:	4d04      	ldr	r5, [pc, #16]	; (10a54 <mqtt_transport_read+0x18>)
   10a42:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   10a46:	fb06 5404 	mla	r4, r6, r4, r5
   10a4a:	68e4      	ldr	r4, [r4, #12]
   10a4c:	46a4      	mov	ip, r4
							 shall_block);
}
   10a4e:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   10a50:	4760      	bx	ip
   10a52:	bf00      	nop
   10a54:	00020fb8 	.word	0x00020fb8

00010a58 <sys_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   10a58:	68c2      	ldr	r2, [r0, #12]
{
   10a5a:	b508      	push	{r3, lr}
	if (mutex->kernel_mutex.lock_count == 0) {
   10a5c:	b142      	cbz	r2, 10a70 <sys_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   10a5e:	4b07      	ldr	r3, [pc, #28]	; (10a7c <sys_mutex_unlock+0x24>)
   10a60:	6882      	ldr	r2, [r0, #8]
   10a62:	689b      	ldr	r3, [r3, #8]
   10a64:	429a      	cmp	r2, r3
   10a66:	d106      	bne.n	10a76 <sys_mutex_unlock+0x1e>
	return z_impl_k_mutex_unlock(mutex);
   10a68:	f00b fd30 	bl	1c4cc <z_impl_k_mutex_unlock>
		return -EPERM;
	}

	k_mutex_unlock(&mutex->kernel_mutex);
	return 0;
   10a6c:	2000      	movs	r0, #0
}
   10a6e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   10a70:	f06f 0015 	mvn.w	r0, #21
   10a74:	e7fb      	b.n	10a6e <sys_mutex_unlock+0x16>
		return -EPERM;
   10a76:	f04f 30ff 	mov.w	r0, #4294967295
   10a7a:	e7f8      	b.n	10a6e <sys_mutex_unlock+0x16>
   10a7c:	20021038 	.word	0x20021038

00010a80 <z_impl_sys_rand32_get>:

static const struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
   10a80:	b513      	push	{r0, r1, r4, lr}
	const struct device *dev = entropy_driver;
   10a82:	4c0a      	ldr	r4, [pc, #40]	; (10aac <z_impl_sys_rand32_get+0x2c>)
   10a84:	6820      	ldr	r0, [r4, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   10a86:	b918      	cbnz	r0, 10a90 <z_impl_sys_rand32_get+0x10>
   10a88:	4809      	ldr	r0, [pc, #36]	; (10ab0 <z_impl_sys_rand32_get+0x30>)
   10a8a:	f00b f9ef 	bl	1be6c <z_impl_device_get_binding>
		dev = device_get_binding(DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		__ASSERT((dev != NULL),
			"Device driver for %s (DT_CHOSEN_ZEPHYR_ENTROPY_LABEL) not found. "
			"Check your build configuration!",
			DT_CHOSEN_ZEPHYR_ENTROPY_LABEL);
		entropy_driver = dev;
   10a8e:	6020      	str	r0, [r4, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   10a90:	2204      	movs	r2, #4
   10a92:	6883      	ldr	r3, [r0, #8]
   10a94:	eb0d 0102 	add.w	r1, sp, r2
   10a98:	681b      	ldr	r3, [r3, #0]
   10a9a:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   10a9c:	2800      	cmp	r0, #0
   10a9e:	da02      	bge.n	10aa6 <z_impl_sys_rand32_get+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   10aa0:	f7fe ff6a 	bl	f978 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   10aa4:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   10aa6:	9801      	ldr	r0, [sp, #4]
   10aa8:	b002      	add	sp, #8
   10aaa:	bd10      	pop	{r4, pc}
   10aac:	200208ec 	.word	0x200208ec
   10ab0:	00021ede 	.word	0x00021ede

00010ab4 <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10ab4:	4a06      	ldr	r2, [pc, #24]	; (10ad0 <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   10ab6:	f000 001f 	and.w	r0, r0, #31
   10aba:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   10abe:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   10ac2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   10ac6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   10aca:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   10ace:	4770      	bx	lr
   10ad0:	40842500 	.word	0x40842500

00010ad4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   10ad4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   10ad6:	4b09      	ldr	r3, [pc, #36]	; (10afc <gpio_nrfx_init+0x28>)
   10ad8:	781a      	ldrb	r2, [r3, #0]
   10ada:	b96a      	cbnz	r2, 10af8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   10adc:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   10ade:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   10ae0:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   10ae2:	2105      	movs	r1, #5
   10ae4:	f7ff f802 	bl	faec <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   10ae8:	2031      	movs	r0, #49	; 0x31
   10aea:	f7fe ffe1 	bl	fab0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   10aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   10af2:	4b03      	ldr	r3, [pc, #12]	; (10b00 <gpio_nrfx_init+0x2c>)
   10af4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   10af8:	2000      	movs	r0, #0
   10afa:	bd08      	pop	{r3, pc}
   10afc:	20021b5e 	.word	0x20021b5e
   10b00:	40031000 	.word	0x40031000

00010b04 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10b04:	4b28      	ldr	r3, [pc, #160]	; (10ba8 <gpio_nrfx_config+0xa4>)
{
   10b06:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10b08:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10b0a:	4828      	ldr	r0, [pc, #160]	; (10bac <gpio_nrfx_config+0xa8>)
   10b0c:	4013      	ands	r3, r2
   10b0e:	4283      	cmp	r3, r0
   10b10:	d03b      	beq.n	10b8a <gpio_nrfx_config+0x86>
   10b12:	d80d      	bhi.n	10b30 <gpio_nrfx_config+0x2c>
   10b14:	2b06      	cmp	r3, #6
   10b16:	d015      	beq.n	10b44 <gpio_nrfx_config+0x40>
   10b18:	d805      	bhi.n	10b26 <gpio_nrfx_config+0x22>
   10b1a:	b19b      	cbz	r3, 10b44 <gpio_nrfx_config+0x40>
   10b1c:	2b02      	cmp	r3, #2
   10b1e:	d036      	beq.n	10b8e <gpio_nrfx_config+0x8a>
   10b20:	f06f 0015 	mvn.w	r0, #21
   10b24:	e030      	b.n	10b88 <gpio_nrfx_config+0x84>
   10b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   10b2a:	d1f9      	bne.n	10b20 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   10b2c:	2301      	movs	r3, #1
   10b2e:	e009      	b.n	10b44 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   10b30:	481f      	ldr	r0, [pc, #124]	; (10bb0 <gpio_nrfx_config+0xac>)
   10b32:	4283      	cmp	r3, r0
   10b34:	d02d      	beq.n	10b92 <gpio_nrfx_config+0x8e>
   10b36:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   10b3a:	d02c      	beq.n	10b96 <gpio_nrfx_config+0x92>
   10b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   10b40:	d1ee      	bne.n	10b20 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   10b42:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   10b44:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   10b46:	bf4c      	ite	mi
   10b48:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   10b4a:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   10b4e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   10b52:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   10b56:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   10b5a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   10b5e:	d006      	beq.n	10b6e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   10b60:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10b64:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   10b66:	d018      	beq.n	10b9a <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
   10b68:	2201      	movs	r2, #1
   10b6a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   10b6c:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10b6e:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   10b72:	2000      	movs	r0, #0
   10b74:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
   10b78:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10b7c:	4a0d      	ldr	r2, [pc, #52]	; (10bb4 <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   10b7e:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   10b82:	3180      	adds	r1, #128	; 0x80
   10b84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   10b88:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   10b8a:	2307      	movs	r3, #7
   10b8c:	e7da      	b.n	10b44 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   10b8e:	2304      	movs	r3, #4
   10b90:	e7d8      	b.n	10b44 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   10b92:	2305      	movs	r3, #5
   10b94:	e7d6      	b.n	10b44 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   10b96:	2303      	movs	r3, #3
   10b98:	e7d4      	b.n	10b44 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   10b9a:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   10b9c:	bf42      	ittt	mi
   10b9e:	2201      	movmi	r2, #1
   10ba0:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   10ba2:	60f2      	strmi	r2, [r6, #12]
}
   10ba4:	e7e3      	b.n	10b6e <gpio_nrfx_config+0x6a>
   10ba6:	bf00      	nop
   10ba8:	00f00006 	.word	0x00f00006
   10bac:	00100006 	.word	0x00100006
   10bb0:	00400002 	.word	0x00400002
   10bb4:	40842500 	.word	0x40842500

00010bb8 <gpio_nrfx_pin_interrupt_configure>:
{
   10bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10bbc:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   10bbe:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   10bc0:	f8d0 800c 	ldr.w	r8, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   10bc4:	7a08      	ldrb	r0, [r1, #8]
   10bc6:	f005 071f 	and.w	r7, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   10bca:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   10bce:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   10bd2:	d10a      	bne.n	10bea <gpio_nrfx_pin_interrupt_configure+0x32>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   10bd4:	486e      	ldr	r0, [pc, #440]	; (10d90 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
    *p_pin = pin_number & 0x1F;
   10bd6:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   10bda:	3180      	adds	r1, #128	; 0x80
   10bdc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   10be0:	07c8      	lsls	r0, r1, #31
   10be2:	d508      	bpl.n	10bf6 <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   10be4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10be8:	e0c2      	b.n	10d70 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   10bea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   10bee:	f8d8 100c 	ldr.w	r1, [r8, #12]
   10bf2:	f000 80ae 	beq.w	10d52 <gpio_nrfx_pin_interrupt_configure+0x19a>
   10bf6:	2101      	movs	r1, #1
   10bf8:	f8d8 000c 	ldr.w	r0, [r8, #12]
   10bfc:	40a9      	lsls	r1, r5
   10bfe:	4301      	orrs	r1, r0
   10c00:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   10c04:	2101      	movs	r1, #1
   10c06:	f8d8 0014 	ldr.w	r0, [r8, #20]
   10c0a:	40a9      	lsls	r1, r5
   10c0c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   10c10:	f8d8 2018 	ldr.w	r2, [r8, #24]
   10c14:	bf0c      	ite	eq
   10c16:	4308      	orreq	r0, r1
   10c18:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   10c1a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   10c1e:	bf0c      	ite	eq
   10c20:	430a      	orreq	r2, r1
   10c22:	438a      	bicne	r2, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   10c24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10c28:	f04f 0300 	mov.w	r3, #0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   10c2c:	f8c8 2018 	str.w	r2, [r8, #24]
   10c30:	f8d8 2010 	ldr.w	r2, [r8, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   10c34:	4e57      	ldr	r6, [pc, #348]	; (10d94 <gpio_nrfx_pin_interrupt_configure+0x1dc>)
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   10c36:	bf0c      	ite	eq
   10c38:	4311      	orreq	r1, r2
   10c3a:	ea22 0101 	bicne.w	r1, r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   10c3e:	f8c8 0014 	str.w	r0, [r8, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   10c42:	f8c8 1010 	str.w	r1, [r8, #16]
   10c46:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   10c4a:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10c4c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   10c50:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   10c54:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   10c58:	428f      	cmp	r7, r1
   10c5a:	d17f      	bne.n	10d5c <gpio_nrfx_pin_interrupt_configure+0x1a4>
		    && (intenset & BIT(i))) {
   10c5c:	fa22 f103 	lsr.w	r1, r2, r3
   10c60:	07c9      	lsls	r1, r1, #31
   10c62:	d57b      	bpl.n	10d5c <gpio_nrfx_pin_interrupt_configure+0x1a4>
			(void)atomic_and(mask, ~BIT(i));
   10c64:	2201      	movs	r2, #1
   10c66:	409a      	lsls	r2, r3
   10c68:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10c6a:	494b      	ldr	r1, [pc, #300]	; (10d98 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   10c6c:	e8d1 4fef 	ldaex	r4, [r1]
   10c70:	4004      	ands	r4, r0
   10c72:	e8c1 4fec 	stlex	ip, r4, [r1]
   10c76:	f1bc 0f00 	cmp.w	ip, #0
   10c7a:	d1f7      	bne.n	10c6c <gpio_nrfx_pin_interrupt_configure+0xb4>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   10c7c:	009b      	lsls	r3, r3, #2
   10c7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10c82:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   10c86:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   10c8a:	f021 0101 	bic.w	r1, r1, #1
   10c8e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   10c92:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   10c96:	2100      	movs	r1, #0
   10c98:	4638      	mov	r0, r7
   10c9a:	f7ff ff0b 	bl	10ab4 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   10c9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   10ca2:	40eb      	lsrs	r3, r5
   10ca4:	f013 0301 	ands.w	r3, r3, #1
   10ca8:	d051      	beq.n	10d4e <gpio_nrfx_pin_interrupt_configure+0x196>
		if (data->trig_edge & BIT(pin)) {
   10caa:	f8d8 3014 	ldr.w	r3, [r8, #20]
   10cae:	40eb      	lsrs	r3, r5
   10cb0:	f013 0401 	ands.w	r4, r3, #1
   10cb4:	d05e      	beq.n	10d74 <gpio_nrfx_pin_interrupt_configure+0x1bc>
			if (data->double_edge & BIT(pin)) {
   10cb6:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   10cba:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   10cbc:	40eb      	lsrs	r3, r5
   10cbe:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   10cc0:	bf48      	it	mi
   10cc2:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   10cc4:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   10cc8:	bf5f      	itttt	pl
   10cca:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   10cce:	fa21 f505 	lsrpl.w	r5, r1, r5
   10cd2:	f005 0501 	andpl.w	r5, r5, #1
   10cd6:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10cda:	492f      	ldr	r1, [pc, #188]	; (10d98 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   10cdc:	bf58      	it	pl
   10cde:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   10ce0:	fa0c f402 	lsl.w	r4, ip, r2
   10ce4:	e8d1 0fef 	ldaex	r0, [r1]
   10ce8:	ea40 0304 	orr.w	r3, r0, r4
   10cec:	e8c1 3fee 	stlex	lr, r3, [r1]
   10cf0:	f1be 0f00 	cmp.w	lr, #0
   10cf4:	d1f6      	bne.n	10ce4 <gpio_nrfx_pin_interrupt_configure+0x12c>
		if ((prev & BIT(channel)) == 0) {
   10cf6:	40d0      	lsrs	r0, r2
   10cf8:	f010 0301 	ands.w	r3, r0, #1
   10cfc:	d133      	bne.n	10d66 <gpio_nrfx_pin_interrupt_configure+0x1ae>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   10cfe:	0091      	lsls	r1, r2, #2
   10d00:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   10d04:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   10d08:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   10d0c:	3240      	adds	r2, #64	; 0x40
   10d0e:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   10d12:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   10d16:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10d1a:	023f      	lsls	r7, r7, #8
   10d1c:	0092      	lsls	r2, r2, #2
   10d1e:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   10d22:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   10d26:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10d28:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   10d2c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   10d30:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   10d34:	4307      	orrs	r7, r0
   10d36:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10d3a:	6013      	str	r3, [r2, #0]
   10d3c:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   10d3e:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   10d42:	f042 0201 	orr.w	r2, r2, #1
   10d46:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   10d4a:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   10d4e:	4618      	mov	r0, r3
   10d50:	e00e      	b.n	10d70 <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   10d52:	2001      	movs	r0, #1
   10d54:	40a8      	lsls	r0, r5
   10d56:	ea21 0100 	bic.w	r1, r1, r0
   10d5a:	e751      	b.n	10c00 <gpio_nrfx_pin_interrupt_configure+0x48>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10d5c:	3301      	adds	r3, #1
   10d5e:	2b08      	cmp	r3, #8
   10d60:	f47f af74 	bne.w	10c4c <gpio_nrfx_pin_interrupt_configure+0x94>
   10d64:	e797      	b.n	10c96 <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   10d66:	3201      	adds	r2, #1
   10d68:	2a08      	cmp	r2, #8
   10d6a:	d1b9      	bne.n	10ce0 <gpio_nrfx_pin_interrupt_configure+0x128>
	return -ENODEV;
   10d6c:	f06f 0012 	mvn.w	r0, #18
}
   10d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10d74:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10d78:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10d7a:	40e9      	lsrs	r1, r5
   10d7c:	f001 0101 	and.w	r1, r1, #1
   10d80:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10d84:	b2c9      	uxtb	r1, r1
   10d86:	f7ff fe95 	bl	10ab4 <nrf_gpio_cfg_sense_set>
	int res = 0;
   10d8a:	4620      	mov	r0, r4
   10d8c:	e7f0      	b.n	10d70 <gpio_nrfx_pin_interrupt_configure+0x1b8>
   10d8e:	bf00      	nop
   10d90:	40842500 	.word	0x40842500
   10d94:	40031000 	.word	0x40031000
   10d98:	2002090c 	.word	0x2002090c

00010d9c <gpiote_event_handler>:
{
   10d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10da0:	4f3f      	ldr	r7, [pc, #252]	; (10ea0 <gpiote_event_handler+0x104>)
   10da2:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   10da4:	2e00      	cmp	r6, #0
   10da6:	d04f      	beq.n	10e48 <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
   10da8:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   10dac:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   10db0:	4b3c      	ldr	r3, [pc, #240]	; (10ea4 <gpiote_event_handler+0x108>)
   10db2:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   10db4:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   10db8:	430a      	orrs	r2, r1
   10dba:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   10dbe:	4a3a      	ldr	r2, [pc, #232]	; (10ea8 <gpiote_event_handler+0x10c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   10dc0:	691b      	ldr	r3, [r3, #16]
   10dc2:	6914      	ldr	r4, [r2, #16]
   10dc4:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   10dc6:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   10dca:	bb75      	cbnz	r5, 10e2a <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10dcc:	603d      	str	r5, [r7, #0]
   10dce:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   10dd0:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   10dd2:	2501      	movs	r5, #1
   10dd4:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   10dd6:	4835      	ldr	r0, [pc, #212]	; (10eac <gpiote_event_handler+0x110>)
   10dd8:	4935      	ldr	r1, [pc, #212]	; (10eb0 <gpiote_event_handler+0x114>)
   10dda:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   10dde:	fa05 fc03 	lsl.w	ip, r5, r3
   10de2:	ea1c 0f02 	tst.w	ip, r2
   10de6:	d00f      	beq.n	10e08 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10de8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   10dec:	b162      	cbz	r2, 10e08 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10dee:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   10df2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10df6:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   10dfa:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   10dfe:	fa05 f202 	lsl.w	r2, r5, r2
   10e02:	4314      	orrs	r4, r2
   10e04:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   10e08:	3301      	adds	r3, #1
   10e0a:	2b08      	cmp	r3, #8
   10e0c:	d1e5      	bne.n	10dda <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   10e0e:	b9ec      	cbnz	r4, 10e4c <gpiote_event_handler+0xb0>
	if (port_event) {
   10e10:	b14e      	cbz	r6, 10e26 <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
   10e12:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   10e14:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   10e16:	4d23      	ldr	r5, [pc, #140]	; (10ea4 <gpiote_event_handler+0x108>)
   10e18:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   10e1a:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   10e1e:	430a      	orrs	r2, r1
   10e20:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   10e24:	bb54      	cbnz	r4, 10e7c <gpiote_event_handler+0xe0>
}
   10e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   10e2a:	ea15 0f08 	tst.w	r5, r8
   10e2e:	d006      	beq.n	10e3e <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   10e30:	2100      	movs	r1, #0
   10e32:	f009 001f 	and.w	r0, r9, #31
   10e36:	f7ff fe3d 	bl	10ab4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   10e3a:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   10e3e:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   10e42:	ea4f 0848 	mov.w	r8, r8, lsl #1
   10e46:	e7c0      	b.n	10dca <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   10e48:	4634      	mov	r4, r6
   10e4a:	e7c1      	b.n	10dd0 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10e4c:	4b15      	ldr	r3, [pc, #84]	; (10ea4 <gpiote_event_handler+0x108>)
   10e4e:	6859      	ldr	r1, [r3, #4]
   10e50:	2900      	cmp	r1, #0
   10e52:	d0dd      	beq.n	10e10 <gpiote_event_handler+0x74>
	return node->next;
   10e54:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   10e56:	4f17      	ldr	r7, [pc, #92]	; (10eb4 <gpiote_event_handler+0x118>)
   10e58:	2d00      	cmp	r5, #0
   10e5a:	bf38      	it	cc
   10e5c:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   10e5e:	688a      	ldr	r2, [r1, #8]
   10e60:	4022      	ands	r2, r4
   10e62:	d002      	beq.n	10e6a <gpiote_event_handler+0xce>
			cb->handler(port, cb, cb->pin_mask & pins);
   10e64:	4638      	mov	r0, r7
   10e66:	684b      	ldr	r3, [r1, #4]
   10e68:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   10e6a:	2d00      	cmp	r5, #0
   10e6c:	d0d0      	beq.n	10e10 <gpiote_event_handler+0x74>
   10e6e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10e70:	4629      	mov	r1, r5
   10e72:	2b00      	cmp	r3, #0
   10e74:	bf38      	it	cc
   10e76:	2300      	movcc	r3, #0
   10e78:	461d      	mov	r5, r3
   10e7a:	e7f0      	b.n	10e5e <gpiote_event_handler+0xc2>
		if (level_pins & bit) {
   10e7c:	4226      	tst	r6, r4
   10e7e:	d00c      	beq.n	10e9a <gpiote_event_handler+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10e80:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10e82:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   10e86:	40f9      	lsrs	r1, r7
   10e88:	f001 0101 	and.w	r1, r1, #1
   10e8c:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   10e90:	b2c9      	uxtb	r1, r1
   10e92:	f7ff fe0f 	bl	10ab4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   10e96:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   10e9a:	3701      	adds	r7, #1
		bit <<= 1;
   10e9c:	0076      	lsls	r6, r6, #1
   10e9e:	e7c1      	b.n	10e24 <gpiote_event_handler+0x88>
   10ea0:	4003117c 	.word	0x4003117c
   10ea4:	200208f0 	.word	0x200208f0
   10ea8:	40842500 	.word	0x40842500
   10eac:	40031000 	.word	0x40031000
   10eb0:	40031100 	.word	0x40031100
   10eb4:	200200e0 	.word	0x200200e0

00010eb8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   10eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   10eba:	794b      	ldrb	r3, [r1, #5]
   10ebc:	2b01      	cmp	r3, #1
   10ebe:	d029      	beq.n	10f14 <uarte_nrfx_configure+0x5c>
   10ec0:	2b03      	cmp	r3, #3
   10ec2:	d124      	bne.n	10f0e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   10ec4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   10ec6:	798b      	ldrb	r3, [r1, #6]
   10ec8:	2b03      	cmp	r3, #3
   10eca:	d120      	bne.n	10f0e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   10ecc:	79cc      	ldrb	r4, [r1, #7]
   10ece:	b124      	cbz	r4, 10eda <uarte_nrfx_configure+0x22>
   10ed0:	2c01      	cmp	r4, #1
   10ed2:	d11c      	bne.n	10f0e <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   10ed4:	6843      	ldr	r3, [r0, #4]
   10ed6:	791b      	ldrb	r3, [r3, #4]
   10ed8:	b1cb      	cbz	r3, 10f0e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   10eda:	790a      	ldrb	r2, [r1, #4]
   10edc:	b112      	cbz	r2, 10ee4 <uarte_nrfx_configure+0x2c>
   10ede:	2a02      	cmp	r2, #2
   10ee0:	d115      	bne.n	10f0e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   10ee2:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   10ee4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   10ee6:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   10ee8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   10eec:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   10eee:	d065      	beq.n	10fbc <uarte_nrfx_configure+0x104>
   10ef0:	d82d      	bhi.n	10f4e <uarte_nrfx_configure+0x96>
   10ef2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   10ef6:	d064      	beq.n	10fc2 <uarte_nrfx_configure+0x10a>
   10ef8:	d816      	bhi.n	10f28 <uarte_nrfx_configure+0x70>
   10efa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   10efe:	d062      	beq.n	10fc6 <uarte_nrfx_configure+0x10e>
   10f00:	d80a      	bhi.n	10f18 <uarte_nrfx_configure+0x60>
   10f02:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   10f06:	d061      	beq.n	10fcc <uarte_nrfx_configure+0x114>
   10f08:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   10f0c:	d061      	beq.n	10fd2 <uarte_nrfx_configure+0x11a>
   10f0e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10f12:	e052      	b.n	10fba <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   10f14:	2600      	movs	r6, #0
   10f16:	e7d6      	b.n	10ec6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   10f18:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   10f1c:	d05c      	beq.n	10fd8 <uarte_nrfx_configure+0x120>
   10f1e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   10f22:	d1f4      	bne.n	10f0e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   10f24:	4b37      	ldr	r3, [pc, #220]	; (11004 <uarte_nrfx_configure+0x14c>)
   10f26:	e03c      	b.n	10fa2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10f28:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   10f2c:	d057      	beq.n	10fde <uarte_nrfx_configure+0x126>
   10f2e:	d807      	bhi.n	10f40 <uarte_nrfx_configure+0x88>
   10f30:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   10f34:	d055      	beq.n	10fe2 <uarte_nrfx_configure+0x12a>
   10f36:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   10f3a:	d1e8      	bne.n	10f0e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   10f3c:	4b32      	ldr	r3, [pc, #200]	; (11008 <uarte_nrfx_configure+0x150>)
   10f3e:	e030      	b.n	10fa2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10f40:	f647 2712 	movw	r7, #31250	; 0x7a12
   10f44:	42bb      	cmp	r3, r7
   10f46:	d1e2      	bne.n	10f0e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   10f48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   10f4c:	e029      	b.n	10fa2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10f4e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   10f52:	d048      	beq.n	10fe6 <uarte_nrfx_configure+0x12e>
   10f54:	d813      	bhi.n	10f7e <uarte_nrfx_configure+0xc6>
   10f56:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   10f5a:	d047      	beq.n	10fec <uarte_nrfx_configure+0x134>
   10f5c:	d809      	bhi.n	10f72 <uarte_nrfx_configure+0xba>
   10f5e:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   10f62:	42bb      	cmp	r3, r7
   10f64:	d044      	beq.n	10ff0 <uarte_nrfx_configure+0x138>
   10f66:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   10f6a:	d1d0      	bne.n	10f0e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   10f6c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   10f70:	e017      	b.n	10fa2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10f72:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   10f76:	d1ca      	bne.n	10f0e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   10f78:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   10f7c:	e011      	b.n	10fa2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10f7e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   10f82:	d038      	beq.n	10ff6 <uarte_nrfx_configure+0x13e>
   10f84:	d808      	bhi.n	10f98 <uarte_nrfx_configure+0xe0>
   10f86:	4f21      	ldr	r7, [pc, #132]	; (1100c <uarte_nrfx_configure+0x154>)
   10f88:	42bb      	cmp	r3, r7
   10f8a:	d037      	beq.n	10ffc <uarte_nrfx_configure+0x144>
   10f8c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   10f90:	d1bd      	bne.n	10f0e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   10f92:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   10f96:	e004      	b.n	10fa2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10f98:	4f1d      	ldr	r7, [pc, #116]	; (11010 <uarte_nrfx_configure+0x158>)
   10f9a:	42bb      	cmp	r3, r7
   10f9c:	d1b7      	bne.n	10f0e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   10f9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   10fa2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   10fa6:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   10fa8:	4334      	orrs	r4, r6
   10faa:	4322      	orrs	r2, r4
   10fac:	3304      	adds	r3, #4
   10fae:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   10fb0:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   10fb4:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   10fb8:	2000      	movs	r0, #0
}
   10fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   10fbc:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   10fc0:	e7ef      	b.n	10fa2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   10fc2:	4b14      	ldr	r3, [pc, #80]	; (11014 <uarte_nrfx_configure+0x15c>)
   10fc4:	e7ed      	b.n	10fa2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   10fc6:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   10fca:	e7ea      	b.n	10fa2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   10fcc:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   10fd0:	e7e7      	b.n	10fa2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   10fd2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   10fd6:	e7e4      	b.n	10fa2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   10fd8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   10fdc:	e7e1      	b.n	10fa2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   10fde:	4b0e      	ldr	r3, [pc, #56]	; (11018 <uarte_nrfx_configure+0x160>)
   10fe0:	e7df      	b.n	10fa2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   10fe2:	4b0e      	ldr	r3, [pc, #56]	; (1101c <uarte_nrfx_configure+0x164>)
   10fe4:	e7dd      	b.n	10fa2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   10fe6:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   10fea:	e7da      	b.n	10fa2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   10fec:	4b0c      	ldr	r3, [pc, #48]	; (11020 <uarte_nrfx_configure+0x168>)
   10fee:	e7d8      	b.n	10fa2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   10ff0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   10ff4:	e7d5      	b.n	10fa2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   10ff6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   10ffa:	e7d2      	b.n	10fa2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   10ffc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11000:	e7cf      	b.n	10fa2 <uarte_nrfx_configure+0xea>
   11002:	bf00      	nop
   11004:	0013b000 	.word	0x0013b000
   11008:	004ea000 	.word	0x004ea000
   1100c:	0003d090 	.word	0x0003d090
   11010:	000f4240 	.word	0x000f4240
   11014:	00275000 	.word	0x00275000
   11018:	0075c000 	.word	0x0075c000
   1101c:	003af000 	.word	0x003af000
   11020:	013a9000 	.word	0x013a9000

00011024 <uarte_instance_init.constprop.0>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(const struct device *dev,
   11024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	nrf_uarte_disable(uarte);

	data->dev = dev;

	nrf_gpio_pin_write(config->pseltxd, 1);
   11026:	680f      	ldr	r7, [r1, #0]
static int uarte_instance_init(const struct device *dev,
   11028:	460d      	mov	r5, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1102a:	2101      	movs	r1, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1102c:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
   11030:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   11032:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   11034:	681c      	ldr	r4, [r3, #0]
    *p_pin = pin_number & 0x1F;
   11036:	f007 021f 	and.w	r2, r7, #31
    p_reg->OUTSET = set_mask;
   1103a:	4b2b      	ldr	r3, [pc, #172]	; (110e8 <uarte_instance_init.constprop.0+0xc4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1103c:	4091      	lsls	r1, r2
   1103e:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
	data->dev = dev;
   11042:	6030      	str	r0, [r6, #0]
    p_reg->OUTSET = set_mask;
   11044:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11046:	2103      	movs	r1, #3
   11048:	3280      	adds	r2, #128	; 0x80
   1104a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1104e:	686a      	ldr	r2, [r5, #4]
   11050:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   11052:	bf1e      	ittt	ne
   11054:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11058:	3180      	addne	r1, #128	; 0x80
   1105a:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1105e:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
   11060:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
   11064:	1c4f      	adds	r7, r1, #1
   11066:	bf18      	it	ne
   11068:	2700      	movne	r7, #0
    p_reg->PSEL.RXD = pselrxd;
   1106a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
   1106e:	bf1e      	ittt	ne
   11070:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11074:	3280      	addne	r2, #128	; 0x80
   11076:	f843 7022 	strne.w	r7, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1107a:	68ef      	ldr	r7, [r5, #12]
   1107c:	1c7a      	adds	r2, r7, #1
   1107e:	d00c      	beq.n	1109a <uarte_instance_init.constprop.0+0x76>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11080:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
   11084:	f007 021f 	and.w	r2, r7, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11088:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
   1108c:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11090:	f04f 0c03 	mov.w	ip, #3
   11094:	3280      	adds	r2, #128	; 0x80
   11096:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1109a:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1109e:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   110a2:	68c1      	ldr	r1, [r0, #12]
   110a4:	3104      	adds	r1, #4
   110a6:	f7ff ff07 	bl	10eb8 <uarte_nrfx_configure>
	if (err) {
   110aa:	b9d8      	cbnz	r0, 110e4 <uarte_instance_init.constprop.0+0xc0>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   110ac:	2308      	movs	r3, #8
   110ae:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   110b2:	686b      	ldr	r3, [r5, #4]
   110b4:	3301      	adds	r3, #1
   110b6:	d00b      	beq.n	110d0 <uarte_instance_init.constprop.0+0xac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   110b8:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   110bc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   110c0:	f106 0314 	add.w	r3, r6, #20

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   110c4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   110c8:	2301      	movs	r3, #1
   110ca:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   110ce:	6023      	str	r3, [r4, #0]
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   110d0:	68f3      	ldr	r3, [r6, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   110d2:	689b      	ldr	r3, [r3, #8]
   110d4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   110d8:	2300      	movs	r3, #0
   110da:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   110de:	2301      	movs	r3, #1
   110e0:	60a3      	str	r3, [r4, #8]
   110e2:	60e3      	str	r3, [r4, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   110e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110e6:	bf00      	nop
   110e8:	40842500 	.word	0x40842500

000110ec <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   110ec:	b530      	push	{r4, r5, lr}
   110ee:	b085      	sub	sp, #20
   110f0:	466c      	mov	r4, sp
   110f2:	4605      	mov	r5, r0
   110f4:	4b08      	ldr	r3, [pc, #32]	; (11118 <uarte_1_init+0x2c>)
   110f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   110f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   110fc:	2200      	movs	r2, #0
   110fe:	2101      	movs	r1, #1
   11100:	2009      	movs	r0, #9
   11102:	f7fe fcf3 	bl	faec <z_arm_irq_priority_set>
   11106:	2009      	movs	r0, #9
   11108:	f7fe fcd2 	bl	fab0 <arch_irq_enable>
   1110c:	4621      	mov	r1, r4
   1110e:	4628      	mov	r0, r5
   11110:	f7ff ff88 	bl	11024 <uarte_instance_init.constprop.0>
   11114:	b005      	add	sp, #20
   11116:	bd30      	pop	{r4, r5, pc}
   11118:	00020ea0 	.word	0x00020ea0

0001111c <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   1111c:	b530      	push	{r4, r5, lr}
   1111e:	b085      	sub	sp, #20
   11120:	466c      	mov	r4, sp
   11122:	4605      	mov	r5, r0
   11124:	4b08      	ldr	r3, [pc, #32]	; (11148 <uarte_0_init+0x2c>)
   11126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1112c:	2200      	movs	r2, #0
   1112e:	2101      	movs	r1, #1
   11130:	2008      	movs	r0, #8
   11132:	f7fe fcdb 	bl	faec <z_arm_irq_priority_set>
   11136:	2008      	movs	r0, #8
   11138:	f7fe fcba 	bl	fab0 <arch_irq_enable>
   1113c:	4621      	mov	r1, r4
   1113e:	4628      	mov	r0, r5
   11140:	f7ff ff70 	bl	11024 <uarte_instance_init.constprop.0>
   11144:	b005      	add	sp, #20
   11146:	bd30      	pop	{r4, r5, pc}
   11148:	00020eb0 	.word	0x00020eb0

0001114c <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   1114c:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   1114e:	4d1c      	ldr	r5, [pc, #112]	; (111c0 <_bsdlib_init+0x74>)
   11150:	4c1c      	ldr	r4, [pc, #112]	; (111c4 <_bsdlib_init+0x78>)
   11152:	782b      	ldrb	r3, [r5, #0]
{
   11154:	b085      	sub	sp, #20
	if (!first_time_init) {
   11156:	b933      	cbnz	r3, 11166 <_bsdlib_init+0x1a>
	list->tail = NULL;
   11158:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   1115c:	481a      	ldr	r0, [pc, #104]	; (111c8 <_bsdlib_init+0x7c>)
   1115e:	f00f f91c 	bl	2039a <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   11162:	2301      	movs	r3, #1
   11164:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   11166:	2200      	movs	r2, #0
   11168:	202a      	movs	r0, #42	; 0x2a
   1116a:	4611      	mov	r1, r2
   1116c:	f7fe fcbe 	bl	faec <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   11170:	4a16      	ldr	r2, [pc, #88]	; (111cc <_bsdlib_init+0x80>)
   11172:	ab01      	add	r3, sp, #4
   11174:	ca07      	ldmia	r2, {r0, r1, r2}
   11176:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   1117a:	4618      	mov	r0, r3
   1117c:	f008 fcda 	bl	19b34 <bsd_init>
   11180:	4b13      	ldr	r3, [pc, #76]	; (111d0 <_bsdlib_init+0x84>)
   11182:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   11184:	f04f 32ff 	mov.w	r2, #4294967295
   11188:	f04f 33ff 	mov.w	r3, #4294967295
   1118c:	480e      	ldr	r0, [pc, #56]	; (111c8 <_bsdlib_init+0x7c>)
   1118e:	f00b f925 	bl	1c3dc <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   11192:	6820      	ldr	r0, [r4, #0]
   11194:	b170      	cbz	r0, 111b4 <_bsdlib_init+0x68>
	return node->next;
   11196:	6804      	ldr	r4, [r0, #0]
   11198:	2c00      	cmp	r4, #0
   1119a:	bf38      	it	cc
   1119c:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   1119e:	3004      	adds	r0, #4
   111a0:	f00b fd70 	bl	1cc84 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   111a4:	b134      	cbz	r4, 111b4 <_bsdlib_init+0x68>
   111a6:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   111a8:	4620      	mov	r0, r4
   111aa:	2b00      	cmp	r3, #0
   111ac:	bf38      	it	cc
   111ae:	2300      	movcc	r3, #0
   111b0:	461c      	mov	r4, r3
   111b2:	e7f4      	b.n	1119e <_bsdlib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   111b4:	4804      	ldr	r0, [pc, #16]	; (111c8 <_bsdlib_init+0x7c>)
   111b6:	f00b f989 	bl	1c4cc <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   111ba:	2000      	movs	r0, #0
   111bc:	b005      	add	sp, #20
   111be:	bd30      	pop	{r4, r5, pc}
   111c0:	20021b9f 	.word	0x20021b9f
   111c4:	20020914 	.word	0x20020914
   111c8:	2002091c 	.word	0x2002091c
   111cc:	00020ec0 	.word	0x00020ec0
   111d0:	20020910 	.word	0x20020910

000111d4 <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   111d4:	b530      	push	{r4, r5, lr}
   111d6:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   111d8:	2201      	movs	r2, #1
   111da:	2100      	movs	r1, #0
   111dc:	a802      	add	r0, sp, #8
   111de:	f00f fa5b 	bl	20698 <z_impl_k_sem_init>
   111e2:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   111e4:	f04f 33ff 	mov.w	r3, #4294967295
   111e8:	f04f 32ff 	mov.w	r2, #4294967295
   111ec:	481c      	ldr	r0, [pc, #112]	; (11260 <bsdlib_shutdown_wait+0x8c>)
   111ee:	f00b f8f5 	bl	1c3dc <z_impl_k_mutex_lock>
	parent->next = child;
   111f2:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   111f4:	4c1b      	ldr	r4, [pc, #108]	; (11264 <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   111f6:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   111f8:	6863      	ldr	r3, [r4, #4]
   111fa:	bb2b      	cbnz	r3, 11248 <bsdlib_shutdown_wait+0x74>
	list->head = node;
   111fc:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   11200:	4817      	ldr	r0, [pc, #92]	; (11260 <bsdlib_shutdown_wait+0x8c>)
   11202:	f00b f963 	bl	1c4cc <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   11206:	f04f 32ff 	mov.w	r2, #4294967295
   1120a:	f04f 33ff 	mov.w	r3, #4294967295
   1120e:	a802      	add	r0, sp, #8
   11210:	f00b fd5e 	bl	1ccd0 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   11214:	f04f 32ff 	mov.w	r2, #4294967295
   11218:	f04f 33ff 	mov.w	r3, #4294967295
   1121c:	4810      	ldr	r0, [pc, #64]	; (11260 <bsdlib_shutdown_wait+0x8c>)
   1121e:	f00b f8dd 	bl	1c3dc <z_impl_k_mutex_lock>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11222:	2200      	movs	r2, #0
   11224:	6823      	ldr	r3, [r4, #0]
   11226:	b153      	cbz	r3, 1123e <bsdlib_shutdown_wait+0x6a>
   11228:	42ab      	cmp	r3, r5
   1122a:	d116      	bne.n	1125a <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   1122c:	9901      	ldr	r1, [sp, #4]
   1122e:	b972      	cbnz	r2, 1124e <bsdlib_shutdown_wait+0x7a>
   11230:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   11232:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   11234:	429a      	cmp	r2, r3
   11236:	d100      	bne.n	1123a <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   11238:	6061      	str	r1, [r4, #4]
	parent->next = child;
   1123a:	2300      	movs	r3, #0
   1123c:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   1123e:	4808      	ldr	r0, [pc, #32]	; (11260 <bsdlib_shutdown_wait+0x8c>)
   11240:	f00b f944 	bl	1c4cc <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   11244:	b009      	add	sp, #36	; 0x24
   11246:	bd30      	pop	{r4, r5, pc}
   11248:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1124a:	6065      	str	r5, [r4, #4]
}
   1124c:	e7d8      	b.n	11200 <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   1124e:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   11250:	6861      	ldr	r1, [r4, #4]
   11252:	4299      	cmp	r1, r3
	list->tail = node;
   11254:	bf08      	it	eq
   11256:	6062      	streq	r2, [r4, #4]
}
   11258:	e7ef      	b.n	1123a <bsdlib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1125a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1125c:	681b      	ldr	r3, [r3, #0]
   1125e:	e7e2      	b.n	11226 <bsdlib_shutdown_wait+0x52>
   11260:	2002091c 	.word	0x2002091c
   11264:	20020914 	.word	0x20020914

00011268 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   11268:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   1126a:	4c0d      	ldr	r4, [pc, #52]	; (112a0 <thread_monitor_entry_get+0x38>)
{
   1126c:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   1126e:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   11270:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   11272:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   11274:	4b0b      	ldr	r3, [pc, #44]	; (112a4 <thread_monitor_entry_get+0x3c>)
   11276:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   11278:	6801      	ldr	r1, [r0, #0]
   1127a:	4291      	cmp	r1, r2
   1127c:	d00e      	beq.n	1129c <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   1127e:	b151      	cbz	r1, 11296 <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   11280:	6841      	ldr	r1, [r0, #4]
   11282:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   11284:	42b1      	cmp	r1, r6
   11286:	bfc4      	itt	gt
   11288:	4604      	movgt	r4, r0
   1128a:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   1128c:	3d01      	subs	r5, #1
   1128e:	f100 0008 	add.w	r0, r0, #8
   11292:	d1f1      	bne.n	11278 <thread_monitor_entry_get+0x10>
   11294:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   11296:	3b01      	subs	r3, #1
	new_entry->id = id;
   11298:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   1129a:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   1129c:	bd70      	pop	{r4, r5, r6, pc}
   1129e:	bf00      	nop
   112a0:	2002093c 	.word	0x2002093c
   112a4:	20020930 	.word	0x20020930

000112a8 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   112a8:	4668      	mov	r0, sp
   112aa:	f020 0107 	bic.w	r1, r0, #7
   112ae:	468d      	mov	sp, r1
   112b0:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   112b2:	4b0f      	ldr	r3, [pc, #60]	; (112f0 <rpc_proxy_irq_handler+0x48>)
   112b4:	e8d3 2fef 	ldaex	r2, [r3]
   112b8:	3201      	adds	r2, #1
   112ba:	e8c3 2fe1 	stlex	r1, r2, [r3]
   112be:	2900      	cmp	r1, #0
   112c0:	d1f8      	bne.n	112b4 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   112c2:	f003 f899 	bl	143f8 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   112c6:	4b0b      	ldr	r3, [pc, #44]	; (112f4 <rpc_proxy_irq_handler+0x4c>)
   112c8:	681c      	ldr	r4, [r3, #0]
   112ca:	2c00      	cmp	r4, #0
   112cc:	bf38      	it	cc
   112ce:	2400      	movcc	r4, #0
   112d0:	b12c      	cbz	r4, 112de <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   112d2:	1d20      	adds	r0, r4, #4
   112d4:	f00b fcd6 	bl	1cc84 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   112d8:	6824      	ldr	r4, [r4, #0]
   112da:	2c00      	cmp	r4, #0
   112dc:	d1f8      	bne.n	112d0 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   112de:	f7fe fc1b 	bl	fb18 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   112e2:	f7fe ff8d 	bl	10200 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   112e6:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   112ea:	4685      	mov	sp, r0
   112ec:	4770      	bx	lr
   112ee:	bf00      	nop
   112f0:	20020930 	.word	0x20020930
   112f4:	20020934 	.word	0x20020934

000112f8 <bsd_os_timedwait>:
{
   112f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112fc:	460c      	mov	r4, r1
   112fe:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   11300:	f00f fa90 	bl	20824 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   11304:	6823      	ldr	r3, [r4, #0]
   11306:	4680      	mov	r8, r0
   11308:	2b00      	cmp	r3, #0
   1130a:	468a      	mov	sl, r1
   1130c:	d103      	bne.n	11316 <bsd_os_timedwait+0x1e>
	z_impl_k_yield();
   1130e:	f00b fc45 	bl	1cb9c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   11312:	203c      	movs	r0, #60	; 0x3c
   11314:	e091      	b.n	1143a <bsd_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   11316:	bfbc      	itt	lt
   11318:	f04f 33ff 	movlt.w	r3, #4294967295
   1131c:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1131e:	2201      	movs	r2, #1
   11320:	2100      	movs	r1, #0
   11322:	a802      	add	r0, sp, #8
   11324:	f00f f9b8 	bl	20698 <z_impl_k_sem_init>
   11328:	ad01      	add	r5, sp, #4
   1132a:	f04f 0320 	mov.w	r3, #32
   1132e:	f3ef 8b11 	mrs	fp, BASEPRI
   11332:	f383 8811 	msr	BASEPRI, r3
   11336:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1133a:	f00b fc9d 	bl	1cc78 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   1133e:	f7ff ff93 	bl	11268 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   11342:	4947      	ldr	r1, [pc, #284]	; (11460 <bsd_os_timedwait+0x168>)
   11344:	6843      	ldr	r3, [r0, #4]
   11346:	680a      	ldr	r2, [r1, #0]
   11348:	4689      	mov	r9, r1
   1134a:	4293      	cmp	r3, r2
   1134c:	f04f 0300 	mov.w	r3, #0
   11350:	d108      	bne.n	11364 <bsd_os_timedwait+0x6c>
	parent->next = child;
   11352:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   11354:	4b43      	ldr	r3, [pc, #268]	; (11464 <bsd_os_timedwait+0x16c>)
   11356:	685a      	ldr	r2, [r3, #4]
   11358:	2a00      	cmp	r2, #0
   1135a:	d171      	bne.n	11440 <bsd_os_timedwait+0x148>
	list->head = node;
   1135c:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   11360:	2301      	movs	r3, #1
}
   11362:	e000      	b.n	11366 <bsd_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   11364:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   11366:	f38b 8811 	msr	BASEPRI, fp
   1136a:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   1136e:	2b00      	cmp	r3, #0
   11370:	d062      	beq.n	11438 <bsd_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   11372:	6823      	ldr	r3, [r4, #0]
   11374:	1c5a      	adds	r2, r3, #1
   11376:	d066      	beq.n	11446 <bsd_os_timedwait+0x14e>
   11378:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   1137c:	f240 30e7 	movw	r0, #999	; 0x3e7
   11380:	2100      	movs	r1, #0
   11382:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   11386:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1138a:	2300      	movs	r3, #0
   1138c:	fbce 010c 	smlal	r0, r1, lr, ip
   11390:	f7fb fa8c 	bl	c8ac <__aeabi_uldivmod>
   11394:	4602      	mov	r2, r0
   11396:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   11398:	a802      	add	r0, sp, #8
   1139a:	f00b fc99 	bl	1ccd0 <z_impl_k_sem_take>
	__asm__ volatile(
   1139e:	f04f 0320 	mov.w	r3, #32
   113a2:	f3ef 8b11 	mrs	fp, BASEPRI
   113a6:	f383 8811 	msr	BASEPRI, r3
   113aa:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   113ae:	2000      	movs	r0, #0
   113b0:	4b2c      	ldr	r3, [pc, #176]	; (11464 <bsd_os_timedwait+0x16c>)
   113b2:	681a      	ldr	r2, [r3, #0]
   113b4:	b15a      	cbz	r2, 113ce <bsd_os_timedwait+0xd6>
   113b6:	42aa      	cmp	r2, r5
   113b8:	d14f      	bne.n	1145a <bsd_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   113ba:	9d01      	ldr	r5, [sp, #4]
   113bc:	2800      	cmp	r0, #0
   113be:	d146      	bne.n	1144e <bsd_os_timedwait+0x156>
   113c0:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   113c2:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   113c4:	4291      	cmp	r1, r2
   113c6:	d100      	bne.n	113ca <bsd_os_timedwait+0xd2>
	list->tail = node;
   113c8:	605d      	str	r5, [r3, #4]
	parent->next = child;
   113ca:	2300      	movs	r3, #0
   113cc:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   113ce:	f00b fc53 	bl	1cc78 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   113d2:	f7ff ff49 	bl	11268 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   113d6:	f8d9 3000 	ldr.w	r3, [r9]
   113da:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   113dc:	f38b 8811 	msr	BASEPRI, fp
   113e0:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   113e4:	6825      	ldr	r5, [r4, #0]
   113e6:	1c6b      	adds	r3, r5, #1
   113e8:	d026      	beq.n	11438 <bsd_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   113ea:	f00f fa1b 	bl	20824 <z_impl_k_uptime_ticks>
   113ee:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   113f2:	468e      	mov	lr, r1
   113f4:	fba8 890c 	umull	r8, r9, r8, ip
   113f8:	fba0 010c 	umull	r0, r1, r0, ip
   113fc:	fb0c 990a 	mla	r9, ip, sl, r9
   11400:	fb0c 110e 	mla	r1, ip, lr, r1
   11404:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   11408:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   1140c:	1952      	adds	r2, r2, r5
   1140e:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   11412:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   11416:	0bc5      	lsrs	r5, r0, #15
   11418:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   1141c:	1b56      	subs	r6, r2, r5
   1141e:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   11422:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   11426:	2e00      	cmp	r6, #0
   11428:	f177 0300 	sbcs.w	r3, r7, #0
   1142c:	bfb8      	it	lt
   1142e:	2600      	movlt	r6, #0
   11430:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   11432:	2e00      	cmp	r6, #0
   11434:	f43f af6d 	beq.w	11312 <bsd_os_timedwait+0x1a>
	return 0;
   11438:	2000      	movs	r0, #0
}
   1143a:	b009      	add	sp, #36	; 0x24
   1143c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11440:	6015      	str	r5, [r2, #0]
	list->tail = node;
   11442:	605d      	str	r5, [r3, #4]
   11444:	e78c      	b.n	11360 <bsd_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   11446:	f04f 32ff 	mov.w	r2, #4294967295
   1144a:	4613      	mov	r3, r2
   1144c:	e7a4      	b.n	11398 <bsd_os_timedwait+0xa0>
	parent->next = child;
   1144e:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   11450:	6859      	ldr	r1, [r3, #4]
   11452:	4291      	cmp	r1, r2
	list->tail = node;
   11454:	bf08      	it	eq
   11456:	6058      	streq	r0, [r3, #4]
}
   11458:	e7b7      	b.n	113ca <bsd_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1145a:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1145c:	6812      	ldr	r2, [r2, #0]
   1145e:	e7a9      	b.n	113b4 <bsd_os_timedwait+0xbc>
   11460:	20020930 	.word	0x20020930
   11464:	20020934 	.word	0x20020934

00011468 <bsd_os_errno_set>:
	switch (err_code) {
   11468:	283c      	cmp	r0, #60	; 0x3c
{
   1146a:	4601      	mov	r1, r0
   1146c:	b508      	push	{r3, lr}
	switch (err_code) {
   1146e:	f300 808f 	bgt.w	11590 <bsd_os_errno_set+0x128>
   11472:	2800      	cmp	r0, #0
   11474:	dc0d      	bgt.n	11492 <bsd_os_errno_set+0x2a>
   11476:	4bb2      	ldr	r3, [pc, #712]	; (11740 <bsd_os_errno_set+0x2d8>)
   11478:	4ab2      	ldr	r2, [pc, #712]	; (11744 <bsd_os_errno_set+0x2dc>)
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   1147a:	48b3      	ldr	r0, [pc, #716]	; (11748 <bsd_os_errno_set+0x2e0>)
   1147c:	1ad2      	subs	r2, r2, r3
   1147e:	08d2      	lsrs	r2, r2, #3
   11480:	0192      	lsls	r2, r2, #6
   11482:	f042 0201 	orr.w	r2, r2, #1
   11486:	f00c fc38 	bl	1dcfa <log_1>
		errno = 0xBAADBAAD;
   1148a:	f00e f9b6 	bl	1f7fa <z_errno>
   1148e:	4baf      	ldr	r3, [pc, #700]	; (1174c <bsd_os_errno_set+0x2e4>)
   11490:	e0bf      	b.n	11612 <bsd_os_errno_set+0x1aa>
   11492:	1e43      	subs	r3, r0, #1
   11494:	2b3b      	cmp	r3, #59	; 0x3b
   11496:	d8ee      	bhi.n	11476 <bsd_os_errno_set+0xe>
   11498:	a201      	add	r2, pc, #4	; (adr r2, 114a0 <bsd_os_errno_set+0x38>)
   1149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1149e:	bf00      	nop
   114a0:	0001160d 	.word	0x0001160d
   114a4:	00011617 	.word	0x00011617
   114a8:	00011477 	.word	0x00011477
   114ac:	00011477 	.word	0x00011477
   114b0:	0001161f 	.word	0x0001161f
   114b4:	00011477 	.word	0x00011477
   114b8:	00011477 	.word	0x00011477
   114bc:	00011627 	.word	0x00011627
   114c0:	0001162f 	.word	0x0001162f
   114c4:	00011477 	.word	0x00011477
   114c8:	00011477 	.word	0x00011477
   114cc:	00011637 	.word	0x00011637
   114d0:	0001163f 	.word	0x0001163f
   114d4:	00011647 	.word	0x00011647
   114d8:	00011477 	.word	0x00011477
   114dc:	00011477 	.word	0x00011477
   114e0:	00011477 	.word	0x00011477
   114e4:	00011477 	.word	0x00011477
   114e8:	00011477 	.word	0x00011477
   114ec:	00011477 	.word	0x00011477
   114f0:	00011477 	.word	0x00011477
   114f4:	0001164f 	.word	0x0001164f
   114f8:	00011477 	.word	0x00011477
   114fc:	00011657 	.word	0x00011657
   11500:	00011477 	.word	0x00011477
   11504:	00011477 	.word	0x00011477
   11508:	00011477 	.word	0x00011477
   1150c:	00011477 	.word	0x00011477
   11510:	00011477 	.word	0x00011477
   11514:	00011477 	.word	0x00011477
   11518:	00011477 	.word	0x00011477
   1151c:	00011477 	.word	0x00011477
   11520:	00011477 	.word	0x00011477
   11524:	00011477 	.word	0x00011477
   11528:	0001165f 	.word	0x0001165f
   1152c:	00011477 	.word	0x00011477
   11530:	00011667 	.word	0x00011667
   11534:	00011477 	.word	0x00011477
   11538:	00011477 	.word	0x00011477
   1153c:	0001172f 	.word	0x0001172f
   11540:	0001166f 	.word	0x0001166f
   11544:	00011677 	.word	0x00011677
   11548:	0001167f 	.word	0x0001167f
   1154c:	00011687 	.word	0x00011687
   11550:	0001168f 	.word	0x0001168f
   11554:	00011477 	.word	0x00011477
   11558:	00011697 	.word	0x00011697
   1155c:	0001169f 	.word	0x0001169f
   11560:	00011477 	.word	0x00011477
   11564:	000116a7 	.word	0x000116a7
   11568:	000116af 	.word	0x000116af
   1156c:	000116b7 	.word	0x000116b7
   11570:	00011737 	.word	0x00011737
   11574:	000116bf 	.word	0x000116bf
   11578:	00011477 	.word	0x00011477
   1157c:	000116c7 	.word	0x000116c7
   11580:	000116cf 	.word	0x000116cf
   11584:	00011477 	.word	0x00011477
   11588:	00011477 	.word	0x00011477
   1158c:	000116d7 	.word	0x000116d7
	switch (err_code) {
   11590:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   11594:	2b18      	cmp	r3, #24
   11596:	f63f af6e 	bhi.w	11476 <bsd_os_errno_set+0xe>
   1159a:	2b18      	cmp	r3, #24
   1159c:	f63f af6b 	bhi.w	11476 <bsd_os_errno_set+0xe>
   115a0:	a201      	add	r2, pc, #4	; (adr r2, 115a8 <bsd_os_errno_set+0x140>)
   115a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   115a6:	bf00      	nop
   115a8:	000116df 	.word	0x000116df
   115ac:	00011477 	.word	0x00011477
   115b0:	00011477 	.word	0x00011477
   115b4:	00011477 	.word	0x00011477
   115b8:	00011477 	.word	0x00011477
   115bc:	00011477 	.word	0x00011477
   115c0:	00011477 	.word	0x00011477
   115c4:	000116e7 	.word	0x000116e7
   115c8:	00011477 	.word	0x00011477
   115cc:	000116f7 	.word	0x000116f7
   115d0:	000116ef 	.word	0x000116ef
   115d4:	00011477 	.word	0x00011477
   115d8:	00011477 	.word	0x00011477
   115dc:	00011477 	.word	0x00011477
   115e0:	00011477 	.word	0x00011477
   115e4:	00011477 	.word	0x00011477
   115e8:	00011477 	.word	0x00011477
   115ec:	00011477 	.word	0x00011477
   115f0:	00011477 	.word	0x00011477
   115f4:	00011477 	.word	0x00011477
   115f8:	000116ff 	.word	0x000116ff
   115fc:	00011707 	.word	0x00011707
   11600:	00011711 	.word	0x00011711
   11604:	0001171b 	.word	0x0001171b
   11608:	00011725 	.word	0x00011725
		errno = EPERM;
   1160c:	f00e f8f5 	bl	1f7fa <z_errno>
   11610:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   11612:	6003      	str	r3, [r0, #0]
}
   11614:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   11616:	f00e f8f0 	bl	1f7fa <z_errno>
   1161a:	2302      	movs	r3, #2
   1161c:	e7f9      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EIO;
   1161e:	f00e f8ec 	bl	1f7fa <z_errno>
   11622:	2305      	movs	r3, #5
   11624:	e7f5      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ENOEXEC;
   11626:	f00e f8e8 	bl	1f7fa <z_errno>
   1162a:	2308      	movs	r3, #8
   1162c:	e7f1      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EBADF;
   1162e:	f00e f8e4 	bl	1f7fa <z_errno>
   11632:	2309      	movs	r3, #9
   11634:	e7ed      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ENOMEM;
   11636:	f00e f8e0 	bl	1f7fa <z_errno>
   1163a:	230c      	movs	r3, #12
   1163c:	e7e9      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EACCES;
   1163e:	f00e f8dc 	bl	1f7fa <z_errno>
   11642:	230d      	movs	r3, #13
   11644:	e7e5      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EFAULT;
   11646:	f00e f8d8 	bl	1f7fa <z_errno>
   1164a:	230e      	movs	r3, #14
   1164c:	e7e1      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EINVAL;
   1164e:	f00e f8d4 	bl	1f7fa <z_errno>
   11652:	2316      	movs	r3, #22
   11654:	e7dd      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EMFILE;
   11656:	f00e f8d0 	bl	1f7fa <z_errno>
   1165a:	2318      	movs	r3, #24
   1165c:	e7d9      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EAGAIN;
   1165e:	f00e f8cc 	bl	1f7fa <z_errno>
   11662:	230b      	movs	r3, #11
   11664:	e7d5      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EDOM;
   11666:	f00e f8c8 	bl	1f7fa <z_errno>
   1166a:	2325      	movs	r3, #37	; 0x25
   1166c:	e7d1      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EPROTOTYPE;
   1166e:	f00e f8c4 	bl	1f7fa <z_errno>
   11672:	2329      	movs	r3, #41	; 0x29
   11674:	e7cd      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ENOPROTOOPT;
   11676:	f00e f8c0 	bl	1f7fa <z_errno>
   1167a:	232a      	movs	r3, #42	; 0x2a
   1167c:	e7c9      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EPROTONOSUPPORT;
   1167e:	f00e f8bc 	bl	1f7fa <z_errno>
   11682:	232b      	movs	r3, #43	; 0x2b
   11684:	e7c5      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ESOCKTNOSUPPORT;
   11686:	f00e f8b8 	bl	1f7fa <z_errno>
   1168a:	232c      	movs	r3, #44	; 0x2c
   1168c:	e7c1      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EOPNOTSUPP;
   1168e:	f00e f8b4 	bl	1f7fa <z_errno>
   11692:	232d      	movs	r3, #45	; 0x2d
   11694:	e7bd      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EAFNOSUPPORT;
   11696:	f00e f8b0 	bl	1f7fa <z_errno>
   1169a:	232f      	movs	r3, #47	; 0x2f
   1169c:	e7b9      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EADDRINUSE;
   1169e:	f00e f8ac 	bl	1f7fa <z_errno>
   116a2:	2330      	movs	r3, #48	; 0x30
   116a4:	e7b5      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ENETDOWN;
   116a6:	f00e f8a8 	bl	1f7fa <z_errno>
   116aa:	233e      	movs	r3, #62	; 0x3e
   116ac:	e7b1      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ENETUNREACH;
   116ae:	f00e f8a4 	bl	1f7fa <z_errno>
   116b2:	2333      	movs	r3, #51	; 0x33
   116b4:	e7ad      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ENETRESET;
   116b6:	f00e f8a0 	bl	1f7fa <z_errno>
   116ba:	2334      	movs	r3, #52	; 0x34
   116bc:	e7a9      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ECONNRESET;
   116be:	f00e f89c 	bl	1f7fa <z_errno>
   116c2:	2336      	movs	r3, #54	; 0x36
   116c4:	e7a5      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EISCONN;
   116c6:	f00e f898 	bl	1f7fa <z_errno>
   116ca:	2338      	movs	r3, #56	; 0x38
   116cc:	e7a1      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ENOTCONN;
   116ce:	f00e f894 	bl	1f7fa <z_errno>
   116d2:	2339      	movs	r3, #57	; 0x39
   116d4:	e79d      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ETIMEDOUT;
   116d6:	f00e f890 	bl	1f7fa <z_errno>
   116da:	233c      	movs	r3, #60	; 0x3c
   116dc:	e799      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ENOBUFS;
   116de:	f00e f88c 	bl	1f7fa <z_errno>
   116e2:	2337      	movs	r3, #55	; 0x37
   116e4:	e795      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EHOSTDOWN;
   116e6:	f00e f888 	bl	1f7fa <z_errno>
   116ea:	2343      	movs	r3, #67	; 0x43
   116ec:	e791      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EINPROGRESS;
   116ee:	f00e f884 	bl	1f7fa <z_errno>
   116f2:	2344      	movs	r3, #68	; 0x44
   116f4:	e78d      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EALREADY;
   116f6:	f00e f880 	bl	1f7fa <z_errno>
   116fa:	2345      	movs	r3, #69	; 0x45
   116fc:	e789      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ECANCELED;
   116fe:	f00e f87c 	bl	1f7fa <z_errno>
   11702:	2348      	movs	r3, #72	; 0x48
   11704:	e785      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ENOKEY;
   11706:	f00e f878 	bl	1f7fa <z_errno>
   1170a:	f240 73d1 	movw	r3, #2001	; 0x7d1
   1170e:	e780      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EKEYEXPIRED;
   11710:	f00e f873 	bl	1f7fa <z_errno>
   11714:	f240 73d2 	movw	r3, #2002	; 0x7d2
   11718:	e77b      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EKEYREVOKED;
   1171a:	f00e f86e 	bl	1f7fa <z_errno>
   1171e:	f240 73d3 	movw	r3, #2003	; 0x7d3
   11722:	e776      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EKEYREJECTED;
   11724:	f00e f869 	bl	1f7fa <z_errno>
   11728:	f240 73d4 	movw	r3, #2004	; 0x7d4
   1172c:	e771      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = EMSGSIZE;
   1172e:	f00e f864 	bl	1f7fa <z_errno>
   11732:	2324      	movs	r3, #36	; 0x24
   11734:	e76d      	b.n	11612 <bsd_os_errno_set+0x1aa>
		errno = ECONNABORTED;
   11736:	f00e f860 	bl	1f7fa <z_errno>
   1173a:	2335      	movs	r3, #53	; 0x35
   1173c:	e769      	b.n	11612 <bsd_os_errno_set+0x1aa>
   1173e:	bf00      	nop
   11740:	00020e10 	.word	0x00020e10
   11744:	00020e28 	.word	0x00020e28
   11748:	00021f0a 	.word	0x00021f0a
   1174c:	baadbaad 	.word	0xbaadbaad

00011750 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11754:	4b01      	ldr	r3, [pc, #4]	; (1175c <bsd_os_application_irq_set+0xc>)
   11756:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1175a:	4770      	bx	lr
   1175c:	e000e100 	.word	0xe000e100

00011760 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11764:	4b01      	ldr	r3, [pc, #4]	; (1176c <bsd_os_application_irq_clear+0xc>)
   11766:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1176a:	4770      	bx	lr
   1176c:	e000e100 	.word	0xe000e100

00011770 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11770:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11774:	4b01      	ldr	r3, [pc, #4]	; (1177c <bsd_os_trace_irq_set+0xc>)
   11776:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1177a:	4770      	bx	lr
   1177c:	e000e100 	.word	0xe000e100

00011780 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11780:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   11784:	4b01      	ldr	r3, [pc, #4]	; (1178c <bsd_os_trace_irq_clear+0xc>)
   11786:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1178a:	4770      	bx	lr
   1178c:	e000e100 	.word	0xe000e100

00011790 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   11790:	b508      	push	{r3, lr}
	list->head = NULL;
   11792:	2300      	movs	r3, #0
   11794:	4a07      	ldr	r2, [pc, #28]	; (117b4 <bsd_os_init+0x24>)
	list->tail = NULL;
   11796:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1179a:	4a07      	ldr	r2, [pc, #28]	; (117b8 <bsd_os_init+0x28>)
   1179c:	e8d2 1fef 	ldaex	r1, [r2]
   117a0:	e8c2 3fe0 	stlex	r0, r3, [r2]
   117a4:	2800      	cmp	r0, #0
   117a6:	d1f9      	bne.n	1179c <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   117a8:	f00e f852 	bl	1f850 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   117ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   117b0:	f00e b843 	b.w	1f83a <trace_task_create>
   117b4:	20020934 	.word	0x20020934
   117b8:	20020930 	.word	0x20020930

000117bc <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   117bc:	f240 2302 	movw	r3, #514	; 0x202
   117c0:	4298      	cmp	r0, r3
   117c2:	f000 8087 	beq.w	118d4 <z_to_nrf_optname+0x118>
   117c6:	dc07      	bgt.n	117d8 <z_to_nrf_optname+0x1c>
   117c8:	2801      	cmp	r0, #1
   117ca:	d040      	beq.n	1184e <z_to_nrf_optname+0x92>
   117cc:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   117d0:	d034      	beq.n	1183c <z_to_nrf_optname+0x80>
   117d2:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   117d6:	4770      	bx	lr
	switch (z_in_level) {
   117d8:	f240 2303 	movw	r3, #515	; 0x203
   117dc:	4298      	cmp	r0, r3
   117de:	d1f8      	bne.n	117d2 <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   117e0:	3901      	subs	r1, #1
   117e2:	2913      	cmp	r1, #19
   117e4:	d8f5      	bhi.n	117d2 <z_to_nrf_optname+0x16>
   117e6:	a301      	add	r3, pc, #4	; (adr r3, 117ec <z_to_nrf_optname+0x30>)
   117e8:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   117ec:	000118e3 	.word	0x000118e3
   117f0:	000118bd 	.word	0x000118bd
   117f4:	000118c1 	.word	0x000118c1
   117f8:	0001185f 	.word	0x0001185f
   117fc:	000118c5 	.word	0x000118c5
   11800:	000118c9 	.word	0x000118c9
   11804:	000118cd 	.word	0x000118cd
   11808:	000117d3 	.word	0x000117d3
   1180c:	000117d3 	.word	0x000117d3
   11810:	000117d3 	.word	0x000117d3
   11814:	000117d3 	.word	0x000117d3
   11818:	000117d3 	.word	0x000117d3
   1181c:	000117d3 	.word	0x000117d3
   11820:	000117d3 	.word	0x000117d3
   11824:	000117d3 	.word	0x000117d3
   11828:	000117d3 	.word	0x000117d3
   1182c:	000117d3 	.word	0x000117d3
   11830:	000117d3 	.word	0x000117d3
   11834:	000117d3 	.word	0x000117d3
   11838:	000118d1 	.word	0x000118d1
		switch (z_in_optname) {
   1183c:	3901      	subs	r1, #1
   1183e:	2906      	cmp	r1, #6
   11840:	d8c7      	bhi.n	117d2 <z_to_nrf_optname+0x16>
   11842:	e8df f001 	tbb	[pc, r1]
   11846:	3f3b      	.short	0x3f3b
   11848:	4e0c4341 	.word	0x4e0c4341
   1184c:	3d          	.byte	0x3d
   1184d:	00          	.byte	0x00
		switch (z_in_optname) {
   1184e:	2920      	cmp	r1, #32
   11850:	dcbf      	bgt.n	117d2 <z_to_nrf_optname+0x16>
   11852:	2913      	cmp	r1, #19
   11854:	dc05      	bgt.n	11862 <z_to_nrf_optname+0xa6>
   11856:	2902      	cmp	r1, #2
   11858:	d028      	beq.n	118ac <z_to_nrf_optname+0xf0>
   1185a:	2904      	cmp	r1, #4
   1185c:	d1b9      	bne.n	117d2 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   1185e:	2304      	movs	r3, #4
   11860:	e040      	b.n	118e4 <z_to_nrf_optname+0x128>
   11862:	3914      	subs	r1, #20
   11864:	290c      	cmp	r1, #12
   11866:	d8b4      	bhi.n	117d2 <z_to_nrf_optname+0x16>
   11868:	a301      	add	r3, pc, #4	; (adr r3, 11870 <z_to_nrf_optname+0xb4>)
   1186a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1186e:	bf00      	nop
   11870:	000118d1 	.word	0x000118d1
   11874:	000118a5 	.word	0x000118a5
   11878:	000117d3 	.word	0x000117d3
   1187c:	000117d3 	.word	0x000117d3
   11880:	000117d3 	.word	0x000117d3
   11884:	000118a9 	.word	0x000118a9
   11888:	000117d3 	.word	0x000117d3
   1188c:	000117d3 	.word	0x000117d3
   11890:	000117d3 	.word	0x000117d3
   11894:	000117d3 	.word	0x000117d3
   11898:	000118b1 	.word	0x000118b1
   1189c:	000118b5 	.word	0x000118b5
   118a0:	000118b9 	.word	0x000118b9
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   118a4:	2315      	movs	r3, #21
   118a6:	e01d      	b.n	118e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   118a8:	2319      	movs	r3, #25
   118aa:	e01b      	b.n	118e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   118ac:	2328      	movs	r3, #40	; 0x28
   118ae:	e019      	b.n	118e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   118b0:	231e      	movs	r3, #30
   118b2:	e017      	b.n	118e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   118b4:	231f      	movs	r3, #31
   118b6:	e015      	b.n	118e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   118b8:	2320      	movs	r3, #32
   118ba:	e013      	b.n	118e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   118bc:	2302      	movs	r3, #2
   118be:	e011      	b.n	118e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   118c0:	2303      	movs	r3, #3
   118c2:	e00f      	b.n	118e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   118c4:	2305      	movs	r3, #5
   118c6:	e00d      	b.n	118e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   118c8:	2306      	movs	r3, #6
   118ca:	e00b      	b.n	118e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   118cc:	2307      	movs	r3, #7
   118ce:	e009      	b.n	118e4 <z_to_nrf_optname+0x128>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   118d0:	2314      	movs	r3, #20
   118d2:	e007      	b.n	118e4 <z_to_nrf_optname+0x128>
		switch (z_in_optname) {
   118d4:	2902      	cmp	r1, #2
   118d6:	d0f1      	beq.n	118bc <z_to_nrf_optname+0x100>
   118d8:	2903      	cmp	r1, #3
   118da:	d0f1      	beq.n	118c0 <z_to_nrf_optname+0x104>
   118dc:	2901      	cmp	r1, #1
   118de:	f47f af78 	bne.w	117d2 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   118e2:	2301      	movs	r3, #1
	int retval = 0;
   118e4:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   118e6:	6013      	str	r3, [r2, #0]
			break;
   118e8:	4770      	bx	lr
   118ea:	bf00      	nop

000118ec <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   118ec:	f240 1303 	movw	r3, #259	; 0x103
{
   118f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   118f4:	4299      	cmp	r1, r3
{
   118f6:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   118f8:	f000 8097 	beq.w	11a2a <nrf91_socket_offload_ioctl+0x13e>
   118fc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   11900:	d005      	beq.n	1190e <nrf91_socket_offload_ioctl+0x22>
   11902:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   11906:	d171      	bne.n	119ec <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   11908:	f06f 0411 	mvn.w	r4, #17
   1190c:	e01d      	b.n	1194a <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   1190e:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   11912:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   11916:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   11918:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   1191c:	4668      	mov	r0, sp
   1191e:	2240      	movs	r2, #64	; 0x40
   11920:	f00c ffe4 	bl	1e8ec <memset>
	for (int i = 0; i < nfds; i++) {
   11924:	466e      	mov	r6, sp
   11926:	4655      	mov	r5, sl
   11928:	4657      	mov	r7, sl
	int retval = 0;
   1192a:	4644      	mov	r4, r8
		tmp[i].events = 0;
   1192c:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   1192e:	4940      	ldr	r1, [pc, #256]	; (11a30 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   11930:	45c1      	cmp	r9, r8
   11932:	dc0e      	bgt.n	11952 <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   11934:	2c00      	cmp	r4, #0
   11936:	dc08      	bgt.n	1194a <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   11938:	465a      	mov	r2, fp
   1193a:	4649      	mov	r1, r9
   1193c:	4668      	mov	r0, sp
   1193e:	f008 fbed 	bl	1a11c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   11942:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   11944:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   11946:	4599      	cmp	r9, r3
   11948:	dc28      	bgt.n	1199c <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   1194a:	4620      	mov	r0, r4
   1194c:	b011      	add	sp, #68	; 0x44
   1194e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   11952:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   11954:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   11956:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   11958:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   1195a:	da05      	bge.n	11968 <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   1195c:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   1195e:	f108 0801 	add.w	r8, r8, #1
   11962:	3608      	adds	r6, #8
   11964:	3708      	adds	r7, #8
   11966:	e7e3      	b.n	11930 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   11968:	2223      	movs	r2, #35	; 0x23
   1196a:	f7fb fef7 	bl	d75c <z_get_fd_obj>
			if (obj != NULL) {
   1196e:	2300      	movs	r3, #0
   11970:	492f      	ldr	r1, [pc, #188]	; (11a30 <nrf91_socket_offload_ioctl+0x144>)
   11972:	b178      	cbz	r0, 11994 <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   11974:	3801      	subs	r0, #1
   11976:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   11978:	88b8      	ldrh	r0, [r7, #4]
   1197a:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   1197c:	bf42      	ittt	mi
   1197e:	88b2      	ldrhmi	r2, [r6, #4]
   11980:	f042 0201 	orrmi.w	r2, r2, #1
   11984:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   11986:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   11988:	bf42      	ittt	mi
   1198a:	88b2      	ldrhmi	r2, [r6, #4]
   1198c:	f042 0202 	orrmi.w	r2, r2, #2
   11990:	80b2      	strhmi	r2, [r6, #4]
   11992:	e7e4      	b.n	1195e <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   11994:	2220      	movs	r2, #32
				retval++;
   11996:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   11998:	80fa      	strh	r2, [r7, #6]
				retval++;
   1199a:	e7ed      	b.n	11978 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   1199c:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   119a0:	2a00      	cmp	r2, #0
   119a2:	db20      	blt.n	119e6 <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   119a4:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   119a8:	88d2      	ldrh	r2, [r2, #6]
   119aa:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   119ac:	bf42      	ittt	mi
   119ae:	88e9      	ldrhmi	r1, [r5, #6]
   119b0:	f041 0101 	orrmi.w	r1, r1, #1
   119b4:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   119b6:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   119b8:	bf42      	ittt	mi
   119ba:	88e9      	ldrhmi	r1, [r5, #6]
   119bc:	f041 0104 	orrmi.w	r1, r1, #4
   119c0:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   119c2:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   119c4:	bf42      	ittt	mi
   119c6:	88e9      	ldrhmi	r1, [r5, #6]
   119c8:	f041 0108 	orrmi.w	r1, r1, #8
   119cc:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   119ce:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   119d0:	bf42      	ittt	mi
   119d2:	88e9      	ldrhmi	r1, [r5, #6]
   119d4:	f041 0120 	orrmi.w	r1, r1, #32
   119d8:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   119da:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   119dc:	bf42      	ittt	mi
   119de:	88ea      	ldrhmi	r2, [r5, #6]
   119e0:	f042 0210 	orrmi.w	r2, r2, #16
   119e4:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   119e6:	3301      	adds	r3, #1
   119e8:	3508      	adds	r5, #8
   119ea:	e7ac      	b.n	11946 <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   119ec:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   119ee:	f100 30ff 	add.w	r0, r0, #4294967295
	switch (cmd) {
   119f2:	d00b      	beq.n	11a0c <nrf91_socket_offload_ioctl+0x120>
   119f4:	2904      	cmp	r1, #4
   119f6:	d111      	bne.n	11a1c <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   119f8:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   119fa:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   119fe:	d10d      	bne.n	11a1c <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   11a00:	2101      	movs	r1, #1
   11a02:	1392      	asrs	r2, r2, #14
   11a04:	f008 fb8c 	bl	1a120 <nrf_fcntl>
   11a08:	4604      	mov	r4, r0
		break;
   11a0a:	e79e      	b.n	1194a <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   11a0c:	2200      	movs	r2, #0
   11a0e:	2102      	movs	r1, #2
   11a10:	f008 fb86 	bl	1a120 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   11a14:	0380      	lsls	r0, r0, #14
   11a16:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   11a1a:	e796      	b.n	1194a <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   11a1c:	f00d ff80 	bl	1f920 <z_errno>
   11a20:	2316      	movs	r3, #22
	return retval;
   11a22:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   11a26:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   11a28:	e78f      	b.n	1194a <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   11a2a:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   11a2e:	e78c      	b.n	1194a <nrf91_socket_offload_ioctl+0x5e>
   11a30:	00021068 	.word	0x00021068

00011a34 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   11a34:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   11a36:	4b03      	ldr	r3, [pc, #12]	; (11a44 <nrf91_socket_iface_init+0x10>)
   11a38:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   11a3a:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   11a3c:	4802      	ldr	r0, [pc, #8]	; (11a48 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   11a3e:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   11a40:	f7fd bcf8 	b.w	f434 <socket_offload_dns_register>
   11a44:	2002098c 	.word	0x2002098c
   11a48:	00021060 	.word	0x00021060

00011a4c <nrf91_socket_create>:
{
   11a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a4e:	4606      	mov	r6, r0
   11a50:	460d      	mov	r5, r1
   11a52:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   11a54:	f7fb feb2 	bl	d7bc <z_reserve_fd>
	if (fd < 0) {
   11a58:	1e04      	subs	r4, r0, #0
   11a5a:	db0d      	blt.n	11a78 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   11a5c:	b2b0      	uxth	r0, r6
   11a5e:	f00d ff12 	bl	1f886 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   11a62:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
	family = z_to_nrf_family(family);
   11a66:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   11a68:	d109      	bne.n	11a7e <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   11a6a:	f00d ff59 	bl	1f920 <z_errno>
   11a6e:	232f      	movs	r3, #47	; 0x2f
		errno = EPROTONOSUPPORT;
   11a70:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   11a72:	4620      	mov	r0, r4
   11a74:	f7fb fede 	bl	d834 <z_free_fd>
		return -1;
   11a78:	f04f 34ff 	mov.w	r4, #4294967295
   11a7c:	e01b      	b.n	11ab6 <nrf91_socket_create+0x6a>
	switch (socktype) {
   11a7e:	2d03      	cmp	r5, #3
   11a80:	d003      	beq.n	11a8a <nrf91_socket_create+0x3e>
   11a82:	2d04      	cmp	r5, #4
   11a84:	bf08      	it	eq
   11a86:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   11a8a:	4638      	mov	r0, r7
   11a8c:	f00d ff17 	bl	1f8be <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   11a90:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	proto = z_to_nrf_protocol(proto);
   11a94:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   11a96:	d103      	bne.n	11aa0 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   11a98:	f00d ff42 	bl	1f920 <z_errno>
   11a9c:	232b      	movs	r3, #43	; 0x2b
   11a9e:	e7e7      	b.n	11a70 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   11aa0:	4629      	mov	r1, r5
   11aa2:	4630      	mov	r0, r6
   11aa4:	f008 fa5c 	bl	19f60 <nrf_socket>
	if (sd < 0) {
   11aa8:	1e01      	subs	r1, r0, #0
   11aaa:	dbe2      	blt.n	11a72 <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   11aac:	4620      	mov	r0, r4
   11aae:	4a03      	ldr	r2, [pc, #12]	; (11abc <nrf91_socket_create+0x70>)
   11ab0:	3101      	adds	r1, #1
   11ab2:	f7fb feb5 	bl	d820 <z_finalize_fd>
}
   11ab6:	4620      	mov	r0, r4
   11ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11aba:	bf00      	nop
   11abc:	00021068 	.word	0x00021068

00011ac0 <nrf91_socket_offload_sendmsg>:
{
   11ac0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11ac4:	4607      	mov	r7, r0
   11ac6:	4690      	mov	r8, r2
	if (msg == NULL) {
   11ac8:	460c      	mov	r4, r1
   11aca:	b319      	cbz	r1, 11b14 <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   11acc:	2300      	movs	r3, #0
	ssize_t len = 0;
   11ace:	461a      	mov	r2, r3
   11ad0:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   11ad2:	4298      	cmp	r0, r3
   11ad4:	d128      	bne.n	11b28 <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   11ad6:	2a80      	cmp	r2, #128	; 0x80
   11ad8:	d857      	bhi.n	11b8a <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   11ada:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   11adc:	f04f 32ff 	mov.w	r2, #4294967295
   11ae0:	f04f 33ff 	mov.w	r3, #4294967295
   11ae4:	482a      	ldr	r0, [pc, #168]	; (11b90 <nrf91_socket_offload_sendmsg+0xd0>)
   11ae6:	f00a fc79 	bl	1c3dc <z_impl_k_mutex_lock>
		len = 0;
   11aea:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   11aec:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 11b94 <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   11af0:	68e3      	ldr	r3, [r4, #12]
   11af2:	42ab      	cmp	r3, r5
   11af4:	d81f      	bhi.n	11b36 <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   11af6:	6863      	ldr	r3, [r4, #4]
   11af8:	4632      	mov	r2, r6
   11afa:	9301      	str	r3, [sp, #4]
   11afc:	6823      	ldr	r3, [r4, #0]
   11afe:	4638      	mov	r0, r7
   11b00:	9300      	str	r3, [sp, #0]
   11b02:	4924      	ldr	r1, [pc, #144]	; (11b94 <nrf91_socket_offload_sendmsg+0xd4>)
   11b04:	4643      	mov	r3, r8
   11b06:	f00e f922 	bl	1fd4e <nrf91_socket_offload_sendto>
   11b0a:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   11b0c:	4820      	ldr	r0, [pc, #128]	; (11b90 <nrf91_socket_offload_sendmsg+0xd0>)
   11b0e:	f00a fcdd 	bl	1c4cc <z_impl_k_mutex_unlock>
		return ret;
   11b12:	e005      	b.n	11b20 <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   11b14:	f00d ff04 	bl	1f920 <z_errno>
   11b18:	2316      	movs	r3, #22
		return -1;
   11b1a:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   11b1e:	6003      	str	r3, [r0, #0]
}
   11b20:	4628      	mov	r0, r5
   11b22:	b002      	add	sp, #8
   11b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   11b28:	68a1      	ldr	r1, [r4, #8]
   11b2a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   11b2e:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   11b30:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   11b32:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   11b34:	e7cd      	b.n	11ad2 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   11b36:	68a1      	ldr	r1, [r4, #8]
   11b38:	eb09 0006 	add.w	r0, r9, r6
   11b3c:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   11b40:	685a      	ldr	r2, [r3, #4]
   11b42:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   11b46:	f00c fea6 	bl	1e896 <memcpy>
			len += msg->msg_iov[i].iov_len;
   11b4a:	68a3      	ldr	r3, [r4, #8]
   11b4c:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   11b50:	4453      	add	r3, sl
   11b52:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   11b54:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   11b56:	441e      	add	r6, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   11b58:	e7ca      	b.n	11af0 <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   11b5a:	68a1      	ldr	r1, [r4, #8]
   11b5c:	eb01 03c6 	add.w	r3, r1, r6, lsl #3
   11b60:	685a      	ldr	r2, [r3, #4]
   11b62:	b162      	cbz	r2, 11b7e <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   11b64:	6863      	ldr	r3, [r4, #4]
   11b66:	4638      	mov	r0, r7
   11b68:	9301      	str	r3, [sp, #4]
   11b6a:	6823      	ldr	r3, [r4, #0]
   11b6c:	9300      	str	r3, [sp, #0]
   11b6e:	f851 1036 	ldr.w	r1, [r1, r6, lsl #3]
   11b72:	4643      	mov	r3, r8
   11b74:	f00e f8eb 	bl	1fd4e <nrf91_socket_offload_sendto>
		if (ret < 0) {
   11b78:	1e05      	subs	r5, r0, #0
   11b7a:	dbd1      	blt.n	11b20 <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   11b7c:	44a9      	add	r9, r5
	for (i = 0; i < msg->msg_iovlen; i++) {
   11b7e:	3601      	adds	r6, #1
   11b80:	68e3      	ldr	r3, [r4, #12]
   11b82:	429e      	cmp	r6, r3
   11b84:	d3e9      	bcc.n	11b5a <nrf91_socket_offload_sendmsg+0x9a>
   11b86:	464d      	mov	r5, r9
   11b88:	e7ca      	b.n	11b20 <nrf91_socket_offload_sendmsg+0x60>
   11b8a:	2600      	movs	r6, #0
	len = 0;
   11b8c:	46b1      	mov	r9, r6
   11b8e:	e7f7      	b.n	11b80 <nrf91_socket_offload_sendmsg+0xc0>
   11b90:	20020168 	.word	0x20020168
   11b94:	20021ba0 	.word	0x20021ba0

00011b98 <nrf91_socket_offload_accept>:
{
   11b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b9c:	b08a      	sub	sp, #40	; 0x28
   11b9e:	4607      	mov	r7, r0
   11ba0:	460c      	mov	r4, r1
   11ba2:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   11ba4:	f7fb fe0a 	bl	d7bc <z_reserve_fd>
   11ba8:	4606      	mov	r6, r0
	if (fd < 0) {
   11baa:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   11bac:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   11bb0:	da05      	bge.n	11bbe <nrf91_socket_offload_accept+0x26>
	return -1;
   11bb2:	f04f 36ff 	mov.w	r6, #4294967295
}
   11bb6:	4630      	mov	r0, r6
   11bb8:	b00a      	add	sp, #40	; 0x28
   11bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   11bbe:	b31c      	cbz	r4, 11c08 <nrf91_socket_offload_accept+0x70>
   11bc0:	b32d      	cbz	r5, 11c0e <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   11bc2:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   11bc4:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   11bc6:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   11bc8:	bf0c      	ite	eq
   11bca:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   11bcc:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   11bce:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   11bd0:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   11bd2:	4639      	mov	r1, r7
   11bd4:	f008 fa3e 	bl	1a054 <nrf_accept>
	if (new_sd < 0) {
   11bd8:	f1b0 0800 	subs.w	r8, r0, #0
   11bdc:	dbe9      	blt.n	11bb2 <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   11bde:	b164      	cbz	r4, 11bfa <nrf91_socket_offload_accept+0x62>
   11be0:	b15d      	cbz	r5, 11bfa <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   11be2:	687b      	ldr	r3, [r7, #4]
   11be4:	2b02      	cmp	r3, #2
   11be6:	d115      	bne.n	11c14 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   11be8:	2308      	movs	r3, #8
   11bea:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   11bec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11bf0:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   11bf2:	2301      	movs	r3, #1
   11bf4:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   11bf6:	9b04      	ldr	r3, [sp, #16]
   11bf8:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   11bfa:	4630      	mov	r0, r6
   11bfc:	4a10      	ldr	r2, [pc, #64]	; (11c40 <nrf91_socket_offload_accept+0xa8>)
   11bfe:	f108 0101 	add.w	r1, r8, #1
   11c02:	f7fb fe0d 	bl	d820 <z_finalize_fd>
	return fd;
   11c06:	e7d6      	b.n	11bb6 <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   11c08:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   11c0a:	4627      	mov	r7, r4
   11c0c:	e7e1      	b.n	11bd2 <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   11c0e:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   11c10:	462f      	mov	r7, r5
   11c12:	e7de      	b.n	11bd2 <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   11c14:	2b0a      	cmp	r3, #10
   11c16:	d10f      	bne.n	11c38 <nrf91_socket_offload_accept+0xa0>
			*addrlen = sizeof(struct sockaddr_in6);
   11c18:	2318      	movs	r3, #24
   11c1a:	602b      	str	r3, [r5, #0]
	ptr->sin6_port = nrf_in->sin6_port;
   11c1c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	ptr->sin6_family = AF_INET6;
   11c20:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   11c22:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   11c24:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   11c26:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   11c28:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   11c2c:	a905      	add	r1, sp, #20
   11c2e:	f00c fe32 	bl	1e896 <memcpy>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   11c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11c34:	7523      	strb	r3, [r4, #20]
}
   11c36:	e7e0      	b.n	11bfa <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   11c38:	4630      	mov	r0, r6
   11c3a:	f7fb fdfb 	bl	d834 <z_free_fd>
   11c3e:	e7b8      	b.n	11bb2 <nrf91_socket_offload_accept+0x1a>
   11c40:	00021068 	.word	0x00021068

00011c44 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   11c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   11c46:	f04f 0320 	mov.w	r3, #32
   11c4a:	f3ef 8511 	mrs	r5, BASEPRI
   11c4e:	f383 8811 	msr	BASEPRI, r3
   11c52:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   11c56:	2400      	movs	r4, #0
   11c58:	4e16      	ldr	r6, [pc, #88]	; (11cb4 <button_pressed+0x70>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   11c5a:	4f17      	ldr	r7, [pc, #92]	; (11cb8 <button_pressed+0x74>)
   11c5c:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   11c60:	f856 0b04 	ldr.w	r0, [r6], #4
   11c64:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   11c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   11c6a:	3401      	adds	r4, #1
   11c6c:	f00e f937 	bl	1fede <z_impl_gpio_pin_interrupt_configure>
   11c70:	2c04      	cmp	r4, #4
   11c72:	d00c      	beq.n	11c8e <button_pressed+0x4a>
   11c74:	2800      	cmp	r0, #0
   11c76:	d0f1      	beq.n	11c5c <button_pressed+0x18>
   11c78:	4b10      	ldr	r3, [pc, #64]	; (11cbc <button_pressed+0x78>)
   11c7a:	4911      	ldr	r1, [pc, #68]	; (11cc0 <button_pressed+0x7c>)

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);

	if (err) {
		LOG_ERR("Cannot disable callbacks");
   11c7c:	4811      	ldr	r0, [pc, #68]	; (11cc4 <button_pressed+0x80>)
   11c7e:	1ac9      	subs	r1, r1, r3
   11c80:	08c9      	lsrs	r1, r1, #3
   11c82:	0189      	lsls	r1, r1, #6
   11c84:	f041 0101 	orr.w	r1, r1, #1
   11c88:	f00c f828 	bl	1dcdc <log_0>
   11c8c:	e001      	b.n	11c92 <button_pressed+0x4e>
	if (err) {
   11c8e:	2800      	cmp	r0, #0
   11c90:	d1f2      	bne.n	11c78 <button_pressed+0x34>
	}

	switch (state) {
   11c92:	4b0d      	ldr	r3, [pc, #52]	; (11cc8 <button_pressed+0x84>)
   11c94:	781a      	ldrb	r2, [r3, #0]
   11c96:	b93a      	cbnz	r2, 11ca8 <button_pressed+0x64>
	case STATE_WAITING:
		state = STATE_SCANNING;
   11c98:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11c9a:	490c      	ldr	r1, [pc, #48]	; (11ccc <button_pressed+0x88>)
   11c9c:	701a      	strb	r2, [r3, #0]
   11c9e:	480c      	ldr	r0, [pc, #48]	; (11cd0 <button_pressed+0x8c>)
   11ca0:	2221      	movs	r2, #33	; 0x21
   11ca2:	2300      	movs	r3, #0
   11ca4:	f00b f938 	bl	1cf18 <k_delayed_work_submit_to_queue>
	__asm__ volatile(
   11ca8:	f385 8811 	msr	BASEPRI, r5
   11cac:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   11cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11cb2:	bf00      	nop
   11cb4:	20020990 	.word	0x20020990
   11cb8:	000210a0 	.word	0x000210a0
   11cbc:	00020e10 	.word	0x00020e10
   11cc0:	00020e38 	.word	0x00020e38
   11cc4:	00021f43 	.word	0x00021f43
   11cc8:	20021c20 	.word	0x20021c20
   11ccc:	20020308 	.word	0x20020308
   11cd0:	20020670 	.word	0x20020670

00011cd4 <buttons_scan_fn>:
{
   11cd4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t ret = 0;
   11cd8:	2400      	movs	r4, #0
   11cda:	4e54      	ldr	r6, [pc, #336]	; (11e2c <buttons_scan_fn+0x158>)
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   11cdc:	f8df a184 	ldr.w	sl, [pc, #388]	; 11e64 <buttons_scan_fn+0x190>
{
   11ce0:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11ce2:	4625      	mov	r5, r4
   11ce4:	4657      	mov	r7, sl
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   11ce6:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
   11cea:	f859 0b04 	ldr.w	r0, [r9], #4
   11cee:	f893 8004 	ldrb.w	r8, [r3, #4]
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
   11cf2:	6883      	ldr	r3, [r0, #8]
   11cf4:	a901      	add	r1, sp, #4
   11cf6:	685b      	ldr	r3, [r3, #4]
   11cf8:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
   11cfa:	2800      	cmp	r0, #0
   11cfc:	d14a      	bne.n	11d94 <buttons_scan_fn+0xc0>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   11cfe:	2301      	movs	r3, #1
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   11d00:	9a01      	ldr	r2, [sp, #4]
   11d02:	fa03 f808 	lsl.w	r8, r3, r8
   11d06:	ea18 0f02 	tst.w	r8, r2
   11d0a:	d003      	beq.n	11d14 <buttons_scan_fn+0x40>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11d0c:	3501      	adds	r5, #1
   11d0e:	2d04      	cmp	r5, #4
   11d10:	d1e9      	bne.n	11ce6 <buttons_scan_fn+0x12>
   11d12:	e04b      	b.n	11dac <buttons_scan_fn+0xd8>
			ret |= 1U << i;
   11d14:	40ab      	lsls	r3, r5
   11d16:	431c      	orrs	r4, r3
   11d18:	e7f8      	b.n	11d0c <buttons_scan_fn+0x38>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   11d1a:	3d04      	subs	r5, #4
   11d1c:	2d00      	cmp	r5, #0
   11d1e:	d069      	beq.n	11df4 <buttons_scan_fn+0x120>
			handler->cb(button_state, has_changed);
   11d20:	46aa      	mov	sl, r5
   11d22:	f85a 3b04 	ldr.w	r3, [sl], #4
   11d26:	4641      	mov	r1, r8
   11d28:	4620      	mov	r0, r4
   11d2a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   11d2c:	f1ba 0f00 	cmp.w	sl, #0
   11d30:	d060      	beq.n	11df4 <buttons_scan_fn+0x120>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11d32:	686d      	ldr	r5, [r5, #4]
	return node->next;
   11d34:	e05c      	b.n	11df0 <buttons_scan_fn+0x11c>
		initial_run = false;
   11d36:	2200      	movs	r2, #0
   11d38:	701a      	strb	r2, [r3, #0]
   11d3a:	e05e      	b.n	11dfa <buttons_scan_fn+0x126>
	__asm__ volatile(
   11d3c:	f04f 0320 	mov.w	r3, #32
   11d40:	f3ef 8511 	mrs	r5, BASEPRI
   11d44:	f383 8811 	msr	BASEPRI, r3
   11d48:	f3bf 8f6f 	isb	sy
		switch (state) {
   11d4c:	4b38      	ldr	r3, [pc, #224]	; (11e30 <buttons_scan_fn+0x15c>)
   11d4e:	781a      	ldrb	r2, [r3, #0]
   11d50:	2a01      	cmp	r2, #1
   11d52:	d11d      	bne.n	11d90 <buttons_scan_fn+0xbc>
			state = STATE_WAITING;
   11d54:	701c      	strb	r4, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   11d56:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   11d5a:	f856 0b04 	ldr.w	r0, [r6], #4
   11d5e:	7919      	ldrb	r1, [r3, #4]
   11d60:	f44f 3210 	mov.w	r2, #147456	; 0x24000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   11d64:	3401      	adds	r4, #1
   11d66:	f00e f8ba 	bl	1fede <z_impl_gpio_pin_interrupt_configure>
   11d6a:	2c04      	cmp	r4, #4
   11d6c:	d001      	beq.n	11d72 <buttons_scan_fn+0x9e>
   11d6e:	2800      	cmp	r0, #0
   11d70:	d0f1      	beq.n	11d56 <buttons_scan_fn+0x82>
	__asm__ volatile(
   11d72:	f385 8811 	msr	BASEPRI, r5
   11d76:	f3bf 8f6f 	isb	sy
		if (err) {
   11d7a:	2800      	cmp	r0, #0
   11d7c:	d053      	beq.n	11e26 <buttons_scan_fn+0x152>
   11d7e:	492d      	ldr	r1, [pc, #180]	; (11e34 <buttons_scan_fn+0x160>)
   11d80:	4b2d      	ldr	r3, [pc, #180]	; (11e38 <buttons_scan_fn+0x164>)
			LOG_ERR("Cannot enable callbacks");
   11d82:	482e      	ldr	r0, [pc, #184]	; (11e3c <buttons_scan_fn+0x168>)
   11d84:	1ac9      	subs	r1, r1, r3
   11d86:	08c9      	lsrs	r1, r1, #3
   11d88:	0189      	lsls	r1, r1, #6
   11d8a:	f041 0101 	orr.w	r1, r1, #1
   11d8e:	e048      	b.n	11e22 <buttons_scan_fn+0x14e>
		int err = 0;
   11d90:	4620      	mov	r0, r4
   11d92:	e7ee      	b.n	11d72 <buttons_scan_fn+0x9e>
		if (val < 0) {
   11d94:	daba      	bge.n	11d0c <buttons_scan_fn+0x38>
   11d96:	4b28      	ldr	r3, [pc, #160]	; (11e38 <buttons_scan_fn+0x164>)
   11d98:	4926      	ldr	r1, [pc, #152]	; (11e34 <buttons_scan_fn+0x160>)
			LOG_ERR("Cannot read gpio pin");
   11d9a:	4829      	ldr	r0, [pc, #164]	; (11e40 <buttons_scan_fn+0x16c>)
   11d9c:	1ac9      	subs	r1, r1, r3
   11d9e:	08c9      	lsrs	r1, r1, #3
   11da0:	0189      	lsls	r1, r1, #6
   11da2:	f041 0101 	orr.w	r1, r1, #1
   11da6:	f00b ff99 	bl	1dcdc <log_0>
			return 0;
   11daa:	2400      	movs	r4, #0
   11dac:	4b25      	ldr	r3, [pc, #148]	; (11e44 <buttons_scan_fn+0x170>)
   11dae:	e8d3 2fef 	ldaex	r2, [r3]
   11db2:	e8c3 4fe1 	stlex	r1, r4, [r3]
   11db6:	2900      	cmp	r1, #0
   11db8:	d1f9      	bne.n	11dae <buttons_scan_fn+0xda>
	if (!initial_run) {
   11dba:	4b23      	ldr	r3, [pc, #140]	; (11e48 <buttons_scan_fn+0x174>)
   11dbc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 11e68 <buttons_scan_fn+0x194>
   11dc0:	781a      	ldrb	r2, [r3, #0]
   11dc2:	2a00      	cmp	r2, #0
   11dc4:	d1b7      	bne.n	11d36 <buttons_scan_fn+0x62>
		if (button_scan != last_button_scan) {
   11dc6:	f8d9 1000 	ldr.w	r1, [r9]
   11dca:	42a1      	cmp	r1, r4
   11dcc:	d015      	beq.n	11dfa <buttons_scan_fn+0x126>
	if (button_handler_cb != NULL) {
   11dce:	4b1f      	ldr	r3, [pc, #124]	; (11e4c <buttons_scan_fn+0x178>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   11dd0:	ea81 0804 	eor.w	r8, r1, r4
	if (button_handler_cb != NULL) {
   11dd4:	681b      	ldr	r3, [r3, #0]
   11dd6:	b113      	cbz	r3, 11dde <buttons_scan_fn+0x10a>
		button_handler_cb(button_state, has_changed);
   11dd8:	4641      	mov	r1, r8
   11dda:	4620      	mov	r0, r4
   11ddc:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   11dde:	f04f 33ff 	mov.w	r3, #4294967295
   11de2:	f04f 32ff 	mov.w	r2, #4294967295
   11de6:	481a      	ldr	r0, [pc, #104]	; (11e50 <buttons_scan_fn+0x17c>)
   11de8:	f00a faf8 	bl	1c3dc <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   11dec:	4b19      	ldr	r3, [pc, #100]	; (11e54 <buttons_scan_fn+0x180>)
   11dee:	681d      	ldr	r5, [r3, #0]
   11df0:	2d00      	cmp	r5, #0
   11df2:	d192      	bne.n	11d1a <buttons_scan_fn+0x46>
	return z_impl_k_mutex_unlock(mutex);
   11df4:	4816      	ldr	r0, [pc, #88]	; (11e50 <buttons_scan_fn+0x17c>)
   11df6:	f00a fb69 	bl	1c4cc <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   11dfa:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   11dfe:	2c00      	cmp	r4, #0
   11e00:	d09c      	beq.n	11d3c <buttons_scan_fn+0x68>
   11e02:	f44f 72a4 	mov.w	r2, #328	; 0x148
   11e06:	2300      	movs	r3, #0
   11e08:	4913      	ldr	r1, [pc, #76]	; (11e58 <buttons_scan_fn+0x184>)
   11e0a:	4814      	ldr	r0, [pc, #80]	; (11e5c <buttons_scan_fn+0x188>)
   11e0c:	f00b f884 	bl	1cf18 <k_delayed_work_submit_to_queue>
		if (err) {
   11e10:	b148      	cbz	r0, 11e26 <buttons_scan_fn+0x152>
   11e12:	4908      	ldr	r1, [pc, #32]	; (11e34 <buttons_scan_fn+0x160>)
   11e14:	4b08      	ldr	r3, [pc, #32]	; (11e38 <buttons_scan_fn+0x164>)
			LOG_ERR("Cannot add work to workqueue");
   11e16:	4812      	ldr	r0, [pc, #72]	; (11e60 <buttons_scan_fn+0x18c>)
   11e18:	1ac9      	subs	r1, r1, r3
   11e1a:	08c9      	lsrs	r1, r1, #3
   11e1c:	0189      	lsls	r1, r1, #6
   11e1e:	f041 0101 	orr.w	r1, r1, #1
			LOG_ERR("Cannot enable callbacks");
   11e22:	f00b ff5b 	bl	1dcdc <log_0>
}
   11e26:	b002      	add	sp, #8
   11e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11e2c:	20020990 	.word	0x20020990
   11e30:	20021c20 	.word	0x20021c20
   11e34:	00020e38 	.word	0x00020e38
   11e38:	00020e10 	.word	0x00020e10
   11e3c:	00021f8e 	.word	0x00021f8e
   11e40:	00021f5c 	.word	0x00021f5c
   11e44:	200209d4 	.word	0x200209d4
   11e48:	20020074 	.word	0x20020074
   11e4c:	200209a0 	.word	0x200209a0
   11e50:	200209a4 	.word	0x200209a4
   11e54:	200209b8 	.word	0x200209b8
   11e58:	20020308 	.word	0x20020308
   11e5c:	20020670 	.word	0x20020670
   11e60:	00021f71 	.word	0x00021f71
   11e64:	000210a0 	.word	0x000210a0
   11e68:	200209cc 	.word	0x200209cc

00011e6c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11e6c:	4b05      	ldr	r3, [pc, #20]	; (11e84 <dk_read_buttons+0x18>)
   11e6e:	e8d3 3faf 	lda	r3, [r3]
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   11e72:	b100      	cbz	r0, 11e76 <dk_read_buttons+0xa>
		*button_state = current_state;
   11e74:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   11e76:	4804      	ldr	r0, [pc, #16]	; (11e88 <dk_read_buttons+0x1c>)
   11e78:	b111      	cbz	r1, 11e80 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   11e7a:	6802      	ldr	r2, [r0, #0]
   11e7c:	405a      	eors	r2, r3
   11e7e:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   11e80:	6003      	str	r3, [r0, #0]
}
   11e82:	4770      	bx	lr
   11e84:	200209d4 	.word	0x200209d4
   11e88:	200209d0 	.word	0x200209d0

00011e8c <dk_buttons_init>:
{
   11e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   11e90:	4b48      	ldr	r3, [pc, #288]	; (11fb4 <dk_buttons_init+0x128>)
   11e92:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   11e94:	4d48      	ldr	r5, [pc, #288]	; (11fb8 <dk_buttons_init+0x12c>)
   11e96:	4f49      	ldr	r7, [pc, #292]	; (11fbc <dk_buttons_init+0x130>)
   11e98:	4849      	ldr	r0, [pc, #292]	; (11fc0 <dk_buttons_init+0x134>)
   11e9a:	f00e fa7e 	bl	2039a <z_impl_k_mutex_init>
   11e9e:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11ea0:	2600      	movs	r6, #0
   11ea2:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   11ea4:	6828      	ldr	r0, [r5, #0]
   11ea6:	f009 ffe1 	bl	1be6c <z_impl_device_get_binding>
   11eaa:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   11eae:	b970      	cbnz	r0, 11ece <dk_buttons_init+0x42>
   11eb0:	4b44      	ldr	r3, [pc, #272]	; (11fc4 <dk_buttons_init+0x138>)
   11eb2:	4945      	ldr	r1, [pc, #276]	; (11fc8 <dk_buttons_init+0x13c>)
			LOG_ERR("Cannot bind gpio device");
   11eb4:	4845      	ldr	r0, [pc, #276]	; (11fcc <dk_buttons_init+0x140>)
   11eb6:	1ac9      	subs	r1, r1, r3
   11eb8:	08c9      	lsrs	r1, r1, #3
   11eba:	0189      	lsls	r1, r1, #6
   11ebc:	f041 0101 	orr.w	r1, r1, #1
   11ec0:	f00b ff0c 	bl	1dcdc <log_0>
			return -ENODEV;
   11ec4:	f06f 0412 	mvn.w	r4, #18
}
   11ec8:	4620      	mov	r0, r4
   11eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   11ece:	f44f 7288 	mov.w	r2, #272	; 0x110
   11ed2:	7929      	ldrb	r1, [r5, #4]
   11ed4:	f00e f817 	bl	1ff06 <gpio_pin_configure>
		if (err) {
   11ed8:	4604      	mov	r4, r0
   11eda:	b150      	cbz	r0, 11ef2 <dk_buttons_init+0x66>
   11edc:	493a      	ldr	r1, [pc, #232]	; (11fc8 <dk_buttons_init+0x13c>)
   11ede:	4b39      	ldr	r3, [pc, #228]	; (11fc4 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot configure button gpio");
   11ee0:	483b      	ldr	r0, [pc, #236]	; (11fd0 <dk_buttons_init+0x144>)
   11ee2:	1ac9      	subs	r1, r1, r3
   11ee4:	08c9      	lsrs	r1, r1, #3
   11ee6:	0189      	lsls	r1, r1, #6
   11ee8:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Cannot add work to workqueue");
   11eec:	f00b fef6 	bl	1dcdc <log_0>
		return err;
   11ef0:	e7ea      	b.n	11ec8 <dk_buttons_init+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11ef2:	3601      	adds	r6, #1
   11ef4:	2e04      	cmp	r6, #4
   11ef6:	f105 0508 	add.w	r5, r5, #8
   11efa:	d1d3      	bne.n	11ea4 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11efc:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   11efe:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   11f00:	f04f 0b01 	mov.w	fp, #1
   11f04:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 11fbc <dk_buttons_init+0x130>
		err = gpio_pin_interrupt_configure(button_devs[i],
   11f08:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   11f0c:	f85a 0b04 	ldr.w	r0, [sl], #4
   11f10:	791e      	ldrb	r6, [r3, #4]
   11f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   11f16:	4631      	mov	r1, r6
   11f18:	f00d ffe1 	bl	1fede <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   11f1c:	4604      	mov	r4, r0
   11f1e:	b140      	cbz	r0, 11f32 <dk_buttons_init+0xa6>
   11f20:	4929      	ldr	r1, [pc, #164]	; (11fc8 <dk_buttons_init+0x13c>)
   11f22:	4b28      	ldr	r3, [pc, #160]	; (11fc4 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot disable callbacks()");
   11f24:	482b      	ldr	r0, [pc, #172]	; (11fd4 <dk_buttons_init+0x148>)
   11f26:	1ac9      	subs	r1, r1, r3
   11f28:	08c9      	lsrs	r1, r1, #3
   11f2a:	0189      	lsls	r1, r1, #6
   11f2c:	f041 0101 	orr.w	r1, r1, #1
   11f30:	e7dc      	b.n	11eec <dk_buttons_init+0x60>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11f32:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   11f34:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11f38:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   11f3a:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11f3e:	d1e3      	bne.n	11f08 <dk_buttons_init+0x7c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11f40:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   11f42:	4e25      	ldr	r6, [pc, #148]	; (11fd8 <dk_buttons_init+0x14c>)
   11f44:	4b25      	ldr	r3, [pc, #148]	; (11fdc <dk_buttons_init+0x150>)
	callback->pin_mask = pin_mask;
   11f46:	e9c6 3901 	strd	r3, r9, [r6, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   11f4a:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   11f4e:	6883      	ldr	r3, [r0, #8]
   11f50:	69db      	ldr	r3, [r3, #28]
   11f52:	b16b      	cbz	r3, 11f70 <dk_buttons_init+0xe4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   11f54:	2201      	movs	r2, #1
   11f56:	4631      	mov	r1, r6
   11f58:	4798      	blx	r3
		if (err) {
   11f5a:	4604      	mov	r4, r0
   11f5c:	b158      	cbz	r0, 11f76 <dk_buttons_init+0xea>
   11f5e:	491a      	ldr	r1, [pc, #104]	; (11fc8 <dk_buttons_init+0x13c>)
   11f60:	4b18      	ldr	r3, [pc, #96]	; (11fc4 <dk_buttons_init+0x138>)
			LOG_ERR("Cannot add callback");
   11f62:	481f      	ldr	r0, [pc, #124]	; (11fe0 <dk_buttons_init+0x154>)
   11f64:	1ac9      	subs	r1, r1, r3
   11f66:	08c9      	lsrs	r1, r1, #3
   11f68:	0189      	lsls	r1, r1, #6
   11f6a:	f041 0101 	orr.w	r1, r1, #1
   11f6e:	e7bd      	b.n	11eec <dk_buttons_init+0x60>
		return -ENOTSUP;
   11f70:	f06f 0422 	mvn.w	r4, #34	; 0x22
   11f74:	e7f3      	b.n	11f5e <dk_buttons_init+0xd2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   11f76:	3501      	adds	r5, #1
   11f78:	2d04      	cmp	r5, #4
   11f7a:	d1e6      	bne.n	11f4a <dk_buttons_init+0xbe>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   11f7c:	4919      	ldr	r1, [pc, #100]	; (11fe4 <dk_buttons_init+0x158>)
   11f7e:	481a      	ldr	r0, [pc, #104]	; (11fe8 <dk_buttons_init+0x15c>)
   11f80:	f00e fc03 	bl	2078a <k_delayed_work_init>
	state = STATE_SCANNING;
   11f84:	2201      	movs	r2, #1
   11f86:	4b19      	ldr	r3, [pc, #100]	; (11fec <dk_buttons_init+0x160>)
   11f88:	4917      	ldr	r1, [pc, #92]	; (11fe8 <dk_buttons_init+0x15c>)
   11f8a:	701a      	strb	r2, [r3, #0]
   11f8c:	4818      	ldr	r0, [pc, #96]	; (11ff0 <dk_buttons_init+0x164>)
   11f8e:	2200      	movs	r2, #0
   11f90:	2300      	movs	r3, #0
   11f92:	f00a ffc1 	bl	1cf18 <k_delayed_work_submit_to_queue>
	if (err) {
   11f96:	4604      	mov	r4, r0
   11f98:	b140      	cbz	r0, 11fac <dk_buttons_init+0x120>
   11f9a:	490b      	ldr	r1, [pc, #44]	; (11fc8 <dk_buttons_init+0x13c>)
   11f9c:	4b09      	ldr	r3, [pc, #36]	; (11fc4 <dk_buttons_init+0x138>)
		LOG_ERR("Cannot add work to workqueue");
   11f9e:	4815      	ldr	r0, [pc, #84]	; (11ff4 <dk_buttons_init+0x168>)
   11fa0:	1ac9      	subs	r1, r1, r3
   11fa2:	08c9      	lsrs	r1, r1, #3
   11fa4:	0189      	lsls	r1, r1, #6
   11fa6:	f041 0101 	orr.w	r1, r1, #1
   11faa:	e79f      	b.n	11eec <dk_buttons_init+0x60>
	dk_read_buttons(NULL, NULL);
   11fac:	4601      	mov	r1, r0
   11fae:	f7ff ff5d 	bl	11e6c <dk_read_buttons>
	return 0;
   11fb2:	e789      	b.n	11ec8 <dk_buttons_init+0x3c>
   11fb4:	200209a0 	.word	0x200209a0
   11fb8:	000210a0 	.word	0x000210a0
   11fbc:	20020990 	.word	0x20020990
   11fc0:	200209a4 	.word	0x200209a4
   11fc4:	00020e10 	.word	0x00020e10
   11fc8:	00020e38 	.word	0x00020e38
   11fcc:	00021fa6 	.word	0x00021fa6
   11fd0:	00021fd8 	.word	0x00021fd8
   11fd4:	00021ff5 	.word	0x00021ff5
   11fd8:	200209c0 	.word	0x200209c0
   11fdc:	00011c45 	.word	0x00011c45
   11fe0:	00022010 	.word	0x00022010
   11fe4:	00011cd5 	.word	0x00011cd5
   11fe8:	20020308 	.word	0x20020308
   11fec:	20021c20 	.word	0x20021c20
   11ff0:	20020670 	.word	0x20020670
   11ff4:	00021f71 	.word	0x00021f71

00011ff8 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   11ff8:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   11ffa:	f240 2201 	movw	r2, #513	; 0x201
   11ffe:	2102      	movs	r1, #2
   12000:	2066      	movs	r0, #102	; 0x66
   12002:	f7fd f8f5 	bl	f1f0 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   12006:	4b05      	ldr	r3, [pc, #20]	; (1201c <open_socket+0x24>)
   12008:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   1200a:	3001      	adds	r0, #1
   1200c:	d104      	bne.n	12018 <open_socket+0x20>
		return -errno;
   1200e:	f00d ff89 	bl	1ff24 <z_errno>
   12012:	6800      	ldr	r0, [r0, #0]
   12014:	4240      	negs	r0, r0
	}

	return 0;
}
   12016:	bd08      	pop	{r3, pc}
	return 0;
   12018:	2000      	movs	r0, #0
   1201a:	e7fc      	b.n	12016 <open_socket+0x1e>
   1201c:	200209dc 	.word	0x200209dc

00012020 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   12020:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   12022:	4d17      	ldr	r5, [pc, #92]	; (12080 <at_cmd_driver_init+0x60>)
{
   12024:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   12026:	782b      	ldrb	r3, [r5, #0]
   12028:	bb43      	cbnz	r3, 1207c <at_cmd_driver_init+0x5c>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   1202a:	f7ff ffe5 	bl	11ff8 <open_socket>
	if (err) {
   1202e:	4604      	mov	r4, r0
   12030:	b168      	cbz	r0, 1204e <at_cmd_driver_init+0x2e>
   12032:	4a14      	ldr	r2, [pc, #80]	; (12084 <at_cmd_driver_init+0x64>)
   12034:	4b14      	ldr	r3, [pc, #80]	; (12088 <at_cmd_driver_init+0x68>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   12036:	4601      	mov	r1, r0
   12038:	1ad2      	subs	r2, r2, r3
   1203a:	08d2      	lsrs	r2, r2, #3
   1203c:	0192      	lsls	r2, r2, #6
   1203e:	4813      	ldr	r0, [pc, #76]	; (1208c <at_cmd_driver_init+0x6c>)
   12040:	f042 0201 	orr.w	r2, r2, #1
   12044:	f00b fe59 	bl	1dcfa <log_1>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   12048:	4620      	mov	r0, r4
   1204a:	b009      	add	sp, #36	; 0x24
   1204c:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1204e:	2200      	movs	r2, #0
   12050:	2300      	movs	r3, #0
   12052:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12056:	230a      	movs	r3, #10
   12058:	e9cd 0000 	strd	r0, r0, [sp]
   1205c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   12060:	9004      	str	r0, [sp, #16]
   12062:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12066:	4b0a      	ldr	r3, [pc, #40]	; (12090 <at_cmd_driver_init+0x70>)
   12068:	490a      	ldr	r1, [pc, #40]	; (12094 <at_cmd_driver_init+0x74>)
   1206a:	480b      	ldr	r0, [pc, #44]	; (12098 <at_cmd_driver_init+0x78>)
   1206c:	f00a fea2 	bl	1cdb4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   12070:	490a      	ldr	r1, [pc, #40]	; (1209c <at_cmd_driver_init+0x7c>)
   12072:	f00e fb29 	bl	206c8 <z_impl_k_thread_name_set>
	initialized = true;
   12076:	2301      	movs	r3, #1
   12078:	702b      	strb	r3, [r5, #0]
	return 0;
   1207a:	e7e5      	b.n	12048 <at_cmd_driver_init+0x28>
		return 0;
   1207c:	2400      	movs	r4, #0
   1207e:	e7e3      	b.n	12048 <at_cmd_driver_init+0x28>
   12080:	200226ad 	.word	0x200226ad
   12084:	00020e10 	.word	0x00020e10
   12088:	00020e10 	.word	0x00020e10
   1208c:	00022038 	.word	0x00022038
   12090:	000121c1 	.word	0x000121c1
   12094:	20023b30 	.word	0x20023b30
   12098:	20020338 	.word	0x20020338
   1209c:	0002205a 	.word	0x0002205a

000120a0 <complete_cmd>:
{
   120a0:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   120a2:	4c08      	ldr	r4, [pc, #32]	; (120c4 <complete_cmd+0x24>)
   120a4:	f04f 32ff 	mov.w	r2, #4294967295
   120a8:	f04f 33ff 	mov.w	r3, #4294967295
   120ac:	4620      	mov	r0, r4
   120ae:	f00a f995 	bl	1c3dc <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   120b2:	2200      	movs	r2, #0
   120b4:	4b04      	ldr	r3, [pc, #16]	; (120c8 <complete_cmd+0x28>)
   120b6:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   120b8:	4620      	mov	r0, r4
}
   120ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   120be:	f00a ba05 	b.w	1c4cc <z_impl_k_mutex_unlock>
   120c2:	bf00      	nop
   120c4:	20020118 	.word	0x20020118
   120c8:	200209e0 	.word	0x200209e0

000120cc <load_cmd_and_write>:
{
   120cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   120d0:	b086      	sub	sp, #24
		if (current_cmd.cmd != NULL ||
   120d2:	4e32      	ldr	r6, [pc, #200]	; (1219c <load_cmd_and_write+0xd0>)
	return z_impl_k_mutex_lock(mutex, timeout);
   120d4:	f04f 33ff 	mov.w	r3, #4294967295
   120d8:	4637      	mov	r7, r6
   120da:	f04f 32ff 	mov.w	r2, #4294967295
   120de:	4830      	ldr	r0, [pc, #192]	; (121a0 <load_cmd_and_write+0xd4>)
   120e0:	f00a f97c 	bl	1c3dc <z_impl_k_mutex_lock>
   120e4:	4d2f      	ldr	r5, [pc, #188]	; (121a4 <load_cmd_and_write+0xd8>)
   120e6:	4b30      	ldr	r3, [pc, #192]	; (121a8 <load_cmd_and_write+0xdc>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   120e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 121bc <load_cmd_and_write+0xf0>
   120ec:	1aed      	subs	r5, r5, r3
   120ee:	08ed      	lsrs	r5, r5, #3
   120f0:	6833      	ldr	r3, [r6, #0]
   120f2:	2b00      	cmp	r3, #0
   120f4:	d14b      	bne.n	1218e <load_cmd_and_write+0xc2>
   120f6:	2200      	movs	r2, #0
   120f8:	2300      	movs	r3, #0
   120fa:	4631      	mov	r1, r6
   120fc:	4640      	mov	r0, r8
   120fe:	f00a f90f 	bl	1c320 <z_impl_k_msgq_get>
   12102:	4604      	mov	r4, r0
   12104:	2800      	cmp	r0, #0
   12106:	d142      	bne.n	1218e <load_cmd_and_write+0xc2>
		ret = at_write(current_cmd.cmd);
   12108:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   1210a:	4608      	mov	r0, r1
   1210c:	9103      	str	r1, [sp, #12]
   1210e:	f00c fb90 	bl	1e832 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   12112:	4b26      	ldr	r3, [pc, #152]	; (121ac <load_cmd_and_write+0xe0>)
	int bytes_to_send = strlen(cmd);
   12114:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   12116:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   12118:	9903      	ldr	r1, [sp, #12]
   1211a:	4623      	mov	r3, r4
   1211c:	e9cd 4400 	strd	r4, r4, [sp]
   12120:	9202      	str	r2, [sp, #8]
   12122:	f00c f901 	bl	1e328 <z_impl_zsock_sendto>
   12126:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   12128:	1c48      	adds	r0, r1, #1
   1212a:	9a02      	ldr	r2, [sp, #8]
   1212c:	d126      	bne.n	1217c <load_cmd_and_write+0xb0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   1212e:	f00d fef9 	bl	1ff24 <z_errno>
   12132:	01ac      	lsls	r4, r5, #6
   12134:	f044 0401 	orr.w	r4, r4, #1
   12138:	4622      	mov	r2, r4
   1213a:	6801      	ldr	r1, [r0, #0]
   1213c:	481c      	ldr	r0, [pc, #112]	; (121b0 <load_cmd_and_write+0xe4>)
   1213e:	f00b fddc 	bl	1dcfa <log_1>
		return -errno;
   12142:	f00d feef 	bl	1ff24 <z_errno>
   12146:	6804      	ldr	r4, [r0, #0]
   12148:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   1214a:	7c3b      	ldrb	r3, [r7, #16]
   1214c:	07da      	lsls	r2, r3, #31
   1214e:	d502      	bpl.n	12156 <load_cmd_and_write+0x8a>
			k_free(current_cmd.cmd);
   12150:	6838      	ldr	r0, [r7, #0]
   12152:	f00e fce7 	bl	20b24 <k_free>
		if (ret != 0) {
   12156:	b1d4      	cbz	r4, 1218e <load_cmd_and_write+0xc2>
			resp.state = AT_CMD_ERROR_WRITE;
   12158:	2305      	movs	r3, #5
   1215a:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   1215e:	7c3b      	ldrb	r3, [r7, #16]
			resp.code = ret;
   12160:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   12162:	079b      	lsls	r3, r3, #30
   12164:	d507      	bpl.n	12176 <load_cmd_and_write+0xaa>
	return z_impl_k_msgq_put(msgq, data, timeout);
   12166:	f04f 32ff 	mov.w	r2, #4294967295
   1216a:	f04f 33ff 	mov.w	r3, #4294967295
   1216e:	4811      	ldr	r0, [pc, #68]	; (121b4 <load_cmd_and_write+0xe8>)
   12170:	a904      	add	r1, sp, #16
   12172:	f00a f881 	bl	1c278 <z_impl_k_msgq_put>
			complete_cmd();
   12176:	f7ff ff93 	bl	120a0 <complete_cmd>
	} while (ret != 0);
   1217a:	e7b9      	b.n	120f0 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   1217c:	428a      	cmp	r2, r1
   1217e:	d0e4      	beq.n	1214a <load_cmd_and_write+0x7e>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   12180:	01ab      	lsls	r3, r5, #6
   12182:	480d      	ldr	r0, [pc, #52]	; (121b8 <load_cmd_and_write+0xec>)
   12184:	f043 0302 	orr.w	r3, r3, #2
   12188:	f00b fdce 	bl	1dd28 <log_2>
   1218c:	e7dd      	b.n	1214a <load_cmd_and_write+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   1218e:	4804      	ldr	r0, [pc, #16]	; (121a0 <load_cmd_and_write+0xd4>)
   12190:	f00a f99c 	bl	1c4cc <z_impl_k_mutex_unlock>
}
   12194:	b006      	add	sp, #24
   12196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1219a:	bf00      	nop
   1219c:	200209e0 	.word	0x200209e0
   121a0:	20020118 	.word	0x20020118
   121a4:	00020e10 	.word	0x00020e10
   121a8:	00020e10 	.word	0x00020e10
   121ac:	200209dc 	.word	0x200209dc
   121b0:	0002206f 	.word	0x0002206f
   121b4:	200201a4 	.word	0x200201a4
   121b8:	00022092 	.word	0x00022092
   121bc:	2002017c 	.word	0x2002017c

000121c0 <socket_thread_fn>:
{
   121c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   121c4:	f8df 9260 	ldr.w	r9, [pc, #608]	; 12428 <socket_thread_fn+0x268>
   121c8:	4f83      	ldr	r7, [pc, #524]	; (123d8 <socket_thread_fn+0x218>)
   121ca:	46ca      	mov	sl, r9
   121cc:	4b83      	ldr	r3, [pc, #524]	; (123dc <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   121ce:	4e84      	ldr	r6, [pc, #528]	; (123e0 <socket_thread_fn+0x220>)
   121d0:	1aff      	subs	r7, r7, r3
   121d2:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   121d4:	f7ff ff7a 	bl	120cc <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   121d8:	f8d9 0000 	ldr.w	r0, [r9]
   121dc:	2500      	movs	r5, #0
   121de:	f640 228c 	movw	r2, #2700	; 0xa8c
   121e2:	462b      	mov	r3, r5
   121e4:	e9cd 5500 	strd	r5, r5, [sp]
   121e8:	497d      	ldr	r1, [pc, #500]	; (123e0 <socket_thread_fn+0x220>)
   121ea:	f00c f8d0 	bl	1e38e <z_impl_zsock_recvfrom>
		ret.code  = 0;
   121ee:	4c7d      	ldr	r4, [pc, #500]	; (123e4 <socket_thread_fn+0x224>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   121f0:	f8df b238 	ldr.w	fp, [pc, #568]	; 1242c <socket_thread_fn+0x26c>
		if (bytes_read < 0) {
   121f4:	42a8      	cmp	r0, r5
   121f6:	4680      	mov	r8, r0
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   121f8:	f8cb 0000 	str.w	r0, [fp]
		ret.code  = 0;
   121fc:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   121fe:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   12200:	da6a      	bge.n	122d8 <socket_thread_fn+0x118>
			if (errno == EHOSTDOWN) {
   12202:	f00d fe8f 	bl	1ff24 <z_errno>
   12206:	6803      	ldr	r3, [r0, #0]
   12208:	2b43      	cmp	r3, #67	; 0x43
   1220a:	d122      	bne.n	12252 <socket_thread_fn+0x92>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1220c:	2301      	movs	r3, #1
   1220e:	4c76      	ldr	r4, [pc, #472]	; (123e8 <socket_thread_fn+0x228>)
   12210:	e8d4 2fef 	ldaex	r2, [r4]
   12214:	e8c4 3fe1 	stlex	r1, r3, [r4]
   12218:	2900      	cmp	r1, #0
   1221a:	d1f9      	bne.n	12210 <socket_thread_fn+0x50>
				close(common_socket_fd);
   1221c:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   12220:	f00c f855 	bl	1e2ce <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   12224:	f7fe ffd6 	bl	111d4 <bsdlib_shutdown_wait>
   12228:	e8d4 3fef 	ldaex	r3, [r4]
   1222c:	e8c4 5fe2 	stlex	r2, r5, [r4]
   12230:	2a00      	cmp	r2, #0
   12232:	d1f9      	bne.n	12228 <socket_thread_fn+0x68>
				if (open_socket() != 0) {
   12234:	f7ff fee0 	bl	11ff8 <open_socket>
   12238:	2800      	cmp	r0, #0
   1223a:	d0cb      	beq.n	121d4 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   1223c:	f00d fe72 	bl	1ff24 <z_errno>
   12240:	01bc      	lsls	r4, r7, #6
   12242:	f044 0401 	orr.w	r4, r4, #1
   12246:	6801      	ldr	r1, [r0, #0]
   12248:	4622      	mov	r2, r4
   1224a:	4868      	ldr	r0, [pc, #416]	; (123ec <socket_thread_fn+0x22c>)
   1224c:	f00b fd55 	bl	1dcfa <log_1>
   12250:	e7c0      	b.n	121d4 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   12252:	01bd      	lsls	r5, r7, #6
   12254:	f8db 1000 	ldr.w	r1, [fp]
   12258:	4865      	ldr	r0, [pc, #404]	; (123f0 <socket_thread_fn+0x230>)
   1225a:	f045 0201 	orr.w	r2, r5, #1
   1225e:	f00b fd4c 	bl	1dcfa <log_1>
			if ((close(common_socket_fd) == 0) &&
   12262:	f8d9 0000 	ldr.w	r0, [r9]
   12266:	f00c f832 	bl	1e2ce <z_impl_zsock_close>
   1226a:	bb28      	cbnz	r0, 122b8 <socket_thread_fn+0xf8>
			    (open_socket() == 0)) {
   1226c:	f7ff fec4 	bl	11ff8 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   12270:	bb10      	cbnz	r0, 122b8 <socket_thread_fn+0xf8>
				LOG_INF("AT socket recovered");
   12272:	4860      	ldr	r0, [pc, #384]	; (123f4 <socket_thread_fn+0x234>)
   12274:	f045 0103 	orr.w	r1, r5, #3
   12278:	f00b fd30 	bl	1dcdc <log_0>
				ret.state = AT_CMD_ERROR_READ;
   1227c:	2306      	movs	r3, #6
   1227e:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   12280:	f00d fe50 	bl	1ff24 <z_errno>
   12284:	6803      	ldr	r3, [r0, #0]
   12286:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   12288:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   1228a:	4b5b      	ldr	r3, [pc, #364]	; (123f8 <socket_thread_fn+0x238>)
   1228c:	681a      	ldr	r2, [r3, #0]
   1228e:	b16a      	cbz	r2, 122ac <socket_thread_fn+0xec>
   12290:	7c1b      	ldrb	r3, [r3, #16]
   12292:	079b      	lsls	r3, r3, #30
   12294:	d50a      	bpl.n	122ac <socket_thread_fn+0xec>
		    current_cmd.flags & AT_CMD_SYNC &&
   12296:	7923      	ldrb	r3, [r4, #4]
   12298:	2b07      	cmp	r3, #7
   1229a:	d09b      	beq.n	121d4 <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   1229c:	f04f 32ff 	mov.w	r2, #4294967295
   122a0:	f04f 33ff 	mov.w	r3, #4294967295
   122a4:	494f      	ldr	r1, [pc, #316]	; (123e4 <socket_thread_fn+0x224>)
   122a6:	4855      	ldr	r0, [pc, #340]	; (123fc <socket_thread_fn+0x23c>)
   122a8:	f009 ffe6 	bl	1c278 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   122ac:	7923      	ldrb	r3, [r4, #4]
   122ae:	2b07      	cmp	r3, #7
   122b0:	d090      	beq.n	121d4 <socket_thread_fn+0x14>
			complete_cmd();
   122b2:	f7ff fef5 	bl	120a0 <complete_cmd>
   122b6:	e78d      	b.n	121d4 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   122b8:	f00d fe34 	bl	1ff24 <z_errno>
   122bc:	f045 0501 	orr.w	r5, r5, #1
   122c0:	6801      	ldr	r1, [r0, #0]
   122c2:	462a      	mov	r2, r5
   122c4:	484e      	ldr	r0, [pc, #312]	; (12400 <socket_thread_fn+0x240>)
   122c6:	f00b fd18 	bl	1dcfa <log_1>
			close(common_socket_fd);
   122ca:	f8da 0000 	ldr.w	r0, [sl]
}
   122ce:	b003      	add	sp, #12
   122d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122d4:	f00b bffb 	b.w	1e2ce <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   122d8:	d10a      	bne.n	122f0 <socket_thread_fn+0x130>
			LOG_ERR("AT message empty");
   122da:	01b9      	lsls	r1, r7, #6
   122dc:	4849      	ldr	r0, [pc, #292]	; (12404 <socket_thread_fn+0x244>)
   122de:	f041 0101 	orr.w	r1, r1, #1
   122e2:	f00b fcfb 	bl	1dcdc <log_0>
			ret.state = AT_CMD_ERROR_READ;
   122e6:	2306      	movs	r3, #6
   122e8:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   122ea:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   122ee:	e7cb      	b.n	12288 <socket_thread_fn+0xc8>
		} else if (buf[bytes_read - 1] != '\0') {
   122f0:	1833      	adds	r3, r6, r0
   122f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   122f6:	b153      	cbz	r3, 1230e <socket_thread_fn+0x14e>
			LOG_ERR("AT message too large for reception buffer or "
   122f8:	01b9      	lsls	r1, r7, #6
   122fa:	4843      	ldr	r0, [pc, #268]	; (12408 <socket_thread_fn+0x248>)
   122fc:	f041 0101 	orr.w	r1, r1, #1
   12300:	f00b fcec 	bl	1dcdc <log_0>
			ret.state = AT_CMD_ERROR_READ;
   12304:	2306      	movs	r3, #6
   12306:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   12308:	f06f 0336 	mvn.w	r3, #54	; 0x36
   1230c:	e7bc      	b.n	12288 <socket_thread_fn+0xc8>
	ret->state = AT_CMD_NOTIFICATION;
   1230e:	2307      	movs	r3, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   12310:	1f45      	subs	r5, r0, #5
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   12312:	483e      	ldr	r0, [pc, #248]	; (1240c <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   12314:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   12316:	f00c fa8c 	bl	1e832 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   1231a:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   1231c:	4602      	mov	r2, r0
   1231e:	493b      	ldr	r1, [pc, #236]	; (1240c <socket_thread_fn+0x24c>)
   12320:	4628      	mov	r0, r5
   12322:	f00c fa99 	bl	1e858 <strncmp>
		if (match) {
   12326:	b9c0      	cbnz	r0, 1235a <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   12328:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1232a:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   1232c:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   1232e:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   12330:	3201      	adds	r2, #1
   12332:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   12334:	4d30      	ldr	r5, [pc, #192]	; (123f8 <socket_thread_fn+0x238>)
   12336:	682b      	ldr	r3, [r5, #0]
   12338:	2b00      	cmp	r3, #0
   1233a:	d043      	beq.n	123c4 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   1233c:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   1233e:	2800      	cmp	r0, #0
   12340:	d040      	beq.n	123c4 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   12342:	7923      	ldrb	r3, [r4, #4]
   12344:	2b07      	cmp	r3, #7
   12346:	d12e      	bne.n	123a6 <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   12348:	4b31      	ldr	r3, [pc, #196]	; (12410 <socket_thread_fn+0x250>)
   1234a:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   1234c:	b913      	cbnz	r3, 12354 <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   1234e:	68ab      	ldr	r3, [r5, #8]
   12350:	2b00      	cmp	r3, #0
   12352:	d09a      	beq.n	1228a <socket_thread_fn+0xca>
			current_cmd.callback(buf);
   12354:	4630      	mov	r0, r6
   12356:	4798      	blx	r3
   12358:	e797      	b.n	1228a <socket_thread_fn+0xca>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   1235a:	4630      	mov	r0, r6
   1235c:	492d      	ldr	r1, [pc, #180]	; (12414 <socket_thread_fn+0x254>)
   1235e:	f00c fa27 	bl	1e7b0 <strstr>
		if (tmpstr) {
   12362:	4605      	mov	r5, r0
   12364:	b128      	cbz	r0, 12372 <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   12366:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   12368:	482b      	ldr	r0, [pc, #172]	; (12418 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   1236a:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   1236c:	f00c f90b 	bl	1e586 <atoi>
   12370:	e7db      	b.n	1232a <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   12372:	4630      	mov	r0, r6
   12374:	4929      	ldr	r1, [pc, #164]	; (1241c <socket_thread_fn+0x25c>)
   12376:	f00c fa1b 	bl	1e7b0 <strstr>
		if (tmpstr) {
   1237a:	4605      	mov	r5, r0
   1237c:	b108      	cbz	r0, 12382 <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   1237e:	2303      	movs	r3, #3
   12380:	e7f2      	b.n	12368 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   12382:	4827      	ldr	r0, [pc, #156]	; (12420 <socket_thread_fn+0x260>)
   12384:	f00c fa55 	bl	1e832 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   12388:	f1a8 0508 	sub.w	r5, r8, #8
   1238c:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   1238e:	4602      	mov	r2, r0
   12390:	4923      	ldr	r1, [pc, #140]	; (12420 <socket_thread_fn+0x260>)
   12392:	4628      	mov	r0, r5
   12394:	f00c fa60 	bl	1e858 <strncmp>
		if (match) {
   12398:	b9c0      	cbnz	r0, 123cc <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   1239a:	2301      	movs	r3, #1
   1239c:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   1239e:	f06f 0307 	mvn.w	r3, #7
   123a2:	6023      	str	r3, [r4, #0]
			break;
   123a4:	e7c2      	b.n	1232c <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   123a6:	68eb      	ldr	r3, [r5, #12]
   123a8:	429a      	cmp	r2, r3
   123aa:	d908      	bls.n	123be <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   123ac:	01b9      	lsls	r1, r7, #6
   123ae:	481d      	ldr	r0, [pc, #116]	; (12424 <socket_thread_fn+0x264>)
   123b0:	f041 0101 	orr.w	r1, r1, #1
   123b4:	f00b fc92 	bl	1dcdc <log_0>
				ret.code  = -EMSGSIZE;
   123b8:	f06f 0323 	mvn.w	r3, #35	; 0x23
   123bc:	e764      	b.n	12288 <socket_thread_fn+0xc8>
			memcpy(current_cmd.resp, buf, payload_len);
   123be:	4631      	mov	r1, r6
   123c0:	f00c fa69 	bl	1e896 <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   123c4:	7923      	ldrb	r3, [r4, #4]
   123c6:	2b07      	cmp	r3, #7
   123c8:	d1c1      	bne.n	1234e <socket_thread_fn+0x18e>
   123ca:	e7bd      	b.n	12348 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   123cc:	4630      	mov	r0, r6
   123ce:	f00c fa30 	bl	1e832 <strlen>
   123d2:	1c42      	adds	r2, r0, #1
   123d4:	e7ae      	b.n	12334 <socket_thread_fn+0x174>
   123d6:	bf00      	nop
   123d8:	00020e10 	.word	0x00020e10
   123dc:	00020e10 	.word	0x00020e10
   123e0:	20021c21 	.word	0x20021c21
   123e4:	200209f8 	.word	0x200209f8
   123e8:	20020a00 	.word	0x20020a00
   123ec:	000220c4 	.word	0x000220c4
   123f0:	000220f8 	.word	0x000220f8
   123f4:	0002211a 	.word	0x0002211a
   123f8:	200209e0 	.word	0x200209e0
   123fc:	200201a4 	.word	0x200201a4
   12400:	0002212e 	.word	0x0002212e
   12404:	00022165 	.word	0x00022165
   12408:	00022176 	.word	0x00022176
   1240c:	000221c1 	.word	0x000221c1
   12410:	200209f4 	.word	0x200209f4
   12414:	000221c6 	.word	0x000221c6
   12418:	20021c2c 	.word	0x20021c2c
   1241c:	000221d2 	.word	0x000221d2
   12420:	000221de 	.word	0x000221de
   12424:	000221e6 	.word	0x000221e6
   12428:	200209dc 	.word	0x200209dc
   1242c:	200209d8 	.word	0x200209d8

00012430 <at_cmd_write>:
{
   12430:	b530      	push	{r4, r5, lr}
   12432:	461c      	mov	r4, r3
   12434:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12436:	4b32      	ldr	r3, [pc, #200]	; (12500 <at_cmd_write+0xd0>)
   12438:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   1243c:	2b01      	cmp	r3, #1
   1243e:	d05c      	beq.n	124fa <at_cmd_write+0xca>
	if (cmd == NULL) {
   12440:	b160      	cbz	r0, 1245c <at_cmd_write+0x2c>
   12442:	1e45      	subs	r5, r0, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   12444:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   12448:	b9d3      	cbnz	r3, 12480 <at_cmd_write+0x50>
   1244a:	492e      	ldr	r1, [pc, #184]	; (12504 <at_cmd_write+0xd4>)
   1244c:	4b2e      	ldr	r3, [pc, #184]	; (12508 <at_cmd_write+0xd8>)
		LOG_ERR("Invalid command");
   1244e:	482f      	ldr	r0, [pc, #188]	; (1250c <at_cmd_write+0xdc>)
   12450:	1ac9      	subs	r1, r1, r3
   12452:	08c9      	lsrs	r1, r1, #3
   12454:	0189      	lsls	r1, r1, #6
   12456:	f041 0101 	orr.w	r1, r1, #1
   1245a:	e007      	b.n	1246c <at_cmd_write+0x3c>
   1245c:	4929      	ldr	r1, [pc, #164]	; (12504 <at_cmd_write+0xd4>)
   1245e:	4b2a      	ldr	r3, [pc, #168]	; (12508 <at_cmd_write+0xd8>)
		LOG_ERR("cmd is NULL");
   12460:	482b      	ldr	r0, [pc, #172]	; (12510 <at_cmd_write+0xe0>)
   12462:	1ac9      	subs	r1, r1, r3
   12464:	08c9      	lsrs	r1, r1, #3
   12466:	0189      	lsls	r1, r1, #6
   12468:	f041 0101 	orr.w	r1, r1, #1
   1246c:	f00b fc36 	bl	1dcdc <log_0>
		if (state) {
   12470:	b91c      	cbnz	r4, 1247a <at_cmd_write+0x4a>
		return -EINVAL;
   12472:	f06f 0015 	mvn.w	r0, #21
}
   12476:	b009      	add	sp, #36	; 0x24
   12478:	bd30      	pop	{r4, r5, pc}
			*state = AT_CMD_ERROR_QUEUE;
   1247a:	2304      	movs	r3, #4
   1247c:	7023      	strb	r3, [r4, #0]
   1247e:	e7f8      	b.n	12472 <at_cmd_write+0x42>
		if (*c > ' ') {
   12480:	2b20      	cmp	r3, #32
   12482:	d9df      	bls.n	12444 <at_cmd_write+0x14>
	command.callback = NULL;
   12484:	2300      	movs	r3, #0
   12486:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   12488:	2302      	movs	r3, #2
	command.resp = buf;
   1248a:	e9cd 0103 	strd	r0, r1, [sp, #12]
	command.resp_size = buf_len;
   1248e:	9206      	str	r2, [sp, #24]
	command.flags = AT_CMD_SYNC;
   12490:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   12494:	f04f 32ff 	mov.w	r2, #4294967295
   12498:	f04f 33ff 	mov.w	r3, #4294967295
   1249c:	481d      	ldr	r0, [pc, #116]	; (12514 <at_cmd_write+0xe4>)
   1249e:	f009 ff9d 	bl	1c3dc <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   124a2:	f04f 32ff 	mov.w	r2, #4294967295
   124a6:	a903      	add	r1, sp, #12
   124a8:	f04f 33ff 	mov.w	r3, #4294967295
   124ac:	481a      	ldr	r0, [pc, #104]	; (12518 <at_cmd_write+0xe8>)
   124ae:	f009 fee3 	bl	1c278 <z_impl_k_msgq_put>
   124b2:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   124b4:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   124b6:	b170      	cbz	r0, 124d6 <at_cmd_write+0xa6>
   124b8:	4a12      	ldr	r2, [pc, #72]	; (12504 <at_cmd_write+0xd4>)
   124ba:	4b13      	ldr	r3, [pc, #76]	; (12508 <at_cmd_write+0xd8>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   124bc:	4817      	ldr	r0, [pc, #92]	; (1251c <at_cmd_write+0xec>)
   124be:	1ad2      	subs	r2, r2, r3
   124c0:	08d2      	lsrs	r2, r2, #3
   124c2:	0192      	lsls	r2, r2, #6
   124c4:	f042 0201 	orr.w	r2, r2, #1
   124c8:	f00b fc17 	bl	1dcfa <log_1>
		if (state) {
   124cc:	b10c      	cbz	r4, 124d2 <at_cmd_write+0xa2>
			*state = AT_CMD_ERROR_QUEUE;
   124ce:	2304      	movs	r3, #4
		*state = ret.state;
   124d0:	7023      	strb	r3, [r4, #0]
	return ret.code;
   124d2:	9801      	ldr	r0, [sp, #4]
   124d4:	e7cf      	b.n	12476 <at_cmd_write+0x46>
	load_cmd_and_write();
   124d6:	f7ff fdf9 	bl	120cc <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   124da:	f04f 32ff 	mov.w	r2, #4294967295
   124de:	f04f 33ff 	mov.w	r3, #4294967295
   124e2:	a901      	add	r1, sp, #4
   124e4:	480e      	ldr	r0, [pc, #56]	; (12520 <at_cmd_write+0xf0>)
   124e6:	f009 ff1b 	bl	1c320 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   124ea:	480a      	ldr	r0, [pc, #40]	; (12514 <at_cmd_write+0xe4>)
   124ec:	f009 ffee 	bl	1c4cc <z_impl_k_mutex_unlock>
	if (state) {
   124f0:	2c00      	cmp	r4, #0
   124f2:	d0ee      	beq.n	124d2 <at_cmd_write+0xa2>
		*state = ret.state;
   124f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   124f8:	e7ea      	b.n	124d0 <at_cmd_write+0xa0>
		return -EHOSTDOWN;
   124fa:	f06f 0042 	mvn.w	r0, #66	; 0x42
   124fe:	e7ba      	b.n	12476 <at_cmd_write+0x46>
   12500:	20020a00 	.word	0x20020a00
   12504:	00020e10 	.word	0x00020e10
   12508:	00020e10 	.word	0x00020e10
   1250c:	00022213 	.word	0x00022213
   12510:	00022207 	.word	0x00022207
   12514:	20020154 	.word	0x20020154
   12518:	2002017c 	.word	0x2002017c
   1251c:	00022223 	.word	0x00022223
   12520:	200201a4 	.word	0x200201a4

00012524 <at_cmd_set_notification_handler>:
{
   12524:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   12526:	4c09      	ldr	r4, [pc, #36]	; (1254c <at_cmd_set_notification_handler+0x28>)
{
   12528:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   1252a:	6821      	ldr	r1, [r4, #0]
   1252c:	b159      	cbz	r1, 12546 <at_cmd_set_notification_handler+0x22>
   1252e:	4281      	cmp	r1, r0
   12530:	d009      	beq.n	12546 <at_cmd_set_notification_handler+0x22>
   12532:	4a07      	ldr	r2, [pc, #28]	; (12550 <at_cmd_set_notification_handler+0x2c>)
   12534:	4b07      	ldr	r3, [pc, #28]	; (12554 <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   12536:	4808      	ldr	r0, [pc, #32]	; (12558 <at_cmd_set_notification_handler+0x34>)
   12538:	1ad2      	subs	r2, r2, r3
   1253a:	08d2      	lsrs	r2, r2, #3
   1253c:	0192      	lsls	r2, r2, #6
   1253e:	f042 0202 	orr.w	r2, r2, #2
   12542:	f00b fbda 	bl	1dcfa <log_1>
	notification_handler = handler;
   12546:	6025      	str	r5, [r4, #0]
}
   12548:	bd38      	pop	{r3, r4, r5, pc}
   1254a:	bf00      	nop
   1254c:	200209f4 	.word	0x200209f4
   12550:	00020e10 	.word	0x00020e10
   12554:	00020e10 	.word	0x00020e10
   12558:	00022243 	.word	0x00022243

0001255c <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1255c:	4b0f      	ldr	r3, [pc, #60]	; (1259c <find_node+0x40>)
{
   1255e:	b570      	push	{r4, r5, r6, lr}
   12560:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12562:	6818      	ldr	r0, [r3, #0]
   12564:	b170      	cbz	r0, 12584 <find_node+0x28>
   12566:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12568:	4603      	mov	r3, r0
   1256a:	2d00      	cmp	r5, #0
   1256c:	4628      	mov	r0, r5
   1256e:	bf38      	it	cc
   12570:	2000      	movcc	r0, #0
   12572:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   12574:	685e      	ldr	r6, [r3, #4]
   12576:	428e      	cmp	r6, r1
   12578:	d105      	bne.n	12586 <find_node+0x2a>
   1257a:	689e      	ldr	r6, [r3, #8]
   1257c:	4296      	cmp	r6, r2
   1257e:	d102      	bne.n	12586 <find_node+0x2a>
			*prev_out = prev;
			return curr;
   12580:	4618      	mov	r0, r3
			*prev_out = prev;
   12582:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   12584:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12586:	2800      	cmp	r0, #0
   12588:	d0fc      	beq.n	12584 <find_node+0x28>
	return node->next;
   1258a:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1258c:	461d      	mov	r5, r3
   1258e:	2e00      	cmp	r6, #0
   12590:	4603      	mov	r3, r0
   12592:	4630      	mov	r0, r6
   12594:	bf38      	it	cc
   12596:	2000      	movcc	r0, #0
   12598:	e7ec      	b.n	12574 <find_node+0x18>
   1259a:	bf00      	nop
   1259c:	20020a04 	.word	0x20020a04

000125a0 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   125a0:	4a0c      	ldr	r2, [pc, #48]	; (125d4 <module_init+0x34>)
{
   125a2:	b508      	push	{r3, lr}
	if (initialized) {
   125a4:	7813      	ldrb	r3, [r2, #0]
   125a6:	b15b      	cbz	r3, 125c0 <module_init+0x20>
   125a8:	490b      	ldr	r1, [pc, #44]	; (125d8 <module_init+0x38>)
   125aa:	4b0c      	ldr	r3, [pc, #48]	; (125dc <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   125ac:	480c      	ldr	r0, [pc, #48]	; (125e0 <module_init+0x40>)
   125ae:	1ac9      	subs	r1, r1, r3
   125b0:	08c9      	lsrs	r1, r1, #3
   125b2:	0189      	lsls	r1, r1, #6
   125b4:	f041 0102 	orr.w	r1, r1, #2
   125b8:	f00b fb90 	bl	1dcdc <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   125bc:	2000      	movs	r0, #0
   125be:	bd08      	pop	{r3, pc}
	initialized = true;
   125c0:	2101      	movs	r1, #1
   125c2:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   125c4:	4a07      	ldr	r2, [pc, #28]	; (125e4 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   125c6:	4808      	ldr	r0, [pc, #32]	; (125e8 <module_init+0x48>)
	list->tail = NULL;
   125c8:	e9c2 3300 	strd	r3, r3, [r2]
   125cc:	f7ff ffaa 	bl	12524 <at_cmd_set_notification_handler>
	return 0;
   125d0:	e7f4      	b.n	125bc <module_init+0x1c>
   125d2:	bf00      	nop
   125d4:	200226ae 	.word	0x200226ae
   125d8:	00020e20 	.word	0x00020e20
   125dc:	00020e10 	.word	0x00020e10
   125e0:	00022273 	.word	0x00022273
   125e4:	20020a04 	.word	0x20020a04
   125e8:	000125f9 	.word	0x000125f9

000125ec <k_mutex_unlock.constprop.0>:
   125ec:	4801      	ldr	r0, [pc, #4]	; (125f4 <k_mutex_unlock.constprop.0+0x8>)
   125ee:	f009 bf6d 	b.w	1c4cc <z_impl_k_mutex_unlock>
   125f2:	bf00      	nop
   125f4:	20020140 	.word	0x20020140

000125f8 <notif_dispatch>:
{
   125f8:	b538      	push	{r3, r4, r5, lr}
   125fa:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   125fc:	f04f 33ff 	mov.w	r3, #4294967295
   12600:	f04f 32ff 	mov.w	r2, #4294967295
   12604:	480d      	ldr	r0, [pc, #52]	; (1263c <notif_dispatch+0x44>)
   12606:	f009 fee9 	bl	1c3dc <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   1260a:	4b0d      	ldr	r3, [pc, #52]	; (12640 <notif_dispatch+0x48>)
   1260c:	681b      	ldr	r3, [r3, #0]
   1260e:	b91b      	cbnz	r3, 12618 <notif_dispatch+0x20>
}
   12610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   12614:	f7ff bfea 	b.w	125ec <k_mutex_unlock.constprop.0>
	return node->next;
   12618:	681c      	ldr	r4, [r3, #0]
   1261a:	2c00      	cmp	r4, #0
   1261c:	bf38      	it	cc
   1261e:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   12620:	4629      	mov	r1, r5
   12622:	689a      	ldr	r2, [r3, #8]
   12624:	6858      	ldr	r0, [r3, #4]
   12626:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   12628:	2c00      	cmp	r4, #0
   1262a:	d0f1      	beq.n	12610 <notif_dispatch+0x18>
   1262c:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1262e:	4623      	mov	r3, r4
   12630:	2a00      	cmp	r2, #0
   12632:	bf38      	it	cc
   12634:	2200      	movcc	r2, #0
   12636:	4614      	mov	r4, r2
   12638:	e7f2      	b.n	12620 <notif_dispatch+0x28>
   1263a:	bf00      	nop
   1263c:	20020140 	.word	0x20020140
   12640:	20020a04 	.word	0x20020a04

00012644 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   12644:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12646:	4606      	mov	r6, r0
	if (handler == NULL) {
   12648:	460c      	mov	r4, r1
   1264a:	b979      	cbnz	r1, 1266c <at_notif_register_handler+0x28>
   1264c:	4a1e      	ldr	r2, [pc, #120]	; (126c8 <at_notif_register_handler+0x84>)
   1264e:	4b1f      	ldr	r3, [pc, #124]	; (126cc <at_notif_register_handler+0x88>)
   12650:	1a9b      	subs	r3, r3, r2
   12652:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   12654:	019b      	lsls	r3, r3, #6
   12656:	460a      	mov	r2, r1
   12658:	f043 0301 	orr.w	r3, r3, #1
   1265c:	4601      	mov	r1, r0
   1265e:	481c      	ldr	r0, [pc, #112]	; (126d0 <at_notif_register_handler+0x8c>)
   12660:	f00b fb62 	bl	1dd28 <log_2>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   12664:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   12668:	b002      	add	sp, #8
   1266a:	bd70      	pop	{r4, r5, r6, pc}
   1266c:	f04f 32ff 	mov.w	r2, #4294967295
   12670:	f04f 33ff 	mov.w	r3, #4294967295
   12674:	4817      	ldr	r0, [pc, #92]	; (126d4 <at_notif_register_handler+0x90>)
   12676:	f009 feb1 	bl	1c3dc <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   1267a:	4622      	mov	r2, r4
   1267c:	4631      	mov	r1, r6
   1267e:	a801      	add	r0, sp, #4
   12680:	f7ff ff6c 	bl	1255c <find_node>
   12684:	4605      	mov	r5, r0
   12686:	b118      	cbz	r0, 12690 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   12688:	f7ff ffb0 	bl	125ec <k_mutex_unlock.constprop.0>
		return 0;
   1268c:	2000      	movs	r0, #0
   1268e:	e7eb      	b.n	12668 <at_notif_register_handler+0x24>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   12690:	200c      	movs	r0, #12
   12692:	f00a fee3 	bl	1d45c <k_malloc>
   12696:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   12698:	b920      	cbnz	r0, 126a4 <at_notif_register_handler+0x60>
		k_mutex_unlock(&list_mtx);
   1269a:	f7ff ffa7 	bl	125ec <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   1269e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   126a2:	e7e1      	b.n	12668 <at_notif_register_handler+0x24>
	memset(to_ins, 0, sizeof(struct notif_handler));
   126a4:	220c      	movs	r2, #12
   126a6:	4629      	mov	r1, r5
   126a8:	f00c f920 	bl	1e8ec <memset>
	to_ins->ctx     = ctx;
   126ac:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   126ae:	4a0a      	ldr	r2, [pc, #40]	; (126d8 <at_notif_register_handler+0x94>)
	parent->next = child;
   126b0:	601d      	str	r5, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   126b2:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   126b4:	e9c3 6401 	strd	r6, r4, [r3, #4]
   126b8:	b911      	cbnz	r1, 126c0 <at_notif_register_handler+0x7c>
	list->head = node;
   126ba:	e9c2 3300 	strd	r3, r3, [r2]
}
   126be:	e7e3      	b.n	12688 <at_notif_register_handler+0x44>
	parent->next = child;
   126c0:	600b      	str	r3, [r1, #0]
	list->tail = node;
   126c2:	6053      	str	r3, [r2, #4]
}
   126c4:	e7e0      	b.n	12688 <at_notif_register_handler+0x44>
   126c6:	bf00      	nop
   126c8:	00020e10 	.word	0x00020e10
   126cc:	00020e20 	.word	0x00020e20
   126d0:	00022296 	.word	0x00022296
   126d4:	20020140 	.word	0x20020140
   126d8:	20020a04 	.word	0x20020a04

000126dc <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   126dc:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   126de:	4d05      	ldr	r5, [pc, #20]	; (126f4 <write_uart_string+0x18>)
   126e0:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   126e2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   126e6:	b901      	cbnz	r1, 126ea <write_uart_string+0xe>
	}
}
   126e8:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   126ea:	6828      	ldr	r0, [r5, #0]
   126ec:	6883      	ldr	r3, [r0, #8]
   126ee:	685b      	ldr	r3, [r3, #4]
   126f0:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   126f2:	e7f6      	b.n	126e2 <write_uart_string+0x6>
   126f4:	20020a1c 	.word	0x20020a1c

000126f8 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   126f8:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   126fa:	4920      	ldr	r1, [pc, #128]	; (1277c <cmd_send+0x84>)
{
   126fc:	b089      	sub	sp, #36	; 0x24
	err = at_cmd_write(at_buf, at_buf,
   126fe:	4608      	mov	r0, r1
   12700:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   12704:	f10d 0303 	add.w	r3, sp, #3
   12708:	f7ff fe92 	bl	12430 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   1270c:	1e01      	subs	r1, r0, #0
   1270e:	da0e      	bge.n	1272e <cmd_send+0x36>
   12710:	4b1b      	ldr	r3, [pc, #108]	; (12780 <cmd_send+0x88>)
   12712:	4a1c      	ldr	r2, [pc, #112]	; (12784 <cmd_send+0x8c>)
		LOG_ERR("Error while processing AT command: %d", err);
   12714:	481c      	ldr	r0, [pc, #112]	; (12788 <cmd_send+0x90>)
   12716:	1ad2      	subs	r2, r2, r3
   12718:	08d2      	lsrs	r2, r2, #3
   1271a:	0192      	lsls	r2, r2, #6
   1271c:	f042 0201 	orr.w	r2, r2, #1
   12720:	f00b faeb 	bl	1dcfa <log_1>
		state = AT_CMD_ERROR;
   12724:	2301      	movs	r3, #1
   12726:	f88d 3003 	strb.w	r3, [sp, #3]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   1272a:	4818      	ldr	r0, [pc, #96]	; (1278c <cmd_send+0x94>)
   1272c:	e012      	b.n	12754 <cmd_send+0x5c>
	switch (state) {
   1272e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12732:	2b03      	cmp	r3, #3
   12734:	d810      	bhi.n	12758 <cmd_send+0x60>
   12736:	a201      	add	r2, pc, #4	; (adr r2, 1273c <cmd_send+0x44>)
   12738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1273c:	0001274d 	.word	0x0001274d
   12740:	0001272b 	.word	0x0001272b
   12744:	00012767 	.word	0x00012767
   12748:	00012775 	.word	0x00012775
		write_uart_string(at_buf);
   1274c:	480b      	ldr	r0, [pc, #44]	; (1277c <cmd_send+0x84>)
   1274e:	f7ff ffc5 	bl	126dc <write_uart_string>
		write_uart_string(OK_STR);
   12752:	480f      	ldr	r0, [pc, #60]	; (12790 <cmd_send+0x98>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   12754:	f7ff ffc2 	bl	126dc <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   12758:	4b0e      	ldr	r3, [pc, #56]	; (12794 <cmd_send+0x9c>)
   1275a:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   1275c:	f00d fbe4 	bl	1ff28 <z_impl_uart_irq_rx_enable>
}
   12760:	b009      	add	sp, #36	; 0x24
   12762:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   12766:	460a      	mov	r2, r1
   12768:	490b      	ldr	r1, [pc, #44]	; (12798 <cmd_send+0xa0>)
		sprintf(str, "+CME ERROR: %d\r\n", err);
   1276a:	a801      	add	r0, sp, #4
   1276c:	f7fd ff6c 	bl	10648 <sprintf>
		write_uart_string(str);
   12770:	a801      	add	r0, sp, #4
   12772:	e7ef      	b.n	12754 <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   12774:	460a      	mov	r2, r1
   12776:	4909      	ldr	r1, [pc, #36]	; (1279c <cmd_send+0xa4>)
   12778:	e7f7      	b.n	1276a <cmd_send+0x72>
   1277a:	bf00      	nop
   1277c:	200226af 	.word	0x200226af
   12780:	00020e10 	.word	0x00020e10
   12784:	00020e18 	.word	0x00020e18
   12788:	000222d0 	.word	0x000222d0
   1278c:	000221de 	.word	0x000221de
   12790:	000221c1 	.word	0x000221c1
   12794:	20020a1c 	.word	0x20020a1c
   12798:	000222f6 	.word	0x000222f6
   1279c:	00022307 	.word	0x00022307

000127a0 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   127a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   127a4:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
   127a6:	6883      	ldr	r3, [r0, #8]
   127a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   127aa:	b103      	cbz	r3, 127ae <isr+0xe>
		return api->irq_update(dev);
   127ac:	4798      	blx	r3
	if (api->irq_rx_ready) {
   127ae:	68a3      	ldr	r3, [r4, #8]
   127b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   127b2:	b1bb      	cbz	r3, 127e4 <isr+0x44>
		return api->irq_rx_ready(dev);
   127b4:	4620      	mov	r0, r4
   127b6:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   127b8:	b1a0      	cbz	r0, 127e4 <isr+0x44>
   127ba:	f8df 8140 	ldr.w	r8, [pc, #320]	; 128fc <isr+0x15c>
   127be:	4e44      	ldr	r6, [pc, #272]	; (128d0 <isr+0x130>)
   127c0:	4647      	mov	r7, r8
   127c2:	4b44      	ldr	r3, [pc, #272]	; (128d4 <isr+0x134>)
		if (at_cmd_len > 0) {
   127c4:	4d44      	ldr	r5, [pc, #272]	; (128d8 <isr+0x138>)
   127c6:	1af6      	subs	r6, r6, r3
   127c8:	08f6      	lsrs	r6, r6, #3
   127ca:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   127ce:	07db      	lsls	r3, r3, #31
   127d0:	d408      	bmi.n	127e4 <isr+0x44>
	if (api->fifo_read) {
   127d2:	68a3      	ldr	r3, [r4, #8]
   127d4:	699b      	ldr	r3, [r3, #24]
   127d6:	b12b      	cbz	r3, 127e4 <isr+0x44>
		return api->fifo_read(dev, rx_data, size);
   127d8:	2201      	movs	r2, #1
   127da:	4620      	mov	r0, r4
   127dc:	f10d 0107 	add.w	r1, sp, #7
   127e0:	4798      	blx	r3
   127e2:	b910      	cbnz	r0, 127ea <isr+0x4a>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   127e4:	b002      	add	sp, #8
   127e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_rx_handler(character);
   127ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
	switch (character) {
   127ee:	2908      	cmp	r1, #8
   127f0:	d001      	beq.n	127f6 <isr+0x56>
   127f2:	297f      	cmp	r1, #127	; 0x7f
   127f4:	d105      	bne.n	12802 <isr+0x62>
		if (at_cmd_len > 0) {
   127f6:	682b      	ldr	r3, [r5, #0]
   127f8:	2b00      	cmp	r3, #0
   127fa:	d0e6      	beq.n	127ca <isr+0x2a>
			at_cmd_len--;
   127fc:	3b01      	subs	r3, #1
   127fe:	602b      	str	r3, [r5, #0]
   12800:	e7e3      	b.n	127ca <isr+0x2a>
	if (!inside_quotes) {
   12802:	4836      	ldr	r0, [pc, #216]	; (128dc <isr+0x13c>)
   12804:	7803      	ldrb	r3, [r0, #0]
   12806:	b993      	cbnz	r3, 1282e <isr+0x8e>
		switch (character) {
   12808:	290a      	cmp	r1, #10
   1280a:	d01e      	beq.n	1284a <isr+0xaa>
   1280c:	290d      	cmp	r1, #13
   1280e:	d00a      	beq.n	12826 <isr+0x86>
   12810:	b969      	cbnz	r1, 1282e <isr+0x8e>
			if (term_mode == MODE_NULL_TERM) {
   12812:	4b33      	ldr	r3, [pc, #204]	; (128e0 <isr+0x140>)
   12814:	781b      	ldrb	r3, [r3, #0]
   12816:	b3a3      	cbz	r3, 12882 <isr+0xe2>
			LOG_WRN("Ignored null; would terminate string early.");
   12818:	01b1      	lsls	r1, r6, #6
   1281a:	4832      	ldr	r0, [pc, #200]	; (128e4 <isr+0x144>)
   1281c:	f041 0102 	orr.w	r1, r1, #2
   12820:	f00b fa5c 	bl	1dcdc <log_0>
			return;
   12824:	e7d1      	b.n	127ca <isr+0x2a>
			if (term_mode == MODE_CR) {
   12826:	4a2e      	ldr	r2, [pc, #184]	; (128e0 <isr+0x140>)
   12828:	7812      	ldrb	r2, [r2, #0]
   1282a:	2a01      	cmp	r2, #1
			    at_cmd_len > 0 &&
   1282c:	d029      	beq.n	12882 <isr+0xe2>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   1282e:	f8d5 c000 	ldr.w	ip, [r5]
   12832:	f10c 0201 	add.w	r2, ip, #1
   12836:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   1283a:	d317      	bcc.n	1286c <isr+0xcc>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   1283c:	01b2      	lsls	r2, r6, #6
   1283e:	482a      	ldr	r0, [pc, #168]	; (128e8 <isr+0x148>)
   12840:	f042 0201 	orr.w	r2, r2, #1
   12844:	f00b fa59 	bl	1dcfa <log_1>
		return;
   12848:	e7bf      	b.n	127ca <isr+0x2a>
			if (term_mode == MODE_LF) {
   1284a:	4a25      	ldr	r2, [pc, #148]	; (128e0 <isr+0x140>)
   1284c:	7812      	ldrb	r2, [r2, #0]
   1284e:	2a02      	cmp	r2, #2
   12850:	d017      	beq.n	12882 <isr+0xe2>
			if (term_mode == MODE_CR_LF &&
   12852:	2a03      	cmp	r2, #3
   12854:	d1eb      	bne.n	1282e <isr+0x8e>
   12856:	f8d5 c000 	ldr.w	ip, [r5]
   1285a:	f1bc 0f00 	cmp.w	ip, #0
   1285e:	d0e6      	beq.n	1282e <isr+0x8e>
			    at_buf[at_cmd_len - 1] == '\r') {
   12860:	4a22      	ldr	r2, [pc, #136]	; (128ec <isr+0x14c>)
   12862:	4462      	add	r2, ip
			    at_cmd_len > 0 &&
   12864:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   12868:	2a0d      	cmp	r2, #13
   1286a:	e7df      	b.n	1282c <isr+0x8c>
	at_buf[at_cmd_len] = character;
   1286c:	f8df e07c 	ldr.w	lr, [pc, #124]	; 128ec <isr+0x14c>
	if (character == '"') {
   12870:	2922      	cmp	r1, #34	; 0x22
	at_buf[at_cmd_len] = character;
   12872:	f80e 100c 	strb.w	r1, [lr, ip]
	at_cmd_len++;
   12876:	602a      	str	r2, [r5, #0]
	if (character == '"') {
   12878:	d1a7      	bne.n	127ca <isr+0x2a>
	if (!inside_quotes) {
   1287a:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   1287e:	7003      	strb	r3, [r0, #0]
   12880:	e7a3      	b.n	127ca <isr+0x2a>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   12882:	2200      	movs	r2, #0
   12884:	6829      	ldr	r1, [r5, #0]
   12886:	4b19      	ldr	r3, [pc, #100]	; (128ec <isr+0x14c>)
	inside_quotes = false;
   12888:	7002      	strb	r2, [r0, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   1288a:	545a      	strb	r2, [r3, r1]
	at_cmd_len = 0;
   1288c:	4619      	mov	r1, r3
   1288e:	602a      	str	r2, [r5, #0]
		if (*c > ' ') {
   12890:	f813 2b01 	ldrb.w	r2, [r3], #1
   12894:	2a20      	cmp	r2, #32
   12896:	d802      	bhi.n	1289e <isr+0xfe>
		} else if (*c == '\0') {
   12898:	2a00      	cmp	r2, #0
   1289a:	d1f9      	bne.n	12890 <isr+0xf0>
   1289c:	e795      	b.n	127ca <isr+0x2a>
	if (at_buf[0]) {
   1289e:	780b      	ldrb	r3, [r1, #0]
   128a0:	2b00      	cmp	r3, #0
   128a2:	d092      	beq.n	127ca <isr+0x2a>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   128a4:	4b12      	ldr	r3, [pc, #72]	; (128f0 <isr+0x150>)
   128a6:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   128a8:	6883      	ldr	r3, [r0, #8]
   128aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   128ac:	b103      	cbz	r3, 128b0 <isr+0x110>
		api->irq_rx_disable(dev);
   128ae:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   128b0:	e8d7 3fef 	ldaex	r3, [r7]
   128b4:	f043 0201 	orr.w	r2, r3, #1
   128b8:	e8c7 2fe1 	stlex	r1, r2, [r7]
   128bc:	2900      	cmp	r1, #0
   128be:	d1f7      	bne.n	128b0 <isr+0x110>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   128c0:	07da      	lsls	r2, r3, #31
   128c2:	d482      	bmi.n	127ca <isr+0x2a>
		k_queue_append(&work_q->queue, work);
   128c4:	490b      	ldr	r1, [pc, #44]	; (128f4 <isr+0x154>)
   128c6:	480c      	ldr	r0, [pc, #48]	; (128f8 <isr+0x158>)
   128c8:	f00d fde6 	bl	20498 <k_queue_append>
   128cc:	e77d      	b.n	127ca <isr+0x2a>
   128ce:	bf00      	nop
   128d0:	00020e18 	.word	0x00020e18
   128d4:	00020e10 	.word	0x00020e10
   128d8:	20020a0c 	.word	0x20020a0c
   128dc:	200236af 	.word	0x200236af
   128e0:	200236b0 	.word	0x200236b0
   128e4:	00022318 	.word	0x00022318
   128e8:	00022344 	.word	0x00022344
   128ec:	200226af 	.word	0x200226af
   128f0:	20020a1c 	.word	0x20020a1c
   128f4:	20020a10 	.word	0x20020a10
   128f8:	20020400 	.word	0x20020400
   128fc:	20020a18 	.word	0x20020a18

00012900 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   12900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   12904:	2201      	movs	r2, #1
   12906:	4b49      	ldr	r3, [pc, #292]	; (12a2c <at_host_init+0x12c>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   12908:	2000      	movs	r0, #0
   1290a:	4949      	ldr	r1, [pc, #292]	; (12a30 <at_host_init+0x130>)
		term_mode = mode;
   1290c:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   1290e:	f7ff fe99 	bl	12644 <at_notif_register_handler>
	if (err != 0) {
   12912:	4c48      	ldr	r4, [pc, #288]	; (12a34 <at_host_init+0x134>)
   12914:	4a48      	ldr	r2, [pc, #288]	; (12a38 <at_host_init+0x138>)
   12916:	4606      	mov	r6, r0
   12918:	1aa4      	subs	r4, r4, r2
   1291a:	08e4      	lsrs	r4, r4, #3
   1291c:	b150      	cbz	r0, 12934 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   1291e:	01a2      	lsls	r2, r4, #6
   12920:	4601      	mov	r1, r0
   12922:	f042 0201 	orr.w	r2, r2, #1
   12926:	4845      	ldr	r0, [pc, #276]	; (12a3c <at_host_init+0x13c>)
   12928:	f00b f9e7 	bl	1dcfa <log_1>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   1292c:	4630      	mov	r0, r6
   1292e:	b003      	add	sp, #12
   12930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12934:	4842      	ldr	r0, [pc, #264]	; (12a40 <at_host_init+0x140>)
   12936:	f009 fa99 	bl	1be6c <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   1293a:	4d42      	ldr	r5, [pc, #264]	; (12a44 <at_host_init+0x144>)
   1293c:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   1293e:	b988      	cbnz	r0, 12964 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   12940:	01a2      	lsls	r2, r4, #6
   12942:	493f      	ldr	r1, [pc, #252]	; (12a40 <at_host_init+0x140>)
   12944:	4840      	ldr	r0, [pc, #256]	; (12a48 <at_host_init+0x148>)
   12946:	f042 0201 	orr.w	r2, r2, #1
   1294a:	f00b f9d6 	bl	1dcfa <log_1>
		return -EINVAL;
   1294e:	f06f 0115 	mvn.w	r1, #21
		LOG_ERR("UART could not be initialized: %d", err);
   12952:	01a2      	lsls	r2, r4, #6
   12954:	483d      	ldr	r0, [pc, #244]	; (12a4c <at_host_init+0x14c>)
   12956:	f042 0201 	orr.w	r2, r2, #1
   1295a:	f00b f9ce 	bl	1dcfa <log_1>
		return -EFAULT;
   1295e:	f06f 060d 	mvn.w	r6, #13
   12962:	e7e3      	b.n	1292c <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   12964:	f00d ff5e 	bl	20824 <z_impl_k_uptime_ticks>
   12968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1296c:	460a      	mov	r2, r1
   1296e:	fba0 0103 	umull	r0, r1, r0, r3
   12972:	fb03 1102 	mla	r1, r3, r2, r1
   12976:	ea4f 38d0 	mov.w	r8, r0, lsr #15
   1297a:	ea4f 1984 	mov.w	r9, r4, lsl #6
			LOG_INF("UART check failed: %d. "
   1297e:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 12a68 <at_host_init+0x168>
   12982:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   12986:	f049 0a03 	orr.w	sl, r9, #3
		err = uart_err_check(uart_dev);
   1298a:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   1298c:	6883      	ldr	r3, [r0, #8]
   1298e:	689b      	ldr	r3, [r3, #8]
   12990:	b393      	cbz	r3, 129f8 <at_host_init+0xf8>
		return api->err_check(dev);
   12992:	4798      	blx	r3
		if (err) {
   12994:	4607      	mov	r7, r0
   12996:	b378      	cbz	r0, 129f8 <at_host_init+0xf8>
   12998:	f00d ff44 	bl	20824 <z_impl_k_uptime_ticks>
   1299c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   129a0:	460a      	mov	r2, r1
   129a2:	fba0 0103 	umull	r0, r1, r0, r3
   129a6:	fb03 1102 	mla	r1, r3, r2, r1
   129aa:	0bc3      	lsrs	r3, r0, #15
   129ac:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   129b0:	eba3 0308 	sub.w	r3, r3, r8
   129b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   129b8:	d908      	bls.n	129cc <at_host_init+0xcc>
				LOG_ERR("UART check failed: %d. "
   129ba:	4639      	mov	r1, r7
   129bc:	4824      	ldr	r0, [pc, #144]	; (12a50 <at_host_init+0x150>)
   129be:	f049 0201 	orr.w	r2, r9, #1
   129c2:	f00b f99a 	bl	1dcfa <log_1>
				return -EIO;
   129c6:	f06f 0104 	mvn.w	r1, #4
   129ca:	e7c2      	b.n	12952 <at_host_init+0x52>
			LOG_INF("UART check failed: %d. "
   129cc:	4652      	mov	r2, sl
   129ce:	4639      	mov	r1, r7
   129d0:	4658      	mov	r0, fp
   129d2:	f00b f992 	bl	1dcfa <log_1>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   129d6:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   129d8:	6883      	ldr	r3, [r0, #8]
   129da:	699b      	ldr	r3, [r3, #24]
   129dc:	b92b      	cbnz	r3, 129ea <at_host_init+0xea>
	return z_impl_k_sleep(timeout);
   129de:	2100      	movs	r1, #0
   129e0:	f44f 70a4 	mov.w	r0, #328	; 0x148
   129e4:	f00a f928 	bl	1cc38 <z_impl_k_sleep>
	} while (err);
   129e8:	e7cf      	b.n	1298a <at_host_init+0x8a>
		return api->fifo_read(dev, rx_data, size);
   129ea:	2201      	movs	r2, #1
   129ec:	f10d 0107 	add.w	r1, sp, #7
   129f0:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   129f2:	2800      	cmp	r0, #0
   129f4:	d1ef      	bne.n	129d6 <at_host_init+0xd6>
   129f6:	e7f2      	b.n	129de <at_host_init+0xde>
	uart_irq_callback_set(uart_dev, isr);
   129f8:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   129fa:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   129fc:	b123      	cbz	r3, 12a08 <at_host_init+0x108>
   129fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   12a00:	b113      	cbz	r3, 12a08 <at_host_init+0x108>
		api->irq_callback_set(dev, cb, user_data);
   12a02:	2200      	movs	r2, #0
   12a04:	4913      	ldr	r1, [pc, #76]	; (12a54 <at_host_init+0x154>)
   12a06:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   12a08:	2200      	movs	r2, #0
   12a0a:	4b13      	ldr	r3, [pc, #76]	; (12a58 <at_host_init+0x158>)
   12a0c:	4913      	ldr	r1, [pc, #76]	; (12a5c <at_host_init+0x15c>)
   12a0e:	601a      	str	r2, [r3, #0]
   12a10:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   12a14:	4812      	ldr	r0, [pc, #72]	; (12a60 <at_host_init+0x160>)
   12a16:	230a      	movs	r3, #10
   12a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12a1c:	4911      	ldr	r1, [pc, #68]	; (12a64 <at_host_init+0x164>)
   12a1e:	f00a fa53 	bl	1cec8 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   12a22:	6828      	ldr	r0, [r5, #0]
   12a24:	f00d fa80 	bl	1ff28 <z_impl_uart_irq_rx_enable>
	return err;
   12a28:	e780      	b.n	1292c <at_host_init+0x2c>
   12a2a:	bf00      	nop
   12a2c:	200236b0 	.word	0x200236b0
   12a30:	0001ff33 	.word	0x0001ff33
   12a34:	00020e18 	.word	0x00020e18
   12a38:	00020e10 	.word	0x00020e10
   12a3c:	00022364 	.word	0x00022364
   12a40:	000219ca 	.word	0x000219ca
   12a44:	20020a1c 	.word	0x20020a1c
   12a48:	00022382 	.word	0x00022382
   12a4c:	000223fd 	.word	0x000223fd
   12a50:	00022392 	.word	0x00022392
   12a54:	000127a1 	.word	0x000127a1
   12a58:	20020a10 	.word	0x20020a10
   12a5c:	000126f9 	.word	0x000126f9
   12a60:	20020400 	.word	0x20020400
   12a64:	20023f30 	.word	0x20023f30
   12a68:	000223c8 	.word	0x000223c8

00012a6c <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   12a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   12a70:	6805      	ldr	r5, [r0, #0]
{
   12a72:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   12a74:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12a76:	782b      	ldrb	r3, [r5, #0]
{
   12a78:	4680      	mov	r8, r0
   12a7a:	460f      	mov	r7, r1
   12a7c:	4616      	mov	r6, r2
   12a7e:	2b00      	cmp	r3, #0
   12a80:	f000 80cc 	beq.w	12c1c <at_parse_process_element+0x1b0>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   12a84:	4b67      	ldr	r3, [pc, #412]	; (12c24 <at_parse_process_element+0x1b8>)
   12a86:	781c      	ldrb	r4, [r3, #0]
   12a88:	2c06      	cmp	r4, #6
   12a8a:	d110      	bne.n	12aae <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   12a8c:	1c6b      	adds	r3, r5, #1
   12a8e:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   12a90:	9a00      	ldr	r2, [sp, #0]
   12a92:	7810      	ldrb	r0, [r2, #0]
   12a94:	f00d fa67 	bl	1ff66 <is_valid_notification_char>
   12a98:	b930      	cbnz	r0, 12aa8 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   12a9a:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   12a9c:	462a      	mov	r2, r5
   12a9e:	4639      	mov	r1, r7
   12aa0:	4630      	mov	r0, r6
   12aa2:	f00d fb2f 	bl	20104 <at_params_string_put>
   12aa6:	e01b      	b.n	12ae0 <at_parse_process_element+0x74>
			tmpstr++;
   12aa8:	3201      	adds	r2, #1
   12aaa:	9200      	str	r2, [sp, #0]
   12aac:	e7f0      	b.n	12a90 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   12aae:	2c07      	cmp	r4, #7
   12ab0:	d124      	bne.n	12afc <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   12ab2:	4668      	mov	r0, sp
   12ab4:	f00d fa49 	bl	1ff4a <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   12ab8:	9a00      	ldr	r2, [sp, #0]
   12aba:	7810      	ldrb	r0, [r2, #0]
   12abc:	f00d fa53 	bl	1ff66 <is_valid_notification_char>
   12ac0:	b9a8      	cbnz	r0, 12aee <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   12ac2:	1b53      	subs	r3, r2, r5
   12ac4:	4639      	mov	r1, r7
   12ac6:	462a      	mov	r2, r5
   12ac8:	4630      	mov	r0, r6
   12aca:	f00d fb1b 	bl	20104 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   12ace:	9b00      	ldr	r3, [sp, #0]
   12ad0:	781a      	ldrb	r2, [r3, #0]
   12ad2:	2a3d      	cmp	r2, #61	; 0x3d
   12ad4:	d10e      	bne.n	12af4 <at_parse_process_element+0x88>
   12ad6:	785a      	ldrb	r2, [r3, #1]
   12ad8:	2a3f      	cmp	r2, #63	; 0x3f
   12ada:	d101      	bne.n	12ae0 <at_parse_process_element+0x74>
			tmpstr += 2;
   12adc:	3302      	adds	r3, #2
			tmpstr++;
   12ade:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   12ae0:	2000      	movs	r0, #0
	*str = tmpstr;
   12ae2:	9b00      	ldr	r3, [sp, #0]
   12ae4:	f8c8 3000 	str.w	r3, [r8]
}
   12ae8:	b023      	add	sp, #140	; 0x8c
   12aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   12aee:	3201      	adds	r2, #1
   12af0:	9200      	str	r2, [sp, #0]
   12af2:	e7e1      	b.n	12ab8 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   12af4:	2a3f      	cmp	r2, #63	; 0x3f
   12af6:	d1f3      	bne.n	12ae0 <at_parse_process_element+0x74>
			tmpstr++;
   12af8:	3301      	adds	r3, #1
   12afa:	e7f0      	b.n	12ade <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   12afc:	2c08      	cmp	r4, #8
   12afe:	d103      	bne.n	12b08 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   12b00:	4610      	mov	r0, r2
   12b02:	f00d fada 	bl	200ba <at_params_empty_put>
   12b06:	e7eb      	b.n	12ae0 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   12b08:	2c02      	cmp	r4, #2
   12b0a:	d111      	bne.n	12b30 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   12b0c:	9a00      	ldr	r2, [sp, #0]
   12b0e:	7811      	ldrb	r1, [r2, #0]
   12b10:	4608      	mov	r0, r1
   12b12:	f00d fa11 	bl	1ff38 <is_lfcr>
   12b16:	b918      	cbnz	r0, 12b20 <at_parse_process_element+0xb4>
   12b18:	b111      	cbz	r1, 12b20 <at_parse_process_element+0xb4>
			tmpstr++;
   12b1a:	3201      	adds	r2, #1
   12b1c:	9200      	str	r2, [sp, #0]
   12b1e:	e7f5      	b.n	12b0c <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   12b20:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   12b22:	462a      	mov	r2, r5
   12b24:	4639      	mov	r1, r7
   12b26:	4630      	mov	r0, r6
   12b28:	f00d faec 	bl	20104 <at_params_string_put>
		tmpstr++;
   12b2c:	9b00      	ldr	r3, [sp, #0]
   12b2e:	e7e3      	b.n	12af8 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   12b30:	2c03      	cmp	r4, #3
   12b32:	d109      	bne.n	12b48 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   12b34:	9b00      	ldr	r3, [sp, #0]
   12b36:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   12b38:	2a22      	cmp	r2, #34	; 0x22
   12b3a:	d003      	beq.n	12b44 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12b3c:	b112      	cbz	r2, 12b44 <at_parse_process_element+0xd8>
			tmpstr++;
   12b3e:	3301      	adds	r3, #1
   12b40:	9300      	str	r3, [sp, #0]
   12b42:	e7f7      	b.n	12b34 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   12b44:	1b5b      	subs	r3, r3, r5
   12b46:	e7ec      	b.n	12b22 <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   12b48:	2c01      	cmp	r4, #1
   12b4a:	d13c      	bne.n	12bc6 <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   12b4c:	4628      	mov	r0, r5
   12b4e:	220a      	movs	r2, #10
   12b50:	a901      	add	r1, sp, #4
   12b52:	f00b fdb4 	bl	1e6be <strtoul>
		tmpstr = next;
   12b56:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12b58:	4d33      	ldr	r5, [pc, #204]	; (12c28 <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   12b5a:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   12b5c:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   12b5e:	9800      	ldr	r0, [sp, #0]
   12b60:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   12b62:	2b29      	cmp	r3, #41	; 0x29
   12b64:	d028      	beq.n	12bb8 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12b66:	b33b      	cbz	r3, 12bb8 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12b68:	3b2c      	subs	r3, #44	; 0x2c
   12b6a:	b2db      	uxtb	r3, r3
   12b6c:	3001      	adds	r0, #1
   12b6e:	2b11      	cmp	r3, #17
				tmparray[i++] =
   12b70:	9000      	str	r0, [sp, #0]
   12b72:	d803      	bhi.n	12b7c <at_parse_process_element+0x110>
   12b74:	fa25 f303 	lsr.w	r3, r5, r3
   12b78:	07db      	lsls	r3, r3, #31
   12b7a:	d408      	bmi.n	12b8e <at_parse_process_element+0x122>
				tmpstr++;
   12b7c:	46a1      	mov	r9, r4
   12b7e:	e004      	b.n	12b8a <at_parse_process_element+0x11e>
					tmpstr = next;
   12b80:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   12b82:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   12b86:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   12b88:	d015      	beq.n	12bb6 <at_parse_process_element+0x14a>
				tmpstr++;
   12b8a:	464c      	mov	r4, r9
   12b8c:	e7e7      	b.n	12b5e <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   12b8e:	220a      	movs	r2, #10
   12b90:	a901      	add	r1, sp, #4
   12b92:	f00b fd94 	bl	1e6be <strtoul>
				tmparray[i++] =
   12b96:	ab22      	add	r3, sp, #136	; 0x88
   12b98:	f104 0901 	add.w	r9, r4, #1
   12b9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   12ba0:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   12ba4:	9800      	ldr	r0, [sp, #0]
   12ba6:	f00b fe44 	bl	1e832 <strlen>
   12baa:	4604      	mov	r4, r0
   12bac:	9801      	ldr	r0, [sp, #4]
   12bae:	f00b fe40 	bl	1e832 <strlen>
   12bb2:	4284      	cmp	r4, r0
   12bb4:	d1e4      	bne.n	12b80 <at_parse_process_element+0x114>
   12bb6:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   12bb8:	4639      	mov	r1, r7
   12bba:	4630      	mov	r0, r6
   12bbc:	00a3      	lsls	r3, r4, #2
   12bbe:	aa02      	add	r2, sp, #8
   12bc0:	f00d fac3 	bl	2014a <at_params_array_put>
   12bc4:	e7b2      	b.n	12b2c <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   12bc6:	2c04      	cmp	r4, #4
   12bc8:	d115      	bne.n	12bf6 <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   12bca:	220a      	movs	r2, #10
   12bcc:	4628      	mov	r0, r5
   12bce:	a902      	add	r1, sp, #8
   12bd0:	f00b fd75 	bl	1e6be <strtoul>
		tmpstr = next;
   12bd4:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   12bd6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   12bda:	4602      	mov	r2, r0
		tmpstr = next;
   12bdc:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   12bde:	d205      	bcs.n	12bec <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   12be0:	b282      	uxth	r2, r0
   12be2:	4639      	mov	r1, r7
   12be4:	4630      	mov	r0, r6
   12be6:	f00d fa55 	bl	20094 <at_params_short_put>
   12bea:	e779      	b.n	12ae0 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   12bec:	4639      	mov	r1, r7
   12bee:	4630      	mov	r0, r6
   12bf0:	f00d fa75 	bl	200de <at_params_int_put>
   12bf4:	e774      	b.n	12ae0 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   12bf6:	2c05      	cmp	r4, #5
   12bf8:	f47f af72 	bne.w	12ae0 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   12bfc:	9b00      	ldr	r3, [sp, #0]
   12bfe:	781a      	ldrb	r2, [r3, #0]

static inline int isxdigit(int a)
{
	unsigned int ua = (unsigned int)a;

	return (int)(((ua - (unsigned)'0') < 10U) ||
   12c00:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   12c04:	2909      	cmp	r1, #9
   12c06:	d906      	bls.n	12c16 <at_parse_process_element+0x1aa>
			((ua | 32U) - (unsigned)'a' < 6U));
   12c08:	f042 0220 	orr.w	r2, r2, #32
   12c0c:	3a61      	subs	r2, #97	; 0x61
	return (int)(((ua - (unsigned)'0') < 10U) ||
   12c0e:	2a05      	cmp	r2, #5
   12c10:	d901      	bls.n	12c16 <at_parse_process_element+0x1aa>
		at_params_string_put(list, index, start_ptr,
   12c12:	1b5b      	subs	r3, r3, r5
   12c14:	e742      	b.n	12a9c <at_parse_process_element+0x30>
			tmpstr++;
   12c16:	3301      	adds	r3, #1
   12c18:	9300      	str	r3, [sp, #0]
   12c1a:	e7ef      	b.n	12bfc <at_parse_process_element+0x190>
		return -1;
   12c1c:	f04f 30ff 	mov.w	r0, #4294967295
   12c20:	e762      	b.n	12ae8 <at_parse_process_element+0x7c>
   12c22:	bf00      	nop
   12c24:	200236b1 	.word	0x200236b1
   12c28:	00024001 	.word	0x00024001

00012c2c <at_parse_detect_type>:
{
   12c2c:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   12c2e:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   12c30:	2900      	cmp	r1, #0
{
   12c32:	4605      	mov	r5, r0
   12c34:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   12c36:	d144      	bne.n	12cc2 <at_parse_detect_type+0x96>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12c38:	2a2b      	cmp	r2, #43	; 0x2b
   12c3a:	4e2a      	ldr	r6, [pc, #168]	; (12ce4 <at_parse_detect_type+0xb8>)
   12c3c:	d001      	beq.n	12c42 <at_parse_detect_type+0x16>
   12c3e:	2a25      	cmp	r2, #37	; 0x25
   12c40:	d104      	bne.n	12c4c <at_parse_detect_type+0x20>
	state = new_state;
   12c42:	2306      	movs	r3, #6
   12c44:	7033      	strb	r3, [r6, #0]
	return 0;
   12c46:	2000      	movs	r0, #0
	*str = tmpstr;
   12c48:	602c      	str	r4, [r5, #0]
}
   12c4a:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   12c4c:	4620      	mov	r0, r4
   12c4e:	f00d f996 	bl	1ff7e <is_command>
   12c52:	b3a0      	cbz	r0, 12cbe <at_parse_detect_type+0x92>
	state = new_state;
   12c54:	2307      	movs	r3, #7
   12c56:	e7f5      	b.n	12c44 <at_parse_detect_type+0x18>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   12c58:	f647 71e5 	movw	r1, #32741	; 0x7fe5
   12c5c:	fa21 f303 	lsr.w	r3, r1, r3
   12c60:	07d9      	lsls	r1, r3, #31
   12c62:	d50a      	bpl.n	12c7a <at_parse_detect_type+0x4e>
   12c64:	2204      	movs	r2, #4
   12c66:	4b1f      	ldr	r3, [pc, #124]	; (12ce4 <at_parse_detect_type+0xb8>)
   12c68:	701a      	strb	r2, [r3, #0]
}
   12c6a:	e7ec      	b.n	12c46 <at_parse_detect_type+0x1a>
	if (chr == '(') {
   12c6c:	2a28      	cmp	r2, #40	; 0x28
   12c6e:	d104      	bne.n	12c7a <at_parse_detect_type+0x4e>
	state = new_state;
   12c70:	2201      	movs	r2, #1
   12c72:	4b1c      	ldr	r3, [pc, #112]	; (12ce4 <at_parse_detect_type+0xb8>)
		tmpstr++;
   12c74:	4414      	add	r4, r2
	state = new_state;
   12c76:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   12c78:	e7e5      	b.n	12c46 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   12c7a:	4610      	mov	r0, r2
   12c7c:	f00d f95c 	bl	1ff38 <is_lfcr>
   12c80:	b170      	cbz	r0, 12ca0 <at_parse_detect_type+0x74>
   12c82:	4918      	ldr	r1, [pc, #96]	; (12ce4 <at_parse_detect_type+0xb8>)
   12c84:	7808      	ldrb	r0, [r1, #0]
   12c86:	2804      	cmp	r0, #4
   12c88:	d108      	bne.n	12c9c <at_parse_detect_type+0x70>
		while (is_lfcr(*tmpstr)) {
   12c8a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   12c8e:	f00d f953 	bl	1ff38 <is_lfcr>
   12c92:	2800      	cmp	r0, #0
   12c94:	d1f9      	bne.n	12c8a <at_parse_detect_type+0x5e>
	state = new_state;
   12c96:	2305      	movs	r3, #5
   12c98:	700b      	strb	r3, [r1, #0]
}
   12c9a:	e7d4      	b.n	12c46 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   12c9c:	2808      	cmp	r0, #8
   12c9e:	d0d2      	beq.n	12c46 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12ca0:	3a2c      	subs	r2, #44	; 0x2c
   12ca2:	b2d2      	uxtb	r2, r2
   12ca4:	2a11      	cmp	r2, #17
   12ca6:	d807      	bhi.n	12cb8 <at_parse_detect_type+0x8c>
   12ca8:	4b0f      	ldr	r3, [pc, #60]	; (12ce8 <at_parse_detect_type+0xbc>)
   12caa:	fa23 f202 	lsr.w	r2, r3, r2
   12cae:	07d3      	lsls	r3, r2, #31
   12cb0:	d502      	bpl.n	12cb8 <at_parse_detect_type+0x8c>
	state = new_state;
   12cb2:	2208      	movs	r2, #8
   12cb4:	4b0b      	ldr	r3, [pc, #44]	; (12ce4 <at_parse_detect_type+0xb8>)
   12cb6:	e7d7      	b.n	12c68 <at_parse_detect_type+0x3c>
		return -1;
   12cb8:	f04f 30ff 	mov.w	r0, #4294967295
   12cbc:	e7c5      	b.n	12c4a <at_parse_detect_type+0x1e>
	state = new_state;
   12cbe:	2302      	movs	r3, #2
   12cc0:	e7c0      	b.n	12c44 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   12cc2:	dd03      	ble.n	12ccc <at_parse_detect_type+0xa0>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12cc4:	2a2b      	cmp	r2, #43	; 0x2b
   12cc6:	d0f7      	beq.n	12cb8 <at_parse_detect_type+0x8c>
   12cc8:	2a25      	cmp	r2, #37	; 0x25
   12cca:	d0f5      	beq.n	12cb8 <at_parse_detect_type+0x8c>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   12ccc:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   12cd0:	b2db      	uxtb	r3, r3
   12cd2:	2b0e      	cmp	r3, #14
   12cd4:	d9c0      	bls.n	12c58 <at_parse_detect_type+0x2c>
	if (chr == '"') {
   12cd6:	2a22      	cmp	r2, #34	; 0x22
   12cd8:	d1c8      	bne.n	12c6c <at_parse_detect_type+0x40>
	state = new_state;
   12cda:	2203      	movs	r2, #3
   12cdc:	4b01      	ldr	r3, [pc, #4]	; (12ce4 <at_parse_detect_type+0xb8>)
		tmpstr++;
   12cde:	3401      	adds	r4, #1
	state = new_state;
   12ce0:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   12ce2:	e7b0      	b.n	12c46 <at_parse_detect_type+0x1a>
   12ce4:	200236b1 	.word	0x200236b1
   12ce8:	00024001 	.word	0x00024001

00012cec <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   12cec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12cf0:	4688      	mov	r8, r1
   12cf2:	4616      	mov	r6, r2
   12cf4:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   12cf6:	4604      	mov	r4, r0
   12cf8:	2800      	cmp	r0, #0
   12cfa:	d07c      	beq.n	12df6 <at_parser_max_params_from_str+0x10a>
   12cfc:	2a00      	cmp	r2, #0
   12cfe:	d07a      	beq.n	12df6 <at_parser_max_params_from_str+0x10a>
   12d00:	6853      	ldr	r3, [r2, #4]
   12d02:	2b00      	cmp	r3, #0
   12d04:	d077      	beq.n	12df6 <at_parser_max_params_from_str+0x10a>
	state = IDLE;
   12d06:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   12d08:	4610      	mov	r0, r2
   12d0a:	f00d f99c 	bl	20046 <at_params_list_clear>
	const char *str = *at_params_str;
   12d0e:	9401      	str	r4, [sp, #4]
	int index = 0;
   12d10:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   12d12:	6833      	ldr	r3, [r6, #0]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12d14:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 12e00 <at_parser_max_params_from_str+0x114>
   12d18:	429f      	cmp	r7, r3
   12d1a:	bf28      	it	cs
   12d1c:	461f      	movcs	r7, r3
	state = IDLE;
   12d1e:	4b37      	ldr	r3, [pc, #220]	; (12dfc <at_parser_max_params_from_str+0x110>)
   12d20:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   12d22:	9a01      	ldr	r2, [sp, #4]
   12d24:	7813      	ldrb	r3, [r2, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12d26:	2b00      	cmp	r3, #0
   12d28:	d04b      	beq.n	12dc2 <at_parser_max_params_from_str+0xd6>
   12d2a:	42a7      	cmp	r7, r4
   12d2c:	d949      	bls.n	12dc2 <at_parser_max_params_from_str+0xd6>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   12d2e:	2b20      	cmp	r3, #32
   12d30:	d002      	beq.n	12d38 <at_parser_max_params_from_str+0x4c>
   12d32:	3b09      	subs	r3, #9
   12d34:	2b04      	cmp	r3, #4
   12d36:	d801      	bhi.n	12d3c <at_parser_max_params_from_str+0x50>
			str++;
   12d38:	3201      	adds	r2, #1
   12d3a:	9201      	str	r2, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   12d3c:	4621      	mov	r1, r4
   12d3e:	a801      	add	r0, sp, #4
   12d40:	f7ff ff74 	bl	12c2c <at_parse_detect_type>
   12d44:	1c42      	adds	r2, r0, #1
   12d46:	d03c      	beq.n	12dc2 <at_parser_max_params_from_str+0xd6>
		if (at_parse_process_element(&str, index, list) == -1) {
   12d48:	4632      	mov	r2, r6
   12d4a:	4621      	mov	r1, r4
   12d4c:	a801      	add	r0, sp, #4
   12d4e:	f7ff fe8d 	bl	12a6c <at_parse_process_element>
   12d52:	1c43      	adds	r3, r0, #1
   12d54:	d035      	beq.n	12dc2 <at_parser_max_params_from_str+0xd6>
		if (is_separator(*str)) {
   12d56:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   12d58:	781a      	ldrb	r2, [r3, #0]
   12d5a:	3a2c      	subs	r2, #44	; 0x2c
   12d5c:	b2d2      	uxtb	r2, r2
   12d5e:	2a11      	cmp	r2, #17
   12d60:	d81a      	bhi.n	12d98 <at_parser_max_params_from_str+0xac>
   12d62:	fa29 f202 	lsr.w	r2, r9, r2
   12d66:	07d1      	lsls	r1, r2, #31
   12d68:	d516      	bpl.n	12d98 <at_parser_max_params_from_str+0xac>
			if (is_lfcr(*(str + 1))) {
   12d6a:	7858      	ldrb	r0, [r3, #1]
   12d6c:	f00d f8e4 	bl	1ff38 <is_lfcr>
   12d70:	b178      	cbz	r0, 12d92 <at_parser_max_params_from_str+0xa6>
				index++;
   12d72:	3401      	adds	r4, #1
				if (index == max_params) {
   12d74:	42bc      	cmp	r4, r7
   12d76:	d039      	beq.n	12dec <at_parser_max_params_from_str+0x100>
				if (at_parse_detect_type(&str, index) == -1) {
   12d78:	4621      	mov	r1, r4
   12d7a:	a801      	add	r0, sp, #4
   12d7c:	f7ff ff56 	bl	12c2c <at_parse_detect_type>
   12d80:	1c42      	adds	r2, r0, #1
   12d82:	d01e      	beq.n	12dc2 <at_parser_max_params_from_str+0xd6>
				if (at_parse_process_element(&str, index,
   12d84:	4632      	mov	r2, r6
   12d86:	4621      	mov	r1, r4
   12d88:	a801      	add	r0, sp, #4
   12d8a:	f7ff fe6f 	bl	12a6c <at_parse_process_element>
   12d8e:	1c43      	adds	r3, r0, #1
   12d90:	d017      	beq.n	12dc2 <at_parser_max_params_from_str+0xd6>
			str++;
   12d92:	9b01      	ldr	r3, [sp, #4]
   12d94:	3301      	adds	r3, #1
   12d96:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   12d98:	9a01      	ldr	r2, [sp, #4]
   12d9a:	7810      	ldrb	r0, [r2, #0]
   12d9c:	f00d f8cc 	bl	1ff38 <is_lfcr>
   12da0:	b1f8      	cbz	r0, 12de2 <at_parser_max_params_from_str+0xf6>
   12da2:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   12da4:	7811      	ldrb	r1, [r2, #0]
   12da6:	4692      	mov	sl, r2
   12da8:	4608      	mov	r0, r1
   12daa:	3201      	adds	r2, #1
   12dac:	f00d f8c4 	bl	1ff38 <is_lfcr>
   12db0:	2800      	cmp	r0, #0
   12db2:	d1f7      	bne.n	12da4 <at_parser_max_params_from_str+0xb8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12db4:	b119      	cbz	r1, 12dbe <at_parser_max_params_from_str+0xd2>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   12db6:	292b      	cmp	r1, #43	; 0x2b
   12db8:	d001      	beq.n	12dbe <at_parser_max_params_from_str+0xd2>
   12dba:	2925      	cmp	r1, #37	; 0x25
   12dbc:	d111      	bne.n	12de2 <at_parser_max_params_from_str+0xf6>
				str += i;
   12dbe:	f8cd a004 	str.w	sl, [sp, #4]
	*at_params_str = str;
   12dc2:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   12dc4:	b9a5      	cbnz	r5, 12df0 <at_parser_max_params_from_str+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   12dc6:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   12dc8:	2a00      	cmp	r2, #0
   12dca:	bf0c      	ite	eq
   12dcc:	2000      	moveq	r0, #0
   12dce:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   12dd2:	f1b8 0f00 	cmp.w	r8, #0
   12dd6:	d001      	beq.n	12ddc <at_parser_max_params_from_str+0xf0>
		*next_param_str = (char *)at_params_str;
   12dd8:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   12ddc:	b002      	add	sp, #8
   12dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		index++;
   12de2:	3401      	adds	r4, #1
			oversized = true;
   12de4:	42bc      	cmp	r4, r7
   12de6:	bf08      	it	eq
   12de8:	2501      	moveq	r5, #1
   12dea:	e79a      	b.n	12d22 <at_parser_max_params_from_str+0x36>
					oversized = true;
   12dec:	4605      	mov	r5, r0
   12dee:	e7e8      	b.n	12dc2 <at_parser_max_params_from_str+0xd6>
		return -E2BIG;
   12df0:	f06f 0006 	mvn.w	r0, #6
   12df4:	e7ed      	b.n	12dd2 <at_parser_max_params_from_str+0xe6>
		return -EINVAL;
   12df6:	f06f 0015 	mvn.w	r0, #21
   12dfa:	e7ef      	b.n	12ddc <at_parser_max_params_from_str+0xf0>
   12dfc:	200236b1 	.word	0x200236b1
   12e00:	00024001 	.word	0x00024001

00012e04 <parse_psm_cfg>:
	char timer_str[9] = {0};
   12e04:	2300      	movs	r3, #0
{
   12e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e0a:	b086      	sub	sp, #24
	char timer_str[9] = {0};
   12e0c:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12e10:	f88d 3014 	strb.w	r3, [sp, #20]
	char unit_str[4] = {0};
   12e14:	9301      	str	r3, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   12e16:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   12e18:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   12e1a:	9302      	str	r3, [sp, #8]
{
   12e1c:	4616      	mov	r6, r2
	err = at_params_string_get(at_params,
   12e1e:	bf14      	ite	ne
   12e20:	2108      	movne	r1, #8
   12e22:	2109      	moveq	r1, #9
   12e24:	446b      	add	r3, sp
   12e26:	aa03      	add	r2, sp, #12
{
   12e28:	4607      	mov	r7, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   12e2a:	bf14      	ite	ne
   12e2c:	f04f 0807 	movne.w	r8, #7
   12e30:	f04f 0808 	moveq.w	r8, #8
	err = at_params_string_get(at_params,
   12e34:	f00d f9bf 	bl	201b6 <at_params_string_get>
	if (err) {
   12e38:	4604      	mov	r4, r0
   12e3a:	b170      	cbz	r0, 12e5a <parse_psm_cfg+0x56>
   12e3c:	4a32      	ldr	r2, [pc, #200]	; (12f08 <parse_psm_cfg+0x104>)
   12e3e:	4b33      	ldr	r3, [pc, #204]	; (12f0c <parse_psm_cfg+0x108>)
		LOG_ERR("Could not get TAU, error: %d", err);
   12e40:	4621      	mov	r1, r4
   12e42:	1ad2      	subs	r2, r2, r3
   12e44:	08d2      	lsrs	r2, r2, #3
   12e46:	0192      	lsls	r2, r2, #6
   12e48:	4831      	ldr	r0, [pc, #196]	; (12f10 <parse_psm_cfg+0x10c>)
   12e4a:	f042 0201 	orr.w	r2, r2, #1
   12e4e:	f00a ff54 	bl	1dcfa <log_1>
}
   12e52:	4620      	mov	r0, r4
   12e54:	b006      	add	sp, #24
   12e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   12e5a:	2203      	movs	r2, #3
   12e5c:	a903      	add	r1, sp, #12
   12e5e:	a801      	add	r0, sp, #4
   12e60:	f00b fd19 	bl	1e896 <memcpy>
	lut_idx = strtoul(unit_str, NULL, 2);
   12e64:	2202      	movs	r2, #2
   12e66:	4621      	mov	r1, r4
   12e68:	a801      	add	r0, sp, #4
   12e6a:	f00b fc28 	bl	1e6be <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   12e6e:	2807      	cmp	r0, #7
   12e70:	d90c      	bls.n	12e8c <parse_psm_cfg+0x88>
   12e72:	4925      	ldr	r1, [pc, #148]	; (12f08 <parse_psm_cfg+0x104>)
   12e74:	4b25      	ldr	r3, [pc, #148]	; (12f0c <parse_psm_cfg+0x108>)
		LOG_ERR("Unable to parse periodic TAU string");
   12e76:	4827      	ldr	r0, [pc, #156]	; (12f14 <parse_psm_cfg+0x110>)
   12e78:	1ac9      	subs	r1, r1, r3
   12e7a:	08c9      	lsrs	r1, r1, #3
   12e7c:	0189      	lsls	r1, r1, #6
   12e7e:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to parse active time string");
   12e82:	f00a ff2b 	bl	1dcdc <log_0>
		return err;
   12e86:	f06f 0415 	mvn.w	r4, #21
   12e8a:	e7e2      	b.n	12e52 <parse_psm_cfg+0x4e>
	timer_unit = t3412_lookup[lut_idx];
   12e8c:	4b22      	ldr	r3, [pc, #136]	; (12f18 <parse_psm_cfg+0x114>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   12e8e:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   12e90:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   12e94:	4621      	mov	r1, r4
   12e96:	f10d 000f 	add.w	r0, sp, #15
   12e9a:	f00b fc10 	bl	1e6be <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   12e9e:	b1fd      	cbz	r5, 12ee0 <parse_psm_cfg+0xdc>
   12ea0:	4345      	muls	r5, r0
	err = at_params_string_get(at_params,
   12ea2:	4641      	mov	r1, r8
   12ea4:	4638      	mov	r0, r7
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   12ea6:	6035      	str	r5, [r6, #0]
	err = at_params_string_get(at_params,
   12ea8:	ab02      	add	r3, sp, #8
   12eaa:	aa03      	add	r2, sp, #12
   12eac:	f00d f983 	bl	201b6 <at_params_string_get>
	if (err) {
   12eb0:	4604      	mov	r4, r0
   12eb2:	2800      	cmp	r0, #0
   12eb4:	d1c2      	bne.n	12e3c <parse_psm_cfg+0x38>
	memcpy(unit_str, timer_str, unit_str_len);
   12eb6:	2203      	movs	r2, #3
   12eb8:	a903      	add	r1, sp, #12
   12eba:	a801      	add	r0, sp, #4
   12ebc:	f00b fceb 	bl	1e896 <memcpy>
	lut_idx = strtoul(unit_str, NULL, 2);
   12ec0:	2202      	movs	r2, #2
   12ec2:	4621      	mov	r1, r4
   12ec4:	a801      	add	r0, sp, #4
   12ec6:	f00b fbfa 	bl	1e6be <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   12eca:	2807      	cmp	r0, #7
   12ecc:	d90b      	bls.n	12ee6 <parse_psm_cfg+0xe2>
   12ece:	490e      	ldr	r1, [pc, #56]	; (12f08 <parse_psm_cfg+0x104>)
   12ed0:	4b0e      	ldr	r3, [pc, #56]	; (12f0c <parse_psm_cfg+0x108>)
		LOG_ERR("Unable to parse active time string");
   12ed2:	4812      	ldr	r0, [pc, #72]	; (12f1c <parse_psm_cfg+0x118>)
   12ed4:	1ac9      	subs	r1, r1, r3
   12ed6:	08c9      	lsrs	r1, r1, #3
   12ed8:	0189      	lsls	r1, r1, #6
   12eda:	f041 0101 	orr.w	r1, r1, #1
   12ede:	e7d0      	b.n	12e82 <parse_psm_cfg+0x7e>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   12ee0:	f04f 35ff 	mov.w	r5, #4294967295
   12ee4:	e7dd      	b.n	12ea2 <parse_psm_cfg+0x9e>
	timer_unit = t3324_lookup[lut_idx];
   12ee6:	4b0e      	ldr	r3, [pc, #56]	; (12f20 <parse_psm_cfg+0x11c>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   12ee8:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   12eea:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   12eee:	4621      	mov	r1, r4
   12ef0:	f10d 000f 	add.w	r0, sp, #15
   12ef4:	f00b fbe3 	bl	1e6be <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   12ef8:	b115      	cbz	r5, 12f00 <parse_psm_cfg+0xfc>
   12efa:	4368      	muls	r0, r5
   12efc:	6070      	str	r0, [r6, #4]
	return 0;
   12efe:	e7a8      	b.n	12e52 <parse_psm_cfg+0x4e>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   12f00:	f04f 30ff 	mov.w	r0, #4294967295
   12f04:	e7fa      	b.n	12efc <parse_psm_cfg+0xf8>
   12f06:	bf00      	nop
   12f08:	00020e50 	.word	0x00020e50
   12f0c:	00020e10 	.word	0x00020e10
   12f10:	00022427 	.word	0x00022427
   12f14:	00022444 	.word	0x00022444
   12f18:	00021104 	.word	0x00021104
   12f1c:	00022468 	.word	0x00022468
   12f20:	000210e4 	.word	0x000210e4

00012f24 <lte_lc_offline>:
{
   12f24:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   12f26:	2300      	movs	r3, #0
   12f28:	4804      	ldr	r0, [pc, #16]	; (12f3c <lte_lc_offline+0x18>)
   12f2a:	461a      	mov	r2, r3
   12f2c:	4619      	mov	r1, r3
   12f2e:	f7ff fa7f 	bl	12430 <at_cmd_write>
   12f32:	2800      	cmp	r0, #0
}
   12f34:	bf18      	it	ne
   12f36:	f06f 0004 	mvnne.w	r0, #4
   12f3a:	bd08      	pop	{r3, pc}
   12f3c:	00022c47 	.word	0x00022c47

00012f40 <lte_lc_normal>:
{
   12f40:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   12f42:	2300      	movs	r3, #0
   12f44:	4804      	ldr	r0, [pc, #16]	; (12f58 <lte_lc_normal+0x18>)
   12f46:	461a      	mov	r2, r3
   12f48:	4619      	mov	r1, r3
   12f4a:	f7ff fa71 	bl	12430 <at_cmd_write>
   12f4e:	2800      	cmp	r0, #0
}
   12f50:	bf18      	it	ne
   12f52:	f06f 0004 	mvnne.w	r0, #4
   12f56:	bd08      	pop	{r3, pc}
   12f58:	00022c3d 	.word	0x00022c3d

00012f5c <lte_lc_psm_req>:
{
   12f5c:	b500      	push	{lr}
	if (enable) {
   12f5e:	4603      	mov	r3, r0
{
   12f60:	b08d      	sub	sp, #52	; 0x34
	if (enable) {
   12f62:	b1a0      	cbz	r0, 12f8e <lte_lc_psm_req+0x32>
		snprintf(psm_req, sizeof(psm_req),
   12f64:	4b0c      	ldr	r3, [pc, #48]	; (12f98 <lte_lc_psm_req+0x3c>)
   12f66:	2128      	movs	r1, #40	; 0x28
   12f68:	4a0c      	ldr	r2, [pc, #48]	; (12f9c <lte_lc_psm_req+0x40>)
   12f6a:	9300      	str	r3, [sp, #0]
   12f6c:	a802      	add	r0, sp, #8
   12f6e:	4b0c      	ldr	r3, [pc, #48]	; (12fa0 <lte_lc_psm_req+0x44>)
   12f70:	f7fd fb52 	bl	10618 <snprintf>
		err = at_cmd_write(psm_req, NULL, 0, NULL);
   12f74:	2300      	movs	r3, #0
   12f76:	461a      	mov	r2, r3
   12f78:	4619      	mov	r1, r3
   12f7a:	a802      	add	r0, sp, #8
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   12f7c:	f7ff fa58 	bl	12430 <at_cmd_write>
		return -EIO;
   12f80:	2800      	cmp	r0, #0
}
   12f82:	bf18      	it	ne
   12f84:	f06f 0004 	mvnne.w	r0, #4
   12f88:	b00d      	add	sp, #52	; 0x34
   12f8a:	f85d fb04 	ldr.w	pc, [sp], #4
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   12f8e:	4602      	mov	r2, r0
   12f90:	4601      	mov	r1, r0
   12f92:	4804      	ldr	r0, [pc, #16]	; (12fa4 <lte_lc_psm_req+0x48>)
   12f94:	e7f2      	b.n	12f7c <lte_lc_psm_req+0x20>
   12f96:	bf00      	nop
   12f98:	2002007a 	.word	0x2002007a
   12f9c:	0002277b 	.word	0x0002277b
   12fa0:	20020083 	.word	0x20020083
   12fa4:	00022c51 	.word	0x00022c51

00012fa8 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   12fa8:	b530      	push	{r4, r5, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   12faa:	4605      	mov	r5, r0
{
   12fac:	b08f      	sub	sp, #60	; 0x3c
	switch (mode) {
   12fae:	2800      	cmp	r0, #0
   12fb0:	d040      	beq.n	13034 <lte_lc_system_mode_set+0x8c>
   12fb2:	1e43      	subs	r3, r0, #1
   12fb4:	2b04      	cmp	r3, #4
   12fb6:	d90e      	bls.n	12fd6 <lte_lc_system_mode_set+0x2e>
   12fb8:	4b1f      	ldr	r3, [pc, #124]	; (13038 <lte_lc_system_mode_set+0x90>)
   12fba:	4920      	ldr	r1, [pc, #128]	; (1303c <lte_lc_system_mode_set+0x94>)
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   12fbc:	4820      	ldr	r0, [pc, #128]	; (13040 <lte_lc_system_mode_set+0x98>)
   12fbe:	1ac9      	subs	r1, r1, r3
   12fc0:	08c9      	lsrs	r1, r1, #3
   12fc2:	0189      	lsls	r1, r1, #6
   12fc4:	f041 0101 	orr.w	r1, r1, #1
   12fc8:	f00a fe88 	bl	1dcdc <log_0>
		return -EINVAL;
   12fcc:	f06f 0415 	mvn.w	r4, #21

	sys_mode_current = mode;
	sys_mode_target = mode;

	return err;
}
   12fd0:	4620      	mov	r0, r4
   12fd2:	b00f      	add	sp, #60	; 0x3c
   12fd4:	bd30      	pop	{r4, r5, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   12fd6:	4b1b      	ldr	r3, [pc, #108]	; (13044 <lte_lc_system_mode_set+0x9c>)
   12fd8:	2132      	movs	r1, #50	; 0x32
   12fda:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   12fde:	4a1a      	ldr	r2, [pc, #104]	; (13048 <lte_lc_system_mode_set+0xa0>)
   12fe0:	a801      	add	r0, sp, #4
   12fe2:	f00a faaa 	bl	1d53a <snprintk>
	if (len < 0) {
   12fe6:	2800      	cmp	r0, #0
   12fe8:	da0c      	bge.n	13004 <lte_lc_system_mode_set+0x5c>
   12fea:	4b13      	ldr	r3, [pc, #76]	; (13038 <lte_lc_system_mode_set+0x90>)
   12fec:	4913      	ldr	r1, [pc, #76]	; (1303c <lte_lc_system_mode_set+0x94>)
		LOG_ERR("Could not construct system mode command");
   12fee:	4817      	ldr	r0, [pc, #92]	; (1304c <lte_lc_system_mode_set+0xa4>)
   12ff0:	1ac9      	subs	r1, r1, r3
   12ff2:	08c9      	lsrs	r1, r1, #3
   12ff4:	0189      	lsls	r1, r1, #6
   12ff6:	f041 0101 	orr.w	r1, r1, #1
   12ffa:	f00a fe6f 	bl	1dcdc <log_0>
		return -EFAULT;
   12ffe:	f06f 040d 	mvn.w	r4, #13
   13002:	e7e5      	b.n	12fd0 <lte_lc_system_mode_set+0x28>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   13004:	2300      	movs	r3, #0
   13006:	a801      	add	r0, sp, #4
   13008:	461a      	mov	r2, r3
   1300a:	4619      	mov	r1, r3
   1300c:	f7ff fa10 	bl	12430 <at_cmd_write>
	if (err) {
   13010:	4604      	mov	r4, r0
   13012:	b150      	cbz	r0, 1302a <lte_lc_system_mode_set+0x82>
   13014:	4a09      	ldr	r2, [pc, #36]	; (1303c <lte_lc_system_mode_set+0x94>)
   13016:	4b08      	ldr	r3, [pc, #32]	; (13038 <lte_lc_system_mode_set+0x90>)
		LOG_ERR("Could not send AT command, error: %d", err);
   13018:	4601      	mov	r1, r0
   1301a:	1ad2      	subs	r2, r2, r3
   1301c:	08d2      	lsrs	r2, r2, #3
   1301e:	0192      	lsls	r2, r2, #6
   13020:	480b      	ldr	r0, [pc, #44]	; (13050 <lte_lc_system_mode_set+0xa8>)
   13022:	f042 0201 	orr.w	r2, r2, #1
   13026:	f00a fe68 	bl	1dcfa <log_1>
	sys_mode_current = mode;
   1302a:	4b0a      	ldr	r3, [pc, #40]	; (13054 <lte_lc_system_mode_set+0xac>)
   1302c:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   1302e:	4b0a      	ldr	r3, [pc, #40]	; (13058 <lte_lc_system_mode_set+0xb0>)
   13030:	701d      	strb	r5, [r3, #0]
	return err;
   13032:	e7cd      	b.n	12fd0 <lte_lc_system_mode_set+0x28>
	switch (mode) {
   13034:	4604      	mov	r4, r0
   13036:	e7cb      	b.n	12fd0 <lte_lc_system_mode_set+0x28>
   13038:	00020e10 	.word	0x00020e10
   1303c:	00020e50 	.word	0x00020e50
   13040:	0002283e 	.word	0x0002283e
   13044:	000210cc 	.word	0x000210cc
   13048:	0002285c 	.word	0x0002285c
   1304c:	0002286f 	.word	0x0002286f
   13050:	00022897 	.word	0x00022897
   13054:	200236b9 	.word	0x200236b9
   13058:	2002008c 	.word	0x2002008c

0001305c <w_lte_lc_connect>:
{
   1305c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   13060:	4b23      	ldr	r3, [pc, #140]	; (130f0 <w_lte_lc_connect+0x94>)
   13062:	4c24      	ldr	r4, [pc, #144]	; (130f4 <w_lte_lc_connect+0x98>)
   13064:	4924      	ldr	r1, [pc, #144]	; (130f8 <w_lte_lc_connect+0x9c>)
   13066:	781b      	ldrb	r3, [r3, #0]
   13068:	1a64      	subs	r4, r4, r1
{
   1306a:	4605      	mov	r5, r0
   1306c:	08e4      	lsrs	r4, r4, #3
	if (!is_initialized) {
   1306e:	b94b      	cbnz	r3, 13084 <w_lte_lc_connect+0x28>
		LOG_ERR("The LTE link controller is not initialized");
   13070:	01a1      	lsls	r1, r4, #6
   13072:	4822      	ldr	r0, [pc, #136]	; (130fc <w_lte_lc_connect+0xa0>)
   13074:	f041 0101 	orr.w	r1, r1, #1
   13078:	f00a fe30 	bl	1dcdc <log_0>
		return -EPERM;
   1307c:	f04f 30ff 	mov.w	r0, #4294967295
}
   13080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   13084:	2201      	movs	r2, #1
   13086:	2100      	movs	r1, #0
   13088:	481d      	ldr	r0, [pc, #116]	; (13100 <w_lte_lc_connect+0xa4>)
   1308a:	f00d fb05 	bl	20698 <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   1308e:	4e1d      	ldr	r6, [pc, #116]	; (13104 <w_lte_lc_connect+0xa8>)
	return z_impl_k_sem_take(sem, timeout);
   13090:	4f1b      	ldr	r7, [pc, #108]	; (13100 <w_lte_lc_connect+0xa4>)
			LOG_INF("Network connection attempt timed out");
   13092:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1310c <w_lte_lc_connect+0xb0>
		err = lte_lc_system_mode_set(sys_mode_target);
   13096:	7830      	ldrb	r0, [r6, #0]
   13098:	f7ff ff86 	bl	12fa8 <lte_lc_system_mode_set>
		if (err) {
   1309c:	2800      	cmp	r0, #0
   1309e:	d1ef      	bne.n	13080 <w_lte_lc_connect+0x24>
		err = lte_lc_normal();
   130a0:	f7ff ff4e 	bl	12f40 <lte_lc_normal>
		if (err || !blocking) {
   130a4:	2800      	cmp	r0, #0
   130a6:	d1eb      	bne.n	13080 <w_lte_lc_connect+0x24>
   130a8:	2d00      	cmp	r5, #0
   130aa:	d0e9      	beq.n	13080 <w_lte_lc_connect+0x24>
   130ac:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   130b0:	2300      	movs	r3, #0
   130b2:	4638      	mov	r0, r7
   130b4:	f009 fe0c 	bl	1ccd0 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   130b8:	f110 0f0b 	cmn.w	r0, #11
   130bc:	d1e0      	bne.n	13080 <w_lte_lc_connect+0x24>
			LOG_INF("Network connection attempt timed out");
   130be:	ea4f 1984 	mov.w	r9, r4, lsl #6
   130c2:	f049 0903 	orr.w	r9, r9, #3
   130c6:	4649      	mov	r1, r9
   130c8:	4640      	mov	r0, r8
   130ca:	f00a fe07 	bl	1dcdc <log_0>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   130ce:	7833      	ldrb	r3, [r6, #0]
   130d0:	2b01      	cmp	r3, #1
   130d2:	d10a      	bne.n	130ea <w_lte_lc_connect+0x8e>
				sys_mode_target = sys_mode_fallback;
   130d4:	2302      	movs	r3, #2
   130d6:	7033      	strb	r3, [r6, #0]
				err = lte_lc_offline();
   130d8:	f7ff ff24 	bl	12f24 <lte_lc_offline>
				if (err) {
   130dc:	2800      	cmp	r0, #0
   130de:	d1cf      	bne.n	13080 <w_lte_lc_connect+0x24>
				LOG_INF("Using fallback network mode");
   130e0:	4649      	mov	r1, r9
   130e2:	4809      	ldr	r0, [pc, #36]	; (13108 <w_lte_lc_connect+0xac>)
   130e4:	f00a fdfa 	bl	1dcdc <log_0>
	} while (retry);
   130e8:	e7d5      	b.n	13096 <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   130ea:	f06f 003b 	mvn.w	r0, #59	; 0x3b
   130ee:	e7c7      	b.n	13080 <w_lte_lc_connect+0x24>
   130f0:	200236b2 	.word	0x200236b2
   130f4:	00020e50 	.word	0x00020e50
   130f8:	00020e10 	.word	0x00020e10
   130fc:	000228bc 	.word	0x000228bc
   13100:	20020a24 	.word	0x20020a24
   13104:	2002008c 	.word	0x2002008c
   13108:	0002290c 	.word	0x0002290c
   1310c:	000228e7 	.word	0x000228e7

00013110 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   13110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   13114:	2400      	movs	r4, #0
{
   13116:	b090      	sub	sp, #64	; 0x40
   13118:	4605      	mov	r5, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   1311a:	221a      	movs	r2, #26
   1311c:	4621      	mov	r1, r4
   1311e:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   13120:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   13124:	9408      	str	r4, [sp, #32]
   13126:	f00b fbe1 	bl	1e8ec <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   1312a:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   1312c:	e9cd 4404 	strd	r4, r4, [sp, #16]
   13130:	9406      	str	r4, [sp, #24]
   13132:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   13136:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   13138:	2d00      	cmp	r5, #0
   1313a:	f000 80ad 	beq.w	13298 <lte_lc_system_mode_get+0x188>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   1313e:	4623      	mov	r3, r4
   13140:	221e      	movs	r2, #30
   13142:	4857      	ldr	r0, [pc, #348]	; (132a0 <lte_lc_system_mode_get+0x190>)
   13144:	a908      	add	r1, sp, #32
   13146:	f7ff f973 	bl	12430 <at_cmd_write>
			   NULL);
	if (err) {
   1314a:	4604      	mov	r4, r0
   1314c:	b168      	cbz	r0, 1316a <lte_lc_system_mode_get+0x5a>
   1314e:	4955      	ldr	r1, [pc, #340]	; (132a4 <lte_lc_system_mode_get+0x194>)
   13150:	4b55      	ldr	r3, [pc, #340]	; (132a8 <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not send AT command");
   13152:	4856      	ldr	r0, [pc, #344]	; (132ac <lte_lc_system_mode_get+0x19c>)
   13154:	1ac9      	subs	r1, r1, r3
   13156:	08c9      	lsrs	r1, r1, #3
   13158:	0189      	lsls	r1, r1, #6
   1315a:	f041 0101 	orr.w	r1, r1, #1
   1315e:	f00a fdbd 	bl	1dcdc <log_0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   13162:	4620      	mov	r0, r4
   13164:	b010      	add	sp, #64	; 0x40
   13166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   1316a:	2105      	movs	r1, #5
   1316c:	a802      	add	r0, sp, #8
   1316e:	f00c ff57 	bl	20020 <at_params_list_init>
	if (err) {
   13172:	4604      	mov	r4, r0
   13174:	b158      	cbz	r0, 1318e <lte_lc_system_mode_get+0x7e>
   13176:	4b4c      	ldr	r3, [pc, #304]	; (132a8 <lte_lc_system_mode_get+0x198>)
   13178:	4a4a      	ldr	r2, [pc, #296]	; (132a4 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could init AT params list, error: %d", err);
   1317a:	4601      	mov	r1, r0
   1317c:	1ad2      	subs	r2, r2, r3
   1317e:	08d2      	lsrs	r2, r2, #3
   13180:	0192      	lsls	r2, r2, #6
   13182:	484b      	ldr	r0, [pc, #300]	; (132b0 <lte_lc_system_mode_get+0x1a0>)
   13184:	f042 0201 	orr.w	r2, r2, #1
   13188:	f00a fdb7 	bl	1dcfa <log_1>
		return err;
   1318c:	e7e9      	b.n	13162 <lte_lc_system_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   1318e:	4601      	mov	r1, r0
   13190:	2305      	movs	r3, #5
   13192:	aa02      	add	r2, sp, #8
   13194:	a808      	add	r0, sp, #32
   13196:	f7ff fda9 	bl	12cec <at_parser_max_params_from_str>
	if (err) {
   1319a:	4604      	mov	r4, r0
   1319c:	b158      	cbz	r0, 131b6 <lte_lc_system_mode_get+0xa6>
   1319e:	4a41      	ldr	r2, [pc, #260]	; (132a4 <lte_lc_system_mode_get+0x194>)
   131a0:	4b41      	ldr	r3, [pc, #260]	; (132a8 <lte_lc_system_mode_get+0x198>)
		LOG_ERR("Could not parse AT response, error: %d", err);
   131a2:	4601      	mov	r1, r0
   131a4:	1ad2      	subs	r2, r2, r3
   131a6:	08d2      	lsrs	r2, r2, #3
   131a8:	0192      	lsls	r2, r2, #6
   131aa:	4842      	ldr	r0, [pc, #264]	; (132b4 <lte_lc_system_mode_get+0x1a4>)
   131ac:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   131b0:	f00a fda3 	bl	1dcfa <log_1>
			goto clean_exit;
   131b4:	e013      	b.n	131de <lte_lc_system_mode_get+0xce>
	err = at_params_string_get(&resp_list,
   131b6:	4601      	mov	r1, r0
   131b8:	466b      	mov	r3, sp
   131ba:	aa04      	add	r2, sp, #16
   131bc:	a802      	add	r0, sp, #8
   131be:	f00c fffa 	bl	201b6 <at_params_string_get>
	if (err) {
   131c2:	4606      	mov	r6, r0
   131c4:	b178      	cbz	r0, 131e6 <lte_lc_system_mode_get+0xd6>
   131c6:	4b38      	ldr	r3, [pc, #224]	; (132a8 <lte_lc_system_mode_get+0x198>)
   131c8:	4a36      	ldr	r2, [pc, #216]	; (132a4 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   131ca:	4601      	mov	r1, r0
   131cc:	1ad2      	subs	r2, r2, r3
   131ce:	08d2      	lsrs	r2, r2, #3
   131d0:	0192      	lsls	r2, r2, #6
   131d2:	4839      	ldr	r0, [pc, #228]	; (132b8 <lte_lc_system_mode_get+0x1a8>)
   131d4:	f042 0201 	orr.w	r2, r2, #1
   131d8:	f00a fd8f 	bl	1dcfa <log_1>
		goto clean_exit;
   131dc:	4634      	mov	r4, r6
	at_params_list_free(&resp_list);
   131de:	a802      	add	r0, sp, #8
   131e0:	f00c ff4a 	bl	20078 <at_params_list_free>
	return err;
   131e4:	e7bd      	b.n	13162 <lte_lc_system_mode_get+0x52>
	if (!response_is_valid(response_prefix, response_prefix_len,
   131e6:	4a35      	ldr	r2, [pc, #212]	; (132bc <lte_lc_system_mode_get+0x1ac>)
   131e8:	9900      	ldr	r1, [sp, #0]
   131ea:	a804      	add	r0, sp, #16
   131ec:	f00d f806 	bl	201fc <response_is_valid>
   131f0:	b960      	cbnz	r0, 1320c <lte_lc_system_mode_get+0xfc>
   131f2:	4b2d      	ldr	r3, [pc, #180]	; (132a8 <lte_lc_system_mode_get+0x198>)
   131f4:	492b      	ldr	r1, [pc, #172]	; (132a4 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   131f6:	4832      	ldr	r0, [pc, #200]	; (132c0 <lte_lc_system_mode_get+0x1b0>)
   131f8:	1ac9      	subs	r1, r1, r3
   131fa:	08c9      	lsrs	r1, r1, #3
   131fc:	0189      	lsls	r1, r1, #6
   131fe:	f041 0101 	orr.w	r1, r1, #1
   13202:	f00a fd6b 	bl	1dcdc <log_0>
		err = -EIO;
   13206:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   1320a:	e7e8      	b.n	131de <lte_lc_system_mode_get+0xce>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   1320c:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   1320e:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   13210:	4639      	mov	r1, r7
   13212:	aa01      	add	r2, sp, #4
   13214:	a802      	add	r0, sp, #8
   13216:	f00c ffbb 	bl	20190 <at_params_int_get>
		if (err) {
   1321a:	4604      	mov	r4, r0
   1321c:	b148      	cbz	r0, 13232 <lte_lc_system_mode_get+0x122>
   1321e:	4a21      	ldr	r2, [pc, #132]	; (132a4 <lte_lc_system_mode_get+0x194>)
   13220:	4b21      	ldr	r3, [pc, #132]	; (132a8 <lte_lc_system_mode_get+0x198>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   13222:	4601      	mov	r1, r0
   13224:	1ad2      	subs	r2, r2, r3
   13226:	08d2      	lsrs	r2, r2, #3
   13228:	0192      	lsls	r2, r2, #6
   1322a:	4826      	ldr	r0, [pc, #152]	; (132c4 <lte_lc_system_mode_get+0x1b4>)
   1322c:	f042 0201 	orr.w	r2, r2, #1
   13230:	e7be      	b.n	131b0 <lte_lc_system_mode_get+0xa0>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   13232:	9b01      	ldr	r3, [sp, #4]
   13234:	b113      	cbz	r3, 1323c <lte_lc_system_mode_get+0x12c>
   13236:	fa08 f307 	lsl.w	r3, r8, r7
   1323a:	431e      	orrs	r6, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   1323c:	3701      	adds	r7, #1
   1323e:	2f05      	cmp	r7, #5
   13240:	d1e6      	bne.n	13210 <lte_lc_system_mode_get+0x100>
	switch (bitmask) {
   13242:	2e0c      	cmp	r6, #12
   13244:	d81b      	bhi.n	1327e <lte_lc_system_mode_get+0x16e>
   13246:	e8df f006 	tbb	[pc, r6]
   1324a:	1a07      	.short	0x1a07
   1324c:	1a121a10 	.word	0x1a121a10
   13250:	1a141a1a 	.word	0x1a141a1a
   13254:	1a16      	.short	0x1a16
   13256:	18          	.byte	0x18
   13257:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   13258:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   1325a:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   1325c:	4b1a      	ldr	r3, [pc, #104]	; (132c8 <lte_lc_system_mode_get+0x1b8>)
   1325e:	782a      	ldrb	r2, [r5, #0]
   13260:	7819      	ldrb	r1, [r3, #0]
   13262:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   13264:	bf18      	it	ne
   13266:	701a      	strbne	r2, [r3, #0]
   13268:	e7b9      	b.n	131de <lte_lc_system_mode_get+0xce>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   1326a:	2301      	movs	r3, #1
   1326c:	e7f5      	b.n	1325a <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   1326e:	2302      	movs	r3, #2
   13270:	e7f3      	b.n	1325a <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   13272:	2303      	movs	r3, #3
   13274:	e7f1      	b.n	1325a <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   13276:	2304      	movs	r3, #4
   13278:	e7ef      	b.n	1325a <lte_lc_system_mode_get+0x14a>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   1327a:	2305      	movs	r3, #5
   1327c:	e7ed      	b.n	1325a <lte_lc_system_mode_get+0x14a>
   1327e:	4b0a      	ldr	r3, [pc, #40]	; (132a8 <lte_lc_system_mode_get+0x198>)
   13280:	4908      	ldr	r1, [pc, #32]	; (132a4 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   13282:	4812      	ldr	r0, [pc, #72]	; (132cc <lte_lc_system_mode_get+0x1bc>)
   13284:	1ac9      	subs	r1, r1, r3
   13286:	08c9      	lsrs	r1, r1, #3
   13288:	0189      	lsls	r1, r1, #6
   1328a:	f041 0101 	orr.w	r1, r1, #1
   1328e:	f00a fd25 	bl	1dcdc <log_0>
		err = -EFAULT;
   13292:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   13296:	e7a2      	b.n	131de <lte_lc_system_mode_get+0xce>
		return -EINVAL;
   13298:	f06f 0415 	mvn.w	r4, #21
   1329c:	e761      	b.n	13162 <lte_lc_system_mode_get+0x52>
   1329e:	bf00      	nop
   132a0:	00022928 	.word	0x00022928
   132a4:	00020e50 	.word	0x00020e50
   132a8:	00020e10 	.word	0x00020e10
   132ac:	00022938 	.word	0x00022938
   132b0:	00022952 	.word	0x00022952
   132b4:	00022977 	.word	0x00022977
   132b8:	000227b9 	.word	0x000227b9
   132bc:	0002299e 	.word	0x0002299e
   132c0:	000229ab 	.word	0x000229ab
   132c4:	000229c8 	.word	0x000229c8
   132c8:	200236b9 	.word	0x200236b9
   132cc:	000229f0 	.word	0x000229f0

000132d0 <w_lte_lc_init>:
{
   132d0:	b570      	push	{r4, r5, r6, lr}
	if (is_initialized) {
   132d2:	4e3a      	ldr	r6, [pc, #232]	; (133bc <w_lte_lc_init+0xec>)
{
   132d4:	b08e      	sub	sp, #56	; 0x38
	if (is_initialized) {
   132d6:	7833      	ldrb	r3, [r6, #0]
   132d8:	2b00      	cmp	r3, #0
   132da:	d168      	bne.n	133ae <w_lte_lc_init+0xde>
	err = lte_lc_system_mode_get(&sys_mode_current);
   132dc:	4d38      	ldr	r5, [pc, #224]	; (133c0 <w_lte_lc_init+0xf0>)
   132de:	4628      	mov	r0, r5
   132e0:	f7ff ff16 	bl	13110 <lte_lc_system_mode_get>
	if (err) {
   132e4:	4604      	mov	r4, r0
   132e6:	b168      	cbz	r0, 13304 <w_lte_lc_init+0x34>
   132e8:	4a36      	ldr	r2, [pc, #216]	; (133c4 <w_lte_lc_init+0xf4>)
   132ea:	4b37      	ldr	r3, [pc, #220]	; (133c8 <w_lte_lc_init+0xf8>)
		LOG_ERR("Could not get current system mode, error: %d", err);
   132ec:	4601      	mov	r1, r0
   132ee:	1ad2      	subs	r2, r2, r3
   132f0:	08d2      	lsrs	r2, r2, #3
   132f2:	0192      	lsls	r2, r2, #6
   132f4:	4835      	ldr	r0, [pc, #212]	; (133cc <w_lte_lc_init+0xfc>)
   132f6:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Can't register AT handler, error: %d", err);
   132fa:	f00a fcfe 	bl	1dcfa <log_1>
}
   132fe:	4620      	mov	r0, r4
   13300:	b00e      	add	sp, #56	; 0x38
   13302:	bd70      	pop	{r4, r5, r6, pc}
	err = at_notif_register_handler(NULL, at_handler);
   13304:	4932      	ldr	r1, [pc, #200]	; (133d0 <w_lte_lc_init+0x100>)
   13306:	f7ff f99d 	bl	12644 <at_notif_register_handler>
	if (err) {
   1330a:	4604      	mov	r4, r0
   1330c:	b148      	cbz	r0, 13322 <w_lte_lc_init+0x52>
   1330e:	4a2d      	ldr	r2, [pc, #180]	; (133c4 <w_lte_lc_init+0xf4>)
   13310:	4b2d      	ldr	r3, [pc, #180]	; (133c8 <w_lte_lc_init+0xf8>)
		LOG_ERR("Can't register AT handler, error: %d", err);
   13312:	4601      	mov	r1, r0
   13314:	1ad2      	subs	r2, r2, r3
   13316:	08d2      	lsrs	r2, r2, #3
   13318:	0192      	lsls	r2, r2, #6
   1331a:	482e      	ldr	r0, [pc, #184]	; (133d4 <w_lte_lc_init+0x104>)
   1331c:	f042 0201 	orr.w	r2, r2, #1
   13320:	e7eb      	b.n	132fa <w_lte_lc_init+0x2a>
	if (sys_mode_current != sys_mode_target) {
   13322:	4b2d      	ldr	r3, [pc, #180]	; (133d8 <w_lte_lc_init+0x108>)
   13324:	7818      	ldrb	r0, [r3, #0]
   13326:	782b      	ldrb	r3, [r5, #0]
   13328:	4283      	cmp	r3, r0
   1332a:	d00d      	beq.n	13348 <w_lte_lc_init+0x78>
		err = lte_lc_system_mode_set(sys_mode_target);
   1332c:	f7ff fe3c 	bl	12fa8 <lte_lc_system_mode_set>
		if (err) {
   13330:	4604      	mov	r4, r0
   13332:	b148      	cbz	r0, 13348 <w_lte_lc_init+0x78>
   13334:	4a23      	ldr	r2, [pc, #140]	; (133c4 <w_lte_lc_init+0xf4>)
   13336:	4b24      	ldr	r3, [pc, #144]	; (133c8 <w_lte_lc_init+0xf8>)
			LOG_ERR("Could not set system mode, error: %d", err);
   13338:	4601      	mov	r1, r0
   1333a:	1ad2      	subs	r2, r2, r3
   1333c:	08d2      	lsrs	r2, r2, #3
   1333e:	0192      	lsls	r2, r2, #6
   13340:	4826      	ldr	r0, [pc, #152]	; (133dc <w_lte_lc_init+0x10c>)
   13342:	f042 0201 	orr.w	r2, r2, #1
   13346:	e7d8      	b.n	132fa <w_lte_lc_init+0x2a>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   13348:	2300      	movs	r3, #0
   1334a:	4825      	ldr	r0, [pc, #148]	; (133e0 <w_lte_lc_init+0x110>)
   1334c:	461a      	mov	r2, r3
   1334e:	4619      	mov	r1, r3
   13350:	f7ff f86e 	bl	12430 <at_cmd_write>
   13354:	4604      	mov	r4, r0
   13356:	bb68      	cbnz	r0, 133b4 <w_lte_lc_init+0xe4>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   13358:	4602      	mov	r2, r0
   1335a:	4603      	mov	r3, r0
   1335c:	4601      	mov	r1, r0
   1335e:	4821      	ldr	r0, [pc, #132]	; (133e4 <w_lte_lc_init+0x114>)
   13360:	f7ff f866 	bl	12430 <at_cmd_write>
	if (err) {
   13364:	4602      	mov	r2, r0
   13366:	b1f8      	cbz	r0, 133a8 <w_lte_lc_init+0xd8>
   13368:	4b17      	ldr	r3, [pc, #92]	; (133c8 <w_lte_lc_init+0xf8>)
   1336a:	4d16      	ldr	r5, [pc, #88]	; (133c4 <w_lte_lc_init+0xf4>)
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   1336c:	491d      	ldr	r1, [pc, #116]	; (133e4 <w_lte_lc_init+0x114>)
   1336e:	1aed      	subs	r5, r5, r3
   13370:	08ed      	lsrs	r5, r5, #3
   13372:	01ad      	lsls	r5, r5, #6
   13374:	f045 0502 	orr.w	r5, r5, #2
   13378:	462b      	mov	r3, r5
   1337a:	481b      	ldr	r0, [pc, #108]	; (133e8 <w_lte_lc_init+0x118>)
   1337c:	f00a fcd4 	bl	1dd28 <log_2>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   13380:	462a      	mov	r2, r5
   13382:	4918      	ldr	r1, [pc, #96]	; (133e4 <w_lte_lc_init+0x114>)
   13384:	4819      	ldr	r0, [pc, #100]	; (133ec <w_lte_lc_init+0x11c>)
   13386:	f00a fcb8 	bl	1dcfa <log_1>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   1338a:	4623      	mov	r3, r4
   1338c:	2232      	movs	r2, #50	; 0x32
   1338e:	4818      	ldr	r0, [pc, #96]	; (133f0 <w_lte_lc_init+0x120>)
   13390:	a901      	add	r1, sp, #4
   13392:	f7ff f84d 	bl	12430 <at_cmd_write>
		if (err == 0) {
   13396:	b938      	cbnz	r0, 133a8 <w_lte_lc_init+0xd8>
			LOG_WRN("Current modem firmware version: %s",
   13398:	a801      	add	r0, sp, #4
   1339a:	f7fb fadd 	bl	e958 <log_strdup>
   1339e:	462a      	mov	r2, r5
   133a0:	4601      	mov	r1, r0
   133a2:	4814      	ldr	r0, [pc, #80]	; (133f4 <w_lte_lc_init+0x124>)
   133a4:	f00a fca9 	bl	1dcfa <log_1>
	is_initialized = true;
   133a8:	2301      	movs	r3, #1
   133aa:	7033      	strb	r3, [r6, #0]
	return 0;
   133ac:	e7a7      	b.n	132fe <w_lte_lc_init+0x2e>
		return -EALREADY;
   133ae:	f06f 0444 	mvn.w	r4, #68	; 0x44
   133b2:	e7a4      	b.n	132fe <w_lte_lc_init+0x2e>
		return -EIO;
   133b4:	f06f 0404 	mvn.w	r4, #4
   133b8:	e7a1      	b.n	132fe <w_lte_lc_init+0x2e>
   133ba:	bf00      	nop
   133bc:	200236b2 	.word	0x200236b2
   133c0:	200236b9 	.word	0x200236b9
   133c4:	00020e50 	.word	0x00020e50
   133c8:	00020e10 	.word	0x00020e10
   133cc:	00022a1c 	.word	0x00022a1c
   133d0:	0000cba1 	.word	0x0000cba1
   133d4:	00022a49 	.word	0x00022a49
   133d8:	2002008c 	.word	0x2002008c
   133dc:	00022a6e 	.word	0x00022a6e
   133e0:	00022c1b 	.word	0x00022c1b
   133e4:	00022c26 	.word	0x00022c26
   133e8:	00022a93 	.word	0x00022a93
   133ec:	00022ac5 	.word	0x00022ac5
   133f0:	00022af0 	.word	0x00022af0
   133f4:	00022af8 	.word	0x00022af8

000133f8 <lte_lc_edrx_req>:
{
   133f8:	b570      	push	{r4, r5, r6, lr}
	if (sys_mode_current == LTE_LC_SYSTEM_MODE_NONE) {
   133fa:	4e41      	ldr	r6, [pc, #260]	; (13500 <lte_lc_edrx_req+0x108>)
{
   133fc:	4605      	mov	r5, r0
	if (sys_mode_current == LTE_LC_SYSTEM_MODE_NONE) {
   133fe:	7833      	ldrb	r3, [r6, #0]
{
   13400:	b08a      	sub	sp, #40	; 0x28
	if (sys_mode_current == LTE_LC_SYSTEM_MODE_NONE) {
   13402:	b363      	cbz	r3, 1345e <lte_lc_edrx_req+0x66>
	switch (sys_mode_current) {
   13404:	7831      	ldrb	r1, [r6, #0]
   13406:	1e4b      	subs	r3, r1, #1
   13408:	2b04      	cmp	r3, #4
   1340a:	d831      	bhi.n	13470 <lte_lc_edrx_req+0x78>
   1340c:	e8df f003 	tbb	[pc, r3]
   13410:	3d30033d 	.word	0x3d30033d
   13414:	03          	.byte	0x03
   13415:	00          	.byte	0x00
   13416:	2605      	movs	r6, #5
	if (enable) {
   13418:	2d00      	cmp	r5, #0
   1341a:	d038      	beq.n	1348e <lte_lc_edrx_req+0x96>
		snprintf(edrx_req, sizeof(edrx_req),
   1341c:	4b39      	ldr	r3, [pc, #228]	; (13504 <lte_lc_edrx_req+0x10c>)
   1341e:	2119      	movs	r1, #25
   13420:	4a39      	ldr	r2, [pc, #228]	; (13508 <lte_lc_edrx_req+0x110>)
   13422:	9300      	str	r3, [sp, #0]
   13424:	a803      	add	r0, sp, #12
   13426:	4633      	mov	r3, r6
   13428:	f7fd f8f6 	bl	10618 <snprintf>
		err = at_cmd_write(edrx_req, NULL, 0, NULL);
   1342c:	2300      	movs	r3, #0
   1342e:	461a      	mov	r2, r3
   13430:	4619      	mov	r1, r3
   13432:	a803      	add	r0, sp, #12
		err = at_cmd_write(edrx_disable, NULL, 0, NULL);
   13434:	f7fe fffc 	bl	12430 <at_cmd_write>
   13438:	4604      	mov	r4, r0
	if (err) {
   1343a:	b368      	cbz	r0, 13498 <lte_lc_edrx_req+0xa0>
   1343c:	4a33      	ldr	r2, [pc, #204]	; (1350c <lte_lc_edrx_req+0x114>)
   1343e:	4b34      	ldr	r3, [pc, #208]	; (13510 <lte_lc_edrx_req+0x118>)
		LOG_ERR("Failed to %s eDRX, error: %d",
   13440:	4934      	ldr	r1, [pc, #208]	; (13514 <lte_lc_edrx_req+0x11c>)
   13442:	1a9b      	subs	r3, r3, r2
   13444:	4602      	mov	r2, r0
   13446:	4834      	ldr	r0, [pc, #208]	; (13518 <lte_lc_edrx_req+0x120>)
   13448:	08db      	lsrs	r3, r3, #3
   1344a:	2d00      	cmp	r5, #0
   1344c:	bf08      	it	eq
   1344e:	4601      	moveq	r1, r0
   13450:	019b      	lsls	r3, r3, #6
   13452:	4832      	ldr	r0, [pc, #200]	; (1351c <lte_lc_edrx_req+0x124>)
   13454:	f043 0301 	orr.w	r3, r3, #1
			LOG_ERR("Failed to request PTW (%s), error: %d",
   13458:	f00a fc66 	bl	1dd28 <log_2>
			return err;
   1345c:	e005      	b.n	1346a <lte_lc_edrx_req+0x72>
		err = lte_lc_system_mode_get(&sys_mode_current);
   1345e:	4630      	mov	r0, r6
   13460:	f7ff fe56 	bl	13110 <lte_lc_system_mode_get>
		if (err) {
   13464:	4604      	mov	r4, r0
   13466:	2800      	cmp	r0, #0
   13468:	d0cc      	beq.n	13404 <lte_lc_edrx_req+0xc>
}
   1346a:	4620      	mov	r0, r4
   1346c:	b00a      	add	sp, #40	; 0x28
   1346e:	bd70      	pop	{r4, r5, r6, pc}
   13470:	4b26      	ldr	r3, [pc, #152]	; (1350c <lte_lc_edrx_req+0x114>)
   13472:	4a27      	ldr	r2, [pc, #156]	; (13510 <lte_lc_edrx_req+0x118>)
		LOG_ERR("Cannot request eDRX for this system mode (%d)",
   13474:	482a      	ldr	r0, [pc, #168]	; (13520 <lte_lc_edrx_req+0x128>)
   13476:	1ad2      	subs	r2, r2, r3
   13478:	08d2      	lsrs	r2, r2, #3
   1347a:	0192      	lsls	r2, r2, #6
   1347c:	f042 0201 	orr.w	r2, r2, #1
   13480:	f00a fc3b 	bl	1dcfa <log_1>
		return -EOPNOTSUPP;
   13484:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   13488:	e7ef      	b.n	1346a <lte_lc_edrx_req+0x72>
		actt = AT_CEDRXS_ACTT_WB;
   1348a:	2604      	movs	r6, #4
   1348c:	e7c4      	b.n	13418 <lte_lc_edrx_req+0x20>
		err = at_cmd_write(edrx_disable, NULL, 0, NULL);
   1348e:	462b      	mov	r3, r5
   13490:	462a      	mov	r2, r5
   13492:	4629      	mov	r1, r5
   13494:	4823      	ldr	r0, [pc, #140]	; (13524 <lte_lc_edrx_req+0x12c>)
   13496:	e7cd      	b.n	13434 <lte_lc_edrx_req+0x3c>
	if (strlen(ptw_param) == 4) {
   13498:	4d23      	ldr	r5, [pc, #140]	; (13528 <lte_lc_edrx_req+0x130>)
   1349a:	4628      	mov	r0, r5
   1349c:	f00b f9c9 	bl	1e832 <strlen>
   134a0:	2804      	cmp	r0, #4
   134a2:	d1e2      	bne.n	1346a <lte_lc_edrx_req+0x72>
		len = snprintf(ptw, sizeof(ptw),
   134a4:	4633      	mov	r3, r6
   134a6:	2119      	movs	r1, #25
   134a8:	4a20      	ldr	r2, [pc, #128]	; (1352c <lte_lc_edrx_req+0x134>)
   134aa:	9500      	str	r5, [sp, #0]
   134ac:	a803      	add	r0, sp, #12
   134ae:	f7fd f8b3 	bl	10618 <snprintf>
		if ((len < 0) || (len >= sizeof(ptw))) {
   134b2:	2818      	cmp	r0, #24
   134b4:	d90c      	bls.n	134d0 <lte_lc_edrx_req+0xd8>
   134b6:	4b15      	ldr	r3, [pc, #84]	; (1350c <lte_lc_edrx_req+0x114>)
   134b8:	4915      	ldr	r1, [pc, #84]	; (13510 <lte_lc_edrx_req+0x118>)
			LOG_ERR("Failed to create PTW request");
   134ba:	481d      	ldr	r0, [pc, #116]	; (13530 <lte_lc_edrx_req+0x138>)
   134bc:	1ac9      	subs	r1, r1, r3
   134be:	08c9      	lsrs	r1, r1, #3
   134c0:	0189      	lsls	r1, r1, #6
   134c2:	f041 0101 	orr.w	r1, r1, #1
   134c6:	f00a fc09 	bl	1dcdc <log_0>
			return -ENOMEM;
   134ca:	f06f 040b 	mvn.w	r4, #11
   134ce:	e7cc      	b.n	1346a <lte_lc_edrx_req+0x72>
		err = at_cmd_write(ptw, NULL, 0, NULL);
   134d0:	4623      	mov	r3, r4
   134d2:	4622      	mov	r2, r4
   134d4:	4621      	mov	r1, r4
   134d6:	a803      	add	r0, sp, #12
   134d8:	f7fe ffaa 	bl	12430 <at_cmd_write>
		if (err) {
   134dc:	4604      	mov	r4, r0
   134de:	2800      	cmp	r0, #0
   134e0:	d0c3      	beq.n	1346a <lte_lc_edrx_req+0x72>
   134e2:	4b0a      	ldr	r3, [pc, #40]	; (1350c <lte_lc_edrx_req+0x114>)
   134e4:	4d0a      	ldr	r5, [pc, #40]	; (13510 <lte_lc_edrx_req+0x118>)
			LOG_ERR("Failed to request PTW (%s), error: %d",
   134e6:	a803      	add	r0, sp, #12
   134e8:	1aed      	subs	r5, r5, r3
   134ea:	f7fb fa35 	bl	e958 <log_strdup>
   134ee:	08ed      	lsrs	r5, r5, #3
   134f0:	01ad      	lsls	r5, r5, #6
   134f2:	f045 0501 	orr.w	r5, r5, #1
   134f6:	4601      	mov	r1, r0
   134f8:	462b      	mov	r3, r5
   134fa:	4622      	mov	r2, r4
   134fc:	480d      	ldr	r0, [pc, #52]	; (13534 <lte_lc_edrx_req+0x13c>)
   134fe:	e7ab      	b.n	13458 <lte_lc_edrx_req+0x60>
   13500:	200236b9 	.word	0x200236b9
   13504:	20020075 	.word	0x20020075
   13508:	00022b49 	.word	0x00022b49
   1350c:	00020e10 	.word	0x00020e10
   13510:	00020e50 	.word	0x00020e50
   13514:	00022b5d 	.word	0x00022b5d
   13518:	00022b64 	.word	0x00022b64
   1351c:	00022b6c 	.word	0x00022b6c
   13520:	00022b1b 	.word	0x00022b1b
   13524:	00022c31 	.word	0x00022c31
   13528:	200236b4 	.word	0x200236b4
   1352c:	00022b89 	.word	0x00022b89
   13530:	00022b9a 	.word	0x00022b9a
   13534:	00022bb7 	.word	0x00022bb7

00013538 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   13538:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1353a:	f7fb fb83 	bl	ec44 <z_impl_log_panic>
   1353e:	4b06      	ldr	r3, [pc, #24]	; (13558 <k_sys_fatal_error_handler+0x20>)
   13540:	4906      	ldr	r1, [pc, #24]	; (1355c <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   13542:	4807      	ldr	r0, [pc, #28]	; (13560 <k_sys_fatal_error_handler+0x28>)
   13544:	1ac9      	subs	r1, r1, r3
   13546:	08c9      	lsrs	r1, r1, #3
   13548:	0189      	lsls	r1, r1, #6
   1354a:	f041 0101 	orr.w	r1, r1, #1
   1354e:	f00a fbc5 	bl	1dcdc <log_0>
	sys_arch_reboot(0);
   13552:	2000      	movs	r0, #0
   13554:	f7fc fe62 	bl	1021c <sys_arch_reboot>

	CODE_UNREACHABLE;
   13558:	00020e10 	.word	0x00020e10
   1355c:	00020e40 	.word	0x00020e40
   13560:	00022c5b 	.word	0x00022c5b

00013564 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   13564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   13568:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1356a:	4c21      	ldr	r4, [pc, #132]	; (135f0 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   1356c:	4e21      	ldr	r6, [pc, #132]	; (135f4 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1356e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   13572:	f8df 9088 	ldr.w	r9, [pc, #136]	; 135fc <check_ext_api_requests+0x98>
{
   13576:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   13578:	45a8      	cmp	r8, r5
   1357a:	d803      	bhi.n	13584 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   1357c:	2000      	movs	r0, #0
   1357e:	b005      	add	sp, #20
   13580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   13584:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13586:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1358a:	681f      	ldr	r7, [r3, #0]
   1358c:	ab01      	add	r3, sp, #4
   1358e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   13592:	220c      	movs	r2, #12
   13594:	4619      	mov	r1, r3
   13596:	4638      	mov	r0, r7
   13598:	f00b f96d 	bl	1e876 <memcmp>
   1359c:	b990      	cbnz	r0, 135c4 <check_ext_api_requests+0x60>
   1359e:	b18f      	cbz	r7, 135c4 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   135a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   135a2:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   135a4:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   135a6:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   135a8:	4291      	cmp	r1, r2
   135aa:	d10b      	bne.n	135c4 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   135ac:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   135ae:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   135b0:	4291      	cmp	r1, r2
   135b2:	d807      	bhi.n	135c4 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   135b4:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   135b6:	4291      	cmp	r1, r2
   135b8:	d904      	bls.n	135c4 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   135ba:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   135bc:	695b      	ldr	r3, [r3, #20]
   135be:	ea32 0303 	bics.w	r3, r2, r3
   135c2:	d00a      	beq.n	135da <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   135c4:	6a27      	ldr	r7, [r4, #32]
   135c6:	b167      	cbz	r7, 135e2 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   135c8:	480b      	ldr	r0, [pc, #44]	; (135f8 <check_ext_api_requests+0x94>)
   135ca:	f009 ffa9 	bl	1d520 <printk>
			k_panic();
   135ce:	4040      	eors	r0, r0
   135d0:	f380 8811 	msr	BASEPRI, r0
   135d4:	f04f 0004 	mov.w	r0, #4
   135d8:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   135da:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   135dc:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   135de:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   135e0:	e7ca      	b.n	13578 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   135e2:	4648      	mov	r0, r9
   135e4:	f009 ff9c 	bl	1d520 <printk>
			*ext_api_req->ext_api = NULL;
   135e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   135ea:	601f      	str	r7, [r3, #0]
   135ec:	e7f5      	b.n	135da <check_ext_api_requests+0x76>
   135ee:	bf00      	nop
   135f0:	0000c23c 	.word	0x0000c23c
   135f4:	00020ecc 	.word	0x00020ecc
   135f8:	00022c78 	.word	0x00022c78
   135fc:	00022ca1 	.word	0x00022ca1

00013600 <packet_free_cb>:
   13600:	b510      	push	{r4, lr}
   13602:	4604      	mov	r4, r0
   13604:	6800      	ldr	r0, [r0, #0]
   13606:	f004 fef7 	bl	183f8 <rpc_logobj_client_data_free>
   1360a:	68a0      	ldr	r0, [r4, #8]
   1360c:	b118      	cbz	r0, 13616 <packet_free_cb+0x16>
   1360e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13612:	f007 bced 	b.w	1aff0 <nrf_free>
   13616:	bd10      	pop	{r4, pc}

00013618 <logobj_event_handler>:
   13618:	b530      	push	{r4, r5, lr}
   1361a:	4b3b      	ldr	r3, [pc, #236]	; (13708 <logobj_event_handler+0xf0>)
   1361c:	b085      	sub	sp, #20
   1361e:	681d      	ldr	r5, [r3, #0]
   13620:	2d00      	cmp	r5, #0
   13622:	d04c      	beq.n	136be <logobj_event_handler+0xa6>
   13624:	f248 0302 	movw	r3, #32770	; 0x8002
   13628:	4299      	cmp	r1, r3
   1362a:	d053      	beq.n	136d4 <logobj_event_handler+0xbc>
   1362c:	d91c      	bls.n	13668 <logobj_event_handler+0x50>
   1362e:	f248 0303 	movw	r3, #32771	; 0x8003
   13632:	4299      	cmp	r1, r3
   13634:	d05a      	beq.n	136ec <logobj_event_handler+0xd4>
   13636:	f249 0301 	movw	r3, #36865	; 0x9001
   1363a:	4299      	cmp	r1, r3
   1363c:	d147      	bne.n	136ce <logobj_event_handler+0xb6>
   1363e:	2400      	movs	r4, #0
   13640:	6843      	ldr	r3, [r0, #4]
   13642:	6802      	ldr	r2, [r0, #0]
   13644:	e9cd 4402 	strd	r4, r4, [sp, #8]
   13648:	e9cd 2300 	strd	r2, r3, [sp]
   1364c:	69e8      	ldr	r0, [r5, #28]
   1364e:	4669      	mov	r1, sp
   13650:	6803      	ldr	r3, [r0, #0]
   13652:	685b      	ldr	r3, [r3, #4]
   13654:	4798      	blx	r3
   13656:	3001      	adds	r0, #1
   13658:	d04e      	beq.n	136f8 <logobj_event_handler+0xe0>
   1365a:	4620      	mov	r0, r4
   1365c:	682b      	ldr	r3, [r5, #0]
   1365e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   13662:	602b      	str	r3, [r5, #0]
   13664:	b005      	add	sp, #20
   13666:	bd30      	pop	{r4, r5, pc}
   13668:	f248 0301 	movw	r3, #32769	; 0x8001
   1366c:	4299      	cmp	r1, r3
   1366e:	d12e      	bne.n	136ce <logobj_event_handler+0xb6>
   13670:	68c3      	ldr	r3, [r0, #12]
   13672:	2b00      	cmp	r3, #0
   13674:	d135      	bne.n	136e2 <logobj_event_handler+0xca>
   13676:	6828      	ldr	r0, [r5, #0]
   13678:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1367c:	d03e      	beq.n	136fc <logobj_event_handler+0xe4>
   1367e:	682b      	ldr	r3, [r5, #0]
   13680:	b29b      	uxth	r3, r3
   13682:	2b01      	cmp	r3, #1
   13684:	d105      	bne.n	13692 <logobj_event_handler+0x7a>
   13686:	682b      	ldr	r3, [r5, #0]
   13688:	0c1b      	lsrs	r3, r3, #16
   1368a:	041b      	lsls	r3, r3, #16
   1368c:	f043 0302 	orr.w	r3, r3, #2
   13690:	602b      	str	r3, [r5, #0]
   13692:	4b1e      	ldr	r3, [pc, #120]	; (1370c <logobj_event_handler+0xf4>)
   13694:	781a      	ldrb	r2, [r3, #0]
   13696:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1369a:	2a00      	cmp	r2, #0
   1369c:	d031      	beq.n	13702 <logobj_event_handler+0xea>
   1369e:	4a1c      	ldr	r2, [pc, #112]	; (13710 <logobj_event_handler+0xf8>)
   136a0:	7811      	ldrb	r1, [r2, #0]
   136a2:	b909      	cbnz	r1, 136a8 <logobj_event_handler+0x90>
   136a4:	2101      	movs	r1, #1
   136a6:	7011      	strb	r1, [r2, #0]
   136a8:	2000      	movs	r0, #0
   136aa:	7018      	strb	r0, [r3, #0]
   136ac:	682b      	ldr	r3, [r5, #0]
   136ae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   136b2:	602b      	str	r3, [r5, #0]
   136b4:	682b      	ldr	r3, [r5, #0]
   136b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   136ba:	602b      	str	r3, [r5, #0]
   136bc:	e7d2      	b.n	13664 <logobj_event_handler+0x4c>
   136be:	6800      	ldr	r0, [r0, #0]
   136c0:	2800      	cmp	r0, #0
   136c2:	d0cf      	beq.n	13664 <logobj_event_handler+0x4c>
   136c4:	f004 fe98 	bl	183f8 <rpc_logobj_client_data_free>
   136c8:	4628      	mov	r0, r5
   136ca:	b005      	add	sp, #20
   136cc:	bd30      	pop	{r4, r5, pc}
   136ce:	2000      	movs	r0, #0
   136d0:	b005      	add	sp, #20
   136d2:	bd30      	pop	{r4, r5, pc}
   136d4:	682b      	ldr	r3, [r5, #0]
   136d6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   136da:	d00b      	beq.n	136f4 <logobj_event_handler+0xdc>
   136dc:	68c0      	ldr	r0, [r0, #12]
   136de:	2800      	cmp	r0, #0
   136e0:	d0e4      	beq.n	136ac <logobj_event_handler+0x94>
   136e2:	230e      	movs	r3, #14
   136e4:	2000      	movs	r0, #0
   136e6:	606b      	str	r3, [r5, #4]
   136e8:	b005      	add	sp, #20
   136ea:	bd30      	pop	{r4, r5, pc}
   136ec:	68c3      	ldr	r3, [r0, #12]
   136ee:	2b01      	cmp	r3, #1
   136f0:	d1a5      	bne.n	1363e <logobj_event_handler+0x26>
   136f2:	e7f6      	b.n	136e2 <logobj_event_handler+0xca>
   136f4:	4618      	mov	r0, r3
   136f6:	e7b5      	b.n	13664 <logobj_event_handler+0x4c>
   136f8:	2002      	movs	r0, #2
   136fa:	e7b3      	b.n	13664 <logobj_event_handler+0x4c>
   136fc:	230e      	movs	r3, #14
   136fe:	606b      	str	r3, [r5, #4]
   13700:	e7b0      	b.n	13664 <logobj_event_handler+0x4c>
   13702:	4a03      	ldr	r2, [pc, #12]	; (13710 <logobj_event_handler+0xf8>)
   13704:	7011      	strb	r1, [r2, #0]
   13706:	e7cf      	b.n	136a8 <logobj_event_handler+0x90>
   13708:	20020a50 	.word	0x20020a50
   1370c:	200236ba 	.word	0x200236ba
   13710:	200236bb 	.word	0x200236bb

00013714 <logobj_interface_init>:
   13714:	2300      	movs	r3, #0
   13716:	b510      	push	{r4, lr}
   13718:	4808      	ldr	r0, [pc, #32]	; (1373c <logobj_interface_init+0x28>)
   1371a:	4c09      	ldr	r4, [pc, #36]	; (13740 <logobj_interface_init+0x2c>)
   1371c:	4909      	ldr	r1, [pc, #36]	; (13744 <logobj_interface_init+0x30>)
   1371e:	4a0a      	ldr	r2, [pc, #40]	; (13748 <logobj_interface_init+0x34>)
   13720:	7023      	strb	r3, [r4, #0]
   13722:	6003      	str	r3, [r0, #0]
   13724:	700b      	strb	r3, [r1, #0]
   13726:	6013      	str	r3, [r2, #0]
   13728:	f004 fe2a 	bl	18380 <rpc_logobj_client_init>
   1372c:	b918      	cbnz	r0, 13736 <logobj_interface_init+0x22>
   1372e:	2201      	movs	r2, #1
   13730:	4b06      	ldr	r3, [pc, #24]	; (1374c <logobj_interface_init+0x38>)
   13732:	701a      	strb	r2, [r3, #0]
   13734:	bd10      	pop	{r4, pc}
   13736:	f04f 30ff 	mov.w	r0, #4294967295
   1373a:	bd10      	pop	{r4, pc}
   1373c:	20020a50 	.word	0x20020a50
   13740:	200236bb 	.word	0x200236bb
   13744:	200236ba 	.word	0x200236ba
   13748:	20020a4c 	.word	0x20020a4c
   1374c:	200236bc 	.word	0x200236bc

00013750 <logobj_interface_open>:
   13750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13754:	2400      	movs	r4, #0
   13756:	4b5b      	ldr	r3, [pc, #364]	; (138c4 <logobj_interface_open+0x174>)
   13758:	b084      	sub	sp, #16
   1375a:	781b      	ldrb	r3, [r3, #0]
   1375c:	9401      	str	r4, [sp, #4]
   1375e:	2b00      	cmp	r3, #0
   13760:	f000 809f 	beq.w	138a2 <logobj_interface_open+0x152>
   13764:	2866      	cmp	r0, #102	; 0x66
   13766:	4680      	mov	r8, r0
   13768:	f040 808f 	bne.w	1388a <logobj_interface_open+0x13a>
   1376c:	2902      	cmp	r1, #2
   1376e:	4689      	mov	r9, r1
   13770:	f040 808b 	bne.w	1388a <logobj_interface_open+0x13a>
   13774:	f240 2305 	movw	r3, #517	; 0x205
   13778:	429a      	cmp	r2, r3
   1377a:	4692      	mov	sl, r2
   1377c:	f040 8085 	bne.w	1388a <logobj_interface_open+0x13a>
   13780:	4f51      	ldr	r7, [pc, #324]	; (138c8 <logobj_interface_open+0x178>)
   13782:	683d      	ldr	r5, [r7, #0]
   13784:	2d00      	cmp	r5, #0
   13786:	f040 8086 	bne.w	13896 <logobj_interface_open+0x146>
   1378a:	4a50      	ldr	r2, [pc, #320]	; (138cc <logobj_interface_open+0x17c>)
   1378c:	a801      	add	r0, sp, #4
   1378e:	f008 f807 	bl	1b7a0 <interface_socket_allocate>
   13792:	9b01      	ldr	r3, [sp, #4]
   13794:	4606      	mov	r6, r0
   13796:	2b00      	cmp	r3, #0
   13798:	f000 808d 	beq.w	138b6 <logobj_interface_open+0x166>
   1379c:	4629      	mov	r1, r5
   1379e:	2204      	movs	r2, #4
   137a0:	484b      	ldr	r0, [pc, #300]	; (138d0 <logobj_interface_open+0x180>)
   137a2:	603b      	str	r3, [r7, #0]
   137a4:	f00b f8a2 	bl	1e8ec <memset>
   137a8:	9c01      	ldr	r4, [sp, #4]
   137aa:	4629      	mov	r1, r5
   137ac:	e9c4 8903 	strd	r8, r9, [r4, #12]
   137b0:	f8c4 a014 	str.w	sl, [r4, #20]
   137b4:	a802      	add	r0, sp, #8
   137b6:	f004 fde9 	bl	1838c <rpc_logobj_client_request_alloc>
   137ba:	2800      	cmp	r0, #0
   137bc:	d142      	bne.n	13844 <logobj_interface_open+0xf4>
   137be:	2201      	movs	r2, #1
   137c0:	2104      	movs	r1, #4
   137c2:	9b02      	ldr	r3, [sp, #8]
   137c4:	4d43      	ldr	r5, [pc, #268]	; (138d4 <logobj_interface_open+0x184>)
   137c6:	7358      	strb	r0, [r3, #13]
   137c8:	7398      	strb	r0, [r3, #14]
   137ca:	73d8      	strb	r0, [r3, #15]
   137cc:	7258      	strb	r0, [r3, #9]
   137ce:	7298      	strb	r0, [r3, #10]
   137d0:	72d8      	strb	r0, [r3, #11]
   137d2:	7219      	strb	r1, [r3, #8]
   137d4:	702a      	strb	r2, [r5, #0]
   137d6:	731a      	strb	r2, [r3, #12]
   137d8:	6822      	ldr	r2, [r4, #0]
   137da:	4618      	mov	r0, r3
   137dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   137e0:	6022      	str	r2, [r4, #0]
   137e2:	f247 0101 	movw	r1, #28673	; 0x7001
   137e6:	f004 fde9 	bl	183bc <rpc_logobj_client_request_send>
   137ea:	bb68      	cbnz	r0, 13848 <logobj_interface_open+0xf8>
   137ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   137ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   137f2:	2900      	cmp	r1, #0
   137f4:	bf08      	it	eq
   137f6:	f04f 31ff 	moveq.w	r1, #4294967295
   137fa:	ab04      	add	r3, sp, #16
   137fc:	f843 1d04 	str.w	r1, [r3, #-4]!
   13800:	4630      	mov	r0, r6
   13802:	4611      	mov	r1, r2
   13804:	f008 f87e 	bl	1b904 <interface_socket_wait>
   13808:	4604      	mov	r4, r0
   1380a:	b310      	cbz	r0, 13852 <logobj_interface_open+0x102>
   1380c:	9a01      	ldr	r2, [sp, #4]
   1380e:	2e00      	cmp	r6, #0
   13810:	6813      	ldr	r3, [r2, #0]
   13812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13816:	6013      	str	r3, [r2, #0]
   13818:	9a01      	ldr	r2, [sp, #4]
   1381a:	6813      	ldr	r3, [r2, #0]
   1381c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   13820:	6013      	str	r3, [r2, #0]
   13822:	9a01      	ldr	r2, [sp, #4]
   13824:	6813      	ldr	r3, [r2, #0]
   13826:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1382a:	6013      	str	r3, [r2, #0]
   1382c:	da3f      	bge.n	138ae <logobj_interface_open+0x15e>
   1382e:	2300      	movs	r3, #0
   13830:	4620      	mov	r0, r4
   13832:	603b      	str	r3, [r7, #0]
   13834:	f04f 36ff 	mov.w	r6, #4294967295
   13838:	f7fd fe16 	bl	11468 <bsd_os_errno_set>
   1383c:	4630      	mov	r0, r6
   1383e:	b004      	add	sp, #16
   13840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13844:	240c      	movs	r4, #12
   13846:	e7e1      	b.n	1380c <logobj_interface_open+0xbc>
   13848:	9802      	ldr	r0, [sp, #8]
   1384a:	f004 fdcd 	bl	183e8 <rpc_logobj_client_message_free>
   1384e:	2405      	movs	r4, #5
   13850:	e7dc      	b.n	1380c <logobj_interface_open+0xbc>
   13852:	4630      	mov	r0, r6
   13854:	f008 f8ca 	bl	1b9ec <interface_socket_from_handle_get>
   13858:	b120      	cbz	r0, 13864 <logobj_interface_open+0x114>
   1385a:	6844      	ldr	r4, [r0, #4]
   1385c:	b114      	cbz	r4, 13864 <logobj_interface_open+0x114>
   1385e:	2300      	movs	r3, #0
   13860:	6043      	str	r3, [r0, #4]
   13862:	e7d3      	b.n	1380c <logobj_interface_open+0xbc>
   13864:	4630      	mov	r0, r6
   13866:	9a01      	ldr	r2, [sp, #4]
   13868:	6813      	ldr	r3, [r2, #0]
   1386a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1386e:	6013      	str	r3, [r2, #0]
   13870:	9a01      	ldr	r2, [sp, #4]
   13872:	6813      	ldr	r3, [r2, #0]
   13874:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   13878:	6013      	str	r3, [r2, #0]
   1387a:	9a01      	ldr	r2, [sp, #4]
   1387c:	6813      	ldr	r3, [r2, #0]
   1387e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   13882:	6013      	str	r3, [r2, #0]
   13884:	b004      	add	sp, #16
   13886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1388a:	2016      	movs	r0, #22
   1388c:	f7fd fdec 	bl	11468 <bsd_os_errno_set>
   13890:	f04f 36ff 	mov.w	r6, #4294967295
   13894:	e7d2      	b.n	1383c <logobj_interface_open+0xec>
   13896:	2001      	movs	r0, #1
   13898:	f7fd fde6 	bl	11468 <bsd_os_errno_set>
   1389c:	f04f 36ff 	mov.w	r6, #4294967295
   138a0:	e7cc      	b.n	1383c <logobj_interface_open+0xec>
   138a2:	2070      	movs	r0, #112	; 0x70
   138a4:	f7fd fde0 	bl	11468 <bsd_os_errno_set>
   138a8:	f04f 36ff 	mov.w	r6, #4294967295
   138ac:	e7c6      	b.n	1383c <logobj_interface_open+0xec>
   138ae:	4630      	mov	r0, r6
   138b0:	f007 ffda 	bl	1b868 <interface_socket_free>
   138b4:	e7bb      	b.n	1382e <logobj_interface_open+0xde>
   138b6:	2018      	movs	r0, #24
   138b8:	f7fd fdd6 	bl	11468 <bsd_os_errno_set>
   138bc:	f04f 36ff 	mov.w	r6, #4294967295
   138c0:	e7bc      	b.n	1383c <logobj_interface_open+0xec>
   138c2:	bf00      	nop
   138c4:	200236bc 	.word	0x200236bc
   138c8:	20020a50 	.word	0x20020a50
   138cc:	00013601 	.word	0x00013601
   138d0:	20020a4c 	.word	0x20020a4c
   138d4:	200236ba 	.word	0x200236ba

000138d8 <logobj_interface_read>:
   138d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   138dc:	b087      	sub	sp, #28
   138de:	2900      	cmp	r1, #0
   138e0:	d06b      	beq.n	139ba <logobj_interface_read+0xe2>
   138e2:	2a00      	cmp	r2, #0
   138e4:	4617      	mov	r7, r2
   138e6:	dd68      	ble.n	139ba <logobj_interface_read+0xe2>
   138e8:	461d      	mov	r5, r3
   138ea:	4680      	mov	r8, r0
   138ec:	460e      	mov	r6, r1
   138ee:	f008 f87d 	bl	1b9ec <interface_socket_from_handle_get>
   138f2:	4604      	mov	r4, r0
   138f4:	2800      	cmp	r0, #0
   138f6:	d066      	beq.n	139c6 <logobj_interface_read+0xee>
   138f8:	bb4d      	cbnz	r5, 1394e <logobj_interface_read+0x76>
   138fa:	69e0      	ldr	r0, [r4, #28]
   138fc:	07aa      	lsls	r2, r5, #30
   138fe:	6803      	ldr	r3, [r0, #0]
   13900:	68db      	ldr	r3, [r3, #12]
   13902:	d52d      	bpl.n	13960 <logobj_interface_read+0x88>
   13904:	4798      	blx	r3
   13906:	3001      	adds	r0, #1
   13908:	d047      	beq.n	1399a <logobj_interface_read+0xc2>
   1390a:	6823      	ldr	r3, [r4, #0]
   1390c:	69e0      	ldr	r0, [r4, #28]
   1390e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   13912:	d044      	beq.n	1399e <logobj_interface_read+0xc6>
   13914:	2100      	movs	r1, #0
   13916:	6823      	ldr	r3, [r4, #0]
   13918:	462a      	mov	r2, r5
   1391a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1391e:	6023      	str	r3, [r4, #0]
   13920:	e9cd 1104 	strd	r1, r1, [sp, #16]
   13924:	e9cd 6702 	strd	r6, r7, [sp, #8]
   13928:	6803      	ldr	r3, [r0, #0]
   1392a:	a902      	add	r1, sp, #8
   1392c:	689b      	ldr	r3, [r3, #8]
   1392e:	4798      	blx	r3
   13930:	4605      	mov	r5, r0
   13932:	69e0      	ldr	r0, [r4, #28]
   13934:	6803      	ldr	r3, [r0, #0]
   13936:	68db      	ldr	r3, [r3, #12]
   13938:	4798      	blx	r3
   1393a:	3001      	adds	r0, #1
   1393c:	d003      	beq.n	13946 <logobj_interface_read+0x6e>
   1393e:	6823      	ldr	r3, [r4, #0]
   13940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   13944:	6023      	str	r3, [r4, #0]
   13946:	4628      	mov	r0, r5
   13948:	b007      	add	sp, #28
   1394a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1394e:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   13952:	d1d2      	bne.n	138fa <logobj_interface_read+0x22>
   13954:	202d      	movs	r0, #45	; 0x2d
   13956:	f7fd fd87 	bl	11468 <bsd_os_errno_set>
   1395a:	f04f 35ff 	mov.w	r5, #4294967295
   1395e:	e7f2      	b.n	13946 <logobj_interface_read+0x6e>
   13960:	6822      	ldr	r2, [r4, #0]
   13962:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   13966:	d1cd      	bne.n	13904 <logobj_interface_read+0x2c>
   13968:	4798      	blx	r3
   1396a:	1c43      	adds	r3, r0, #1
   1396c:	d1cd      	bne.n	1390a <logobj_interface_read+0x32>
   1396e:	6a22      	ldr	r2, [r4, #32]
   13970:	ab06      	add	r3, sp, #24
   13972:	2a00      	cmp	r2, #0
   13974:	bf18      	it	ne
   13976:	4610      	movne	r0, r2
   13978:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1397c:	f843 0d14 	str.w	r0, [r3, #-20]!
   13980:	4611      	mov	r1, r2
   13982:	4640      	mov	r0, r8
   13984:	f007 ffbe 	bl	1b904 <interface_socket_wait>
   13988:	b158      	cbz	r0, 139a2 <logobj_interface_read+0xca>
   1398a:	f04f 35ff 	mov.w	r5, #4294967295
   1398e:	f7fd fd6b 	bl	11468 <bsd_os_errno_set>
   13992:	4628      	mov	r0, r5
   13994:	b007      	add	sp, #28
   13996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1399a:	2023      	movs	r0, #35	; 0x23
   1399c:	e7f5      	b.n	1398a <logobj_interface_read+0xb2>
   1399e:	461d      	mov	r5, r3
   139a0:	e7c8      	b.n	13934 <logobj_interface_read+0x5c>
   139a2:	4640      	mov	r0, r8
   139a4:	f008 f822 	bl	1b9ec <interface_socket_from_handle_get>
   139a8:	4603      	mov	r3, r0
   139aa:	2800      	cmp	r0, #0
   139ac:	d0ad      	beq.n	1390a <logobj_interface_read+0x32>
   139ae:	6840      	ldr	r0, [r0, #4]
   139b0:	2800      	cmp	r0, #0
   139b2:	d0aa      	beq.n	1390a <logobj_interface_read+0x32>
   139b4:	f8c3 9004 	str.w	r9, [r3, #4]
   139b8:	e7e7      	b.n	1398a <logobj_interface_read+0xb2>
   139ba:	2016      	movs	r0, #22
   139bc:	f7fd fd54 	bl	11468 <bsd_os_errno_set>
   139c0:	f04f 35ff 	mov.w	r5, #4294967295
   139c4:	e7bf      	b.n	13946 <logobj_interface_read+0x6e>
   139c6:	2009      	movs	r0, #9
   139c8:	f7fd fd4e 	bl	11468 <bsd_os_errno_set>
   139cc:	f04f 35ff 	mov.w	r5, #4294967295
   139d0:	e7b9      	b.n	13946 <logobj_interface_read+0x6e>
   139d2:	bf00      	nop

000139d4 <logobj_interface_write>:
   139d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139d8:	b082      	sub	sp, #8
   139da:	2900      	cmp	r1, #0
   139dc:	d06b      	beq.n	13ab6 <logobj_interface_write+0xe2>
   139de:	2a04      	cmp	r2, #4
   139e0:	d169      	bne.n	13ab6 <logobj_interface_write+0xe2>
   139e2:	461f      	mov	r7, r3
   139e4:	4606      	mov	r6, r0
   139e6:	460d      	mov	r5, r1
   139e8:	f008 f800 	bl	1b9ec <interface_socket_from_handle_get>
   139ec:	4604      	mov	r4, r0
   139ee:	2800      	cmp	r0, #0
   139f0:	d074      	beq.n	13adc <logobj_interface_write+0x108>
   139f2:	b1e7      	cbz	r7, 13a2e <logobj_interface_write+0x5a>
   139f4:	07b8      	lsls	r0, r7, #30
   139f6:	d56b      	bpl.n	13ad0 <logobj_interface_write+0xfc>
   139f8:	6823      	ldr	r3, [r4, #0]
   139fa:	039b      	lsls	r3, r3, #14
   139fc:	d564      	bpl.n	13ac8 <logobj_interface_write+0xf4>
   139fe:	2700      	movs	r7, #0
   13a00:	6823      	ldr	r3, [r4, #0]
   13a02:	2100      	movs	r1, #0
   13a04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   13a08:	6023      	str	r3, [r4, #0]
   13a0a:	4668      	mov	r0, sp
   13a0c:	f8d5 8000 	ldr.w	r8, [r5]
   13a10:	f004 fcbc 	bl	1838c <rpc_logobj_client_request_alloc>
   13a14:	b198      	cbz	r0, 13a3e <logobj_interface_write+0x6a>
   13a16:	200c      	movs	r0, #12
   13a18:	6823      	ldr	r3, [r4, #0]
   13a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13a1e:	6023      	str	r3, [r4, #0]
   13a20:	f7fd fd22 	bl	11468 <bsd_os_errno_set>
   13a24:	f04f 30ff 	mov.w	r0, #4294967295
   13a28:	b002      	add	sp, #8
   13a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a2e:	6803      	ldr	r3, [r0, #0]
   13a30:	00d9      	lsls	r1, r3, #3
   13a32:	d4e1      	bmi.n	139f8 <logobj_interface_write+0x24>
   13a34:	6803      	ldr	r3, [r0, #0]
   13a36:	039a      	lsls	r2, r3, #14
   13a38:	d548      	bpl.n	13acc <logobj_interface_write+0xf8>
   13a3a:	2701      	movs	r7, #1
   13a3c:	e7e0      	b.n	13a00 <logobj_interface_write+0x2c>
   13a3e:	2504      	movs	r5, #4
   13a40:	9b00      	ldr	r3, [sp, #0]
   13a42:	f247 0103 	movw	r1, #28675	; 0x7003
   13a46:	f8c3 800c 	str.w	r8, [r3, #12]
   13a4a:	7258      	strb	r0, [r3, #9]
   13a4c:	7298      	strb	r0, [r3, #10]
   13a4e:	72d8      	strb	r0, [r3, #11]
   13a50:	721d      	strb	r5, [r3, #8]
   13a52:	4618      	mov	r0, r3
   13a54:	f004 fcb2 	bl	183bc <rpc_logobj_client_request_send>
   13a58:	4680      	mov	r8, r0
   13a5a:	bb18      	cbnz	r0, 13aa4 <logobj_interface_write+0xd0>
   13a5c:	b1d7      	cbz	r7, 13a94 <logobj_interface_write+0xc0>
   13a5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13a60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13a64:	2900      	cmp	r1, #0
   13a66:	bf08      	it	eq
   13a68:	f04f 31ff 	moveq.w	r1, #4294967295
   13a6c:	ab02      	add	r3, sp, #8
   13a6e:	f843 1d04 	str.w	r1, [r3, #-4]!
   13a72:	4630      	mov	r0, r6
   13a74:	4611      	mov	r1, r2
   13a76:	f007 ff45 	bl	1b904 <interface_socket_wait>
   13a7a:	b120      	cbz	r0, 13a86 <logobj_interface_write+0xb2>
   13a7c:	6823      	ldr	r3, [r4, #0]
   13a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13a82:	6023      	str	r3, [r4, #0]
   13a84:	e7cc      	b.n	13a20 <logobj_interface_write+0x4c>
   13a86:	4630      	mov	r0, r6
   13a88:	f007 ffb0 	bl	1b9ec <interface_socket_from_handle_get>
   13a8c:	4603      	mov	r3, r0
   13a8e:	b108      	cbz	r0, 13a94 <logobj_interface_write+0xc0>
   13a90:	6840      	ldr	r0, [r0, #4]
   13a92:	b9b0      	cbnz	r0, 13ac2 <logobj_interface_write+0xee>
   13a94:	4628      	mov	r0, r5
   13a96:	6823      	ldr	r3, [r4, #0]
   13a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13a9c:	6023      	str	r3, [r4, #0]
   13a9e:	b002      	add	sp, #8
   13aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13aa4:	9800      	ldr	r0, [sp, #0]
   13aa6:	f004 fc9f 	bl	183e8 <rpc_logobj_client_message_free>
   13aaa:	6823      	ldr	r3, [r4, #0]
   13aac:	2005      	movs	r0, #5
   13aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13ab2:	6023      	str	r3, [r4, #0]
   13ab4:	e7b4      	b.n	13a20 <logobj_interface_write+0x4c>
   13ab6:	2016      	movs	r0, #22
   13ab8:	f7fd fcd6 	bl	11468 <bsd_os_errno_set>
   13abc:	f04f 30ff 	mov.w	r0, #4294967295
   13ac0:	e7b2      	b.n	13a28 <logobj_interface_write+0x54>
   13ac2:	f8c3 8004 	str.w	r8, [r3, #4]
   13ac6:	e7d9      	b.n	13a7c <logobj_interface_write+0xa8>
   13ac8:	2073      	movs	r0, #115	; 0x73
   13aca:	e7a9      	b.n	13a20 <logobj_interface_write+0x4c>
   13acc:	2009      	movs	r0, #9
   13ace:	e7a7      	b.n	13a20 <logobj_interface_write+0x4c>
   13ad0:	202d      	movs	r0, #45	; 0x2d
   13ad2:	f7fd fcc9 	bl	11468 <bsd_os_errno_set>
   13ad6:	f04f 30ff 	mov.w	r0, #4294967295
   13ada:	e7a5      	b.n	13a28 <logobj_interface_write+0x54>
   13adc:	2009      	movs	r0, #9
   13ade:	f7fd fcc3 	bl	11468 <bsd_os_errno_set>
   13ae2:	f04f 30ff 	mov.w	r0, #4294967295
   13ae6:	e79f      	b.n	13a28 <logobj_interface_write+0x54>

00013ae8 <logobj_interface_setopt>:
   13ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13aea:	2901      	cmp	r1, #1
   13aec:	b085      	sub	sp, #20
   13aee:	d06d      	beq.n	13bcc <logobj_interface_setopt+0xe4>
   13af0:	461e      	mov	r6, r3
   13af2:	f240 2305 	movw	r3, #517	; 0x205
   13af6:	4299      	cmp	r1, r3
   13af8:	f040 80a0 	bne.w	13c3c <logobj_interface_setopt+0x154>
   13afc:	4607      	mov	r7, r0
   13afe:	4615      	mov	r5, r2
   13b00:	f007 ff74 	bl	1b9ec <interface_socket_from_handle_get>
   13b04:	4604      	mov	r4, r0
   13b06:	2800      	cmp	r0, #0
   13b08:	f000 80c3 	beq.w	13c92 <logobj_interface_setopt+0x1aa>
   13b0c:	2d01      	cmp	r5, #1
   13b0e:	d019      	beq.n	13b44 <logobj_interface_setopt+0x5c>
   13b10:	2d02      	cmp	r5, #2
   13b12:	d010      	beq.n	13b36 <logobj_interface_setopt+0x4e>
   13b14:	252a      	movs	r5, #42	; 0x2a
   13b16:	6803      	ldr	r3, [r0, #0]
   13b18:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   13b1c:	6023      	str	r3, [r4, #0]
   13b1e:	6823      	ldr	r3, [r4, #0]
   13b20:	4628      	mov	r0, r5
   13b22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   13b26:	6023      	str	r3, [r4, #0]
   13b28:	f7fd fc9e 	bl	11468 <bsd_os_errno_set>
   13b2c:	f04f 35ff 	mov.w	r5, #4294967295
   13b30:	4628      	mov	r0, r5
   13b32:	b005      	add	sp, #20
   13b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b36:	b116      	cbz	r6, 13b3e <logobj_interface_setopt+0x56>
   13b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b3a:	2b01      	cmp	r3, #1
   13b3c:	d04e      	beq.n	13bdc <logobj_interface_setopt+0xf4>
   13b3e:	6823      	ldr	r3, [r4, #0]
   13b40:	2516      	movs	r5, #22
   13b42:	e7e9      	b.n	13b18 <logobj_interface_setopt+0x30>
   13b44:	2e00      	cmp	r6, #0
   13b46:	d0fa      	beq.n	13b3e <logobj_interface_setopt+0x56>
   13b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b4a:	2b04      	cmp	r3, #4
   13b4c:	d1f7      	bne.n	13b3e <logobj_interface_setopt+0x56>
   13b4e:	2100      	movs	r1, #0
   13b50:	a803      	add	r0, sp, #12
   13b52:	f004 fc1b 	bl	1838c <rpc_logobj_client_request_alloc>
   13b56:	4605      	mov	r5, r0
   13b58:	2800      	cmp	r0, #0
   13b5a:	d175      	bne.n	13c48 <logobj_interface_setopt+0x160>
   13b5c:	9803      	ldr	r0, [sp, #12]
   13b5e:	2208      	movs	r2, #8
   13b60:	4629      	mov	r1, r5
   13b62:	300c      	adds	r0, #12
   13b64:	f00a fec2 	bl	1e8ec <memset>
   13b68:	9803      	ldr	r0, [sp, #12]
   13b6a:	4631      	mov	r1, r6
   13b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13b6e:	300c      	adds	r0, #12
   13b70:	f00a fe91 	bl	1e896 <memcpy>
   13b74:	2308      	movs	r3, #8
   13b76:	9803      	ldr	r0, [sp, #12]
   13b78:	f247 0102 	movw	r1, #28674	; 0x7002
   13b7c:	7203      	strb	r3, [r0, #8]
   13b7e:	7245      	strb	r5, [r0, #9]
   13b80:	7285      	strb	r5, [r0, #10]
   13b82:	72c5      	strb	r5, [r0, #11]
   13b84:	6823      	ldr	r3, [r4, #0]
   13b86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   13b8a:	6023      	str	r3, [r4, #0]
   13b8c:	f004 fc16 	bl	183bc <rpc_logobj_client_request_send>
   13b90:	2800      	cmp	r0, #0
   13b92:	d178      	bne.n	13c86 <logobj_interface_setopt+0x19e>
   13b94:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13b96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   13b9a:	2900      	cmp	r1, #0
   13b9c:	bf08      	it	eq
   13b9e:	f04f 31ff 	moveq.w	r1, #4294967295
   13ba2:	ab04      	add	r3, sp, #16
   13ba4:	f843 1d08 	str.w	r1, [r3, #-8]!
   13ba8:	4638      	mov	r0, r7
   13baa:	4611      	mov	r1, r2
   13bac:	f007 feaa 	bl	1b904 <interface_socket_wait>
   13bb0:	4605      	mov	r5, r0
   13bb2:	2800      	cmp	r0, #0
   13bb4:	d140      	bne.n	13c38 <logobj_interface_setopt+0x150>
   13bb6:	4638      	mov	r0, r7
   13bb8:	f007 ff18 	bl	1b9ec <interface_socket_from_handle_get>
   13bbc:	2800      	cmp	r0, #0
   13bbe:	d04e      	beq.n	13c5e <logobj_interface_setopt+0x176>
   13bc0:	6843      	ldr	r3, [r0, #4]
   13bc2:	2b00      	cmp	r3, #0
   13bc4:	d04b      	beq.n	13c5e <logobj_interface_setopt+0x176>
   13bc6:	6045      	str	r5, [r0, #4]
   13bc8:	461d      	mov	r5, r3
   13bca:	e035      	b.n	13c38 <logobj_interface_setopt+0x150>
   13bcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13bce:	9400      	str	r4, [sp, #0]
   13bd0:	f007 ff34 	bl	1ba3c <interface_socket_setopt>
   13bd4:	4605      	mov	r5, r0
   13bd6:	4628      	mov	r0, r5
   13bd8:	b005      	add	sp, #20
   13bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13bdc:	2100      	movs	r1, #0
   13bde:	a802      	add	r0, sp, #8
   13be0:	7835      	ldrb	r5, [r6, #0]
   13be2:	f004 fbd3 	bl	1838c <rpc_logobj_client_request_alloc>
   13be6:	bb78      	cbnz	r0, 13c48 <logobj_interface_setopt+0x160>
   13be8:	2d01      	cmp	r5, #1
   13bea:	bf08      	it	eq
   13bec:	4b2c      	ldreq	r3, [pc, #176]	; (13ca0 <logobj_interface_setopt+0x1b8>)
   13bee:	f04f 0204 	mov.w	r2, #4
   13bf2:	bf08      	it	eq
   13bf4:	701d      	strbeq	r5, [r3, #0]
   13bf6:	2300      	movs	r3, #0
   13bf8:	9802      	ldr	r0, [sp, #8]
   13bfa:	f247 0101 	movw	r1, #28673	; 0x7001
   13bfe:	7243      	strb	r3, [r0, #9]
   13c00:	60c5      	str	r5, [r0, #12]
   13c02:	7283      	strb	r3, [r0, #10]
   13c04:	72c3      	strb	r3, [r0, #11]
   13c06:	7202      	strb	r2, [r0, #8]
   13c08:	6823      	ldr	r3, [r4, #0]
   13c0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   13c0e:	6023      	str	r3, [r4, #0]
   13c10:	f004 fbd4 	bl	183bc <rpc_logobj_client_request_send>
   13c14:	4606      	mov	r6, r0
   13c16:	bb80      	cbnz	r0, 13c7a <logobj_interface_setopt+0x192>
   13c18:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13c1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   13c1e:	2900      	cmp	r1, #0
   13c20:	bf08      	it	eq
   13c22:	f04f 31ff 	moveq.w	r1, #4294967295
   13c26:	ab04      	add	r3, sp, #16
   13c28:	f843 1d04 	str.w	r1, [r3, #-4]!
   13c2c:	4638      	mov	r0, r7
   13c2e:	4611      	mov	r1, r2
   13c30:	f007 fe68 	bl	1b904 <interface_socket_wait>
   13c34:	4605      	mov	r5, r0
   13c36:	b150      	cbz	r0, 13c4e <logobj_interface_setopt+0x166>
   13c38:	6823      	ldr	r3, [r4, #0]
   13c3a:	e76d      	b.n	13b18 <logobj_interface_setopt+0x30>
   13c3c:	202a      	movs	r0, #42	; 0x2a
   13c3e:	f7fd fc13 	bl	11468 <bsd_os_errno_set>
   13c42:	f04f 35ff 	mov.w	r5, #4294967295
   13c46:	e773      	b.n	13b30 <logobj_interface_setopt+0x48>
   13c48:	6823      	ldr	r3, [r4, #0]
   13c4a:	250c      	movs	r5, #12
   13c4c:	e764      	b.n	13b18 <logobj_interface_setopt+0x30>
   13c4e:	4638      	mov	r0, r7
   13c50:	f007 fecc 	bl	1b9ec <interface_socket_from_handle_get>
   13c54:	b140      	cbz	r0, 13c68 <logobj_interface_setopt+0x180>
   13c56:	6845      	ldr	r5, [r0, #4]
   13c58:	b135      	cbz	r5, 13c68 <logobj_interface_setopt+0x180>
   13c5a:	6046      	str	r6, [r0, #4]
   13c5c:	e7ec      	b.n	13c38 <logobj_interface_setopt+0x150>
   13c5e:	4631      	mov	r1, r6
   13c60:	2204      	movs	r2, #4
   13c62:	4810      	ldr	r0, [pc, #64]	; (13ca4 <logobj_interface_setopt+0x1bc>)
   13c64:	f00a fe17 	bl	1e896 <memcpy>
   13c68:	6823      	ldr	r3, [r4, #0]
   13c6a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   13c6e:	6023      	str	r3, [r4, #0]
   13c70:	6823      	ldr	r3, [r4, #0]
   13c72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   13c76:	6023      	str	r3, [r4, #0]
   13c78:	e75a      	b.n	13b30 <logobj_interface_setopt+0x48>
   13c7a:	9802      	ldr	r0, [sp, #8]
   13c7c:	f004 fbb4 	bl	183e8 <rpc_logobj_client_message_free>
   13c80:	2505      	movs	r5, #5
   13c82:	6823      	ldr	r3, [r4, #0]
   13c84:	e748      	b.n	13b18 <logobj_interface_setopt+0x30>
   13c86:	9803      	ldr	r0, [sp, #12]
   13c88:	f004 fbae 	bl	183e8 <rpc_logobj_client_message_free>
   13c8c:	2505      	movs	r5, #5
   13c8e:	6823      	ldr	r3, [r4, #0]
   13c90:	e742      	b.n	13b18 <logobj_interface_setopt+0x30>
   13c92:	2009      	movs	r0, #9
   13c94:	f7fd fbe8 	bl	11468 <bsd_os_errno_set>
   13c98:	f04f 35ff 	mov.w	r5, #4294967295
   13c9c:	e748      	b.n	13b30 <logobj_interface_setopt+0x48>
   13c9e:	bf00      	nop
   13ca0:	200236ba 	.word	0x200236ba
   13ca4:	20020a4c 	.word	0x20020a4c

00013ca8 <logobj_interface_getopt>:
   13ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13caa:	2901      	cmp	r1, #1
   13cac:	b083      	sub	sp, #12
   13cae:	9e08      	ldr	r6, [sp, #32]
   13cb0:	d030      	beq.n	13d14 <logobj_interface_getopt+0x6c>
   13cb2:	461f      	mov	r7, r3
   13cb4:	f240 2305 	movw	r3, #517	; 0x205
   13cb8:	4299      	cmp	r1, r3
   13cba:	d134      	bne.n	13d26 <logobj_interface_getopt+0x7e>
   13cbc:	4615      	mov	r5, r2
   13cbe:	f007 fe95 	bl	1b9ec <interface_socket_from_handle_get>
   13cc2:	2800      	cmp	r0, #0
   13cc4:	d037      	beq.n	13d36 <logobj_interface_getopt+0x8e>
   13cc6:	2d01      	cmp	r5, #1
   13cc8:	d015      	beq.n	13cf6 <logobj_interface_getopt+0x4e>
   13cca:	2d02      	cmp	r5, #2
   13ccc:	d10b      	bne.n	13ce6 <logobj_interface_getopt+0x3e>
   13cce:	b387      	cbz	r7, 13d32 <logobj_interface_getopt+0x8a>
   13cd0:	6833      	ldr	r3, [r6, #0]
   13cd2:	b373      	cbz	r3, 13d32 <logobj_interface_getopt+0x8a>
   13cd4:	2300      	movs	r3, #0
   13cd6:	2201      	movs	r2, #1
   13cd8:	4618      	mov	r0, r3
   13cda:	491a      	ldr	r1, [pc, #104]	; (13d44 <logobj_interface_getopt+0x9c>)
   13cdc:	7809      	ldrb	r1, [r1, #0]
   13cde:	7039      	strb	r1, [r7, #0]
   13ce0:	6032      	str	r2, [r6, #0]
   13ce2:	b003      	add	sp, #12
   13ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ce6:	2009      	movs	r0, #9
   13ce8:	f7fd fbbe 	bl	11468 <bsd_os_errno_set>
   13cec:	f04f 33ff 	mov.w	r3, #4294967295
   13cf0:	4618      	mov	r0, r3
   13cf2:	b003      	add	sp, #12
   13cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cf6:	b1e7      	cbz	r7, 13d32 <logobj_interface_getopt+0x8a>
   13cf8:	6833      	ldr	r3, [r6, #0]
   13cfa:	2b03      	cmp	r3, #3
   13cfc:	d919      	bls.n	13d32 <logobj_interface_getopt+0x8a>
   13cfe:	4638      	mov	r0, r7
   13d00:	2204      	movs	r2, #4
   13d02:	4911      	ldr	r1, [pc, #68]	; (13d48 <logobj_interface_getopt+0xa0>)
   13d04:	f00a fdc7 	bl	1e896 <memcpy>
   13d08:	2300      	movs	r3, #0
   13d0a:	2204      	movs	r2, #4
   13d0c:	4618      	mov	r0, r3
   13d0e:	6032      	str	r2, [r6, #0]
   13d10:	b003      	add	sp, #12
   13d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d14:	9600      	str	r6, [sp, #0]
   13d16:	f007 fed7 	bl	1bac8 <interface_socket_getopt>
   13d1a:	4603      	mov	r3, r0
   13d1c:	2800      	cmp	r0, #0
   13d1e:	d1e3      	bne.n	13ce8 <logobj_interface_getopt+0x40>
   13d20:	4618      	mov	r0, r3
   13d22:	b003      	add	sp, #12
   13d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d26:	202a      	movs	r0, #42	; 0x2a
   13d28:	f7fd fb9e 	bl	11468 <bsd_os_errno_set>
   13d2c:	f04f 33ff 	mov.w	r3, #4294967295
   13d30:	e7de      	b.n	13cf0 <logobj_interface_getopt+0x48>
   13d32:	2016      	movs	r0, #22
   13d34:	e7d8      	b.n	13ce8 <logobj_interface_getopt+0x40>
   13d36:	2009      	movs	r0, #9
   13d38:	f7fd fb96 	bl	11468 <bsd_os_errno_set>
   13d3c:	f04f 33ff 	mov.w	r3, #4294967295
   13d40:	e7d6      	b.n	13cf0 <logobj_interface_getopt+0x48>
   13d42:	bf00      	nop
   13d44:	200236bb 	.word	0x200236bb
   13d48:	20020a4c 	.word	0x20020a4c

00013d4c <logobj_interface_close>:
   13d4c:	b510      	push	{r4, lr}
   13d4e:	4604      	mov	r4, r0
   13d50:	f007 fe4c 	bl	1b9ec <interface_socket_from_handle_get>
   13d54:	b138      	cbz	r0, 13d66 <logobj_interface_close+0x1a>
   13d56:	4620      	mov	r0, r4
   13d58:	f007 fd86 	bl	1b868 <interface_socket_free>
   13d5c:	2300      	movs	r3, #0
   13d5e:	4a05      	ldr	r2, [pc, #20]	; (13d74 <logobj_interface_close+0x28>)
   13d60:	4618      	mov	r0, r3
   13d62:	6013      	str	r3, [r2, #0]
   13d64:	bd10      	pop	{r4, pc}
   13d66:	2009      	movs	r0, #9
   13d68:	f7fd fb7e 	bl	11468 <bsd_os_errno_set>
   13d6c:	f04f 30ff 	mov.w	r0, #4294967295
   13d70:	bd10      	pop	{r4, pc}
   13d72:	bf00      	nop
   13d74:	20020a50 	.word	0x20020a50

00013d78 <rpc_transport_send>:
   13d78:	f000 bed8 	b.w	14b2c <rpc_transport_ipc_send>

00013d7c <rpc_transport_rpc_alloc>:
   13d7c:	f000 bf58 	b.w	14c30 <rpc_transport_ipc_tx_rpc_data_alloc>

00013d80 <rpc_transport_data_alloc>:
   13d80:	f000 bfbe 	b.w	14d00 <rpc_transport_ipc_tx_data_alloc>

00013d84 <rpc_transport_rpc_free>:
   13d84:	f000 bdb6 	b.w	148f4 <rpc_transport_ipc_msg_free>

00013d88 <rpc_transport_data_free>:
   13d88:	f000 ba64 	b.w	14254 <rpc_transport_ipc_data_free>

00013d8c <ipc_trace_init>:
   13d8c:	4b01      	ldr	r3, [pc, #4]	; (13d94 <ipc_trace_init+0x8>)
   13d8e:	6018      	str	r0, [r3, #0]
   13d90:	4770      	bx	lr
   13d92:	bf00      	nop
   13d94:	20020a60 	.word	0x20020a60

00013d98 <bsd_os_trace_irq_handler>:
   13d98:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d9a:	4b6e      	ldr	r3, [pc, #440]	; (13f54 <bsd_os_trace_irq_handler+0x1bc>)
   13d9c:	b083      	sub	sp, #12
   13d9e:	781b      	ldrb	r3, [r3, #0]
   13da0:	2b00      	cmp	r3, #0
   13da2:	f000 80d3 	beq.w	13f4c <bsd_os_trace_irq_handler+0x1b4>
   13da6:	4b6c      	ldr	r3, [pc, #432]	; (13f58 <bsd_os_trace_irq_handler+0x1c0>)
   13da8:	681c      	ldr	r4, [r3, #0]
   13daa:	b124      	cbz	r4, 13db6 <bsd_os_trace_irq_handler+0x1e>
   13dac:	68a3      	ldr	r3, [r4, #8]
   13dae:	6862      	ldr	r2, [r4, #4]
   13db0:	4293      	cmp	r3, r2
   13db2:	f040 808c 	bne.w	13ece <bsd_os_trace_irq_handler+0x136>
   13db6:	4b69      	ldr	r3, [pc, #420]	; (13f5c <bsd_os_trace_irq_handler+0x1c4>)
   13db8:	681c      	ldr	r4, [r3, #0]
   13dba:	b11c      	cbz	r4, 13dc4 <bsd_os_trace_irq_handler+0x2c>
   13dbc:	68a3      	ldr	r3, [r4, #8]
   13dbe:	6862      	ldr	r2, [r4, #4]
   13dc0:	4293      	cmp	r3, r2
   13dc2:	d146      	bne.n	13e52 <bsd_os_trace_irq_handler+0xba>
   13dc4:	4b66      	ldr	r3, [pc, #408]	; (13f60 <bsd_os_trace_irq_handler+0x1c8>)
   13dc6:	681c      	ldr	r4, [r3, #0]
   13dc8:	b11c      	cbz	r4, 13dd2 <bsd_os_trace_irq_handler+0x3a>
   13dca:	68a3      	ldr	r3, [r4, #8]
   13dcc:	6862      	ldr	r2, [r4, #4]
   13dce:	4293      	cmp	r3, r2
   13dd0:	d101      	bne.n	13dd6 <bsd_os_trace_irq_handler+0x3e>
   13dd2:	b003      	add	sp, #12
   13dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13dd6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   13dda:	f8ad 2000 	strh.w	r2, [sp]
   13dde:	7822      	ldrb	r2, [r4, #0]
   13de0:	466e      	mov	r6, sp
   13de2:	f88d 2004 	strb.w	r2, [sp, #4]
   13de6:	6862      	ldr	r2, [r4, #4]
   13de8:	2105      	movs	r1, #5
   13dea:	4293      	cmp	r3, r2
   13dec:	bf2a      	itet	cs
   13dee:	6927      	ldrcs	r7, [r4, #16]
   13df0:	1ad7      	subcc	r7, r2, r3
   13df2:	1aff      	subcs	r7, r7, r3
   13df4:	4293      	cmp	r3, r2
   13df6:	bf94      	ite	ls
   13df8:	2500      	movls	r5, #0
   13dfa:	68e5      	ldrhi	r5, [r4, #12]
   13dfc:	b2bf      	uxth	r7, r7
   13dfe:	bf88      	it	hi
   13e00:	1b52      	subhi	r2, r2, r5
   13e02:	4630      	mov	r0, r6
   13e04:	bf88      	it	hi
   13e06:	b295      	uxthhi	r5, r2
   13e08:	f8ad 7002 	strh.w	r7, [sp, #2]
   13e0c:	f00b fd2b 	bl	1f866 <bsd_os_trace_put>
   13e10:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13e14:	68a0      	ldr	r0, [r4, #8]
   13e16:	f00b fd26 	bl	1f866 <bsd_os_trace_put>
   13e1a:	68a3      	ldr	r3, [r4, #8]
   13e1c:	6922      	ldr	r2, [r4, #16]
   13e1e:	441f      	add	r7, r3
   13e20:	4297      	cmp	r7, r2
   13e22:	bf08      	it	eq
   13e24:	68e3      	ldreq	r3, [r4, #12]
   13e26:	60a7      	str	r7, [r4, #8]
   13e28:	bf08      	it	eq
   13e2a:	60a3      	streq	r3, [r4, #8]
   13e2c:	2d00      	cmp	r5, #0
   13e2e:	d0d0      	beq.n	13dd2 <bsd_os_trace_irq_handler+0x3a>
   13e30:	2105      	movs	r1, #5
   13e32:	4630      	mov	r0, r6
   13e34:	f8ad 5002 	strh.w	r5, [sp, #2]
   13e38:	f00b fd15 	bl	1f866 <bsd_os_trace_put>
   13e3c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13e40:	68e0      	ldr	r0, [r4, #12]
   13e42:	f00b fd10 	bl	1f866 <bsd_os_trace_put>
   13e46:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13e4a:	68e3      	ldr	r3, [r4, #12]
   13e4c:	4413      	add	r3, r2
   13e4e:	60a3      	str	r3, [r4, #8]
   13e50:	e7bf      	b.n	13dd2 <bsd_os_trace_irq_handler+0x3a>
   13e52:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   13e56:	f8ad 2000 	strh.w	r2, [sp]
   13e5a:	7822      	ldrb	r2, [r4, #0]
   13e5c:	466e      	mov	r6, sp
   13e5e:	f88d 2004 	strb.w	r2, [sp, #4]
   13e62:	6862      	ldr	r2, [r4, #4]
   13e64:	2105      	movs	r1, #5
   13e66:	4293      	cmp	r3, r2
   13e68:	bf2a      	itet	cs
   13e6a:	6927      	ldrcs	r7, [r4, #16]
   13e6c:	1ad7      	subcc	r7, r2, r3
   13e6e:	1aff      	subcs	r7, r7, r3
   13e70:	4293      	cmp	r3, r2
   13e72:	bf94      	ite	ls
   13e74:	2500      	movls	r5, #0
   13e76:	68e5      	ldrhi	r5, [r4, #12]
   13e78:	b2bf      	uxth	r7, r7
   13e7a:	bf88      	it	hi
   13e7c:	1b52      	subhi	r2, r2, r5
   13e7e:	4630      	mov	r0, r6
   13e80:	bf88      	it	hi
   13e82:	b295      	uxthhi	r5, r2
   13e84:	f8ad 7002 	strh.w	r7, [sp, #2]
   13e88:	f00b fced 	bl	1f866 <bsd_os_trace_put>
   13e8c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13e90:	68a0      	ldr	r0, [r4, #8]
   13e92:	f00b fce8 	bl	1f866 <bsd_os_trace_put>
   13e96:	68a3      	ldr	r3, [r4, #8]
   13e98:	6922      	ldr	r2, [r4, #16]
   13e9a:	441f      	add	r7, r3
   13e9c:	4297      	cmp	r7, r2
   13e9e:	bf08      	it	eq
   13ea0:	68e3      	ldreq	r3, [r4, #12]
   13ea2:	60a7      	str	r7, [r4, #8]
   13ea4:	bf08      	it	eq
   13ea6:	60a3      	streq	r3, [r4, #8]
   13ea8:	2d00      	cmp	r5, #0
   13eaa:	d08b      	beq.n	13dc4 <bsd_os_trace_irq_handler+0x2c>
   13eac:	2105      	movs	r1, #5
   13eae:	4630      	mov	r0, r6
   13eb0:	f8ad 5002 	strh.w	r5, [sp, #2]
   13eb4:	f00b fcd7 	bl	1f866 <bsd_os_trace_put>
   13eb8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13ebc:	68e0      	ldr	r0, [r4, #12]
   13ebe:	f00b fcd2 	bl	1f866 <bsd_os_trace_put>
   13ec2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13ec6:	68e3      	ldr	r3, [r4, #12]
   13ec8:	4413      	add	r3, r2
   13eca:	60a3      	str	r3, [r4, #8]
   13ecc:	e77a      	b.n	13dc4 <bsd_os_trace_irq_handler+0x2c>
   13ece:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   13ed2:	f8ad 2000 	strh.w	r2, [sp]
   13ed6:	7822      	ldrb	r2, [r4, #0]
   13ed8:	466e      	mov	r6, sp
   13eda:	f88d 2004 	strb.w	r2, [sp, #4]
   13ede:	6862      	ldr	r2, [r4, #4]
   13ee0:	2105      	movs	r1, #5
   13ee2:	4293      	cmp	r3, r2
   13ee4:	bf2a      	itet	cs
   13ee6:	6927      	ldrcs	r7, [r4, #16]
   13ee8:	1ad7      	subcc	r7, r2, r3
   13eea:	1aff      	subcs	r7, r7, r3
   13eec:	4293      	cmp	r3, r2
   13eee:	bf94      	ite	ls
   13ef0:	2500      	movls	r5, #0
   13ef2:	68e5      	ldrhi	r5, [r4, #12]
   13ef4:	b2bf      	uxth	r7, r7
   13ef6:	bf88      	it	hi
   13ef8:	1b52      	subhi	r2, r2, r5
   13efa:	4630      	mov	r0, r6
   13efc:	bf88      	it	hi
   13efe:	b295      	uxthhi	r5, r2
   13f00:	f8ad 7002 	strh.w	r7, [sp, #2]
   13f04:	f00b fcaf 	bl	1f866 <bsd_os_trace_put>
   13f08:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13f0c:	68a0      	ldr	r0, [r4, #8]
   13f0e:	f00b fcaa 	bl	1f866 <bsd_os_trace_put>
   13f12:	68a3      	ldr	r3, [r4, #8]
   13f14:	6922      	ldr	r2, [r4, #16]
   13f16:	441f      	add	r7, r3
   13f18:	4297      	cmp	r7, r2
   13f1a:	bf08      	it	eq
   13f1c:	68e3      	ldreq	r3, [r4, #12]
   13f1e:	60a7      	str	r7, [r4, #8]
   13f20:	bf08      	it	eq
   13f22:	60a3      	streq	r3, [r4, #8]
   13f24:	2d00      	cmp	r5, #0
   13f26:	f43f af46 	beq.w	13db6 <bsd_os_trace_irq_handler+0x1e>
   13f2a:	2105      	movs	r1, #5
   13f2c:	4630      	mov	r0, r6
   13f2e:	f8ad 5002 	strh.w	r5, [sp, #2]
   13f32:	f00b fc98 	bl	1f866 <bsd_os_trace_put>
   13f36:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   13f3a:	68e0      	ldr	r0, [r4, #12]
   13f3c:	f00b fc93 	bl	1f866 <bsd_os_trace_put>
   13f40:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   13f44:	68e3      	ldr	r3, [r4, #12]
   13f46:	4413      	add	r3, r2
   13f48:	60a3      	str	r3, [r4, #8]
   13f4a:	e734      	b.n	13db6 <bsd_os_trace_irq_handler+0x1e>
   13f4c:	f7fd fc18 	bl	11780 <bsd_os_trace_irq_clear>
   13f50:	e729      	b.n	13da6 <bsd_os_trace_irq_handler+0xe>
   13f52:	bf00      	nop
   13f54:	200236bd 	.word	0x200236bd
   13f58:	20020a5c 	.word	0x20020a5c
   13f5c:	20020a54 	.word	0x20020a54
   13f60:	20020a58 	.word	0x20020a58

00013f64 <ipc_trace_handle>:
   13f64:	2200      	movs	r2, #0
   13f66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f6a:	4bb2      	ldr	r3, [pc, #712]	; (14234 <ipc_trace_handle+0x2d0>)
   13f6c:	b083      	sub	sp, #12
   13f6e:	681b      	ldr	r3, [r3, #0]
   13f70:	6919      	ldr	r1, [r3, #16]
   13f72:	695c      	ldr	r4, [r3, #20]
   13f74:	7c18      	ldrb	r0, [r3, #16]
   13f76:	741a      	strb	r2, [r3, #16]
   13f78:	7c58      	ldrb	r0, [r3, #17]
   13f7a:	745a      	strb	r2, [r3, #17]
   13f7c:	7c98      	ldrb	r0, [r3, #18]
   13f7e:	749a      	strb	r2, [r3, #18]
   13f80:	7cd8      	ldrb	r0, [r3, #19]
   13f82:	74da      	strb	r2, [r3, #19]
   13f84:	7d18      	ldrb	r0, [r3, #20]
   13f86:	751a      	strb	r2, [r3, #20]
   13f88:	7d58      	ldrb	r0, [r3, #21]
   13f8a:	755a      	strb	r2, [r3, #21]
   13f8c:	7d98      	ldrb	r0, [r3, #22]
   13f8e:	759a      	strb	r2, [r3, #22]
   13f90:	7dd8      	ldrb	r0, [r3, #23]
   13f92:	75da      	strb	r2, [r3, #23]
   13f94:	b1a9      	cbz	r1, 13fc2 <ipc_trace_handle+0x5e>
   13f96:	3901      	subs	r1, #1
   13f98:	2903      	cmp	r1, #3
   13f9a:	d812      	bhi.n	13fc2 <ipc_trace_handle+0x5e>
   13f9c:	e8df f001 	tbb	[pc, r1]
   13fa0:	1402a97c 	.word	0x1402a97c
   13fa4:	2501      	movs	r5, #1
   13fa6:	2003      	movs	r0, #3
   13fa8:	2200      	movs	r2, #0
   13faa:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   13fae:	4ca2      	ldr	r4, [pc, #648]	; (14238 <ipc_trace_handle+0x2d4>)
   13fb0:	7025      	strb	r5, [r4, #0]
   13fb2:	7a1c      	ldrb	r4, [r3, #8]
   13fb4:	7218      	strb	r0, [r3, #8]
   13fb6:	7a58      	ldrb	r0, [r3, #9]
   13fb8:	725a      	strb	r2, [r3, #9]
   13fba:	7a98      	ldrb	r0, [r3, #10]
   13fbc:	729a      	strb	r2, [r3, #10]
   13fbe:	7ada      	ldrb	r2, [r3, #11]
   13fc0:	72d9      	strb	r1, [r3, #11]
   13fc2:	b003      	add	sp, #12
   13fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fc8:	2104      	movs	r1, #4
   13fca:	2200      	movs	r2, #0
   13fcc:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   13fd0:	7a1c      	ldrb	r4, [r3, #8]
   13fd2:	7219      	strb	r1, [r3, #8]
   13fd4:	7a59      	ldrb	r1, [r3, #9]
   13fd6:	725a      	strb	r2, [r3, #9]
   13fd8:	4997      	ldr	r1, [pc, #604]	; (14238 <ipc_trace_handle+0x2d4>)
   13fda:	7a9c      	ldrb	r4, [r3, #10]
   13fdc:	729a      	strb	r2, [r3, #10]
   13fde:	7adc      	ldrb	r4, [r3, #11]
   13fe0:	72d8      	strb	r0, [r3, #11]
   13fe2:	700a      	strb	r2, [r1, #0]
   13fe4:	780b      	ldrb	r3, [r1, #0]
   13fe6:	2b00      	cmp	r3, #0
   13fe8:	f000 809f 	beq.w	1412a <ipc_trace_handle+0x1c6>
   13fec:	4b93      	ldr	r3, [pc, #588]	; (1423c <ipc_trace_handle+0x2d8>)
   13fee:	681c      	ldr	r4, [r3, #0]
   13ff0:	b124      	cbz	r4, 13ffc <ipc_trace_handle+0x98>
   13ff2:	68a3      	ldr	r3, [r4, #8]
   13ff4:	6862      	ldr	r2, [r4, #4]
   13ff6:	4293      	cmp	r3, r2
   13ff8:	f040 80d9 	bne.w	141ae <ipc_trace_handle+0x24a>
   13ffc:	4b90      	ldr	r3, [pc, #576]	; (14240 <ipc_trace_handle+0x2dc>)
   13ffe:	681c      	ldr	r4, [r3, #0]
   14000:	b124      	cbz	r4, 1400c <ipc_trace_handle+0xa8>
   14002:	68a3      	ldr	r3, [r4, #8]
   14004:	6862      	ldr	r2, [r4, #4]
   14006:	4293      	cmp	r3, r2
   14008:	f040 8092 	bne.w	14130 <ipc_trace_handle+0x1cc>
   1400c:	4b8d      	ldr	r3, [pc, #564]	; (14244 <ipc_trace_handle+0x2e0>)
   1400e:	681c      	ldr	r4, [r3, #0]
   14010:	2c00      	cmp	r4, #0
   14012:	d0d6      	beq.n	13fc2 <ipc_trace_handle+0x5e>
   14014:	68a3      	ldr	r3, [r4, #8]
   14016:	6862      	ldr	r2, [r4, #4]
   14018:	4293      	cmp	r3, r2
   1401a:	d0d2      	beq.n	13fc2 <ipc_trace_handle+0x5e>
   1401c:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   14020:	f8ad 2000 	strh.w	r2, [sp]
   14024:	7822      	ldrb	r2, [r4, #0]
   14026:	466e      	mov	r6, sp
   14028:	f88d 2004 	strb.w	r2, [sp, #4]
   1402c:	6862      	ldr	r2, [r4, #4]
   1402e:	2105      	movs	r1, #5
   14030:	4293      	cmp	r3, r2
   14032:	bf2a      	itet	cs
   14034:	6927      	ldrcs	r7, [r4, #16]
   14036:	1ad7      	subcc	r7, r2, r3
   14038:	1aff      	subcs	r7, r7, r3
   1403a:	4293      	cmp	r3, r2
   1403c:	bf94      	ite	ls
   1403e:	2500      	movls	r5, #0
   14040:	68e5      	ldrhi	r5, [r4, #12]
   14042:	b2bf      	uxth	r7, r7
   14044:	bf88      	it	hi
   14046:	1b52      	subhi	r2, r2, r5
   14048:	4630      	mov	r0, r6
   1404a:	bf88      	it	hi
   1404c:	b295      	uxthhi	r5, r2
   1404e:	f8ad 7002 	strh.w	r7, [sp, #2]
   14052:	f00b fc08 	bl	1f866 <bsd_os_trace_put>
   14056:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1405a:	68a0      	ldr	r0, [r4, #8]
   1405c:	f00b fc03 	bl	1f866 <bsd_os_trace_put>
   14060:	68a3      	ldr	r3, [r4, #8]
   14062:	6922      	ldr	r2, [r4, #16]
   14064:	441f      	add	r7, r3
   14066:	4297      	cmp	r7, r2
   14068:	bf08      	it	eq
   1406a:	68e3      	ldreq	r3, [r4, #12]
   1406c:	60a7      	str	r7, [r4, #8]
   1406e:	bf08      	it	eq
   14070:	60a3      	streq	r3, [r4, #8]
   14072:	2d00      	cmp	r5, #0
   14074:	d0a5      	beq.n	13fc2 <ipc_trace_handle+0x5e>
   14076:	2105      	movs	r1, #5
   14078:	4630      	mov	r0, r6
   1407a:	f8ad 5002 	strh.w	r5, [sp, #2]
   1407e:	f00b fbf2 	bl	1f866 <bsd_os_trace_put>
   14082:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   14086:	68e0      	ldr	r0, [r4, #12]
   14088:	f00b fbed 	bl	1f866 <bsd_os_trace_put>
   1408c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14090:	68e3      	ldr	r3, [r4, #12]
   14092:	4413      	add	r3, r2
   14094:	60a3      	str	r3, [r4, #8]
   14096:	e794      	b.n	13fc2 <ipc_trace_handle+0x5e>
   14098:	4a67      	ldr	r2, [pc, #412]	; (14238 <ipc_trace_handle+0x2d4>)
   1409a:	7811      	ldrb	r1, [r2, #0]
   1409c:	b109      	cbz	r1, 140a2 <ipc_trace_handle+0x13e>
   1409e:	2100      	movs	r1, #0
   140a0:	7011      	strb	r1, [r2, #0]
   140a2:	68a5      	ldr	r5, [r4, #8]
   140a4:	2d00      	cmp	r5, #0
   140a6:	d03b      	beq.n	14120 <ipc_trace_handle+0x1bc>
   140a8:	f04f 0c00 	mov.w	ip, #0
   140ac:	f8df a190 	ldr.w	sl, [pc, #400]	; 14240 <ipc_trace_handle+0x2dc>
   140b0:	f8df b188 	ldr.w	fp, [pc, #392]	; 1423c <ipc_trace_handle+0x2d8>
   140b4:	4963      	ldr	r1, [pc, #396]	; (14244 <ipc_trace_handle+0x2e0>)
   140b6:	46e1      	mov	r9, ip
   140b8:	4666      	mov	r6, ip
   140ba:	4662      	mov	r2, ip
   140bc:	f8d1 e000 	ldr.w	lr, [r1]
   140c0:	f8da 8000 	ldr.w	r8, [sl]
   140c4:	f8db 7000 	ldr.w	r7, [fp]
   140c8:	e008      	b.n	140dc <ipc_trace_handle+0x178>
   140ca:	2963      	cmp	r1, #99	; 0x63
   140cc:	d016      	beq.n	140fc <ipc_trace_handle+0x198>
   140ce:	2961      	cmp	r1, #97	; 0x61
   140d0:	bf04      	itt	eq
   140d2:	4607      	moveq	r7, r0
   140d4:	2601      	moveq	r6, #1
   140d6:	3201      	adds	r2, #1
   140d8:	42aa      	cmp	r2, r5
   140da:	d013      	beq.n	14104 <ipc_trace_handle+0x1a0>
   140dc:	1c91      	adds	r1, r2, #2
   140de:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   140e2:	6848      	ldr	r0, [r1, #4]
   140e4:	7801      	ldrb	r1, [r0, #0]
   140e6:	2962      	cmp	r1, #98	; 0x62
   140e8:	d1ef      	bne.n	140ca <ipc_trace_handle+0x166>
   140ea:	4680      	mov	r8, r0
   140ec:	f04f 0901 	mov.w	r9, #1
   140f0:	e7f1      	b.n	140d6 <ipc_trace_handle+0x172>
   140f2:	f7fd fb3d 	bl	11770 <bsd_os_trace_irq_set>
   140f6:	b003      	add	sp, #12
   140f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140fc:	4686      	mov	lr, r0
   140fe:	f04f 0c01 	mov.w	ip, #1
   14102:	e7e8      	b.n	140d6 <ipc_trace_handle+0x172>
   14104:	2e00      	cmp	r6, #0
   14106:	f040 8091 	bne.w	1422c <ipc_trace_handle+0x2c8>
   1410a:	f1b9 0f00 	cmp.w	r9, #0
   1410e:	d001      	beq.n	14114 <ipc_trace_handle+0x1b0>
   14110:	f8ca 8000 	str.w	r8, [sl]
   14114:	f1bc 0f00 	cmp.w	ip, #0
   14118:	d002      	beq.n	14120 <ipc_trace_handle+0x1bc>
   1411a:	4a4a      	ldr	r2, [pc, #296]	; (14244 <ipc_trace_handle+0x2e0>)
   1411c:	f8c2 e000 	str.w	lr, [r2]
   14120:	2001      	movs	r0, #1
   14122:	2200      	movs	r2, #0
   14124:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   14128:	e743      	b.n	13fb2 <ipc_trace_handle+0x4e>
   1412a:	f7fd fb29 	bl	11780 <bsd_os_trace_irq_clear>
   1412e:	e75d      	b.n	13fec <ipc_trace_handle+0x88>
   14130:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   14134:	f8ad 2000 	strh.w	r2, [sp]
   14138:	7822      	ldrb	r2, [r4, #0]
   1413a:	466e      	mov	r6, sp
   1413c:	f88d 2004 	strb.w	r2, [sp, #4]
   14140:	6862      	ldr	r2, [r4, #4]
   14142:	2105      	movs	r1, #5
   14144:	4293      	cmp	r3, r2
   14146:	bf2a      	itet	cs
   14148:	6927      	ldrcs	r7, [r4, #16]
   1414a:	1ad7      	subcc	r7, r2, r3
   1414c:	1aff      	subcs	r7, r7, r3
   1414e:	4293      	cmp	r3, r2
   14150:	bf94      	ite	ls
   14152:	2500      	movls	r5, #0
   14154:	68e5      	ldrhi	r5, [r4, #12]
   14156:	b2bf      	uxth	r7, r7
   14158:	bf88      	it	hi
   1415a:	1b52      	subhi	r2, r2, r5
   1415c:	4630      	mov	r0, r6
   1415e:	bf88      	it	hi
   14160:	b295      	uxthhi	r5, r2
   14162:	f8ad 7002 	strh.w	r7, [sp, #2]
   14166:	f00b fb7e 	bl	1f866 <bsd_os_trace_put>
   1416a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1416e:	68a0      	ldr	r0, [r4, #8]
   14170:	f00b fb79 	bl	1f866 <bsd_os_trace_put>
   14174:	68a3      	ldr	r3, [r4, #8]
   14176:	6922      	ldr	r2, [r4, #16]
   14178:	441f      	add	r7, r3
   1417a:	4297      	cmp	r7, r2
   1417c:	bf08      	it	eq
   1417e:	68e3      	ldreq	r3, [r4, #12]
   14180:	60a7      	str	r7, [r4, #8]
   14182:	bf08      	it	eq
   14184:	60a3      	streq	r3, [r4, #8]
   14186:	2d00      	cmp	r5, #0
   14188:	f43f af40 	beq.w	1400c <ipc_trace_handle+0xa8>
   1418c:	2105      	movs	r1, #5
   1418e:	4630      	mov	r0, r6
   14190:	f8ad 5002 	strh.w	r5, [sp, #2]
   14194:	f00b fb67 	bl	1f866 <bsd_os_trace_put>
   14198:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1419c:	68e0      	ldr	r0, [r4, #12]
   1419e:	f00b fb62 	bl	1f866 <bsd_os_trace_put>
   141a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   141a6:	68e3      	ldr	r3, [r4, #12]
   141a8:	4413      	add	r3, r2
   141aa:	60a3      	str	r3, [r4, #8]
   141ac:	e72e      	b.n	1400c <ipc_trace_handle+0xa8>
   141ae:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   141b2:	f8ad 2000 	strh.w	r2, [sp]
   141b6:	7822      	ldrb	r2, [r4, #0]
   141b8:	466e      	mov	r6, sp
   141ba:	f88d 2004 	strb.w	r2, [sp, #4]
   141be:	6862      	ldr	r2, [r4, #4]
   141c0:	2105      	movs	r1, #5
   141c2:	4293      	cmp	r3, r2
   141c4:	bf2a      	itet	cs
   141c6:	6927      	ldrcs	r7, [r4, #16]
   141c8:	1ad7      	subcc	r7, r2, r3
   141ca:	1aff      	subcs	r7, r7, r3
   141cc:	4293      	cmp	r3, r2
   141ce:	bf94      	ite	ls
   141d0:	2500      	movls	r5, #0
   141d2:	68e5      	ldrhi	r5, [r4, #12]
   141d4:	b2bf      	uxth	r7, r7
   141d6:	bf88      	it	hi
   141d8:	1b52      	subhi	r2, r2, r5
   141da:	4630      	mov	r0, r6
   141dc:	bf88      	it	hi
   141de:	b295      	uxthhi	r5, r2
   141e0:	f8ad 7002 	strh.w	r7, [sp, #2]
   141e4:	f00b fb3f 	bl	1f866 <bsd_os_trace_put>
   141e8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   141ec:	68a0      	ldr	r0, [r4, #8]
   141ee:	f00b fb3a 	bl	1f866 <bsd_os_trace_put>
   141f2:	68a3      	ldr	r3, [r4, #8]
   141f4:	6922      	ldr	r2, [r4, #16]
   141f6:	441f      	add	r7, r3
   141f8:	4297      	cmp	r7, r2
   141fa:	bf08      	it	eq
   141fc:	68e3      	ldreq	r3, [r4, #12]
   141fe:	60a7      	str	r7, [r4, #8]
   14200:	bf08      	it	eq
   14202:	60a3      	streq	r3, [r4, #8]
   14204:	2d00      	cmp	r5, #0
   14206:	f43f aef9 	beq.w	13ffc <ipc_trace_handle+0x98>
   1420a:	2105      	movs	r1, #5
   1420c:	4630      	mov	r0, r6
   1420e:	f8ad 5002 	strh.w	r5, [sp, #2]
   14212:	f00b fb28 	bl	1f866 <bsd_os_trace_put>
   14216:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1421a:	68e0      	ldr	r0, [r4, #12]
   1421c:	f00b fb23 	bl	1f866 <bsd_os_trace_put>
   14220:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14224:	68e3      	ldr	r3, [r4, #12]
   14226:	4413      	add	r3, r2
   14228:	60a3      	str	r3, [r4, #8]
   1422a:	e6e7      	b.n	13ffc <ipc_trace_handle+0x98>
   1422c:	f8cb 7000 	str.w	r7, [fp]
   14230:	e76b      	b.n	1410a <ipc_trace_handle+0x1a6>
   14232:	bf00      	nop
   14234:	20020a60 	.word	0x20020a60
   14238:	200236bd 	.word	0x200236bd
   1423c:	20020a5c 	.word	0x20020a5c
   14240:	20020a54 	.word	0x20020a54
   14244:	20020a58 	.word	0x20020a58

00014248 <rpc_trace_coredump_in_progress>:
   14248:	4b01      	ldr	r3, [pc, #4]	; (14250 <rpc_trace_coredump_in_progress+0x8>)
   1424a:	7818      	ldrb	r0, [r3, #0]
   1424c:	4770      	bx	lr
   1424e:	bf00      	nop
   14250:	200236bd 	.word	0x200236bd

00014254 <rpc_transport_ipc_data_free>:
   14254:	b510      	push	{r4, lr}
   14256:	4b0e      	ldr	r3, [pc, #56]	; (14290 <rpc_transport_ipc_data_free+0x3c>)
   14258:	4604      	mov	r4, r0
   1425a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1425e:	4413      	add	r3, r2
   14260:	4298      	cmp	r0, r3
   14262:	d20d      	bcs.n	14280 <rpc_transport_ipc_data_free+0x2c>
   14264:	4282      	cmp	r2, r0
   14266:	d80b      	bhi.n	14280 <rpc_transport_ipc_data_free+0x2c>
   14268:	f000 fd1a 	bl	14ca0 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   1426c:	b158      	cbz	r0, 14286 <rpc_transport_ipc_data_free+0x32>
   1426e:	4a09      	ldr	r2, [pc, #36]	; (14294 <rpc_transport_ipc_data_free+0x40>)
   14270:	6084      	str	r4, [r0, #8]
   14272:	6002      	str	r2, [r0, #0]
   14274:	f7ff fd80 	bl	13d78 <rpc_transport_send>
   14278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1427c:	f7fd ba68 	b.w	11750 <bsd_os_application_irq_set>
   14280:	4620      	mov	r0, r4
   14282:	f006 ff7b 	bl	1b17c <nrf_shared_free>
   14286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1428a:	f7fd ba61 	b.w	11750 <bsd_os_application_irq_set>
   1428e:	bf00      	nop
   14290:	20020a64 	.word	0x20020a64
   14294:	00020001 	.word	0x00020001

00014298 <rpc_transport_ipc_init>:
   14298:	b188      	cbz	r0, 142be <rpc_transport_ipc_init+0x26>
   1429a:	b510      	push	{r4, lr}
   1429c:	b082      	sub	sp, #8
   1429e:	aa01      	add	r2, sp, #4
   142a0:	4669      	mov	r1, sp
   142a2:	4604      	mov	r4, r0
   142a4:	f000 fb58 	bl	14958 <rpc_transport_ipc_tx_init>
   142a8:	4602      	mov	r2, r0
   142aa:	b148      	cbz	r0, 142c0 <rpc_transport_ipc_init+0x28>
   142ac:	4b12      	ldr	r3, [pc, #72]	; (142f8 <rpc_transport_ipc_init+0x60>)
   142ae:	3428      	adds	r4, #40	; 0x28
   142b0:	e894 0003 	ldmia.w	r4, {r0, r1}
   142b4:	e883 0003 	stmia.w	r3, {r0, r1}
   142b8:	4610      	mov	r0, r2
   142ba:	b002      	add	sp, #8
   142bc:	bd10      	pop	{r4, pc}
   142be:	e7fe      	b.n	142be <rpc_transport_ipc_init+0x26>
   142c0:	e9dd 1200 	ldrd	r1, r2, [sp]
   142c4:	4620      	mov	r0, r4
   142c6:	f000 f9ef 	bl	146a8 <rpc_transport_ipc_rx_init>
   142ca:	4602      	mov	r2, r0
   142cc:	4b0a      	ldr	r3, [pc, #40]	; (142f8 <rpc_transport_ipc_init+0x60>)
   142ce:	f104 0128 	add.w	r1, r4, #40	; 0x28
   142d2:	c903      	ldmia	r1, {r0, r1}
   142d4:	e883 0003 	stmia.w	r3, {r0, r1}
   142d8:	2a00      	cmp	r2, #0
   142da:	d1ed      	bne.n	142b8 <rpc_transport_ipc_init+0x20>
   142dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   142e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   142e2:	4906      	ldr	r1, [pc, #24]	; (142fc <rpc_transport_ipc_init+0x64>)
   142e4:	015b      	lsls	r3, r3, #5
   142e6:	b2db      	uxtb	r3, r3
   142e8:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   142ec:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   142f0:	6048      	str	r0, [r1, #4]
   142f2:	4610      	mov	r0, r2
   142f4:	b002      	add	sp, #8
   142f6:	bd10      	pop	{r4, pc}
   142f8:	20020a64 	.word	0x20020a64
   142fc:	e000e100 	.word	0xe000e100

00014300 <rpc_transport_ipc_shutdown>:
   14300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14304:	b08c      	sub	sp, #48	; 0x30
   14306:	f000 fd05 	bl	14d14 <rpc_transport_ipc_tx_suspend>
   1430a:	2200      	movs	r2, #0
   1430c:	2010      	movs	r0, #16
   1430e:	4b31      	ldr	r3, [pc, #196]	; (143d4 <rpc_transport_ipc_shutdown+0xd4>)
   14310:	f04f 0c01 	mov.w	ip, #1
   14314:	4c30      	ldr	r4, [pc, #192]	; (143d8 <rpc_transport_ipc_shutdown+0xd8>)
   14316:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   1431a:	6821      	ldr	r1, [r4, #0]
   1431c:	2704      	movs	r7, #4
   1431e:	910a      	str	r1, [sp, #40]	; 0x28
   14320:	492e      	ldr	r1, [pc, #184]	; (143dc <rpc_transport_ipc_shutdown+0xdc>)
   14322:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14324:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   14328:	680d      	ldr	r5, [r1, #0]
   1432a:	950b      	str	r5, [sp, #44]	; 0x2c
   1432c:	4d2c      	ldr	r5, [pc, #176]	; (143e0 <rpc_transport_ipc_shutdown+0xe0>)
   1432e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   14330:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   14334:	682d      	ldr	r5, [r5, #0]
   14336:	2640      	movs	r6, #64	; 0x40
   14338:	9509      	str	r5, [sp, #36]	; 0x24
   1433a:	4d2a      	ldr	r5, [pc, #168]	; (143e4 <rpc_transport_ipc_shutdown+0xe4>)
   1433c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   14340:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   14344:	f8d5 e000 	ldr.w	lr, [r5]
   14348:	2580      	movs	r5, #128	; 0x80
   1434a:	f8cd e020 	str.w	lr, [sp, #32]
   1434e:	f8dd e020 	ldr.w	lr, [sp, #32]
   14352:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   14356:	f8d4 e000 	ldr.w	lr, [r4]
   1435a:	2405      	movs	r4, #5
   1435c:	f8cd e01c 	str.w	lr, [sp, #28]
   14360:	f8df e08c 	ldr.w	lr, [pc, #140]	; 143f0 <rpc_transport_ipc_shutdown+0xf0>
   14364:	f8dd 801c 	ldr.w	r8, [sp, #28]
   14368:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   1436c:	f8de e000 	ldr.w	lr, [lr]
   14370:	f8cd e018 	str.w	lr, [sp, #24]
   14374:	f8df e07c 	ldr.w	lr, [pc, #124]	; 143f4 <rpc_transport_ipc_shutdown+0xf4>
   14378:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1437c:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   14380:	f8de e000 	ldr.w	lr, [lr]
   14384:	f8cd e014 	str.w	lr, [sp, #20]
   14388:	f8dd e014 	ldr.w	lr, [sp, #20]
   1438c:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   14390:	f8d1 c000 	ldr.w	ip, [r1]
   14394:	f8cd c010 	str.w	ip, [sp, #16]
   14398:	f8dd c010 	ldr.w	ip, [sp, #16]
   1439c:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   143a0:	680f      	ldr	r7, [r1, #0]
   143a2:	9703      	str	r7, [sp, #12]
   143a4:	9f03      	ldr	r7, [sp, #12]
   143a6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   143aa:	6808      	ldr	r0, [r1, #0]
   143ac:	9002      	str	r0, [sp, #8]
   143ae:	9802      	ldr	r0, [sp, #8]
   143b0:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   143b4:	680e      	ldr	r6, [r1, #0]
   143b6:	480c      	ldr	r0, [pc, #48]	; (143e8 <rpc_transport_ipc_shutdown+0xe8>)
   143b8:	9601      	str	r6, [sp, #4]
   143ba:	9e01      	ldr	r6, [sp, #4]
   143bc:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   143c0:	6809      	ldr	r1, [r1, #0]
   143c2:	4b0a      	ldr	r3, [pc, #40]	; (143ec <rpc_transport_ipc_shutdown+0xec>)
   143c4:	9100      	str	r1, [sp, #0]
   143c6:	9900      	ldr	r1, [sp, #0]
   143c8:	8002      	strh	r2, [r0, #0]
   143ca:	601c      	str	r4, [r3, #0]
   143cc:	b00c      	add	sp, #48	; 0x30
   143ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   143d2:	bf00      	nop
   143d4:	4002a000 	.word	0x4002a000
   143d8:	4002a5a0 	.word	0x4002a5a0
   143dc:	4002a308 	.word	0x4002a308
   143e0:	4002a590 	.word	0x4002a590
   143e4:	4002a598 	.word	0x4002a598
   143e8:	200219d0 	.word	0x200219d0
   143ec:	20020a7c 	.word	0x20020a7c
   143f0:	4002a5a8 	.word	0x4002a5a8
   143f4:	4002a5ac 	.word	0x4002a5ac

000143f8 <bsd_os_application_irq_handler>:
   143f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143fc:	f7fd f9b0 	bl	11760 <bsd_os_application_irq_clear>
   14400:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 144d8 <bsd_os_application_irq_handler+0xe0>
   14404:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 144dc <bsd_os_application_irq_handler+0xe4>
   14408:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 144e0 <bsd_os_application_irq_handler+0xe8>
   1440c:	f108 0908 	add.w	r9, r8, #8
   14410:	f858 7b04 	ldr.w	r7, [r8], #4
   14414:	6839      	ldr	r1, [r7, #0]
   14416:	b361      	cbz	r1, 14472 <bsd_os_application_irq_handler+0x7a>
   14418:	2400      	movs	r4, #0
   1441a:	e002      	b.n	14422 <bsd_os_application_irq_handler+0x2a>
   1441c:	3401      	adds	r4, #1
   1441e:	428c      	cmp	r4, r1
   14420:	d227      	bcs.n	14472 <bsd_os_application_irq_handler+0x7a>
   14422:	00e6      	lsls	r6, r4, #3
   14424:	19bd      	adds	r5, r7, r6
   14426:	68aa      	ldr	r2, [r5, #8]
   14428:	2a00      	cmp	r2, #0
   1442a:	d0f7      	beq.n	1441c <bsd_os_application_irq_handler+0x24>
   1442c:	686a      	ldr	r2, [r5, #4]
   1442e:	b2d2      	uxtb	r2, r2
   14430:	2a01      	cmp	r2, #1
   14432:	d1f3      	bne.n	1441c <bsd_os_application_irq_handler+0x24>
   14434:	6868      	ldr	r0, [r5, #4]
   14436:	f8bb 2000 	ldrh.w	r2, [fp]
   1443a:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   1443e:	d1ed      	bne.n	1441c <bsd_os_application_irq_handler+0x24>
   14440:	68a8      	ldr	r0, [r5, #8]
   14442:	6841      	ldr	r1, [r0, #4]
   14444:	b2c9      	uxtb	r1, r1
   14446:	2902      	cmp	r1, #2
   14448:	d02c      	beq.n	144a4 <bsd_os_application_irq_handler+0xac>
   1444a:	2901      	cmp	r1, #1
   1444c:	d015      	beq.n	1447a <bsd_os_application_irq_handler+0x82>
   1444e:	3604      	adds	r6, #4
   14450:	59b9      	ldr	r1, [r7, r6]
   14452:	3201      	adds	r2, #1
   14454:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   14458:	f041 0103 	orr.w	r1, r1, #3
   1445c:	51b9      	str	r1, [r7, r6]
   1445e:	f8ab 2000 	strh.w	r2, [fp]
   14462:	f7fd f975 	bl	11750 <bsd_os_application_irq_set>
   14466:	f858 7c04 	ldr.w	r7, [r8, #-4]
   1446a:	3401      	adds	r4, #1
   1446c:	6839      	ldr	r1, [r7, #0]
   1446e:	428c      	cmp	r4, r1
   14470:	d3d7      	bcc.n	14422 <bsd_os_application_irq_handler+0x2a>
   14472:	45c1      	cmp	r9, r8
   14474:	d1cc      	bne.n	14410 <bsd_os_application_irq_handler+0x18>
   14476:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1447a:	6801      	ldr	r1, [r0, #0]
   1447c:	0c09      	lsrs	r1, r1, #16
   1447e:	f002 ff45 	bl	1730c <rpc_handle_ctrl_message>
   14482:	2801      	cmp	r0, #1
   14484:	d014      	beq.n	144b0 <bsd_os_application_irq_handler+0xb8>
   14486:	d310      	bcc.n	144aa <bsd_os_application_irq_handler+0xb2>
   14488:	2802      	cmp	r0, #2
   1448a:	d007      	beq.n	1449c <bsd_os_application_irq_handler+0xa4>
   1448c:	2203      	movs	r2, #3
   1448e:	4b11      	ldr	r3, [pc, #68]	; (144d4 <bsd_os_application_irq_handler+0xdc>)
   14490:	4610      	mov	r0, r2
   14492:	f8ca 2000 	str.w	r2, [sl]
   14496:	601a      	str	r2, [r3, #0]
   14498:	f005 fb6c 	bl	19b74 <rpc_transport_ipc_fault_handler>
   1449c:	f858 7c04 	ldr.w	r7, [r8, #-4]
   144a0:	6839      	ldr	r1, [r7, #0]
   144a2:	e7bb      	b.n	1441c <bsd_os_application_irq_handler+0x24>
   144a4:	f002 ff4a 	bl	1733c <rpc_handle_data_message>
   144a8:	e7eb      	b.n	14482 <bsd_os_application_irq_handler+0x8a>
   144aa:	f8bb 2000 	ldrh.w	r2, [fp]
   144ae:	e7ce      	b.n	1444e <bsd_os_application_irq_handler+0x56>
   144b0:	686a      	ldr	r2, [r5, #4]
   144b2:	f8bb 1000 	ldrh.w	r1, [fp]
   144b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   144ba:	f042 0202 	orr.w	r2, r2, #2
   144be:	606a      	str	r2, [r5, #4]
   144c0:	1c4a      	adds	r2, r1, #1
   144c2:	f8ab 2000 	strh.w	r2, [fp]
   144c6:	f7fd f943 	bl	11750 <bsd_os_application_irq_set>
   144ca:	f858 7c04 	ldr.w	r7, [r8, #-4]
   144ce:	6839      	ldr	r1, [r7, #0]
   144d0:	e7a4      	b.n	1441c <bsd_os_application_irq_handler+0x24>
   144d2:	bf00      	nop
   144d4:	20020a6c 	.word	0x20020a6c
   144d8:	20020a74 	.word	0x20020a74
   144dc:	200219d0 	.word	0x200219d0
   144e0:	20020a7c 	.word	0x20020a7c

000144e4 <IPC_IRQHandler>:
   144e4:	b570      	push	{r4, r5, r6, lr}
   144e6:	f44f 6680 	mov.w	r6, #1024	; 0x400
   144ea:	4d62      	ldr	r5, [pc, #392]	; (14674 <IPC_IRQHandler+0x190>)
   144ec:	4c62      	ldr	r4, [pc, #392]	; (14678 <IPC_IRQHandler+0x194>)
   144ee:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   144f2:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   144f6:	b086      	sub	sp, #24
   144f8:	061b      	lsls	r3, r3, #24
   144fa:	d50b      	bpl.n	14514 <IPC_IRQHandler+0x30>
   144fc:	f7ff fd32 	bl	13f64 <ipc_trace_handle>
   14500:	f7ff fea2 	bl	14248 <rpc_trace_coredump_in_progress>
   14504:	2800      	cmp	r0, #0
   14506:	d151      	bne.n	145ac <IPC_IRQHandler+0xc8>
   14508:	4b5c      	ldr	r3, [pc, #368]	; (1467c <IPC_IRQHandler+0x198>)
   1450a:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   1450e:	681b      	ldr	r3, [r3, #0]
   14510:	9301      	str	r3, [sp, #4]
   14512:	9b01      	ldr	r3, [sp, #4]
   14514:	4b58      	ldr	r3, [pc, #352]	; (14678 <IPC_IRQHandler+0x194>)
   14516:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1451a:	f012 0201 	ands.w	r2, r2, #1
   1451e:	d11c      	bne.n	1455a <IPC_IRQHandler+0x76>
   14520:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   14524:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   14528:	d145      	bne.n	145b6 <IPC_IRQHandler+0xd2>
   1452a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1452e:	0750      	lsls	r0, r2, #29
   14530:	d50c      	bpl.n	1454c <IPC_IRQHandler+0x68>
   14532:	4a53      	ldr	r2, [pc, #332]	; (14680 <IPC_IRQHandler+0x19c>)
   14534:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   14538:	6812      	ldr	r2, [r2, #0]
   1453a:	4b52      	ldr	r3, [pc, #328]	; (14684 <IPC_IRQHandler+0x1a0>)
   1453c:	9204      	str	r2, [sp, #16]
   1453e:	9a04      	ldr	r2, [sp, #16]
   14540:	681a      	ldr	r2, [r3, #0]
   14542:	2a02      	cmp	r2, #2
   14544:	d079      	beq.n	1463a <IPC_IRQHandler+0x156>
   14546:	681a      	ldr	r2, [r3, #0]
   14548:	2a01      	cmp	r2, #1
   1454a:	d05b      	beq.n	14604 <IPC_IRQHandler+0x120>
   1454c:	4b4a      	ldr	r3, [pc, #296]	; (14678 <IPC_IRQHandler+0x194>)
   1454e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   14552:	06d2      	lsls	r2, r2, #27
   14554:	d41e      	bmi.n	14594 <IPC_IRQHandler+0xb0>
   14556:	b006      	add	sp, #24
   14558:	bd70      	pop	{r4, r5, r6, pc}
   1455a:	2000      	movs	r0, #0
   1455c:	f248 0202 	movw	r2, #32770	; 0x8002
   14560:	4949      	ldr	r1, [pc, #292]	; (14688 <IPC_IRQHandler+0x1a4>)
   14562:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   14566:	6809      	ldr	r1, [r1, #0]
   14568:	9102      	str	r1, [sp, #8]
   1456a:	9902      	ldr	r1, [sp, #8]
   1456c:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   14570:	4293      	cmp	r3, r2
   14572:	d06b      	beq.n	1464c <IPC_IRQHandler+0x168>
   14574:	d82a      	bhi.n	145cc <IPC_IRQHandler+0xe8>
   14576:	2b00      	cmp	r3, #0
   14578:	d062      	beq.n	14640 <IPC_IRQHandler+0x15c>
   1457a:	2b02      	cmp	r3, #2
   1457c:	d937      	bls.n	145ee <IPC_IRQHandler+0x10a>
   1457e:	f248 0201 	movw	r2, #32769	; 0x8001
   14582:	4293      	cmp	r3, r2
   14584:	d15c      	bne.n	14640 <IPC_IRQHandler+0x15c>
   14586:	2003      	movs	r0, #3
   14588:	2207      	movs	r2, #7
   1458a:	493e      	ldr	r1, [pc, #248]	; (14684 <IPC_IRQHandler+0x1a0>)
   1458c:	4b3f      	ldr	r3, [pc, #252]	; (1468c <IPC_IRQHandler+0x1a8>)
   1458e:	6008      	str	r0, [r1, #0]
   14590:	601a      	str	r2, [r3, #0]
   14592:	e7e0      	b.n	14556 <IPC_IRQHandler+0x72>
   14594:	2100      	movs	r1, #0
   14596:	4a3e      	ldr	r2, [pc, #248]	; (14690 <IPC_IRQHandler+0x1ac>)
   14598:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   1459c:	6813      	ldr	r3, [r2, #0]
   1459e:	9305      	str	r3, [sp, #20]
   145a0:	9b05      	ldr	r3, [sp, #20]
   145a2:	b006      	add	sp, #24
   145a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   145a8:	f7fd b8d2 	b.w	11750 <bsd_os_application_irq_set>
   145ac:	23e0      	movs	r3, #224	; 0xe0
   145ae:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   145b2:	606e      	str	r6, [r5, #4]
   145b4:	e7cf      	b.n	14556 <IPC_IRQHandler+0x72>
   145b6:	4937      	ldr	r1, [pc, #220]	; (14694 <IPC_IRQHandler+0x1b0>)
   145b8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   145bc:	680b      	ldr	r3, [r1, #0]
   145be:	9303      	str	r3, [sp, #12]
   145c0:	9b03      	ldr	r3, [sp, #12]
   145c2:	b006      	add	sp, #24
   145c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   145c8:	f7ff be9a 	b.w	14300 <rpc_transport_ipc_shutdown>
   145cc:	4a32      	ldr	r2, [pc, #200]	; (14698 <IPC_IRQHandler+0x1b4>)
   145ce:	4293      	cmp	r3, r2
   145d0:	d82a      	bhi.n	14628 <IPC_IRQHandler+0x144>
   145d2:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   145d6:	d82a      	bhi.n	1462e <IPC_IRQHandler+0x14a>
   145d8:	f248 0203 	movw	r2, #32771	; 0x8003
   145dc:	4293      	cmp	r3, r2
   145de:	d12f      	bne.n	14640 <IPC_IRQHandler+0x15c>
   145e0:	2003      	movs	r0, #3
   145e2:	2204      	movs	r2, #4
   145e4:	4927      	ldr	r1, [pc, #156]	; (14684 <IPC_IRQHandler+0x1a0>)
   145e6:	4b29      	ldr	r3, [pc, #164]	; (1468c <IPC_IRQHandler+0x1a8>)
   145e8:	6008      	str	r0, [r1, #0]
   145ea:	601a      	str	r2, [r3, #0]
   145ec:	e7b3      	b.n	14556 <IPC_IRQHandler+0x72>
   145ee:	2303      	movs	r3, #3
   145f0:	4618      	mov	r0, r3
   145f2:	4924      	ldr	r1, [pc, #144]	; (14684 <IPC_IRQHandler+0x1a0>)
   145f4:	4a25      	ldr	r2, [pc, #148]	; (1468c <IPC_IRQHandler+0x1a8>)
   145f6:	600b      	str	r3, [r1, #0]
   145f8:	6013      	str	r3, [r2, #0]
   145fa:	b006      	add	sp, #24
   145fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14600:	f005 bab8 	b.w	19b74 <rpc_transport_ipc_fault_handler>
   14604:	4a25      	ldr	r2, [pc, #148]	; (1469c <IPC_IRQHandler+0x1b8>)
   14606:	4826      	ldr	r0, [pc, #152]	; (146a0 <IPC_IRQHandler+0x1bc>)
   14608:	6811      	ldr	r1, [r2, #0]
   1460a:	688a      	ldr	r2, [r1, #8]
   1460c:	6002      	str	r2, [r0, #0]
   1460e:	6849      	ldr	r1, [r1, #4]
   14610:	6041      	str	r1, [r0, #4]
   14612:	b312      	cbz	r2, 1465a <IPC_IRQHandler+0x176>
   14614:	b309      	cbz	r1, 1465a <IPC_IRQHandler+0x176>
   14616:	6812      	ldr	r2, [r2, #0]
   14618:	2a10      	cmp	r2, #16
   1461a:	d824      	bhi.n	14666 <IPC_IRQHandler+0x182>
   1461c:	680a      	ldr	r2, [r1, #0]
   1461e:	2a10      	cmp	r2, #16
   14620:	d821      	bhi.n	14666 <IPC_IRQHandler+0x182>
   14622:	2202      	movs	r2, #2
   14624:	601a      	str	r2, [r3, #0]
   14626:	e791      	b.n	1454c <IPC_IRQHandler+0x68>
   14628:	4a1e      	ldr	r2, [pc, #120]	; (146a4 <IPC_IRQHandler+0x1c0>)
   1462a:	4293      	cmp	r3, r2
   1462c:	d108      	bne.n	14640 <IPC_IRQHandler+0x15c>
   1462e:	2003      	movs	r0, #3
   14630:	4914      	ldr	r1, [pc, #80]	; (14684 <IPC_IRQHandler+0x1a0>)
   14632:	4a16      	ldr	r2, [pc, #88]	; (1468c <IPC_IRQHandler+0x1a8>)
   14634:	6008      	str	r0, [r1, #0]
   14636:	6013      	str	r3, [r2, #0]
   14638:	e78d      	b.n	14556 <IPC_IRQHandler+0x72>
   1463a:	f7fd f889 	bl	11750 <bsd_os_application_irq_set>
   1463e:	e785      	b.n	1454c <IPC_IRQHandler+0x68>
   14640:	2303      	movs	r3, #3
   14642:	4910      	ldr	r1, [pc, #64]	; (14684 <IPC_IRQHandler+0x1a0>)
   14644:	4a11      	ldr	r2, [pc, #68]	; (1468c <IPC_IRQHandler+0x1a8>)
   14646:	600b      	str	r3, [r1, #0]
   14648:	6013      	str	r3, [r2, #0]
   1464a:	e784      	b.n	14556 <IPC_IRQHandler+0x72>
   1464c:	2003      	movs	r0, #3
   1464e:	2206      	movs	r2, #6
   14650:	490c      	ldr	r1, [pc, #48]	; (14684 <IPC_IRQHandler+0x1a0>)
   14652:	4b0e      	ldr	r3, [pc, #56]	; (1468c <IPC_IRQHandler+0x1a8>)
   14654:	6008      	str	r0, [r1, #0]
   14656:	601a      	str	r2, [r3, #0]
   14658:	e77d      	b.n	14556 <IPC_IRQHandler+0x72>
   1465a:	2003      	movs	r0, #3
   1465c:	2110      	movs	r1, #16
   1465e:	4a0b      	ldr	r2, [pc, #44]	; (1468c <IPC_IRQHandler+0x1a8>)
   14660:	6018      	str	r0, [r3, #0]
   14662:	6011      	str	r1, [r2, #0]
   14664:	e772      	b.n	1454c <IPC_IRQHandler+0x68>
   14666:	2003      	movs	r0, #3
   14668:	f24c 0106 	movw	r1, #49158	; 0xc006
   1466c:	4a07      	ldr	r2, [pc, #28]	; (1468c <IPC_IRQHandler+0x1a8>)
   1466e:	6018      	str	r0, [r3, #0]
   14670:	6011      	str	r1, [r2, #0]
   14672:	e76b      	b.n	1454c <IPC_IRQHandler+0x68>
   14674:	e000e100 	.word	0xe000e100
   14678:	4002a000 	.word	0x4002a000
   1467c:	4002a11c 	.word	0x4002a11c
   14680:	4002a108 	.word	0x4002a108
   14684:	20020a7c 	.word	0x20020a7c
   14688:	4002a100 	.word	0x4002a100
   1468c:	20020a6c 	.word	0x20020a6c
   14690:	4002a110 	.word	0x4002a110
   14694:	4002a118 	.word	0x4002a118
   14698:	04400004 	.word	0x04400004
   1469c:	20020a80 	.word	0x20020a80
   146a0:	20020a74 	.word	0x20020a74
   146a4:	05500001 	.word	0x05500001

000146a8 <rpc_transport_ipc_rx_init>:
   146a8:	2800      	cmp	r0, #0
   146aa:	f000 8109 	beq.w	148c0 <rpc_transport_ipc_rx_init+0x218>
   146ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146b2:	6805      	ldr	r5, [r0, #0]
   146b4:	b097      	sub	sp, #92	; 0x5c
   146b6:	2d00      	cmp	r5, #0
   146b8:	f000 80f8 	beq.w	148ac <rpc_transport_ipc_rx_init+0x204>
   146bc:	6883      	ldr	r3, [r0, #8]
   146be:	2b00      	cmp	r3, #0
   146c0:	f000 80f4 	beq.w	148ac <rpc_transport_ipc_rx_init+0x204>
   146c4:	6906      	ldr	r6, [r0, #16]
   146c6:	2e00      	cmp	r6, #0
   146c8:	f000 80f0 	beq.w	148ac <rpc_transport_ipc_rx_init+0x204>
   146cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
   146ce:	2c00      	cmp	r4, #0
   146d0:	f000 80ec 	beq.w	148ac <rpc_transport_ipc_rx_init+0x204>
   146d4:	6844      	ldr	r4, [r0, #4]
   146d6:	2c1b      	cmp	r4, #27
   146d8:	f240 80ed 	bls.w	148b6 <rpc_transport_ipc_rx_init+0x20e>
   146dc:	68c4      	ldr	r4, [r0, #12]
   146de:	2c0b      	cmp	r4, #11
   146e0:	f240 80e9 	bls.w	148b6 <rpc_transport_ipc_rx_init+0x20e>
   146e4:	f8d0 e014 	ldr.w	lr, [r0, #20]
   146e8:	f1be 0f17 	cmp.w	lr, #23
   146ec:	f240 80e3 	bls.w	148b6 <rpc_transport_ipc_rx_init+0x20e>
   146f0:	4604      	mov	r4, r0
   146f2:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 148e8 <rpc_transport_ipc_rx_init+0x240>
   146f6:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   146f8:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 148ec <rpc_transport_ipc_rx_init+0x244>
   146fc:	4690      	mov	r8, r2
   146fe:	9101      	str	r1, [sp, #4]
   14700:	4672      	mov	r2, lr
   14702:	2100      	movs	r1, #0
   14704:	4630      	mov	r0, r6
   14706:	f8ca 7000 	str.w	r7, [sl]
   1470a:	f8cb 3000 	str.w	r3, [fp]
   1470e:	f00a f8ed 	bl	1e8ec <memset>
   14712:	69e3      	ldr	r3, [r4, #28]
   14714:	4630      	mov	r0, r6
   14716:	6033      	str	r3, [r6, #0]
   14718:	69a3      	ldr	r3, [r4, #24]
   1471a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 148f0 <rpc_transport_ipc_rx_init+0x248>
   1471e:	6073      	str	r3, [r6, #4]
   14720:	f7ff fb34 	bl	13d8c <ipc_trace_init>
   14724:	2200      	movs	r2, #0
   14726:	2001      	movs	r0, #1
   14728:	4b67      	ldr	r3, [pc, #412]	; (148c8 <rpc_transport_ipc_rx_init+0x220>)
   1472a:	4968      	ldr	r1, [pc, #416]	; (148cc <rpc_transport_ipc_rx_init+0x224>)
   1472c:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   14730:	6809      	ldr	r1, [r1, #0]
   14732:	f04f 0c80 	mov.w	ip, #128	; 0x80
   14736:	9106      	str	r1, [sp, #24]
   14738:	4965      	ldr	r1, [pc, #404]	; (148d0 <rpc_transport_ipc_rx_init+0x228>)
   1473a:	f8dd e018 	ldr.w	lr, [sp, #24]
   1473e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   14742:	6809      	ldr	r1, [r1, #0]
   14744:	702a      	strb	r2, [r5, #0]
   14746:	9105      	str	r1, [sp, #20]
   14748:	706a      	strb	r2, [r5, #1]
   1474a:	70ea      	strb	r2, [r5, #3]
   1474c:	70a8      	strb	r0, [r5, #2]
   1474e:	9905      	ldr	r1, [sp, #20]
   14750:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14752:	f8db e000 	ldr.w	lr, [fp]
   14756:	6069      	str	r1, [r5, #4]
   14758:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1475a:	61ae      	str	r6, [r5, #24]
   1475c:	60a9      	str	r1, [r5, #8]
   1475e:	9901      	ldr	r1, [sp, #4]
   14760:	f8c5 e014 	str.w	lr, [r5, #20]
   14764:	6129      	str	r1, [r5, #16]
   14766:	495b      	ldr	r1, [pc, #364]	; (148d4 <rpc_transport_ipc_rx_init+0x22c>)
   14768:	f8c5 800c 	str.w	r8, [r5, #12]
   1476c:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   14770:	680c      	ldr	r4, [r1, #0]
   14772:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   14776:	9407      	str	r4, [sp, #28]
   14778:	9c07      	ldr	r4, [sp, #28]
   1477a:	2404      	movs	r4, #4
   1477c:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   14780:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   14784:	4f54      	ldr	r7, [pc, #336]	; (148d8 <rpc_transport_ipc_rx_init+0x230>)
   14786:	9408      	str	r4, [sp, #32]
   14788:	9c08      	ldr	r4, [sp, #32]
   1478a:	2410      	movs	r4, #16
   1478c:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   14790:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   14794:	9409      	str	r4, [sp, #36]	; 0x24
   14796:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14798:	2440      	movs	r4, #64	; 0x40
   1479a:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   1479e:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   147a2:	940a      	str	r4, [sp, #40]	; 0x28
   147a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   147a6:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   147aa:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   147ae:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   147b2:	940b      	str	r4, [sp, #44]	; 0x2c
   147b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   147b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   147ba:	680c      	ldr	r4, [r1, #0]
   147bc:	940c      	str	r4, [sp, #48]	; 0x30
   147be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   147c0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   147c4:	688c      	ldr	r4, [r1, #8]
   147c6:	940d      	str	r4, [sp, #52]	; 0x34
   147c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   147ca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   147ce:	690c      	ldr	r4, [r1, #16]
   147d0:	940e      	str	r4, [sp, #56]	; 0x38
   147d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   147d4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   147d8:	698c      	ldr	r4, [r1, #24]
   147da:	940f      	str	r4, [sp, #60]	; 0x3c
   147dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   147de:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   147e2:	69cc      	ldr	r4, [r1, #28]
   147e4:	f501 7101 	add.w	r1, r1, #516	; 0x204
   147e8:	9410      	str	r4, [sp, #64]	; 0x40
   147ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
   147ec:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   147f0:	4304      	orrs	r4, r0
   147f2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   147f6:	680d      	ldr	r5, [r1, #0]
   147f8:	4c38      	ldr	r4, [pc, #224]	; (148dc <rpc_transport_ipc_rx_init+0x234>)
   147fa:	9511      	str	r5, [sp, #68]	; 0x44
   147fc:	9d11      	ldr	r5, [sp, #68]	; 0x44
   147fe:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   14802:	4d37      	ldr	r5, [pc, #220]	; (148e0 <rpc_transport_ipc_rx_init+0x238>)
   14804:	f046 0604 	orr.w	r6, r6, #4
   14808:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1480c:	680e      	ldr	r6, [r1, #0]
   1480e:	9612      	str	r6, [sp, #72]	; 0x48
   14810:	9e12      	ldr	r6, [sp, #72]	; 0x48
   14812:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   14816:	f046 0610 	orr.w	r6, r6, #16
   1481a:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   1481e:	680e      	ldr	r6, [r1, #0]
   14820:	9613      	str	r6, [sp, #76]	; 0x4c
   14822:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   14824:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   14828:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   1482c:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   14830:	680e      	ldr	r6, [r1, #0]
   14832:	9614      	str	r6, [sp, #80]	; 0x50
   14834:	9e14      	ldr	r6, [sp, #80]	; 0x50
   14836:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   1483a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   1483e:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   14842:	f8da 3000 	ldr.w	r3, [sl]
   14846:	6809      	ldr	r1, [r1, #0]
   14848:	015b      	lsls	r3, r3, #5
   1484a:	9115      	str	r1, [sp, #84]	; 0x54
   1484c:	b2db      	uxtb	r3, r3
   1484e:	9915      	ldr	r1, [sp, #84]	; 0x54
   14850:	6022      	str	r2, [r4, #0]
   14852:	f8c9 0000 	str.w	r0, [r9]
   14856:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   1485a:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   1485e:	f8c5 c004 	str.w	ip, [r5, #4]
   14862:	9204      	str	r2, [sp, #16]
   14864:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   14868:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   1486c:	9304      	str	r3, [sp, #16]
   1486e:	9b04      	ldr	r3, [sp, #16]
   14870:	f8d9 3000 	ldr.w	r3, [r9]
   14874:	4283      	cmp	r3, r0
   14876:	d10f      	bne.n	14898 <rpc_transport_ipc_rx_init+0x1f0>
   14878:	2614      	movs	r6, #20
   1487a:	4d1a      	ldr	r5, [pc, #104]	; (148e4 <rpc_transport_ipc_rx_init+0x23c>)
   1487c:	e000      	b.n	14880 <rpc_transport_ipc_rx_init+0x1d8>
   1487e:	b15d      	cbz	r5, 14898 <rpc_transport_ipc_rx_init+0x1f0>
   14880:	a903      	add	r1, sp, #12
   14882:	2000      	movs	r0, #0
   14884:	9603      	str	r6, [sp, #12]
   14886:	f7fc fd37 	bl	112f8 <bsd_os_timedwait>
   1488a:	9b03      	ldr	r3, [sp, #12]
   1488c:	f8d9 2000 	ldr.w	r2, [r9]
   14890:	3b14      	subs	r3, #20
   14892:	2a01      	cmp	r2, #1
   14894:	441d      	add	r5, r3
   14896:	d0f2      	beq.n	1487e <rpc_transport_ipc_rx_init+0x1d6>
   14898:	f8d9 3000 	ldr.w	r3, [r9]
   1489c:	2b01      	cmp	r3, #1
   1489e:	bf0a      	itet	eq
   148a0:	200d      	moveq	r0, #13
   148a2:	6820      	ldrne	r0, [r4, #0]
   148a4:	6020      	streq	r0, [r4, #0]
   148a6:	b017      	add	sp, #92	; 0x5c
   148a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148ac:	f24c 000e 	movw	r0, #49166	; 0xc00e
   148b0:	b017      	add	sp, #92	; 0x5c
   148b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148b6:	f24c 0009 	movw	r0, #49161	; 0xc009
   148ba:	b017      	add	sp, #92	; 0x5c
   148bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148c0:	f24c 000e 	movw	r0, #49166	; 0xc00e
   148c4:	4770      	bx	lr
   148c6:	bf00      	nop
   148c8:	4002a000 	.word	0x4002a000
   148cc:	4002a610 	.word	0x4002a610
   148d0:	4002a614 	.word	0x4002a614
   148d4:	4002a590 	.word	0x4002a590
   148d8:	40005000 	.word	0x40005000
   148dc:	20020a6c 	.word	0x20020a6c
   148e0:	e000e100 	.word	0xe000e100
   148e4:	000249f0 	.word	0x000249f0
   148e8:	20020a70 	.word	0x20020a70
   148ec:	20020a80 	.word	0x20020a80
   148f0:	20020a7c 	.word	0x20020a7c

000148f4 <rpc_transport_ipc_msg_free>:
   148f4:	b470      	push	{r4, r5, r6}
   148f6:	4e17      	ldr	r6, [pc, #92]	; (14954 <rpc_transport_ipc_msg_free+0x60>)
   148f8:	6831      	ldr	r1, [r6, #0]
   148fa:	680d      	ldr	r5, [r1, #0]
   148fc:	b1ad      	cbz	r5, 1492a <rpc_transport_ipc_msg_free+0x36>
   148fe:	688b      	ldr	r3, [r1, #8]
   14900:	4283      	cmp	r3, r0
   14902:	d024      	beq.n	1494e <rpc_transport_ipc_msg_free+0x5a>
   14904:	2300      	movs	r3, #0
   14906:	3301      	adds	r3, #1
   14908:	00da      	lsls	r2, r3, #3
   1490a:	429d      	cmp	r5, r3
   1490c:	eb01 0402 	add.w	r4, r1, r2
   14910:	d00b      	beq.n	1492a <rpc_transport_ipc_msg_free+0x36>
   14912:	68a4      	ldr	r4, [r4, #8]
   14914:	42a0      	cmp	r0, r4
   14916:	d1f6      	bne.n	14906 <rpc_transport_ipc_msg_free+0x12>
   14918:	3204      	adds	r2, #4
   1491a:	588b      	ldr	r3, [r1, r2]
   1491c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   14920:	f043 0303 	orr.w	r3, r3, #3
   14924:	508b      	str	r3, [r1, r2]
   14926:	bc70      	pop	{r4, r5, r6}
   14928:	4770      	bx	lr
   1492a:	6871      	ldr	r1, [r6, #4]
   1492c:	680d      	ldr	r5, [r1, #0]
   1492e:	2d00      	cmp	r5, #0
   14930:	d0f9      	beq.n	14926 <rpc_transport_ipc_msg_free+0x32>
   14932:	688b      	ldr	r3, [r1, #8]
   14934:	4283      	cmp	r3, r0
   14936:	d00a      	beq.n	1494e <rpc_transport_ipc_msg_free+0x5a>
   14938:	2300      	movs	r3, #0
   1493a:	3301      	adds	r3, #1
   1493c:	00da      	lsls	r2, r3, #3
   1493e:	429d      	cmp	r5, r3
   14940:	eb01 0402 	add.w	r4, r1, r2
   14944:	d0ef      	beq.n	14926 <rpc_transport_ipc_msg_free+0x32>
   14946:	68a4      	ldr	r4, [r4, #8]
   14948:	42a0      	cmp	r0, r4
   1494a:	d1f6      	bne.n	1493a <rpc_transport_ipc_msg_free+0x46>
   1494c:	e7e4      	b.n	14918 <rpc_transport_ipc_msg_free+0x24>
   1494e:	2204      	movs	r2, #4
   14950:	e7e3      	b.n	1491a <rpc_transport_ipc_msg_free+0x26>
   14952:	bf00      	nop
   14954:	20020a74 	.word	0x20020a74

00014958 <rpc_transport_ipc_tx_init>:
   14958:	2800      	cmp	r0, #0
   1495a:	f000 80b8 	beq.w	14ace <rpc_transport_ipc_tx_init+0x176>
   1495e:	2900      	cmp	r1, #0
   14960:	f000 80b5 	beq.w	14ace <rpc_transport_ipc_tx_init+0x176>
   14964:	2a00      	cmp	r2, #0
   14966:	f000 80b2 	beq.w	14ace <rpc_transport_ipc_tx_init+0x176>
   1496a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1496e:	6a04      	ldr	r4, [r0, #32]
   14970:	b085      	sub	sp, #20
   14972:	2c00      	cmp	r4, #0
   14974:	f000 80a6 	beq.w	14ac4 <rpc_transport_ipc_tx_init+0x16c>
   14978:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1497a:	2800      	cmp	r0, #0
   1497c:	f000 80a2 	beq.w	14ac4 <rpc_transport_ipc_tx_init+0x16c>
   14980:	f642 4587 	movw	r5, #11399	; 0x2c87
   14984:	f04f 0a00 	mov.w	sl, #0
   14988:	4e55      	ldr	r6, [pc, #340]	; (14ae0 <rpc_transport_ipc_tx_init+0x188>)
   1498a:	42a8      	cmp	r0, r5
   1498c:	f886 a000 	strb.w	sl, [r6]
   14990:	f240 80a0 	bls.w	14ad4 <rpc_transport_ipc_tx_init+0x17c>
   14994:	2708      	movs	r7, #8
   14996:	f8df 9180 	ldr.w	r9, [pc, #384]	; 14b18 <rpc_transport_ipc_tx_init+0x1c0>
   1499a:	4620      	mov	r0, r4
   1499c:	4616      	mov	r6, r2
   1499e:	460d      	mov	r5, r1
   149a0:	2244      	movs	r2, #68	; 0x44
   149a2:	4651      	mov	r1, sl
   149a4:	f8c9 4000 	str.w	r4, [r9]
   149a8:	f009 ffa0 	bl	1e8ec <memset>
   149ac:	f8d9 2000 	ldr.w	r2, [r9]
   149b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   149b4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 14b1c <rpc_transport_ipc_tx_init+0x1c4>
   149b8:	f882 a001 	strb.w	sl, [r2, #1]
   149bc:	f882 a002 	strb.w	sl, [r2, #2]
   149c0:	f882 a003 	strb.w	sl, [r2, #3]
   149c4:	7017      	strb	r7, [r2, #0]
   149c6:	4618      	mov	r0, r3
   149c8:	2244      	movs	r2, #68	; 0x44
   149ca:	4651      	mov	r1, sl
   149cc:	f8c8 3000 	str.w	r3, [r8]
   149d0:	f009 ff8c 	bl	1e8ec <memset>
   149d4:	f8d8 2000 	ldr.w	r2, [r8]
   149d8:	f104 0388 	add.w	r3, r4, #136	; 0x88
   149dc:	f8df b140 	ldr.w	fp, [pc, #320]	; 14b20 <rpc_transport_ipc_tx_init+0x1c8>
   149e0:	7017      	strb	r7, [r2, #0]
   149e2:	f882 a001 	strb.w	sl, [r2, #1]
   149e6:	f882 a002 	strb.w	sl, [r2, #2]
   149ea:	f882 a003 	strb.w	sl, [r2, #3]
   149ee:	4618      	mov	r0, r3
   149f0:	f44f 7200 	mov.w	r2, #512	; 0x200
   149f4:	4651      	mov	r1, sl
   149f6:	f8cb 3000 	str.w	r3, [fp]
   149fa:	f009 ff77 	bl	1e8ec <memset>
   149fe:	4b39      	ldr	r3, [pc, #228]	; (14ae4 <rpc_transport_ipc_tx_init+0x18c>)
   14a00:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   14a04:	f8c3 c000 	str.w	ip, [r3]
   14a08:	4651      	mov	r1, sl
   14a0a:	4660      	mov	r0, ip
   14a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
   14a10:	f009 ff6c 	bl	1e8ec <memset>
   14a14:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   14a18:	2106      	movs	r1, #6
   14a1a:	f04f 0e01 	mov.w	lr, #1
   14a1e:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   14a22:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   14a26:	4b30      	ldr	r3, [pc, #192]	; (14ae8 <rpc_transport_ipc_tx_init+0x190>)
   14a28:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   14a2c:	605c      	str	r4, [r3, #4]
   14a2e:	4c2f      	ldr	r4, [pc, #188]	; (14aec <rpc_transport_ipc_tx_init+0x194>)
   14a30:	f8c3 c008 	str.w	ip, [r3, #8]
   14a34:	8199      	strh	r1, [r3, #12]
   14a36:	f8a3 e000 	strh.w	lr, [r3]
   14a3a:	4619      	mov	r1, r3
   14a3c:	611c      	str	r4, [r3, #16]
   14a3e:	4b2c      	ldr	r3, [pc, #176]	; (14af0 <rpc_transport_ipc_tx_init+0x198>)
   14a40:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 14b24 <rpc_transport_ipc_tx_init+0x1cc>
   14a44:	6120      	str	r0, [r4, #16]
   14a46:	482b      	ldr	r0, [pc, #172]	; (14af4 <rpc_transport_ipc_tx_init+0x19c>)
   14a48:	6063      	str	r3, [r4, #4]
   14a4a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   14a4e:	60a0      	str	r0, [r4, #8]
   14a50:	f8c4 c000 	str.w	ip, [r4]
   14a54:	4828      	ldr	r0, [pc, #160]	; (14af8 <rpc_transport_ipc_tx_init+0x1a0>)
   14a56:	60e3      	str	r3, [r4, #12]
   14a58:	6162      	str	r2, [r4, #20]
   14a5a:	f006 f9a5 	bl	1ada8 <nrf_mem_register>
   14a5e:	2800      	cmp	r0, #0
   14a60:	d132      	bne.n	14ac8 <rpc_transport_ipc_tx_init+0x170>
   14a62:	f04f 0c02 	mov.w	ip, #2
   14a66:	2420      	movs	r4, #32
   14a68:	f8d9 1000 	ldr.w	r1, [r9]
   14a6c:	f8db 2000 	ldr.w	r2, [fp]
   14a70:	6029      	str	r1, [r5, #0]
   14a72:	4b1c      	ldr	r3, [pc, #112]	; (14ae4 <rpc_transport_ipc_tx_init+0x18c>)
   14a74:	f8d8 1000 	ldr.w	r1, [r8]
   14a78:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 14b28 <rpc_transport_ipc_tx_init+0x1d0>
   14a7c:	4d1f      	ldr	r5, [pc, #124]	; (14afc <rpc_transport_ipc_tx_init+0x1a4>)
   14a7e:	6031      	str	r1, [r6, #0]
   14a80:	f8ce 2000 	str.w	r2, [lr]
   14a84:	681b      	ldr	r3, [r3, #0]
   14a86:	491e      	ldr	r1, [pc, #120]	; (14b00 <rpc_transport_ipc_tx_init+0x1a8>)
   14a88:	f502 7200 	add.w	r2, r2, #512	; 0x200
   14a8c:	602a      	str	r2, [r5, #0]
   14a8e:	4e1d      	ldr	r6, [pc, #116]	; (14b04 <rpc_transport_ipc_tx_init+0x1ac>)
   14a90:	4a1d      	ldr	r2, [pc, #116]	; (14b08 <rpc_transport_ipc_tx_init+0x1b0>)
   14a92:	4d1e      	ldr	r5, [pc, #120]	; (14b0c <rpc_transport_ipc_tx_init+0x1b4>)
   14a94:	600b      	str	r3, [r1, #0]
   14a96:	f503 7300 	add.w	r3, r3, #512	; 0x200
   14a9a:	491d      	ldr	r1, [pc, #116]	; (14b10 <rpc_transport_ipc_tx_init+0x1b8>)
   14a9c:	6033      	str	r3, [r6, #0]
   14a9e:	8028      	strh	r0, [r5, #0]
   14aa0:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   14aa4:	6809      	ldr	r1, [r1, #0]
   14aa6:	4b1b      	ldr	r3, [pc, #108]	; (14b14 <rpc_transport_ipc_tx_init+0x1bc>)
   14aa8:	9103      	str	r1, [sp, #12]
   14aaa:	9903      	ldr	r1, [sp, #12]
   14aac:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   14ab0:	6819      	ldr	r1, [r3, #0]
   14ab2:	443b      	add	r3, r7
   14ab4:	9102      	str	r1, [sp, #8]
   14ab6:	9902      	ldr	r1, [sp, #8]
   14ab8:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   14abc:	681b      	ldr	r3, [r3, #0]
   14abe:	9301      	str	r3, [sp, #4]
   14ac0:	9b01      	ldr	r3, [sp, #4]
   14ac2:	e001      	b.n	14ac8 <rpc_transport_ipc_tx_init+0x170>
   14ac4:	f24c 0007 	movw	r0, #49159	; 0xc007
   14ac8:	b005      	add	sp, #20
   14aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ace:	f24c 000e 	movw	r0, #49166	; 0xc00e
   14ad2:	4770      	bx	lr
   14ad4:	f24c 0004 	movw	r0, #49156	; 0xc004
   14ad8:	b005      	add	sp, #20
   14ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ade:	bf00      	nop
   14ae0:	200236be 	.word	0x200236be
   14ae4:	20020aac 	.word	0x20020aac
   14ae8:	20020a98 	.word	0x20020a98
   14aec:	20020abc 	.word	0x20020abc
   14af0:	00040080 	.word	0x00040080
   14af4:	00040100 	.word	0x00040100
   14af8:	20020a84 	.word	0x20020a84
   14afc:	20020a90 	.word	0x20020a90
   14b00:	20020a8c 	.word	0x20020a8c
   14b04:	20020a88 	.word	0x20020a88
   14b08:	4002a000 	.word	0x4002a000
   14b0c:	200219d2 	.word	0x200219d2
   14b10:	4002a514 	.word	0x4002a514
   14b14:	4002a51c 	.word	0x4002a51c
   14b18:	20020ab8 	.word	0x20020ab8
   14b1c:	20020ab0 	.word	0x20020ab0
   14b20:	20020ab4 	.word	0x20020ab4
   14b24:	00080040 	.word	0x00080040
   14b28:	20020a94 	.word	0x20020a94

00014b2c <rpc_transport_ipc_send>:
   14b2c:	2800      	cmp	r0, #0
   14b2e:	d061      	beq.n	14bf4 <rpc_transport_ipc_send+0xc8>
   14b30:	b4f0      	push	{r4, r5, r6, r7}
   14b32:	4b34      	ldr	r3, [pc, #208]	; (14c04 <rpc_transport_ipc_send+0xd8>)
   14b34:	b082      	sub	sp, #8
   14b36:	681a      	ldr	r2, [r3, #0]
   14b38:	4b33      	ldr	r3, [pc, #204]	; (14c08 <rpc_transport_ipc_send+0xdc>)
   14b3a:	4282      	cmp	r2, r0
   14b3c:	d81e      	bhi.n	14b7c <rpc_transport_ipc_send+0x50>
   14b3e:	681b      	ldr	r3, [r3, #0]
   14b40:	4932      	ldr	r1, [pc, #200]	; (14c0c <rpc_transport_ipc_send+0xe0>)
   14b42:	4283      	cmp	r3, r0
   14b44:	6809      	ldr	r1, [r1, #0]
   14b46:	d803      	bhi.n	14b50 <rpc_transport_ipc_send+0x24>
   14b48:	4c31      	ldr	r4, [pc, #196]	; (14c10 <rpc_transport_ipc_send+0xe4>)
   14b4a:	6824      	ldr	r4, [r4, #0]
   14b4c:	4284      	cmp	r4, r0
   14b4e:	d849      	bhi.n	14be4 <rpc_transport_ipc_send+0xb8>
   14b50:	4281      	cmp	r1, r0
   14b52:	d90e      	bls.n	14b72 <rpc_transport_ipc_send+0x46>
   14b54:	4b2f      	ldr	r3, [pc, #188]	; (14c14 <rpc_transport_ipc_send+0xe8>)
   14b56:	781b      	ldrb	r3, [r3, #0]
   14b58:	2b00      	cmp	r3, #0
   14b5a:	d14e      	bne.n	14bfa <rpc_transport_ipc_send+0xce>
   14b5c:	1a83      	subs	r3, r0, r2
   14b5e:	492e      	ldr	r1, [pc, #184]	; (14c18 <rpc_transport_ipc_send+0xec>)
   14b60:	099f      	lsrs	r7, r3, #6
   14b62:	069b      	lsls	r3, r3, #26
   14b64:	680a      	ldr	r2, [r1, #0]
   14b66:	4d2d      	ldr	r5, [pc, #180]	; (14c1c <rpc_transport_ipc_send+0xf0>)
   14b68:	f04f 0403 	mov.w	r4, #3
   14b6c:	f04f 0602 	mov.w	r6, #2
   14b70:	d014      	beq.n	14b9c <rpc_transport_ipc_send+0x70>
   14b72:	f24c 0010 	movw	r0, #49168	; 0xc010
   14b76:	b002      	add	sp, #8
   14b78:	bcf0      	pop	{r4, r5, r6, r7}
   14b7a:	4770      	bx	lr
   14b7c:	681b      	ldr	r3, [r3, #0]
   14b7e:	4298      	cmp	r0, r3
   14b80:	d3f7      	bcc.n	14b72 <rpc_transport_ipc_send+0x46>
   14b82:	4a23      	ldr	r2, [pc, #140]	; (14c10 <rpc_transport_ipc_send+0xe4>)
   14b84:	6812      	ldr	r2, [r2, #0]
   14b86:	4290      	cmp	r0, r2
   14b88:	d2f3      	bcs.n	14b72 <rpc_transport_ipc_send+0x46>
   14b8a:	2401      	movs	r4, #1
   14b8c:	1ac3      	subs	r3, r0, r3
   14b8e:	4a24      	ldr	r2, [pc, #144]	; (14c20 <rpc_transport_ipc_send+0xf4>)
   14b90:	099f      	lsrs	r7, r3, #6
   14b92:	069b      	lsls	r3, r3, #26
   14b94:	4626      	mov	r6, r4
   14b96:	6812      	ldr	r2, [r2, #0]
   14b98:	4d22      	ldr	r5, [pc, #136]	; (14c24 <rpc_transport_ipc_send+0xf8>)
   14b9a:	d1ea      	bne.n	14b72 <rpc_transport_ipc_send+0x46>
   14b9c:	6841      	ldr	r1, [r0, #4]
   14b9e:	b2c9      	uxtb	r1, r1
   14ba0:	428e      	cmp	r6, r1
   14ba2:	d122      	bne.n	14bea <rpc_transport_ipc_send+0xbe>
   14ba4:	2020      	movs	r0, #32
   14ba6:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   14baa:	491f      	ldr	r1, [pc, #124]	; (14c28 <rpc_transport_ipc_send+0xfc>)
   14bac:	685a      	ldr	r2, [r3, #4]
   14bae:	880e      	ldrh	r6, [r1, #0]
   14bb0:	b292      	uxth	r2, r2
   14bb2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   14bb6:	605a      	str	r2, [r3, #4]
   14bb8:	685a      	ldr	r2, [r3, #4]
   14bba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   14bbe:	f042 0201 	orr.w	r2, r2, #1
   14bc2:	605a      	str	r2, [r3, #4]
   14bc4:	bf00      	nop
   14bc6:	3801      	subs	r0, #1
   14bc8:	d1fc      	bne.n	14bc4 <rpc_transport_ipc_send+0x98>
   14bca:	2201      	movs	r2, #1
   14bcc:	4b17      	ldr	r3, [pc, #92]	; (14c2c <rpc_transport_ipc_send+0x100>)
   14bce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   14bd2:	682a      	ldr	r2, [r5, #0]
   14bd4:	880b      	ldrh	r3, [r1, #0]
   14bd6:	9201      	str	r2, [sp, #4]
   14bd8:	9a01      	ldr	r2, [sp, #4]
   14bda:	3301      	adds	r3, #1
   14bdc:	800b      	strh	r3, [r1, #0]
   14bde:	b002      	add	sp, #8
   14be0:	bcf0      	pop	{r4, r5, r6, r7}
   14be2:	4770      	bx	lr
   14be4:	4281      	cmp	r1, r0
   14be6:	d9d0      	bls.n	14b8a <rpc_transport_ipc_send+0x5e>
   14be8:	e7b4      	b.n	14b54 <rpc_transport_ipc_send+0x28>
   14bea:	f24c 0007 	movw	r0, #49159	; 0xc007
   14bee:	b002      	add	sp, #8
   14bf0:	bcf0      	pop	{r4, r5, r6, r7}
   14bf2:	4770      	bx	lr
   14bf4:	f24c 000e 	movw	r0, #49166	; 0xc00e
   14bf8:	4770      	bx	lr
   14bfa:	f24c 000f 	movw	r0, #49167	; 0xc00f
   14bfe:	b002      	add	sp, #8
   14c00:	bcf0      	pop	{r4, r5, r6, r7}
   14c02:	4770      	bx	lr
   14c04:	20020a94 	.word	0x20020a94
   14c08:	20020a8c 	.word	0x20020a8c
   14c0c:	20020a90 	.word	0x20020a90
   14c10:	20020a88 	.word	0x20020a88
   14c14:	200236be 	.word	0x200236be
   14c18:	20020ab8 	.word	0x20020ab8
   14c1c:	4002a00c 	.word	0x4002a00c
   14c20:	20020ab0 	.word	0x20020ab0
   14c24:	4002a004 	.word	0x4002a004
   14c28:	200219d2 	.word	0x200219d2
   14c2c:	4002a000 	.word	0x4002a000

00014c30 <rpc_transport_ipc_tx_rpc_data_alloc>:
   14c30:	4b18      	ldr	r3, [pc, #96]	; (14c94 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   14c32:	781b      	ldrb	r3, [r3, #0]
   14c34:	bb63      	cbnz	r3, 14c90 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   14c36:	b4f0      	push	{r4, r5, r6, r7}
   14c38:	4a17      	ldr	r2, [pc, #92]	; (14c98 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   14c3a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   14c3e:	6814      	ldr	r4, [r2, #0]
   14c40:	4b16      	ldr	r3, [pc, #88]	; (14c9c <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   14c42:	6825      	ldr	r5, [r4, #0]
   14c44:	681e      	ldr	r6, [r3, #0]
   14c46:	b1a5      	cbz	r5, 14c72 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   14c48:	4607      	mov	r7, r0
   14c4a:	00c1      	lsls	r1, r0, #3
   14c4c:	1863      	adds	r3, r4, r1
   14c4e:	685a      	ldr	r2, [r3, #4]
   14c50:	b2d2      	uxtb	r2, r2
   14c52:	2a03      	cmp	r2, #3
   14c54:	d104      	bne.n	14c60 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   14c56:	609f      	str	r7, [r3, #8]
   14c58:	685a      	ldr	r2, [r3, #4]
   14c5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   14c5e:	605a      	str	r2, [r3, #4]
   14c60:	685a      	ldr	r2, [r3, #4]
   14c62:	f012 0fff 	tst.w	r2, #255	; 0xff
   14c66:	d101      	bne.n	14c6c <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   14c68:	689b      	ldr	r3, [r3, #8]
   14c6a:	b12b      	cbz	r3, 14c78 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   14c6c:	3001      	adds	r0, #1
   14c6e:	42a8      	cmp	r0, r5
   14c70:	d1eb      	bne.n	14c4a <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   14c72:	2000      	movs	r0, #0
   14c74:	bcf0      	pop	{r4, r5, r6, r7}
   14c76:	4770      	bx	lr
   14c78:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   14c7c:	4421      	add	r1, r4
   14c7e:	6088      	str	r0, [r1, #8]
   14c80:	6843      	ldr	r3, [r0, #4]
   14c82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   14c86:	f043 0302 	orr.w	r3, r3, #2
   14c8a:	6043      	str	r3, [r0, #4]
   14c8c:	bcf0      	pop	{r4, r5, r6, r7}
   14c8e:	4770      	bx	lr
   14c90:	2000      	movs	r0, #0
   14c92:	4770      	bx	lr
   14c94:	200236be 	.word	0x200236be
   14c98:	20020ab8 	.word	0x20020ab8
   14c9c:	20020ab4 	.word	0x20020ab4

00014ca0 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   14ca0:	b4f0      	push	{r4, r5, r6, r7}
   14ca2:	4a15      	ldr	r2, [pc, #84]	; (14cf8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   14ca4:	4b15      	ldr	r3, [pc, #84]	; (14cfc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   14ca6:	6814      	ldr	r4, [r2, #0]
   14ca8:	681e      	ldr	r6, [r3, #0]
   14caa:	6825      	ldr	r5, [r4, #0]
   14cac:	b1ad      	cbz	r5, 14cda <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   14cae:	2000      	movs	r0, #0
   14cb0:	4607      	mov	r7, r0
   14cb2:	00c1      	lsls	r1, r0, #3
   14cb4:	1863      	adds	r3, r4, r1
   14cb6:	685a      	ldr	r2, [r3, #4]
   14cb8:	b2d2      	uxtb	r2, r2
   14cba:	2a03      	cmp	r2, #3
   14cbc:	d104      	bne.n	14cc8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   14cbe:	609f      	str	r7, [r3, #8]
   14cc0:	685a      	ldr	r2, [r3, #4]
   14cc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   14cc6:	605a      	str	r2, [r3, #4]
   14cc8:	685a      	ldr	r2, [r3, #4]
   14cca:	f012 0fff 	tst.w	r2, #255	; 0xff
   14cce:	d101      	bne.n	14cd4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   14cd0:	689b      	ldr	r3, [r3, #8]
   14cd2:	b12b      	cbz	r3, 14ce0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   14cd4:	3001      	adds	r0, #1
   14cd6:	4285      	cmp	r5, r0
   14cd8:	d1eb      	bne.n	14cb2 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   14cda:	2000      	movs	r0, #0
   14cdc:	bcf0      	pop	{r4, r5, r6, r7}
   14cde:	4770      	bx	lr
   14ce0:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   14ce4:	4421      	add	r1, r4
   14ce6:	6088      	str	r0, [r1, #8]
   14ce8:	6843      	ldr	r3, [r0, #4]
   14cea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   14cee:	f043 0301 	orr.w	r3, r3, #1
   14cf2:	6043      	str	r3, [r0, #4]
   14cf4:	bcf0      	pop	{r4, r5, r6, r7}
   14cf6:	4770      	bx	lr
   14cf8:	20020ab0 	.word	0x20020ab0
   14cfc:	20020aac 	.word	0x20020aac

00014d00 <rpc_transport_ipc_tx_data_alloc>:
   14d00:	4b03      	ldr	r3, [pc, #12]	; (14d10 <rpc_transport_ipc_tx_data_alloc+0x10>)
   14d02:	781b      	ldrb	r3, [r3, #0]
   14d04:	b90b      	cbnz	r3, 14d0a <rpc_transport_ipc_tx_data_alloc+0xa>
   14d06:	f006 ba2f 	b.w	1b168 <nrf_shared_malloc>
   14d0a:	2000      	movs	r0, #0
   14d0c:	4770      	bx	lr
   14d0e:	bf00      	nop
   14d10:	200236be 	.word	0x200236be

00014d14 <rpc_transport_ipc_tx_suspend>:
   14d14:	2201      	movs	r2, #1
   14d16:	4b01      	ldr	r3, [pc, #4]	; (14d1c <rpc_transport_ipc_tx_suspend+0x8>)
   14d18:	701a      	strb	r2, [r3, #0]
   14d1a:	4770      	bx	lr
   14d1c:	200236be 	.word	0x200236be

00014d20 <secure_client_socket>:
   14d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14d24:	f04f 3cff 	mov.w	ip, #4294967295
   14d28:	460c      	mov	r4, r1
   14d2a:	680b      	ldr	r3, [r1, #0]
   14d2c:	4f45      	ldr	r7, [pc, #276]	; (14e44 <secure_client_socket+0x124>)
   14d2e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14d32:	600b      	str	r3, [r1, #0]
   14d34:	680b      	ldr	r3, [r1, #0]
   14d36:	00c6      	lsls	r6, r0, #3
   14d38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14d3c:	600b      	str	r3, [r1, #0]
   14d3e:	eb07 0a06 	add.w	sl, r7, r6
   14d42:	b084      	sub	sp, #16
   14d44:	f8da 3004 	ldr.w	r3, [sl, #4]
   14d48:	6989      	ldr	r1, [r1, #24]
   14d4a:	f247 0281 	movw	r2, #28801	; 0x7081
   14d4e:	4605      	mov	r5, r0
   14d50:	f8d4 8000 	ldr.w	r8, [r4]
   14d54:	e9cd cc02 	strd	ip, ip, [sp, #8]
   14d58:	f000 fd76 	bl	15848 <ip_interface_request_create>
   14d5c:	2800      	cmp	r0, #0
   14d5e:	d06c      	beq.n	14e3a <secure_client_socket+0x11a>
   14d60:	f8da 2004 	ldr.w	r2, [sl, #4]
   14d64:	4681      	mov	r9, r0
   14d66:	2a00      	cmp	r2, #0
   14d68:	d15c      	bne.n	14e24 <secure_client_socket+0x104>
   14d6a:	4b37      	ldr	r3, [pc, #220]	; (14e48 <secure_client_socket+0x128>)
   14d6c:	1971      	adds	r1, r6, r5
   14d6e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   14d72:	2224      	movs	r2, #36	; 0x24
   14d74:	f109 0014 	add.w	r0, r9, #20
   14d78:	f009 fd8d 	bl	1e896 <memcpy>
   14d7c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14d80:	4649      	mov	r1, r9
   14d82:	3324      	adds	r3, #36	; 0x24
   14d84:	f8c9 3008 	str.w	r3, [r9, #8]
   14d88:	6822      	ldr	r2, [r4, #0]
   14d8a:	4643      	mov	r3, r8
   14d8c:	0c12      	lsrs	r2, r2, #16
   14d8e:	0412      	lsls	r2, r2, #16
   14d90:	f042 020a 	orr.w	r2, r2, #10
   14d94:	6022      	str	r2, [r4, #0]
   14d96:	4620      	mov	r0, r4
   14d98:	f247 0281 	movw	r2, #28801	; 0x7081
   14d9c:	f000 fd74 	bl	15888 <ip_interface_request_send>
   14da0:	4603      	mov	r3, r0
   14da2:	b968      	cbnz	r0, 14dc0 <secure_client_socket+0xa0>
   14da4:	6823      	ldr	r3, [r4, #0]
   14da6:	00db      	lsls	r3, r3, #3
   14da8:	d40e      	bmi.n	14dc8 <secure_client_socket+0xa8>
   14daa:	ab03      	add	r3, sp, #12
   14dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14db0:	210b      	movs	r1, #11
   14db2:	4628      	mov	r0, r5
   14db4:	f000 fd7c 	bl	158b0 <ip_interface_wait>
   14db8:	4603      	mov	r3, r0
   14dba:	b150      	cbz	r0, 14dd2 <secure_client_socket+0xb2>
   14dbc:	f8c4 8000 	str.w	r8, [r4]
   14dc0:	4618      	mov	r0, r3
   14dc2:	b004      	add	sp, #16
   14dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14dc8:	2373      	movs	r3, #115	; 0x73
   14dca:	4618      	mov	r0, r3
   14dcc:	b004      	add	sp, #16
   14dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14dd2:	220c      	movs	r2, #12
   14dd4:	ab02      	add	r3, sp, #8
   14dd6:	4611      	mov	r1, r2
   14dd8:	4628      	mov	r0, r5
   14dda:	f000 fd69 	bl	158b0 <ip_interface_wait>
   14dde:	4603      	mov	r3, r0
   14de0:	bb30      	cbnz	r0, 14e30 <secure_client_socket+0x110>
   14de2:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   14de6:	b138      	cbz	r0, 14df8 <secure_client_socket+0xd8>
   14de8:	9301      	str	r3, [sp, #4]
   14dea:	f006 f901 	bl	1aff0 <nrf_free>
   14dee:	9b01      	ldr	r3, [sp, #4]
   14df0:	443e      	add	r6, r7
   14df2:	6073      	str	r3, [r6, #4]
   14df4:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   14df8:	4618      	mov	r0, r3
   14dfa:	6822      	ldr	r2, [r4, #0]
   14dfc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   14e00:	6022      	str	r2, [r4, #0]
   14e02:	6822      	ldr	r2, [r4, #0]
   14e04:	0c12      	lsrs	r2, r2, #16
   14e06:	0412      	lsls	r2, r2, #16
   14e08:	f042 020c 	orr.w	r2, r2, #12
   14e0c:	6022      	str	r2, [r4, #0]
   14e0e:	6822      	ldr	r2, [r4, #0]
   14e10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   14e14:	6022      	str	r2, [r4, #0]
   14e16:	6822      	ldr	r2, [r4, #0]
   14e18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   14e1c:	6022      	str	r2, [r4, #0]
   14e1e:	b004      	add	sp, #16
   14e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e24:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   14e28:	6800      	ldr	r0, [r0, #0]
   14e2a:	f009 fd34 	bl	1e896 <memcpy>
   14e2e:	e79c      	b.n	14d6a <secure_client_socket+0x4a>
   14e30:	2b73      	cmp	r3, #115	; 0x73
   14e32:	d0c5      	beq.n	14dc0 <secure_client_socket+0xa0>
   14e34:	f8c4 8000 	str.w	r8, [r4]
   14e38:	e7c2      	b.n	14dc0 <secure_client_socket+0xa0>
   14e3a:	230c      	movs	r3, #12
   14e3c:	4618      	mov	r0, r3
   14e3e:	b004      	add	sp, #16
   14e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e44:	20020c18 	.word	0x20020c18
   14e48:	20020ad4 	.word	0x20020ad4

00014e4c <tls_interface_init>:
   14e4c:	2201      	movs	r2, #1
   14e4e:	4b02      	ldr	r3, [pc, #8]	; (14e58 <tls_interface_init+0xc>)
   14e50:	2000      	movs	r0, #0
   14e52:	701a      	strb	r2, [r3, #0]
   14e54:	4770      	bx	lr
   14e56:	bf00      	nop
   14e58:	200236bf 	.word	0x200236bf

00014e5c <tls_interface_open>:
   14e5c:	b538      	push	{r3, r4, r5, lr}
   14e5e:	4b23      	ldr	r3, [pc, #140]	; (14eec <tls_interface_open+0x90>)
   14e60:	781b      	ldrb	r3, [r3, #0]
   14e62:	2b00      	cmp	r3, #0
   14e64:	d03c      	beq.n	14ee0 <tls_interface_open+0x84>
   14e66:	1e4b      	subs	r3, r1, #1
   14e68:	2b01      	cmp	r3, #1
   14e6a:	d808      	bhi.n	14e7e <tls_interface_open+0x22>
   14e6c:	4614      	mov	r4, r2
   14e6e:	b162      	cbz	r2, 14e8a <tls_interface_open+0x2e>
   14e70:	2901      	cmp	r1, #1
   14e72:	d02d      	beq.n	14ed0 <tls_interface_open+0x74>
   14e74:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   14e78:	bf08      	it	eq
   14e7a:	2202      	moveq	r2, #2
   14e7c:	d00d      	beq.n	14e9a <tls_interface_open+0x3e>
   14e7e:	2029      	movs	r0, #41	; 0x29
   14e80:	f7fc faf2 	bl	11468 <bsd_os_errno_set>
   14e84:	f04f 35ff 	mov.w	r5, #4294967295
   14e88:	e020      	b.n	14ecc <tls_interface_open+0x70>
   14e8a:	2901      	cmp	r1, #1
   14e8c:	bf0b      	itete	eq
   14e8e:	2201      	moveq	r2, #1
   14e90:	2202      	movne	r2, #2
   14e92:	f44f 7482 	moveq.w	r4, #260	; 0x104
   14e96:	f44f 7487 	movne.w	r4, #270	; 0x10e
   14e9a:	f000 fd3b 	bl	15914 <ip_interface_open>
   14e9e:	1e05      	subs	r5, r0, #0
   14ea0:	db1b      	blt.n	14eda <tls_interface_open+0x7e>
   14ea2:	4b13      	ldr	r3, [pc, #76]	; (14ef0 <tls_interface_open+0x94>)
   14ea4:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   14ea8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14eac:	2224      	movs	r2, #36	; 0x24
   14eae:	4911      	ldr	r1, [pc, #68]	; (14ef4 <tls_interface_open+0x98>)
   14eb0:	f009 fcf1 	bl	1e896 <memcpy>
   14eb4:	4628      	mov	r0, r5
   14eb6:	f006 fd99 	bl	1b9ec <interface_socket_from_handle_get>
   14eba:	6803      	ldr	r3, [r0, #0]
   14ebc:	6144      	str	r4, [r0, #20]
   14ebe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14ec2:	6003      	str	r3, [r0, #0]
   14ec4:	6803      	ldr	r3, [r0, #0]
   14ec6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   14eca:	6003      	str	r3, [r0, #0]
   14ecc:	4628      	mov	r0, r5
   14ece:	bd38      	pop	{r3, r4, r5, pc}
   14ed0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   14ed4:	d1d3      	bne.n	14e7e <tls_interface_open+0x22>
   14ed6:	460a      	mov	r2, r1
   14ed8:	e7df      	b.n	14e9a <tls_interface_open+0x3e>
   14eda:	f04f 35ff 	mov.w	r5, #4294967295
   14ede:	e7f5      	b.n	14ecc <tls_interface_open+0x70>
   14ee0:	2070      	movs	r0, #112	; 0x70
   14ee2:	f7fc fac1 	bl	11468 <bsd_os_errno_set>
   14ee6:	f04f 35ff 	mov.w	r5, #4294967295
   14eea:	e7ef      	b.n	14ecc <tls_interface_open+0x70>
   14eec:	200236bf 	.word	0x200236bf
   14ef0:	20020ad4 	.word	0x20020ad4
   14ef4:	00021124 	.word	0x00021124

00014ef8 <tls_interface_close>:
   14ef8:	b538      	push	{r3, r4, r5, lr}
   14efa:	4604      	mov	r4, r0
   14efc:	f006 fd76 	bl	1b9ec <interface_socket_from_handle_get>
   14f00:	b180      	cbz	r0, 14f24 <tls_interface_close+0x2c>
   14f02:	4d0b      	ldr	r5, [pc, #44]	; (14f30 <tls_interface_close+0x38>)
   14f04:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   14f08:	b138      	cbz	r0, 14f1a <tls_interface_close+0x22>
   14f0a:	f006 f871 	bl	1aff0 <nrf_free>
   14f0e:	2300      	movs	r3, #0
   14f10:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   14f14:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   14f18:	6053      	str	r3, [r2, #4]
   14f1a:	4620      	mov	r0, r4
   14f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14f20:	f000 bdbe 	b.w	15aa0 <ip_interface_close>
   14f24:	2009      	movs	r0, #9
   14f26:	f7fc fa9f 	bl	11468 <bsd_os_errno_set>
   14f2a:	f04f 30ff 	mov.w	r0, #4294967295
   14f2e:	bd38      	pop	{r3, r4, r5, pc}
   14f30:	20020c18 	.word	0x20020c18

00014f34 <tls_interface_sendto>:
   14f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f38:	b087      	sub	sp, #28
   14f3a:	9103      	str	r1, [sp, #12]
   14f3c:	4616      	mov	r6, r2
   14f3e:	469b      	mov	fp, r3
   14f40:	4682      	mov	sl, r0
   14f42:	f006 fd53 	bl	1b9ec <interface_socket_from_handle_get>
   14f46:	2800      	cmp	r0, #0
   14f48:	f000 8082 	beq.w	15050 <tls_interface_sendto+0x11c>
   14f4c:	2400      	movs	r4, #0
   14f4e:	f01b 0f02 	tst.w	fp, #2
   14f52:	bf08      	it	eq
   14f54:	6807      	ldreq	r7, [r0, #0]
   14f56:	4a40      	ldr	r2, [pc, #256]	; (15058 <tls_interface_sendto+0x124>)
   14f58:	bf08      	it	eq
   14f5a:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   14f5e:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   14f62:	4605      	mov	r5, r0
   14f64:	bf0c      	ite	eq
   14f66:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   14f6a:	2700      	movne	r7, #0
   14f6c:	46a0      	mov	r8, r4
   14f6e:	f04f 33ff 	mov.w	r3, #4294967295
   14f72:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   14f76:	e00f      	b.n	14f98 <tls_interface_sendto+0x64>
   14f78:	f899 2000 	ldrb.w	r2, [r9]
   14f7c:	2a02      	cmp	r2, #2
   14f7e:	d061      	beq.n	15044 <tls_interface_sendto+0x110>
   14f80:	692a      	ldr	r2, [r5, #16]
   14f82:	2a01      	cmp	r2, #1
   14f84:	d061      	beq.n	1504a <tls_interface_sendto+0x116>
   14f86:	2b00      	cmp	r3, #0
   14f88:	db30      	blt.n	14fec <tls_interface_sendto+0xb8>
   14f8a:	f1b8 0f00 	cmp.w	r8, #0
   14f8e:	dc18      	bgt.n	14fc2 <tls_interface_sendto+0x8e>
   14f90:	441c      	add	r4, r3
   14f92:	b1df      	cbz	r7, 14fcc <tls_interface_sendto+0x98>
   14f94:	42a6      	cmp	r6, r4
   14f96:	dd19      	ble.n	14fcc <tls_interface_sendto+0x98>
   14f98:	6829      	ldr	r1, [r5, #0]
   14f9a:	1b32      	subs	r2, r6, r4
   14f9c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   14fa0:	b289      	uxth	r1, r1
   14fa2:	bfa8      	it	ge
   14fa4:	f44f 6200 	movge.w	r2, #2048	; 0x800
   14fa8:	290c      	cmp	r1, #12
   14faa:	d013      	beq.n	14fd4 <tls_interface_sendto+0xa0>
   14fac:	6829      	ldr	r1, [r5, #0]
   14fae:	b289      	uxth	r1, r1
   14fb0:	290b      	cmp	r1, #11
   14fb2:	d0e1      	beq.n	14f78 <tls_interface_sendto+0x44>
   14fb4:	6929      	ldr	r1, [r5, #16]
   14fb6:	2901      	cmp	r1, #1
   14fb8:	d024      	beq.n	15004 <tls_interface_sendto+0xd0>
   14fba:	2902      	cmp	r1, #2
   14fbc:	d01a      	beq.n	14ff4 <tls_interface_sendto+0xc0>
   14fbe:	f04f 0839 	mov.w	r8, #57	; 0x39
   14fc2:	4640      	mov	r0, r8
   14fc4:	f7fc fa50 	bl	11468 <bsd_os_errno_set>
   14fc8:	f04f 34ff 	mov.w	r4, #4294967295
   14fcc:	4620      	mov	r0, r4
   14fce:	b007      	add	sp, #28
   14fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14fd6:	9903      	ldr	r1, [sp, #12]
   14fd8:	9301      	str	r3, [sp, #4]
   14fda:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14fdc:	4421      	add	r1, r4
   14fde:	9300      	str	r3, [sp, #0]
   14fe0:	4650      	mov	r0, sl
   14fe2:	465b      	mov	r3, fp
   14fe4:	f000 fdce 	bl	15b84 <ip_interface_sendto>
   14fe8:	1e03      	subs	r3, r0, #0
   14fea:	dad1      	bge.n	14f90 <tls_interface_sendto+0x5c>
   14fec:	f1b8 0f00 	cmp.w	r8, #0
   14ff0:	ddea      	ble.n	14fc8 <tls_interface_sendto+0x94>
   14ff2:	e7e6      	b.n	14fc2 <tls_interface_sendto+0x8e>
   14ff4:	6829      	ldr	r1, [r5, #0]
   14ff6:	b289      	uxth	r1, r1
   14ff8:	2902      	cmp	r1, #2
   14ffa:	d007      	beq.n	1500c <tls_interface_sendto+0xd8>
   14ffc:	6829      	ldr	r1, [r5, #0]
   14ffe:	b289      	uxth	r1, r1
   15000:	2904      	cmp	r1, #4
   15002:	d003      	beq.n	1500c <tls_interface_sendto+0xd8>
   15004:	6829      	ldr	r1, [r5, #0]
   15006:	b289      	uxth	r1, r1
   15008:	2905      	cmp	r1, #5
   1500a:	d1d8      	bne.n	14fbe <tls_interface_sendto+0x8a>
   1500c:	f899 1000 	ldrb.w	r1, [r9]
   15010:	2902      	cmp	r1, #2
   15012:	d1b8      	bne.n	14f86 <tls_interface_sendto+0x52>
   15014:	4629      	mov	r1, r5
   15016:	4650      	mov	r0, sl
   15018:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1501c:	f7ff fe80 	bl	14d20 <secure_client_socket>
   15020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   15024:	4680      	mov	r8, r0
   15026:	2800      	cmp	r0, #0
   15028:	d1ad      	bne.n	14f86 <tls_interface_sendto+0x52>
   1502a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1502c:	9903      	ldr	r1, [sp, #12]
   1502e:	9301      	str	r3, [sp, #4]
   15030:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15032:	4421      	add	r1, r4
   15034:	9300      	str	r3, [sp, #0]
   15036:	4650      	mov	r0, sl
   15038:	465b      	mov	r3, fp
   1503a:	f000 fda3 	bl	15b84 <ip_interface_sendto>
   1503e:	1e03      	subs	r3, r0, #0
   15040:	daa6      	bge.n	14f90 <tls_interface_sendto+0x5c>
   15042:	e7c1      	b.n	14fc8 <tls_interface_sendto+0x94>
   15044:	f04f 0823 	mov.w	r8, #35	; 0x23
   15048:	e7bb      	b.n	14fc2 <tls_interface_sendto+0x8e>
   1504a:	f04f 082a 	mov.w	r8, #42	; 0x2a
   1504e:	e7b8      	b.n	14fc2 <tls_interface_sendto+0x8e>
   15050:	f04f 0809 	mov.w	r8, #9
   15054:	e7b5      	b.n	14fc2 <tls_interface_sendto+0x8e>
   15056:	bf00      	nop
   15058:	20020ad4 	.word	0x20020ad4

0001505c <tls_interface_recvfrom>:
   1505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15060:	460d      	mov	r5, r1
   15062:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   15066:	4616      	mov	r6, r2
   15068:	461f      	mov	r7, r3
   1506a:	4604      	mov	r4, r0
   1506c:	f006 fcbe 	bl	1b9ec <interface_socket_from_handle_get>
   15070:	2800      	cmp	r0, #0
   15072:	d038      	beq.n	150e6 <tls_interface_recvfrom+0x8a>
   15074:	6803      	ldr	r3, [r0, #0]
   15076:	b29b      	uxth	r3, r3
   15078:	2b0c      	cmp	r3, #12
   1507a:	d00f      	beq.n	1509c <tls_interface_recvfrom+0x40>
   1507c:	6803      	ldr	r3, [r0, #0]
   1507e:	b29b      	uxth	r3, r3
   15080:	2b0d      	cmp	r3, #13
   15082:	d00b      	beq.n	1509c <tls_interface_recvfrom+0x40>
   15084:	6903      	ldr	r3, [r0, #16]
   15086:	2b01      	cmp	r3, #1
   15088:	d01a      	beq.n	150c0 <tls_interface_recvfrom+0x64>
   1508a:	2b02      	cmp	r3, #2
   1508c:	d010      	beq.n	150b0 <tls_interface_recvfrom+0x54>
   1508e:	2023      	movs	r0, #35	; 0x23
   15090:	f7fc f9ea 	bl	11468 <bsd_os_errno_set>
   15094:	f04f 30ff 	mov.w	r0, #4294967295
   15098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1509c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   150a0:	463b      	mov	r3, r7
   150a2:	4632      	mov	r2, r6
   150a4:	4629      	mov	r1, r5
   150a6:	4620      	mov	r0, r4
   150a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   150ac:	f000 bee6 	b.w	15e7c <ip_interface_recvfrom>
   150b0:	6803      	ldr	r3, [r0, #0]
   150b2:	b29b      	uxth	r3, r3
   150b4:	2b02      	cmp	r3, #2
   150b6:	d007      	beq.n	150c8 <tls_interface_recvfrom+0x6c>
   150b8:	6803      	ldr	r3, [r0, #0]
   150ba:	b29b      	uxth	r3, r3
   150bc:	2b04      	cmp	r3, #4
   150be:	d003      	beq.n	150c8 <tls_interface_recvfrom+0x6c>
   150c0:	6803      	ldr	r3, [r0, #0]
   150c2:	b29b      	uxth	r3, r3
   150c4:	2b05      	cmp	r3, #5
   150c6:	d1e2      	bne.n	1508e <tls_interface_recvfrom+0x32>
   150c8:	4b08      	ldr	r3, [pc, #32]	; (150ec <tls_interface_recvfrom+0x90>)
   150ca:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   150ce:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   150d2:	2b02      	cmp	r3, #2
   150d4:	d1db      	bne.n	1508e <tls_interface_recvfrom+0x32>
   150d6:	4601      	mov	r1, r0
   150d8:	4620      	mov	r0, r4
   150da:	f7ff fe21 	bl	14d20 <secure_client_socket>
   150de:	2800      	cmp	r0, #0
   150e0:	d0dc      	beq.n	1509c <tls_interface_recvfrom+0x40>
   150e2:	dcd5      	bgt.n	15090 <tls_interface_recvfrom+0x34>
   150e4:	e7d6      	b.n	15094 <tls_interface_recvfrom+0x38>
   150e6:	2009      	movs	r0, #9
   150e8:	e7d2      	b.n	15090 <tls_interface_recvfrom+0x34>
   150ea:	bf00      	nop
   150ec:	20020ad4 	.word	0x20020ad4

000150f0 <tls_interface_bind>:
   150f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   150f4:	b082      	sub	sp, #8
   150f6:	460e      	mov	r6, r1
   150f8:	4617      	mov	r7, r2
   150fa:	4605      	mov	r5, r0
   150fc:	f006 fc76 	bl	1b9ec <interface_socket_from_handle_get>
   15100:	2800      	cmp	r0, #0
   15102:	d069      	beq.n	151d8 <tls_interface_bind+0xe8>
   15104:	6803      	ldr	r3, [r0, #0]
   15106:	4604      	mov	r4, r0
   15108:	b29b      	uxth	r3, r3
   1510a:	2b02      	cmp	r3, #2
   1510c:	d158      	bne.n	151c0 <tls_interface_bind+0xd0>
   1510e:	463a      	mov	r2, r7
   15110:	4631      	mov	r1, r6
   15112:	4628      	mov	r0, r5
   15114:	f001 f9c2 	bl	1649c <ip_interface_bind>
   15118:	2800      	cmp	r0, #0
   1511a:	d148      	bne.n	151ae <tls_interface_bind+0xbe>
   1511c:	00ee      	lsls	r6, r5, #3
   1511e:	4f2f      	ldr	r7, [pc, #188]	; (151dc <tls_interface_bind+0xec>)
   15120:	1973      	adds	r3, r6, r5
   15122:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   15126:	2b01      	cmp	r3, #1
   15128:	d002      	beq.n	15130 <tls_interface_bind+0x40>
   1512a:	b002      	add	sp, #8
   1512c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15130:	f04f 3cff 	mov.w	ip, #4294967295
   15134:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 151e0 <tls_interface_bind+0xf0>
   15138:	f247 0281 	movw	r2, #28801	; 0x7081
   1513c:	eb0a 0906 	add.w	r9, sl, r6
   15140:	f8d9 3004 	ldr.w	r3, [r9, #4]
   15144:	69a1      	ldr	r1, [r4, #24]
   15146:	4628      	mov	r0, r5
   15148:	f8cd c004 	str.w	ip, [sp, #4]
   1514c:	f000 fb7c 	bl	15848 <ip_interface_request_create>
   15150:	4680      	mov	r8, r0
   15152:	2800      	cmp	r0, #0
   15154:	d03e      	beq.n	151d4 <tls_interface_bind+0xe4>
   15156:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1515a:	bbaa      	cbnz	r2, 151c8 <tls_interface_bind+0xd8>
   1515c:	1971      	adds	r1, r6, r5
   1515e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   15162:	2224      	movs	r2, #36	; 0x24
   15164:	f108 0014 	add.w	r0, r8, #20
   15168:	f009 fb95 	bl	1e896 <memcpy>
   1516c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   15170:	4641      	mov	r1, r8
   15172:	3324      	adds	r3, #36	; 0x24
   15174:	f8c8 3008 	str.w	r3, [r8, #8]
   15178:	6822      	ldr	r2, [r4, #0]
   1517a:	2304      	movs	r3, #4
   1517c:	0c12      	lsrs	r2, r2, #16
   1517e:	0412      	lsls	r2, r2, #16
   15180:	f042 020a 	orr.w	r2, r2, #10
   15184:	6022      	str	r2, [r4, #0]
   15186:	4620      	mov	r0, r4
   15188:	f247 0281 	movw	r2, #28801	; 0x7081
   1518c:	f000 fb7c 	bl	15888 <ip_interface_request_send>
   15190:	b968      	cbnz	r0, 151ae <tls_interface_bind+0xbe>
   15192:	6823      	ldr	r3, [r4, #0]
   15194:	00db      	lsls	r3, r3, #3
   15196:	d415      	bmi.n	151c4 <tls_interface_bind+0xd4>
   15198:	4628      	mov	r0, r5
   1519a:	ab01      	add	r3, sp, #4
   1519c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   151a0:	210b      	movs	r1, #11
   151a2:	f000 fb85 	bl	158b0 <ip_interface_wait>
   151a6:	2800      	cmp	r0, #0
   151a8:	d0bf      	beq.n	1512a <tls_interface_bind+0x3a>
   151aa:	2304      	movs	r3, #4
   151ac:	6023      	str	r3, [r4, #0]
   151ae:	2800      	cmp	r0, #0
   151b0:	ddbb      	ble.n	1512a <tls_interface_bind+0x3a>
   151b2:	f7fc f959 	bl	11468 <bsd_os_errno_set>
   151b6:	f04f 30ff 	mov.w	r0, #4294967295
   151ba:	b002      	add	sp, #8
   151bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   151c0:	202d      	movs	r0, #45	; 0x2d
   151c2:	e7f6      	b.n	151b2 <tls_interface_bind+0xc2>
   151c4:	2073      	movs	r0, #115	; 0x73
   151c6:	e7f4      	b.n	151b2 <tls_interface_bind+0xc2>
   151c8:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   151cc:	6800      	ldr	r0, [r0, #0]
   151ce:	f009 fb62 	bl	1e896 <memcpy>
   151d2:	e7c3      	b.n	1515c <tls_interface_bind+0x6c>
   151d4:	200c      	movs	r0, #12
   151d6:	e7ec      	b.n	151b2 <tls_interface_bind+0xc2>
   151d8:	2009      	movs	r0, #9
   151da:	e7ea      	b.n	151b2 <tls_interface_bind+0xc2>
   151dc:	20020ad4 	.word	0x20020ad4
   151e0:	20020c18 	.word	0x20020c18

000151e4 <tls_interface_connect>:
   151e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151e6:	460e      	mov	r6, r1
   151e8:	4617      	mov	r7, r2
   151ea:	4604      	mov	r4, r0
   151ec:	f006 fbfe 	bl	1b9ec <interface_socket_from_handle_get>
   151f0:	b1e8      	cbz	r0, 1522e <tls_interface_connect+0x4a>
   151f2:	4b13      	ldr	r3, [pc, #76]	; (15240 <tls_interface_connect+0x5c>)
   151f4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   151f8:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   151fc:	2b02      	cmp	r3, #2
   151fe:	d11c      	bne.n	1523a <tls_interface_connect+0x56>
   15200:	6803      	ldr	r3, [r0, #0]
   15202:	4605      	mov	r5, r0
   15204:	b29b      	uxth	r3, r3
   15206:	2b02      	cmp	r3, #2
   15208:	d003      	beq.n	15212 <tls_interface_connect+0x2e>
   1520a:	6803      	ldr	r3, [r0, #0]
   1520c:	b29b      	uxth	r3, r3
   1520e:	2b04      	cmp	r3, #4
   15210:	d113      	bne.n	1523a <tls_interface_connect+0x56>
   15212:	463a      	mov	r2, r7
   15214:	4631      	mov	r1, r6
   15216:	4620      	mov	r0, r4
   15218:	f000 ff58 	bl	160cc <ip_interface_connect>
   1521c:	b110      	cbz	r0, 15224 <tls_interface_connect+0x40>
   1521e:	2800      	cmp	r0, #0
   15220:	dc06      	bgt.n	15230 <tls_interface_connect+0x4c>
   15222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15224:	4629      	mov	r1, r5
   15226:	4620      	mov	r0, r4
   15228:	f7ff fd7a 	bl	14d20 <secure_client_socket>
   1522c:	e7f7      	b.n	1521e <tls_interface_connect+0x3a>
   1522e:	2009      	movs	r0, #9
   15230:	f7fc f91a 	bl	11468 <bsd_os_errno_set>
   15234:	f04f 30ff 	mov.w	r0, #4294967295
   15238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1523a:	202d      	movs	r0, #45	; 0x2d
   1523c:	e7f8      	b.n	15230 <tls_interface_connect+0x4c>
   1523e:	bf00      	nop
   15240:	20020ad4 	.word	0x20020ad4

00015244 <tls_interface_listen>:
   15244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15248:	b085      	sub	sp, #20
   1524a:	4689      	mov	r9, r1
   1524c:	4605      	mov	r5, r0
   1524e:	f006 fbcd 	bl	1b9ec <interface_socket_from_handle_get>
   15252:	2800      	cmp	r0, #0
   15254:	f000 8084 	beq.w	15360 <tls_interface_listen+0x11c>
   15258:	6803      	ldr	r3, [r0, #0]
   1525a:	4604      	mov	r4, r0
   1525c:	00da      	lsls	r2, r3, #3
   1525e:	d47d      	bmi.n	1535c <tls_interface_listen+0x118>
   15260:	6903      	ldr	r3, [r0, #16]
   15262:	2b01      	cmp	r3, #1
   15264:	d17a      	bne.n	1535c <tls_interface_listen+0x118>
   15266:	6803      	ldr	r3, [r0, #0]
   15268:	b29b      	uxth	r3, r3
   1526a:	2b04      	cmp	r3, #4
   1526c:	d05d      	beq.n	1532a <tls_interface_listen+0xe6>
   1526e:	6823      	ldr	r3, [r4, #0]
   15270:	b29b      	uxth	r3, r3
   15272:	2b0b      	cmp	r3, #11
   15274:	d172      	bne.n	1535c <tls_interface_listen+0x118>
   15276:	4a3b      	ldr	r2, [pc, #236]	; (15364 <tls_interface_listen+0x120>)
   15278:	00ee      	lsls	r6, r5, #3
   1527a:	1973      	adds	r3, r6, r5
   1527c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   15280:	9201      	str	r2, [sp, #4]
   15282:	2b01      	cmp	r3, #1
   15284:	d16a      	bne.n	1535c <tls_interface_listen+0x118>
   15286:	2201      	movs	r2, #1
   15288:	9901      	ldr	r1, [sp, #4]
   1528a:	1973      	adds	r3, r6, r5
   1528c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   15290:	6823      	ldr	r3, [r4, #0]
   15292:	2b0b      	cmp	r3, #11
   15294:	d040      	beq.n	15318 <tls_interface_listen+0xd4>
   15296:	f04f 3cff 	mov.w	ip, #4294967295
   1529a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 15368 <tls_interface_listen+0x124>
   1529e:	f247 0281 	movw	r2, #28801	; 0x7081
   152a2:	eb0a 0806 	add.w	r8, sl, r6
   152a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   152aa:	69a1      	ldr	r1, [r4, #24]
   152ac:	4628      	mov	r0, r5
   152ae:	6827      	ldr	r7, [r4, #0]
   152b0:	f8cd c00c 	str.w	ip, [sp, #12]
   152b4:	f000 fac8 	bl	15848 <ip_interface_request_create>
   152b8:	4683      	mov	fp, r0
   152ba:	2800      	cmp	r0, #0
   152bc:	d046      	beq.n	1534c <tls_interface_listen+0x108>
   152be:	f8d8 2004 	ldr.w	r2, [r8, #4]
   152c2:	2a00      	cmp	r2, #0
   152c4:	d144      	bne.n	15350 <tls_interface_listen+0x10c>
   152c6:	9b01      	ldr	r3, [sp, #4]
   152c8:	1971      	adds	r1, r6, r5
   152ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   152ce:	2224      	movs	r2, #36	; 0x24
   152d0:	f10b 0014 	add.w	r0, fp, #20
   152d4:	f009 fadf 	bl	1e896 <memcpy>
   152d8:	f8db 2008 	ldr.w	r2, [fp, #8]
   152dc:	4659      	mov	r1, fp
   152de:	3224      	adds	r2, #36	; 0x24
   152e0:	f8cb 2008 	str.w	r2, [fp, #8]
   152e4:	6822      	ldr	r2, [r4, #0]
   152e6:	463b      	mov	r3, r7
   152e8:	0c12      	lsrs	r2, r2, #16
   152ea:	0412      	lsls	r2, r2, #16
   152ec:	f042 020a 	orr.w	r2, r2, #10
   152f0:	6022      	str	r2, [r4, #0]
   152f2:	4620      	mov	r0, r4
   152f4:	f247 0281 	movw	r2, #28801	; 0x7081
   152f8:	f000 fac6 	bl	15888 <ip_interface_request_send>
   152fc:	b980      	cbnz	r0, 15320 <tls_interface_listen+0xdc>
   152fe:	6823      	ldr	r3, [r4, #0]
   15300:	00db      	lsls	r3, r3, #3
   15302:	d41b      	bmi.n	1533c <tls_interface_listen+0xf8>
   15304:	ab03      	add	r3, sp, #12
   15306:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1530a:	210b      	movs	r1, #11
   1530c:	4628      	mov	r0, r5
   1530e:	f000 facf 	bl	158b0 <ip_interface_wait>
   15312:	b108      	cbz	r0, 15318 <tls_interface_listen+0xd4>
   15314:	6027      	str	r7, [r4, #0]
   15316:	e003      	b.n	15320 <tls_interface_listen+0xdc>
   15318:	4649      	mov	r1, r9
   1531a:	4628      	mov	r0, r5
   1531c:	f001 f960 	bl	165e0 <ip_interface_listen>
   15320:	2800      	cmp	r0, #0
   15322:	dc0c      	bgt.n	1533e <tls_interface_listen+0xfa>
   15324:	b005      	add	sp, #20
   15326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1532a:	4a0e      	ldr	r2, [pc, #56]	; (15364 <tls_interface_listen+0x120>)
   1532c:	00ee      	lsls	r6, r5, #3
   1532e:	1973      	adds	r3, r6, r5
   15330:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   15334:	9201      	str	r2, [sp, #4]
   15336:	2b02      	cmp	r3, #2
   15338:	d199      	bne.n	1526e <tls_interface_listen+0x2a>
   1533a:	e7a4      	b.n	15286 <tls_interface_listen+0x42>
   1533c:	2073      	movs	r0, #115	; 0x73
   1533e:	f7fc f893 	bl	11468 <bsd_os_errno_set>
   15342:	f04f 30ff 	mov.w	r0, #4294967295
   15346:	b005      	add	sp, #20
   15348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1534c:	200c      	movs	r0, #12
   1534e:	e7f6      	b.n	1533e <tls_interface_listen+0xfa>
   15350:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   15354:	6800      	ldr	r0, [r0, #0]
   15356:	f009 fa9e 	bl	1e896 <memcpy>
   1535a:	e7b4      	b.n	152c6 <tls_interface_listen+0x82>
   1535c:	202d      	movs	r0, #45	; 0x2d
   1535e:	e7ee      	b.n	1533e <tls_interface_listen+0xfa>
   15360:	2009      	movs	r0, #9
   15362:	e7ec      	b.n	1533e <tls_interface_listen+0xfa>
   15364:	20020ad4 	.word	0x20020ad4
   15368:	20020c18 	.word	0x20020c18

0001536c <tls_interface_accept>:
   1536c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15370:	b083      	sub	sp, #12
   15372:	460f      	mov	r7, r1
   15374:	4690      	mov	r8, r2
   15376:	4699      	mov	r9, r3
   15378:	4606      	mov	r6, r0
   1537a:	f04f 34ff 	mov.w	r4, #4294967295
   1537e:	f006 fb35 	bl	1b9ec <interface_socket_from_handle_get>
   15382:	9401      	str	r4, [sp, #4]
   15384:	2800      	cmp	r0, #0
   15386:	d048      	beq.n	1541a <tls_interface_accept+0xae>
   15388:	6805      	ldr	r5, [r0, #0]
   1538a:	b2ad      	uxth	r5, r5
   1538c:	2d07      	cmp	r5, #7
   1538e:	d144      	bne.n	1541a <tls_interface_accept+0xae>
   15390:	6803      	ldr	r3, [r0, #0]
   15392:	00db      	lsls	r3, r3, #3
   15394:	d443      	bmi.n	1541e <tls_interface_accept+0xb2>
   15396:	464b      	mov	r3, r9
   15398:	4642      	mov	r2, r8
   1539a:	4639      	mov	r1, r7
   1539c:	4630      	mov	r0, r6
   1539e:	f001 f99b 	bl	166d8 <ip_interface_accept>
   153a2:	1e04      	subs	r4, r0, #0
   153a4:	da08      	bge.n	153b8 <tls_interface_accept+0x4c>
   153a6:	4620      	mov	r0, r4
   153a8:	f7fc f85e 	bl	11468 <bsd_os_errno_set>
   153ac:	f04f 34ff 	mov.w	r4, #4294967295
   153b0:	4620      	mov	r0, r4
   153b2:	b003      	add	sp, #12
   153b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   153b8:	f006 fb18 	bl	1b9ec <interface_socket_from_handle_get>
   153bc:	6803      	ldr	r3, [r0, #0]
   153be:	f8df 8068 	ldr.w	r8, [pc, #104]	; 15428 <tls_interface_accept+0xbc>
   153c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   153c6:	6003      	str	r3, [r0, #0]
   153c8:	6803      	ldr	r3, [r0, #0]
   153ca:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   153ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   153d2:	00bf      	lsls	r7, r7, #2
   153d4:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   153d8:	4605      	mov	r5, r0
   153da:	6003      	str	r3, [r0, #0]
   153dc:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   153e0:	2224      	movs	r2, #36	; 0x24
   153e2:	eb08 0007 	add.w	r0, r8, r7
   153e6:	f009 fa56 	bl	1e896 <memcpy>
   153ea:	2302      	movs	r3, #2
   153ec:	f808 3007 	strb.w	r3, [r8, r7]
   153f0:	682a      	ldr	r2, [r5, #0]
   153f2:	ab01      	add	r3, sp, #4
   153f4:	0c12      	lsrs	r2, r2, #16
   153f6:	0412      	lsls	r2, r2, #16
   153f8:	f042 020b 	orr.w	r2, r2, #11
   153fc:	602a      	str	r2, [r5, #0]
   153fe:	210c      	movs	r1, #12
   15400:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15404:	4620      	mov	r0, r4
   15406:	f000 fa53 	bl	158b0 <ip_interface_wait>
   1540a:	4605      	mov	r5, r0
   1540c:	2800      	cmp	r0, #0
   1540e:	d0cf      	beq.n	153b0 <tls_interface_accept+0x44>
   15410:	4620      	mov	r0, r4
   15412:	f000 fb45 	bl	15aa0 <ip_interface_close>
   15416:	462c      	mov	r4, r5
   15418:	e7c5      	b.n	153a6 <tls_interface_accept+0x3a>
   1541a:	2409      	movs	r4, #9
   1541c:	e7c3      	b.n	153a6 <tls_interface_accept+0x3a>
   1541e:	202d      	movs	r0, #45	; 0x2d
   15420:	f7fc f822 	bl	11468 <bsd_os_errno_set>
   15424:	e7c4      	b.n	153b0 <tls_interface_accept+0x44>
   15426:	bf00      	nop
   15428:	20020ad4 	.word	0x20020ad4

0001542c <tls_interface_setopt>:
   1542c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15430:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   15434:	b082      	sub	sp, #8
   15436:	9e08      	ldr	r6, [sp, #32]
   15438:	d120      	bne.n	1547c <tls_interface_setopt+0x50>
   1543a:	4698      	mov	r8, r3
   1543c:	4617      	mov	r7, r2
   1543e:	4605      	mov	r5, r0
   15440:	2b00      	cmp	r3, #0
   15442:	f000 80a0 	beq.w	15586 <tls_interface_setopt+0x15a>
   15446:	f006 fad1 	bl	1b9ec <interface_socket_from_handle_get>
   1544a:	2800      	cmp	r0, #0
   1544c:	f000 8097 	beq.w	1557e <tls_interface_setopt+0x152>
   15450:	6804      	ldr	r4, [r0, #0]
   15452:	b2a4      	uxth	r4, r4
   15454:	2c02      	cmp	r4, #2
   15456:	d008      	beq.n	1546a <tls_interface_setopt+0x3e>
   15458:	6803      	ldr	r3, [r0, #0]
   1545a:	b29b      	uxth	r3, r3
   1545c:	2b04      	cmp	r3, #4
   1545e:	d004      	beq.n	1546a <tls_interface_setopt+0x3e>
   15460:	6803      	ldr	r3, [r0, #0]
   15462:	b29b      	uxth	r3, r3
   15464:	2b05      	cmp	r3, #5
   15466:	f040 808a 	bne.w	1557e <tls_interface_setopt+0x152>
   1546a:	1e7a      	subs	r2, r7, #1
   1546c:	2a05      	cmp	r2, #5
   1546e:	f200 8090 	bhi.w	15592 <tls_interface_setopt+0x166>
   15472:	e8df f002 	tbb	[pc, r2]
   15476:	2718      	.short	0x2718
   15478:	08594b3c 	.word	0x08594b3c
   1547c:	b002      	add	sp, #8
   1547e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15482:	f001 ba6b 	b.w	1695c <ip_interface_setopt>
   15486:	4601      	mov	r1, r0
   15488:	e9cd 8600 	strd	r8, r6, [sp]
   1548c:	4628      	mov	r0, r5
   1548e:	f247 0301 	movw	r3, #28673	; 0x7001
   15492:	f44f 7280 	mov.w	r2, #256	; 0x100
   15496:	f000 ff8b 	bl	163b0 <ip_interface_socketoption_send>
   1549a:	2800      	cmp	r0, #0
   1549c:	d161      	bne.n	15562 <tls_interface_setopt+0x136>
   1549e:	2000      	movs	r0, #0
   154a0:	b002      	add	sp, #8
   154a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   154a6:	2e04      	cmp	r6, #4
   154a8:	d15a      	bne.n	15560 <tls_interface_setopt+0x134>
   154aa:	f8d8 0000 	ldr.w	r0, [r8]
   154ae:	2800      	cmp	r0, #0
   154b0:	d05e      	beq.n	15570 <tls_interface_setopt+0x144>
   154b2:	2801      	cmp	r0, #1
   154b4:	d154      	bne.n	15560 <tls_interface_setopt+0x134>
   154b6:	4b38      	ldr	r3, [pc, #224]	; (15598 <tls_interface_setopt+0x16c>)
   154b8:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   154bc:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   154c0:	2000      	movs	r0, #0
   154c2:	e7ed      	b.n	154a0 <tls_interface_setopt+0x74>
   154c4:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   154c8:	d04a      	beq.n	15560 <tls_interface_setopt+0x134>
   154ca:	f016 0703 	ands.w	r7, r6, #3
   154ce:	d147      	bne.n	15560 <tls_interface_setopt+0x134>
   154d0:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   154d4:	00a4      	lsls	r4, r4, #2
   154d6:	4b30      	ldr	r3, [pc, #192]	; (15598 <tls_interface_setopt+0x16c>)
   154d8:	1d20      	adds	r0, r4, #4
   154da:	4418      	add	r0, r3
   154dc:	4423      	add	r3, r4
   154de:	4632      	mov	r2, r6
   154e0:	4641      	mov	r1, r8
   154e2:	f883 c003 	strb.w	ip, [r3, #3]
   154e6:	f009 f9d6 	bl	1e896 <memcpy>
   154ea:	4638      	mov	r0, r7
   154ec:	e7d8      	b.n	154a0 <tls_interface_setopt+0x74>
   154ee:	2e01      	cmp	r6, #1
   154f0:	d136      	bne.n	15560 <tls_interface_setopt+0x134>
   154f2:	f898 2000 	ldrb.w	r2, [r8]
   154f6:	4b28      	ldr	r3, [pc, #160]	; (15598 <tls_interface_setopt+0x16c>)
   154f8:	3200      	adds	r2, #0
   154fa:	bf18      	it	ne
   154fc:	2201      	movne	r2, #1
   154fe:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   15502:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   15506:	7062      	strb	r2, [r4, #1]
   15508:	2000      	movs	r0, #0
   1550a:	e7c9      	b.n	154a0 <tls_interface_setopt+0x74>
   1550c:	2e04      	cmp	r6, #4
   1550e:	d127      	bne.n	15560 <tls_interface_setopt+0x134>
   15510:	f8d8 2000 	ldr.w	r2, [r8]
   15514:	2a02      	cmp	r2, #2
   15516:	d823      	bhi.n	15560 <tls_interface_setopt+0x134>
   15518:	4b1f      	ldr	r3, [pc, #124]	; (15598 <tls_interface_setopt+0x16c>)
   1551a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   1551e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   15522:	70a2      	strb	r2, [r4, #2]
   15524:	2000      	movs	r0, #0
   15526:	e7bb      	b.n	154a0 <tls_interface_setopt+0x74>
   15528:	4c1c      	ldr	r4, [pc, #112]	; (1559c <tls_interface_setopt+0x170>)
   1552a:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   1552e:	b138      	cbz	r0, 15540 <tls_interface_setopt+0x114>
   15530:	f005 fd5e 	bl	1aff0 <nrf_free>
   15534:	2200      	movs	r2, #0
   15536:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1553a:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   1553e:	605a      	str	r2, [r3, #4]
   15540:	2e00      	cmp	r6, #0
   15542:	d0ac      	beq.n	1549e <tls_interface_setopt+0x72>
   15544:	4630      	mov	r0, r6
   15546:	f005 fd49 	bl	1afdc <nrf_malloc>
   1554a:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   1554e:	b1c0      	cbz	r0, 15582 <tls_interface_setopt+0x156>
   15550:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   15554:	4632      	mov	r2, r6
   15556:	4641      	mov	r1, r8
   15558:	6066      	str	r6, [r4, #4]
   1555a:	f009 f99c 	bl	1e896 <memcpy>
   1555e:	e79e      	b.n	1549e <tls_interface_setopt+0x72>
   15560:	2016      	movs	r0, #22
   15562:	f7fb ff81 	bl	11468 <bsd_os_errno_set>
   15566:	f04f 30ff 	mov.w	r0, #4294967295
   1556a:	b002      	add	sp, #8
   1556c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15570:	2202      	movs	r2, #2
   15572:	4b09      	ldr	r3, [pc, #36]	; (15598 <tls_interface_setopt+0x16c>)
   15574:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   15578:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   1557c:	e790      	b.n	154a0 <tls_interface_setopt+0x74>
   1557e:	2009      	movs	r0, #9
   15580:	e7ef      	b.n	15562 <tls_interface_setopt+0x136>
   15582:	200c      	movs	r0, #12
   15584:	e7ed      	b.n	15562 <tls_interface_setopt+0x136>
   15586:	200e      	movs	r0, #14
   15588:	f7fb ff6e 	bl	11468 <bsd_os_errno_set>
   1558c:	f04f 30ff 	mov.w	r0, #4294967295
   15590:	e786      	b.n	154a0 <tls_interface_setopt+0x74>
   15592:	202a      	movs	r0, #42	; 0x2a
   15594:	e7e5      	b.n	15562 <tls_interface_setopt+0x136>
   15596:	bf00      	nop
   15598:	20020ad4 	.word	0x20020ad4
   1559c:	20020c18 	.word	0x20020c18

000155a0 <tls_interface_getopt>:
   155a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   155a2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   155a6:	b083      	sub	sp, #12
   155a8:	9f08      	ldr	r7, [sp, #32]
   155aa:	d112      	bne.n	155d2 <tls_interface_getopt+0x32>
   155ac:	461d      	mov	r5, r3
   155ae:	b16b      	cbz	r3, 155cc <tls_interface_getopt+0x2c>
   155b0:	b167      	cbz	r7, 155cc <tls_interface_getopt+0x2c>
   155b2:	4606      	mov	r6, r0
   155b4:	4614      	mov	r4, r2
   155b6:	f006 fa19 	bl	1b9ec <interface_socket_from_handle_get>
   155ba:	b178      	cbz	r0, 155dc <tls_interface_getopt+0x3c>
   155bc:	3c01      	subs	r4, #1
   155be:	2c05      	cmp	r4, #5
   155c0:	d859      	bhi.n	15676 <tls_interface_getopt+0xd6>
   155c2:	e8df f004 	tbb	[pc, r4]
   155c6:	2818      	.short	0x2818
   155c8:	0d584c40 	.word	0x0d584c40
   155cc:	200e      	movs	r0, #14
   155ce:	b003      	add	sp, #12
   155d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   155d2:	b003      	add	sp, #12
   155d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   155d8:	f001 ba62 	b.w	16aa0 <ip_interface_getopt>
   155dc:	2009      	movs	r0, #9
   155de:	e7f6      	b.n	155ce <tls_interface_getopt+0x2e>
   155e0:	4601      	mov	r1, r0
   155e2:	e9cd 5700 	strd	r5, r7, [sp]
   155e6:	4630      	mov	r0, r6
   155e8:	f247 0301 	movw	r3, #28673	; 0x7001
   155ec:	f44f 7280 	mov.w	r2, #256	; 0x100
   155f0:	f000 fe2e 	bl	16250 <ip_interface_socketoption_get>
   155f4:	e7eb      	b.n	155ce <tls_interface_getopt+0x2e>
   155f6:	683b      	ldr	r3, [r7, #0]
   155f8:	2b04      	cmp	r3, #4
   155fa:	d13e      	bne.n	1567a <tls_interface_getopt+0xda>
   155fc:	4b22      	ldr	r3, [pc, #136]	; (15688 <tls_interface_getopt+0xe8>)
   155fe:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   15602:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   15606:	2000      	movs	r0, #0
   15608:	f1a3 0301 	sub.w	r3, r3, #1
   1560c:	fab3 f383 	clz	r3, r3
   15610:	095b      	lsrs	r3, r3, #5
   15612:	602b      	str	r3, [r5, #0]
   15614:	e7db      	b.n	155ce <tls_interface_getopt+0x2e>
   15616:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1561a:	491b      	ldr	r1, [pc, #108]	; (15688 <tls_interface_getopt+0xe8>)
   1561c:	683b      	ldr	r3, [r7, #0]
   1561e:	00b6      	lsls	r6, r6, #2
   15620:	198a      	adds	r2, r1, r6
   15622:	f013 0403 	ands.w	r4, r3, #3
   15626:	78d0      	ldrb	r0, [r2, #3]
   15628:	d129      	bne.n	1567e <tls_interface_getopt+0xde>
   1562a:	089b      	lsrs	r3, r3, #2
   1562c:	4283      	cmp	r3, r0
   1562e:	bf28      	it	cs
   15630:	4603      	movcs	r3, r0
   15632:	009a      	lsls	r2, r3, #2
   15634:	b31b      	cbz	r3, 1567e <tls_interface_getopt+0xde>
   15636:	3604      	adds	r6, #4
   15638:	4431      	add	r1, r6
   1563a:	603a      	str	r2, [r7, #0]
   1563c:	4628      	mov	r0, r5
   1563e:	f009 f92a 	bl	1e896 <memcpy>
   15642:	4620      	mov	r0, r4
   15644:	e7c3      	b.n	155ce <tls_interface_getopt+0x2e>
   15646:	683b      	ldr	r3, [r7, #0]
   15648:	2b01      	cmp	r3, #1
   1564a:	d116      	bne.n	1567a <tls_interface_getopt+0xda>
   1564c:	4b0e      	ldr	r3, [pc, #56]	; (15688 <tls_interface_getopt+0xe8>)
   1564e:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   15652:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   15656:	7873      	ldrb	r3, [r6, #1]
   15658:	2000      	movs	r0, #0
   1565a:	702b      	strb	r3, [r5, #0]
   1565c:	e7b7      	b.n	155ce <tls_interface_getopt+0x2e>
   1565e:	683b      	ldr	r3, [r7, #0]
   15660:	2b04      	cmp	r3, #4
   15662:	d10a      	bne.n	1567a <tls_interface_getopt+0xda>
   15664:	4b08      	ldr	r3, [pc, #32]	; (15688 <tls_interface_getopt+0xe8>)
   15666:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   1566a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1566e:	78b3      	ldrb	r3, [r6, #2]
   15670:	2000      	movs	r0, #0
   15672:	602b      	str	r3, [r5, #0]
   15674:	e7ab      	b.n	155ce <tls_interface_getopt+0x2e>
   15676:	202a      	movs	r0, #42	; 0x2a
   15678:	e7a9      	b.n	155ce <tls_interface_getopt+0x2e>
   1567a:	2016      	movs	r0, #22
   1567c:	e7a7      	b.n	155ce <tls_interface_getopt+0x2e>
   1567e:	2800      	cmp	r0, #0
   15680:	d1fb      	bne.n	1567a <tls_interface_getopt+0xda>
   15682:	6038      	str	r0, [r7, #0]
   15684:	e7a3      	b.n	155ce <tls_interface_getopt+0x2e>
   15686:	bf00      	nop
   15688:	20020ad4 	.word	0x20020ad4

0001568c <tls_rpc_ip_event_handler>:
   1568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1568e:	f248 0581 	movw	r5, #32897	; 0x8081
   15692:	42ab      	cmp	r3, r5
   15694:	460c      	mov	r4, r1
   15696:	d044      	beq.n	15722 <tls_rpc_ip_event_handler+0x96>
   15698:	f249 0182 	movw	r1, #36994	; 0x9082
   1569c:	428b      	cmp	r3, r1
   1569e:	4606      	mov	r6, r0
   156a0:	d02d      	beq.n	156fe <tls_rpc_ip_event_handler+0x72>
   156a2:	f248 0102 	movw	r1, #32770	; 0x8002
   156a6:	428b      	cmp	r3, r1
   156a8:	d001      	beq.n	156ae <tls_rpc_ip_event_handler+0x22>
   156aa:	2001      	movs	r0, #1
   156ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   156ae:	2c00      	cmp	r4, #0
   156b0:	d0fb      	beq.n	156aa <tls_rpc_ip_event_handler+0x1e>
   156b2:	6963      	ldr	r3, [r4, #20]
   156b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   156b8:	d002      	beq.n	156c0 <tls_rpc_ip_event_handler+0x34>
   156ba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   156be:	d1f4      	bne.n	156aa <tls_rpc_ip_event_handler+0x1e>
   156c0:	6823      	ldr	r3, [r4, #0]
   156c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   156c6:	6023      	str	r3, [r4, #0]
   156c8:	6955      	ldr	r5, [r2, #20]
   156ca:	bb05      	cbnz	r5, 1570e <tls_rpc_ip_event_handler+0x82>
   156cc:	6823      	ldr	r3, [r4, #0]
   156ce:	0c1b      	lsrs	r3, r3, #16
   156d0:	041b      	lsls	r3, r3, #16
   156d2:	f043 0305 	orr.w	r3, r3, #5
   156d6:	6023      	str	r3, [r4, #0]
   156d8:	6823      	ldr	r3, [r4, #0]
   156da:	00db      	lsls	r3, r3, #3
   156dc:	d50d      	bpl.n	156fa <tls_rpc_ip_event_handler+0x6e>
   156de:	4b2a      	ldr	r3, [pc, #168]	; (15788 <tls_rpc_ip_event_handler+0xfc>)
   156e0:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   156e4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   156e8:	2b02      	cmp	r3, #2
   156ea:	d106      	bne.n	156fa <tls_rpc_ip_event_handler+0x6e>
   156ec:	4630      	mov	r0, r6
   156ee:	4621      	mov	r1, r4
   156f0:	f7ff fb16 	bl	14d20 <secure_client_socket>
   156f4:	b108      	cbz	r0, 156fa <tls_rpc_ip_event_handler+0x6e>
   156f6:	2873      	cmp	r0, #115	; 0x73
   156f8:	d10c      	bne.n	15714 <tls_rpc_ip_event_handler+0x88>
   156fa:	2000      	movs	r0, #0
   156fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   156fe:	2c00      	cmp	r4, #0
   15700:	d0fb      	beq.n	156fa <tls_rpc_ip_event_handler+0x6e>
   15702:	6823      	ldr	r3, [r4, #0]
   15704:	b29b      	uxth	r3, r3
   15706:	2b0b      	cmp	r3, #11
   15708:	d1f7      	bne.n	156fa <tls_rpc_ip_event_handler+0x6e>
   1570a:	6915      	ldr	r5, [r2, #16]
   1570c:	b1cd      	cbz	r5, 15742 <tls_rpc_ip_event_handler+0xb6>
   1570e:	4628      	mov	r0, r5
   15710:	f000 f890 	bl	15834 <rpc_error_to_nrf_bsd_error>
   15714:	6060      	str	r0, [r4, #4]
   15716:	6823      	ldr	r3, [r4, #0]
   15718:	2000      	movs	r0, #0
   1571a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1571e:	6023      	str	r3, [r4, #0]
   15720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15722:	2900      	cmp	r1, #0
   15724:	d0e9      	beq.n	156fa <tls_rpc_ip_event_handler+0x6e>
   15726:	680b      	ldr	r3, [r1, #0]
   15728:	b29b      	uxth	r3, r3
   1572a:	2b0a      	cmp	r3, #10
   1572c:	d1e5      	bne.n	156fa <tls_rpc_ip_event_handler+0x6e>
   1572e:	6950      	ldr	r0, [r2, #20]
   15730:	2800      	cmp	r0, #0
   15732:	d1ed      	bne.n	15710 <tls_rpc_ip_event_handler+0x84>
   15734:	680b      	ldr	r3, [r1, #0]
   15736:	0c1b      	lsrs	r3, r3, #16
   15738:	041b      	lsls	r3, r3, #16
   1573a:	f043 030b 	orr.w	r3, r3, #11
   1573e:	600b      	str	r3, [r1, #0]
   15740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15742:	6823      	ldr	r3, [r4, #0]
   15744:	4f11      	ldr	r7, [pc, #68]	; (1578c <tls_rpc_ip_event_handler+0x100>)
   15746:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1574a:	6023      	str	r3, [r4, #0]
   1574c:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   15750:	b130      	cbz	r0, 15760 <tls_rpc_ip_event_handler+0xd4>
   15752:	f005 fc4d 	bl	1aff0 <nrf_free>
   15756:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1575a:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   1575e:	605d      	str	r5, [r3, #4]
   15760:	6823      	ldr	r3, [r4, #0]
   15762:	2000      	movs	r0, #0
   15764:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   15768:	6023      	str	r3, [r4, #0]
   1576a:	6823      	ldr	r3, [r4, #0]
   1576c:	0c1b      	lsrs	r3, r3, #16
   1576e:	041b      	lsls	r3, r3, #16
   15770:	f043 030c 	orr.w	r3, r3, #12
   15774:	6023      	str	r3, [r4, #0]
   15776:	6823      	ldr	r3, [r4, #0]
   15778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1577c:	6023      	str	r3, [r4, #0]
   1577e:	6823      	ldr	r3, [r4, #0]
   15780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   15784:	6023      	str	r3, [r4, #0]
   15786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15788:	20020ad4 	.word	0x20020ad4
   1578c:	20020c18 	.word	0x20020c18

00015790 <ip_client_event_handler>:
   15790:	f850 1b08 	ldr.w	r1, [r0], #8
   15794:	0c09      	lsrs	r1, r1, #16
   15796:	f001 bb23 	b.w	16de0 <rpc_ip_event_handler>
   1579a:	bf00      	nop

0001579c <rpc_ip_client_init>:
   1579c:	4801      	ldr	r0, [pc, #4]	; (157a4 <rpc_ip_client_init+0x8>)
   1579e:	f001 be21 	b.w	173e4 <rpc_client_register>
   157a2:	bf00      	nop
   157a4:	00021148 	.word	0x00021148

000157a8 <rpc_ip_client_request_alloc>:
   157a8:	2300      	movs	r3, #0
   157aa:	b510      	push	{r4, lr}
   157ac:	b082      	sub	sp, #8
   157ae:	9301      	str	r3, [sp, #4]
   157b0:	b158      	cbz	r0, 157ca <rpc_ip_client_request_alloc+0x22>
   157b2:	4604      	mov	r4, r0
   157b4:	aa01      	add	r2, sp, #4
   157b6:	2004      	movs	r0, #4
   157b8:	f001 fe8e 	bl	174d8 <rpc_message_alloc>
   157bc:	b918      	cbnz	r0, 157c6 <rpc_ip_client_request_alloc+0x1e>
   157be:	9b01      	ldr	r3, [sp, #4]
   157c0:	b10b      	cbz	r3, 157c6 <rpc_ip_client_request_alloc+0x1e>
   157c2:	3308      	adds	r3, #8
   157c4:	6023      	str	r3, [r4, #0]
   157c6:	b002      	add	sp, #8
   157c8:	bd10      	pop	{r4, pc}
   157ca:	2007      	movs	r0, #7
   157cc:	b002      	add	sp, #8
   157ce:	bd10      	pop	{r4, pc}

000157d0 <rpc_ip_client_request_send>:
   157d0:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   157d4:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   157d8:	d10b      	bne.n	157f2 <rpc_ip_client_request_send+0x22>
   157da:	b160      	cbz	r0, 157f6 <rpc_ip_client_request_send+0x26>
   157dc:	4603      	mov	r3, r0
   157de:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   157e2:	2004      	movs	r0, #4
   157e4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   157e8:	f843 1d08 	str.w	r1, [r3, #-8]!
   157ec:	4619      	mov	r1, r3
   157ee:	f001 be63 	b.w	174b8 <rpc_message_send>
   157f2:	200f      	movs	r0, #15
   157f4:	4770      	bx	lr
   157f6:	2007      	movs	r0, #7
   157f8:	4770      	bx	lr
   157fa:	bf00      	nop

000157fc <rpc_ip_client_message_free>:
   157fc:	b120      	cbz	r0, 15808 <rpc_ip_client_message_free+0xc>
   157fe:	f1a0 0108 	sub.w	r1, r0, #8
   15802:	2004      	movs	r0, #4
   15804:	f001 be94 	b.w	17530 <rpc_message_free>
   15808:	2007      	movs	r0, #7
   1580a:	4770      	bx	lr

0001580c <rpc_ip_client_data_free>:
   1580c:	b118      	cbz	r0, 15816 <rpc_ip_client_data_free+0xa>
   1580e:	4601      	mov	r1, r0
   15810:	2004      	movs	r0, #4
   15812:	f001 be99 	b.w	17548 <rpc_message_data_free>
   15816:	2007      	movs	r0, #7
   15818:	4770      	bx	lr
   1581a:	bf00      	nop

0001581c <ip_recvd_packet_free_cb>:
   1581c:	b510      	push	{r4, lr}
   1581e:	4604      	mov	r4, r0
   15820:	6800      	ldr	r0, [r0, #0]
   15822:	f7ff fff3 	bl	1580c <rpc_ip_client_data_free>
   15826:	68a0      	ldr	r0, [r4, #8]
   15828:	b118      	cbz	r0, 15832 <ip_recvd_packet_free_cb+0x16>
   1582a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1582e:	f005 bbdf 	b.w	1aff0 <nrf_free>
   15832:	bd10      	pop	{r4, pc}

00015834 <rpc_error_to_nrf_bsd_error>:
   15834:	2810      	cmp	r0, #16
   15836:	bf9a      	itte	ls
   15838:	4b02      	ldrls	r3, [pc, #8]	; (15844 <rpc_error_to_nrf_bsd_error+0x10>)
   1583a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1583e:	202d      	movhi	r0, #45	; 0x2d
   15840:	4770      	bx	lr
   15842:	bf00      	nop
   15844:	00021158 	.word	0x00021158

00015848 <ip_interface_request_create>:
   15848:	b570      	push	{r4, r5, r6, lr}
   1584a:	2500      	movs	r5, #0
   1584c:	b082      	sub	sp, #8
   1584e:	ac02      	add	r4, sp, #8
   15850:	f844 5d04 	str.w	r5, [r4, #-4]!
   15854:	4606      	mov	r6, r0
   15856:	460d      	mov	r5, r1
   15858:	4620      	mov	r0, r4
   1585a:	4619      	mov	r1, r3
   1585c:	4614      	mov	r4, r2
   1585e:	f7ff ffa3 	bl	157a8 <rpc_ip_client_request_alloc>
   15862:	b960      	cbnz	r0, 1587e <ip_interface_request_create+0x36>
   15864:	9b01      	ldr	r3, [sp, #4]
   15866:	2208      	movs	r2, #8
   15868:	7258      	strb	r0, [r3, #9]
   1586a:	7298      	strb	r0, [r3, #10]
   1586c:	72d8      	strb	r0, [r3, #11]
   1586e:	4618      	mov	r0, r3
   15870:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   15874:	60dc      	str	r4, [r3, #12]
   15876:	611d      	str	r5, [r3, #16]
   15878:	721a      	strb	r2, [r3, #8]
   1587a:	b002      	add	sp, #8
   1587c:	bd70      	pop	{r4, r5, r6, pc}
   1587e:	9b01      	ldr	r3, [sp, #4]
   15880:	4618      	mov	r0, r3
   15882:	b002      	add	sp, #8
   15884:	bd70      	pop	{r4, r5, r6, pc}
   15886:	bf00      	nop

00015888 <ip_interface_request_send>:
   15888:	b570      	push	{r4, r5, r6, lr}
   1588a:	460c      	mov	r4, r1
   1588c:	4605      	mov	r5, r0
   1588e:	4611      	mov	r1, r2
   15890:	4620      	mov	r0, r4
   15892:	461e      	mov	r6, r3
   15894:	f7ff ff9c 	bl	157d0 <rpc_ip_client_request_send>
   15898:	b900      	cbnz	r0, 1589c <ip_interface_request_send+0x14>
   1589a:	bd70      	pop	{r4, r5, r6, pc}
   1589c:	6820      	ldr	r0, [r4, #0]
   1589e:	b108      	cbz	r0, 158a4 <ip_interface_request_send+0x1c>
   158a0:	f7ff ffb4 	bl	1580c <rpc_ip_client_data_free>
   158a4:	4620      	mov	r0, r4
   158a6:	f7ff ffa9 	bl	157fc <rpc_ip_client_message_free>
   158aa:	602e      	str	r6, [r5, #0]
   158ac:	2023      	movs	r0, #35	; 0x23
   158ae:	bd70      	pop	{r4, r5, r6, pc}

000158b0 <ip_interface_wait>:
   158b0:	b538      	push	{r3, r4, r5, lr}
   158b2:	4605      	mov	r5, r0
   158b4:	f006 f826 	bl	1b904 <interface_socket_wait>
   158b8:	4604      	mov	r4, r0
   158ba:	b108      	cbz	r0, 158c0 <ip_interface_wait+0x10>
   158bc:	4620      	mov	r0, r4
   158be:	bd38      	pop	{r3, r4, r5, pc}
   158c0:	4628      	mov	r0, r5
   158c2:	f006 f893 	bl	1b9ec <interface_socket_from_handle_get>
   158c6:	2800      	cmp	r0, #0
   158c8:	d0f8      	beq.n	158bc <ip_interface_wait+0xc>
   158ca:	6844      	ldr	r4, [r0, #4]
   158cc:	2c00      	cmp	r4, #0
   158ce:	d0f5      	beq.n	158bc <ip_interface_wait+0xc>
   158d0:	2300      	movs	r3, #0
   158d2:	6043      	str	r3, [r0, #4]
   158d4:	4620      	mov	r0, r4
   158d6:	bd38      	pop	{r3, r4, r5, pc}

000158d8 <ip_interface_init>:
   158d8:	b538      	push	{r3, r4, r5, lr}
   158da:	2300      	movs	r3, #0
   158dc:	4d09      	ldr	r5, [pc, #36]	; (15904 <ip_interface_init+0x2c>)
   158de:	4c0a      	ldr	r4, [pc, #40]	; (15908 <ip_interface_init+0x30>)
   158e0:	4619      	mov	r1, r3
   158e2:	2224      	movs	r2, #36	; 0x24
   158e4:	4809      	ldr	r0, [pc, #36]	; (1590c <ip_interface_init+0x34>)
   158e6:	602b      	str	r3, [r5, #0]
   158e8:	6023      	str	r3, [r4, #0]
   158ea:	f008 ffff 	bl	1e8ec <memset>
   158ee:	f7ff ff55 	bl	1579c <rpc_ip_client_init>
   158f2:	b918      	cbnz	r0, 158fc <ip_interface_init+0x24>
   158f4:	2201      	movs	r2, #1
   158f6:	4b06      	ldr	r3, [pc, #24]	; (15910 <ip_interface_init+0x38>)
   158f8:	701a      	strb	r2, [r3, #0]
   158fa:	bd38      	pop	{r3, r4, r5, pc}
   158fc:	f04f 30ff 	mov.w	r0, #4294967295
   15900:	bd38      	pop	{r3, r4, r5, pc}
   15902:	bf00      	nop
   15904:	20020c68 	.word	0x20020c68
   15908:	20020c64 	.word	0x20020c64
   1590c:	20020c6c 	.word	0x20020c6c
   15910:	200236c0 	.word	0x200236c0

00015914 <ip_interface_open>:
   15914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15918:	2500      	movs	r5, #0
   1591a:	f04f 37ff 	mov.w	r7, #4294967295
   1591e:	4c5e      	ldr	r4, [pc, #376]	; (15a98 <ip_interface_open+0x184>)
   15920:	4606      	mov	r6, r0
   15922:	7820      	ldrb	r0, [r4, #0]
   15924:	b084      	sub	sp, #16
   15926:	e9cd 5701 	strd	r5, r7, [sp, #4]
   1592a:	2800      	cmp	r0, #0
   1592c:	f000 80b0 	beq.w	15a90 <ip_interface_open+0x17c>
   15930:	4690      	mov	r8, r2
   15932:	f026 0208 	bic.w	r2, r6, #8
   15936:	2a02      	cmp	r2, #2
   15938:	460c      	mov	r4, r1
   1593a:	d002      	beq.n	15942 <ip_interface_open+0x2e>
   1593c:	2e05      	cmp	r6, #5
   1593e:	f040 808d 	bne.w	15a5c <ip_interface_open+0x148>
   15942:	1e63      	subs	r3, r4, #1
   15944:	2b02      	cmp	r3, #2
   15946:	f200 809d 	bhi.w	15a84 <ip_interface_open+0x170>
   1594a:	f1b8 0f00 	cmp.w	r8, #0
   1594e:	d159      	bne.n	15a04 <ip_interface_open+0xf0>
   15950:	2c01      	cmp	r4, #1
   15952:	d06f      	beq.n	15a34 <ip_interface_open+0x120>
   15954:	2c03      	cmp	r4, #3
   15956:	bf18      	it	ne
   15958:	f04f 0802 	movne.w	r8, #2
   1595c:	4a4f      	ldr	r2, [pc, #316]	; (15a9c <ip_interface_open+0x188>)
   1595e:	4621      	mov	r1, r4
   15960:	a801      	add	r0, sp, #4
   15962:	f005 ff1d 	bl	1b7a0 <interface_socket_allocate>
   15966:	9b01      	ldr	r3, [sp, #4]
   15968:	4607      	mov	r7, r0
   1596a:	2b00      	cmp	r3, #0
   1596c:	d060      	beq.n	15a30 <ip_interface_open+0x11c>
   1596e:	2100      	movs	r1, #0
   15970:	a804      	add	r0, sp, #16
   15972:	f840 1d04 	str.w	r1, [r0, #-4]!
   15976:	e9c3 6403 	strd	r6, r4, [r3, #12]
   1597a:	f8c3 8014 	str.w	r8, [r3, #20]
   1597e:	f7ff ff13 	bl	157a8 <rpc_ip_client_request_alloc>
   15982:	2800      	cmp	r0, #0
   15984:	d151      	bne.n	15a2a <ip_interface_open+0x116>
   15986:	f247 0201 	movw	r2, #28673	; 0x7001
   1598a:	f04f 33ff 	mov.w	r3, #4294967295
   1598e:	2108      	movs	r1, #8
   15990:	9d03      	ldr	r5, [sp, #12]
   15992:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   15996:	60ea      	str	r2, [r5, #12]
   15998:	7268      	strb	r0, [r5, #9]
   1599a:	72a8      	strb	r0, [r5, #10]
   1599c:	72e8      	strb	r0, [r5, #11]
   1599e:	7229      	strb	r1, [r5, #8]
   159a0:	742b      	strb	r3, [r5, #16]
   159a2:	746b      	strb	r3, [r5, #17]
   159a4:	74ab      	strb	r3, [r5, #18]
   159a6:	74eb      	strb	r3, [r5, #19]
   159a8:	68ab      	ldr	r3, [r5, #8]
   159aa:	2e05      	cmp	r6, #5
   159ac:	f103 030c 	add.w	r3, r3, #12
   159b0:	60ab      	str	r3, [r5, #8]
   159b2:	d003      	beq.n	159bc <ip_interface_open+0xa8>
   159b4:	2e0a      	cmp	r6, #10
   159b6:	bf14      	ite	ne
   159b8:	2601      	movne	r6, #1
   159ba:	2602      	moveq	r6, #2
   159bc:	616e      	str	r6, [r5, #20]
   159be:	f8c5 801c 	str.w	r8, [r5, #28]
   159c2:	61ac      	str	r4, [r5, #24]
   159c4:	f247 0101 	movw	r1, #28673	; 0x7001
   159c8:	4628      	mov	r0, r5
   159ca:	f8dd 8004 	ldr.w	r8, [sp, #4]
   159ce:	f7ff feff 	bl	157d0 <rpc_ip_client_request_send>
   159d2:	4606      	mov	r6, r0
   159d4:	b380      	cbz	r0, 15a38 <ip_interface_open+0x124>
   159d6:	6828      	ldr	r0, [r5, #0]
   159d8:	b108      	cbz	r0, 159de <ip_interface_open+0xca>
   159da:	f7ff ff17 	bl	1580c <rpc_ip_client_data_free>
   159de:	4628      	mov	r0, r5
   159e0:	f7ff ff0c 	bl	157fc <rpc_ip_client_message_free>
   159e4:	2301      	movs	r3, #1
   159e6:	2523      	movs	r5, #35	; 0x23
   159e8:	f8c8 3000 	str.w	r3, [r8]
   159ec:	4638      	mov	r0, r7
   159ee:	f005 ff3b 	bl	1b868 <interface_socket_free>
   159f2:	4628      	mov	r0, r5
   159f4:	f7fb fd38 	bl	11468 <bsd_os_errno_set>
   159f8:	f04f 37ff 	mov.w	r7, #4294967295
   159fc:	4638      	mov	r0, r7
   159fe:	b004      	add	sp, #16
   15a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15a04:	2c01      	cmp	r4, #1
   15a06:	d00a      	beq.n	15a1e <ip_interface_open+0x10a>
   15a08:	2c02      	cmp	r4, #2
   15a0a:	d10b      	bne.n	15a24 <ip_interface_open+0x110>
   15a0c:	f1b8 0f02 	cmp.w	r8, #2
   15a10:	d0a4      	beq.n	1595c <ip_interface_open+0x48>
   15a12:	2029      	movs	r0, #41	; 0x29
   15a14:	f7fb fd28 	bl	11468 <bsd_os_errno_set>
   15a18:	f04f 37ff 	mov.w	r7, #4294967295
   15a1c:	e7ee      	b.n	159fc <ip_interface_open+0xe8>
   15a1e:	f1b8 0f01 	cmp.w	r8, #1
   15a22:	d1f6      	bne.n	15a12 <ip_interface_open+0xfe>
   15a24:	f04f 0802 	mov.w	r8, #2
   15a28:	e798      	b.n	1595c <ip_interface_open+0x48>
   15a2a:	9d03      	ldr	r5, [sp, #12]
   15a2c:	2d00      	cmp	r5, #0
   15a2e:	d1bb      	bne.n	159a8 <ip_interface_open+0x94>
   15a30:	2569      	movs	r5, #105	; 0x69
   15a32:	e7db      	b.n	159ec <ip_interface_open+0xd8>
   15a34:	46a0      	mov	r8, r4
   15a36:	e791      	b.n	1595c <ip_interface_open+0x48>
   15a38:	ab02      	add	r3, sp, #8
   15a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15a3e:	2102      	movs	r1, #2
   15a40:	4638      	mov	r0, r7
   15a42:	f005 ff5f 	bl	1b904 <interface_socket_wait>
   15a46:	4605      	mov	r5, r0
   15a48:	2800      	cmp	r0, #0
   15a4a:	d1cf      	bne.n	159ec <ip_interface_open+0xd8>
   15a4c:	4638      	mov	r0, r7
   15a4e:	f005 ffcd 	bl	1b9ec <interface_socket_from_handle_get>
   15a52:	b138      	cbz	r0, 15a64 <ip_interface_open+0x150>
   15a54:	6845      	ldr	r5, [r0, #4]
   15a56:	b12d      	cbz	r5, 15a64 <ip_interface_open+0x150>
   15a58:	6046      	str	r6, [r0, #4]
   15a5a:	e7c7      	b.n	159ec <ip_interface_open+0xd8>
   15a5c:	202f      	movs	r0, #47	; 0x2f
   15a5e:	f7fb fd03 	bl	11468 <bsd_os_errno_set>
   15a62:	e7cb      	b.n	159fc <ip_interface_open+0xe8>
   15a64:	3c02      	subs	r4, #2
   15a66:	2c01      	cmp	r4, #1
   15a68:	d8c8      	bhi.n	159fc <ip_interface_open+0xe8>
   15a6a:	4638      	mov	r0, r7
   15a6c:	9b01      	ldr	r3, [sp, #4]
   15a6e:	681a      	ldr	r2, [r3, #0]
   15a70:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   15a74:	601a      	str	r2, [r3, #0]
   15a76:	681a      	ldr	r2, [r3, #0]
   15a78:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   15a7c:	601a      	str	r2, [r3, #0]
   15a7e:	b004      	add	sp, #16
   15a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15a84:	2016      	movs	r0, #22
   15a86:	f7fb fcef 	bl	11468 <bsd_os_errno_set>
   15a8a:	f04f 37ff 	mov.w	r7, #4294967295
   15a8e:	e7b5      	b.n	159fc <ip_interface_open+0xe8>
   15a90:	2070      	movs	r0, #112	; 0x70
   15a92:	f7fb fce9 	bl	11468 <bsd_os_errno_set>
   15a96:	e7b1      	b.n	159fc <ip_interface_open+0xe8>
   15a98:	200236c0 	.word	0x200236c0
   15a9c:	0001581d 	.word	0x0001581d

00015aa0 <ip_interface_close>:
   15aa0:	f04f 33ff 	mov.w	r3, #4294967295
   15aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15aa8:	b082      	sub	sp, #8
   15aaa:	4606      	mov	r6, r0
   15aac:	9300      	str	r3, [sp, #0]
   15aae:	f005 ff9d 	bl	1b9ec <interface_socket_from_handle_get>
   15ab2:	2800      	cmp	r0, #0
   15ab4:	d062      	beq.n	15b7c <ip_interface_close+0xdc>
   15ab6:	4604      	mov	r4, r0
   15ab8:	2100      	movs	r1, #0
   15aba:	a802      	add	r0, sp, #8
   15abc:	6827      	ldr	r7, [r4, #0]
   15abe:	f840 1d04 	str.w	r1, [r0, #-4]!
   15ac2:	f8d4 8018 	ldr.w	r8, [r4, #24]
   15ac6:	f7ff fe6f 	bl	157a8 <rpc_ip_client_request_alloc>
   15aca:	2800      	cmp	r0, #0
   15acc:	d139      	bne.n	15b42 <ip_interface_close+0xa2>
   15ace:	f247 0309 	movw	r3, #28681	; 0x7009
   15ad2:	2208      	movs	r2, #8
   15ad4:	9d01      	ldr	r5, [sp, #4]
   15ad6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   15ada:	60eb      	str	r3, [r5, #12]
   15adc:	f8c5 8010 	str.w	r8, [r5, #16]
   15ae0:	7268      	strb	r0, [r5, #9]
   15ae2:	72a8      	strb	r0, [r5, #10]
   15ae4:	72e8      	strb	r0, [r5, #11]
   15ae6:	722a      	strb	r2, [r5, #8]
   15ae8:	6823      	ldr	r3, [r4, #0]
   15aea:	f247 0109 	movw	r1, #28681	; 0x7009
   15aee:	0c1b      	lsrs	r3, r3, #16
   15af0:	041b      	lsls	r3, r3, #16
   15af2:	f043 030d 	orr.w	r3, r3, #13
   15af6:	6023      	str	r3, [r4, #0]
   15af8:	6823      	ldr	r3, [r4, #0]
   15afa:	4628      	mov	r0, r5
   15afc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   15b00:	6023      	str	r3, [r4, #0]
   15b02:	6823      	ldr	r3, [r4, #0]
   15b04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   15b08:	6023      	str	r3, [r4, #0]
   15b0a:	f7ff fe61 	bl	157d0 <rpc_ip_client_request_send>
   15b0e:	bb38      	cbnz	r0, 15b60 <ip_interface_close+0xc0>
   15b10:	466b      	mov	r3, sp
   15b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15b16:	210e      	movs	r1, #14
   15b18:	4630      	mov	r0, r6
   15b1a:	f005 fef3 	bl	1b904 <interface_socket_wait>
   15b1e:	4604      	mov	r4, r0
   15b20:	b1a0      	cbz	r0, 15b4c <ip_interface_close+0xac>
   15b22:	4c17      	ldr	r4, [pc, #92]	; (15b80 <ip_interface_close+0xe0>)
   15b24:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   15b28:	b120      	cbz	r0, 15b34 <ip_interface_close+0x94>
   15b2a:	f7ff fe67 	bl	157fc <rpc_ip_client_message_free>
   15b2e:	2300      	movs	r3, #0
   15b30:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   15b34:	4630      	mov	r0, r6
   15b36:	f005 fe97 	bl	1b868 <interface_socket_free>
   15b3a:	2000      	movs	r0, #0
   15b3c:	b002      	add	sp, #8
   15b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15b42:	9d01      	ldr	r5, [sp, #4]
   15b44:	200c      	movs	r0, #12
   15b46:	2d00      	cmp	r5, #0
   15b48:	d1ce      	bne.n	15ae8 <ip_interface_close+0x48>
   15b4a:	e012      	b.n	15b72 <ip_interface_close+0xd2>
   15b4c:	4630      	mov	r0, r6
   15b4e:	f005 ff4d 	bl	1b9ec <interface_socket_from_handle_get>
   15b52:	2800      	cmp	r0, #0
   15b54:	d0e5      	beq.n	15b22 <ip_interface_close+0x82>
   15b56:	6843      	ldr	r3, [r0, #4]
   15b58:	2b00      	cmp	r3, #0
   15b5a:	d0e2      	beq.n	15b22 <ip_interface_close+0x82>
   15b5c:	6044      	str	r4, [r0, #4]
   15b5e:	e7e0      	b.n	15b22 <ip_interface_close+0x82>
   15b60:	6828      	ldr	r0, [r5, #0]
   15b62:	b108      	cbz	r0, 15b68 <ip_interface_close+0xc8>
   15b64:	f7ff fe52 	bl	1580c <rpc_ip_client_data_free>
   15b68:	4628      	mov	r0, r5
   15b6a:	f7ff fe47 	bl	157fc <rpc_ip_client_message_free>
   15b6e:	2023      	movs	r0, #35	; 0x23
   15b70:	6027      	str	r7, [r4, #0]
   15b72:	f7fb fc79 	bl	11468 <bsd_os_errno_set>
   15b76:	f04f 30ff 	mov.w	r0, #4294967295
   15b7a:	e7df      	b.n	15b3c <ip_interface_close+0x9c>
   15b7c:	2009      	movs	r0, #9
   15b7e:	e7f8      	b.n	15b72 <ip_interface_close+0xd2>
   15b80:	20020c6c 	.word	0x20020c6c

00015b84 <ip_interface_sendto>:
   15b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b88:	2400      	movs	r4, #0
   15b8a:	b08b      	sub	sp, #44	; 0x2c
   15b8c:	9102      	str	r1, [sp, #8]
   15b8e:	4615      	mov	r5, r2
   15b90:	4699      	mov	r9, r3
   15b92:	9407      	str	r4, [sp, #28]
   15b94:	4607      	mov	r7, r0
   15b96:	9e14      	ldr	r6, [sp, #80]	; 0x50
   15b98:	f005 ff28 	bl	1b9ec <interface_socket_from_handle_get>
   15b9c:	2800      	cmp	r0, #0
   15b9e:	f000 8163 	beq.w	15e68 <ip_interface_sendto+0x2e4>
   15ba2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   15ba6:	f300 8150 	bgt.w	15e4a <ip_interface_sendto+0x2c6>
   15baa:	6903      	ldr	r3, [r0, #16]
   15bac:	4604      	mov	r4, r0
   15bae:	2b01      	cmp	r3, #1
   15bb0:	f000 8109 	beq.w	15dc6 <ip_interface_sendto+0x242>
   15bb4:	6822      	ldr	r2, [r4, #0]
   15bb6:	0391      	lsls	r1, r2, #14
   15bb8:	d569      	bpl.n	15c8e <ip_interface_sendto+0x10a>
   15bba:	f1b9 0f00 	cmp.w	r9, #0
   15bbe:	f000 8112 	beq.w	15de6 <ip_interface_sendto+0x262>
   15bc2:	f019 0f02 	tst.w	r9, #2
   15bc6:	f000 814a 	beq.w	15e5e <ip_interface_sendto+0x2da>
   15bca:	2300      	movs	r3, #0
   15bcc:	9303      	str	r3, [sp, #12]
   15bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15bd0:	f247 0806 	movw	r8, #28678	; 0x7006
   15bd4:	2b00      	cmp	r3, #0
   15bd6:	bf08      	it	eq
   15bd8:	f04f 33ff 	moveq.w	r3, #4294967295
   15bdc:	f04f 0b0c 	mov.w	fp, #12
   15be0:	4aa5      	ldr	r2, [pc, #660]	; (15e78 <ip_interface_sendto+0x2f4>)
   15be2:	9308      	str	r3, [sp, #32]
   15be4:	043b      	lsls	r3, r7, #16
   15be6:	9200      	str	r2, [sp, #0]
   15be8:	9304      	str	r3, [sp, #16]
   15bea:	4629      	mov	r1, r5
   15bec:	a807      	add	r0, sp, #28
   15bee:	f7ff fddb 	bl	157a8 <rpc_ip_client_request_alloc>
   15bf2:	2804      	cmp	r0, #4
   15bf4:	d05e      	beq.n	15cb4 <ip_interface_sendto+0x130>
   15bf6:	2800      	cmp	r0, #0
   15bf8:	f040 813b 	bne.w	15e72 <ip_interface_sendto+0x2ee>
   15bfc:	9b07      	ldr	r3, [sp, #28]
   15bfe:	f883 b008 	strb.w	fp, [r3, #8]
   15c02:	7258      	strb	r0, [r3, #9]
   15c04:	7298      	strb	r0, [r3, #10]
   15c06:	72d8      	strb	r0, [r3, #11]
   15c08:	2e00      	cmp	r6, #0
   15c0a:	d06b      	beq.n	15ce4 <ip_interface_sendto+0x160>
   15c0c:	68e2      	ldr	r2, [r4, #12]
   15c0e:	6871      	ldr	r1, [r6, #4]
   15c10:	428a      	cmp	r2, r1
   15c12:	f040 80a8 	bne.w	15d66 <ip_interface_sendto+0x1e2>
   15c16:	7831      	ldrb	r1, [r6, #0]
   15c18:	9815      	ldr	r0, [sp, #84]	; 0x54
   15c1a:	4288      	cmp	r0, r1
   15c1c:	d10a      	bne.n	15c34 <ip_interface_sendto+0xb0>
   15c1e:	2a02      	cmp	r2, #2
   15c20:	f103 001c 	add.w	r0, r3, #28
   15c24:	f000 80ff 	beq.w	15e26 <ip_interface_sendto+0x2a2>
   15c28:	2a0a      	cmp	r2, #10
   15c2a:	d103      	bne.n	15c34 <ip_interface_sendto+0xb0>
   15c2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   15c2e:	2a24      	cmp	r2, #36	; 0x24
   15c30:	f000 80e6 	beq.w	15e00 <ip_interface_sendto+0x27c>
   15c34:	f04f 0a16 	mov.w	sl, #22
   15c38:	6818      	ldr	r0, [r3, #0]
   15c3a:	b110      	cbz	r0, 15c42 <ip_interface_sendto+0xbe>
   15c3c:	f7ff fde6 	bl	1580c <rpc_ip_client_data_free>
   15c40:	9b07      	ldr	r3, [sp, #28]
   15c42:	4618      	mov	r0, r3
   15c44:	f7ff fdda 	bl	157fc <rpc_ip_client_message_free>
   15c48:	6823      	ldr	r3, [r4, #0]
   15c4a:	0318      	lsls	r0, r3, #12
   15c4c:	d40b      	bmi.n	15c66 <ip_interface_sendto+0xe2>
   15c4e:	6823      	ldr	r3, [r4, #0]
   15c50:	b29b      	uxth	r3, r3
   15c52:	2b0d      	cmp	r3, #13
   15c54:	d007      	beq.n	15c66 <ip_interface_sendto+0xe2>
   15c56:	6823      	ldr	r3, [r4, #0]
   15c58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   15c5c:	6023      	str	r3, [r4, #0]
   15c5e:	6823      	ldr	r3, [r4, #0]
   15c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   15c64:	6023      	str	r3, [r4, #0]
   15c66:	f1ba 0f00 	cmp.w	sl, #0
   15c6a:	f040 80b3 	bne.w	15dd4 <ip_interface_sendto+0x250>
   15c6e:	6823      	ldr	r3, [r4, #0]
   15c70:	0119      	lsls	r1, r3, #4
   15c72:	d57b      	bpl.n	15d6c <ip_interface_sendto+0x1e8>
   15c74:	6823      	ldr	r3, [r4, #0]
   15c76:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   15c7a:	6023      	str	r3, [r4, #0]
   15c7c:	9b00      	ldr	r3, [sp, #0]
   15c7e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   15c82:	2800      	cmp	r0, #0
   15c84:	d176      	bne.n	15d74 <ip_interface_sendto+0x1f0>
   15c86:	4628      	mov	r0, r5
   15c88:	b00b      	add	sp, #44	; 0x2c
   15c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c8e:	6822      	ldr	r2, [r4, #0]
   15c90:	0092      	lsls	r2, r2, #2
   15c92:	d406      	bmi.n	15ca2 <ip_interface_sendto+0x11e>
   15c94:	2b01      	cmp	r3, #1
   15c96:	f000 80ad 	beq.w	15df4 <ip_interface_sendto+0x270>
   15c9a:	6823      	ldr	r3, [r4, #0]
   15c9c:	031b      	lsls	r3, r3, #12
   15c9e:	f140 80cf 	bpl.w	15e40 <ip_interface_sendto+0x2bc>
   15ca2:	6823      	ldr	r3, [r4, #0]
   15ca4:	031e      	lsls	r6, r3, #12
   15ca6:	f140 80d5 	bpl.w	15e54 <ip_interface_sendto+0x2d0>
   15caa:	4b73      	ldr	r3, [pc, #460]	; (15e78 <ip_interface_sendto+0x2f4>)
   15cac:	f8d4 a008 	ldr.w	sl, [r4, #8]
   15cb0:	9300      	str	r3, [sp, #0]
   15cb2:	e7d8      	b.n	15c66 <ip_interface_sendto+0xe2>
   15cb4:	9b03      	ldr	r3, [sp, #12]
   15cb6:	2b00      	cmp	r3, #0
   15cb8:	d052      	beq.n	15d60 <ip_interface_sendto+0x1dc>
   15cba:	9b08      	ldr	r3, [sp, #32]
   15cbc:	3301      	adds	r3, #1
   15cbe:	d094      	beq.n	15bea <ip_interface_sendto+0x66>
   15cc0:	230a      	movs	r3, #10
   15cc2:	a90a      	add	r1, sp, #40	; 0x28
   15cc4:	f841 3d04 	str.w	r3, [r1, #-4]!
   15cc8:	2000      	movs	r0, #0
   15cca:	f7fb fb15 	bl	112f8 <bsd_os_timedwait>
   15cce:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   15cd2:	f1c2 020a 	rsb	r2, r2, #10
   15cd6:	1a9b      	subs	r3, r3, r2
   15cd8:	2b00      	cmp	r3, #0
   15cda:	9308      	str	r3, [sp, #32]
   15cdc:	dc85      	bgt.n	15bea <ip_interface_sendto+0x66>
   15cde:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   15ce2:	e7b1      	b.n	15c48 <ip_interface_sendto+0xc4>
   15ce4:	4642      	mov	r2, r8
   15ce6:	f8c3 9014 	str.w	r9, [r3, #20]
   15cea:	69a1      	ldr	r1, [r4, #24]
   15cec:	9804      	ldr	r0, [sp, #16]
   15cee:	6119      	str	r1, [r3, #16]
   15cf0:	9902      	ldr	r1, [sp, #8]
   15cf2:	4302      	orrs	r2, r0
   15cf4:	60da      	str	r2, [r3, #12]
   15cf6:	605d      	str	r5, [r3, #4]
   15cf8:	b119      	cbz	r1, 15d02 <ip_interface_sendto+0x17e>
   15cfa:	6818      	ldr	r0, [r3, #0]
   15cfc:	462a      	mov	r2, r5
   15cfe:	f008 fdca 	bl	1e896 <memcpy>
   15d02:	6823      	ldr	r3, [r4, #0]
   15d04:	4641      	mov	r1, r8
   15d06:	9305      	str	r3, [sp, #20]
   15d08:	6823      	ldr	r3, [r4, #0]
   15d0a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   15d0e:	6023      	str	r3, [r4, #0]
   15d10:	6823      	ldr	r3, [r4, #0]
   15d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   15d16:	6023      	str	r3, [r4, #0]
   15d18:	9b07      	ldr	r3, [sp, #28]
   15d1a:	4618      	mov	r0, r3
   15d1c:	9301      	str	r3, [sp, #4]
   15d1e:	f7ff fd57 	bl	157d0 <rpc_ip_client_request_send>
   15d22:	9b01      	ldr	r3, [sp, #4]
   15d24:	4682      	mov	sl, r0
   15d26:	bb78      	cbnz	r0, 15d88 <ip_interface_sendto+0x204>
   15d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   15d2c:	ab08      	add	r3, sp, #32
   15d2e:	4611      	mov	r1, r2
   15d30:	4638      	mov	r0, r7
   15d32:	f005 fde7 	bl	1b904 <interface_socket_wait>
   15d36:	4603      	mov	r3, r0
   15d38:	b398      	cbz	r0, 15da2 <ip_interface_sendto+0x21e>
   15d3a:	6822      	ldr	r2, [r4, #0]
   15d3c:	0312      	lsls	r2, r2, #12
   15d3e:	d43f      	bmi.n	15dc0 <ip_interface_sendto+0x23c>
   15d40:	2b3c      	cmp	r3, #60	; 0x3c
   15d42:	d001      	beq.n	15d48 <ip_interface_sendto+0x1c4>
   15d44:	2b0c      	cmp	r3, #12
   15d46:	d001      	beq.n	15d4c <ip_interface_sendto+0x1c8>
   15d48:	469a      	mov	sl, r3
   15d4a:	e77d      	b.n	15c48 <ip_interface_sendto+0xc4>
   15d4c:	9b00      	ldr	r3, [sp, #0]
   15d4e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   15d52:	b108      	cbz	r0, 15d58 <ip_interface_sendto+0x1d4>
   15d54:	f7ff fd52 	bl	157fc <rpc_ip_client_message_free>
   15d58:	9b03      	ldr	r3, [sp, #12]
   15d5a:	2b00      	cmp	r3, #0
   15d5c:	f47f af45 	bne.w	15bea <ip_interface_sendto+0x66>
   15d60:	f04f 0a23 	mov.w	sl, #35	; 0x23
   15d64:	e770      	b.n	15c48 <ip_interface_sendto+0xc4>
   15d66:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   15d6a:	e765      	b.n	15c38 <ip_interface_sendto+0xb4>
   15d6c:	9b00      	ldr	r3, [sp, #0]
   15d6e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   15d72:	6985      	ldr	r5, [r0, #24]
   15d74:	f7ff fd42 	bl	157fc <rpc_ip_client_message_free>
   15d78:	2300      	movs	r3, #0
   15d7a:	4628      	mov	r0, r5
   15d7c:	9a00      	ldr	r2, [sp, #0]
   15d7e:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   15d82:	b00b      	add	sp, #44	; 0x2c
   15d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d88:	6818      	ldr	r0, [r3, #0]
   15d8a:	469a      	mov	sl, r3
   15d8c:	b108      	cbz	r0, 15d92 <ip_interface_sendto+0x20e>
   15d8e:	f7ff fd3d 	bl	1580c <rpc_ip_client_data_free>
   15d92:	4650      	mov	r0, sl
   15d94:	f7ff fd32 	bl	157fc <rpc_ip_client_message_free>
   15d98:	9b05      	ldr	r3, [sp, #20]
   15d9a:	f04f 0a23 	mov.w	sl, #35	; 0x23
   15d9e:	6023      	str	r3, [r4, #0]
   15da0:	e752      	b.n	15c48 <ip_interface_sendto+0xc4>
   15da2:	9001      	str	r0, [sp, #4]
   15da4:	4638      	mov	r0, r7
   15da6:	f005 fe21 	bl	1b9ec <interface_socket_from_handle_get>
   15daa:	9b01      	ldr	r3, [sp, #4]
   15dac:	2800      	cmp	r0, #0
   15dae:	d0cb      	beq.n	15d48 <ip_interface_sendto+0x1c4>
   15db0:	6843      	ldr	r3, [r0, #4]
   15db2:	2b00      	cmp	r3, #0
   15db4:	d0c8      	beq.n	15d48 <ip_interface_sendto+0x1c4>
   15db6:	f8c0 a004 	str.w	sl, [r0, #4]
   15dba:	6822      	ldr	r2, [r4, #0]
   15dbc:	0312      	lsls	r2, r2, #12
   15dbe:	d5bf      	bpl.n	15d40 <ip_interface_sendto+0x1bc>
   15dc0:	f8d4 a008 	ldr.w	sl, [r4, #8]
   15dc4:	e740      	b.n	15c48 <ip_interface_sendto+0xc4>
   15dc6:	2e00      	cmp	r6, #0
   15dc8:	f43f aef4 	beq.w	15bb4 <ip_interface_sendto+0x30>
   15dcc:	f04f 0a38 	mov.w	sl, #56	; 0x38
   15dd0:	4b29      	ldr	r3, [pc, #164]	; (15e78 <ip_interface_sendto+0x2f4>)
   15dd2:	9300      	str	r3, [sp, #0]
   15dd4:	4650      	mov	r0, sl
   15dd6:	f7fb fb47 	bl	11468 <bsd_os_errno_set>
   15dda:	9b00      	ldr	r3, [sp, #0]
   15ddc:	f04f 35ff 	mov.w	r5, #4294967295
   15de0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   15de4:	e74d      	b.n	15c82 <ip_interface_sendto+0xfe>
   15de6:	6823      	ldr	r3, [r4, #0]
   15de8:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   15dec:	f3c3 7300 	ubfx	r3, r3, #28, #1
   15df0:	9303      	str	r3, [sp, #12]
   15df2:	e6ec      	b.n	15bce <ip_interface_sendto+0x4a>
   15df4:	6823      	ldr	r3, [r4, #0]
   15df6:	b29b      	uxth	r3, r3
   15df8:	2b05      	cmp	r3, #5
   15dfa:	f47f af52 	bne.w	15ca2 <ip_interface_sendto+0x11e>
   15dfe:	e74c      	b.n	15c9a <ip_interface_sendto+0x116>
   15e00:	2210      	movs	r2, #16
   15e02:	8931      	ldrh	r1, [r6, #8]
   15e04:	835a      	strh	r2, [r3, #26]
   15e06:	8319      	strh	r1, [r3, #24]
   15e08:	18b1      	adds	r1, r6, r2
   15e0a:	f008 fd44 	bl	1e896 <memcpy>
   15e0e:	f247 0207 	movw	r2, #28679	; 0x7007
   15e12:	9b07      	ldr	r3, [sp, #28]
   15e14:	4690      	mov	r8, r2
   15e16:	6899      	ldr	r1, [r3, #8]
   15e18:	8b58      	ldrh	r0, [r3, #26]
   15e1a:	3104      	adds	r1, #4
   15e1c:	4401      	add	r1, r0
   15e1e:	f8c3 9014 	str.w	r9, [r3, #20]
   15e22:	6099      	str	r1, [r3, #8]
   15e24:	e761      	b.n	15cea <ip_interface_sendto+0x166>
   15e26:	9a15      	ldr	r2, [sp, #84]	; 0x54
   15e28:	2a10      	cmp	r2, #16
   15e2a:	f47f af03 	bne.w	15c34 <ip_interface_sendto+0xb0>
   15e2e:	2204      	movs	r2, #4
   15e30:	8931      	ldrh	r1, [r6, #8]
   15e32:	835a      	strh	r2, [r3, #26]
   15e34:	8319      	strh	r1, [r3, #24]
   15e36:	f106 010c 	add.w	r1, r6, #12
   15e3a:	f008 fd2c 	bl	1e896 <memcpy>
   15e3e:	e7e6      	b.n	15e0e <ip_interface_sendto+0x28a>
   15e40:	4b0d      	ldr	r3, [pc, #52]	; (15e78 <ip_interface_sendto+0x2f4>)
   15e42:	f04f 0a23 	mov.w	sl, #35	; 0x23
   15e46:	9300      	str	r3, [sp, #0]
   15e48:	e7c4      	b.n	15dd4 <ip_interface_sendto+0x250>
   15e4a:	4b0b      	ldr	r3, [pc, #44]	; (15e78 <ip_interface_sendto+0x2f4>)
   15e4c:	f04f 0a28 	mov.w	sl, #40	; 0x28
   15e50:	9300      	str	r3, [sp, #0]
   15e52:	e7bf      	b.n	15dd4 <ip_interface_sendto+0x250>
   15e54:	4b08      	ldr	r3, [pc, #32]	; (15e78 <ip_interface_sendto+0x2f4>)
   15e56:	f04f 0a39 	mov.w	sl, #57	; 0x39
   15e5a:	9300      	str	r3, [sp, #0]
   15e5c:	e7ba      	b.n	15dd4 <ip_interface_sendto+0x250>
   15e5e:	4b06      	ldr	r3, [pc, #24]	; (15e78 <ip_interface_sendto+0x2f4>)
   15e60:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   15e64:	9300      	str	r3, [sp, #0]
   15e66:	e7b5      	b.n	15dd4 <ip_interface_sendto+0x250>
   15e68:	4b03      	ldr	r3, [pc, #12]	; (15e78 <ip_interface_sendto+0x2f4>)
   15e6a:	f04f 0a09 	mov.w	sl, #9
   15e6e:	9300      	str	r3, [sp, #0]
   15e70:	e7b0      	b.n	15dd4 <ip_interface_sendto+0x250>
   15e72:	f04f 0a0c 	mov.w	sl, #12
   15e76:	e6e7      	b.n	15c48 <ip_interface_sendto+0xc4>
   15e78:	20020c6c 	.word	0x20020c6c

00015e7c <ip_interface_recvfrom>:
   15e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e80:	b087      	sub	sp, #28
   15e82:	2a00      	cmp	r2, #0
   15e84:	f000 8112 	beq.w	160ac <ip_interface_recvfrom+0x230>
   15e88:	4680      	mov	r8, r0
   15e8a:	468b      	mov	fp, r1
   15e8c:	469a      	mov	sl, r3
   15e8e:	4691      	mov	r9, r2
   15e90:	b11b      	cbz	r3, 15e9a <ip_interface_recvfrom+0x1e>
   15e92:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   15e96:	f000 8107 	beq.w	160a8 <ip_interface_recvfrom+0x22c>
   15e9a:	4640      	mov	r0, r8
   15e9c:	f005 fda6 	bl	1b9ec <interface_socket_from_handle_get>
   15ea0:	4604      	mov	r4, r0
   15ea2:	2800      	cmp	r0, #0
   15ea4:	f000 8104 	beq.w	160b0 <ip_interface_recvfrom+0x234>
   15ea8:	6803      	ldr	r3, [r0, #0]
   15eaa:	02db      	lsls	r3, r3, #11
   15eac:	d562      	bpl.n	15f74 <ip_interface_recvfrom+0xf8>
   15eae:	f01a 0f02 	tst.w	sl, #2
   15eb2:	bf18      	it	ne
   15eb4:	2600      	movne	r6, #0
   15eb6:	f04f 35ff 	mov.w	r5, #4294967295
   15eba:	bf08      	it	eq
   15ebc:	6806      	ldreq	r6, [r0, #0]
   15ebe:	f00a 0310 	and.w	r3, sl, #16
   15ec2:	bf04      	itt	eq
   15ec4:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   15ec8:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   15ecc:	9301      	str	r3, [sp, #4]
   15ece:	6823      	ldr	r3, [r4, #0]
   15ed0:	03df      	lsls	r7, r3, #15
   15ed2:	d567      	bpl.n	15fa4 <ip_interface_recvfrom+0x128>
   15ed4:	6823      	ldr	r3, [r4, #0]
   15ed6:	69e0      	ldr	r0, [r4, #28]
   15ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   15edc:	6023      	str	r3, [r4, #0]
   15ede:	6803      	ldr	r3, [r0, #0]
   15ee0:	68db      	ldr	r3, [r3, #12]
   15ee2:	4798      	blx	r3
   15ee4:	4605      	mov	r5, r0
   15ee6:	3001      	adds	r0, #1
   15ee8:	d07d      	beq.n	15fe6 <ip_interface_recvfrom+0x16a>
   15eea:	45a9      	cmp	r9, r5
   15eec:	dd03      	ble.n	15ef6 <ip_interface_recvfrom+0x7a>
   15eee:	6923      	ldr	r3, [r4, #16]
   15ef0:	2b01      	cmp	r3, #1
   15ef2:	f000 80a3 	beq.w	1603c <ip_interface_recvfrom+0x1c0>
   15ef6:	f04f 0800 	mov.w	r8, #0
   15efa:	af02      	add	r7, sp, #8
   15efc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15efe:	b103      	cbz	r3, 15f02 <ip_interface_recvfrom+0x86>
   15f00:	681b      	ldr	r3, [r3, #0]
   15f02:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15f04:	e9cd b902 	strd	fp, r9, [sp, #8]
   15f08:	e9cd 2304 	strd	r2, r3, [sp, #16]
   15f0c:	69e0      	ldr	r0, [r4, #28]
   15f0e:	4639      	mov	r1, r7
   15f10:	6803      	ldr	r3, [r0, #0]
   15f12:	4652      	mov	r2, sl
   15f14:	689b      	ldr	r3, [r3, #8]
   15f16:	4798      	blx	r3
   15f18:	4605      	mov	r5, r0
   15f1a:	69e0      	ldr	r0, [r4, #28]
   15f1c:	1c6b      	adds	r3, r5, #1
   15f1e:	6803      	ldr	r3, [r0, #0]
   15f20:	bf18      	it	ne
   15f22:	2701      	movne	r7, #1
   15f24:	68db      	ldr	r3, [r3, #12]
   15f26:	bf0a      	itet	eq
   15f28:	2700      	moveq	r7, #0
   15f2a:	2600      	movne	r6, #0
   15f2c:	2623      	moveq	r6, #35	; 0x23
   15f2e:	4798      	blx	r3
   15f30:	3001      	adds	r0, #1
   15f32:	d132      	bne.n	15f9a <ip_interface_recvfrom+0x11e>
   15f34:	f1b8 0f00 	cmp.w	r8, #0
   15f38:	f000 80b0 	beq.w	1609c <ip_interface_recvfrom+0x220>
   15f3c:	2f00      	cmp	r7, #0
   15f3e:	f000 80a1 	beq.w	16084 <ip_interface_recvfrom+0x208>
   15f42:	6823      	ldr	r3, [r4, #0]
   15f44:	0318      	lsls	r0, r3, #12
   15f46:	d506      	bpl.n	15f56 <ip_interface_recvfrom+0xda>
   15f48:	6823      	ldr	r3, [r4, #0]
   15f4a:	b29b      	uxth	r3, r3
   15f4c:	2b0d      	cmp	r3, #13
   15f4e:	d002      	beq.n	15f56 <ip_interface_recvfrom+0xda>
   15f50:	6923      	ldr	r3, [r4, #16]
   15f52:	2b01      	cmp	r3, #1
   15f54:	d021      	beq.n	15f9a <ip_interface_recvfrom+0x11e>
   15f56:	6823      	ldr	r3, [r4, #0]
   15f58:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   15f5c:	6823      	ldr	r3, [r4, #0]
   15f5e:	f040 80a9 	bne.w	160b4 <ip_interface_recvfrom+0x238>
   15f62:	0319      	lsls	r1, r3, #12
   15f64:	d473      	bmi.n	1604e <ip_interface_recvfrom+0x1d2>
   15f66:	2e00      	cmp	r6, #0
   15f68:	f040 8086 	bne.w	16078 <ip_interface_recvfrom+0x1fc>
   15f6c:	4628      	mov	r0, r5
   15f6e:	b007      	add	sp, #28
   15f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f74:	6803      	ldr	r3, [r0, #0]
   15f76:	b29b      	uxth	r3, r3
   15f78:	2b06      	cmp	r3, #6
   15f7a:	d071      	beq.n	16060 <ip_interface_recvfrom+0x1e4>
   15f7c:	6803      	ldr	r3, [r0, #0]
   15f7e:	b29b      	uxth	r3, r3
   15f80:	2b07      	cmp	r3, #7
   15f82:	bf0c      	ite	eq
   15f84:	2609      	moveq	r6, #9
   15f86:	2639      	movne	r6, #57	; 0x39
   15f88:	69e0      	ldr	r0, [r4, #28]
   15f8a:	6803      	ldr	r3, [r0, #0]
   15f8c:	68db      	ldr	r3, [r3, #12]
   15f8e:	4798      	blx	r3
   15f90:	1c43      	adds	r3, r0, #1
   15f92:	4605      	mov	r5, r0
   15f94:	d0df      	beq.n	15f56 <ip_interface_recvfrom+0xda>
   15f96:	f04f 35ff 	mov.w	r5, #4294967295
   15f9a:	6823      	ldr	r3, [r4, #0]
   15f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   15fa0:	6023      	str	r3, [r4, #0]
   15fa2:	e7e0      	b.n	15f66 <ip_interface_recvfrom+0xea>
   15fa4:	2e00      	cmp	r6, #0
   15fa6:	d07d      	beq.n	160a4 <ip_interface_recvfrom+0x228>
   15fa8:	6a26      	ldr	r6, [r4, #32]
   15faa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15fae:	2e00      	cmp	r6, #0
   15fb0:	bf08      	it	eq
   15fb2:	f04f 36ff 	moveq.w	r6, #4294967295
   15fb6:	af02      	add	r7, sp, #8
   15fb8:	463b      	mov	r3, r7
   15fba:	4611      	mov	r1, r2
   15fbc:	4640      	mov	r0, r8
   15fbe:	9602      	str	r6, [sp, #8]
   15fc0:	f005 fca0 	bl	1b904 <interface_socket_wait>
   15fc4:	4606      	mov	r6, r0
   15fc6:	b350      	cbz	r0, 1601e <ip_interface_recvfrom+0x1a2>
   15fc8:	6823      	ldr	r3, [r4, #0]
   15fca:	031a      	lsls	r2, r3, #12
   15fcc:	d532      	bpl.n	16034 <ip_interface_recvfrom+0x1b8>
   15fce:	6823      	ldr	r3, [r4, #0]
   15fd0:	b29b      	uxth	r3, r3
   15fd2:	2b0d      	cmp	r3, #13
   15fd4:	d02e      	beq.n	16034 <ip_interface_recvfrom+0x1b8>
   15fd6:	6923      	ldr	r3, [r4, #16]
   15fd8:	f1a3 0801 	sub.w	r8, r3, #1
   15fdc:	fab8 f888 	clz	r8, r8
   15fe0:	ea4f 1858 	mov.w	r8, r8, lsr #5
   15fe4:	e78a      	b.n	15efc <ip_interface_recvfrom+0x80>
   15fe6:	6823      	ldr	r3, [r4, #0]
   15fe8:	031a      	lsls	r2, r3, #12
   15fea:	d5db      	bpl.n	15fa4 <ip_interface_recvfrom+0x128>
   15fec:	6823      	ldr	r3, [r4, #0]
   15fee:	b29b      	uxth	r3, r3
   15ff0:	2b0d      	cmp	r3, #13
   15ff2:	d0d7      	beq.n	15fa4 <ip_interface_recvfrom+0x128>
   15ff4:	6923      	ldr	r3, [r4, #16]
   15ff6:	69e0      	ldr	r0, [r4, #28]
   15ff8:	2b01      	cmp	r3, #1
   15ffa:	d033      	beq.n	16064 <ip_interface_recvfrom+0x1e8>
   15ffc:	2639      	movs	r6, #57	; 0x39
   15ffe:	6823      	ldr	r3, [r4, #0]
   16000:	0c1b      	lsrs	r3, r3, #16
   16002:	041b      	lsls	r3, r3, #16
   16004:	f043 030d 	orr.w	r3, r3, #13
   16008:	6023      	str	r3, [r4, #0]
   1600a:	6823      	ldr	r3, [r4, #0]
   1600c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   16010:	6023      	str	r3, [r4, #0]
   16012:	6803      	ldr	r3, [r0, #0]
   16014:	68db      	ldr	r3, [r3, #12]
   16016:	4798      	blx	r3
   16018:	3001      	adds	r0, #1
   1601a:	d1be      	bne.n	15f9a <ip_interface_recvfrom+0x11e>
   1601c:	e79b      	b.n	15f56 <ip_interface_recvfrom+0xda>
   1601e:	4640      	mov	r0, r8
   16020:	f005 fce4 	bl	1b9ec <interface_socket_from_handle_get>
   16024:	b140      	cbz	r0, 16038 <ip_interface_recvfrom+0x1bc>
   16026:	6846      	ldr	r6, [r0, #4]
   16028:	b136      	cbz	r6, 16038 <ip_interface_recvfrom+0x1bc>
   1602a:	2300      	movs	r3, #0
   1602c:	6043      	str	r3, [r0, #4]
   1602e:	6823      	ldr	r3, [r4, #0]
   16030:	031a      	lsls	r2, r3, #12
   16032:	d4cc      	bmi.n	15fce <ip_interface_recvfrom+0x152>
   16034:	69e0      	ldr	r0, [r4, #28]
   16036:	e7ec      	b.n	16012 <ip_interface_recvfrom+0x196>
   16038:	2601      	movs	r6, #1
   1603a:	e748      	b.n	15ece <ip_interface_recvfrom+0x52>
   1603c:	9b01      	ldr	r3, [sp, #4]
   1603e:	b11b      	cbz	r3, 16048 <ip_interface_recvfrom+0x1cc>
   16040:	6823      	ldr	r3, [r4, #0]
   16042:	00d9      	lsls	r1, r3, #3
   16044:	d5b0      	bpl.n	15fa8 <ip_interface_recvfrom+0x12c>
   16046:	e756      	b.n	15ef6 <ip_interface_recvfrom+0x7a>
   16048:	4698      	mov	r8, r3
   1604a:	af02      	add	r7, sp, #8
   1604c:	e756      	b.n	15efc <ip_interface_recvfrom+0x80>
   1604e:	6823      	ldr	r3, [r4, #0]
   16050:	b29b      	uxth	r3, r3
   16052:	2b0d      	cmp	r3, #13
   16054:	d187      	bne.n	15f66 <ip_interface_recvfrom+0xea>
   16056:	68a3      	ldr	r3, [r4, #8]
   16058:	2b00      	cmp	r3, #0
   1605a:	d084      	beq.n	15f66 <ip_interface_recvfrom+0xea>
   1605c:	68a6      	ldr	r6, [r4, #8]
   1605e:	e782      	b.n	15f66 <ip_interface_recvfrom+0xea>
   16060:	2609      	movs	r6, #9
   16062:	e791      	b.n	15f88 <ip_interface_recvfrom+0x10c>
   16064:	6803      	ldr	r3, [r0, #0]
   16066:	68db      	ldr	r3, [r3, #12]
   16068:	4798      	blx	r3
   1606a:	3001      	adds	r0, #1
   1606c:	d00a      	beq.n	16084 <ip_interface_recvfrom+0x208>
   1606e:	2623      	movs	r6, #35	; 0x23
   16070:	6823      	ldr	r3, [r4, #0]
   16072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   16076:	6023      	str	r3, [r4, #0]
   16078:	4630      	mov	r0, r6
   1607a:	f7fb f9f5 	bl	11468 <bsd_os_errno_set>
   1607e:	f04f 35ff 	mov.w	r5, #4294967295
   16082:	e773      	b.n	15f6c <ip_interface_recvfrom+0xf0>
   16084:	6823      	ldr	r3, [r4, #0]
   16086:	2500      	movs	r5, #0
   16088:	0c1b      	lsrs	r3, r3, #16
   1608a:	041b      	lsls	r3, r3, #16
   1608c:	f043 030d 	orr.w	r3, r3, #13
   16090:	6023      	str	r3, [r4, #0]
   16092:	6823      	ldr	r3, [r4, #0]
   16094:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   16098:	6023      	str	r3, [r4, #0]
   1609a:	e767      	b.n	15f6c <ip_interface_recvfrom+0xf0>
   1609c:	2f00      	cmp	r7, #0
   1609e:	f47f af50 	bne.w	15f42 <ip_interface_recvfrom+0xc6>
   160a2:	e758      	b.n	15f56 <ip_interface_recvfrom+0xda>
   160a4:	2623      	movs	r6, #35	; 0x23
   160a6:	e7c5      	b.n	16034 <ip_interface_recvfrom+0x1b8>
   160a8:	262d      	movs	r6, #45	; 0x2d
   160aa:	e7e5      	b.n	16078 <ip_interface_recvfrom+0x1fc>
   160ac:	2616      	movs	r6, #22
   160ae:	e7e3      	b.n	16078 <ip_interface_recvfrom+0x1fc>
   160b0:	2609      	movs	r6, #9
   160b2:	e7e1      	b.n	16078 <ip_interface_recvfrom+0x1fc>
   160b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   160b8:	6023      	str	r3, [r4, #0]
   160ba:	6823      	ldr	r3, [r4, #0]
   160bc:	2669      	movs	r6, #105	; 0x69
   160be:	0c1b      	lsrs	r3, r3, #16
   160c0:	041b      	lsls	r3, r3, #16
   160c2:	f043 030d 	orr.w	r3, r3, #13
   160c6:	6023      	str	r3, [r4, #0]
   160c8:	e7d6      	b.n	16078 <ip_interface_recvfrom+0x1fc>
   160ca:	bf00      	nop

000160cc <ip_interface_connect>:
   160cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   160d0:	b082      	sub	sp, #8
   160d2:	2900      	cmp	r1, #0
   160d4:	d04b      	beq.n	1616e <ip_interface_connect+0xa2>
   160d6:	4617      	mov	r7, r2
   160d8:	2a00      	cmp	r2, #0
   160da:	d048      	beq.n	1616e <ip_interface_connect+0xa2>
   160dc:	4680      	mov	r8, r0
   160de:	4689      	mov	r9, r1
   160e0:	f005 fc84 	bl	1b9ec <interface_socket_from_handle_get>
   160e4:	4605      	mov	r5, r0
   160e6:	2800      	cmp	r0, #0
   160e8:	f000 80af 	beq.w	1624a <ip_interface_connect+0x17e>
   160ec:	6803      	ldr	r3, [r0, #0]
   160ee:	b29b      	uxth	r3, r3
   160f0:	2b02      	cmp	r3, #2
   160f2:	d004      	beq.n	160fe <ip_interface_connect+0x32>
   160f4:	6803      	ldr	r3, [r0, #0]
   160f6:	b29b      	uxth	r3, r3
   160f8:	2b04      	cmp	r3, #4
   160fa:	f040 809d 	bne.w	16238 <ip_interface_connect+0x16c>
   160fe:	6829      	ldr	r1, [r5, #0]
   16100:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   16104:	f040 8089 	bne.w	1621a <ip_interface_connect+0x14e>
   16108:	ae02      	add	r6, sp, #8
   1610a:	f8d5 a018 	ldr.w	sl, [r5, #24]
   1610e:	f846 1d04 	str.w	r1, [r6, #-4]!
   16112:	4630      	mov	r0, r6
   16114:	f7ff fb48 	bl	157a8 <rpc_ip_client_request_alloc>
   16118:	bb98      	cbnz	r0, 16182 <ip_interface_connect+0xb6>
   1611a:	2108      	movs	r1, #8
   1611c:	ea4f 4208 	mov.w	r2, r8, lsl #16
   16120:	9c01      	ldr	r4, [sp, #4]
   16122:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   16126:	f043 0302 	orr.w	r3, r3, #2
   1612a:	60e3      	str	r3, [r4, #12]
   1612c:	f8c4 a010 	str.w	sl, [r4, #16]
   16130:	7260      	strb	r0, [r4, #9]
   16132:	72a0      	strb	r0, [r4, #10]
   16134:	72e0      	strb	r0, [r4, #11]
   16136:	7221      	strb	r1, [r4, #8]
   16138:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   1613c:	f042 0202 	orr.w	r2, r2, #2
   16140:	60e2      	str	r2, [r4, #12]
   16142:	68a3      	ldr	r3, [r4, #8]
   16144:	69aa      	ldr	r2, [r5, #24]
   16146:	3304      	adds	r3, #4
   16148:	6122      	str	r2, [r4, #16]
   1614a:	60a3      	str	r3, [r4, #8]
   1614c:	68eb      	ldr	r3, [r5, #12]
   1614e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   16152:	4293      	cmp	r3, r2
   16154:	d11b      	bne.n	1618e <ip_interface_connect+0xc2>
   16156:	f899 2000 	ldrb.w	r2, [r9]
   1615a:	4297      	cmp	r7, r2
   1615c:	d107      	bne.n	1616e <ip_interface_connect+0xa2>
   1615e:	2b02      	cmp	r3, #2
   16160:	f104 0018 	add.w	r0, r4, #24
   16164:	d015      	beq.n	16192 <ip_interface_connect+0xc6>
   16166:	2b0a      	cmp	r3, #10
   16168:	d101      	bne.n	1616e <ip_interface_connect+0xa2>
   1616a:	2f24      	cmp	r7, #36	; 0x24
   1616c:	d01d      	beq.n	161aa <ip_interface_connect+0xde>
   1616e:	2416      	movs	r4, #22
   16170:	4620      	mov	r0, r4
   16172:	f7fb f979 	bl	11468 <bsd_os_errno_set>
   16176:	f04f 34ff 	mov.w	r4, #4294967295
   1617a:	4620      	mov	r0, r4
   1617c:	b002      	add	sp, #8
   1617e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16182:	9c01      	ldr	r4, [sp, #4]
   16184:	2c00      	cmp	r4, #0
   16186:	d05e      	beq.n	16246 <ip_interface_connect+0x17a>
   16188:	ea4f 4208 	mov.w	r2, r8, lsl #16
   1618c:	e7d4      	b.n	16138 <ip_interface_connect+0x6c>
   1618e:	242f      	movs	r4, #47	; 0x2f
   16190:	e7ee      	b.n	16170 <ip_interface_connect+0xa4>
   16192:	2f10      	cmp	r7, #16
   16194:	d1eb      	bne.n	1616e <ip_interface_connect+0xa2>
   16196:	2204      	movs	r2, #4
   16198:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1619c:	f109 010c 	add.w	r1, r9, #12
   161a0:	82e2      	strh	r2, [r4, #22]
   161a2:	82a3      	strh	r3, [r4, #20]
   161a4:	f008 fb77 	bl	1e896 <memcpy>
   161a8:	e008      	b.n	161bc <ip_interface_connect+0xf0>
   161aa:	2210      	movs	r2, #16
   161ac:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   161b0:	eb09 0102 	add.w	r1, r9, r2
   161b4:	82e2      	strh	r2, [r4, #22]
   161b6:	82a3      	strh	r3, [r4, #20]
   161b8:	f008 fb6d 	bl	1e896 <memcpy>
   161bc:	68a3      	ldr	r3, [r4, #8]
   161be:	8ae2      	ldrh	r2, [r4, #22]
   161c0:	f247 0102 	movw	r1, #28674	; 0x7002
   161c4:	4413      	add	r3, r2
   161c6:	60a3      	str	r3, [r4, #8]
   161c8:	682f      	ldr	r7, [r5, #0]
   161ca:	682b      	ldr	r3, [r5, #0]
   161cc:	4620      	mov	r0, r4
   161ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   161d2:	602b      	str	r3, [r5, #0]
   161d4:	f7ff fafc 	bl	157d0 <rpc_ip_client_request_send>
   161d8:	b9a8      	cbnz	r0, 16206 <ip_interface_connect+0x13a>
   161da:	682b      	ldr	r3, [r5, #0]
   161dc:	00db      	lsls	r3, r3, #3
   161de:	d429      	bmi.n	16234 <ip_interface_connect+0x168>
   161e0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   161e2:	4633      	mov	r3, r6
   161e4:	2c00      	cmp	r4, #0
   161e6:	bf08      	it	eq
   161e8:	f04f 34ff 	moveq.w	r4, #4294967295
   161ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
   161f0:	2105      	movs	r1, #5
   161f2:	4640      	mov	r0, r8
   161f4:	9401      	str	r4, [sp, #4]
   161f6:	f005 fb85 	bl	1b904 <interface_socket_wait>
   161fa:	4604      	mov	r4, r0
   161fc:	b178      	cbz	r0, 1621e <ip_interface_connect+0x152>
   161fe:	2c73      	cmp	r4, #115	; 0x73
   16200:	d0b6      	beq.n	16170 <ip_interface_connect+0xa4>
   16202:	602f      	str	r7, [r5, #0]
   16204:	e7b4      	b.n	16170 <ip_interface_connect+0xa4>
   16206:	6820      	ldr	r0, [r4, #0]
   16208:	b108      	cbz	r0, 1620e <ip_interface_connect+0x142>
   1620a:	f7ff faff 	bl	1580c <rpc_ip_client_data_free>
   1620e:	4620      	mov	r0, r4
   16210:	f7ff faf4 	bl	157fc <rpc_ip_client_message_free>
   16214:	2423      	movs	r4, #35	; 0x23
   16216:	602f      	str	r7, [r5, #0]
   16218:	e7aa      	b.n	16170 <ip_interface_connect+0xa4>
   1621a:	2472      	movs	r4, #114	; 0x72
   1621c:	e7a8      	b.n	16170 <ip_interface_connect+0xa4>
   1621e:	4640      	mov	r0, r8
   16220:	f005 fbe4 	bl	1b9ec <interface_socket_from_handle_get>
   16224:	2800      	cmp	r0, #0
   16226:	d0a8      	beq.n	1617a <ip_interface_connect+0xae>
   16228:	6843      	ldr	r3, [r0, #4]
   1622a:	2b00      	cmp	r3, #0
   1622c:	d0a5      	beq.n	1617a <ip_interface_connect+0xae>
   1622e:	6044      	str	r4, [r0, #4]
   16230:	461c      	mov	r4, r3
   16232:	e7e4      	b.n	161fe <ip_interface_connect+0x132>
   16234:	2473      	movs	r4, #115	; 0x73
   16236:	e79b      	b.n	16170 <ip_interface_connect+0xa4>
   16238:	6803      	ldr	r3, [r0, #0]
   1623a:	b29b      	uxth	r3, r3
   1623c:	2b05      	cmp	r3, #5
   1623e:	bf14      	ite	ne
   16240:	2409      	movne	r4, #9
   16242:	2438      	moveq	r4, #56	; 0x38
   16244:	e794      	b.n	16170 <ip_interface_connect+0xa4>
   16246:	240c      	movs	r4, #12
   16248:	e792      	b.n	16170 <ip_interface_connect+0xa4>
   1624a:	2409      	movs	r4, #9
   1624c:	e790      	b.n	16170 <ip_interface_connect+0xa4>
   1624e:	bf00      	nop

00016250 <ip_interface_socketoption_get>:
   16250:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   16254:	f04f 34ff 	mov.w	r4, #4294967295
   16258:	b082      	sub	sp, #8
   1625a:	9400      	str	r4, [sp, #0]
   1625c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1625e:	2c00      	cmp	r4, #0
   16260:	d05b      	beq.n	1631a <ip_interface_socketoption_get+0xca>
   16262:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   16264:	6824      	ldr	r4, [r4, #0]
   16266:	2c00      	cmp	r4, #0
   16268:	d057      	beq.n	1631a <ip_interface_socketoption_get+0xca>
   1626a:	680c      	ldr	r4, [r1, #0]
   1626c:	0266      	lsls	r6, r4, #9
   1626e:	d44f      	bmi.n	16310 <ip_interface_socketoption_get+0xc0>
   16270:	680c      	ldr	r4, [r1, #0]
   16272:	0225      	lsls	r5, r4, #8
   16274:	d44c      	bmi.n	16310 <ip_interface_socketoption_get+0xc0>
   16276:	680c      	ldr	r4, [r1, #0]
   16278:	01e4      	lsls	r4, r4, #7
   1627a:	d449      	bmi.n	16310 <ip_interface_socketoption_get+0xc0>
   1627c:	680c      	ldr	r4, [r1, #0]
   1627e:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   16282:	d145      	bne.n	16310 <ip_interface_socketoption_get+0xc0>
   16284:	460c      	mov	r4, r1
   16286:	680e      	ldr	r6, [r1, #0]
   16288:	461f      	mov	r7, r3
   1628a:	680b      	ldr	r3, [r1, #0]
   1628c:	4681      	mov	r9, r0
   1628e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   16292:	600b      	str	r3, [r1, #0]
   16294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16296:	a802      	add	r0, sp, #8
   16298:	f840 cd04 	str.w	ip, [r0, #-4]!
   1629c:	6819      	ldr	r1, [r3, #0]
   1629e:	4615      	mov	r5, r2
   162a0:	f8d4 b018 	ldr.w	fp, [r4, #24]
   162a4:	f7ff fa80 	bl	157a8 <rpc_ip_client_request_alloc>
   162a8:	2800      	cmp	r0, #0
   162aa:	d146      	bne.n	1633a <ip_interface_socketoption_get+0xea>
   162ac:	f247 0304 	movw	r3, #28676	; 0x7004
   162b0:	2208      	movs	r2, #8
   162b2:	f8dd a004 	ldr.w	sl, [sp, #4]
   162b6:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   162ba:	f8ca 300c 	str.w	r3, [sl, #12]
   162be:	f8ca b010 	str.w	fp, [sl, #16]
   162c2:	f88a 0009 	strb.w	r0, [sl, #9]
   162c6:	f88a 000a 	strb.w	r0, [sl, #10]
   162ca:	f88a 000b 	strb.w	r0, [sl, #11]
   162ce:	f88a 2008 	strb.w	r2, [sl, #8]
   162d2:	f8da 3008 	ldr.w	r3, [sl, #8]
   162d6:	f8ca 7018 	str.w	r7, [sl, #24]
   162da:	3308      	adds	r3, #8
   162dc:	f8ca 5014 	str.w	r5, [sl, #20]
   162e0:	f8ca 3008 	str.w	r3, [sl, #8]
   162e4:	f247 0104 	movw	r1, #28676	; 0x7004
   162e8:	4650      	mov	r0, sl
   162ea:	f8da 7000 	ldr.w	r7, [sl]
   162ee:	f7ff fa6f 	bl	157d0 <rpc_ip_client_request_send>
   162f2:	b9b8      	cbnz	r0, 16324 <ip_interface_socketoption_get+0xd4>
   162f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   162f8:	466b      	mov	r3, sp
   162fa:	4611      	mov	r1, r2
   162fc:	4648      	mov	r0, r9
   162fe:	f005 fb01 	bl	1b904 <interface_socket_wait>
   16302:	4605      	mov	r5, r0
   16304:	b300      	cbz	r0, 16348 <ip_interface_socketoption_get+0xf8>
   16306:	4638      	mov	r0, r7
   16308:	f7ff fa80 	bl	1580c <rpc_ip_client_data_free>
   1630c:	6026      	str	r6, [r4, #0]
   1630e:	e000      	b.n	16312 <ip_interface_socketoption_get+0xc2>
   16310:	2523      	movs	r5, #35	; 0x23
   16312:	4628      	mov	r0, r5
   16314:	b002      	add	sp, #8
   16316:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   1631a:	2516      	movs	r5, #22
   1631c:	4628      	mov	r0, r5
   1631e:	b002      	add	sp, #8
   16320:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   16324:	f8da 0000 	ldr.w	r0, [sl]
   16328:	b108      	cbz	r0, 1632e <ip_interface_socketoption_get+0xde>
   1632a:	f7ff fa6f 	bl	1580c <rpc_ip_client_data_free>
   1632e:	4650      	mov	r0, sl
   16330:	f7ff fa64 	bl	157fc <rpc_ip_client_message_free>
   16334:	2523      	movs	r5, #35	; 0x23
   16336:	6026      	str	r6, [r4, #0]
   16338:	e7e5      	b.n	16306 <ip_interface_socketoption_get+0xb6>
   1633a:	f8dd a004 	ldr.w	sl, [sp, #4]
   1633e:	f1ba 0f00 	cmp.w	sl, #0
   16342:	d1c6      	bne.n	162d2 <ip_interface_socketoption_get+0x82>
   16344:	250c      	movs	r5, #12
   16346:	e7e1      	b.n	1630c <ip_interface_socketoption_get+0xbc>
   16348:	4648      	mov	r0, r9
   1634a:	f005 fb4f 	bl	1b9ec <interface_socket_from_handle_get>
   1634e:	b120      	cbz	r0, 1635a <ip_interface_socketoption_get+0x10a>
   16350:	6843      	ldr	r3, [r0, #4]
   16352:	b113      	cbz	r3, 1635a <ip_interface_socketoption_get+0x10a>
   16354:	6045      	str	r5, [r0, #4]
   16356:	461d      	mov	r5, r3
   16358:	e7d5      	b.n	16306 <ip_interface_socketoption_get+0xb6>
   1635a:	f8df b050 	ldr.w	fp, [pc, #80]	; 163ac <ip_interface_socketoption_get+0x15c>
   1635e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16360:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   16364:	681b      	ldr	r3, [r3, #0]
   16366:	b1b0      	cbz	r0, 16396 <ip_interface_socketoption_get+0x146>
   16368:	6842      	ldr	r2, [r0, #4]
   1636a:	429a      	cmp	r2, r3
   1636c:	d811      	bhi.n	16392 <ip_interface_socketoption_get+0x142>
   1636e:	6801      	ldr	r1, [r0, #0]
   16370:	b179      	cbz	r1, 16392 <ip_interface_socketoption_get+0x142>
   16372:	980a      	ldr	r0, [sp, #40]	; 0x28
   16374:	f008 fa8f 	bl	1e896 <memcpy>
   16378:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   1637c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1637e:	685b      	ldr	r3, [r3, #4]
   16380:	6013      	str	r3, [r2, #0]
   16382:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   16386:	f7ff fa39 	bl	157fc <rpc_ip_client_message_free>
   1638a:	2300      	movs	r3, #0
   1638c:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   16390:	e7b9      	b.n	16306 <ip_interface_socketoption_get+0xb6>
   16392:	2516      	movs	r5, #22
   16394:	e7f7      	b.n	16386 <ip_interface_socketoption_get+0x136>
   16396:	461a      	mov	r2, r3
   16398:	980a      	ldr	r0, [sp, #40]	; 0x28
   1639a:	4639      	mov	r1, r7
   1639c:	f008 fa7b 	bl	1e896 <memcpy>
   163a0:	f8da 3004 	ldr.w	r3, [sl, #4]
   163a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   163a6:	6013      	str	r3, [r2, #0]
   163a8:	e7ad      	b.n	16306 <ip_interface_socketoption_get+0xb6>
   163aa:	bf00      	nop
   163ac:	20020c6c 	.word	0x20020c6c

000163b0 <ip_interface_socketoption_send>:
   163b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   163b4:	f04f 35ff 	mov.w	r5, #4294967295
   163b8:	680c      	ldr	r4, [r1, #0]
   163ba:	b082      	sub	sp, #8
   163bc:	0266      	lsls	r6, r4, #9
   163be:	9500      	str	r5, [sp, #0]
   163c0:	d44d      	bmi.n	1645e <ip_interface_socketoption_send+0xae>
   163c2:	680c      	ldr	r4, [r1, #0]
   163c4:	0225      	lsls	r5, r4, #8
   163c6:	d44a      	bmi.n	1645e <ip_interface_socketoption_send+0xae>
   163c8:	680c      	ldr	r4, [r1, #0]
   163ca:	01e4      	lsls	r4, r4, #7
   163cc:	d447      	bmi.n	1645e <ip_interface_socketoption_send+0xae>
   163ce:	680c      	ldr	r4, [r1, #0]
   163d0:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   163d4:	d143      	bne.n	1645e <ip_interface_socketoption_send+0xae>
   163d6:	4688      	mov	r8, r1
   163d8:	f8d1 9000 	ldr.w	r9, [r1]
   163dc:	461f      	mov	r7, r3
   163de:	680b      	ldr	r3, [r1, #0]
   163e0:	4605      	mov	r5, r0
   163e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   163e6:	a802      	add	r0, sp, #8
   163e8:	600b      	str	r3, [r1, #0]
   163ea:	f840 4d04 	str.w	r4, [r0, #-4]!
   163ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   163f0:	4616      	mov	r6, r2
   163f2:	f8d8 a018 	ldr.w	sl, [r8, #24]
   163f6:	f7ff f9d7 	bl	157a8 <rpc_ip_client_request_alloc>
   163fa:	bba8      	cbnz	r0, 16468 <ip_interface_socketoption_send+0xb8>
   163fc:	f247 0303 	movw	r3, #28675	; 0x7003
   16400:	2208      	movs	r2, #8
   16402:	9c01      	ldr	r4, [sp, #4]
   16404:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   16408:	60e3      	str	r3, [r4, #12]
   1640a:	f8c4 a010 	str.w	sl, [r4, #16]
   1640e:	7260      	strb	r0, [r4, #9]
   16410:	72a0      	strb	r0, [r4, #10]
   16412:	72e0      	strb	r0, [r4, #11]
   16414:	7222      	strb	r2, [r4, #8]
   16416:	68a3      	ldr	r3, [r4, #8]
   16418:	6166      	str	r6, [r4, #20]
   1641a:	3308      	adds	r3, #8
   1641c:	60a3      	str	r3, [r4, #8]
   1641e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16420:	61a7      	str	r7, [r4, #24]
   16422:	b133      	cbz	r3, 16432 <ip_interface_socketoption_send+0x82>
   16424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16426:	b123      	cbz	r3, 16432 <ip_interface_socketoption_send+0x82>
   16428:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1642a:	4619      	mov	r1, r3
   1642c:	6820      	ldr	r0, [r4, #0]
   1642e:	f008 fa32 	bl	1e896 <memcpy>
   16432:	f247 0103 	movw	r1, #28675	; 0x7003
   16436:	4620      	mov	r0, r4
   16438:	f7ff f9ca 	bl	157d0 <rpc_ip_client_request_send>
   1643c:	4606      	mov	r6, r0
   1643e:	b9c0      	cbnz	r0, 16472 <ip_interface_socketoption_send+0xc2>
   16440:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   16444:	466b      	mov	r3, sp
   16446:	4611      	mov	r1, r2
   16448:	4628      	mov	r0, r5
   1644a:	f005 fa5b 	bl	1b904 <interface_socket_wait>
   1644e:	4604      	mov	r4, r0
   16450:	b1d0      	cbz	r0, 16488 <ip_interface_socketoption_send+0xd8>
   16452:	4620      	mov	r0, r4
   16454:	f8c8 9000 	str.w	r9, [r8]
   16458:	b002      	add	sp, #8
   1645a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1645e:	2423      	movs	r4, #35	; 0x23
   16460:	4620      	mov	r0, r4
   16462:	b002      	add	sp, #8
   16464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16468:	9c01      	ldr	r4, [sp, #4]
   1646a:	2c00      	cmp	r4, #0
   1646c:	d1d3      	bne.n	16416 <ip_interface_socketoption_send+0x66>
   1646e:	240c      	movs	r4, #12
   16470:	e7ef      	b.n	16452 <ip_interface_socketoption_send+0xa2>
   16472:	6820      	ldr	r0, [r4, #0]
   16474:	b108      	cbz	r0, 1647a <ip_interface_socketoption_send+0xca>
   16476:	f7ff f9c9 	bl	1580c <rpc_ip_client_data_free>
   1647a:	4620      	mov	r0, r4
   1647c:	f7ff f9be 	bl	157fc <rpc_ip_client_message_free>
   16480:	2423      	movs	r4, #35	; 0x23
   16482:	f8c8 9000 	str.w	r9, [r8]
   16486:	e7e4      	b.n	16452 <ip_interface_socketoption_send+0xa2>
   16488:	4628      	mov	r0, r5
   1648a:	f005 faaf 	bl	1b9ec <interface_socket_from_handle_get>
   1648e:	2800      	cmp	r0, #0
   16490:	d0df      	beq.n	16452 <ip_interface_socketoption_send+0xa2>
   16492:	6844      	ldr	r4, [r0, #4]
   16494:	2c00      	cmp	r4, #0
   16496:	d0dc      	beq.n	16452 <ip_interface_socketoption_send+0xa2>
   16498:	6046      	str	r6, [r0, #4]
   1649a:	e7da      	b.n	16452 <ip_interface_socketoption_send+0xa2>

0001649c <ip_interface_bind>:
   1649c:	f04f 33ff 	mov.w	r3, #4294967295
   164a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   164a4:	b083      	sub	sp, #12
   164a6:	9300      	str	r3, [sp, #0]
   164a8:	b3b1      	cbz	r1, 16518 <ip_interface_bind+0x7c>
   164aa:	4616      	mov	r6, r2
   164ac:	b3a2      	cbz	r2, 16518 <ip_interface_bind+0x7c>
   164ae:	4607      	mov	r7, r0
   164b0:	4688      	mov	r8, r1
   164b2:	f005 fa9b 	bl	1b9ec <interface_socket_from_handle_get>
   164b6:	4605      	mov	r5, r0
   164b8:	2800      	cmp	r0, #0
   164ba:	d04a      	beq.n	16552 <ip_interface_bind+0xb6>
   164bc:	6803      	ldr	r3, [r0, #0]
   164be:	b29b      	uxth	r3, r3
   164c0:	2b02      	cmp	r3, #2
   164c2:	d146      	bne.n	16552 <ip_interface_bind+0xb6>
   164c4:	2100      	movs	r1, #0
   164c6:	a802      	add	r0, sp, #8
   164c8:	f840 1d04 	str.w	r1, [r0, #-4]!
   164cc:	f8d5 9018 	ldr.w	r9, [r5, #24]
   164d0:	f7ff f96a 	bl	157a8 <rpc_ip_client_request_alloc>
   164d4:	bb50      	cbnz	r0, 1652c <ip_interface_bind+0x90>
   164d6:	f247 0305 	movw	r3, #28677	; 0x7005
   164da:	2208      	movs	r2, #8
   164dc:	9c01      	ldr	r4, [sp, #4]
   164de:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   164e2:	60e3      	str	r3, [r4, #12]
   164e4:	f8c4 9010 	str.w	r9, [r4, #16]
   164e8:	7260      	strb	r0, [r4, #9]
   164ea:	72a0      	strb	r0, [r4, #10]
   164ec:	72e0      	strb	r0, [r4, #11]
   164ee:	7222      	strb	r2, [r4, #8]
   164f0:	68a3      	ldr	r3, [r4, #8]
   164f2:	3304      	adds	r3, #4
   164f4:	60a3      	str	r3, [r4, #8]
   164f6:	68eb      	ldr	r3, [r5, #12]
   164f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   164fc:	4293      	cmp	r3, r2
   164fe:	d11a      	bne.n	16536 <ip_interface_bind+0x9a>
   16500:	f898 2000 	ldrb.w	r2, [r8]
   16504:	4296      	cmp	r6, r2
   16506:	d107      	bne.n	16518 <ip_interface_bind+0x7c>
   16508:	2b02      	cmp	r3, #2
   1650a:	f104 0018 	add.w	r0, r4, #24
   1650e:	d014      	beq.n	1653a <ip_interface_bind+0x9e>
   16510:	2b0a      	cmp	r3, #10
   16512:	d101      	bne.n	16518 <ip_interface_bind+0x7c>
   16514:	2e24      	cmp	r6, #36	; 0x24
   16516:	d01e      	beq.n	16556 <ip_interface_bind+0xba>
   16518:	2416      	movs	r4, #22
   1651a:	4620      	mov	r0, r4
   1651c:	f7fa ffa4 	bl	11468 <bsd_os_errno_set>
   16520:	f04f 34ff 	mov.w	r4, #4294967295
   16524:	4620      	mov	r0, r4
   16526:	b003      	add	sp, #12
   16528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1652c:	9c01      	ldr	r4, [sp, #4]
   1652e:	2c00      	cmp	r4, #0
   16530:	d1de      	bne.n	164f0 <ip_interface_bind+0x54>
   16532:	240c      	movs	r4, #12
   16534:	e7f1      	b.n	1651a <ip_interface_bind+0x7e>
   16536:	242f      	movs	r4, #47	; 0x2f
   16538:	e7ef      	b.n	1651a <ip_interface_bind+0x7e>
   1653a:	2e10      	cmp	r6, #16
   1653c:	d1ec      	bne.n	16518 <ip_interface_bind+0x7c>
   1653e:	2204      	movs	r2, #4
   16540:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   16544:	f108 010c 	add.w	r1, r8, #12
   16548:	82e2      	strh	r2, [r4, #22]
   1654a:	82a3      	strh	r3, [r4, #20]
   1654c:	f008 f9a3 	bl	1e896 <memcpy>
   16550:	e00a      	b.n	16568 <ip_interface_bind+0xcc>
   16552:	2409      	movs	r4, #9
   16554:	e7e1      	b.n	1651a <ip_interface_bind+0x7e>
   16556:	2210      	movs	r2, #16
   16558:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1655c:	eb08 0102 	add.w	r1, r8, r2
   16560:	82e2      	strh	r2, [r4, #22]
   16562:	82a3      	strh	r3, [r4, #20]
   16564:	f008 f997 	bl	1e896 <memcpy>
   16568:	68a3      	ldr	r3, [r4, #8]
   1656a:	8ae2      	ldrh	r2, [r4, #22]
   1656c:	f247 0105 	movw	r1, #28677	; 0x7005
   16570:	4413      	add	r3, r2
   16572:	60a3      	str	r3, [r4, #8]
   16574:	682b      	ldr	r3, [r5, #0]
   16576:	4620      	mov	r0, r4
   16578:	0c1b      	lsrs	r3, r3, #16
   1657a:	041b      	lsls	r3, r3, #16
   1657c:	f043 0303 	orr.w	r3, r3, #3
   16580:	602b      	str	r3, [r5, #0]
   16582:	682e      	ldr	r6, [r5, #0]
   16584:	f7ff f924 	bl	157d0 <rpc_ip_client_request_send>
   16588:	4680      	mov	r8, r0
   1658a:	b978      	cbnz	r0, 165ac <ip_interface_bind+0x110>
   1658c:	466b      	mov	r3, sp
   1658e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16592:	2104      	movs	r1, #4
   16594:	4638      	mov	r0, r7
   16596:	f005 f9b5 	bl	1b904 <interface_socket_wait>
   1659a:	4604      	mov	r4, r0
   1659c:	b1a0      	cbz	r0, 165c8 <ip_interface_bind+0x12c>
   1659e:	682b      	ldr	r3, [r5, #0]
   165a0:	0c1b      	lsrs	r3, r3, #16
   165a2:	041b      	lsls	r3, r3, #16
   165a4:	f043 0302 	orr.w	r3, r3, #2
   165a8:	602b      	str	r3, [r5, #0]
   165aa:	e7b6      	b.n	1651a <ip_interface_bind+0x7e>
   165ac:	6820      	ldr	r0, [r4, #0]
   165ae:	b108      	cbz	r0, 165b4 <ip_interface_bind+0x118>
   165b0:	f7ff f92c 	bl	1580c <rpc_ip_client_data_free>
   165b4:	0c36      	lsrs	r6, r6, #16
   165b6:	0436      	lsls	r6, r6, #16
   165b8:	4620      	mov	r0, r4
   165ba:	f046 0602 	orr.w	r6, r6, #2
   165be:	f7ff f91d 	bl	157fc <rpc_ip_client_message_free>
   165c2:	2423      	movs	r4, #35	; 0x23
   165c4:	602e      	str	r6, [r5, #0]
   165c6:	e7a8      	b.n	1651a <ip_interface_bind+0x7e>
   165c8:	4638      	mov	r0, r7
   165ca:	f005 fa0f 	bl	1b9ec <interface_socket_from_handle_get>
   165ce:	2800      	cmp	r0, #0
   165d0:	d0a8      	beq.n	16524 <ip_interface_bind+0x88>
   165d2:	6844      	ldr	r4, [r0, #4]
   165d4:	2c00      	cmp	r4, #0
   165d6:	d0a5      	beq.n	16524 <ip_interface_bind+0x88>
   165d8:	f8c0 8004 	str.w	r8, [r0, #4]
   165dc:	e7df      	b.n	1659e <ip_interface_bind+0x102>
   165de:	bf00      	nop

000165e0 <ip_interface_listen>:
   165e0:	f04f 33ff 	mov.w	r3, #4294967295
   165e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   165e8:	b082      	sub	sp, #8
   165ea:	4606      	mov	r6, r0
   165ec:	9300      	str	r3, [sp, #0]
   165ee:	f005 f9fd 	bl	1b9ec <interface_socket_from_handle_get>
   165f2:	2800      	cmp	r0, #0
   165f4:	d06c      	beq.n	166d0 <ip_interface_listen+0xf0>
   165f6:	6803      	ldr	r3, [r0, #0]
   165f8:	4604      	mov	r4, r0
   165fa:	b29b      	uxth	r3, r3
   165fc:	2b04      	cmp	r3, #4
   165fe:	d003      	beq.n	16608 <ip_interface_listen+0x28>
   16600:	6803      	ldr	r3, [r0, #0]
   16602:	b29b      	uxth	r3, r3
   16604:	2b0b      	cmp	r3, #11
   16606:	d163      	bne.n	166d0 <ip_interface_listen+0xf0>
   16608:	2100      	movs	r1, #0
   1660a:	4a32      	ldr	r2, [pc, #200]	; (166d4 <ip_interface_listen+0xf4>)
   1660c:	4630      	mov	r0, r6
   1660e:	f005 f941 	bl	1b894 <interface_socket_packet_handler_update>
   16612:	4601      	mov	r1, r0
   16614:	2800      	cmp	r0, #0
   16616:	d159      	bne.n	166cc <ip_interface_listen+0xec>
   16618:	a802      	add	r0, sp, #8
   1661a:	f840 1d04 	str.w	r1, [r0, #-4]!
   1661e:	69a7      	ldr	r7, [r4, #24]
   16620:	f7ff f8c2 	bl	157a8 <rpc_ip_client_request_alloc>
   16624:	bba0      	cbnz	r0, 16690 <ip_interface_listen+0xb0>
   16626:	f247 0308 	movw	r3, #28680	; 0x7008
   1662a:	2208      	movs	r2, #8
   1662c:	9d01      	ldr	r5, [sp, #4]
   1662e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   16632:	60eb      	str	r3, [r5, #12]
   16634:	612f      	str	r7, [r5, #16]
   16636:	7268      	strb	r0, [r5, #9]
   16638:	72a8      	strb	r0, [r5, #10]
   1663a:	72e8      	strb	r0, [r5, #11]
   1663c:	722a      	strb	r2, [r5, #8]
   1663e:	68ab      	ldr	r3, [r5, #8]
   16640:	f247 0108 	movw	r1, #28680	; 0x7008
   16644:	3304      	adds	r3, #4
   16646:	60ab      	str	r3, [r5, #8]
   16648:	6823      	ldr	r3, [r4, #0]
   1664a:	4628      	mov	r0, r5
   1664c:	0c1b      	lsrs	r3, r3, #16
   1664e:	041b      	lsls	r3, r3, #16
   16650:	f043 0306 	orr.w	r3, r3, #6
   16654:	6023      	str	r3, [r4, #0]
   16656:	6827      	ldr	r7, [r4, #0]
   16658:	f7ff f8ba 	bl	157d0 <rpc_ip_client_request_send>
   1665c:	4680      	mov	r8, r0
   1665e:	b9e0      	cbnz	r0, 1669a <ip_interface_listen+0xba>
   16660:	466b      	mov	r3, sp
   16662:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16666:	2107      	movs	r1, #7
   16668:	4630      	mov	r0, r6
   1666a:	f005 f94b 	bl	1b904 <interface_socket_wait>
   1666e:	4605      	mov	r5, r0
   16670:	b308      	cbz	r0, 166b6 <ip_interface_listen+0xd6>
   16672:	6823      	ldr	r3, [r4, #0]
   16674:	0c1b      	lsrs	r3, r3, #16
   16676:	041b      	lsls	r3, r3, #16
   16678:	f043 0304 	orr.w	r3, r3, #4
   1667c:	6023      	str	r3, [r4, #0]
   1667e:	4628      	mov	r0, r5
   16680:	f7fa fef2 	bl	11468 <bsd_os_errno_set>
   16684:	f04f 35ff 	mov.w	r5, #4294967295
   16688:	4628      	mov	r0, r5
   1668a:	b002      	add	sp, #8
   1668c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16690:	9d01      	ldr	r5, [sp, #4]
   16692:	2d00      	cmp	r5, #0
   16694:	d1d3      	bne.n	1663e <ip_interface_listen+0x5e>
   16696:	250c      	movs	r5, #12
   16698:	e7f1      	b.n	1667e <ip_interface_listen+0x9e>
   1669a:	6828      	ldr	r0, [r5, #0]
   1669c:	b108      	cbz	r0, 166a2 <ip_interface_listen+0xc2>
   1669e:	f7ff f8b5 	bl	1580c <rpc_ip_client_data_free>
   166a2:	0c3f      	lsrs	r7, r7, #16
   166a4:	043f      	lsls	r7, r7, #16
   166a6:	4628      	mov	r0, r5
   166a8:	f047 0704 	orr.w	r7, r7, #4
   166ac:	f7ff f8a6 	bl	157fc <rpc_ip_client_message_free>
   166b0:	2523      	movs	r5, #35	; 0x23
   166b2:	6027      	str	r7, [r4, #0]
   166b4:	e7e3      	b.n	1667e <ip_interface_listen+0x9e>
   166b6:	4630      	mov	r0, r6
   166b8:	f005 f998 	bl	1b9ec <interface_socket_from_handle_get>
   166bc:	2800      	cmp	r0, #0
   166be:	d0e3      	beq.n	16688 <ip_interface_listen+0xa8>
   166c0:	6845      	ldr	r5, [r0, #4]
   166c2:	2d00      	cmp	r5, #0
   166c4:	d0e0      	beq.n	16688 <ip_interface_listen+0xa8>
   166c6:	f8c0 8004 	str.w	r8, [r0, #4]
   166ca:	e7d2      	b.n	16672 <ip_interface_listen+0x92>
   166cc:	2523      	movs	r5, #35	; 0x23
   166ce:	e7d6      	b.n	1667e <ip_interface_listen+0x9e>
   166d0:	2509      	movs	r5, #9
   166d2:	e7d4      	b.n	1667e <ip_interface_listen+0x9e>
   166d4:	0001581d 	.word	0x0001581d

000166d8 <ip_interface_accept>:
   166d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166dc:	f04f 33ff 	mov.w	r3, #4294967295
   166e0:	2500      	movs	r5, #0
   166e2:	b087      	sub	sp, #28
   166e4:	460f      	mov	r7, r1
   166e6:	4690      	mov	r8, r2
   166e8:	e9cd 5303 	strd	r5, r3, [sp, #12]
   166ec:	4606      	mov	r6, r0
   166ee:	f005 f97d 	bl	1b9ec <interface_socket_from_handle_get>
   166f2:	4604      	mov	r4, r0
   166f4:	2800      	cmp	r0, #0
   166f6:	f000 8123 	beq.w	16940 <ip_interface_accept+0x268>
   166fa:	6803      	ldr	r3, [r0, #0]
   166fc:	b29b      	uxth	r3, r3
   166fe:	2b07      	cmp	r3, #7
   16700:	d10a      	bne.n	16718 <ip_interface_accept+0x40>
   16702:	6803      	ldr	r3, [r0, #0]
   16704:	6805      	ldr	r5, [r0, #0]
   16706:	00db      	lsls	r3, r3, #3
   16708:	d416      	bmi.n	16738 <ip_interface_accept+0x60>
   1670a:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1670e:	d019      	beq.n	16744 <ip_interface_accept+0x6c>
   16710:	6805      	ldr	r5, [r0, #0]
   16712:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   16716:	d124      	bne.n	16762 <ip_interface_accept+0x8a>
   16718:	f04f 0909 	mov.w	r9, #9
   1671c:	9b03      	ldr	r3, [sp, #12]
   1671e:	b113      	cbz	r3, 16726 <ip_interface_accept+0x4e>
   16720:	4628      	mov	r0, r5
   16722:	f005 f8a1 	bl	1b868 <interface_socket_free>
   16726:	4648      	mov	r0, r9
   16728:	f04f 39ff 	mov.w	r9, #4294967295
   1672c:	f7fa fe9c 	bl	11468 <bsd_os_errno_set>
   16730:	4648      	mov	r0, r9
   16732:	b007      	add	sp, #28
   16734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16738:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   1673c:	d170      	bne.n	16820 <ip_interface_accept+0x148>
   1673e:	f04f 0923 	mov.w	r9, #35	; 0x23
   16742:	e7eb      	b.n	1671c <ip_interface_accept+0x44>
   16744:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16748:	ab04      	add	r3, sp, #16
   1674a:	4611      	mov	r1, r2
   1674c:	4630      	mov	r0, r6
   1674e:	f005 f8d9 	bl	1b904 <interface_socket_wait>
   16752:	4681      	mov	r9, r0
   16754:	2800      	cmp	r0, #0
   16756:	f000 8082 	beq.w	1685e <ip_interface_accept+0x186>
   1675a:	6825      	ldr	r5, [r4, #0]
   1675c:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   16760:	d0dc      	beq.n	1671c <ip_interface_accept+0x44>
   16762:	f04f 30ff 	mov.w	r0, #4294967295
   16766:	2300      	movs	r3, #0
   16768:	e9cd 0300 	strd	r0, r3, [sp]
   1676c:	4a78      	ldr	r2, [pc, #480]	; (16950 <ip_interface_accept+0x278>)
   1676e:	6921      	ldr	r1, [r4, #16]
   16770:	a803      	add	r0, sp, #12
   16772:	f005 f815 	bl	1b7a0 <interface_socket_allocate>
   16776:	9b03      	ldr	r3, [sp, #12]
   16778:	4605      	mov	r5, r0
   1677a:	2b00      	cmp	r3, #0
   1677c:	f000 80e4 	beq.w	16948 <ip_interface_accept+0x270>
   16780:	2100      	movs	r1, #0
   16782:	6962      	ldr	r2, [r4, #20]
   16784:	a806      	add	r0, sp, #24
   16786:	615a      	str	r2, [r3, #20]
   16788:	68e2      	ldr	r2, [r4, #12]
   1678a:	f840 1d04 	str.w	r1, [r0, #-4]!
   1678e:	60da      	str	r2, [r3, #12]
   16790:	6922      	ldr	r2, [r4, #16]
   16792:	611a      	str	r2, [r3, #16]
   16794:	f8d4 9018 	ldr.w	r9, [r4, #24]
   16798:	f7ff f806 	bl	157a8 <rpc_ip_client_request_alloc>
   1679c:	2800      	cmp	r0, #0
   1679e:	d146      	bne.n	1682e <ip_interface_accept+0x156>
   167a0:	f247 030c 	movw	r3, #28684	; 0x700c
   167a4:	2108      	movs	r1, #8
   167a6:	f8dd b014 	ldr.w	fp, [sp, #20]
   167aa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   167ae:	f8cb 300c 	str.w	r3, [fp, #12]
   167b2:	f8cb 9010 	str.w	r9, [fp, #16]
   167b6:	f88b 0009 	strb.w	r0, [fp, #9]
   167ba:	f88b 000a 	strb.w	r0, [fp, #10]
   167be:	f88b 000b 	strb.w	r0, [fp, #11]
   167c2:	f88b 1008 	strb.w	r1, [fp, #8]
   167c6:	6823      	ldr	r3, [r4, #0]
   167c8:	f247 010c 	movw	r1, #28684	; 0x700c
   167cc:	0c1b      	lsrs	r3, r3, #16
   167ce:	041b      	lsls	r3, r3, #16
   167d0:	f043 0308 	orr.w	r3, r3, #8
   167d4:	6023      	str	r3, [r4, #0]
   167d6:	4658      	mov	r0, fp
   167d8:	f8d4 9000 	ldr.w	r9, [r4]
   167dc:	f7fe fff8 	bl	157d0 <rpc_ip_client_request_send>
   167e0:	4682      	mov	sl, r0
   167e2:	bb60      	cbnz	r0, 1683e <ip_interface_accept+0x166>
   167e4:	6822      	ldr	r2, [r4, #0]
   167e6:	9900      	ldr	r1, [sp, #0]
   167e8:	ab04      	add	r3, sp, #16
   167ea:	400a      	ands	r2, r1
   167ec:	6022      	str	r2, [r4, #0]
   167ee:	2109      	movs	r1, #9
   167f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   167f4:	4630      	mov	r0, r6
   167f6:	f005 f885 	bl	1b904 <interface_socket_wait>
   167fa:	4681      	mov	r9, r0
   167fc:	2800      	cmp	r0, #0
   167fe:	f000 808d 	beq.w	1691c <ip_interface_accept+0x244>
   16802:	6823      	ldr	r3, [r4, #0]
   16804:	9a01      	ldr	r2, [sp, #4]
   16806:	431a      	orrs	r2, r3
   16808:	6022      	str	r2, [r4, #0]
   1680a:	6823      	ldr	r3, [r4, #0]
   1680c:	0c1b      	lsrs	r3, r3, #16
   1680e:	041b      	lsls	r3, r3, #16
   16810:	f043 0307 	orr.w	r3, r3, #7
   16814:	6023      	str	r3, [r4, #0]
   16816:	6823      	ldr	r3, [r4, #0]
   16818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1681c:	6023      	str	r3, [r4, #0]
   1681e:	e77d      	b.n	1671c <ip_interface_accept+0x44>
   16820:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   16824:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16828:	e9cd 2300 	strd	r2, r3, [sp]
   1682c:	e79e      	b.n	1676c <ip_interface_accept+0x94>
   1682e:	f8dd b014 	ldr.w	fp, [sp, #20]
   16832:	f04f 090c 	mov.w	r9, #12
   16836:	f1bb 0f00 	cmp.w	fp, #0
   1683a:	d1c4      	bne.n	167c6 <ip_interface_accept+0xee>
   1683c:	e76e      	b.n	1671c <ip_interface_accept+0x44>
   1683e:	f8db 0000 	ldr.w	r0, [fp]
   16842:	b108      	cbz	r0, 16848 <ip_interface_accept+0x170>
   16844:	f7fe ffe2 	bl	1580c <rpc_ip_client_data_free>
   16848:	ea4f 4919 	mov.w	r9, r9, lsr #16
   1684c:	4658      	mov	r0, fp
   1684e:	ea4f 4909 	mov.w	r9, r9, lsl #16
   16852:	f7fe ffd3 	bl	157fc <rpc_ip_client_message_free>
   16856:	f049 0307 	orr.w	r3, r9, #7
   1685a:	6023      	str	r3, [r4, #0]
   1685c:	e76f      	b.n	1673e <ip_interface_accept+0x66>
   1685e:	4630      	mov	r0, r6
   16860:	f005 f8c4 	bl	1b9ec <interface_socket_from_handle_get>
   16864:	b130      	cbz	r0, 16874 <ip_interface_accept+0x19c>
   16866:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1686a:	f1b9 0f00 	cmp.w	r9, #0
   1686e:	d001      	beq.n	16874 <ip_interface_accept+0x19c>
   16870:	6045      	str	r5, [r0, #4]
   16872:	e772      	b.n	1675a <ip_interface_accept+0x82>
   16874:	6823      	ldr	r3, [r4, #0]
   16876:	03d9      	lsls	r1, r3, #15
   16878:	f53f af73 	bmi.w	16762 <ip_interface_accept+0x8a>
   1687c:	4d35      	ldr	r5, [pc, #212]	; (16954 <ip_interface_accept+0x27c>)
   1687e:	9903      	ldr	r1, [sp, #12]
   16880:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   16884:	699b      	ldr	r3, [r3, #24]
   16886:	618b      	str	r3, [r1, #24]
   16888:	b147      	cbz	r7, 1689c <ip_interface_accept+0x1c4>
   1688a:	68cb      	ldr	r3, [r1, #12]
   1688c:	2b0a      	cmp	r3, #10
   1688e:	d028      	beq.n	168e2 <ip_interface_accept+0x20a>
   16890:	2b02      	cmp	r3, #2
   16892:	d103      	bne.n	1689c <ip_interface_accept+0x1c4>
   16894:	f8d8 2000 	ldr.w	r2, [r8]
   16898:	2a10      	cmp	r2, #16
   1689a:	d036      	beq.n	1690a <ip_interface_accept+0x232>
   1689c:	680a      	ldr	r2, [r1, #0]
   1689e:	482e      	ldr	r0, [pc, #184]	; (16958 <ip_interface_accept+0x280>)
   168a0:	4002      	ands	r2, r0
   168a2:	f042 0205 	orr.w	r2, r2, #5
   168a6:	600a      	str	r2, [r1, #0]
   168a8:	9a03      	ldr	r2, [sp, #12]
   168aa:	6811      	ldr	r1, [r2, #0]
   168ac:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   168b0:	6011      	str	r1, [r2, #0]
   168b2:	6811      	ldr	r1, [r2, #0]
   168b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   168b8:	6011      	str	r1, [r2, #0]
   168ba:	6823      	ldr	r3, [r4, #0]
   168bc:	4003      	ands	r3, r0
   168be:	f043 0307 	orr.w	r3, r3, #7
   168c2:	6023      	str	r3, [r4, #0]
   168c4:	6823      	ldr	r3, [r4, #0]
   168c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   168ca:	6023      	str	r3, [r4, #0]
   168cc:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   168d0:	f7fe ff94 	bl	157fc <rpc_ip_client_message_free>
   168d4:	2300      	movs	r3, #0
   168d6:	4648      	mov	r0, r9
   168d8:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   168dc:	b007      	add	sp, #28
   168de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168e2:	f8d8 2000 	ldr.w	r2, [r8]
   168e6:	2a24      	cmp	r2, #36	; 0x24
   168e8:	d1d8      	bne.n	1689c <ip_interface_accept+0x1c4>
   168ea:	703a      	strb	r2, [r7, #0]
   168ec:	2210      	movs	r2, #16
   168ee:	607b      	str	r3, [r7, #4]
   168f0:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   168f4:	f107 0010 	add.w	r0, r7, #16
   168f8:	8b9b      	ldrh	r3, [r3, #28]
   168fa:	813b      	strh	r3, [r7, #8]
   168fc:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   16900:	3120      	adds	r1, #32
   16902:	f007 ffc8 	bl	1e896 <memcpy>
   16906:	9903      	ldr	r1, [sp, #12]
   16908:	e7c8      	b.n	1689c <ip_interface_accept+0x1c4>
   1690a:	703a      	strb	r2, [r7, #0]
   1690c:	607b      	str	r3, [r7, #4]
   1690e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   16912:	f107 000c 	add.w	r0, r7, #12
   16916:	8b9b      	ldrh	r3, [r3, #28]
   16918:	2204      	movs	r2, #4
   1691a:	e7ee      	b.n	168fa <ip_interface_accept+0x222>
   1691c:	4630      	mov	r0, r6
   1691e:	f005 f865 	bl	1b9ec <interface_socket_from_handle_get>
   16922:	b138      	cbz	r0, 16934 <ip_interface_accept+0x25c>
   16924:	f8d0 9004 	ldr.w	r9, [r0, #4]
   16928:	f1b9 0f00 	cmp.w	r9, #0
   1692c:	d002      	beq.n	16934 <ip_interface_accept+0x25c>
   1692e:	f8c0 a004 	str.w	sl, [r0, #4]
   16932:	e766      	b.n	16802 <ip_interface_accept+0x12a>
   16934:	6823      	ldr	r3, [r4, #0]
   16936:	9a01      	ldr	r2, [sp, #4]
   16938:	46a9      	mov	r9, r5
   1693a:	4313      	orrs	r3, r2
   1693c:	6023      	str	r3, [r4, #0]
   1693e:	e79d      	b.n	1687c <ip_interface_accept+0x1a4>
   16940:	4605      	mov	r5, r0
   16942:	f04f 0909 	mov.w	r9, #9
   16946:	e6e9      	b.n	1671c <ip_interface_accept+0x44>
   16948:	f04f 090c 	mov.w	r9, #12
   1694c:	e6eb      	b.n	16726 <ip_interface_accept+0x4e>
   1694e:	bf00      	nop
   16950:	0001581d 	.word	0x0001581d
   16954:	20020c6c 	.word	0x20020c6c
   16958:	ffff0000 	.word	0xffff0000

0001695c <ip_interface_setopt>:
   1695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16960:	2901      	cmp	r1, #1
   16962:	b084      	sub	sp, #16
   16964:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   16966:	f040 808a 	bne.w	16a7e <ip_interface_setopt+0x122>
   1696a:	4617      	mov	r7, r2
   1696c:	461d      	mov	r5, r3
   1696e:	4680      	mov	r8, r0
   16970:	f005 f83c 	bl	1b9ec <interface_socket_from_handle_get>
   16974:	4604      	mov	r4, r0
   16976:	2800      	cmp	r0, #0
   16978:	f000 808d 	beq.w	16a96 <ip_interface_setopt+0x13a>
   1697c:	f1a7 0119 	sub.w	r1, r7, #25
   16980:	290f      	cmp	r1, #15
   16982:	d872      	bhi.n	16a6a <ip_interface_setopt+0x10e>
   16984:	e8df f001 	tbb	[pc, r1]
   16988:	7171711a 	.word	0x7171711a
   1698c:	61514071 	.word	0x61514071
   16990:	71717171 	.word	0x71717171
   16994:	08717171 	.word	0x08717171
   16998:	2e04      	cmp	r6, #4
   1699a:	d176      	bne.n	16a8a <ip_interface_setopt+0x12e>
   1699c:	2d00      	cmp	r5, #0
   1699e:	d074      	beq.n	16a8a <ip_interface_setopt+0x12e>
   169a0:	4601      	mov	r1, r0
   169a2:	e9cd 5600 	strd	r5, r6, [sp]
   169a6:	4640      	mov	r0, r8
   169a8:	f241 0304 	movw	r3, #4100	; 0x1004
   169ac:	2208      	movs	r2, #8
   169ae:	f7ff fcff 	bl	163b0 <ip_interface_socketoption_send>
   169b2:	bb20      	cbnz	r0, 169fe <ip_interface_setopt+0xa2>
   169b4:	2000      	movs	r0, #0
   169b6:	b004      	add	sp, #16
   169b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   169bc:	2d00      	cmp	r5, #0
   169be:	d06c      	beq.n	16a9a <ip_interface_setopt+0x13e>
   169c0:	4628      	mov	r0, r5
   169c2:	f007 ff36 	bl	1e832 <strlen>
   169c6:	42b0      	cmp	r0, r6
   169c8:	d167      	bne.n	16a9a <ip_interface_setopt+0x13e>
   169ca:	6823      	ldr	r3, [r4, #0]
   169cc:	b29b      	uxth	r3, r3
   169ce:	2b02      	cmp	r3, #2
   169d0:	d161      	bne.n	16a96 <ip_interface_setopt+0x13a>
   169d2:	4629      	mov	r1, r5
   169d4:	68e0      	ldr	r0, [r4, #12]
   169d6:	f002 fdc1 	bl	1955c <pdn_interface_pdn_id_get>
   169da:	9003      	str	r0, [sp, #12]
   169dc:	3001      	adds	r0, #1
   169de:	bf08      	it	eq
   169e0:	2016      	moveq	r0, #22
   169e2:	d00c      	beq.n	169fe <ip_interface_setopt+0xa2>
   169e4:	2204      	movs	r2, #4
   169e6:	ab03      	add	r3, sp, #12
   169e8:	e9cd 3200 	strd	r3, r2, [sp]
   169ec:	4621      	mov	r1, r4
   169ee:	4640      	mov	r0, r8
   169f0:	f243 0310 	movw	r3, #12304	; 0x3010
   169f4:	2208      	movs	r2, #8
   169f6:	f7ff fcdb 	bl	163b0 <ip_interface_socketoption_send>
   169fa:	2800      	cmp	r0, #0
   169fc:	d0da      	beq.n	169b4 <ip_interface_setopt+0x58>
   169fe:	f7fa fd33 	bl	11468 <bsd_os_errno_set>
   16a02:	f04f 30ff 	mov.w	r0, #4294967295
   16a06:	e7d6      	b.n	169b6 <ip_interface_setopt+0x5a>
   16a08:	2e04      	cmp	r6, #4
   16a0a:	d13e      	bne.n	16a8a <ip_interface_setopt+0x12e>
   16a0c:	2d00      	cmp	r5, #0
   16a0e:	d03c      	beq.n	16a8a <ip_interface_setopt+0x12e>
   16a10:	4601      	mov	r1, r0
   16a12:	e9cd 5600 	strd	r5, r6, [sp]
   16a16:	4640      	mov	r0, r8
   16a18:	f248 0301 	movw	r3, #32769	; 0x8001
   16a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
   16a20:	f7ff fcc6 	bl	163b0 <ip_interface_socketoption_send>
   16a24:	2800      	cmp	r0, #0
   16a26:	d0c5      	beq.n	169b4 <ip_interface_setopt+0x58>
   16a28:	e7e9      	b.n	169fe <ip_interface_setopt+0xa2>
   16a2a:	2e04      	cmp	r6, #4
   16a2c:	d12d      	bne.n	16a8a <ip_interface_setopt+0x12e>
   16a2e:	b365      	cbz	r5, 16a8a <ip_interface_setopt+0x12e>
   16a30:	4601      	mov	r1, r0
   16a32:	e9cd 5600 	strd	r5, r6, [sp]
   16a36:	4640      	mov	r0, r8
   16a38:	f244 0310 	movw	r3, #16400	; 0x4010
   16a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
   16a40:	f7ff fcb6 	bl	163b0 <ip_interface_socketoption_send>
   16a44:	2800      	cmp	r0, #0
   16a46:	d0b5      	beq.n	169b4 <ip_interface_setopt+0x58>
   16a48:	e7d9      	b.n	169fe <ip_interface_setopt+0xa2>
   16a4a:	2e04      	cmp	r6, #4
   16a4c:	d11d      	bne.n	16a8a <ip_interface_setopt+0x12e>
   16a4e:	b1e5      	cbz	r5, 16a8a <ip_interface_setopt+0x12e>
   16a50:	4601      	mov	r1, r0
   16a52:	e9cd 5600 	strd	r5, r6, [sp]
   16a56:	4640      	mov	r0, r8
   16a58:	f246 0310 	movw	r3, #24592	; 0x6010
   16a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
   16a60:	f7ff fca6 	bl	163b0 <ip_interface_socketoption_send>
   16a64:	2800      	cmp	r0, #0
   16a66:	d0a5      	beq.n	169b4 <ip_interface_setopt+0x58>
   16a68:	e7c9      	b.n	169fe <ip_interface_setopt+0xa2>
   16a6a:	9600      	str	r6, [sp, #0]
   16a6c:	462b      	mov	r3, r5
   16a6e:	463a      	mov	r2, r7
   16a70:	4640      	mov	r0, r8
   16a72:	2101      	movs	r1, #1
   16a74:	f004 ffe2 	bl	1ba3c <interface_socket_setopt>
   16a78:	b004      	add	sp, #16
   16a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16a7e:	202a      	movs	r0, #42	; 0x2a
   16a80:	f7fa fcf2 	bl	11468 <bsd_os_errno_set>
   16a84:	f04f 30ff 	mov.w	r0, #4294967295
   16a88:	e795      	b.n	169b6 <ip_interface_setopt+0x5a>
   16a8a:	2016      	movs	r0, #22
   16a8c:	f7fa fcec 	bl	11468 <bsd_os_errno_set>
   16a90:	f04f 30ff 	mov.w	r0, #4294967295
   16a94:	e78f      	b.n	169b6 <ip_interface_setopt+0x5a>
   16a96:	2009      	movs	r0, #9
   16a98:	e7b1      	b.n	169fe <ip_interface_setopt+0xa2>
   16a9a:	200e      	movs	r0, #14
   16a9c:	e7af      	b.n	169fe <ip_interface_setopt+0xa2>
   16a9e:	bf00      	nop

00016aa0 <ip_interface_getopt>:
   16aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16aa4:	2901      	cmp	r1, #1
   16aa6:	b082      	sub	sp, #8
   16aa8:	9c08      	ldr	r4, [sp, #32]
   16aaa:	d173      	bne.n	16b94 <ip_interface_getopt+0xf4>
   16aac:	4617      	mov	r7, r2
   16aae:	461e      	mov	r6, r3
   16ab0:	4680      	mov	r8, r0
   16ab2:	f004 ff9b 	bl	1b9ec <interface_socket_from_handle_get>
   16ab6:	2800      	cmp	r0, #0
   16ab8:	d072      	beq.n	16ba0 <ip_interface_getopt+0x100>
   16aba:	f1a7 051e 	sub.w	r5, r7, #30
   16abe:	2d0a      	cmp	r5, #10
   16ac0:	d858      	bhi.n	16b74 <ip_interface_getopt+0xd4>
   16ac2:	e8df f005 	tbb	[pc, r5]
   16ac6:	331b      	.short	0x331b
   16ac8:	57575745 	.word	0x57575745
   16acc:	57575757 	.word	0x57575757
   16ad0:	06          	.byte	0x06
   16ad1:	00          	.byte	0x00
   16ad2:	2c00      	cmp	r4, #0
   16ad4:	d058      	beq.n	16b88 <ip_interface_getopt+0xe8>
   16ad6:	6823      	ldr	r3, [r4, #0]
   16ad8:	2b04      	cmp	r3, #4
   16ada:	d155      	bne.n	16b88 <ip_interface_getopt+0xe8>
   16adc:	2e00      	cmp	r6, #0
   16ade:	d053      	beq.n	16b88 <ip_interface_getopt+0xe8>
   16ae0:	4601      	mov	r1, r0
   16ae2:	e9cd 6400 	strd	r6, r4, [sp]
   16ae6:	4640      	mov	r0, r8
   16ae8:	f241 0304 	movw	r3, #4100	; 0x1004
   16aec:	2208      	movs	r2, #8
   16aee:	f7ff fbaf 	bl	16250 <ip_interface_socketoption_get>
   16af2:	b9b0      	cbnz	r0, 16b22 <ip_interface_getopt+0x82>
   16af4:	2000      	movs	r0, #0
   16af6:	b002      	add	sp, #8
   16af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16afc:	2c00      	cmp	r4, #0
   16afe:	d043      	beq.n	16b88 <ip_interface_getopt+0xe8>
   16b00:	6823      	ldr	r3, [r4, #0]
   16b02:	2b04      	cmp	r3, #4
   16b04:	d140      	bne.n	16b88 <ip_interface_getopt+0xe8>
   16b06:	2e00      	cmp	r6, #0
   16b08:	d03e      	beq.n	16b88 <ip_interface_getopt+0xe8>
   16b0a:	4601      	mov	r1, r0
   16b0c:	e9cd 6400 	strd	r6, r4, [sp]
   16b10:	4640      	mov	r0, r8
   16b12:	f248 0301 	movw	r3, #32769	; 0x8001
   16b16:	f44f 7200 	mov.w	r2, #512	; 0x200
   16b1a:	f7ff fb99 	bl	16250 <ip_interface_socketoption_get>
   16b1e:	2800      	cmp	r0, #0
   16b20:	d0e8      	beq.n	16af4 <ip_interface_getopt+0x54>
   16b22:	f7fa fca1 	bl	11468 <bsd_os_errno_set>
   16b26:	f04f 30ff 	mov.w	r0, #4294967295
   16b2a:	e7e4      	b.n	16af6 <ip_interface_getopt+0x56>
   16b2c:	b364      	cbz	r4, 16b88 <ip_interface_getopt+0xe8>
   16b2e:	6823      	ldr	r3, [r4, #0]
   16b30:	2b04      	cmp	r3, #4
   16b32:	d129      	bne.n	16b88 <ip_interface_getopt+0xe8>
   16b34:	b346      	cbz	r6, 16b88 <ip_interface_getopt+0xe8>
   16b36:	4601      	mov	r1, r0
   16b38:	e9cd 6400 	strd	r6, r4, [sp]
   16b3c:	4640      	mov	r0, r8
   16b3e:	f244 0310 	movw	r3, #16400	; 0x4010
   16b42:	f44f 7200 	mov.w	r2, #512	; 0x200
   16b46:	f7ff fb83 	bl	16250 <ip_interface_socketoption_get>
   16b4a:	2800      	cmp	r0, #0
   16b4c:	d0d2      	beq.n	16af4 <ip_interface_getopt+0x54>
   16b4e:	e7e8      	b.n	16b22 <ip_interface_getopt+0x82>
   16b50:	b1d4      	cbz	r4, 16b88 <ip_interface_getopt+0xe8>
   16b52:	6823      	ldr	r3, [r4, #0]
   16b54:	2b04      	cmp	r3, #4
   16b56:	d117      	bne.n	16b88 <ip_interface_getopt+0xe8>
   16b58:	b1b6      	cbz	r6, 16b88 <ip_interface_getopt+0xe8>
   16b5a:	4601      	mov	r1, r0
   16b5c:	e9cd 6400 	strd	r6, r4, [sp]
   16b60:	4640      	mov	r0, r8
   16b62:	f246 0310 	movw	r3, #24592	; 0x6010
   16b66:	f44f 7200 	mov.w	r2, #512	; 0x200
   16b6a:	f7ff fb71 	bl	16250 <ip_interface_socketoption_get>
   16b6e:	2800      	cmp	r0, #0
   16b70:	d0c0      	beq.n	16af4 <ip_interface_getopt+0x54>
   16b72:	e7d6      	b.n	16b22 <ip_interface_getopt+0x82>
   16b74:	4633      	mov	r3, r6
   16b76:	463a      	mov	r2, r7
   16b78:	4640      	mov	r0, r8
   16b7a:	2101      	movs	r1, #1
   16b7c:	9408      	str	r4, [sp, #32]
   16b7e:	b002      	add	sp, #8
   16b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16b84:	f004 bfa0 	b.w	1bac8 <interface_socket_getopt>
   16b88:	2016      	movs	r0, #22
   16b8a:	f7fa fc6d 	bl	11468 <bsd_os_errno_set>
   16b8e:	f04f 30ff 	mov.w	r0, #4294967295
   16b92:	e7b0      	b.n	16af6 <ip_interface_getopt+0x56>
   16b94:	202a      	movs	r0, #42	; 0x2a
   16b96:	f7fa fc67 	bl	11468 <bsd_os_errno_set>
   16b9a:	f04f 30ff 	mov.w	r0, #4294967295
   16b9e:	e7aa      	b.n	16af6 <ip_interface_getopt+0x56>
   16ba0:	2009      	movs	r0, #9
   16ba2:	f7fa fc61 	bl	11468 <bsd_os_errno_set>
   16ba6:	f04f 30ff 	mov.w	r0, #4294967295
   16baa:	e7a4      	b.n	16af6 <ip_interface_getopt+0x56>

00016bac <ip_interface_getaddrinfo>:
   16bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bb0:	f04f 0c00 	mov.w	ip, #0
   16bb4:	2401      	movs	r4, #1
   16bb6:	4e75      	ldr	r6, [pc, #468]	; (16d8c <ip_interface_getaddrinfo+0x1e0>)
   16bb8:	4d75      	ldr	r5, [pc, #468]	; (16d90 <ip_interface_getaddrinfo+0x1e4>)
   16bba:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 16da0 <ip_interface_getaddrinfo+0x1f4>
   16bbe:	4f75      	ldr	r7, [pc, #468]	; (16d94 <ip_interface_getaddrinfo+0x1e8>)
   16bc0:	7836      	ldrb	r6, [r6, #0]
   16bc2:	b085      	sub	sp, #20
   16bc4:	f8a5 c000 	strh.w	ip, [r5]
   16bc8:	f8c8 4000 	str.w	r4, [r8]
   16bcc:	603c      	str	r4, [r7, #0]
   16bce:	2e00      	cmp	r6, #0
   16bd0:	d05b      	beq.n	16c8a <ip_interface_getaddrinfo+0xde>
   16bd2:	9301      	str	r3, [sp, #4]
   16bd4:	4614      	mov	r4, r2
   16bd6:	460b      	mov	r3, r1
   16bd8:	4606      	mov	r6, r0
   16bda:	b171      	cbz	r1, 16bfa <ip_interface_getaddrinfo+0x4e>
   16bdc:	4618      	mov	r0, r3
   16bde:	220a      	movs	r2, #10
   16be0:	4661      	mov	r1, ip
   16be2:	f007 fcf6 	bl	1e5d2 <strtol>
   16be6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   16bea:	1e42      	subs	r2, r0, #1
   16bec:	429a      	cmp	r2, r3
   16bee:	f200 8097 	bhi.w	16d20 <ip_interface_getaddrinfo+0x174>
   16bf2:	0203      	lsls	r3, r0, #8
   16bf4:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   16bf8:	8028      	strh	r0, [r5, #0]
   16bfa:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 16da4 <ip_interface_getaddrinfo+0x1f8>
   16bfe:	f8da 3000 	ldr.w	r3, [sl]
   16c02:	2b00      	cmp	r3, #0
   16c04:	d145      	bne.n	16c92 <ip_interface_getaddrinfo+0xe6>
   16c06:	4a64      	ldr	r2, [pc, #400]	; (16d98 <ip_interface_getaddrinfo+0x1ec>)
   16c08:	6013      	str	r3, [r2, #0]
   16c0a:	4a64      	ldr	r2, [pc, #400]	; (16d9c <ip_interface_getaddrinfo+0x1f0>)
   16c0c:	6013      	str	r3, [r2, #0]
   16c0e:	2e00      	cmp	r6, #0
   16c10:	d07a      	beq.n	16d08 <ip_interface_getaddrinfo+0x15c>
   16c12:	4630      	mov	r0, r6
   16c14:	f007 fe0d 	bl	1e832 <strlen>
   16c18:	4683      	mov	fp, r0
   16c1a:	b144      	cbz	r4, 16c2e <ip_interface_getaddrinfo+0x82>
   16c1c:	69e2      	ldr	r2, [r4, #28]
   16c1e:	b132      	cbz	r2, 16c2e <ip_interface_getaddrinfo+0x82>
   16c20:	6851      	ldr	r1, [r2, #4]
   16c22:	2966      	cmp	r1, #102	; 0x66
   16c24:	d103      	bne.n	16c2e <ip_interface_getaddrinfo+0x82>
   16c26:	6891      	ldr	r1, [r2, #8]
   16c28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   16c2c:	d07e      	beq.n	16d2c <ip_interface_getaddrinfo+0x180>
   16c2e:	f04f 32ff 	mov.w	r2, #4294967295
   16c32:	2100      	movs	r1, #0
   16c34:	f10d 0910 	add.w	r9, sp, #16
   16c38:	f849 1d04 	str.w	r1, [r9, #-4]!
   16c3c:	4648      	mov	r0, r9
   16c3e:	4659      	mov	r1, fp
   16c40:	9200      	str	r2, [sp, #0]
   16c42:	f7fe fdb1 	bl	157a8 <rpc_ip_client_request_alloc>
   16c46:	9a00      	ldr	r2, [sp, #0]
   16c48:	2800      	cmp	r0, #0
   16c4a:	d15f      	bne.n	16d0c <ip_interface_getaddrinfo+0x160>
   16c4c:	f247 010d 	movw	r1, #28685	; 0x700d
   16c50:	f04f 0c08 	mov.w	ip, #8
   16c54:	9d03      	ldr	r5, [sp, #12]
   16c56:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   16c5a:	60e9      	str	r1, [r5, #12]
   16c5c:	612a      	str	r2, [r5, #16]
   16c5e:	7268      	strb	r0, [r5, #9]
   16c60:	72a8      	strb	r0, [r5, #10]
   16c62:	72e8      	strb	r0, [r5, #11]
   16c64:	f885 c008 	strb.w	ip, [r5, #8]
   16c68:	2c00      	cmp	r4, #0
   16c6a:	d076      	beq.n	16d5a <ip_interface_getaddrinfo+0x1ae>
   16c6c:	6862      	ldr	r2, [r4, #4]
   16c6e:	f022 0108 	bic.w	r1, r2, #8
   16c72:	2902      	cmp	r1, #2
   16c74:	d011      	beq.n	16c9a <ip_interface_getaddrinfo+0xee>
   16c76:	2a05      	cmp	r2, #5
   16c78:	d176      	bne.n	16d68 <ip_interface_getaddrinfo+0x1bc>
   16c7a:	68a1      	ldr	r1, [r4, #8]
   16c7c:	2902      	cmp	r1, #2
   16c7e:	6039      	str	r1, [r7, #0]
   16c80:	d115      	bne.n	16cae <ip_interface_getaddrinfo+0x102>
   16c82:	2102      	movs	r1, #2
   16c84:	f8c8 1000 	str.w	r1, [r8]
   16c88:	e00b      	b.n	16ca2 <ip_interface_getaddrinfo+0xf6>
   16c8a:	2070      	movs	r0, #112	; 0x70
   16c8c:	b005      	add	sp, #20
   16c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c92:	2073      	movs	r0, #115	; 0x73
   16c94:	b005      	add	sp, #20
   16c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c9a:	68a1      	ldr	r1, [r4, #8]
   16c9c:	2902      	cmp	r1, #2
   16c9e:	6039      	str	r1, [r7, #0]
   16ca0:	d0ef      	beq.n	16c82 <ip_interface_getaddrinfo+0xd6>
   16ca2:	2a05      	cmp	r2, #5
   16ca4:	d003      	beq.n	16cae <ip_interface_getaddrinfo+0x102>
   16ca6:	2a0a      	cmp	r2, #10
   16ca8:	bf14      	ite	ne
   16caa:	2201      	movne	r2, #1
   16cac:	2202      	moveq	r2, #2
   16cae:	61aa      	str	r2, [r5, #24]
   16cb0:	68e2      	ldr	r2, [r4, #12]
   16cb2:	622a      	str	r2, [r5, #32]
   16cb4:	68a2      	ldr	r2, [r4, #8]
   16cb6:	61ea      	str	r2, [r5, #28]
   16cb8:	6822      	ldr	r2, [r4, #0]
   16cba:	616a      	str	r2, [r5, #20]
   16cbc:	68aa      	ldr	r2, [r5, #8]
   16cbe:	3210      	adds	r2, #16
   16cc0:	60aa      	str	r2, [r5, #8]
   16cc2:	b12e      	cbz	r6, 16cd0 <ip_interface_getaddrinfo+0x124>
   16cc4:	6828      	ldr	r0, [r5, #0]
   16cc6:	b118      	cbz	r0, 16cd0 <ip_interface_getaddrinfo+0x124>
   16cc8:	465a      	mov	r2, fp
   16cca:	4631      	mov	r1, r6
   16ccc:	f007 fde3 	bl	1e896 <memcpy>
   16cd0:	2301      	movs	r3, #1
   16cd2:	f247 010d 	movw	r1, #28685	; 0x700d
   16cd6:	4628      	mov	r0, r5
   16cd8:	f8ca 3000 	str.w	r3, [sl]
   16cdc:	f7fe fd78 	bl	157d0 <rpc_ip_client_request_send>
   16ce0:	bb10      	cbnz	r0, 16d28 <ip_interface_getaddrinfo+0x17c>
   16ce2:	f04f 33ff 	mov.w	r3, #4294967295
   16ce6:	9303      	str	r3, [sp, #12]
   16ce8:	4649      	mov	r1, r9
   16cea:	4628      	mov	r0, r5
   16cec:	f7fa fb04 	bl	112f8 <bsd_os_timedwait>
   16cf0:	f8da 3000 	ldr.w	r3, [sl]
   16cf4:	2b01      	cmp	r3, #1
   16cf6:	d0f7      	beq.n	16ce8 <ip_interface_getaddrinfo+0x13c>
   16cf8:	4b28      	ldr	r3, [pc, #160]	; (16d9c <ip_interface_getaddrinfo+0x1f0>)
   16cfa:	6818      	ldr	r0, [r3, #0]
   16cfc:	bb40      	cbnz	r0, 16d50 <ip_interface_getaddrinfo+0x1a4>
   16cfe:	4b26      	ldr	r3, [pc, #152]	; (16d98 <ip_interface_getaddrinfo+0x1ec>)
   16d00:	9a01      	ldr	r2, [sp, #4]
   16d02:	681b      	ldr	r3, [r3, #0]
   16d04:	6013      	str	r3, [r2, #0]
   16d06:	e7c1      	b.n	16c8c <ip_interface_getaddrinfo+0xe0>
   16d08:	46b3      	mov	fp, r6
   16d0a:	e786      	b.n	16c1a <ip_interface_getaddrinfo+0x6e>
   16d0c:	9d03      	ldr	r5, [sp, #12]
   16d0e:	2d00      	cmp	r5, #0
   16d10:	d1aa      	bne.n	16c68 <ip_interface_getaddrinfo+0xbc>
   16d12:	200c      	movs	r0, #12
   16d14:	2300      	movs	r3, #0
   16d16:	f8ca 3000 	str.w	r3, [sl]
   16d1a:	b005      	add	sp, #20
   16d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d20:	2016      	movs	r0, #22
   16d22:	b005      	add	sp, #20
   16d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d28:	2023      	movs	r0, #35	; 0x23
   16d2a:	e7f3      	b.n	16d14 <ip_interface_getaddrinfo+0x168>
   16d2c:	f240 2002 	movw	r0, #514	; 0x202
   16d30:	68d1      	ldr	r1, [r2, #12]
   16d32:	4281      	cmp	r1, r0
   16d34:	f47f af7b 	bne.w	16c2e <ip_interface_getaddrinfo+0x82>
   16d38:	6991      	ldr	r1, [r2, #24]
   16d3a:	2900      	cmp	r1, #0
   16d3c:	f43f af77 	beq.w	16c2e <ip_interface_getaddrinfo+0x82>
   16d40:	6860      	ldr	r0, [r4, #4]
   16d42:	f002 fc0b 	bl	1955c <pdn_interface_pdn_id_get>
   16d46:	1c43      	adds	r3, r0, #1
   16d48:	f43f af71 	beq.w	16c2e <ip_interface_getaddrinfo+0x82>
   16d4c:	4602      	mov	r2, r0
   16d4e:	e770      	b.n	16c32 <ip_interface_getaddrinfo+0x86>
   16d50:	4b12      	ldr	r3, [pc, #72]	; (16d9c <ip_interface_getaddrinfo+0x1f0>)
   16d52:	6818      	ldr	r0, [r3, #0]
   16d54:	2800      	cmp	r0, #0
   16d56:	d099      	beq.n	16c8c <ip_interface_getaddrinfo+0xe0>
   16d58:	e7dc      	b.n	16d14 <ip_interface_getaddrinfo+0x168>
   16d5a:	4621      	mov	r1, r4
   16d5c:	2210      	movs	r2, #16
   16d5e:	f105 0014 	add.w	r0, r5, #20
   16d62:	f007 fdc3 	bl	1e8ec <memset>
   16d66:	e7a9      	b.n	16cbc <ip_interface_getaddrinfo+0x110>
   16d68:	202f      	movs	r0, #47	; 0x2f
   16d6a:	f7fa fb7d 	bl	11468 <bsd_os_errno_set>
   16d6e:	68aa      	ldr	r2, [r5, #8]
   16d70:	3210      	adds	r2, #16
   16d72:	60aa      	str	r2, [r5, #8]
   16d74:	b916      	cbnz	r6, 16d7c <ip_interface_getaddrinfo+0x1d0>
   16d76:	f04f 30ff 	mov.w	r0, #4294967295
   16d7a:	e7cb      	b.n	16d14 <ip_interface_getaddrinfo+0x168>
   16d7c:	6828      	ldr	r0, [r5, #0]
   16d7e:	2800      	cmp	r0, #0
   16d80:	d0f9      	beq.n	16d76 <ip_interface_getaddrinfo+0x1ca>
   16d82:	465a      	mov	r2, fp
   16d84:	4631      	mov	r1, r6
   16d86:	f007 fd86 	bl	1e896 <memcpy>
   16d8a:	e7f4      	b.n	16d76 <ip_interface_getaddrinfo+0x1ca>
   16d8c:	200236c0 	.word	0x200236c0
   16d90:	200219d4 	.word	0x200219d4
   16d94:	20020c5c 	.word	0x20020c5c
   16d98:	20020c68 	.word	0x20020c68
   16d9c:	20020c60 	.word	0x20020c60
   16da0:	20020c58 	.word	0x20020c58
   16da4:	20020c64 	.word	0x20020c64

00016da8 <ip_interface_freeaddrinfo>:
   16da8:	b538      	push	{r3, r4, r5, lr}
   16daa:	4d0b      	ldr	r5, [pc, #44]	; (16dd8 <ip_interface_freeaddrinfo+0x30>)
   16dac:	682b      	ldr	r3, [r5, #0]
   16dae:	2b02      	cmp	r3, #2
   16db0:	d000      	beq.n	16db4 <ip_interface_freeaddrinfo+0xc>
   16db2:	bd38      	pop	{r3, r4, r5, pc}
   16db4:	b150      	cbz	r0, 16dcc <ip_interface_freeaddrinfo+0x24>
   16db6:	4604      	mov	r4, r0
   16db8:	6940      	ldr	r0, [r0, #20]
   16dba:	f004 f919 	bl	1aff0 <nrf_free>
   16dbe:	69a0      	ldr	r0, [r4, #24]
   16dc0:	b108      	cbz	r0, 16dc6 <ip_interface_freeaddrinfo+0x1e>
   16dc2:	f004 f915 	bl	1aff0 <nrf_free>
   16dc6:	4620      	mov	r0, r4
   16dc8:	f004 f912 	bl	1aff0 <nrf_free>
   16dcc:	2300      	movs	r3, #0
   16dce:	4a03      	ldr	r2, [pc, #12]	; (16ddc <ip_interface_freeaddrinfo+0x34>)
   16dd0:	602b      	str	r3, [r5, #0]
   16dd2:	6013      	str	r3, [r2, #0]
   16dd4:	bd38      	pop	{r3, r4, r5, pc}
   16dd6:	bf00      	nop
   16dd8:	20020c64 	.word	0x20020c64
   16ddc:	20020c60 	.word	0x20020c60

00016de0 <rpc_ip_event_handler>:
   16de0:	f248 030d 	movw	r3, #32781	; 0x800d
   16de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16de8:	4299      	cmp	r1, r3
   16dea:	b089      	sub	sp, #36	; 0x24
   16dec:	4604      	mov	r4, r0
   16dee:	d05c      	beq.n	16eaa <rpc_ip_event_handler+0xca>
   16df0:	f248 030f 	movw	r3, #32783	; 0x800f
   16df4:	4299      	cmp	r1, r3
   16df6:	460d      	mov	r5, r1
   16df8:	d045      	beq.n	16e86 <rpc_ip_event_handler+0xa6>
   16dfa:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   16dfe:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   16e02:	68c0      	ldr	r0, [r0, #12]
   16e04:	d075      	beq.n	16ef2 <rpc_ip_event_handler+0x112>
   16e06:	0c06      	lsrs	r6, r0, #16
   16e08:	4630      	mov	r0, r6
   16e0a:	f004 fdef 	bl	1b9ec <interface_socket_from_handle_get>
   16e0e:	4607      	mov	r7, r0
   16e10:	2800      	cmp	r0, #0
   16e12:	d059      	beq.n	16ec8 <rpc_ip_event_handler+0xe8>
   16e14:	4601      	mov	r1, r0
   16e16:	462b      	mov	r3, r5
   16e18:	4622      	mov	r2, r4
   16e1a:	4630      	mov	r0, r6
   16e1c:	f7fe fc36 	bl	1568c <tls_rpc_ip_event_handler>
   16e20:	2800      	cmp	r0, #0
   16e22:	d04d      	beq.n	16ec0 <rpc_ip_event_handler+0xe0>
   16e24:	f248 0307 	movw	r3, #32775	; 0x8007
   16e28:	429d      	cmp	r5, r3
   16e2a:	d866      	bhi.n	16efa <rpc_ip_event_handler+0x11a>
   16e2c:	f248 0306 	movw	r3, #32774	; 0x8006
   16e30:	429d      	cmp	r5, r3
   16e32:	f080 81e7 	bcs.w	17204 <_flash_used+0x220>
   16e36:	f248 0303 	movw	r3, #32771	; 0x8003
   16e3a:	429d      	cmp	r5, r3
   16e3c:	f000 81c5 	beq.w	171ca <_flash_used+0x1e6>
   16e40:	f200 811b 	bhi.w	1707a <_flash_used+0x96>
   16e44:	f248 0301 	movw	r3, #32769	; 0x8001
   16e48:	429d      	cmp	r5, r3
   16e4a:	f000 8154 	beq.w	170f6 <_flash_used+0x112>
   16e4e:	f248 0302 	movw	r3, #32770	; 0x8002
   16e52:	429d      	cmp	r5, r3
   16e54:	d138      	bne.n	16ec8 <rpc_ip_event_handler+0xe8>
   16e56:	683b      	ldr	r3, [r7, #0]
   16e58:	0098      	lsls	r0, r3, #2
   16e5a:	d531      	bpl.n	16ec0 <rpc_ip_event_handler+0xe0>
   16e5c:	683b      	ldr	r3, [r7, #0]
   16e5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   16e62:	603b      	str	r3, [r7, #0]
   16e64:	6963      	ldr	r3, [r4, #20]
   16e66:	2b00      	cmp	r3, #0
   16e68:	f000 81ea 	beq.w	17240 <_flash_used+0x25c>
   16e6c:	2b10      	cmp	r3, #16
   16e6e:	bf8e      	itee	hi
   16e70:	232d      	movhi	r3, #45	; 0x2d
   16e72:	4ab9      	ldrls	r2, [pc, #740]	; (17158 <_flash_used+0x174>)
   16e74:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   16e78:	607b      	str	r3, [r7, #4]
   16e7a:	683b      	ldr	r3, [r7, #0]
   16e7c:	2000      	movs	r0, #0
   16e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   16e82:	603b      	str	r3, [r7, #0]
   16e84:	e00e      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   16e86:	6943      	ldr	r3, [r0, #20]
   16e88:	2001      	movs	r0, #1
   16e8a:	2b10      	cmp	r3, #16
   16e8c:	49b3      	ldr	r1, [pc, #716]	; (1715c <_flash_used+0x178>)
   16e8e:	bf88      	it	hi
   16e90:	222d      	movhi	r2, #45	; 0x2d
   16e92:	7008      	strb	r0, [r1, #0]
   16e94:	f04f 0000 	mov.w	r0, #0
   16e98:	bf9c      	itt	ls
   16e9a:	4aaf      	ldrls	r2, [pc, #700]	; (17158 <_flash_used+0x174>)
   16e9c:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   16ea0:	4baf      	ldr	r3, [pc, #700]	; (17160 <_flash_used+0x17c>)
   16ea2:	601a      	str	r2, [r3, #0]
   16ea4:	b009      	add	sp, #36	; 0x24
   16ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eaa:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 17174 <_flash_used+0x190>
   16eae:	6807      	ldr	r7, [r0, #0]
   16eb0:	f8da 2000 	ldr.w	r2, [sl]
   16eb4:	2a01      	cmp	r2, #1
   16eb6:	d00b      	beq.n	16ed0 <rpc_ip_event_handler+0xf0>
   16eb8:	b117      	cbz	r7, 16ec0 <rpc_ip_event_handler+0xe0>
   16eba:	4638      	mov	r0, r7
   16ebc:	f7fe fca6 	bl	1580c <rpc_ip_client_data_free>
   16ec0:	2000      	movs	r0, #0
   16ec2:	b009      	add	sp, #36	; 0x24
   16ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ec8:	6820      	ldr	r0, [r4, #0]
   16eca:	2800      	cmp	r0, #0
   16ecc:	d1f6      	bne.n	16ebc <rpc_ip_event_handler+0xdc>
   16ece:	e7f7      	b.n	16ec0 <rpc_ip_event_handler+0xe0>
   16ed0:	6942      	ldr	r2, [r0, #20]
   16ed2:	2a00      	cmp	r2, #0
   16ed4:	d045      	beq.n	16f62 <rpc_ip_event_handler+0x182>
   16ed6:	2a10      	cmp	r2, #16
   16ed8:	bf8e      	itee	hi
   16eda:	222d      	movhi	r2, #45	; 0x2d
   16edc:	499e      	ldrls	r1, [pc, #632]	; (17158 <_flash_used+0x174>)
   16ede:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   16ee2:	49a0      	ldr	r1, [pc, #640]	; (17164 <_flash_used+0x180>)
   16ee4:	600a      	str	r2, [r1, #0]
   16ee6:	2202      	movs	r2, #2
   16ee8:	f8ca 2000 	str.w	r2, [sl]
   16eec:	2f00      	cmp	r7, #0
   16eee:	d1e4      	bne.n	16eba <rpc_ip_event_handler+0xda>
   16ef0:	e7e6      	b.n	16ec0 <rpc_ip_event_handler+0xe0>
   16ef2:	f004 fd29 	bl	1b948 <interface_from_internal_id_search>
   16ef6:	4606      	mov	r6, r0
   16ef8:	e786      	b.n	16e08 <rpc_ip_event_handler+0x28>
   16efa:	f248 030c 	movw	r3, #32780	; 0x800c
   16efe:	429d      	cmp	r5, r3
   16f00:	f000 813c 	beq.w	1717c <_flash_used+0x198>
   16f04:	f240 80d5 	bls.w	170b2 <_flash_used+0xce>
   16f08:	f249 0302 	movw	r3, #36866	; 0x9002
   16f0c:	429d      	cmp	r5, r3
   16f0e:	f000 811d 	beq.w	1714c <_flash_used+0x168>
   16f12:	f249 0303 	movw	r3, #36867	; 0x9003
   16f16:	429d      	cmp	r5, r3
   16f18:	f000 80f9 	beq.w	1710e <_flash_used+0x12a>
   16f1c:	f249 0301 	movw	r3, #36865	; 0x9001
   16f20:	429d      	cmp	r5, r3
   16f22:	d1d1      	bne.n	16ec8 <rpc_ip_event_handler+0xe8>
   16f24:	683d      	ldr	r5, [r7, #0]
   16f26:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   16f2a:	f000 8184 	beq.w	17236 <_flash_used+0x252>
   16f2e:	68a3      	ldr	r3, [r4, #8]
   16f30:	2b04      	cmp	r3, #4
   16f32:	f200 81af 	bhi.w	17294 <_flash_used+0x2b0>
   16f36:	2500      	movs	r5, #0
   16f38:	462e      	mov	r6, r5
   16f3a:	6821      	ldr	r1, [r4, #0]
   16f3c:	6862      	ldr	r2, [r4, #4]
   16f3e:	e9cd 6506 	strd	r6, r5, [sp, #24]
   16f42:	e9cd 1204 	strd	r1, r2, [sp, #16]
   16f46:	69f8      	ldr	r0, [r7, #28]
   16f48:	a904      	add	r1, sp, #16
   16f4a:	6803      	ldr	r3, [r0, #0]
   16f4c:	685b      	ldr	r3, [r3, #4]
   16f4e:	4798      	blx	r3
   16f50:	3001      	adds	r0, #1
   16f52:	f000 818e 	beq.w	17272 <_flash_used+0x28e>
   16f56:	683b      	ldr	r3, [r7, #0]
   16f58:	2000      	movs	r0, #0
   16f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   16f5e:	603b      	str	r3, [r7, #0]
   16f60:	e7a0      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   16f62:	6985      	ldr	r5, [r0, #24]
   16f64:	016b      	lsls	r3, r5, #5
   16f66:	4618      	mov	r0, r3
   16f68:	9303      	str	r3, [sp, #12]
   16f6a:	f004 f837 	bl	1afdc <nrf_malloc>
   16f6e:	9002      	str	r0, [sp, #8]
   16f70:	2800      	cmp	r0, #0
   16f72:	d078      	beq.n	17066 <_flash_used+0x82>
   16f74:	00ee      	lsls	r6, r5, #3
   16f76:	1970      	adds	r0, r6, r5
   16f78:	0080      	lsls	r0, r0, #2
   16f7a:	f004 f82f 	bl	1afdc <nrf_malloc>
   16f7e:	2800      	cmp	r0, #0
   16f80:	d073      	beq.n	1706a <_flash_used+0x86>
   16f82:	2d00      	cmp	r5, #0
   16f84:	d074      	beq.n	17070 <_flash_used+0x8c>
   16f86:	3610      	adds	r6, #16
   16f88:	1983      	adds	r3, r0, r6
   16f8a:	9301      	str	r3, [sp, #4]
   16f8c:	9b02      	ldr	r3, [sp, #8]
   16f8e:	2204      	movs	r2, #4
   16f90:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 17178 <_flash_used+0x194>
   16f94:	f100 0810 	add.w	r8, r0, #16
   16f98:	f103 0520 	add.w	r5, r3, #32
   16f9c:	e013      	b.n	16fc6 <rpc_ip_event_handler+0x1e6>
   16f9e:	464a      	mov	r2, r9
   16fa0:	f007 fc79 	bl	1e896 <memcpy>
   16fa4:	2100      	movs	r1, #0
   16fa6:	f855 3c08 	ldr.w	r3, [r5, #-8]
   16faa:	f108 0808 	add.w	r8, r8, #8
   16fae:	eb09 0206 	add.w	r2, r9, r6
   16fb2:	f803 1009 	strb.w	r1, [r3, r9]
   16fb6:	9b01      	ldr	r3, [sp, #4]
   16fb8:	f845 5c04 	str.w	r5, [r5, #-4]
   16fbc:	4598      	cmp	r8, r3
   16fbe:	f105 0520 	add.w	r5, r5, #32
   16fc2:	f000 8090 	beq.w	170e6 <_flash_used+0x102>
   16fc6:	58bb      	ldr	r3, [r7, r2]
   16fc8:	18b9      	adds	r1, r7, r2
   16fca:	f845 3c20 	str.w	r3, [r5, #-32]
   16fce:	684b      	ldr	r3, [r1, #4]
   16fd0:	f8db 0000 	ldr.w	r0, [fp]
   16fd4:	2b02      	cmp	r3, #2
   16fd6:	bf14      	ite	ne
   16fd8:	2602      	movne	r6, #2
   16fda:	260a      	moveq	r6, #10
   16fdc:	4b62      	ldr	r3, [pc, #392]	; (17168 <_flash_used+0x184>)
   16fde:	e945 6007 	strd	r6, r0, [r5, #-28]
   16fe2:	681b      	ldr	r3, [r3, #0]
   16fe4:	f102 0614 	add.w	r6, r2, #20
   16fe8:	f845 3c14 	str.w	r3, [r5, #-20]
   16fec:	8a08      	ldrh	r0, [r1, #16]
   16fee:	f1a8 0310 	sub.w	r3, r8, #16
   16ff2:	f845 0c10 	str.w	r0, [r5, #-16]
   16ff6:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   16ffa:	f845 3c0c 	str.w	r3, [r5, #-12]
   16ffe:	4b5b      	ldr	r3, [pc, #364]	; (1716c <_flash_used+0x188>)
   17000:	2804      	cmp	r0, #4
   17002:	eb07 0106 	add.w	r1, r7, r6
   17006:	881b      	ldrh	r3, [r3, #0]
   17008:	d01e      	beq.n	17048 <_flash_used+0x64>
   1700a:	220a      	movs	r2, #10
   1700c:	f848 2c0c 	str.w	r2, [r8, #-12]
   17010:	f04f 0224 	mov.w	r2, #36	; 0x24
   17014:	f828 3c08 	strh.w	r3, [r8, #-8]
   17018:	f808 2c10 	strb.w	r2, [r8, #-16]
   1701c:	f855 2c10 	ldr.w	r2, [r5, #-16]
   17020:	4640      	mov	r0, r8
   17022:	f007 fc38 	bl	1e896 <memcpy>
   17026:	f855 3c10 	ldr.w	r3, [r5, #-16]
   1702a:	f109 0001 	add.w	r0, r9, #1
   1702e:	441e      	add	r6, r3
   17030:	f003 ffd4 	bl	1afdc <nrf_malloc>
   17034:	19b9      	adds	r1, r7, r6
   17036:	eb09 0206 	add.w	r2, r9, r6
   1703a:	f845 0c08 	str.w	r0, [r5, #-8]
   1703e:	2800      	cmp	r0, #0
   17040:	d1ad      	bne.n	16f9e <rpc_ip_event_handler+0x1be>
   17042:	f108 0808 	add.w	r8, r8, #8
   17046:	e7b6      	b.n	16fb6 <rpc_ip_event_handler+0x1d6>
   17048:	2210      	movs	r2, #16
   1704a:	2002      	movs	r0, #2
   1704c:	f828 3c08 	strh.w	r3, [r8, #-8]
   17050:	f848 0c0c 	str.w	r0, [r8, #-12]
   17054:	f808 2c10 	strb.w	r2, [r8, #-16]
   17058:	f855 2c10 	ldr.w	r2, [r5, #-16]
   1705c:	f1a8 0004 	sub.w	r0, r8, #4
   17060:	f007 fc19 	bl	1e896 <memcpy>
   17064:	e7df      	b.n	17026 <_flash_used+0x42>
   17066:	f003 ffc3 	bl	1aff0 <nrf_free>
   1706a:	210c      	movs	r1, #12
   1706c:	4a3d      	ldr	r2, [pc, #244]	; (17164 <_flash_used+0x180>)
   1706e:	6011      	str	r1, [r2, #0]
   17070:	9b02      	ldr	r3, [sp, #8]
   17072:	4a3f      	ldr	r2, [pc, #252]	; (17170 <_flash_used+0x18c>)
   17074:	6827      	ldr	r7, [r4, #0]
   17076:	6013      	str	r3, [r2, #0]
   17078:	e735      	b.n	16ee6 <rpc_ip_event_handler+0x106>
   1707a:	f248 0304 	movw	r3, #32772	; 0x8004
   1707e:	429d      	cmp	r5, r3
   17080:	f000 808f 	beq.w	171a2 <_flash_used+0x1be>
   17084:	f248 0305 	movw	r3, #32773	; 0x8005
   17088:	429d      	cmp	r5, r3
   1708a:	f47f af1d 	bne.w	16ec8 <rpc_ip_event_handler+0xe8>
   1708e:	683b      	ldr	r3, [r7, #0]
   17090:	b29b      	uxth	r3, r3
   17092:	2b03      	cmp	r3, #3
   17094:	f47f af14 	bne.w	16ec0 <rpc_ip_event_handler+0xe0>
   17098:	6963      	ldr	r3, [r4, #20]
   1709a:	2b00      	cmp	r3, #0
   1709c:	f000 80eb 	beq.w	17276 <_flash_used+0x292>
   170a0:	2b10      	cmp	r3, #16
   170a2:	f200 80bd 	bhi.w	17220 <_flash_used+0x23c>
   170a6:	4a2c      	ldr	r2, [pc, #176]	; (17158 <_flash_used+0x174>)
   170a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170ac:	607b      	str	r3, [r7, #4]
   170ae:	2000      	movs	r0, #0
   170b0:	e6f8      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   170b2:	f248 0308 	movw	r3, #32776	; 0x8008
   170b6:	429d      	cmp	r5, r3
   170b8:	f000 8094 	beq.w	171e4 <_flash_used+0x200>
   170bc:	f248 0309 	movw	r3, #32777	; 0x8009
   170c0:	429d      	cmp	r5, r3
   170c2:	f47f af01 	bne.w	16ec8 <rpc_ip_event_handler+0xe8>
   170c6:	683b      	ldr	r3, [r7, #0]
   170c8:	b29b      	uxth	r3, r3
   170ca:	2b0d      	cmp	r3, #13
   170cc:	f47f aef8 	bne.w	16ec0 <rpc_ip_event_handler+0xe0>
   170d0:	6960      	ldr	r0, [r4, #20]
   170d2:	2800      	cmp	r0, #0
   170d4:	f000 80d7 	beq.w	17286 <_flash_used+0x2a2>
   170d8:	2810      	cmp	r0, #16
   170da:	f200 80a1 	bhi.w	17220 <_flash_used+0x23c>
   170de:	4b1e      	ldr	r3, [pc, #120]	; (17158 <_flash_used+0x174>)
   170e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   170e4:	e7e2      	b.n	170ac <_flash_used+0xc8>
   170e6:	2100      	movs	r1, #0
   170e8:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   170ec:	4403      	add	r3, r0
   170ee:	f843 1c04 	str.w	r1, [r3, #-4]
   170f2:	4603      	mov	r3, r0
   170f4:	e7bd      	b.n	17072 <_flash_used+0x8e>
   170f6:	683b      	ldr	r3, [r7, #0]
   170f8:	2b01      	cmp	r3, #1
   170fa:	f47f aee1 	bne.w	16ec0 <rpc_ip_event_handler+0xe0>
   170fe:	6960      	ldr	r0, [r4, #20]
   17100:	2800      	cmp	r0, #0
   17102:	d1e9      	bne.n	170d8 <_flash_used+0xf4>
   17104:	2302      	movs	r3, #2
   17106:	603b      	str	r3, [r7, #0]
   17108:	69a3      	ldr	r3, [r4, #24]
   1710a:	61bb      	str	r3, [r7, #24]
   1710c:	e6ca      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   1710e:	683b      	ldr	r3, [r7, #0]
   17110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   17114:	603b      	str	r3, [r7, #0]
   17116:	683b      	ldr	r3, [r7, #0]
   17118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1711c:	603b      	str	r3, [r7, #0]
   1711e:	683b      	ldr	r3, [r7, #0]
   17120:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   17124:	603b      	str	r3, [r7, #0]
   17126:	683b      	ldr	r3, [r7, #0]
   17128:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1712c:	603b      	str	r3, [r7, #0]
   1712e:	6923      	ldr	r3, [r4, #16]
   17130:	2b6c      	cmp	r3, #108	; 0x6c
   17132:	d077      	beq.n	17224 <_flash_used+0x240>
   17134:	2b10      	cmp	r3, #16
   17136:	bf8c      	ite	hi
   17138:	232d      	movhi	r3, #45	; 0x2d
   1713a:	4a07      	ldrls	r2, [pc, #28]	; (17158 <_flash_used+0x174>)
   1713c:	f04f 0000 	mov.w	r0, #0
   17140:	bf98      	it	ls
   17142:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   17146:	607b      	str	r3, [r7, #4]
   17148:	60bb      	str	r3, [r7, #8]
   1714a:	e6ab      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   1714c:	683b      	ldr	r3, [r7, #0]
   1714e:	b29b      	uxth	r3, r3
   17150:	2b07      	cmp	r3, #7
   17152:	f47f aeb5 	bne.w	16ec0 <rpc_ip_event_handler+0xe0>
   17156:	e6fe      	b.n	16f56 <rpc_ip_event_handler+0x176>
   17158:	00021158 	.word	0x00021158
   1715c:	200236c1 	.word	0x200236c1
   17160:	20020c90 	.word	0x20020c90
   17164:	20020c60 	.word	0x20020c60
   17168:	20020c58 	.word	0x20020c58
   1716c:	200219d4 	.word	0x200219d4
   17170:	20020c68 	.word	0x20020c68
   17174:	20020c64 	.word	0x20020c64
   17178:	20020c5c 	.word	0x20020c5c
   1717c:	683b      	ldr	r3, [r7, #0]
   1717e:	b29b      	uxth	r3, r3
   17180:	2b08      	cmp	r3, #8
   17182:	f47f ae9d 	bne.w	16ec0 <rpc_ip_event_handler+0xe0>
   17186:	6963      	ldr	r3, [r4, #20]
   17188:	2b00      	cmp	r3, #0
   1718a:	d189      	bne.n	170a0 <_flash_used+0xbc>
   1718c:	4b5e      	ldr	r3, [pc, #376]	; (17308 <_flash_used+0x324>)
   1718e:	2001      	movs	r0, #1
   17190:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   17194:	683b      	ldr	r3, [r7, #0]
   17196:	0c1b      	lsrs	r3, r3, #16
   17198:	041b      	lsls	r3, r3, #16
   1719a:	f043 0309 	orr.w	r3, r3, #9
   1719e:	603b      	str	r3, [r7, #0]
   171a0:	e680      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   171a2:	683b      	ldr	r3, [r7, #0]
   171a4:	01db      	lsls	r3, r3, #7
   171a6:	f57f ae8b 	bpl.w	16ec0 <rpc_ip_event_handler+0xe0>
   171aa:	6963      	ldr	r3, [r4, #20]
   171ac:	2b00      	cmp	r3, #0
   171ae:	f47f af77 	bne.w	170a0 <_flash_used+0xbc>
   171b2:	6823      	ldr	r3, [r4, #0]
   171b4:	2b00      	cmp	r3, #0
   171b6:	d071      	beq.n	1729c <_flash_used+0x2b8>
   171b8:	2001      	movs	r0, #1
   171ba:	4b53      	ldr	r3, [pc, #332]	; (17308 <_flash_used+0x324>)
   171bc:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   171c0:	683b      	ldr	r3, [r7, #0]
   171c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   171c6:	603b      	str	r3, [r7, #0]
   171c8:	e66c      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   171ca:	683b      	ldr	r3, [r7, #0]
   171cc:	025a      	lsls	r2, r3, #9
   171ce:	f57f ae77 	bpl.w	16ec0 <rpc_ip_event_handler+0xe0>
   171d2:	6960      	ldr	r0, [r4, #20]
   171d4:	2800      	cmp	r0, #0
   171d6:	f47f af7f 	bne.w	170d8 <_flash_used+0xf4>
   171da:	683b      	ldr	r3, [r7, #0]
   171dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   171e0:	603b      	str	r3, [r7, #0]
   171e2:	e65f      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   171e4:	683b      	ldr	r3, [r7, #0]
   171e6:	b29b      	uxth	r3, r3
   171e8:	2b06      	cmp	r3, #6
   171ea:	f47f ae69 	bne.w	16ec0 <rpc_ip_event_handler+0xe0>
   171ee:	6960      	ldr	r0, [r4, #20]
   171f0:	2800      	cmp	r0, #0
   171f2:	f47f af71 	bne.w	170d8 <_flash_used+0xf4>
   171f6:	683b      	ldr	r3, [r7, #0]
   171f8:	0c1b      	lsrs	r3, r3, #16
   171fa:	041b      	lsls	r3, r3, #16
   171fc:	f043 0307 	orr.w	r3, r3, #7
   17200:	603b      	str	r3, [r7, #0]
   17202:	e64f      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   17204:	683b      	ldr	r3, [r7, #0]
   17206:	0299      	lsls	r1, r3, #10
   17208:	f57f ae5a 	bpl.w	16ec0 <rpc_ip_event_handler+0xe0>
   1720c:	6963      	ldr	r3, [r4, #20]
   1720e:	b33b      	cbz	r3, 17260 <_flash_used+0x27c>
   17210:	2b6b      	cmp	r3, #107	; 0x6b
   17212:	f47f ae2b 	bne.w	16e6c <rpc_ip_event_handler+0x8c>
   17216:	693b      	ldr	r3, [r7, #16]
   17218:	2b01      	cmp	r3, #1
   1721a:	d041      	beq.n	172a0 <_flash_used+0x2bc>
   1721c:	230c      	movs	r3, #12
   1721e:	e62b      	b.n	16e78 <rpc_ip_event_handler+0x98>
   17220:	232d      	movs	r3, #45	; 0x2d
   17222:	e743      	b.n	170ac <_flash_used+0xc8>
   17224:	2239      	movs	r2, #57	; 0x39
   17226:	683b      	ldr	r3, [r7, #0]
   17228:	2000      	movs	r0, #0
   1722a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1722e:	603b      	str	r3, [r7, #0]
   17230:	607a      	str	r2, [r7, #4]
   17232:	60ba      	str	r2, [r7, #8]
   17234:	e636      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   17236:	6820      	ldr	r0, [r4, #0]
   17238:	f7fe fae8 	bl	1580c <rpc_ip_client_data_free>
   1723c:	4628      	mov	r0, r5
   1723e:	e631      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   17240:	683b      	ldr	r3, [r7, #0]
   17242:	2000      	movs	r0, #0
   17244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17248:	603b      	str	r3, [r7, #0]
   1724a:	683b      	ldr	r3, [r7, #0]
   1724c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17250:	603b      	str	r3, [r7, #0]
   17252:	683b      	ldr	r3, [r7, #0]
   17254:	0c1b      	lsrs	r3, r3, #16
   17256:	041b      	lsls	r3, r3, #16
   17258:	f043 0305 	orr.w	r3, r3, #5
   1725c:	603b      	str	r3, [r7, #0]
   1725e:	e621      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   17260:	683b      	ldr	r3, [r7, #0]
   17262:	4a29      	ldr	r2, [pc, #164]	; (17308 <_flash_used+0x324>)
   17264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17268:	603b      	str	r3, [r7, #0]
   1726a:	2001      	movs	r0, #1
   1726c:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   17270:	e618      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   17272:	2002      	movs	r0, #2
   17274:	e616      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   17276:	683b      	ldr	r3, [r7, #0]
   17278:	2000      	movs	r0, #0
   1727a:	0c1b      	lsrs	r3, r3, #16
   1727c:	041b      	lsls	r3, r3, #16
   1727e:	f043 0304 	orr.w	r3, r3, #4
   17282:	603b      	str	r3, [r7, #0]
   17284:	e60e      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   17286:	683b      	ldr	r3, [r7, #0]
   17288:	0c1b      	lsrs	r3, r3, #16
   1728a:	041b      	lsls	r3, r3, #16
   1728c:	f043 030e 	orr.w	r3, r3, #14
   17290:	603b      	str	r3, [r7, #0]
   17292:	e607      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   17294:	8a65      	ldrh	r5, [r4, #18]
   17296:	b95d      	cbnz	r5, 172b0 <_flash_used+0x2cc>
   17298:	462e      	mov	r6, r5
   1729a:	e64e      	b.n	16f3a <rpc_ip_event_handler+0x15a>
   1729c:	2000      	movs	r0, #0
   1729e:	e78f      	b.n	171c0 <_flash_used+0x1dc>
   172a0:	220c      	movs	r2, #12
   172a2:	683b      	ldr	r3, [r7, #0]
   172a4:	2000      	movs	r0, #0
   172a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   172aa:	603b      	str	r3, [r7, #0]
   172ac:	607a      	str	r2, [r7, #4]
   172ae:	e5f9      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   172b0:	2024      	movs	r0, #36	; 0x24
   172b2:	f003 fe93 	bl	1afdc <nrf_malloc>
   172b6:	4606      	mov	r6, r0
   172b8:	2800      	cmp	r0, #0
   172ba:	d0da      	beq.n	17272 <_flash_used+0x28e>
   172bc:	8a62      	ldrh	r2, [r4, #18]
   172be:	2a10      	cmp	r2, #16
   172c0:	d009      	beq.n	172d6 <_flash_used+0x2f2>
   172c2:	2a04      	cmp	r2, #4
   172c4:	d013      	beq.n	172ee <_flash_used+0x30a>
   172c6:	6820      	ldr	r0, [r4, #0]
   172c8:	f7fe faa0 	bl	1580c <rpc_ip_client_data_free>
   172cc:	4630      	mov	r0, r6
   172ce:	f003 fe8f 	bl	1aff0 <nrf_free>
   172d2:	2000      	movs	r0, #0
   172d4:	e5e6      	b.n	16ea4 <rpc_ip_event_handler+0xc4>
   172d6:	230a      	movs	r3, #10
   172d8:	2524      	movs	r5, #36	; 0x24
   172da:	6043      	str	r3, [r0, #4]
   172dc:	7005      	strb	r5, [r0, #0]
   172de:	8a23      	ldrh	r3, [r4, #16]
   172e0:	f104 0114 	add.w	r1, r4, #20
   172e4:	8103      	strh	r3, [r0, #8]
   172e6:	3010      	adds	r0, #16
   172e8:	f007 fad5 	bl	1e896 <memcpy>
   172ec:	e625      	b.n	16f3a <rpc_ip_event_handler+0x15a>
   172ee:	2302      	movs	r3, #2
   172f0:	2510      	movs	r5, #16
   172f2:	6043      	str	r3, [r0, #4]
   172f4:	7005      	strb	r5, [r0, #0]
   172f6:	8a23      	ldrh	r3, [r4, #16]
   172f8:	f104 0114 	add.w	r1, r4, #20
   172fc:	8103      	strh	r3, [r0, #8]
   172fe:	300c      	adds	r0, #12
   17300:	f007 fac9 	bl	1e896 <memcpy>
   17304:	e619      	b.n	16f3a <rpc_ip_event_handler+0x15a>
   17306:	bf00      	nop
   17308:	20020c6c 	.word	0x20020c6c

0001730c <rpc_handle_ctrl_message>:
   1730c:	2902      	cmp	r1, #2
   1730e:	b510      	push	{r4, lr}
   17310:	4604      	mov	r4, r0
   17312:	d00c      	beq.n	1732e <rpc_handle_ctrl_message+0x22>
   17314:	2904      	cmp	r1, #4
   17316:	d008      	beq.n	1732a <rpc_handle_ctrl_message+0x1e>
   17318:	2901      	cmp	r1, #1
   1731a:	d006      	beq.n	1732a <rpc_handle_ctrl_message+0x1e>
   1731c:	6880      	ldr	r0, [r0, #8]
   1731e:	b108      	cbz	r0, 17324 <rpc_handle_ctrl_message+0x18>
   17320:	f7fc fd32 	bl	13d88 <rpc_transport_data_free>
   17324:	4620      	mov	r0, r4
   17326:	f7fc fd2d 	bl	13d84 <rpc_transport_rpc_free>
   1732a:	2000      	movs	r0, #0
   1732c:	bd10      	pop	{r4, pc}
   1732e:	6880      	ldr	r0, [r0, #8]
   17330:	2800      	cmp	r0, #0
   17332:	d0fa      	beq.n	1732a <rpc_handle_ctrl_message+0x1e>
   17334:	f7fc fd28 	bl	13d88 <rpc_transport_data_free>
   17338:	2000      	movs	r0, #0
   1733a:	bd10      	pop	{r4, pc}

0001733c <rpc_handle_data_message>:
   1733c:	4b23      	ldr	r3, [pc, #140]	; (173cc <rpc_handle_data_message+0x90>)
   1733e:	6802      	ldr	r2, [r0, #0]
   17340:	8819      	ldrh	r1, [r3, #0]
   17342:	b292      	uxth	r2, r2
   17344:	4291      	cmp	r1, r2
   17346:	d027      	beq.n	17398 <rpc_handle_data_message+0x5c>
   17348:	8a19      	ldrh	r1, [r3, #16]
   1734a:	4291      	cmp	r1, r2
   1734c:	d02a      	beq.n	173a4 <rpc_handle_data_message+0x68>
   1734e:	8c19      	ldrh	r1, [r3, #32]
   17350:	4291      	cmp	r1, r2
   17352:	d02b      	beq.n	173ac <rpc_handle_data_message+0x70>
   17354:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   17356:	4291      	cmp	r1, r2
   17358:	d02a      	beq.n	173b0 <rpc_handle_data_message+0x74>
   1735a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   1735e:	4291      	cmp	r1, r2
   17360:	d028      	beq.n	173b4 <rpc_handle_data_message+0x78>
   17362:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   17366:	4291      	cmp	r1, r2
   17368:	d026      	beq.n	173b8 <rpc_handle_data_message+0x7c>
   1736a:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   1736e:	4291      	cmp	r1, r2
   17370:	d026      	beq.n	173c0 <rpc_handle_data_message+0x84>
   17372:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   17376:	4291      	cmp	r1, r2
   17378:	d024      	beq.n	173c4 <rpc_handle_data_message+0x88>
   1737a:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   1737e:	4291      	cmp	r1, r2
   17380:	d01c      	beq.n	173bc <rpc_handle_data_message+0x80>
   17382:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   17386:	4291      	cmp	r1, r2
   17388:	d01e      	beq.n	173c8 <rpc_handle_data_message+0x8c>
   1738a:	6880      	ldr	r0, [r0, #8]
   1738c:	b160      	cbz	r0, 173a8 <rpc_handle_data_message+0x6c>
   1738e:	b510      	push	{r4, lr}
   17390:	f7fc fcfa 	bl	13d88 <rpc_transport_data_free>
   17394:	2000      	movs	r0, #0
   17396:	bd10      	pop	{r4, pc}
   17398:	2200      	movs	r2, #0
   1739a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1739e:	685a      	ldr	r2, [r3, #4]
   173a0:	68d9      	ldr	r1, [r3, #12]
   173a2:	4710      	bx	r2
   173a4:	2201      	movs	r2, #1
   173a6:	e7f8      	b.n	1739a <rpc_handle_data_message+0x5e>
   173a8:	2000      	movs	r0, #0
   173aa:	4770      	bx	lr
   173ac:	2202      	movs	r2, #2
   173ae:	e7f4      	b.n	1739a <rpc_handle_data_message+0x5e>
   173b0:	2203      	movs	r2, #3
   173b2:	e7f2      	b.n	1739a <rpc_handle_data_message+0x5e>
   173b4:	2204      	movs	r2, #4
   173b6:	e7f0      	b.n	1739a <rpc_handle_data_message+0x5e>
   173b8:	2205      	movs	r2, #5
   173ba:	e7ee      	b.n	1739a <rpc_handle_data_message+0x5e>
   173bc:	2208      	movs	r2, #8
   173be:	e7ec      	b.n	1739a <rpc_handle_data_message+0x5e>
   173c0:	2206      	movs	r2, #6
   173c2:	e7ea      	b.n	1739a <rpc_handle_data_message+0x5e>
   173c4:	2207      	movs	r2, #7
   173c6:	e7e8      	b.n	1739a <rpc_handle_data_message+0x5e>
   173c8:	2209      	movs	r2, #9
   173ca:	e7e6      	b.n	1739a <rpc_handle_data_message+0x5e>
   173cc:	20020c94 	.word	0x20020c94

000173d0 <rpc_framework_init>:
   173d0:	b508      	push	{r3, lr}
   173d2:	22a0      	movs	r2, #160	; 0xa0
   173d4:	2100      	movs	r1, #0
   173d6:	4802      	ldr	r0, [pc, #8]	; (173e0 <rpc_framework_init+0x10>)
   173d8:	f007 fa88 	bl	1e8ec <memset>
   173dc:	2000      	movs	r0, #0
   173de:	bd08      	pop	{r3, pc}
   173e0:	20020c94 	.word	0x20020c94

000173e4 <rpc_client_register>:
   173e4:	8803      	ldrh	r3, [r0, #0]
   173e6:	2b00      	cmp	r3, #0
   173e8:	d045      	beq.n	17476 <rpc_client_register+0x92>
   173ea:	6842      	ldr	r2, [r0, #4]
   173ec:	4601      	mov	r1, r0
   173ee:	2a00      	cmp	r2, #0
   173f0:	d050      	beq.n	17494 <rpc_client_register+0xb0>
   173f2:	4a30      	ldr	r2, [pc, #192]	; (174b4 <rpc_client_register+0xd0>)
   173f4:	8810      	ldrh	r0, [r2, #0]
   173f6:	4283      	cmp	r3, r0
   173f8:	d03d      	beq.n	17476 <rpc_client_register+0x92>
   173fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   173fe:	8a14      	ldrh	r4, [r2, #16]
   17400:	42a3      	cmp	r3, r4
   17402:	d035      	beq.n	17470 <rpc_client_register+0x8c>
   17404:	8c15      	ldrh	r5, [r2, #32]
   17406:	42ab      	cmp	r3, r5
   17408:	d032      	beq.n	17470 <rpc_client_register+0x8c>
   1740a:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   1740c:	42b3      	cmp	r3, r6
   1740e:	d02f      	beq.n	17470 <rpc_client_register+0x8c>
   17410:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   17414:	42bb      	cmp	r3, r7
   17416:	d02b      	beq.n	17470 <rpc_client_register+0x8c>
   17418:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   1741c:	4563      	cmp	r3, ip
   1741e:	d027      	beq.n	17470 <rpc_client_register+0x8c>
   17420:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   17424:	4573      	cmp	r3, lr
   17426:	d023      	beq.n	17470 <rpc_client_register+0x8c>
   17428:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   1742c:	4543      	cmp	r3, r8
   1742e:	d01f      	beq.n	17470 <rpc_client_register+0x8c>
   17430:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   17434:	454b      	cmp	r3, r9
   17436:	d01b      	beq.n	17470 <rpc_client_register+0x8c>
   17438:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   1743c:	4553      	cmp	r3, sl
   1743e:	d017      	beq.n	17470 <rpc_client_register+0x8c>
   17440:	b1e0      	cbz	r0, 1747c <rpc_client_register+0x98>
   17442:	b35c      	cbz	r4, 1749c <rpc_client_register+0xb8>
   17444:	b365      	cbz	r5, 174a0 <rpc_client_register+0xbc>
   17446:	b36e      	cbz	r6, 174a4 <rpc_client_register+0xc0>
   17448:	b377      	cbz	r7, 174a8 <rpc_client_register+0xc4>
   1744a:	f1bc 0f00 	cmp.w	ip, #0
   1744e:	d02d      	beq.n	174ac <rpc_client_register+0xc8>
   17450:	f1be 0f00 	cmp.w	lr, #0
   17454:	d020      	beq.n	17498 <rpc_client_register+0xb4>
   17456:	f1b8 0f00 	cmp.w	r8, #0
   1745a:	d029      	beq.n	174b0 <rpc_client_register+0xcc>
   1745c:	f1b9 0f00 	cmp.w	r9, #0
   17460:	d00b      	beq.n	1747a <rpc_client_register+0x96>
   17462:	2009      	movs	r0, #9
   17464:	f1ba 0f00 	cmp.w	sl, #0
   17468:	d008      	beq.n	1747c <rpc_client_register+0x98>
   1746a:	2004      	movs	r0, #4
   1746c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17470:	2007      	movs	r0, #7
   17472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17476:	2007      	movs	r0, #7
   17478:	4770      	bx	lr
   1747a:	2008      	movs	r0, #8
   1747c:	0100      	lsls	r0, r0, #4
   1747e:	5213      	strh	r3, [r2, r0]
   17480:	684b      	ldr	r3, [r1, #4]
   17482:	4402      	add	r2, r0
   17484:	6053      	str	r3, [r2, #4]
   17486:	688b      	ldr	r3, [r1, #8]
   17488:	2000      	movs	r0, #0
   1748a:	6093      	str	r3, [r2, #8]
   1748c:	68cb      	ldr	r3, [r1, #12]
   1748e:	60d3      	str	r3, [r2, #12]
   17490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17494:	200e      	movs	r0, #14
   17496:	4770      	bx	lr
   17498:	2006      	movs	r0, #6
   1749a:	e7ef      	b.n	1747c <rpc_client_register+0x98>
   1749c:	2001      	movs	r0, #1
   1749e:	e7ed      	b.n	1747c <rpc_client_register+0x98>
   174a0:	2002      	movs	r0, #2
   174a2:	e7eb      	b.n	1747c <rpc_client_register+0x98>
   174a4:	2003      	movs	r0, #3
   174a6:	e7e9      	b.n	1747c <rpc_client_register+0x98>
   174a8:	2004      	movs	r0, #4
   174aa:	e7e7      	b.n	1747c <rpc_client_register+0x98>
   174ac:	2005      	movs	r0, #5
   174ae:	e7e5      	b.n	1747c <rpc_client_register+0x98>
   174b0:	2007      	movs	r0, #7
   174b2:	e7e3      	b.n	1747c <rpc_client_register+0x98>
   174b4:	20020c94 	.word	0x20020c94

000174b8 <rpc_message_send>:
   174b8:	b150      	cbz	r0, 174d0 <rpc_message_send+0x18>
   174ba:	b159      	cbz	r1, 174d4 <rpc_message_send+0x1c>
   174bc:	684b      	ldr	r3, [r1, #4]
   174be:	8008      	strh	r0, [r1, #0]
   174c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   174c4:	f043 0302 	orr.w	r3, r3, #2
   174c8:	604b      	str	r3, [r1, #4]
   174ca:	4608      	mov	r0, r1
   174cc:	f7fc bc54 	b.w	13d78 <rpc_transport_send>
   174d0:	2007      	movs	r0, #7
   174d2:	4770      	bx	lr
   174d4:	200e      	movs	r0, #14
   174d6:	4770      	bx	lr

000174d8 <rpc_message_alloc>:
   174d8:	b342      	cbz	r2, 1752c <rpc_message_alloc+0x54>
   174da:	b328      	cbz	r0, 17528 <rpc_message_alloc+0x50>
   174dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   174de:	2300      	movs	r3, #0
   174e0:	4616      	mov	r6, r2
   174e2:	460c      	mov	r4, r1
   174e4:	4605      	mov	r5, r0
   174e6:	6013      	str	r3, [r2, #0]
   174e8:	b171      	cbz	r1, 17508 <rpc_message_alloc+0x30>
   174ea:	4608      	mov	r0, r1
   174ec:	f7fc fc48 	bl	13d80 <rpc_transport_data_alloc>
   174f0:	4607      	mov	r7, r0
   174f2:	b1b8      	cbz	r0, 17524 <rpc_message_alloc+0x4c>
   174f4:	f7fc fc42 	bl	13d7c <rpc_transport_rpc_alloc>
   174f8:	4603      	mov	r3, r0
   174fa:	b180      	cbz	r0, 1751e <rpc_message_alloc+0x46>
   174fc:	2000      	movs	r0, #0
   174fe:	60dc      	str	r4, [r3, #12]
   17500:	609f      	str	r7, [r3, #8]
   17502:	801d      	strh	r5, [r3, #0]
   17504:	6033      	str	r3, [r6, #0]
   17506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17508:	f7fc fc38 	bl	13d7c <rpc_transport_rpc_alloc>
   1750c:	4603      	mov	r3, r0
   1750e:	b148      	cbz	r0, 17524 <rpc_message_alloc+0x4c>
   17510:	4627      	mov	r7, r4
   17512:	60dc      	str	r4, [r3, #12]
   17514:	609f      	str	r7, [r3, #8]
   17516:	801d      	strh	r5, [r3, #0]
   17518:	2000      	movs	r0, #0
   1751a:	6033      	str	r3, [r6, #0]
   1751c:	e7f3      	b.n	17506 <rpc_message_alloc+0x2e>
   1751e:	4638      	mov	r0, r7
   17520:	f7fc fc32 	bl	13d88 <rpc_transport_data_free>
   17524:	2004      	movs	r0, #4
   17526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17528:	2007      	movs	r0, #7
   1752a:	4770      	bx	lr
   1752c:	200e      	movs	r0, #14
   1752e:	4770      	bx	lr

00017530 <rpc_message_free>:
   17530:	b130      	cbz	r0, 17540 <rpc_message_free+0x10>
   17532:	b139      	cbz	r1, 17544 <rpc_message_free+0x14>
   17534:	b508      	push	{r3, lr}
   17536:	4608      	mov	r0, r1
   17538:	f7fc fc24 	bl	13d84 <rpc_transport_rpc_free>
   1753c:	2000      	movs	r0, #0
   1753e:	bd08      	pop	{r3, pc}
   17540:	2007      	movs	r0, #7
   17542:	4770      	bx	lr
   17544:	200e      	movs	r0, #14
   17546:	4770      	bx	lr

00017548 <rpc_message_data_free>:
   17548:	b130      	cbz	r0, 17558 <rpc_message_data_free+0x10>
   1754a:	b139      	cbz	r1, 1755c <rpc_message_data_free+0x14>
   1754c:	b508      	push	{r3, lr}
   1754e:	4608      	mov	r0, r1
   17550:	f7fc fc1a 	bl	13d88 <rpc_transport_data_free>
   17554:	2000      	movs	r0, #0
   17556:	bd08      	pop	{r3, pc}
   17558:	2007      	movs	r0, #7
   1755a:	4770      	bx	lr
   1755c:	200e      	movs	r0, #14
   1755e:	4770      	bx	lr

00017560 <packet_free_cb>:
   17560:	b510      	push	{r4, lr}
   17562:	4604      	mov	r4, r0
   17564:	b118      	cbz	r0, 1756e <packet_free_cb+0xe>
   17566:	6800      	ldr	r0, [r0, #0]
   17568:	b108      	cbz	r0, 1756e <packet_free_cb+0xe>
   1756a:	f002 ff53 	bl	1a414 <rpc_gnss_client_data_free>
   1756e:	68a0      	ldr	r0, [r4, #8]
   17570:	b118      	cbz	r0, 1757a <packet_free_cb+0x1a>
   17572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17576:	f003 bd3b 	b.w	1aff0 <nrf_free>
   1757a:	bd10      	pop	{r4, pc}

0001757c <rpc_gnss_event_handler>:
   1757c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1757e:	4b64      	ldr	r3, [pc, #400]	; (17710 <rpc_gnss_event_handler+0x194>)
   17580:	4606      	mov	r6, r0
   17582:	6800      	ldr	r0, [r0, #0]
   17584:	881b      	ldrh	r3, [r3, #0]
   17586:	6802      	ldr	r2, [r0, #0]
   17588:	b085      	sub	sp, #20
   1758a:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1758e:	460d      	mov	r5, r1
   17590:	d037      	beq.n	17602 <rpc_gnss_event_handler+0x86>
   17592:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   17596:	33ff      	adds	r3, #255	; 0xff
   17598:	b29b      	uxth	r3, r3
   1759a:	2b02      	cmp	r3, #2
   1759c:	d811      	bhi.n	175c2 <rpc_gnss_event_handler+0x46>
   1759e:	4c5d      	ldr	r4, [pc, #372]	; (17714 <rpc_gnss_event_handler+0x198>)
   175a0:	6823      	ldr	r3, [r4, #0]
   175a2:	075a      	lsls	r2, r3, #29
   175a4:	d410      	bmi.n	175c8 <rpc_gnss_event_handler+0x4c>
   175a6:	6823      	ldr	r3, [r4, #0]
   175a8:	079b      	lsls	r3, r3, #30
   175aa:	d503      	bpl.n	175b4 <rpc_gnss_event_handler+0x38>
   175ac:	f244 0303 	movw	r3, #16387	; 0x4003
   175b0:	429d      	cmp	r5, r3
   175b2:	d009      	beq.n	175c8 <rpc_gnss_event_handler+0x4c>
   175b4:	6830      	ldr	r0, [r6, #0]
   175b6:	b120      	cbz	r0, 175c2 <rpc_gnss_event_handler+0x46>
   175b8:	f002 ff2c 	bl	1a414 <rpc_gnss_client_data_free>
   175bc:	2200      	movs	r2, #0
   175be:	4b56      	ldr	r3, [pc, #344]	; (17718 <rpc_gnss_event_handler+0x19c>)
   175c0:	601a      	str	r2, [r3, #0]
   175c2:	2000      	movs	r0, #0
   175c4:	b005      	add	sp, #20
   175c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   175c8:	2002      	movs	r0, #2
   175ca:	f003 fd07 	bl	1afdc <nrf_malloc>
   175ce:	4607      	mov	r7, r0
   175d0:	2800      	cmp	r0, #0
   175d2:	f000 8094 	beq.w	176fe <rpc_gnss_event_handler+0x182>
   175d6:	2302      	movs	r3, #2
   175d8:	8005      	strh	r5, [r0, #0]
   175da:	6831      	ldr	r1, [r6, #0]
   175dc:	6872      	ldr	r2, [r6, #4]
   175de:	484f      	ldr	r0, [pc, #316]	; (1771c <rpc_gnss_event_handler+0x1a0>)
   175e0:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   175e4:	6800      	ldr	r0, [r0, #0]
   175e6:	9303      	str	r3, [sp, #12]
   175e8:	6803      	ldr	r3, [r0, #0]
   175ea:	4669      	mov	r1, sp
   175ec:	685b      	ldr	r3, [r3, #4]
   175ee:	4798      	blx	r3
   175f0:	3001      	adds	r0, #1
   175f2:	d071      	beq.n	176d8 <rpc_gnss_event_handler+0x15c>
   175f4:	2000      	movs	r0, #0
   175f6:	6823      	ldr	r3, [r4, #0]
   175f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   175fc:	6023      	str	r3, [r4, #0]
   175fe:	b005      	add	sp, #20
   17600:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17602:	4c44      	ldr	r4, [pc, #272]	; (17714 <rpc_gnss_event_handler+0x198>)
   17604:	4f44      	ldr	r7, [pc, #272]	; (17718 <rpc_gnss_event_handler+0x19c>)
   17606:	6823      	ldr	r3, [r4, #0]
   17608:	6038      	str	r0, [r7, #0]
   1760a:	01d9      	lsls	r1, r3, #7
   1760c:	d523      	bpl.n	17656 <rpc_gnss_event_handler+0xda>
   1760e:	f242 1302 	movw	r3, #8450	; 0x2102
   17612:	429d      	cmp	r5, r3
   17614:	d11f      	bne.n	17656 <rpc_gnss_event_handler+0xda>
   17616:	6843      	ldr	r3, [r0, #4]
   17618:	b91b      	cbnz	r3, 17622 <rpc_gnss_event_handler+0xa6>
   1761a:	6823      	ldr	r3, [r4, #0]
   1761c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   17620:	6023      	str	r3, [r4, #0]
   17622:	6823      	ldr	r3, [r4, #0]
   17624:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   17628:	6023      	str	r3, [r4, #0]
   1762a:	6823      	ldr	r3, [r4, #0]
   1762c:	025a      	lsls	r2, r3, #9
   1762e:	d430      	bmi.n	17692 <rpc_gnss_event_handler+0x116>
   17630:	f242 0305 	movw	r3, #8197	; 0x2005
   17634:	429d      	cmp	r5, r3
   17636:	d12c      	bne.n	17692 <rpc_gnss_event_handler+0x116>
   17638:	6823      	ldr	r3, [r4, #0]
   1763a:	0299      	lsls	r1, r3, #10
   1763c:	d529      	bpl.n	17692 <rpc_gnss_event_handler+0x116>
   1763e:	6843      	ldr	r3, [r0, #4]
   17640:	2b00      	cmp	r3, #0
   17642:	d157      	bne.n	176f4 <rpc_gnss_event_handler+0x178>
   17644:	6823      	ldr	r3, [r4, #0]
   17646:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1764a:	6023      	str	r3, [r4, #0]
   1764c:	6823      	ldr	r3, [r4, #0]
   1764e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   17652:	6023      	str	r3, [r4, #0]
   17654:	e01d      	b.n	17692 <rpc_gnss_event_handler+0x116>
   17656:	6823      	ldr	r3, [r4, #0]
   17658:	025b      	lsls	r3, r3, #9
   1765a:	d50e      	bpl.n	1767a <rpc_gnss_event_handler+0xfe>
   1765c:	f242 1303 	movw	r3, #8451	; 0x2103
   17660:	429d      	cmp	r5, r3
   17662:	d10a      	bne.n	1767a <rpc_gnss_event_handler+0xfe>
   17664:	6843      	ldr	r3, [r0, #4]
   17666:	b91b      	cbnz	r3, 17670 <rpc_gnss_event_handler+0xf4>
   17668:	6823      	ldr	r3, [r4, #0]
   1766a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1766e:	6023      	str	r3, [r4, #0]
   17670:	6823      	ldr	r3, [r4, #0]
   17672:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17676:	6023      	str	r3, [r4, #0]
   17678:	e00b      	b.n	17692 <rpc_gnss_event_handler+0x116>
   1767a:	f242 0301 	movw	r3, #8193	; 0x2001
   1767e:	429d      	cmp	r5, r3
   17680:	d10c      	bne.n	1769c <rpc_gnss_event_handler+0x120>
   17682:	6843      	ldr	r3, [r0, #4]
   17684:	b92b      	cbnz	r3, 17692 <rpc_gnss_event_handler+0x116>
   17686:	6823      	ldr	r3, [r4, #0]
   17688:	0c1b      	lsrs	r3, r3, #16
   1768a:	041b      	lsls	r3, r3, #16
   1768c:	f043 0302 	orr.w	r3, r3, #2
   17690:	6023      	str	r3, [r4, #0]
   17692:	f002 febf 	bl	1a414 <rpc_gnss_client_data_free>
   17696:	2300      	movs	r3, #0
   17698:	603b      	str	r3, [r7, #0]
   1769a:	e77a      	b.n	17592 <rpc_gnss_event_handler+0x16>
   1769c:	f242 0304 	movw	r3, #8196	; 0x2004
   176a0:	429d      	cmp	r5, r3
   176a2:	d1c5      	bne.n	17630 <rpc_gnss_event_handler+0xb4>
   176a4:	6843      	ldr	r3, [r0, #4]
   176a6:	b993      	cbnz	r3, 176ce <rpc_gnss_event_handler+0x152>
   176a8:	6823      	ldr	r3, [r4, #0]
   176aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   176ae:	6023      	str	r3, [r4, #0]
   176b0:	6823      	ldr	r3, [r4, #0]
   176b2:	b29b      	uxth	r3, r3
   176b4:	2b03      	cmp	r3, #3
   176b6:	6823      	ldr	r3, [r4, #0]
   176b8:	d016      	beq.n	176e8 <rpc_gnss_event_handler+0x16c>
   176ba:	b29b      	uxth	r3, r3
   176bc:	2b04      	cmp	r3, #4
   176be:	d1d7      	bne.n	17670 <rpc_gnss_event_handler+0xf4>
   176c0:	6823      	ldr	r3, [r4, #0]
   176c2:	0c1b      	lsrs	r3, r3, #16
   176c4:	041b      	lsls	r3, r3, #16
   176c6:	f043 0302 	orr.w	r3, r3, #2
   176ca:	6023      	str	r3, [r4, #0]
   176cc:	e7d0      	b.n	17670 <rpc_gnss_event_handler+0xf4>
   176ce:	6823      	ldr	r3, [r4, #0]
   176d0:	b29b      	uxth	r3, r3
   176d2:	2b03      	cmp	r3, #3
   176d4:	d1cc      	bne.n	17670 <rpc_gnss_event_handler+0xf4>
   176d6:	e7f3      	b.n	176c0 <rpc_gnss_event_handler+0x144>
   176d8:	4638      	mov	r0, r7
   176da:	f003 fc89 	bl	1aff0 <nrf_free>
   176de:	6830      	ldr	r0, [r6, #0]
   176e0:	2800      	cmp	r0, #0
   176e2:	f47f af69 	bne.w	175b8 <rpc_gnss_event_handler+0x3c>
   176e6:	e76c      	b.n	175c2 <rpc_gnss_event_handler+0x46>
   176e8:	0c1b      	lsrs	r3, r3, #16
   176ea:	041b      	lsls	r3, r3, #16
   176ec:	f043 0304 	orr.w	r3, r3, #4
   176f0:	6023      	str	r3, [r4, #0]
   176f2:	e7bd      	b.n	17670 <rpc_gnss_event_handler+0xf4>
   176f4:	6823      	ldr	r3, [r4, #0]
   176f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   176fa:	6023      	str	r3, [r4, #0]
   176fc:	e7c9      	b.n	17692 <rpc_gnss_event_handler+0x116>
   176fe:	6830      	ldr	r0, [r6, #0]
   17700:	2800      	cmp	r0, #0
   17702:	f43f af5e 	beq.w	175c2 <rpc_gnss_event_handler+0x46>
   17706:	f002 fe85 	bl	1a414 <rpc_gnss_client_data_free>
   1770a:	4b03      	ldr	r3, [pc, #12]	; (17718 <rpc_gnss_event_handler+0x19c>)
   1770c:	601f      	str	r7, [r3, #0]
   1770e:	e758      	b.n	175c2 <rpc_gnss_event_handler+0x46>
   17710:	200219d6 	.word	0x200219d6
   17714:	20020d34 	.word	0x20020d34
   17718:	20020d38 	.word	0x20020d38
   1771c:	20020d3c 	.word	0x20020d3c

00017720 <gnss_interface_write>:
   17720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17724:	4a74      	ldr	r2, [pc, #464]	; (178f8 <gnss_interface_write+0x1d8>)
   17726:	b09f      	sub	sp, #124	; 0x7c
   17728:	4290      	cmp	r0, r2
   1772a:	9d26      	ldr	r5, [sp, #152]	; 0x98
   1772c:	f040 80d7 	bne.w	178de <gnss_interface_write+0x1be>
   17730:	2900      	cmp	r1, #0
   17732:	f000 80c6 	beq.w	178c2 <gnss_interface_write+0x1a2>
   17736:	2d00      	cmp	r5, #0
   17738:	f000 80c3 	beq.w	178c2 <gnss_interface_write+0x1a2>
   1773c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   1773e:	2a02      	cmp	r2, #2
   17740:	f040 80bf 	bne.w	178c2 <gnss_interface_write+0x1a2>
   17744:	4c6d      	ldr	r4, [pc, #436]	; (178fc <gnss_interface_write+0x1dc>)
   17746:	6822      	ldr	r2, [r4, #0]
   17748:	b292      	uxth	r2, r2
   1774a:	2a02      	cmp	r2, #2
   1774c:	d004      	beq.n	17758 <gnss_interface_write+0x38>
   1774e:	6822      	ldr	r2, [r4, #0]
   17750:	b292      	uxth	r2, r2
   17752:	2a04      	cmp	r2, #4
   17754:	f040 80bd 	bne.w	178d2 <gnss_interface_write+0x1b2>
   17758:	2b00      	cmp	r3, #0
   1775a:	f040 80c6 	bne.w	178ea <gnss_interface_write+0x1ca>
   1775e:	6822      	ldr	r2, [r4, #0]
   17760:	0390      	lsls	r0, r2, #14
   17762:	d512      	bpl.n	1778a <gnss_interface_write+0x6a>
   17764:	6822      	ldr	r2, [r4, #0]
   17766:	882b      	ldrh	r3, [r5, #0]
   17768:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   1776c:	6022      	str	r2, [r4, #0]
   1776e:	6822      	ldr	r2, [r4, #0]
   17770:	3b01      	subs	r3, #1
   17772:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   17776:	6022      	str	r2, [r4, #0]
   17778:	2b07      	cmp	r3, #7
   1777a:	f200 80a2 	bhi.w	178c2 <gnss_interface_write+0x1a2>
   1777e:	e8df f003 	tbb	[pc, r3]
   17782:	7d82      	.short	0x7d82
   17784:	646e7378 	.word	0x646e7378
   17788:	0869      	.short	0x0869
   1778a:	2000      	movs	r0, #0
   1778c:	b01f      	add	sp, #124	; 0x7c
   1778e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17792:	4608      	mov	r0, r1
   17794:	a902      	add	r1, sp, #8
   17796:	f002 fdf1 	bl	1a37c <rpc_gnss_serialize_integrity>
   1779a:	2172      	movs	r1, #114	; 0x72
   1779c:	4668      	mov	r0, sp
   1779e:	f002 fe07 	bl	1a3b0 <rpc_gnss_client_request_alloc>
   177a2:	4605      	mov	r5, r0
   177a4:	9800      	ldr	r0, [sp, #0]
   177a6:	2d00      	cmp	r5, #0
   177a8:	d172      	bne.n	17890 <gnss_interface_write+0x170>
   177aa:	2800      	cmp	r0, #0
   177ac:	d077      	beq.n	1789e <gnss_interface_write+0x17e>
   177ae:	f241 0605 	movw	r6, #4101	; 0x1005
   177b2:	f04f 0c49 	mov.w	ip, #73	; 0x49
   177b6:	2272      	movs	r2, #114	; 0x72
   177b8:	f04f 0e76 	mov.w	lr, #118	; 0x76
   177bc:	f04f 0943 	mov.w	r9, #67	; 0x43
   177c0:	f04f 0854 	mov.w	r8, #84	; 0x54
   177c4:	4f4e      	ldr	r7, [pc, #312]	; (17900 <gnss_interface_write+0x1e0>)
   177c6:	a91e      	add	r1, sp, #120	; 0x78
   177c8:	883b      	ldrh	r3, [r7, #0]
   177ca:	f880 c00f 	strb.w	ip, [r0, #15]
   177ce:	3301      	adds	r3, #1
   177d0:	b29b      	uxth	r3, r3
   177d2:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   177d6:	f841 cd74 	str.w	ip, [r1, #-116]!
   177da:	7145      	strb	r5, [r0, #5]
   177dc:	7185      	strb	r5, [r0, #6]
   177de:	71c5      	strb	r5, [r0, #7]
   177e0:	7205      	strb	r5, [r0, #8]
   177e2:	7245      	strb	r5, [r0, #9]
   177e4:	7285      	strb	r5, [r0, #10]
   177e6:	72c5      	strb	r5, [r0, #11]
   177e8:	7102      	strb	r2, [r0, #4]
   177ea:	f880 900c 	strb.w	r9, [r0, #12]
   177ee:	f880 800d 	strb.w	r8, [r0, #13]
   177f2:	f880 e00e 	strb.w	lr, [r0, #14]
   177f6:	6800      	ldr	r0, [r0, #0]
   177f8:	803b      	strh	r3, [r7, #0]
   177fa:	f007 f84c 	bl	1e896 <memcpy>
   177fe:	4b41      	ldr	r3, [pc, #260]	; (17904 <gnss_interface_write+0x1e4>)
   17800:	4631      	mov	r1, r6
   17802:	9800      	ldr	r0, [sp, #0]
   17804:	601d      	str	r5, [r3, #0]
   17806:	f002 fde7 	bl	1a3d8 <rpc_gnss_client_request_send>
   1780a:	2800      	cmp	r0, #0
   1780c:	d14e      	bne.n	178ac <gnss_interface_write+0x18c>
   1780e:	6823      	ldr	r3, [r4, #0]
   17810:	0299      	lsls	r1, r3, #10
   17812:	d50b      	bpl.n	1782c <gnss_interface_write+0x10c>
   17814:	4e3c      	ldr	r6, [pc, #240]	; (17908 <gnss_interface_write+0x1e8>)
   17816:	4d38      	ldr	r5, [pc, #224]	; (178f8 <gnss_interface_write+0x1d8>)
   17818:	e000      	b.n	1781c <gnss_interface_write+0xfc>
   1781a:	b978      	cbnz	r0, 1783c <gnss_interface_write+0x11c>
   1781c:	4631      	mov	r1, r6
   1781e:	4628      	mov	r0, r5
   17820:	f7f9 fd6a 	bl	112f8 <bsd_os_timedwait>
   17824:	6823      	ldr	r3, [r4, #0]
   17826:	029a      	lsls	r2, r3, #10
   17828:	d4f7      	bmi.n	1781a <gnss_interface_write+0xfa>
   1782a:	b938      	cbnz	r0, 1783c <gnss_interface_write+0x11c>
   1782c:	6823      	ldr	r3, [r4, #0]
   1782e:	039b      	lsls	r3, r3, #14
   17830:	d4ab      	bmi.n	1778a <gnss_interface_write+0x6a>
   17832:	2005      	movs	r0, #5
   17834:	6823      	ldr	r3, [r4, #0]
   17836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1783a:	6023      	str	r3, [r4, #0]
   1783c:	f7f9 fe14 	bl	11468 <bsd_os_errno_set>
   17840:	f04f 30ff 	mov.w	r0, #4294967295
   17844:	b01f      	add	sp, #124	; 0x7c
   17846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1784a:	4608      	mov	r0, r1
   1784c:	a902      	add	r1, sp, #8
   1784e:	f002 fd4d 	bl	1a2ec <rpc_gnss_serialize_time_and_sv_tow>
   17852:	e7a2      	b.n	1779a <gnss_interface_write+0x7a>
   17854:	4608      	mov	r0, r1
   17856:	a902      	add	r1, sp, #8
   17858:	f002 fd70 	bl	1a33c <rpc_gnss_serialize_location>
   1785c:	e79d      	b.n	1779a <gnss_interface_write+0x7a>
   1785e:	4608      	mov	r0, r1
   17860:	a902      	add	r1, sp, #8
   17862:	f002 fd29 	bl	1a2b8 <rpc_gnss_serialize_nequick>
   17866:	e798      	b.n	1779a <gnss_interface_write+0x7a>
   17868:	4608      	mov	r0, r1
   1786a:	a902      	add	r1, sp, #8
   1786c:	f002 fd00 	bl	1a270 <rpc_gnss_serialize_klob>
   17870:	e793      	b.n	1779a <gnss_interface_write+0x7a>
   17872:	4608      	mov	r0, r1
   17874:	a902      	add	r1, sp, #8
   17876:	f002 fcc9 	bl	1a20c <rpc_gnss_serialize_alm>
   1787a:	e78e      	b.n	1779a <gnss_interface_write+0x7a>
   1787c:	4608      	mov	r0, r1
   1787e:	a902      	add	r1, sp, #8
   17880:	f002 fc72 	bl	1a168 <rpc_gnss_serialize_ephe>
   17884:	e789      	b.n	1779a <gnss_interface_write+0x7a>
   17886:	4608      	mov	r0, r1
   17888:	a902      	add	r1, sp, #8
   1788a:	f002 fc4b 	bl	1a124 <rpc_gnss_serialize_utc>
   1788e:	e784      	b.n	1779a <gnss_interface_write+0x7a>
   17890:	b128      	cbz	r0, 1789e <gnss_interface_write+0x17e>
   17892:	6803      	ldr	r3, [r0, #0]
   17894:	b11b      	cbz	r3, 1789e <gnss_interface_write+0x17e>
   17896:	4618      	mov	r0, r3
   17898:	f002 fdbc 	bl	1a414 <rpc_gnss_client_data_free>
   1789c:	9800      	ldr	r0, [sp, #0]
   1789e:	f002 fdb1 	bl	1a404 <rpc_gnss_client_message_free>
   178a2:	2023      	movs	r0, #35	; 0x23
   178a4:	f7f9 fde0 	bl	11468 <bsd_os_errno_set>
   178a8:	f04f 30ff 	mov.w	r0, #4294967295
   178ac:	6823      	ldr	r3, [r4, #0]
   178ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   178b2:	6023      	str	r3, [r4, #0]
   178b4:	6823      	ldr	r3, [r4, #0]
   178b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   178ba:	6023      	str	r3, [r4, #0]
   178bc:	b01f      	add	sp, #124	; 0x7c
   178be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   178c2:	2016      	movs	r0, #22
   178c4:	f7f9 fdd0 	bl	11468 <bsd_os_errno_set>
   178c8:	f04f 30ff 	mov.w	r0, #4294967295
   178cc:	b01f      	add	sp, #124	; 0x7c
   178ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   178d2:	2039      	movs	r0, #57	; 0x39
   178d4:	f7f9 fdc8 	bl	11468 <bsd_os_errno_set>
   178d8:	f04f 30ff 	mov.w	r0, #4294967295
   178dc:	e756      	b.n	1778c <gnss_interface_write+0x6c>
   178de:	2009      	movs	r0, #9
   178e0:	f7f9 fdc2 	bl	11468 <bsd_os_errno_set>
   178e4:	f04f 30ff 	mov.w	r0, #4294967295
   178e8:	e750      	b.n	1778c <gnss_interface_write+0x6c>
   178ea:	202d      	movs	r0, #45	; 0x2d
   178ec:	f7f9 fdbc 	bl	11468 <bsd_os_errno_set>
   178f0:	f04f 30ff 	mov.w	r0, #4294967295
   178f4:	e74a      	b.n	1778c <gnss_interface_write+0x6c>
   178f6:	bf00      	nop
   178f8:	49765443 	.word	0x49765443
   178fc:	20020d34 	.word	0x20020d34
   17900:	200219d6 	.word	0x200219d6
   17904:	20020d38 	.word	0x20020d38
   17908:	20020060 	.word	0x20020060

0001790c <gnss_interface_read>:
   1790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17910:	4c55      	ldr	r4, [pc, #340]	; (17a68 <gnss_interface_read+0x15c>)
   17912:	b0b7      	sub	sp, #220	; 0xdc
   17914:	42a0      	cmp	r0, r4
   17916:	f040 81fa 	bne.w	17d0e <gnss_interface_read+0x402>
   1791a:	460e      	mov	r6, r1
   1791c:	2900      	cmp	r1, #0
   1791e:	f000 81f0 	beq.w	17d02 <gnss_interface_read+0x3f6>
   17922:	2ad7      	cmp	r2, #215	; 0xd7
   17924:	f240 81ed 	bls.w	17d02 <gnss_interface_read+0x3f6>
   17928:	4d50      	ldr	r5, [pc, #320]	; (17a6c <gnss_interface_read+0x160>)
   1792a:	469a      	mov	sl, r3
   1792c:	682b      	ldr	r3, [r5, #0]
   1792e:	b29b      	uxth	r3, r3
   17930:	2b04      	cmp	r3, #4
   17932:	d004      	beq.n	1793e <gnss_interface_read+0x32>
   17934:	682b      	ldr	r3, [r5, #0]
   17936:	b29b      	uxth	r3, r3
   17938:	2b02      	cmp	r3, #2
   1793a:	f040 81dc 	bne.w	17cf6 <gnss_interface_read+0x3ea>
   1793e:	f1ba 0f00 	cmp.w	sl, #0
   17942:	d178      	bne.n	17a36 <gnss_interface_read+0x12a>
   17944:	2102      	movs	r1, #2
   17946:	20b6      	movs	r0, #182	; 0xb6
   17948:	2400      	movs	r4, #0
   1794a:	682b      	ldr	r3, [r5, #0]
   1794c:	f10d 020e 	add.w	r2, sp, #14
   17950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   17954:	602b      	str	r3, [r5, #0]
   17956:	ab08      	add	r3, sp, #32
   17958:	9304      	str	r3, [sp, #16]
   1795a:	f8df b118 	ldr.w	fp, [pc, #280]	; 17a74 <gnss_interface_read+0x168>
   1795e:	ea0a 0301 	and.w	r3, sl, r1
   17962:	4f43      	ldr	r7, [pc, #268]	; (17a70 <gnss_interface_read+0x164>)
   17964:	f8df 9110 	ldr.w	r9, [pc, #272]	; 17a78 <gnss_interface_read+0x16c>
   17968:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 17a68 <gnss_interface_read+0x15c>
   1796c:	9005      	str	r0, [sp, #20]
   1796e:	9107      	str	r1, [sp, #28]
   17970:	9206      	str	r2, [sp, #24]
   17972:	9301      	str	r3, [sp, #4]
   17974:	f8db 0000 	ldr.w	r0, [fp]
   17978:	4652      	mov	r2, sl
   1797a:	6803      	ldr	r3, [r0, #0]
   1797c:	a904      	add	r1, sp, #16
   1797e:	689b      	ldr	r3, [r3, #8]
   17980:	4798      	blx	r3
   17982:	2800      	cmp	r0, #0
   17984:	da2a      	bge.n	179dc <gnss_interface_read+0xd0>
   17986:	9b01      	ldr	r3, [sp, #4]
   17988:	b15b      	cbz	r3, 179a2 <gnss_interface_read+0x96>
   1798a:	1c42      	adds	r2, r0, #1
   1798c:	4603      	mov	r3, r0
   1798e:	d125      	bne.n	179dc <gnss_interface_read+0xd0>
   17990:	b9dc      	cbnz	r4, 179ca <gnss_interface_read+0xbe>
   17992:	2023      	movs	r0, #35	; 0x23
   17994:	461c      	mov	r4, r3
   17996:	f7f9 fd67 	bl	11468 <bsd_os_errno_set>
   1799a:	4620      	mov	r0, r4
   1799c:	b037      	add	sp, #220	; 0xdc
   1799e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179a2:	682a      	ldr	r2, [r5, #0]
   179a4:	783b      	ldrb	r3, [r7, #0]
   179a6:	03d1      	lsls	r1, r2, #15
   179a8:	d40c      	bmi.n	179c4 <gnss_interface_read+0xb8>
   179aa:	b95c      	cbnz	r4, 179c4 <gnss_interface_read+0xb8>
   179ac:	b163      	cbz	r3, 179c8 <gnss_interface_read+0xbc>
   179ae:	4649      	mov	r1, r9
   179b0:	4640      	mov	r0, r8
   179b2:	f7f9 fca1 	bl	112f8 <bsd_os_timedwait>
   179b6:	682b      	ldr	r3, [r5, #0]
   179b8:	03db      	lsls	r3, r3, #15
   179ba:	d437      	bmi.n	17a2c <gnss_interface_read+0x120>
   179bc:	783b      	ldrb	r3, [r7, #0]
   179be:	2800      	cmp	r0, #0
   179c0:	d0f4      	beq.n	179ac <gnss_interface_read+0xa0>
   179c2:	4604      	mov	r4, r0
   179c4:	2b00      	cmp	r3, #0
   179c6:	d1d5      	bne.n	17974 <gnss_interface_read+0x68>
   179c8:	2470      	movs	r4, #112	; 0x70
   179ca:	4620      	mov	r0, r4
   179cc:	f04f 34ff 	mov.w	r4, #4294967295
   179d0:	f7f9 fd4a 	bl	11468 <bsd_os_errno_set>
   179d4:	4620      	mov	r0, r4
   179d6:	b037      	add	sp, #220	; 0xdc
   179d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179dc:	f244 0202 	movw	r2, #16386	; 0x4002
   179e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   179e4:	4293      	cmp	r3, r2
   179e6:	d02f      	beq.n	17a48 <gnss_interface_read+0x13c>
   179e8:	f244 0201 	movw	r2, #16385	; 0x4001
   179ec:	4293      	cmp	r3, r2
   179ee:	d045      	beq.n	17a7c <gnss_interface_read+0x170>
   179f0:	f244 0203 	movw	r2, #16387	; 0x4003
   179f4:	4293      	cmp	r3, r2
   179f6:	f040 8184 	bne.w	17d02 <gnss_interface_read+0x3f6>
   179fa:	2203      	movs	r2, #3
   179fc:	2414      	movs	r4, #20
   179fe:	9b08      	ldr	r3, [sp, #32]
   17a00:	7032      	strb	r2, [r6, #0]
   17a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17a04:	60b3      	str	r3, [r6, #8]
   17a06:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   17a0a:	e9c6 2303 	strd	r2, r3, [r6, #12]
   17a0e:	f8db 0000 	ldr.w	r0, [fp]
   17a12:	6803      	ldr	r3, [r0, #0]
   17a14:	68db      	ldr	r3, [r3, #12]
   17a16:	4798      	blx	r3
   17a18:	2800      	cmp	r0, #0
   17a1a:	ddbe      	ble.n	1799a <gnss_interface_read+0x8e>
   17a1c:	4620      	mov	r0, r4
   17a1e:	682b      	ldr	r3, [r5, #0]
   17a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17a24:	602b      	str	r3, [r5, #0]
   17a26:	b037      	add	sp, #220	; 0xdc
   17a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a2c:	783b      	ldrb	r3, [r7, #0]
   17a2e:	4604      	mov	r4, r0
   17a30:	2b00      	cmp	r3, #0
   17a32:	d19f      	bne.n	17974 <gnss_interface_read+0x68>
   17a34:	e7c8      	b.n	179c8 <gnss_interface_read+0xbc>
   17a36:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   17a3a:	d183      	bne.n	17944 <gnss_interface_read+0x38>
   17a3c:	202d      	movs	r0, #45	; 0x2d
   17a3e:	f7f9 fd13 	bl	11468 <bsd_os_errno_set>
   17a42:	f04f 34ff 	mov.w	r4, #4294967295
   17a46:	e7a8      	b.n	1799a <gnss_interface_read+0x8e>
   17a48:	a808      	add	r0, sp, #32
   17a4a:	f006 fef2 	bl	1e832 <strlen>
   17a4e:	2302      	movs	r3, #2
   17a50:	1c44      	adds	r4, r0, #1
   17a52:	b2a4      	uxth	r4, r4
   17a54:	f806 3b08 	strb.w	r3, [r6], #8
   17a58:	4622      	mov	r2, r4
   17a5a:	a908      	add	r1, sp, #32
   17a5c:	4630      	mov	r0, r6
   17a5e:	f006 ff1a 	bl	1e896 <memcpy>
   17a62:	3408      	adds	r4, #8
   17a64:	e7d3      	b.n	17a0e <gnss_interface_read+0x102>
   17a66:	bf00      	nop
   17a68:	49765443 	.word	0x49765443
   17a6c:	20020d34 	.word	0x20020d34
   17a70:	200236c2 	.word	0x200236c2
   17a74:	20020d3c 	.word	0x20020d3c
   17a78:	20020060 	.word	0x20020060
   17a7c:	2401      	movs	r4, #1
   17a7e:	a809      	add	r0, sp, #36	; 0x24
   17a80:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   17a82:	e9c6 0102 	strd	r0, r1, [r6, #8]
   17a86:	e9c6 2304 	strd	r2, r3, [r6, #16]
   17a8a:	990d      	ldr	r1, [sp, #52]	; 0x34
   17a8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17a8e:	7034      	strb	r4, [r6, #0]
   17a90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17a92:	61b1      	str	r1, [r6, #24]
   17a94:	9910      	ldr	r1, [sp, #64]	; 0x40
   17a96:	61f2      	str	r2, [r6, #28]
   17a98:	6233      	str	r3, [r6, #32]
   17a9a:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   17a9e:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   17aa2:	6271      	str	r1, [r6, #36]	; 0x24
   17aa4:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   17aa8:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   17aac:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   17ab0:	6373      	str	r3, [r6, #52]	; 0x34
   17ab2:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   17ab6:	63b1      	str	r1, [r6, #56]	; 0x38
   17ab8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   17abc:	63f2      	str	r2, [r6, #60]	; 0x3c
   17abe:	6433      	str	r3, [r6, #64]	; 0x40
   17ac0:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   17ac4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   17ac8:	8531      	strh	r1, [r6, #40]	; 0x28
   17aca:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   17ace:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   17ad2:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   17ad6:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   17ada:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17adc:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   17ae0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   17ae4:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   17ae8:	f3c3 210f 	ubfx	r1, r3, #8, #16
   17aec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17aee:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   17af2:	8630      	strh	r0, [r6, #48]	; 0x30
   17af4:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   17af8:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   17afc:	f3c3 230f 	ubfx	r3, r3, #8, #16
   17b00:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   17b04:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   17b08:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   17b0c:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   17b10:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   17b14:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   17b18:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   17b1c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   17b20:	64f3      	str	r3, [r6, #76]	; 0x4c
   17b22:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   17b26:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   17b2a:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   17b2e:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   17b32:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   17b36:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   17b3a:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   17b3e:	65b1      	str	r1, [r6, #88]	; 0x58
   17b40:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   17b44:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   17b48:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   17b4c:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   17b50:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   17b54:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   17b58:	6672      	str	r2, [r6, #100]	; 0x64
   17b5a:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   17b5e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   17b62:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   17b66:	9a22      	ldr	r2, [sp, #136]	; 0x88
   17b68:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   17b6c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   17b70:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   17b74:	f3c2 220f 	ubfx	r2, r2, #8, #16
   17b78:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   17b7c:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   17b80:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   17b84:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   17b88:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   17b8c:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   17b90:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   17b94:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   17b98:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   17b9c:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   17ba0:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   17ba4:	6733      	str	r3, [r6, #112]	; 0x70
   17ba6:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   17baa:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   17bae:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   17bb2:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   17bb6:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   17bba:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   17bbe:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   17bc2:	67f1      	str	r1, [r6, #124]	; 0x7c
   17bc4:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   17bc8:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   17bcc:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   17bd0:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   17bd4:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   17bd8:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   17bdc:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   17be0:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   17be4:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   17be8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   17bea:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   17bee:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   17bf2:	f3c3 210f 	ubfx	r1, r3, #8, #16
   17bf6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   17bf8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   17bfc:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   17c00:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   17c04:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   17c08:	f3c3 230f 	ubfx	r3, r3, #8, #16
   17c0c:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   17c10:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   17c14:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   17c18:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   17c1c:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   17c20:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   17c24:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   17c28:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   17c2c:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   17c30:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   17c34:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   17c38:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   17c3c:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   17c40:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   17c44:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   17c48:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   17c4c:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   17c50:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   17c54:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   17c58:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   17c5c:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   17c60:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   17c64:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   17c68:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   17c6c:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   17c70:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   17c74:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   17c78:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   17c7c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   17c7e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   17c82:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   17c86:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   17c8a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   17c8e:	f3c2 220f 	ubfx	r2, r2, #8, #16
   17c92:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   17c96:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   17c9a:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   17c9e:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   17ca2:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   17ca6:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   17caa:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   17cae:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   17cb2:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   17cb6:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   17cba:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   17cbe:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   17cc2:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   17cc6:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   17cca:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   17cce:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   17cd2:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   17cd6:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   17cda:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   17cde:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   17ce2:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   17ce6:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   17cea:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   17cee:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   17cf2:	24d8      	movs	r4, #216	; 0xd8
   17cf4:	e68b      	b.n	17a0e <gnss_interface_read+0x102>
   17cf6:	2039      	movs	r0, #57	; 0x39
   17cf8:	f7f9 fbb6 	bl	11468 <bsd_os_errno_set>
   17cfc:	f04f 34ff 	mov.w	r4, #4294967295
   17d00:	e64b      	b.n	1799a <gnss_interface_read+0x8e>
   17d02:	2016      	movs	r0, #22
   17d04:	f7f9 fbb0 	bl	11468 <bsd_os_errno_set>
   17d08:	f04f 34ff 	mov.w	r4, #4294967295
   17d0c:	e645      	b.n	1799a <gnss_interface_read+0x8e>
   17d0e:	2009      	movs	r0, #9
   17d10:	f7f9 fbaa 	bl	11468 <bsd_os_errno_set>
   17d14:	f04f 34ff 	mov.w	r4, #4294967295
   17d18:	e63f      	b.n	1799a <gnss_interface_read+0x8e>
   17d1a:	bf00      	nop

00017d1c <gnss_interface_setopt>:
   17d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d20:	4db9      	ldr	r5, [pc, #740]	; (18008 <gnss_interface_setopt+0x2ec>)
   17d22:	b087      	sub	sp, #28
   17d24:	682c      	ldr	r4, [r5, #0]
   17d26:	4690      	mov	r8, r2
   17d28:	b2a4      	uxth	r4, r4
   17d2a:	2c02      	cmp	r4, #2
   17d2c:	d00c      	beq.n	17d48 <gnss_interface_setopt+0x2c>
   17d2e:	2a08      	cmp	r2, #8
   17d30:	d00a      	beq.n	17d48 <gnss_interface_setopt+0x2c>
   17d32:	3a0a      	subs	r2, #10
   17d34:	2a01      	cmp	r2, #1
   17d36:	d907      	bls.n	17d48 <gnss_interface_setopt+0x2c>
   17d38:	200e      	movs	r0, #14
   17d3a:	f7f9 fb95 	bl	11468 <bsd_os_errno_set>
   17d3e:	f04f 30ff 	mov.w	r0, #4294967295
   17d42:	b007      	add	sp, #28
   17d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d48:	682a      	ldr	r2, [r5, #0]
   17d4a:	0252      	lsls	r2, r2, #9
   17d4c:	f100 8155 	bmi.w	17ffa <gnss_interface_setopt+0x2de>
   17d50:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   17d54:	f040 8145 	bne.w	17fe2 <gnss_interface_setopt+0x2c6>
   17d58:	4aac      	ldr	r2, [pc, #688]	; (1800c <gnss_interface_setopt+0x2f0>)
   17d5a:	4290      	cmp	r0, r2
   17d5c:	f040 8147 	bne.w	17fee <gnss_interface_setopt+0x2d2>
   17d60:	f1a8 020a 	sub.w	r2, r8, #10
   17d64:	2a01      	cmp	r2, #1
   17d66:	d902      	bls.n	17d6e <gnss_interface_setopt+0x52>
   17d68:	2b00      	cmp	r3, #0
   17d6a:	f000 811e 	beq.w	17faa <gnss_interface_setopt+0x28e>
   17d6e:	f108 32ff 	add.w	r2, r8, #4294967295
   17d72:	2a0a      	cmp	r2, #10
   17d74:	f200 8119 	bhi.w	17faa <gnss_interface_setopt+0x28e>
   17d78:	e8df f012 	tbh	[pc, r2, lsl #1]
   17d7c:	00950088 	.word	0x00950088
   17d80:	00ab00a1 	.word	0x00ab00a1
   17d84:	00c200b7 	.word	0x00c200b7
   17d88:	00e600ce 	.word	0x00e600ce
   17d8c:	010800fc 	.word	0x010800fc
   17d90:	000b      	.short	0x000b
   17d92:	682b      	ldr	r3, [r5, #0]
   17d94:	b29b      	uxth	r3, r3
   17d96:	2b04      	cmp	r3, #4
   17d98:	d1ce      	bne.n	17d38 <gnss_interface_setopt+0x1c>
   17d9a:	2203      	movs	r2, #3
   17d9c:	f241 0604 	movw	r6, #4100	; 0x1004
   17da0:	2300      	movs	r3, #0
   17da2:	4637      	mov	r7, r6
   17da4:	f88d 2008 	strb.w	r2, [sp, #8]
   17da8:	f88d 3009 	strb.w	r3, [sp, #9]
   17dac:	f88d 300a 	strb.w	r3, [sp, #10]
   17db0:	f88d 300b 	strb.w	r3, [sp, #11]
   17db4:	f88d 300c 	strb.w	r3, [sp, #12]
   17db8:	682b      	ldr	r3, [r5, #0]
   17dba:	2112      	movs	r1, #18
   17dbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   17dc0:	4668      	mov	r0, sp
   17dc2:	602b      	str	r3, [r5, #0]
   17dc4:	f002 faf4 	bl	1a3b0 <rpc_gnss_client_request_alloc>
   17dc8:	4604      	mov	r4, r0
   17dca:	9800      	ldr	r0, [sp, #0]
   17dcc:	2c00      	cmp	r4, #0
   17dce:	f040 80f2 	bne.w	17fb6 <gnss_interface_setopt+0x29a>
   17dd2:	2800      	cmp	r0, #0
   17dd4:	f000 80f6 	beq.w	17fc4 <gnss_interface_setopt+0x2a8>
   17dd8:	2212      	movs	r2, #18
   17dda:	f04f 0976 	mov.w	r9, #118	; 0x76
   17dde:	f04f 0e49 	mov.w	lr, #73	; 0x49
   17de2:	f04f 0b43 	mov.w	fp, #67	; 0x43
   17de6:	f04f 0a54 	mov.w	sl, #84	; 0x54
   17dea:	f8df c22c 	ldr.w	ip, [pc, #556]	; 18018 <gnss_interface_setopt+0x2fc>
   17dee:	a906      	add	r1, sp, #24
   17df0:	f8bc 3000 	ldrh.w	r3, [ip]
   17df4:	f880 900e 	strb.w	r9, [r0, #14]
   17df8:	3301      	adds	r3, #1
   17dfa:	b29b      	uxth	r3, r3
   17dfc:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   17e00:	f841 6d14 	str.w	r6, [r1, #-20]!
   17e04:	7144      	strb	r4, [r0, #5]
   17e06:	7184      	strb	r4, [r0, #6]
   17e08:	71c4      	strb	r4, [r0, #7]
   17e0a:	7204      	strb	r4, [r0, #8]
   17e0c:	7244      	strb	r4, [r0, #9]
   17e0e:	7284      	strb	r4, [r0, #10]
   17e10:	72c4      	strb	r4, [r0, #11]
   17e12:	7102      	strb	r2, [r0, #4]
   17e14:	f880 b00c 	strb.w	fp, [r0, #12]
   17e18:	f880 a00d 	strb.w	sl, [r0, #13]
   17e1c:	f880 e00f 	strb.w	lr, [r0, #15]
   17e20:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 1801c <gnss_interface_setopt+0x300>
   17e24:	6800      	ldr	r0, [r0, #0]
   17e26:	f8ac 3000 	strh.w	r3, [ip]
   17e2a:	f006 fd34 	bl	1e896 <memcpy>
   17e2e:	4639      	mov	r1, r7
   17e30:	9800      	ldr	r0, [sp, #0]
   17e32:	f8c9 4000 	str.w	r4, [r9]
   17e36:	f002 facf 	bl	1a3d8 <rpc_gnss_client_request_send>
   17e3a:	2800      	cmp	r0, #0
   17e3c:	f040 80c7 	bne.w	17fce <gnss_interface_setopt+0x2b2>
   17e40:	4f73      	ldr	r7, [pc, #460]	; (18010 <gnss_interface_setopt+0x2f4>)
   17e42:	4e72      	ldr	r6, [pc, #456]	; (1800c <gnss_interface_setopt+0x2f0>)
   17e44:	4639      	mov	r1, r7
   17e46:	4630      	mov	r0, r6
   17e48:	f7f9 fa56 	bl	112f8 <bsd_os_timedwait>
   17e4c:	682c      	ldr	r4, [r5, #0]
   17e4e:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   17e52:	d1f7      	bne.n	17e44 <gnss_interface_setopt+0x128>
   17e54:	f8d9 0000 	ldr.w	r0, [r9]
   17e58:	b118      	cbz	r0, 17e62 <gnss_interface_setopt+0x146>
   17e5a:	f002 fadb 	bl	1a414 <rpc_gnss_client_data_free>
   17e5e:	f8c9 4000 	str.w	r4, [r9]
   17e62:	682b      	ldr	r3, [r5, #0]
   17e64:	021b      	lsls	r3, r3, #8
   17e66:	f140 8098 	bpl.w	17f9a <gnss_interface_setopt+0x27e>
   17e6a:	f1b8 0f08 	cmp.w	r8, #8
   17e6e:	f040 809a 	bne.w	17fa6 <gnss_interface_setopt+0x28a>
   17e72:	4b68      	ldr	r3, [pc, #416]	; (18014 <gnss_interface_setopt+0x2f8>)
   17e74:	6818      	ldr	r0, [r3, #0]
   17e76:	6803      	ldr	r3, [r0, #0]
   17e78:	691b      	ldr	r3, [r3, #16]
   17e7a:	4798      	blx	r3
   17e7c:	2000      	movs	r0, #0
   17e7e:	682b      	ldr	r3, [r5, #0]
   17e80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   17e84:	602b      	str	r3, [r5, #0]
   17e86:	b007      	add	sp, #28
   17e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17e8e:	2a02      	cmp	r2, #2
   17e90:	f040 808b 	bne.w	17faa <gnss_interface_setopt+0x28e>
   17e94:	2208      	movs	r2, #8
   17e96:	f241 1603 	movw	r6, #4355	; 0x1103
   17e9a:	881b      	ldrh	r3, [r3, #0]
   17e9c:	9202      	str	r2, [sp, #8]
   17e9e:	f8ad 300f 	strh.w	r3, [sp, #15]
   17ea2:	4637      	mov	r7, r6
   17ea4:	e788      	b.n	17db8 <gnss_interface_setopt+0x9c>
   17ea6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17ea8:	2a02      	cmp	r2, #2
   17eaa:	d17e      	bne.n	17faa <gnss_interface_setopt+0x28e>
   17eac:	2210      	movs	r2, #16
   17eae:	f241 1603 	movw	r6, #4355	; 0x1103
   17eb2:	881b      	ldrh	r3, [r3, #0]
   17eb4:	9202      	str	r2, [sp, #8]
   17eb6:	f8ad 3011 	strh.w	r3, [sp, #17]
   17eba:	4637      	mov	r7, r6
   17ebc:	e77c      	b.n	17db8 <gnss_interface_setopt+0x9c>
   17ebe:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17ec0:	2a01      	cmp	r2, #1
   17ec2:	d172      	bne.n	17faa <gnss_interface_setopt+0x28e>
   17ec4:	781b      	ldrb	r3, [r3, #0]
   17ec6:	2b01      	cmp	r3, #1
   17ec8:	d16f      	bne.n	17faa <gnss_interface_setopt+0x28e>
   17eca:	f241 1603 	movw	r6, #4355	; 0x1103
   17ece:	4637      	mov	r7, r6
   17ed0:	e772      	b.n	17db8 <gnss_interface_setopt+0x9c>
   17ed2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17ed4:	2a02      	cmp	r2, #2
   17ed6:	d168      	bne.n	17faa <gnss_interface_setopt+0x28e>
   17ed8:	2220      	movs	r2, #32
   17eda:	f241 1603 	movw	r6, #4355	; 0x1103
   17ede:	881b      	ldrh	r3, [r3, #0]
   17ee0:	9202      	str	r2, [sp, #8]
   17ee2:	f8ad 3013 	strh.w	r3, [sp, #19]
   17ee6:	4637      	mov	r7, r6
   17ee8:	e766      	b.n	17db8 <gnss_interface_setopt+0x9c>
   17eea:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17eec:	2a01      	cmp	r2, #1
   17eee:	d15c      	bne.n	17faa <gnss_interface_setopt+0x28e>
   17ef0:	f241 1603 	movw	r6, #4355	; 0x1103
   17ef4:	781b      	ldrb	r3, [r3, #0]
   17ef6:	9202      	str	r2, [sp, #8]
   17ef8:	f88d 300c 	strb.w	r3, [sp, #12]
   17efc:	4637      	mov	r7, r6
   17efe:	e75b      	b.n	17db8 <gnss_interface_setopt+0x9c>
   17f00:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17f02:	2a01      	cmp	r2, #1
   17f04:	d151      	bne.n	17faa <gnss_interface_setopt+0x28e>
   17f06:	2202      	movs	r2, #2
   17f08:	f241 1603 	movw	r6, #4355	; 0x1103
   17f0c:	781b      	ldrb	r3, [r3, #0]
   17f0e:	9202      	str	r2, [sp, #8]
   17f10:	f88d 300d 	strb.w	r3, [sp, #13]
   17f14:	4637      	mov	r7, r6
   17f16:	e74f      	b.n	17db8 <gnss_interface_setopt+0x9c>
   17f18:	682a      	ldr	r2, [r5, #0]
   17f1a:	b292      	uxth	r2, r2
   17f1c:	2a02      	cmp	r2, #2
   17f1e:	f47f af0b 	bne.w	17d38 <gnss_interface_setopt+0x1c>
   17f22:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17f24:	2a04      	cmp	r2, #4
   17f26:	d140      	bne.n	17faa <gnss_interface_setopt+0x28e>
   17f28:	2101      	movs	r1, #1
   17f2a:	f241 0604 	movw	r6, #4100	; 0x1004
   17f2e:	682a      	ldr	r2, [r5, #0]
   17f30:	6818      	ldr	r0, [r3, #0]
   17f32:	0c13      	lsrs	r3, r2, #16
   17f34:	041b      	lsls	r3, r3, #16
   17f36:	f043 0303 	orr.w	r3, r3, #3
   17f3a:	f8cd 0009 	str.w	r0, [sp, #9]
   17f3e:	602b      	str	r3, [r5, #0]
   17f40:	f88d 1008 	strb.w	r1, [sp, #8]
   17f44:	4637      	mov	r7, r6
   17f46:	e737      	b.n	17db8 <gnss_interface_setopt+0x9c>
   17f48:	682a      	ldr	r2, [r5, #0]
   17f4a:	b292      	uxth	r2, r2
   17f4c:	2a04      	cmp	r2, #4
   17f4e:	d004      	beq.n	17f5a <gnss_interface_setopt+0x23e>
   17f50:	682a      	ldr	r2, [r5, #0]
   17f52:	b292      	uxth	r2, r2
   17f54:	2a02      	cmp	r2, #2
   17f56:	f47f aeef 	bne.w	17d38 <gnss_interface_setopt+0x1c>
   17f5a:	2200      	movs	r2, #0
   17f5c:	f88d 2008 	strb.w	r2, [sp, #8]
   17f60:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17f62:	2a04      	cmp	r2, #4
   17f64:	d121      	bne.n	17faa <gnss_interface_setopt+0x28e>
   17f66:	f241 0604 	movw	r6, #4100	; 0x1004
   17f6a:	681b      	ldr	r3, [r3, #0]
   17f6c:	4637      	mov	r7, r6
   17f6e:	f8cd 3009 	str.w	r3, [sp, #9]
   17f72:	e721      	b.n	17db8 <gnss_interface_setopt+0x9c>
   17f74:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17f76:	2a01      	cmp	r2, #1
   17f78:	d117      	bne.n	17faa <gnss_interface_setopt+0x28e>
   17f7a:	2240      	movs	r2, #64	; 0x40
   17f7c:	f241 1603 	movw	r6, #4355	; 0x1103
   17f80:	781b      	ldrb	r3, [r3, #0]
   17f82:	9202      	str	r2, [sp, #8]
   17f84:	f88d 3015 	strb.w	r3, [sp, #21]
   17f88:	4637      	mov	r7, r6
   17f8a:	e715      	b.n	17db8 <gnss_interface_setopt+0x9c>
   17f8c:	682b      	ldr	r3, [r5, #0]
   17f8e:	b29b      	uxth	r3, r3
   17f90:	2b04      	cmp	r3, #4
   17f92:	f47f aed1 	bne.w	17d38 <gnss_interface_setopt+0x1c>
   17f96:	2202      	movs	r2, #2
   17f98:	e700      	b.n	17d9c <gnss_interface_setopt+0x80>
   17f9a:	200e      	movs	r0, #14
   17f9c:	f7f9 fa64 	bl	11468 <bsd_os_errno_set>
   17fa0:	f04f 30ff 	mov.w	r0, #4294967295
   17fa4:	e76b      	b.n	17e7e <gnss_interface_setopt+0x162>
   17fa6:	2000      	movs	r0, #0
   17fa8:	e769      	b.n	17e7e <gnss_interface_setopt+0x162>
   17faa:	2016      	movs	r0, #22
   17fac:	f7f9 fa5c 	bl	11468 <bsd_os_errno_set>
   17fb0:	f04f 30ff 	mov.w	r0, #4294967295
   17fb4:	e6c5      	b.n	17d42 <gnss_interface_setopt+0x26>
   17fb6:	b128      	cbz	r0, 17fc4 <gnss_interface_setopt+0x2a8>
   17fb8:	6803      	ldr	r3, [r0, #0]
   17fba:	b11b      	cbz	r3, 17fc4 <gnss_interface_setopt+0x2a8>
   17fbc:	4618      	mov	r0, r3
   17fbe:	f002 fa29 	bl	1a414 <rpc_gnss_client_data_free>
   17fc2:	9800      	ldr	r0, [sp, #0]
   17fc4:	f002 fa1e 	bl	1a404 <rpc_gnss_client_message_free>
   17fc8:	2023      	movs	r0, #35	; 0x23
   17fca:	f7f9 fa4d 	bl	11468 <bsd_os_errno_set>
   17fce:	682b      	ldr	r3, [r5, #0]
   17fd0:	200e      	movs	r0, #14
   17fd2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17fd6:	602b      	str	r3, [r5, #0]
   17fd8:	f7f9 fa46 	bl	11468 <bsd_os_errno_set>
   17fdc:	f04f 30ff 	mov.w	r0, #4294967295
   17fe0:	e6af      	b.n	17d42 <gnss_interface_setopt+0x26>
   17fe2:	202a      	movs	r0, #42	; 0x2a
   17fe4:	f7f9 fa40 	bl	11468 <bsd_os_errno_set>
   17fe8:	f04f 30ff 	mov.w	r0, #4294967295
   17fec:	e6a9      	b.n	17d42 <gnss_interface_setopt+0x26>
   17fee:	2009      	movs	r0, #9
   17ff0:	f7f9 fa3a 	bl	11468 <bsd_os_errno_set>
   17ff4:	f04f 30ff 	mov.w	r0, #4294967295
   17ff8:	e6a3      	b.n	17d42 <gnss_interface_setopt+0x26>
   17ffa:	2073      	movs	r0, #115	; 0x73
   17ffc:	f7f9 fa34 	bl	11468 <bsd_os_errno_set>
   18000:	f04f 30ff 	mov.w	r0, #4294967295
   18004:	e69d      	b.n	17d42 <gnss_interface_setopt+0x26>
   18006:	bf00      	nop
   18008:	20020d34 	.word	0x20020d34
   1800c:	49765443 	.word	0x49765443
   18010:	20020060 	.word	0x20020060
   18014:	20020d3c 	.word	0x20020d3c
   18018:	200219d6 	.word	0x200219d6
   1801c:	20020d38 	.word	0x20020d38

00018020 <gnss_interface_getopt>:
   18020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18024:	4c81      	ldr	r4, [pc, #516]	; (1822c <gnss_interface_getopt+0x20c>)
   18026:	b087      	sub	sp, #28
   18028:	6825      	ldr	r5, [r4, #0]
   1802a:	4698      	mov	r8, r3
   1802c:	b2ad      	uxth	r5, r5
   1802e:	2d02      	cmp	r5, #2
   18030:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18032:	f040 80dd 	bne.w	181f0 <gnss_interface_getopt+0x1d0>
   18036:	6825      	ldr	r5, [r4, #0]
   18038:	03ee      	lsls	r6, r5, #15
   1803a:	f100 80eb 	bmi.w	18214 <gnss_interface_getopt+0x1f4>
   1803e:	6825      	ldr	r5, [r4, #0]
   18040:	01ed      	lsls	r5, r5, #7
   18042:	f100 80ed 	bmi.w	18220 <gnss_interface_getopt+0x200>
   18046:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   1804a:	f040 80d7 	bne.w	181fc <gnss_interface_getopt+0x1dc>
   1804e:	4978      	ldr	r1, [pc, #480]	; (18230 <gnss_interface_getopt+0x210>)
   18050:	4288      	cmp	r0, r1
   18052:	f040 80d9 	bne.w	18208 <gnss_interface_getopt+0x1e8>
   18056:	f1b8 0f00 	cmp.w	r8, #0
   1805a:	d00b      	beq.n	18074 <gnss_interface_getopt+0x54>
   1805c:	b153      	cbz	r3, 18074 <gnss_interface_getopt+0x54>
   1805e:	1e57      	subs	r7, r2, #1
   18060:	2f05      	cmp	r7, #5
   18062:	d807      	bhi.n	18074 <gnss_interface_getopt+0x54>
   18064:	e8df f007 	tbb	[pc, r7]
   18068:	0f030f0f 	.word	0x0f030f0f
   1806c:	0303      	.short	0x0303
   1806e:	681b      	ldr	r3, [r3, #0]
   18070:	2b01      	cmp	r3, #1
   18072:	d00b      	beq.n	1808c <gnss_interface_getopt+0x6c>
   18074:	2016      	movs	r0, #22
   18076:	f7f9 f9f7 	bl	11468 <bsd_os_errno_set>
   1807a:	f04f 35ff 	mov.w	r5, #4294967295
   1807e:	4628      	mov	r0, r5
   18080:	b007      	add	sp, #28
   18082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18086:	681b      	ldr	r3, [r3, #0]
   18088:	2b02      	cmp	r3, #2
   1808a:	d1f3      	bne.n	18074 <gnss_interface_getopt+0x54>
   1808c:	6823      	ldr	r3, [r4, #0]
   1808e:	2212      	movs	r2, #18
   18090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   18094:	2100      	movs	r1, #0
   18096:	a801      	add	r0, sp, #4
   18098:	6023      	str	r3, [r4, #0]
   1809a:	f006 fc27 	bl	1e8ec <memset>
   1809e:	2112      	movs	r1, #18
   180a0:	4668      	mov	r0, sp
   180a2:	f002 f985 	bl	1a3b0 <rpc_gnss_client_request_alloc>
   180a6:	4605      	mov	r5, r0
   180a8:	9800      	ldr	r0, [sp, #0]
   180aa:	2d00      	cmp	r5, #0
   180ac:	f040 808a 	bne.w	181c4 <gnss_interface_getopt+0x1a4>
   180b0:	2800      	cmp	r0, #0
   180b2:	f000 808e 	beq.w	181d2 <gnss_interface_getopt+0x1b2>
   180b6:	f241 1602 	movw	r6, #4354	; 0x1102
   180ba:	f04f 0e49 	mov.w	lr, #73	; 0x49
   180be:	2212      	movs	r2, #18
   180c0:	f04f 0976 	mov.w	r9, #118	; 0x76
   180c4:	f04f 0b43 	mov.w	fp, #67	; 0x43
   180c8:	f04f 0a54 	mov.w	sl, #84	; 0x54
   180cc:	f8df c168 	ldr.w	ip, [pc, #360]	; 18238 <gnss_interface_getopt+0x218>
   180d0:	f880 e00f 	strb.w	lr, [r0, #15]
   180d4:	f8bc 3000 	ldrh.w	r3, [ip]
   180d8:	f880 900e 	strb.w	r9, [r0, #14]
   180dc:	3301      	adds	r3, #1
   180de:	b29b      	uxth	r3, r3
   180e0:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   180e4:	f8cd e004 	str.w	lr, [sp, #4]
   180e8:	7145      	strb	r5, [r0, #5]
   180ea:	7185      	strb	r5, [r0, #6]
   180ec:	71c5      	strb	r5, [r0, #7]
   180ee:	7205      	strb	r5, [r0, #8]
   180f0:	7245      	strb	r5, [r0, #9]
   180f2:	7285      	strb	r5, [r0, #10]
   180f4:	72c5      	strb	r5, [r0, #11]
   180f6:	a901      	add	r1, sp, #4
   180f8:	7102      	strb	r2, [r0, #4]
   180fa:	f880 b00c 	strb.w	fp, [r0, #12]
   180fe:	f880 a00d 	strb.w	sl, [r0, #13]
   18102:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1823c <gnss_interface_getopt+0x21c>
   18106:	6800      	ldr	r0, [r0, #0]
   18108:	f8ac 3000 	strh.w	r3, [ip]
   1810c:	f006 fbc3 	bl	1e896 <memcpy>
   18110:	4631      	mov	r1, r6
   18112:	9800      	ldr	r0, [sp, #0]
   18114:	f8c9 5000 	str.w	r5, [r9]
   18118:	f002 f95e 	bl	1a3d8 <rpc_gnss_client_request_send>
   1811c:	2800      	cmp	r0, #0
   1811e:	d15d      	bne.n	181dc <gnss_interface_getopt+0x1bc>
   18120:	4e44      	ldr	r6, [pc, #272]	; (18234 <gnss_interface_getopt+0x214>)
   18122:	4d43      	ldr	r5, [pc, #268]	; (18230 <gnss_interface_getopt+0x210>)
   18124:	4631      	mov	r1, r6
   18126:	4628      	mov	r0, r5
   18128:	f7f9 f8e6 	bl	112f8 <bsd_os_timedwait>
   1812c:	6823      	ldr	r3, [r4, #0]
   1812e:	01db      	lsls	r3, r3, #7
   18130:	d4f8      	bmi.n	18124 <gnss_interface_getopt+0x104>
   18132:	f8d9 0000 	ldr.w	r0, [r9]
   18136:	b1d8      	cbz	r0, 18170 <gnss_interface_getopt+0x150>
   18138:	6825      	ldr	r5, [r4, #0]
   1813a:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   1813e:	d00f      	beq.n	18160 <gnss_interface_getopt+0x140>
   18140:	2f05      	cmp	r7, #5
   18142:	d837      	bhi.n	181b4 <gnss_interface_getopt+0x194>
   18144:	e8df f007 	tbb	[pc, r7]
   18148:	2b26201a 	.word	0x2b26201a
   1814c:	0331      	.short	0x0331
   1814e:	2500      	movs	r5, #0
   18150:	7b43      	ldrb	r3, [r0, #13]
   18152:	f888 3000 	strb.w	r3, [r8]
   18156:	f002 f95d 	bl	1a414 <rpc_gnss_client_data_free>
   1815a:	2300      	movs	r3, #0
   1815c:	f8c9 3000 	str.w	r3, [r9]
   18160:	6823      	ldr	r3, [r4, #0]
   18162:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   18166:	6023      	str	r3, [r4, #0]
   18168:	4628      	mov	r0, r5
   1816a:	b007      	add	sp, #28
   1816c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18170:	6823      	ldr	r3, [r4, #0]
   18172:	4605      	mov	r5, r0
   18174:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   18178:	6023      	str	r3, [r4, #0]
   1817a:	e7f5      	b.n	18168 <gnss_interface_getopt+0x148>
   1817c:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   18180:	2500      	movs	r5, #0
   18182:	f8a8 3000 	strh.w	r3, [r8]
   18186:	e7e6      	b.n	18156 <gnss_interface_getopt+0x136>
   18188:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   1818c:	2500      	movs	r5, #0
   1818e:	f8a8 3000 	strh.w	r3, [r8]
   18192:	e7e0      	b.n	18156 <gnss_interface_getopt+0x136>
   18194:	7b83      	ldrb	r3, [r0, #14]
   18196:	2500      	movs	r5, #0
   18198:	f888 3000 	strb.w	r3, [r8]
   1819c:	e7db      	b.n	18156 <gnss_interface_getopt+0x136>
   1819e:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   181a2:	2500      	movs	r5, #0
   181a4:	f8a8 3000 	strh.w	r3, [r8]
   181a8:	e7d5      	b.n	18156 <gnss_interface_getopt+0x136>
   181aa:	7b03      	ldrb	r3, [r0, #12]
   181ac:	2500      	movs	r5, #0
   181ae:	f888 3000 	strb.w	r3, [r8]
   181b2:	e7d0      	b.n	18156 <gnss_interface_getopt+0x136>
   181b4:	2016      	movs	r0, #22
   181b6:	f7f9 f957 	bl	11468 <bsd_os_errno_set>
   181ba:	f04f 35ff 	mov.w	r5, #4294967295
   181be:	f8d9 0000 	ldr.w	r0, [r9]
   181c2:	e7c8      	b.n	18156 <gnss_interface_getopt+0x136>
   181c4:	b128      	cbz	r0, 181d2 <gnss_interface_getopt+0x1b2>
   181c6:	6803      	ldr	r3, [r0, #0]
   181c8:	b11b      	cbz	r3, 181d2 <gnss_interface_getopt+0x1b2>
   181ca:	4618      	mov	r0, r3
   181cc:	f002 f922 	bl	1a414 <rpc_gnss_client_data_free>
   181d0:	9800      	ldr	r0, [sp, #0]
   181d2:	f002 f917 	bl	1a404 <rpc_gnss_client_message_free>
   181d6:	2023      	movs	r0, #35	; 0x23
   181d8:	f7f9 f946 	bl	11468 <bsd_os_errno_set>
   181dc:	6823      	ldr	r3, [r4, #0]
   181de:	200e      	movs	r0, #14
   181e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   181e4:	6023      	str	r3, [r4, #0]
   181e6:	f04f 35ff 	mov.w	r5, #4294967295
   181ea:	f7f9 f93d 	bl	11468 <bsd_os_errno_set>
   181ee:	e746      	b.n	1807e <gnss_interface_getopt+0x5e>
   181f0:	200e      	movs	r0, #14
   181f2:	f7f9 f939 	bl	11468 <bsd_os_errno_set>
   181f6:	f04f 35ff 	mov.w	r5, #4294967295
   181fa:	e740      	b.n	1807e <gnss_interface_getopt+0x5e>
   181fc:	202a      	movs	r0, #42	; 0x2a
   181fe:	f7f9 f933 	bl	11468 <bsd_os_errno_set>
   18202:	f04f 35ff 	mov.w	r5, #4294967295
   18206:	e73a      	b.n	1807e <gnss_interface_getopt+0x5e>
   18208:	2009      	movs	r0, #9
   1820a:	f7f9 f92d 	bl	11468 <bsd_os_errno_set>
   1820e:	f04f 35ff 	mov.w	r5, #4294967295
   18212:	e734      	b.n	1807e <gnss_interface_getopt+0x5e>
   18214:	2005      	movs	r0, #5
   18216:	f7f9 f927 	bl	11468 <bsd_os_errno_set>
   1821a:	f04f 35ff 	mov.w	r5, #4294967295
   1821e:	e72e      	b.n	1807e <gnss_interface_getopt+0x5e>
   18220:	2073      	movs	r0, #115	; 0x73
   18222:	f7f9 f921 	bl	11468 <bsd_os_errno_set>
   18226:	f04f 35ff 	mov.w	r5, #4294967295
   1822a:	e728      	b.n	1807e <gnss_interface_getopt+0x5e>
   1822c:	20020d34 	.word	0x20020d34
   18230:	49765443 	.word	0x49765443
   18234:	20020060 	.word	0x20020060
   18238:	200219d6 	.word	0x200219d6
   1823c:	20020d38 	.word	0x20020d38

00018240 <gnss_interface_init>:
   18240:	2100      	movs	r1, #0
   18242:	b538      	push	{r3, r4, r5, lr}
   18244:	4c0a      	ldr	r4, [pc, #40]	; (18270 <gnss_interface_init+0x30>)
   18246:	4d0b      	ldr	r5, [pc, #44]	; (18274 <gnss_interface_init+0x34>)
   18248:	6822      	ldr	r2, [r4, #0]
   1824a:	480b      	ldr	r0, [pc, #44]	; (18278 <gnss_interface_init+0x38>)
   1824c:	4b0b      	ldr	r3, [pc, #44]	; (1827c <gnss_interface_init+0x3c>)
   1824e:	402a      	ands	r2, r5
   18250:	6022      	str	r2, [r4, #0]
   18252:	8001      	strh	r1, [r0, #0]
   18254:	6019      	str	r1, [r3, #0]
   18256:	f002 f8a5 	bl	1a3a4 <rpc_gnss_client_init>
   1825a:	b938      	cbnz	r0, 1826c <gnss_interface_init+0x2c>
   1825c:	2101      	movs	r1, #1
   1825e:	6823      	ldr	r3, [r4, #0]
   18260:	4a07      	ldr	r2, [pc, #28]	; (18280 <gnss_interface_init+0x40>)
   18262:	402b      	ands	r3, r5
   18264:	430b      	orrs	r3, r1
   18266:	7011      	strb	r1, [r2, #0]
   18268:	6023      	str	r3, [r4, #0]
   1826a:	bd38      	pop	{r3, r4, r5, pc}
   1826c:	2003      	movs	r0, #3
   1826e:	bd38      	pop	{r3, r4, r5, pc}
   18270:	20020d34 	.word	0x20020d34
   18274:	ffff0000 	.word	0xffff0000
   18278:	200219d6 	.word	0x200219d6
   1827c:	20020d38 	.word	0x20020d38
   18280:	200236c2 	.word	0x200236c2

00018284 <gnss_interface_open>:
   18284:	b510      	push	{r4, lr}
   18286:	4b1c      	ldr	r3, [pc, #112]	; (182f8 <gnss_interface_open+0x74>)
   18288:	781b      	ldrb	r3, [r3, #0]
   1828a:	b34b      	cbz	r3, 182e0 <gnss_interface_open+0x5c>
   1828c:	2902      	cmp	r1, #2
   1828e:	d121      	bne.n	182d4 <gnss_interface_open+0x50>
   18290:	4c1a      	ldr	r4, [pc, #104]	; (182fc <gnss_interface_open+0x78>)
   18292:	6823      	ldr	r3, [r4, #0]
   18294:	b29b      	uxth	r3, r3
   18296:	2b01      	cmp	r3, #1
   18298:	d116      	bne.n	182c8 <gnss_interface_open+0x44>
   1829a:	6823      	ldr	r3, [r4, #0]
   1829c:	4608      	mov	r0, r1
   1829e:	0c1b      	lsrs	r3, r3, #16
   182a0:	041b      	lsls	r3, r3, #16
   182a2:	f043 0302 	orr.w	r3, r3, #2
   182a6:	2200      	movs	r2, #0
   182a8:	4915      	ldr	r1, [pc, #84]	; (18300 <gnss_interface_open+0x7c>)
   182aa:	6023      	str	r3, [r4, #0]
   182ac:	f002 f99c 	bl	1a5e8 <packet_handler_create>
   182b0:	4a14      	ldr	r2, [pc, #80]	; (18304 <gnss_interface_open+0x80>)
   182b2:	6010      	str	r0, [r2, #0]
   182b4:	b1d0      	cbz	r0, 182ec <gnss_interface_open+0x68>
   182b6:	6823      	ldr	r3, [r4, #0]
   182b8:	6802      	ldr	r2, [r0, #0]
   182ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   182be:	6812      	ldr	r2, [r2, #0]
   182c0:	6023      	str	r3, [r4, #0]
   182c2:	4790      	blx	r2
   182c4:	4810      	ldr	r0, [pc, #64]	; (18308 <gnss_interface_open+0x84>)
   182c6:	bd10      	pop	{r4, pc}
   182c8:	2005      	movs	r0, #5
   182ca:	f7f9 f8cd 	bl	11468 <bsd_os_errno_set>
   182ce:	f04f 30ff 	mov.w	r0, #4294967295
   182d2:	bd10      	pop	{r4, pc}
   182d4:	2029      	movs	r0, #41	; 0x29
   182d6:	f7f9 f8c7 	bl	11468 <bsd_os_errno_set>
   182da:	f04f 30ff 	mov.w	r0, #4294967295
   182de:	bd10      	pop	{r4, pc}
   182e0:	2070      	movs	r0, #112	; 0x70
   182e2:	f7f9 f8c1 	bl	11468 <bsd_os_errno_set>
   182e6:	f04f 30ff 	mov.w	r0, #4294967295
   182ea:	bd10      	pop	{r4, pc}
   182ec:	200e      	movs	r0, #14
   182ee:	f7f9 f8bb 	bl	11468 <bsd_os_errno_set>
   182f2:	f04f 30ff 	mov.w	r0, #4294967295
   182f6:	bd10      	pop	{r4, pc}
   182f8:	200236c2 	.word	0x200236c2
   182fc:	20020d34 	.word	0x20020d34
   18300:	00017561 	.word	0x00017561
   18304:	20020d3c 	.word	0x20020d3c
   18308:	49765443 	.word	0x49765443

0001830c <gnss_interface_close>:
   1830c:	b530      	push	{r4, r5, lr}
   1830e:	4b15      	ldr	r3, [pc, #84]	; (18364 <gnss_interface_close+0x58>)
   18310:	b085      	sub	sp, #20
   18312:	4298      	cmp	r0, r3
   18314:	d11f      	bne.n	18356 <gnss_interface_close+0x4a>
   18316:	4c14      	ldr	r4, [pc, #80]	; (18368 <gnss_interface_close+0x5c>)
   18318:	6822      	ldr	r2, [r4, #0]
   1831a:	b292      	uxth	r2, r2
   1831c:	2a04      	cmp	r2, #4
   1831e:	d00f      	beq.n	18340 <gnss_interface_close+0x34>
   18320:	4d12      	ldr	r5, [pc, #72]	; (1836c <gnss_interface_close+0x60>)
   18322:	6828      	ldr	r0, [r5, #0]
   18324:	b118      	cbz	r0, 1832e <gnss_interface_close+0x22>
   18326:	f002 f97f 	bl	1a628 <packet_handler_delete>
   1832a:	2300      	movs	r3, #0
   1832c:	602b      	str	r3, [r5, #0]
   1832e:	2000      	movs	r0, #0
   18330:	6823      	ldr	r3, [r4, #0]
   18332:	0c1b      	lsrs	r3, r3, #16
   18334:	041b      	lsls	r3, r3, #16
   18336:	f043 0301 	orr.w	r3, r3, #1
   1833a:	6023      	str	r3, [r4, #0]
   1833c:	b005      	add	sp, #20
   1833e:	bd30      	pop	{r4, r5, pc}
   18340:	2100      	movs	r1, #0
   18342:	ab04      	add	r3, sp, #16
   18344:	f843 1d04 	str.w	r1, [r3, #-4]!
   18348:	9200      	str	r2, [sp, #0]
   1834a:	f44f 7101 	mov.w	r1, #516	; 0x204
   1834e:	2208      	movs	r2, #8
   18350:	f001 fea8 	bl	1a0a4 <nrf_setsockopt>
   18354:	e7e4      	b.n	18320 <gnss_interface_close+0x14>
   18356:	2009      	movs	r0, #9
   18358:	f7f9 f886 	bl	11468 <bsd_os_errno_set>
   1835c:	f04f 30ff 	mov.w	r0, #4294967295
   18360:	e7ec      	b.n	1833c <gnss_interface_close+0x30>
   18362:	bf00      	nop
   18364:	49765443 	.word	0x49765443
   18368:	20020d34 	.word	0x20020d34
   1836c:	20020d3c 	.word	0x20020d3c

00018370 <rpc_logobj_client_evt_handler>:
   18370:	b120      	cbz	r0, 1837c <rpc_logobj_client_evt_handler+0xc>
   18372:	f850 1b08 	ldr.w	r1, [r0], #8
   18376:	0c09      	lsrs	r1, r1, #16
   18378:	f7fb b94e 	b.w	13618 <logobj_event_handler>
   1837c:	4770      	bx	lr
   1837e:	bf00      	nop

00018380 <rpc_logobj_client_init>:
   18380:	4801      	ldr	r0, [pc, #4]	; (18388 <rpc_logobj_client_init+0x8>)
   18382:	f7ff b82f 	b.w	173e4 <rpc_client_register>
   18386:	bf00      	nop
   18388:	0002119c 	.word	0x0002119c

0001838c <rpc_logobj_client_request_alloc>:
   1838c:	2300      	movs	r3, #0
   1838e:	b510      	push	{r4, lr}
   18390:	b082      	sub	sp, #8
   18392:	9301      	str	r3, [sp, #4]
   18394:	b961      	cbnz	r1, 183b0 <rpc_logobj_client_request_alloc+0x24>
   18396:	b170      	cbz	r0, 183b6 <rpc_logobj_client_request_alloc+0x2a>
   18398:	4604      	mov	r4, r0
   1839a:	aa01      	add	r2, sp, #4
   1839c:	2009      	movs	r0, #9
   1839e:	f7ff f89b 	bl	174d8 <rpc_message_alloc>
   183a2:	b918      	cbnz	r0, 183ac <rpc_logobj_client_request_alloc+0x20>
   183a4:	9b01      	ldr	r3, [sp, #4]
   183a6:	b10b      	cbz	r3, 183ac <rpc_logobj_client_request_alloc+0x20>
   183a8:	3308      	adds	r3, #8
   183aa:	6023      	str	r3, [r4, #0]
   183ac:	b002      	add	sp, #8
   183ae:	bd10      	pop	{r4, pc}
   183b0:	200f      	movs	r0, #15
   183b2:	b002      	add	sp, #8
   183b4:	bd10      	pop	{r4, pc}
   183b6:	200e      	movs	r0, #14
   183b8:	b002      	add	sp, #8
   183ba:	bd10      	pop	{r4, pc}

000183bc <rpc_logobj_client_request_send>:
   183bc:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   183c0:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   183c4:	d10b      	bne.n	183de <rpc_logobj_client_request_send+0x22>
   183c6:	b160      	cbz	r0, 183e2 <rpc_logobj_client_request_send+0x26>
   183c8:	4603      	mov	r3, r0
   183ca:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   183ce:	2009      	movs	r0, #9
   183d0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   183d4:	f843 1d08 	str.w	r1, [r3, #-8]!
   183d8:	4619      	mov	r1, r3
   183da:	f7ff b86d 	b.w	174b8 <rpc_message_send>
   183de:	200f      	movs	r0, #15
   183e0:	4770      	bx	lr
   183e2:	200e      	movs	r0, #14
   183e4:	4770      	bx	lr
   183e6:	bf00      	nop

000183e8 <rpc_logobj_client_message_free>:
   183e8:	b120      	cbz	r0, 183f4 <rpc_logobj_client_message_free+0xc>
   183ea:	f1a0 0108 	sub.w	r1, r0, #8
   183ee:	2009      	movs	r0, #9
   183f0:	f7ff b89e 	b.w	17530 <rpc_message_free>
   183f4:	200e      	movs	r0, #14
   183f6:	4770      	bx	lr

000183f8 <rpc_logobj_client_data_free>:
   183f8:	b118      	cbz	r0, 18402 <rpc_logobj_client_data_free+0xa>
   183fa:	4601      	mov	r1, r0
   183fc:	2009      	movs	r0, #9
   183fe:	f7ff b8a3 	b.w	17548 <rpc_message_data_free>
   18402:	200e      	movs	r0, #14
   18404:	4770      	bx	lr
   18406:	bf00      	nop

00018408 <dfu_client_event_handler>:
   18408:	f850 1b08 	ldr.w	r1, [r0], #8
   1840c:	0c09      	lsrs	r1, r1, #16
   1840e:	f002 bec1 	b.w	1b194 <rpc_dfu_event_handler>
   18412:	bf00      	nop

00018414 <rpc_dfu_client_init>:
   18414:	4801      	ldr	r0, [pc, #4]	; (1841c <rpc_dfu_client_init+0x8>)
   18416:	f7fe bfe5 	b.w	173e4 <rpc_client_register>
   1841a:	bf00      	nop
   1841c:	000211ac 	.word	0x000211ac

00018420 <rpc_dfu_client_request_alloc>:
   18420:	2300      	movs	r3, #0
   18422:	b510      	push	{r4, lr}
   18424:	b082      	sub	sp, #8
   18426:	9301      	str	r3, [sp, #4]
   18428:	b158      	cbz	r0, 18442 <rpc_dfu_client_request_alloc+0x22>
   1842a:	4604      	mov	r4, r0
   1842c:	aa01      	add	r2, sp, #4
   1842e:	2006      	movs	r0, #6
   18430:	f7ff f852 	bl	174d8 <rpc_message_alloc>
   18434:	b918      	cbnz	r0, 1843e <rpc_dfu_client_request_alloc+0x1e>
   18436:	9b01      	ldr	r3, [sp, #4]
   18438:	b10b      	cbz	r3, 1843e <rpc_dfu_client_request_alloc+0x1e>
   1843a:	3308      	adds	r3, #8
   1843c:	6023      	str	r3, [r4, #0]
   1843e:	b002      	add	sp, #8
   18440:	bd10      	pop	{r4, pc}
   18442:	2007      	movs	r0, #7
   18444:	b002      	add	sp, #8
   18446:	bd10      	pop	{r4, pc}

00018448 <rpc_dfu_client_request_send>:
   18448:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   1844c:	d10b      	bne.n	18466 <rpc_dfu_client_request_send+0x1e>
   1844e:	b160      	cbz	r0, 1846a <rpc_dfu_client_request_send+0x22>
   18450:	4603      	mov	r3, r0
   18452:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   18456:	2006      	movs	r0, #6
   18458:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1845c:	f843 1d08 	str.w	r1, [r3, #-8]!
   18460:	4619      	mov	r1, r3
   18462:	f7ff b829 	b.w	174b8 <rpc_message_send>
   18466:	200f      	movs	r0, #15
   18468:	4770      	bx	lr
   1846a:	2007      	movs	r0, #7
   1846c:	4770      	bx	lr
   1846e:	bf00      	nop

00018470 <rpc_dfu_client_message_free>:
   18470:	b120      	cbz	r0, 1847c <rpc_dfu_client_message_free+0xc>
   18472:	f1a0 0108 	sub.w	r1, r0, #8
   18476:	2006      	movs	r0, #6
   18478:	f7ff b85a 	b.w	17530 <rpc_message_free>
   1847c:	2007      	movs	r0, #7
   1847e:	4770      	bx	lr

00018480 <rpc_dfu_client_data_free>:
   18480:	b118      	cbz	r0, 1848a <rpc_dfu_client_data_free+0xa>
   18482:	4601      	mov	r1, r0
   18484:	2006      	movs	r0, #6
   18486:	f7ff b85f 	b.w	17548 <rpc_message_data_free>
   1848a:	2007      	movs	r0, #7
   1848c:	4770      	bx	lr
   1848e:	bf00      	nop

00018490 <packet_free_cb>:
   18490:	6800      	ldr	r0, [r0, #0]
   18492:	f003 bbd9 	b.w	1bc48 <rpc_at_client_data_free>
   18496:	bf00      	nop

00018498 <at_interface_write>:
   18498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1849c:	b083      	sub	sp, #12
   1849e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   184a0:	2c00      	cmp	r4, #0
   184a2:	d16c      	bne.n	1857e <at_interface_write+0xe6>
   184a4:	4688      	mov	r8, r1
   184a6:	4615      	mov	r5, r2
   184a8:	461e      	mov	r6, r3
   184aa:	4607      	mov	r7, r0
   184ac:	f003 fa9e 	bl	1b9ec <interface_socket_from_handle_get>
   184b0:	4604      	mov	r4, r0
   184b2:	2e00      	cmp	r6, #0
   184b4:	d137      	bne.n	18526 <at_interface_write+0x8e>
   184b6:	2800      	cmp	r0, #0
   184b8:	d067      	beq.n	1858a <at_interface_write+0xf2>
   184ba:	6803      	ldr	r3, [r0, #0]
   184bc:	039b      	lsls	r3, r3, #14
   184be:	d564      	bpl.n	1858a <at_interface_write+0xf2>
   184c0:	6803      	ldr	r3, [r0, #0]
   184c2:	4629      	mov	r1, r5
   184c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   184c8:	6003      	str	r3, [r0, #0]
   184ca:	6803      	ldr	r3, [r0, #0]
   184cc:	4668      	mov	r0, sp
   184ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   184d2:	6023      	str	r3, [r4, #0]
   184d4:	f003 fb8e 	bl	1bbf4 <rpc_at_client_request_alloc>
   184d8:	4606      	mov	r6, r0
   184da:	4638      	mov	r0, r7
   184dc:	f003 fa86 	bl	1b9ec <interface_socket_from_handle_get>
   184e0:	4681      	mov	r9, r0
   184e2:	bb56      	cbnz	r6, 1853a <at_interface_write+0xa2>
   184e4:	2304      	movs	r3, #4
   184e6:	9800      	ldr	r0, [sp, #0]
   184e8:	7203      	strb	r3, [r0, #8]
   184ea:	7246      	strb	r6, [r0, #9]
   184ec:	7286      	strb	r6, [r0, #10]
   184ee:	72c6      	strb	r6, [r0, #11]
   184f0:	60c7      	str	r7, [r0, #12]
   184f2:	bb25      	cbnz	r5, 1853e <at_interface_write+0xa6>
   184f4:	2101      	movs	r1, #1
   184f6:	f003 fb91 	bl	1bc1c <rpc_at_client_request_send>
   184fa:	bb78      	cbnz	r0, 1855c <at_interface_write+0xc4>
   184fc:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   18500:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18504:	2900      	cmp	r1, #0
   18506:	bf08      	it	eq
   18508:	f04f 31ff 	moveq.w	r1, #4294967295
   1850c:	ab02      	add	r3, sp, #8
   1850e:	f843 1d04 	str.w	r1, [r3, #-4]!
   18512:	4638      	mov	r0, r7
   18514:	4611      	mov	r1, r2
   18516:	f003 f9f5 	bl	1b904 <interface_socket_wait>
   1851a:	b320      	cbz	r0, 18566 <at_interface_write+0xce>
   1851c:	6823      	ldr	r3, [r4, #0]
   1851e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18522:	6023      	str	r3, [r4, #0]
   18524:	e002      	b.n	1852c <at_interface_write+0x94>
   18526:	b390      	cbz	r0, 1858e <at_interface_write+0xf6>
   18528:	6803      	ldr	r3, [r0, #0]
   1852a:	202d      	movs	r0, #45	; 0x2d
   1852c:	f7f8 ff9c 	bl	11468 <bsd_os_errno_set>
   18530:	f04f 30ff 	mov.w	r0, #4294967295
   18534:	b003      	add	sp, #12
   18536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1853a:	200c      	movs	r0, #12
   1853c:	e7ee      	b.n	1851c <at_interface_write+0x84>
   1853e:	4641      	mov	r1, r8
   18540:	6800      	ldr	r0, [r0, #0]
   18542:	462a      	mov	r2, r5
   18544:	f006 f9a7 	bl	1e896 <memcpy>
   18548:	2101      	movs	r1, #1
   1854a:	9800      	ldr	r0, [sp, #0]
   1854c:	f003 fb66 	bl	1bc1c <rpc_at_client_request_send>
   18550:	2800      	cmp	r0, #0
   18552:	d0d3      	beq.n	184fc <at_interface_write+0x64>
   18554:	9b00      	ldr	r3, [sp, #0]
   18556:	6818      	ldr	r0, [r3, #0]
   18558:	f003 fb76 	bl	1bc48 <rpc_at_client_data_free>
   1855c:	9800      	ldr	r0, [sp, #0]
   1855e:	f003 fb6b 	bl	1bc38 <rpc_at_client_message_free>
   18562:	2023      	movs	r0, #35	; 0x23
   18564:	e7da      	b.n	1851c <at_interface_write+0x84>
   18566:	4638      	mov	r0, r7
   18568:	f003 fa40 	bl	1b9ec <interface_socket_from_handle_get>
   1856c:	4603      	mov	r3, r0
   1856e:	b120      	cbz	r0, 1857a <at_interface_write+0xe2>
   18570:	6840      	ldr	r0, [r0, #4]
   18572:	b110      	cbz	r0, 1857a <at_interface_write+0xe2>
   18574:	2200      	movs	r2, #0
   18576:	605a      	str	r2, [r3, #4]
   18578:	e7d0      	b.n	1851c <at_interface_write+0x84>
   1857a:	4628      	mov	r0, r5
   1857c:	e7da      	b.n	18534 <at_interface_write+0x9c>
   1857e:	2038      	movs	r0, #56	; 0x38
   18580:	f7f8 ff72 	bl	11468 <bsd_os_errno_set>
   18584:	f04f 30ff 	mov.w	r0, #4294967295
   18588:	e7d4      	b.n	18534 <at_interface_write+0x9c>
   1858a:	2016      	movs	r0, #22
   1858c:	e7ce      	b.n	1852c <at_interface_write+0x94>
   1858e:	202d      	movs	r0, #45	; 0x2d
   18590:	e7cc      	b.n	1852c <at_interface_write+0x94>
   18592:	bf00      	nop

00018594 <at_interface_init>:
   18594:	b508      	push	{r3, lr}
   18596:	f003 fb27 	bl	1bbe8 <rpc_at_client_init>
   1859a:	b910      	cbnz	r0, 185a2 <at_interface_init+0xe>
   1859c:	2201      	movs	r2, #1
   1859e:	4b01      	ldr	r3, [pc, #4]	; (185a4 <at_interface_init+0x10>)
   185a0:	701a      	strb	r2, [r3, #0]
   185a2:	bd08      	pop	{r3, pc}
   185a4:	200236c3 	.word	0x200236c3

000185a8 <at_interface_open>:
   185a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185ac:	2600      	movs	r6, #0
   185ae:	4b34      	ldr	r3, [pc, #208]	; (18680 <at_interface_open+0xd8>)
   185b0:	b084      	sub	sp, #16
   185b2:	781b      	ldrb	r3, [r3, #0]
   185b4:	9601      	str	r6, [sp, #4]
   185b6:	2b00      	cmp	r3, #0
   185b8:	d05c      	beq.n	18674 <at_interface_open+0xcc>
   185ba:	2902      	cmp	r1, #2
   185bc:	460d      	mov	r5, r1
   185be:	d153      	bne.n	18668 <at_interface_open+0xc0>
   185c0:	4680      	mov	r8, r0
   185c2:	4617      	mov	r7, r2
   185c4:	a801      	add	r0, sp, #4
   185c6:	4a2f      	ldr	r2, [pc, #188]	; (18684 <at_interface_open+0xdc>)
   185c8:	f003 f8ea 	bl	1b7a0 <interface_socket_allocate>
   185cc:	9b01      	ldr	r3, [sp, #4]
   185ce:	4604      	mov	r4, r0
   185d0:	b3c3      	cbz	r3, 18644 <at_interface_open+0x9c>
   185d2:	615f      	str	r7, [r3, #20]
   185d4:	4631      	mov	r1, r6
   185d6:	e9c3 8503 	strd	r8, r5, [r3, #12]
   185da:	a802      	add	r0, sp, #8
   185dc:	f003 fb0a 	bl	1bbf4 <rpc_at_client_request_alloc>
   185e0:	4606      	mov	r6, r0
   185e2:	4620      	mov	r0, r4
   185e4:	f003 fa02 	bl	1b9ec <interface_socket_from_handle_get>
   185e8:	4607      	mov	r7, r0
   185ea:	bb16      	cbnz	r6, 18632 <at_interface_open+0x8a>
   185ec:	2304      	movs	r3, #4
   185ee:	9802      	ldr	r0, [sp, #8]
   185f0:	2105      	movs	r1, #5
   185f2:	7246      	strb	r6, [r0, #9]
   185f4:	7286      	strb	r6, [r0, #10]
   185f6:	72c6      	strb	r6, [r0, #11]
   185f8:	7203      	strb	r3, [r0, #8]
   185fa:	60c4      	str	r4, [r0, #12]
   185fc:	f003 fb0e 	bl	1bc1c <rpc_at_client_request_send>
   18600:	4606      	mov	r6, r0
   18602:	bb60      	cbnz	r0, 1865e <at_interface_open+0xb6>
   18604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18606:	ab04      	add	r3, sp, #16
   18608:	2a00      	cmp	r2, #0
   1860a:	bf08      	it	eq
   1860c:	f04f 32ff 	moveq.w	r2, #4294967295
   18610:	4629      	mov	r1, r5
   18612:	f843 2d04 	str.w	r2, [r3, #-4]!
   18616:	4620      	mov	r0, r4
   18618:	462a      	mov	r2, r5
   1861a:	f003 f973 	bl	1b904 <interface_socket_wait>
   1861e:	4605      	mov	r5, r0
   18620:	b940      	cbnz	r0, 18634 <at_interface_open+0x8c>
   18622:	4620      	mov	r0, r4
   18624:	f003 f9e2 	bl	1b9ec <interface_socket_from_handle_get>
   18628:	b180      	cbz	r0, 1864c <at_interface_open+0xa4>
   1862a:	6845      	ldr	r5, [r0, #4]
   1862c:	b175      	cbz	r5, 1864c <at_interface_open+0xa4>
   1862e:	6046      	str	r6, [r0, #4]
   18630:	e000      	b.n	18634 <at_interface_open+0x8c>
   18632:	250c      	movs	r5, #12
   18634:	4620      	mov	r0, r4
   18636:	f003 f917 	bl	1b868 <interface_socket_free>
   1863a:	4628      	mov	r0, r5
   1863c:	f7f8 ff14 	bl	11468 <bsd_os_errno_set>
   18640:	f04f 34ff 	mov.w	r4, #4294967295
   18644:	4620      	mov	r0, r4
   18646:	b004      	add	sp, #16
   18648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1864c:	4620      	mov	r0, r4
   1864e:	9a01      	ldr	r2, [sp, #4]
   18650:	6813      	ldr	r3, [r2, #0]
   18652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18656:	6013      	str	r3, [r2, #0]
   18658:	b004      	add	sp, #16
   1865a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1865e:	9802      	ldr	r0, [sp, #8]
   18660:	f003 faea 	bl	1bc38 <rpc_at_client_message_free>
   18664:	2523      	movs	r5, #35	; 0x23
   18666:	e7e5      	b.n	18634 <at_interface_open+0x8c>
   18668:	2029      	movs	r0, #41	; 0x29
   1866a:	f7f8 fefd 	bl	11468 <bsd_os_errno_set>
   1866e:	f04f 34ff 	mov.w	r4, #4294967295
   18672:	e7e7      	b.n	18644 <at_interface_open+0x9c>
   18674:	2070      	movs	r0, #112	; 0x70
   18676:	f7f8 fef7 	bl	11468 <bsd_os_errno_set>
   1867a:	f04f 34ff 	mov.w	r4, #4294967295
   1867e:	e7e1      	b.n	18644 <at_interface_open+0x9c>
   18680:	200236c3 	.word	0x200236c3
   18684:	00018491 	.word	0x00018491

00018688 <at_interface_close>:
   18688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1868c:	b082      	sub	sp, #8
   1868e:	4606      	mov	r6, r0
   18690:	f003 f9ac 	bl	1b9ec <interface_socket_from_handle_get>
   18694:	2800      	cmp	r0, #0
   18696:	d051      	beq.n	1873c <at_interface_close+0xb4>
   18698:	230d      	movs	r3, #13
   1869a:	6807      	ldr	r7, [r0, #0]
   1869c:	6003      	str	r3, [r0, #0]
   1869e:	6803      	ldr	r3, [r0, #0]
   186a0:	4604      	mov	r4, r0
   186a2:	039b      	lsls	r3, r3, #14
   186a4:	d42e      	bmi.n	18704 <at_interface_close+0x7c>
   186a6:	2100      	movs	r1, #0
   186a8:	4668      	mov	r0, sp
   186aa:	f003 faa3 	bl	1bbf4 <rpc_at_client_request_alloc>
   186ae:	4605      	mov	r5, r0
   186b0:	4630      	mov	r0, r6
   186b2:	f003 f99b 	bl	1b9ec <interface_socket_from_handle_get>
   186b6:	4680      	mov	r8, r0
   186b8:	bb75      	cbnz	r5, 18718 <at_interface_close+0x90>
   186ba:	2304      	movs	r3, #4
   186bc:	9800      	ldr	r0, [sp, #0]
   186be:	2106      	movs	r1, #6
   186c0:	7203      	strb	r3, [r0, #8]
   186c2:	7245      	strb	r5, [r0, #9]
   186c4:	7285      	strb	r5, [r0, #10]
   186c6:	72c5      	strb	r5, [r0, #11]
   186c8:	60c6      	str	r6, [r0, #12]
   186ca:	f003 faa7 	bl	1bc1c <rpc_at_client_request_send>
   186ce:	b9f0      	cbnz	r0, 1870e <at_interface_close+0x86>
   186d0:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   186d4:	220e      	movs	r2, #14
   186d6:	2900      	cmp	r1, #0
   186d8:	bf08      	it	eq
   186da:	f04f 31ff 	moveq.w	r1, #4294967295
   186de:	ab02      	add	r3, sp, #8
   186e0:	f843 1d04 	str.w	r1, [r3, #-4]!
   186e4:	4630      	mov	r0, r6
   186e6:	4611      	mov	r1, r2
   186e8:	f003 f90c 	bl	1b904 <interface_socket_wait>
   186ec:	4605      	mov	r5, r0
   186ee:	b1a8      	cbz	r0, 1871c <at_interface_close+0x94>
   186f0:	6027      	str	r7, [r4, #0]
   186f2:	4628      	mov	r0, r5
   186f4:	f04f 35ff 	mov.w	r5, #4294967295
   186f8:	f7f8 feb6 	bl	11468 <bsd_os_errno_set>
   186fc:	4628      	mov	r0, r5
   186fe:	b002      	add	sp, #8
   18700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18704:	6803      	ldr	r3, [r0, #0]
   18706:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1870a:	6003      	str	r3, [r0, #0]
   1870c:	e7cb      	b.n	186a6 <at_interface_close+0x1e>
   1870e:	9800      	ldr	r0, [sp, #0]
   18710:	f003 fa92 	bl	1bc38 <rpc_at_client_message_free>
   18714:	2523      	movs	r5, #35	; 0x23
   18716:	e7eb      	b.n	186f0 <at_interface_close+0x68>
   18718:	250c      	movs	r5, #12
   1871a:	e7e9      	b.n	186f0 <at_interface_close+0x68>
   1871c:	4630      	mov	r0, r6
   1871e:	f003 f965 	bl	1b9ec <interface_socket_from_handle_get>
   18722:	b120      	cbz	r0, 1872e <at_interface_close+0xa6>
   18724:	6843      	ldr	r3, [r0, #4]
   18726:	b113      	cbz	r3, 1872e <at_interface_close+0xa6>
   18728:	6045      	str	r5, [r0, #4]
   1872a:	461d      	mov	r5, r3
   1872c:	e7e0      	b.n	186f0 <at_interface_close+0x68>
   1872e:	4630      	mov	r0, r6
   18730:	f003 f89a 	bl	1b868 <interface_socket_free>
   18734:	4628      	mov	r0, r5
   18736:	b002      	add	sp, #8
   18738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1873c:	2516      	movs	r5, #22
   1873e:	e7d8      	b.n	186f2 <at_interface_close+0x6a>

00018740 <at_interface_read>:
   18740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18744:	b087      	sub	sp, #28
   18746:	4688      	mov	r8, r1
   18748:	4615      	mov	r5, r2
   1874a:	461e      	mov	r6, r3
   1874c:	4607      	mov	r7, r0
   1874e:	f003 f94d 	bl	1b9ec <interface_socket_from_handle_get>
   18752:	2800      	cmp	r0, #0
   18754:	f000 8084 	beq.w	18860 <at_interface_read+0x120>
   18758:	2300      	movs	r3, #0
   1875a:	4604      	mov	r4, r0
   1875c:	e9cd 8502 	strd	r8, r5, [sp, #8]
   18760:	e9cd 3304 	strd	r3, r3, [sp, #16]
   18764:	2e00      	cmp	r6, #0
   18766:	d12d      	bne.n	187c4 <at_interface_read+0x84>
   18768:	f016 0502 	ands.w	r5, r6, #2
   1876c:	d148      	bne.n	18800 <at_interface_read+0xc0>
   1876e:	46a8      	mov	r8, r5
   18770:	6823      	ldr	r3, [r4, #0]
   18772:	69e0      	ldr	r0, [r4, #28]
   18774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   18778:	6023      	str	r3, [r4, #0]
   1877a:	6803      	ldr	r3, [r0, #0]
   1877c:	4632      	mov	r2, r6
   1877e:	689b      	ldr	r3, [r3, #8]
   18780:	a902      	add	r1, sp, #8
   18782:	4798      	blx	r3
   18784:	f1b0 0900 	subs.w	r9, r0, #0
   18788:	da2a      	bge.n	187e0 <at_interface_read+0xa0>
   1878a:	2d00      	cmp	r5, #0
   1878c:	d15e      	bne.n	1884c <at_interface_read+0x10c>
   1878e:	6a25      	ldr	r5, [r4, #32]
   18790:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18794:	2d00      	cmp	r5, #0
   18796:	bf08      	it	eq
   18798:	f04f 35ff 	moveq.w	r5, #4294967295
   1879c:	4611      	mov	r1, r2
   1879e:	ab01      	add	r3, sp, #4
   187a0:	4638      	mov	r0, r7
   187a2:	9501      	str	r5, [sp, #4]
   187a4:	f003 f8ae 	bl	1b904 <interface_socket_wait>
   187a8:	4605      	mov	r5, r0
   187aa:	2800      	cmp	r0, #0
   187ac:	d1e0      	bne.n	18770 <at_interface_read+0x30>
   187ae:	4638      	mov	r0, r7
   187b0:	f003 f91c 	bl	1b9ec <interface_socket_from_handle_get>
   187b4:	2800      	cmp	r0, #0
   187b6:	d0db      	beq.n	18770 <at_interface_read+0x30>
   187b8:	6845      	ldr	r5, [r0, #4]
   187ba:	2d00      	cmp	r5, #0
   187bc:	d0d8      	beq.n	18770 <at_interface_read+0x30>
   187be:	f8c0 8004 	str.w	r8, [r0, #4]
   187c2:	e7d5      	b.n	18770 <at_interface_read+0x30>
   187c4:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   187c8:	d1ce      	bne.n	18768 <at_interface_read+0x28>
   187ca:	252d      	movs	r5, #45	; 0x2d
   187cc:	f04f 39ff 	mov.w	r9, #4294967295
   187d0:	4628      	mov	r0, r5
   187d2:	f7f8 fe49 	bl	11468 <bsd_os_errno_set>
   187d6:	4648      	mov	r0, r9
   187d8:	b007      	add	sp, #28
   187da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   187de:	2500      	movs	r5, #0
   187e0:	69e0      	ldr	r0, [r4, #28]
   187e2:	6803      	ldr	r3, [r0, #0]
   187e4:	68db      	ldr	r3, [r3, #12]
   187e6:	4798      	blx	r3
   187e8:	3001      	adds	r0, #1
   187ea:	d003      	beq.n	187f4 <at_interface_read+0xb4>
   187ec:	6823      	ldr	r3, [r4, #0]
   187ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   187f2:	6023      	str	r3, [r4, #0]
   187f4:	2d00      	cmp	r5, #0
   187f6:	d1eb      	bne.n	187d0 <at_interface_read+0x90>
   187f8:	4648      	mov	r0, r9
   187fa:	b007      	add	sp, #28
   187fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18800:	6823      	ldr	r3, [r4, #0]
   18802:	69e0      	ldr	r0, [r4, #28]
   18804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   18808:	6023      	str	r3, [r4, #0]
   1880a:	6803      	ldr	r3, [r0, #0]
   1880c:	4632      	mov	r2, r6
   1880e:	689b      	ldr	r3, [r3, #8]
   18810:	a902      	add	r1, sp, #8
   18812:	4798      	blx	r3
   18814:	f1b0 0900 	subs.w	r9, r0, #0
   18818:	dae1      	bge.n	187de <at_interface_read+0x9e>
   1881a:	69e0      	ldr	r0, [r4, #28]
   1881c:	f1b9 3fff 	cmp.w	r9, #4294967295
   18820:	6803      	ldr	r3, [r0, #0]
   18822:	68db      	ldr	r3, [r3, #12]
   18824:	d10a      	bne.n	1883c <at_interface_read+0xfc>
   18826:	2523      	movs	r5, #35	; 0x23
   18828:	4798      	blx	r3
   1882a:	3001      	adds	r0, #1
   1882c:	d0ce      	beq.n	187cc <at_interface_read+0x8c>
   1882e:	6823      	ldr	r3, [r4, #0]
   18830:	f04f 39ff 	mov.w	r9, #4294967295
   18834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   18838:	6023      	str	r3, [r4, #0]
   1883a:	e7db      	b.n	187f4 <at_interface_read+0xb4>
   1883c:	4798      	blx	r3
   1883e:	3001      	adds	r0, #1
   18840:	d0c9      	beq.n	187d6 <at_interface_read+0x96>
   18842:	6823      	ldr	r3, [r4, #0]
   18844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   18848:	6023      	str	r3, [r4, #0]
   1884a:	e7c4      	b.n	187d6 <at_interface_read+0x96>
   1884c:	69e0      	ldr	r0, [r4, #28]
   1884e:	f1b9 3fff 	cmp.w	r9, #4294967295
   18852:	6803      	ldr	r3, [r0, #0]
   18854:	68db      	ldr	r3, [r3, #12]
   18856:	d0e7      	beq.n	18828 <at_interface_read+0xe8>
   18858:	4798      	blx	r3
   1885a:	3001      	adds	r0, #1
   1885c:	d1c6      	bne.n	187ec <at_interface_read+0xac>
   1885e:	e7b7      	b.n	187d0 <at_interface_read+0x90>
   18860:	2516      	movs	r5, #22
   18862:	e7b3      	b.n	187cc <at_interface_read+0x8c>

00018864 <at_interface_getopt>:
   18864:	f003 b930 	b.w	1bac8 <interface_socket_getopt>

00018868 <at_interface_setopt>:
   18868:	f003 b8e8 	b.w	1ba3c <interface_socket_setopt>

0001886c <rpc_at_event_handler>:
   1886c:	b570      	push	{r4, r5, r6, lr}
   1886e:	4606      	mov	r6, r0
   18870:	b084      	sub	sp, #16
   18872:	68c0      	ldr	r0, [r0, #12]
   18874:	460d      	mov	r5, r1
   18876:	f003 f8b9 	bl	1b9ec <interface_socket_from_handle_get>
   1887a:	4604      	mov	r4, r0
   1887c:	b348      	cbz	r0, 188d2 <rpc_at_event_handler+0x66>
   1887e:	6803      	ldr	r3, [r0, #0]
   18880:	b29b      	uxth	r3, r3
   18882:	2b01      	cmp	r3, #1
   18884:	d01f      	beq.n	188c6 <rpc_at_event_handler+0x5a>
   18886:	6803      	ldr	r3, [r0, #0]
   18888:	b29b      	uxth	r3, r3
   1888a:	2b0d      	cmp	r3, #13
   1888c:	d029      	beq.n	188e2 <rpc_at_event_handler+0x76>
   1888e:	6803      	ldr	r3, [r0, #0]
   18890:	b29b      	uxth	r3, r3
   18892:	2b02      	cmp	r3, #2
   18894:	d02d      	beq.n	188f2 <rpc_at_event_handler+0x86>
   18896:	3d03      	subs	r5, #3
   18898:	2d01      	cmp	r5, #1
   1889a:	d817      	bhi.n	188cc <rpc_at_event_handler+0x60>
   1889c:	2500      	movs	r5, #0
   1889e:	6873      	ldr	r3, [r6, #4]
   188a0:	6832      	ldr	r2, [r6, #0]
   188a2:	e9cd 5502 	strd	r5, r5, [sp, #8]
   188a6:	e9cd 2300 	strd	r2, r3, [sp]
   188aa:	69e0      	ldr	r0, [r4, #28]
   188ac:	4669      	mov	r1, sp
   188ae:	6803      	ldr	r3, [r0, #0]
   188b0:	685b      	ldr	r3, [r3, #4]
   188b2:	4798      	blx	r3
   188b4:	3001      	adds	r0, #1
   188b6:	d019      	beq.n	188ec <rpc_at_event_handler+0x80>
   188b8:	4628      	mov	r0, r5
   188ba:	6823      	ldr	r3, [r4, #0]
   188bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   188c0:	6023      	str	r3, [r4, #0]
   188c2:	b004      	add	sp, #16
   188c4:	bd70      	pop	{r4, r5, r6, pc}
   188c6:	2d02      	cmp	r5, #2
   188c8:	d1e5      	bne.n	18896 <rpc_at_event_handler+0x2a>
   188ca:	6005      	str	r5, [r0, #0]
   188cc:	2000      	movs	r0, #0
   188ce:	b004      	add	sp, #16
   188d0:	bd70      	pop	{r4, r5, r6, pc}
   188d2:	6830      	ldr	r0, [r6, #0]
   188d4:	2800      	cmp	r0, #0
   188d6:	d0f9      	beq.n	188cc <rpc_at_event_handler+0x60>
   188d8:	f003 f9b6 	bl	1bc48 <rpc_at_client_data_free>
   188dc:	4620      	mov	r0, r4
   188de:	b004      	add	sp, #16
   188e0:	bd70      	pop	{r4, r5, r6, pc}
   188e2:	2d02      	cmp	r5, #2
   188e4:	d1d7      	bne.n	18896 <rpc_at_event_handler+0x2a>
   188e6:	230e      	movs	r3, #14
   188e8:	6003      	str	r3, [r0, #0]
   188ea:	e7ef      	b.n	188cc <rpc_at_event_handler+0x60>
   188ec:	2002      	movs	r0, #2
   188ee:	b004      	add	sp, #16
   188f0:	bd70      	pop	{r4, r5, r6, pc}
   188f2:	6803      	ldr	r3, [r0, #0]
   188f4:	029b      	lsls	r3, r3, #10
   188f6:	d5ce      	bpl.n	18896 <rpc_at_event_handler+0x2a>
   188f8:	2d02      	cmp	r5, #2
   188fa:	d1cc      	bne.n	18896 <rpc_at_event_handler+0x2a>
   188fc:	6803      	ldr	r3, [r0, #0]
   188fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   18902:	6003      	str	r3, [r0, #0]
   18904:	6803      	ldr	r3, [r0, #0]
   18906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1890a:	6003      	str	r3, [r0, #0]
   1890c:	e7de      	b.n	188cc <rpc_at_event_handler+0x60>
   1890e:	bf00      	nop

00018910 <ok_rsp_parser>:
   18910:	2000      	movs	r0, #0
   18912:	4770      	bx	lr

00018914 <pdn_state_get_parser>:
   18914:	2200      	movs	r2, #0
   18916:	b570      	push	{r4, r5, r6, lr}
   18918:	780b      	ldrb	r3, [r1, #0]
   1891a:	b084      	sub	sp, #16
   1891c:	460e      	mov	r6, r1
   1891e:	e9cd 2200 	strd	r2, r2, [sp]
   18922:	e9cd 2202 	strd	r2, r2, [sp, #8]
   18926:	b323      	cbz	r3, 18972 <pdn_state_get_parser+0x5e>
   18928:	460c      	mov	r4, r1
   1892a:	2b20      	cmp	r3, #32
   1892c:	460d      	mov	r5, r1
   1892e:	d01b      	beq.n	18968 <pdn_state_get_parser+0x54>
   18930:	700b      	strb	r3, [r1, #0]
   18932:	3201      	adds	r2, #1
   18934:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   18938:	18b1      	adds	r1, r6, r2
   1893a:	460d      	mov	r5, r1
   1893c:	2b00      	cmp	r3, #0
   1893e:	d1f4      	bne.n	1892a <pdn_state_get_parser+0x16>
   18940:	2200      	movs	r2, #0
   18942:	4b0d      	ldr	r3, [pc, #52]	; (18978 <pdn_state_get_parser+0x64>)
   18944:	702a      	strb	r2, [r5, #0]
   18946:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1894a:	4a0c      	ldr	r2, [pc, #48]	; (1897c <pdn_state_get_parser+0x68>)
   1894c:	681b      	ldr	r3, [r3, #0]
   1894e:	2110      	movs	r1, #16
   18950:	4668      	mov	r0, sp
   18952:	f7f7 fe61 	bl	10618 <snprintf>
   18956:	4669      	mov	r1, sp
   18958:	4630      	mov	r0, r6
   1895a:	f005 ff29 	bl	1e7b0 <strstr>
   1895e:	3000      	adds	r0, #0
   18960:	bf18      	it	ne
   18962:	2001      	movne	r0, #1
   18964:	b004      	add	sp, #16
   18966:	bd70      	pop	{r4, r5, r6, pc}
   18968:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1896c:	2b00      	cmp	r3, #0
   1896e:	d1dc      	bne.n	1892a <pdn_state_get_parser+0x16>
   18970:	e7e6      	b.n	18940 <pdn_state_get_parser+0x2c>
   18972:	460d      	mov	r5, r1
   18974:	e7e4      	b.n	18940 <pdn_state_get_parser+0x2c>
   18976:	bf00      	nop
   18978:	20020e44 	.word	0x20020e44
   1897c:	00021278 	.word	0x00021278

00018980 <pdn_id_get_parser>:
   18980:	b570      	push	{r4, r5, r6, lr}
   18982:	780b      	ldrb	r3, [r1, #0]
   18984:	4606      	mov	r6, r0
   18986:	b313      	cbz	r3, 189ce <pdn_id_get_parser+0x4e>
   18988:	4608      	mov	r0, r1
   1898a:	2400      	movs	r4, #0
   1898c:	460a      	mov	r2, r1
   1898e:	2b20      	cmp	r3, #32
   18990:	4615      	mov	r5, r2
   18992:	d017      	beq.n	189c4 <pdn_id_get_parser+0x44>
   18994:	7013      	strb	r3, [r2, #0]
   18996:	3401      	adds	r4, #1
   18998:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1899c:	190a      	adds	r2, r1, r4
   1899e:	4615      	mov	r5, r2
   189a0:	2b00      	cmp	r3, #0
   189a2:	d1f4      	bne.n	1898e <pdn_id_get_parser+0xe>
   189a4:	2300      	movs	r3, #0
   189a6:	4608      	mov	r0, r1
   189a8:	702b      	strb	r3, [r5, #0]
   189aa:	213a      	movs	r1, #58	; 0x3a
   189ac:	f005 ff33 	bl	1e816 <strchr>
   189b0:	b130      	cbz	r0, 189c0 <pdn_id_get_parser+0x40>
   189b2:	3001      	adds	r0, #1
   189b4:	f005 fde7 	bl	1e586 <atoi>
   189b8:	4b06      	ldr	r3, [pc, #24]	; (189d4 <pdn_id_get_parser+0x54>)
   189ba:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   189be:	6058      	str	r0, [r3, #4]
   189c0:	2000      	movs	r0, #0
   189c2:	bd70      	pop	{r4, r5, r6, pc}
   189c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   189c8:	2b00      	cmp	r3, #0
   189ca:	d1e0      	bne.n	1898e <pdn_id_get_parser+0xe>
   189cc:	e7ea      	b.n	189a4 <pdn_id_get_parser+0x24>
   189ce:	460d      	mov	r5, r1
   189d0:	e7e8      	b.n	189a4 <pdn_id_get_parser+0x24>
   189d2:	bf00      	nop
   189d4:	20020e44 	.word	0x20020e44

000189d8 <context_create_parser>:
   189d8:	b570      	push	{r4, r5, r6, lr}
   189da:	780b      	ldrb	r3, [r1, #0]
   189dc:	4606      	mov	r6, r0
   189de:	b313      	cbz	r3, 18a26 <context_create_parser+0x4e>
   189e0:	4608      	mov	r0, r1
   189e2:	2400      	movs	r4, #0
   189e4:	460a      	mov	r2, r1
   189e6:	2b20      	cmp	r3, #32
   189e8:	4615      	mov	r5, r2
   189ea:	d017      	beq.n	18a1c <context_create_parser+0x44>
   189ec:	7013      	strb	r3, [r2, #0]
   189ee:	3401      	adds	r4, #1
   189f0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   189f4:	190a      	adds	r2, r1, r4
   189f6:	4615      	mov	r5, r2
   189f8:	2b00      	cmp	r3, #0
   189fa:	d1f4      	bne.n	189e6 <context_create_parser+0xe>
   189fc:	2300      	movs	r3, #0
   189fe:	4608      	mov	r0, r1
   18a00:	702b      	strb	r3, [r5, #0]
   18a02:	213a      	movs	r1, #58	; 0x3a
   18a04:	f005 ff07 	bl	1e816 <strchr>
   18a08:	b130      	cbz	r0, 18a18 <context_create_parser+0x40>
   18a0a:	4b08      	ldr	r3, [pc, #32]	; (18a2c <context_create_parser+0x54>)
   18a0c:	3001      	adds	r0, #1
   18a0e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   18a12:	f005 fdb8 	bl	1e586 <atoi>
   18a16:	6020      	str	r0, [r4, #0]
   18a18:	2000      	movs	r0, #0
   18a1a:	bd70      	pop	{r4, r5, r6, pc}
   18a1c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   18a20:	2b00      	cmp	r3, #0
   18a22:	d1e0      	bne.n	189e6 <context_create_parser+0xe>
   18a24:	e7ea      	b.n	189fc <context_create_parser+0x24>
   18a26:	460d      	mov	r5, r1
   18a28:	e7e8      	b.n	189fc <context_create_parser+0x24>
   18a2a:	bf00      	nop
   18a2c:	20020e44 	.word	0x20020e44

00018a30 <pdn_interface_init>:
   18a30:	f04f 33ff 	mov.w	r3, #4294967295
   18a34:	b510      	push	{r4, lr}
   18a36:	4c0b      	ldr	r4, [pc, #44]	; (18a64 <pdn_interface_init+0x34>)
   18a38:	2228      	movs	r2, #40	; 0x28
   18a3a:	2100      	movs	r1, #0
   18a3c:	480a      	ldr	r0, [pc, #40]	; (18a68 <pdn_interface_init+0x38>)
   18a3e:	6023      	str	r3, [r4, #0]
   18a40:	f005 ff54 	bl	1e8ec <memset>
   18a44:	f240 2201 	movw	r2, #513	; 0x201
   18a48:	2102      	movs	r1, #2
   18a4a:	2066      	movs	r0, #102	; 0x66
   18a4c:	f7ff fdac 	bl	185a8 <at_interface_open>
   18a50:	2800      	cmp	r0, #0
   18a52:	6020      	str	r0, [r4, #0]
   18a54:	db04      	blt.n	18a60 <pdn_interface_init+0x30>
   18a56:	2201      	movs	r2, #1
   18a58:	4b04      	ldr	r3, [pc, #16]	; (18a6c <pdn_interface_init+0x3c>)
   18a5a:	2000      	movs	r0, #0
   18a5c:	701a      	strb	r2, [r3, #0]
   18a5e:	bd10      	pop	{r4, pc}
   18a60:	2003      	movs	r0, #3
   18a62:	bd10      	pop	{r4, pc}
   18a64:	20020d40 	.word	0x20020d40
   18a68:	20020e44 	.word	0x20020e44
   18a6c:	200236c4 	.word	0x200236c4

00018a70 <pdn_interface_open>:
   18a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18a74:	4b68      	ldr	r3, [pc, #416]	; (18c18 <pdn_interface_open+0x1a8>)
   18a76:	b083      	sub	sp, #12
   18a78:	781b      	ldrb	r3, [r3, #0]
   18a7a:	2b00      	cmp	r3, #0
   18a7c:	f000 80c5 	beq.w	18c0a <pdn_interface_open+0x19a>
   18a80:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   18a84:	f040 80b0 	bne.w	18be8 <pdn_interface_open+0x178>
   18a88:	4c64      	ldr	r4, [pc, #400]	; (18c1c <pdn_interface_open+0x1ac>)
   18a8a:	6825      	ldr	r5, [r4, #0]
   18a8c:	b34d      	cbz	r5, 18ae2 <pdn_interface_open+0x72>
   18a8e:	6863      	ldr	r3, [r4, #4]
   18a90:	2b00      	cmp	r3, #0
   18a92:	f000 809b 	beq.w	18bcc <pdn_interface_open+0x15c>
   18a96:	68a3      	ldr	r3, [r4, #8]
   18a98:	2b00      	cmp	r3, #0
   18a9a:	f000 8099 	beq.w	18bd0 <pdn_interface_open+0x160>
   18a9e:	68e3      	ldr	r3, [r4, #12]
   18aa0:	2b00      	cmp	r3, #0
   18aa2:	f000 8097 	beq.w	18bd4 <pdn_interface_open+0x164>
   18aa6:	6923      	ldr	r3, [r4, #16]
   18aa8:	2b00      	cmp	r3, #0
   18aaa:	f000 8095 	beq.w	18bd8 <pdn_interface_open+0x168>
   18aae:	6963      	ldr	r3, [r4, #20]
   18ab0:	2b00      	cmp	r3, #0
   18ab2:	f000 8093 	beq.w	18bdc <pdn_interface_open+0x16c>
   18ab6:	69a3      	ldr	r3, [r4, #24]
   18ab8:	2b00      	cmp	r3, #0
   18aba:	f000 8091 	beq.w	18be0 <pdn_interface_open+0x170>
   18abe:	69e3      	ldr	r3, [r4, #28]
   18ac0:	2b00      	cmp	r3, #0
   18ac2:	f000 808f 	beq.w	18be4 <pdn_interface_open+0x174>
   18ac6:	6a23      	ldr	r3, [r4, #32]
   18ac8:	b153      	cbz	r3, 18ae0 <pdn_interface_open+0x70>
   18aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18acc:	2509      	movs	r5, #9
   18ace:	b143      	cbz	r3, 18ae2 <pdn_interface_open+0x72>
   18ad0:	200c      	movs	r0, #12
   18ad2:	f7f8 fcc9 	bl	11468 <bsd_os_errno_set>
   18ad6:	f04f 30ff 	mov.w	r0, #4294967295
   18ada:	b003      	add	sp, #12
   18adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18ae0:	2508      	movs	r5, #8
   18ae2:	2020      	movs	r0, #32
   18ae4:	f002 fa7a 	bl	1afdc <nrf_malloc>
   18ae8:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   18aec:	2800      	cmp	r0, #0
   18aee:	d0ef      	beq.n	18ad0 <pdn_interface_open+0x60>
   18af0:	2220      	movs	r2, #32
   18af2:	2100      	movs	r1, #0
   18af4:	f005 fefa 	bl	1e8ec <memset>
   18af8:	2101      	movs	r1, #1
   18afa:	2003      	movs	r0, #3
   18afc:	f04f 37ff 	mov.w	r7, #4294967295
   18b00:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   18b04:	4b46      	ldr	r3, [pc, #280]	; (18c20 <pdn_interface_open+0x1b0>)
   18b06:	6091      	str	r1, [r2, #8]
   18b08:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
   18b0c:	4a45      	ldr	r2, [pc, #276]	; (18c24 <pdn_interface_open+0x1b4>)
   18b0e:	60c8      	str	r0, [r1, #12]
   18b10:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   18b14:	f44f 7180 	mov.w	r1, #256	; 0x100
   18b18:	6047      	str	r7, [r0, #4]
   18b1a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 18c34 <pdn_interface_open+0x1c4>
   18b1e:	4842      	ldr	r0, [pc, #264]	; (18c28 <pdn_interface_open+0x1b8>)
   18b20:	f7f7 fd7a 	bl	10618 <snprintf>
   18b24:	4840      	ldr	r0, [pc, #256]	; (18c28 <pdn_interface_open+0x1b8>)
   18b26:	f8d8 9000 	ldr.w	r9, [r8]
   18b2a:	2600      	movs	r6, #0
   18b2c:	f005 fe81 	bl	1e832 <strlen>
   18b30:	4633      	mov	r3, r6
   18b32:	4602      	mov	r2, r0
   18b34:	493c      	ldr	r1, [pc, #240]	; (18c28 <pdn_interface_open+0x1b8>)
   18b36:	4648      	mov	r0, r9
   18b38:	9601      	str	r6, [sp, #4]
   18b3a:	9600      	str	r6, [sp, #0]
   18b3c:	f7ff fcac 	bl	18498 <at_interface_write>
   18b40:	4681      	mov	r9, r0
   18b42:	4839      	ldr	r0, [pc, #228]	; (18c28 <pdn_interface_open+0x1b8>)
   18b44:	f005 fe75 	bl	1e832 <strlen>
   18b48:	4548      	cmp	r0, r9
   18b4a:	d153      	bne.n	18bf4 <pdn_interface_open+0x184>
   18b4c:	4633      	mov	r3, r6
   18b4e:	e9cd 6600 	strd	r6, r6, [sp]
   18b52:	f44f 7280 	mov.w	r2, #256	; 0x100
   18b56:	4934      	ldr	r1, [pc, #208]	; (18c28 <pdn_interface_open+0x1b8>)
   18b58:	f8d8 0000 	ldr.w	r0, [r8]
   18b5c:	f7ff fdf0 	bl	18740 <at_interface_read>
   18b60:	4606      	mov	r6, r0
   18b62:	4832      	ldr	r0, [pc, #200]	; (18c2c <pdn_interface_open+0x1bc>)
   18b64:	f005 fe65 	bl	1e832 <strlen>
   18b68:	4286      	cmp	r6, r0
   18b6a:	db15      	blt.n	18b98 <pdn_interface_open+0x128>
   18b6c:	4602      	mov	r2, r0
   18b6e:	492e      	ldr	r1, [pc, #184]	; (18c28 <pdn_interface_open+0x1b8>)
   18b70:	482e      	ldr	r0, [pc, #184]	; (18c2c <pdn_interface_open+0x1bc>)
   18b72:	f005 fe71 	bl	1e858 <strncmp>
   18b76:	b978      	cbnz	r0, 18b98 <pdn_interface_open+0x128>
   18b78:	492b      	ldr	r1, [pc, #172]	; (18c28 <pdn_interface_open+0x1b8>)
   18b7a:	4628      	mov	r0, r5
   18b7c:	f7ff ff2c 	bl	189d8 <context_create_parser>
   18b80:	b9b0      	cbnz	r0, 18bb0 <pdn_interface_open+0x140>
   18b82:	2202      	movs	r2, #2
   18b84:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   18b88:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   18b8c:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   18b90:	609a      	str	r2, [r3, #8]
   18b92:	b003      	add	sp, #12
   18b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18b98:	4825      	ldr	r0, [pc, #148]	; (18c30 <pdn_interface_open+0x1c0>)
   18b9a:	f005 fe4a 	bl	1e832 <strlen>
   18b9e:	4922      	ldr	r1, [pc, #136]	; (18c28 <pdn_interface_open+0x1b8>)
   18ba0:	4602      	mov	r2, r0
   18ba2:	4823      	ldr	r0, [pc, #140]	; (18c30 <pdn_interface_open+0x1c0>)
   18ba4:	f005 fe58 	bl	1e858 <strncmp>
   18ba8:	b960      	cbnz	r0, 18bc4 <pdn_interface_open+0x154>
   18baa:	2008      	movs	r0, #8
   18bac:	f7f8 fc5c 	bl	11468 <bsd_os_errno_set>
   18bb0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   18bb4:	f002 fa1c 	bl	1aff0 <nrf_free>
   18bb8:	2300      	movs	r3, #0
   18bba:	f04f 30ff 	mov.w	r0, #4294967295
   18bbe:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   18bc2:	e78a      	b.n	18ada <pdn_interface_open+0x6a>
   18bc4:	2005      	movs	r0, #5
   18bc6:	f7f8 fc4f 	bl	11468 <bsd_os_errno_set>
   18bca:	e7f1      	b.n	18bb0 <pdn_interface_open+0x140>
   18bcc:	2501      	movs	r5, #1
   18bce:	e788      	b.n	18ae2 <pdn_interface_open+0x72>
   18bd0:	2502      	movs	r5, #2
   18bd2:	e786      	b.n	18ae2 <pdn_interface_open+0x72>
   18bd4:	2503      	movs	r5, #3
   18bd6:	e784      	b.n	18ae2 <pdn_interface_open+0x72>
   18bd8:	2504      	movs	r5, #4
   18bda:	e782      	b.n	18ae2 <pdn_interface_open+0x72>
   18bdc:	2505      	movs	r5, #5
   18bde:	e780      	b.n	18ae2 <pdn_interface_open+0x72>
   18be0:	2506      	movs	r5, #6
   18be2:	e77e      	b.n	18ae2 <pdn_interface_open+0x72>
   18be4:	2507      	movs	r5, #7
   18be6:	e77c      	b.n	18ae2 <pdn_interface_open+0x72>
   18be8:	2029      	movs	r0, #41	; 0x29
   18bea:	f7f8 fc3d 	bl	11468 <bsd_os_errno_set>
   18bee:	f04f 30ff 	mov.w	r0, #4294967295
   18bf2:	e772      	b.n	18ada <pdn_interface_open+0x6a>
   18bf4:	2005      	movs	r0, #5
   18bf6:	f7f8 fc37 	bl	11468 <bsd_os_errno_set>
   18bfa:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   18bfe:	f002 f9f7 	bl	1aff0 <nrf_free>
   18c02:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   18c06:	4638      	mov	r0, r7
   18c08:	e767      	b.n	18ada <pdn_interface_open+0x6a>
   18c0a:	2070      	movs	r0, #112	; 0x70
   18c0c:	f7f8 fc2c 	bl	11468 <bsd_os_errno_set>
   18c10:	f04f 30ff 	mov.w	r0, #4294967295
   18c14:	e761      	b.n	18ada <pdn_interface_open+0x6a>
   18c16:	bf00      	nop
   18c18:	200236c4 	.word	0x200236c4
   18c1c:	20020e44 	.word	0x20020e44
   18c20:	00021254 	.word	0x00021254
   18c24:	00021260 	.word	0x00021260
   18c28:	20020d44 	.word	0x20020d44
   18c2c:	00021264 	.word	0x00021264
   18c30:	00021270 	.word	0x00021270
   18c34:	20020d40 	.word	0x20020d40

00018c38 <pdn_interface_connect>:
   18c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c3c:	b085      	sub	sp, #20
   18c3e:	2900      	cmp	r1, #0
   18c40:	f000 81f3 	beq.w	1902a <pdn_interface_connect+0x3f2>
   18c44:	2a64      	cmp	r2, #100	; 0x64
   18c46:	4690      	mov	r8, r2
   18c48:	f200 81ef 	bhi.w	1902a <pdn_interface_connect+0x3f2>
   18c4c:	0c03      	lsrs	r3, r0, #16
   18c4e:	4ab1      	ldr	r2, [pc, #708]	; (18f14 <pdn_interface_connect+0x2dc>)
   18c50:	041b      	lsls	r3, r3, #16
   18c52:	4293      	cmp	r3, r2
   18c54:	f040 8154 	bne.w	18f00 <pdn_interface_connect+0x2c8>
   18c58:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   18c5c:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   18c60:	2c09      	cmp	r4, #9
   18c62:	f300 814d 	bgt.w	18f00 <pdn_interface_connect+0x2c8>
   18c66:	4fac      	ldr	r7, [pc, #688]	; (18f18 <pdn_interface_connect+0x2e0>)
   18c68:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18c6c:	2b00      	cmp	r3, #0
   18c6e:	f000 8147 	beq.w	18f00 <pdn_interface_connect+0x2c8>
   18c72:	689a      	ldr	r2, [r3, #8]
   18c74:	2a00      	cmp	r2, #0
   18c76:	f000 8143 	beq.w	18f00 <pdn_interface_connect+0x2c8>
   18c7a:	689b      	ldr	r3, [r3, #8]
   18c7c:	2b02      	cmp	r3, #2
   18c7e:	f040 813f 	bne.w	18f00 <pdn_interface_connect+0x2c8>
   18c82:	4da6      	ldr	r5, [pc, #664]	; (18f1c <pdn_interface_connect+0x2e4>)
   18c84:	4ba6      	ldr	r3, [pc, #664]	; (18f20 <pdn_interface_connect+0x2e8>)
   18c86:	4aa7      	ldr	r2, [pc, #668]	; (18f24 <pdn_interface_connect+0x2ec>)
   18c88:	4689      	mov	r9, r1
   18c8a:	4628      	mov	r0, r5
   18c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
   18c90:	f7f7 fcc2 	bl	10618 <snprintf>
   18c94:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18c98:	4606      	mov	r6, r0
   18c9a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18c9e:	681b      	ldr	r3, [r3, #0]
   18ca0:	4aa1      	ldr	r2, [pc, #644]	; (18f28 <pdn_interface_connect+0x2f0>)
   18ca2:	1828      	adds	r0, r5, r0
   18ca4:	f7f7 fcb8 	bl	10618 <snprintf>
   18ca8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18cac:	4406      	add	r6, r0
   18cae:	68db      	ldr	r3, [r3, #12]
   18cb0:	f003 0203 	and.w	r2, r3, #3
   18cb4:	2a03      	cmp	r2, #3
   18cb6:	f000 811a 	beq.w	18eee <pdn_interface_connect+0x2b6>
   18cba:	079b      	lsls	r3, r3, #30
   18cbc:	bf4c      	ite	mi
   18cbe:	4b9b      	ldrmi	r3, [pc, #620]	; (18f2c <pdn_interface_connect+0x2f4>)
   18cc0:	4b9b      	ldrpl	r3, [pc, #620]	; (18f30 <pdn_interface_connect+0x2f8>)
   18cc2:	19a8      	adds	r0, r5, r6
   18cc4:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   18cc8:	4a9a      	ldr	r2, [pc, #616]	; (18f34 <pdn_interface_connect+0x2fc>)
   18cca:	f7f7 fca5 	bl	10618 <snprintf>
   18cce:	1833      	adds	r3, r6, r0
   18cd0:	eb08 0203 	add.w	r2, r8, r3
   18cd4:	2afd      	cmp	r2, #253	; 0xfd
   18cd6:	f300 81a5 	bgt.w	19024 <pdn_interface_connect+0x3ec>
   18cda:	2122      	movs	r1, #34	; 0x22
   18cdc:	1c5e      	adds	r6, r3, #1
   18cde:	54e9      	strb	r1, [r5, r3]
   18ce0:	4642      	mov	r2, r8
   18ce2:	19a8      	adds	r0, r5, r6
   18ce4:	4649      	mov	r1, r9
   18ce6:	f005 fd83 	bl	1e7f0 <strncpy>
   18cea:	eb08 0306 	add.w	r3, r8, r6
   18cee:	18ea      	adds	r2, r5, r3
   18cf0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   18cf4:	b902      	cbnz	r2, 18cf8 <pdn_interface_connect+0xc0>
   18cf6:	3b01      	subs	r3, #1
   18cf8:	2600      	movs	r6, #0
   18cfa:	2122      	movs	r1, #34	; 0x22
   18cfc:	18ea      	adds	r2, r5, r3
   18cfe:	f8df a254 	ldr.w	sl, [pc, #596]	; 18f54 <pdn_interface_connect+0x31c>
   18d02:	54e9      	strb	r1, [r5, r3]
   18d04:	4885      	ldr	r0, [pc, #532]	; (18f1c <pdn_interface_connect+0x2e4>)
   18d06:	7056      	strb	r6, [r2, #1]
   18d08:	f8da b000 	ldr.w	fp, [sl]
   18d0c:	f005 fd91 	bl	1e832 <strlen>
   18d10:	4633      	mov	r3, r6
   18d12:	4602      	mov	r2, r0
   18d14:	4981      	ldr	r1, [pc, #516]	; (18f1c <pdn_interface_connect+0x2e4>)
   18d16:	4658      	mov	r0, fp
   18d18:	9601      	str	r6, [sp, #4]
   18d1a:	9600      	str	r6, [sp, #0]
   18d1c:	f7ff fbbc 	bl	18498 <at_interface_write>
   18d20:	4683      	mov	fp, r0
   18d22:	487e      	ldr	r0, [pc, #504]	; (18f1c <pdn_interface_connect+0x2e4>)
   18d24:	f005 fd85 	bl	1e832 <strlen>
   18d28:	4558      	cmp	r0, fp
   18d2a:	d008      	beq.n	18d3e <pdn_interface_connect+0x106>
   18d2c:	2005      	movs	r0, #5
   18d2e:	f7f8 fb9b 	bl	11468 <bsd_os_errno_set>
   18d32:	f04f 3bff 	mov.w	fp, #4294967295
   18d36:	4658      	mov	r0, fp
   18d38:	b005      	add	sp, #20
   18d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d3e:	4633      	mov	r3, r6
   18d40:	e9cd 6600 	strd	r6, r6, [sp]
   18d44:	f44f 7280 	mov.w	r2, #256	; 0x100
   18d48:	4974      	ldr	r1, [pc, #464]	; (18f1c <pdn_interface_connect+0x2e4>)
   18d4a:	f8da 0000 	ldr.w	r0, [sl]
   18d4e:	f7ff fcf7 	bl	18740 <at_interface_read>
   18d52:	4606      	mov	r6, r0
   18d54:	4878      	ldr	r0, [pc, #480]	; (18f38 <pdn_interface_connect+0x300>)
   18d56:	f005 fd6c 	bl	1e832 <strlen>
   18d5a:	4286      	cmp	r6, r0
   18d5c:	da0f      	bge.n	18d7e <pdn_interface_connect+0x146>
   18d5e:	4877      	ldr	r0, [pc, #476]	; (18f3c <pdn_interface_connect+0x304>)
   18d60:	f005 fd67 	bl	1e832 <strlen>
   18d64:	496d      	ldr	r1, [pc, #436]	; (18f1c <pdn_interface_connect+0x2e4>)
   18d66:	4602      	mov	r2, r0
   18d68:	4874      	ldr	r0, [pc, #464]	; (18f3c <pdn_interface_connect+0x304>)
   18d6a:	f005 fd75 	bl	1e858 <strncmp>
   18d6e:	2800      	cmp	r0, #0
   18d70:	d1dc      	bne.n	18d2c <pdn_interface_connect+0xf4>
   18d72:	2008      	movs	r0, #8
   18d74:	f7f8 fb78 	bl	11468 <bsd_os_errno_set>
   18d78:	f04f 3bff 	mov.w	fp, #4294967295
   18d7c:	e7db      	b.n	18d36 <pdn_interface_connect+0xfe>
   18d7e:	4602      	mov	r2, r0
   18d80:	4966      	ldr	r1, [pc, #408]	; (18f1c <pdn_interface_connect+0x2e4>)
   18d82:	486d      	ldr	r0, [pc, #436]	; (18f38 <pdn_interface_connect+0x300>)
   18d84:	f005 fd68 	bl	1e858 <strncmp>
   18d88:	2800      	cmp	r0, #0
   18d8a:	d1e8      	bne.n	18d5e <pdn_interface_connect+0x126>
   18d8c:	4963      	ldr	r1, [pc, #396]	; (18f1c <pdn_interface_connect+0x2e4>)
   18d8e:	4620      	mov	r0, r4
   18d90:	f7ff fdbe 	bl	18910 <ok_rsp_parser>
   18d94:	4683      	mov	fp, r0
   18d96:	2800      	cmp	r0, #0
   18d98:	d1cd      	bne.n	18d36 <pdn_interface_connect+0xfe>
   18d9a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18d9e:	7c1b      	ldrb	r3, [r3, #16]
   18da0:	2b00      	cmp	r3, #0
   18da2:	f040 80d9 	bne.w	18f58 <pdn_interface_connect+0x320>
   18da6:	4b66      	ldr	r3, [pc, #408]	; (18f40 <pdn_interface_connect+0x308>)
   18da8:	4a5e      	ldr	r2, [pc, #376]	; (18f24 <pdn_interface_connect+0x2ec>)
   18daa:	f44f 7180 	mov.w	r1, #256	; 0x100
   18dae:	485b      	ldr	r0, [pc, #364]	; (18f1c <pdn_interface_connect+0x2e4>)
   18db0:	f7f7 fc32 	bl	10618 <snprintf>
   18db4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18db8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18dbc:	4a61      	ldr	r2, [pc, #388]	; (18f44 <pdn_interface_connect+0x30c>)
   18dbe:	681b      	ldr	r3, [r3, #0]
   18dc0:	4428      	add	r0, r5
   18dc2:	f7f7 fc29 	bl	10618 <snprintf>
   18dc6:	f8da 3000 	ldr.w	r3, [sl]
   18dca:	4854      	ldr	r0, [pc, #336]	; (18f1c <pdn_interface_connect+0x2e4>)
   18dcc:	2600      	movs	r6, #0
   18dce:	9303      	str	r3, [sp, #12]
   18dd0:	f005 fd2f 	bl	1e832 <strlen>
   18dd4:	9b03      	ldr	r3, [sp, #12]
   18dd6:	4602      	mov	r2, r0
   18dd8:	4950      	ldr	r1, [pc, #320]	; (18f1c <pdn_interface_connect+0x2e4>)
   18dda:	4618      	mov	r0, r3
   18ddc:	9601      	str	r6, [sp, #4]
   18dde:	4633      	mov	r3, r6
   18de0:	9600      	str	r6, [sp, #0]
   18de2:	f7ff fb59 	bl	18498 <at_interface_write>
   18de6:	9003      	str	r0, [sp, #12]
   18de8:	484c      	ldr	r0, [pc, #304]	; (18f1c <pdn_interface_connect+0x2e4>)
   18dea:	f005 fd22 	bl	1e832 <strlen>
   18dee:	9b03      	ldr	r3, [sp, #12]
   18df0:	4298      	cmp	r0, r3
   18df2:	d19b      	bne.n	18d2c <pdn_interface_connect+0xf4>
   18df4:	4633      	mov	r3, r6
   18df6:	e9cd 6600 	strd	r6, r6, [sp]
   18dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
   18dfe:	4947      	ldr	r1, [pc, #284]	; (18f1c <pdn_interface_connect+0x2e4>)
   18e00:	f8da 0000 	ldr.w	r0, [sl]
   18e04:	f7ff fc9c 	bl	18740 <at_interface_read>
   18e08:	4606      	mov	r6, r0
   18e0a:	484b      	ldr	r0, [pc, #300]	; (18f38 <pdn_interface_connect+0x300>)
   18e0c:	f005 fd11 	bl	1e832 <strlen>
   18e10:	4286      	cmp	r6, r0
   18e12:	dba4      	blt.n	18d5e <pdn_interface_connect+0x126>
   18e14:	4602      	mov	r2, r0
   18e16:	4941      	ldr	r1, [pc, #260]	; (18f1c <pdn_interface_connect+0x2e4>)
   18e18:	4847      	ldr	r0, [pc, #284]	; (18f38 <pdn_interface_connect+0x300>)
   18e1a:	f005 fd1d 	bl	1e858 <strncmp>
   18e1e:	4606      	mov	r6, r0
   18e20:	2800      	cmp	r0, #0
   18e22:	d19c      	bne.n	18d5e <pdn_interface_connect+0x126>
   18e24:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   18e28:	f108 0320 	add.w	r3, r8, #32
   18e2c:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   18e30:	4413      	add	r3, r2
   18e32:	4419      	add	r1, r3
   18e34:	f002 f8e8 	bl	1b008 <nrf_realloc>
   18e38:	2800      	cmp	r0, #0
   18e3a:	f000 80fc 	beq.w	19036 <pdn_interface_connect+0x3fe>
   18e3e:	2303      	movs	r3, #3
   18e40:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   18e44:	6083      	str	r3, [r0, #8]
   18e46:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18e4a:	4649      	mov	r1, r9
   18e4c:	f8c3 801c 	str.w	r8, [r3, #28]
   18e50:	f857 c024 	ldr.w	ip, [r7, r4, lsl #2]
   18e54:	4642      	mov	r2, r8
   18e56:	e9dc 0305 	ldrd	r0, r3, [ip, #20]
   18e5a:	4418      	add	r0, r3
   18e5c:	4603      	mov	r3, r0
   18e5e:	3320      	adds	r3, #32
   18e60:	eb0c 0003 	add.w	r0, ip, r3
   18e64:	f005 fd17 	bl	1e896 <memcpy>
   18e68:	4b37      	ldr	r3, [pc, #220]	; (18f48 <pdn_interface_connect+0x310>)
   18e6a:	4a2e      	ldr	r2, [pc, #184]	; (18f24 <pdn_interface_connect+0x2ec>)
   18e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
   18e70:	482a      	ldr	r0, [pc, #168]	; (18f1c <pdn_interface_connect+0x2e4>)
   18e72:	f7f7 fbd1 	bl	10618 <snprintf>
   18e76:	4601      	mov	r1, r0
   18e78:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18e7c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   18e80:	681b      	ldr	r3, [r3, #0]
   18e82:	4a30      	ldr	r2, [pc, #192]	; (18f44 <pdn_interface_connect+0x30c>)
   18e84:	1828      	adds	r0, r5, r0
   18e86:	f7f7 fbc7 	bl	10618 <snprintf>
   18e8a:	4824      	ldr	r0, [pc, #144]	; (18f1c <pdn_interface_connect+0x2e4>)
   18e8c:	f8da 5000 	ldr.w	r5, [sl]
   18e90:	f005 fccf 	bl	1e832 <strlen>
   18e94:	4633      	mov	r3, r6
   18e96:	4602      	mov	r2, r0
   18e98:	4920      	ldr	r1, [pc, #128]	; (18f1c <pdn_interface_connect+0x2e4>)
   18e9a:	4628      	mov	r0, r5
   18e9c:	9601      	str	r6, [sp, #4]
   18e9e:	9600      	str	r6, [sp, #0]
   18ea0:	f7ff fafa 	bl	18498 <at_interface_write>
   18ea4:	4605      	mov	r5, r0
   18ea6:	481d      	ldr	r0, [pc, #116]	; (18f1c <pdn_interface_connect+0x2e4>)
   18ea8:	f005 fcc3 	bl	1e832 <strlen>
   18eac:	42a8      	cmp	r0, r5
   18eae:	f040 80d2 	bne.w	19056 <pdn_interface_connect+0x41e>
   18eb2:	4633      	mov	r3, r6
   18eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
   18eb8:	4918      	ldr	r1, [pc, #96]	; (18f1c <pdn_interface_connect+0x2e4>)
   18eba:	f8da 0000 	ldr.w	r0, [sl]
   18ebe:	e9cd 6600 	strd	r6, r6, [sp]
   18ec2:	f7ff fc3d 	bl	18740 <at_interface_read>
   18ec6:	4605      	mov	r5, r0
   18ec8:	4820      	ldr	r0, [pc, #128]	; (18f4c <pdn_interface_connect+0x314>)
   18eca:	f005 fcb2 	bl	1e832 <strlen>
   18ece:	4285      	cmp	r5, r0
   18ed0:	f2c0 80b4 	blt.w	1903c <pdn_interface_connect+0x404>
   18ed4:	4602      	mov	r2, r0
   18ed6:	4911      	ldr	r1, [pc, #68]	; (18f1c <pdn_interface_connect+0x2e4>)
   18ed8:	481c      	ldr	r0, [pc, #112]	; (18f4c <pdn_interface_connect+0x314>)
   18eda:	f005 fcbd 	bl	1e858 <strncmp>
   18ede:	2800      	cmp	r0, #0
   18ee0:	f040 80ac 	bne.w	1903c <pdn_interface_connect+0x404>
   18ee4:	4620      	mov	r0, r4
   18ee6:	490d      	ldr	r1, [pc, #52]	; (18f1c <pdn_interface_connect+0x2e4>)
   18ee8:	f7ff fd4a 	bl	18980 <pdn_id_get_parser>
   18eec:	e723      	b.n	18d36 <pdn_interface_connect+0xfe>
   18eee:	4b18      	ldr	r3, [pc, #96]	; (18f50 <pdn_interface_connect+0x318>)
   18ef0:	4a10      	ldr	r2, [pc, #64]	; (18f34 <pdn_interface_connect+0x2fc>)
   18ef2:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   18ef6:	19a8      	adds	r0, r5, r6
   18ef8:	f7f7 fb8e 	bl	10618 <snprintf>
   18efc:	1833      	adds	r3, r6, r0
   18efe:	e6e7      	b.n	18cd0 <pdn_interface_connect+0x98>
   18f00:	f04f 3bff 	mov.w	fp, #4294967295
   18f04:	2009      	movs	r0, #9
   18f06:	f7f8 faaf 	bl	11468 <bsd_os_errno_set>
   18f0a:	4658      	mov	r0, fp
   18f0c:	b005      	add	sp, #20
   18f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f12:	bf00      	nop
   18f14:	789a0000 	.word	0x789a0000
   18f18:	20020e44 	.word	0x20020e44
   18f1c:	20020d44 	.word	0x20020d44
   18f20:	000211c8 	.word	0x000211c8
   18f24:	00021260 	.word	0x00021260
   18f28:	000211d4 	.word	0x000211d4
   18f2c:	000211e8 	.word	0x000211e8
   18f30:	000211f0 	.word	0x000211f0
   18f34:	000211e0 	.word	0x000211e0
   18f38:	000211f4 	.word	0x000211f4
   18f3c:	00021270 	.word	0x00021270
   18f40:	00021214 	.word	0x00021214
   18f44:	00021220 	.word	0x00021220
   18f48:	00021224 	.word	0x00021224
   18f4c:	00021234 	.word	0x00021234
   18f50:	000211d8 	.word	0x000211d8
   18f54:	20020d40 	.word	0x20020d40
   18f58:	4b41      	ldr	r3, [pc, #260]	; (19060 <pdn_interface_connect+0x428>)
   18f5a:	4a42      	ldr	r2, [pc, #264]	; (19064 <pdn_interface_connect+0x42c>)
   18f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
   18f60:	4841      	ldr	r0, [pc, #260]	; (19068 <pdn_interface_connect+0x430>)
   18f62:	f7f7 fb59 	bl	10618 <snprintf>
   18f66:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18f6a:	4a40      	ldr	r2, [pc, #256]	; (1906c <pdn_interface_connect+0x434>)
   18f6c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18f70:	4606      	mov	r6, r0
   18f72:	681b      	ldr	r3, [r3, #0]
   18f74:	1828      	adds	r0, r5, r0
   18f76:	f7f7 fb4f 	bl	10618 <snprintf>
   18f7a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18f7e:	4406      	add	r6, r0
   18f80:	7c1b      	ldrb	r3, [r3, #16]
   18f82:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   18f86:	2b01      	cmp	r3, #1
   18f88:	bf0c      	ite	eq
   18f8a:	4a39      	ldreq	r2, [pc, #228]	; (19070 <pdn_interface_connect+0x438>)
   18f8c:	4a39      	ldrne	r2, [pc, #228]	; (19074 <pdn_interface_connect+0x43c>)
   18f8e:	19a8      	adds	r0, r5, r6
   18f90:	f7f7 fb42 	bl	10618 <snprintf>
   18f94:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18f98:	4406      	add	r6, r0
   18f9a:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   18f9e:	4a36      	ldr	r2, [pc, #216]	; (19078 <pdn_interface_connect+0x440>)
   18fa0:	3320      	adds	r3, #32
   18fa2:	19a8      	adds	r0, r5, r6
   18fa4:	f7f7 fb38 	bl	10618 <snprintf>
   18fa8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   18fac:	4430      	add	r0, r6
   18fae:	695a      	ldr	r2, [r3, #20]
   18fb0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   18fb4:	3220      	adds	r2, #32
   18fb6:	4413      	add	r3, r2
   18fb8:	4428      	add	r0, r5
   18fba:	4a30      	ldr	r2, [pc, #192]	; (1907c <pdn_interface_connect+0x444>)
   18fbc:	f7f7 fb2c 	bl	10618 <snprintf>
   18fc0:	f8da 3000 	ldr.w	r3, [sl]
   18fc4:	4828      	ldr	r0, [pc, #160]	; (19068 <pdn_interface_connect+0x430>)
   18fc6:	2600      	movs	r6, #0
   18fc8:	9303      	str	r3, [sp, #12]
   18fca:	f005 fc32 	bl	1e832 <strlen>
   18fce:	9b03      	ldr	r3, [sp, #12]
   18fd0:	4602      	mov	r2, r0
   18fd2:	4925      	ldr	r1, [pc, #148]	; (19068 <pdn_interface_connect+0x430>)
   18fd4:	4618      	mov	r0, r3
   18fd6:	9601      	str	r6, [sp, #4]
   18fd8:	4633      	mov	r3, r6
   18fda:	9600      	str	r6, [sp, #0]
   18fdc:	f7ff fa5c 	bl	18498 <at_interface_write>
   18fe0:	9003      	str	r0, [sp, #12]
   18fe2:	4821      	ldr	r0, [pc, #132]	; (19068 <pdn_interface_connect+0x430>)
   18fe4:	f005 fc25 	bl	1e832 <strlen>
   18fe8:	9b03      	ldr	r3, [sp, #12]
   18fea:	4298      	cmp	r0, r3
   18fec:	f47f ae9e 	bne.w	18d2c <pdn_interface_connect+0xf4>
   18ff0:	4633      	mov	r3, r6
   18ff2:	e9cd 6600 	strd	r6, r6, [sp]
   18ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
   18ffa:	491b      	ldr	r1, [pc, #108]	; (19068 <pdn_interface_connect+0x430>)
   18ffc:	f8da 0000 	ldr.w	r0, [sl]
   19000:	f7ff fb9e 	bl	18740 <at_interface_read>
   19004:	4606      	mov	r6, r0
   19006:	481e      	ldr	r0, [pc, #120]	; (19080 <pdn_interface_connect+0x448>)
   19008:	f005 fc13 	bl	1e832 <strlen>
   1900c:	4286      	cmp	r6, r0
   1900e:	f6ff aea6 	blt.w	18d5e <pdn_interface_connect+0x126>
   19012:	4602      	mov	r2, r0
   19014:	4914      	ldr	r1, [pc, #80]	; (19068 <pdn_interface_connect+0x430>)
   19016:	481a      	ldr	r0, [pc, #104]	; (19080 <pdn_interface_connect+0x448>)
   19018:	f005 fc1e 	bl	1e858 <strncmp>
   1901c:	2800      	cmp	r0, #0
   1901e:	f43f aec2 	beq.w	18da6 <pdn_interface_connect+0x16e>
   19022:	e69c      	b.n	18d5e <pdn_interface_connect+0x126>
   19024:	f04f 3bff 	mov.w	fp, #4294967295
   19028:	e685      	b.n	18d36 <pdn_interface_connect+0xfe>
   1902a:	2016      	movs	r0, #22
   1902c:	f7f8 fa1c 	bl	11468 <bsd_os_errno_set>
   19030:	f04f 3bff 	mov.w	fp, #4294967295
   19034:	e67f      	b.n	18d36 <pdn_interface_connect+0xfe>
   19036:	f04f 0b0c 	mov.w	fp, #12
   1903a:	e67c      	b.n	18d36 <pdn_interface_connect+0xfe>
   1903c:	4811      	ldr	r0, [pc, #68]	; (19084 <pdn_interface_connect+0x44c>)
   1903e:	f005 fbf8 	bl	1e832 <strlen>
   19042:	4909      	ldr	r1, [pc, #36]	; (19068 <pdn_interface_connect+0x430>)
   19044:	4602      	mov	r2, r0
   19046:	480f      	ldr	r0, [pc, #60]	; (19084 <pdn_interface_connect+0x44c>)
   19048:	f005 fc06 	bl	1e858 <strncmp>
   1904c:	b918      	cbnz	r0, 19056 <pdn_interface_connect+0x41e>
   1904e:	2008      	movs	r0, #8
   19050:	f7f8 fa0a 	bl	11468 <bsd_os_errno_set>
   19054:	e66f      	b.n	18d36 <pdn_interface_connect+0xfe>
   19056:	2005      	movs	r0, #5
   19058:	f7f8 fa06 	bl	11468 <bsd_os_errno_set>
   1905c:	e66b      	b.n	18d36 <pdn_interface_connect+0xfe>
   1905e:	bf00      	nop
   19060:	000211f8 	.word	0x000211f8
   19064:	00021260 	.word	0x00021260
   19068:	20020d44 	.word	0x20020d44
   1906c:	000211d4 	.word	0x000211d4
   19070:	00021204 	.word	0x00021204
   19074:	00021208 	.word	0x00021208
   19078:	000211e0 	.word	0x000211e0
   1907c:	0002120c 	.word	0x0002120c
   19080:	000211f4 	.word	0x000211f4
   19084:	00021270 	.word	0x00021270

00019088 <pdn_interface_close>:
   19088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1908c:	4a6c      	ldr	r2, [pc, #432]	; (19240 <pdn_interface_close+0x1b8>)
   1908e:	0c03      	lsrs	r3, r0, #16
   19090:	041b      	lsls	r3, r3, #16
   19092:	4293      	cmp	r3, r2
   19094:	b083      	sub	sp, #12
   19096:	f040 80ae 	bne.w	191f6 <pdn_interface_close+0x16e>
   1909a:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1909e:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   190a2:	2c09      	cmp	r4, #9
   190a4:	f300 80a7 	bgt.w	191f6 <pdn_interface_close+0x16e>
   190a8:	4d66      	ldr	r5, [pc, #408]	; (19244 <pdn_interface_close+0x1bc>)
   190aa:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   190ae:	2800      	cmp	r0, #0
   190b0:	f000 80a1 	beq.w	191f6 <pdn_interface_close+0x16e>
   190b4:	6883      	ldr	r3, [r0, #8]
   190b6:	2b00      	cmp	r3, #0
   190b8:	f000 809d 	beq.w	191f6 <pdn_interface_close+0x16e>
   190bc:	6883      	ldr	r3, [r0, #8]
   190be:	2b03      	cmp	r3, #3
   190c0:	d00b      	beq.n	190da <pdn_interface_close+0x52>
   190c2:	6883      	ldr	r3, [r0, #8]
   190c4:	2b02      	cmp	r3, #2
   190c6:	d056      	beq.n	19176 <pdn_interface_close+0xee>
   190c8:	f001 ff92 	bl	1aff0 <nrf_free>
   190cc:	2300      	movs	r3, #0
   190ce:	4618      	mov	r0, r3
   190d0:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   190d4:	b003      	add	sp, #12
   190d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   190da:	4e5b      	ldr	r6, [pc, #364]	; (19248 <pdn_interface_close+0x1c0>)
   190dc:	4b5b      	ldr	r3, [pc, #364]	; (1924c <pdn_interface_close+0x1c4>)
   190de:	4a5c      	ldr	r2, [pc, #368]	; (19250 <pdn_interface_close+0x1c8>)
   190e0:	f44f 7180 	mov.w	r1, #256	; 0x100
   190e4:	4630      	mov	r0, r6
   190e6:	f7f7 fa97 	bl	10618 <snprintf>
   190ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   190ee:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   190f2:	681b      	ldr	r3, [r3, #0]
   190f4:	4a57      	ldr	r2, [pc, #348]	; (19254 <pdn_interface_close+0x1cc>)
   190f6:	4430      	add	r0, r6
   190f8:	f8df 8168 	ldr.w	r8, [pc, #360]	; 19264 <pdn_interface_close+0x1dc>
   190fc:	f7f7 fa8c 	bl	10618 <snprintf>
   19100:	4630      	mov	r0, r6
   19102:	f8d8 9000 	ldr.w	r9, [r8]
   19106:	2700      	movs	r7, #0
   19108:	f005 fb93 	bl	1e832 <strlen>
   1910c:	4631      	mov	r1, r6
   1910e:	4602      	mov	r2, r0
   19110:	463b      	mov	r3, r7
   19112:	4648      	mov	r0, r9
   19114:	9701      	str	r7, [sp, #4]
   19116:	9700      	str	r7, [sp, #0]
   19118:	f7ff f9be 	bl	18498 <at_interface_write>
   1911c:	4681      	mov	r9, r0
   1911e:	4630      	mov	r0, r6
   19120:	f005 fb87 	bl	1e832 <strlen>
   19124:	4548      	cmp	r0, r9
   19126:	f040 8083 	bne.w	19230 <pdn_interface_close+0x1a8>
   1912a:	463b      	mov	r3, r7
   1912c:	e9cd 7700 	strd	r7, r7, [sp]
   19130:	f44f 7280 	mov.w	r2, #256	; 0x100
   19134:	4631      	mov	r1, r6
   19136:	f8d8 0000 	ldr.w	r0, [r8]
   1913a:	f7ff fb01 	bl	18740 <at_interface_read>
   1913e:	4607      	mov	r7, r0
   19140:	4845      	ldr	r0, [pc, #276]	; (19258 <pdn_interface_close+0x1d0>)
   19142:	f005 fb76 	bl	1e832 <strlen>
   19146:	4287      	cmp	r7, r0
   19148:	da5b      	bge.n	19202 <pdn_interface_close+0x17a>
   1914a:	4844      	ldr	r0, [pc, #272]	; (1925c <pdn_interface_close+0x1d4>)
   1914c:	f005 fb71 	bl	1e832 <strlen>
   19150:	493d      	ldr	r1, [pc, #244]	; (19248 <pdn_interface_close+0x1c0>)
   19152:	4602      	mov	r2, r0
   19154:	4841      	ldr	r0, [pc, #260]	; (1925c <pdn_interface_close+0x1d4>)
   19156:	f005 fb7f 	bl	1e858 <strncmp>
   1915a:	2800      	cmp	r0, #0
   1915c:	d168      	bne.n	19230 <pdn_interface_close+0x1a8>
   1915e:	2008      	movs	r0, #8
   19160:	f7f8 f982 	bl	11468 <bsd_os_errno_set>
   19164:	2202      	movs	r2, #2
   19166:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1916a:	609a      	str	r2, [r3, #8]
   1916c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   19170:	6883      	ldr	r3, [r0, #8]
   19172:	2b02      	cmp	r3, #2
   19174:	d1a8      	bne.n	190c8 <pdn_interface_close+0x40>
   19176:	4e34      	ldr	r6, [pc, #208]	; (19248 <pdn_interface_close+0x1c0>)
   19178:	4b39      	ldr	r3, [pc, #228]	; (19260 <pdn_interface_close+0x1d8>)
   1917a:	4a35      	ldr	r2, [pc, #212]	; (19250 <pdn_interface_close+0x1c8>)
   1917c:	f44f 7180 	mov.w	r1, #256	; 0x100
   19180:	4630      	mov	r0, r6
   19182:	f7f7 fa49 	bl	10618 <snprintf>
   19186:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1918a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1918e:	681b      	ldr	r3, [r3, #0]
   19190:	4a30      	ldr	r2, [pc, #192]	; (19254 <pdn_interface_close+0x1cc>)
   19192:	4430      	add	r0, r6
   19194:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 19264 <pdn_interface_close+0x1dc>
   19198:	f7f7 fa3e 	bl	10618 <snprintf>
   1919c:	4630      	mov	r0, r6
   1919e:	f8d8 9000 	ldr.w	r9, [r8]
   191a2:	2700      	movs	r7, #0
   191a4:	f005 fb45 	bl	1e832 <strlen>
   191a8:	4631      	mov	r1, r6
   191aa:	4602      	mov	r2, r0
   191ac:	463b      	mov	r3, r7
   191ae:	4648      	mov	r0, r9
   191b0:	9701      	str	r7, [sp, #4]
   191b2:	9700      	str	r7, [sp, #0]
   191b4:	f7ff f970 	bl	18498 <at_interface_write>
   191b8:	4681      	mov	r9, r0
   191ba:	4630      	mov	r0, r6
   191bc:	f005 fb39 	bl	1e832 <strlen>
   191c0:	4548      	cmp	r0, r9
   191c2:	d139      	bne.n	19238 <pdn_interface_close+0x1b0>
   191c4:	463b      	mov	r3, r7
   191c6:	e9cd 7700 	strd	r7, r7, [sp]
   191ca:	f44f 7280 	mov.w	r2, #256	; 0x100
   191ce:	4631      	mov	r1, r6
   191d0:	f8d8 0000 	ldr.w	r0, [r8]
   191d4:	f7ff fab4 	bl	18740 <at_interface_read>
   191d8:	4607      	mov	r7, r0
   191da:	481f      	ldr	r0, [pc, #124]	; (19258 <pdn_interface_close+0x1d0>)
   191dc:	f005 fb29 	bl	1e832 <strlen>
   191e0:	4287      	cmp	r7, r0
   191e2:	db16      	blt.n	19212 <pdn_interface_close+0x18a>
   191e4:	4602      	mov	r2, r0
   191e6:	4631      	mov	r1, r6
   191e8:	481b      	ldr	r0, [pc, #108]	; (19258 <pdn_interface_close+0x1d0>)
   191ea:	f005 fb35 	bl	1e858 <strncmp>
   191ee:	b980      	cbnz	r0, 19212 <pdn_interface_close+0x18a>
   191f0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   191f4:	e768      	b.n	190c8 <pdn_interface_close+0x40>
   191f6:	2009      	movs	r0, #9
   191f8:	f7f8 f936 	bl	11468 <bsd_os_errno_set>
   191fc:	f04f 30ff 	mov.w	r0, #4294967295
   19200:	e768      	b.n	190d4 <pdn_interface_close+0x4c>
   19202:	4602      	mov	r2, r0
   19204:	4631      	mov	r1, r6
   19206:	4814      	ldr	r0, [pc, #80]	; (19258 <pdn_interface_close+0x1d0>)
   19208:	f005 fb26 	bl	1e858 <strncmp>
   1920c:	2800      	cmp	r0, #0
   1920e:	d0a9      	beq.n	19164 <pdn_interface_close+0xdc>
   19210:	e79b      	b.n	1914a <pdn_interface_close+0xc2>
   19212:	4812      	ldr	r0, [pc, #72]	; (1925c <pdn_interface_close+0x1d4>)
   19214:	f005 fb0d 	bl	1e832 <strlen>
   19218:	490b      	ldr	r1, [pc, #44]	; (19248 <pdn_interface_close+0x1c0>)
   1921a:	4602      	mov	r2, r0
   1921c:	480f      	ldr	r0, [pc, #60]	; (1925c <pdn_interface_close+0x1d4>)
   1921e:	f005 fb1b 	bl	1e858 <strncmp>
   19222:	b948      	cbnz	r0, 19238 <pdn_interface_close+0x1b0>
   19224:	2008      	movs	r0, #8
   19226:	f7f8 f91f 	bl	11468 <bsd_os_errno_set>
   1922a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1922e:	e74b      	b.n	190c8 <pdn_interface_close+0x40>
   19230:	2005      	movs	r0, #5
   19232:	f7f8 f919 	bl	11468 <bsd_os_errno_set>
   19236:	e795      	b.n	19164 <pdn_interface_close+0xdc>
   19238:	2005      	movs	r0, #5
   1923a:	f7f8 f915 	bl	11468 <bsd_os_errno_set>
   1923e:	e7d7      	b.n	191f0 <pdn_interface_close+0x168>
   19240:	789a0000 	.word	0x789a0000
   19244:	20020e44 	.word	0x20020e44
   19248:	20020d44 	.word	0x20020d44
   1924c:	000211bc 	.word	0x000211bc
   19250:	00021260 	.word	0x00021260
   19254:	00021220 	.word	0x00021220
   19258:	000211f4 	.word	0x000211f4
   1925c:	00021270 	.word	0x00021270
   19260:	000211c8 	.word	0x000211c8
   19264:	20020d40 	.word	0x20020d40

00019268 <pdn_interface_setopt>:
   19268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1926a:	f240 2402 	movw	r4, #514	; 0x202
   1926e:	42a1      	cmp	r1, r4
   19270:	9e06      	ldr	r6, [sp, #24]
   19272:	f040 8090 	bne.w	19396 <pdn_interface_setopt+0x12e>
   19276:	461d      	mov	r5, r3
   19278:	2b00      	cmp	r3, #0
   1927a:	f000 808c 	beq.w	19396 <pdn_interface_setopt+0x12e>
   1927e:	2e00      	cmp	r6, #0
   19280:	f000 8089 	beq.w	19396 <pdn_interface_setopt+0x12e>
   19284:	0c03      	lsrs	r3, r0, #16
   19286:	494d      	ldr	r1, [pc, #308]	; (193bc <pdn_interface_setopt+0x154>)
   19288:	041b      	lsls	r3, r3, #16
   1928a:	428b      	cmp	r3, r1
   1928c:	d005      	beq.n	1929a <pdn_interface_setopt+0x32>
   1928e:	2009      	movs	r0, #9
   19290:	f7f8 f8ea 	bl	11468 <bsd_os_errno_set>
   19294:	f04f 30ff 	mov.w	r0, #4294967295
   19298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1929a:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   1929e:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   192a2:	2c09      	cmp	r4, #9
   192a4:	dcf3      	bgt.n	1928e <pdn_interface_setopt+0x26>
   192a6:	4f46      	ldr	r7, [pc, #280]	; (193c0 <pdn_interface_setopt+0x158>)
   192a8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   192ac:	2b00      	cmp	r3, #0
   192ae:	d0ee      	beq.n	1928e <pdn_interface_setopt+0x26>
   192b0:	6899      	ldr	r1, [r3, #8]
   192b2:	2900      	cmp	r1, #0
   192b4:	d0eb      	beq.n	1928e <pdn_interface_setopt+0x26>
   192b6:	2a01      	cmp	r2, #1
   192b8:	d049      	beq.n	1934e <pdn_interface_setopt+0xe6>
   192ba:	2a04      	cmp	r2, #4
   192bc:	d145      	bne.n	1934a <pdn_interface_setopt+0xe2>
   192be:	689a      	ldr	r2, [r3, #8]
   192c0:	2a00      	cmp	r2, #0
   192c2:	d04c      	beq.n	1935e <pdn_interface_setopt+0xf6>
   192c4:	689a      	ldr	r2, [r3, #8]
   192c6:	2a03      	cmp	r2, #3
   192c8:	d049      	beq.n	1935e <pdn_interface_setopt+0xf6>
   192ca:	689b      	ldr	r3, [r3, #8]
   192cc:	2b04      	cmp	r3, #4
   192ce:	d046      	beq.n	1935e <pdn_interface_setopt+0xf6>
   192d0:	4628      	mov	r0, r5
   192d2:	f005 faae 	bl	1e832 <strlen>
   192d6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   192da:	3001      	adds	r0, #1
   192dc:	f105 0664 	add.w	r6, r5, #100	; 0x64
   192e0:	6158      	str	r0, [r3, #20]
   192e2:	4630      	mov	r0, r6
   192e4:	f005 faa5 	bl	1e832 <strlen>
   192e8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   192ec:	3001      	adds	r0, #1
   192ee:	6198      	str	r0, [r3, #24]
   192f0:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
   192f4:	3b01      	subs	r3, #1
   192f6:	2b01      	cmp	r3, #1
   192f8:	d84b      	bhi.n	19392 <pdn_interface_setopt+0x12a>
   192fa:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   192fe:	6943      	ldr	r3, [r0, #20]
   19300:	2b63      	cmp	r3, #99	; 0x63
   19302:	dc46      	bgt.n	19392 <pdn_interface_setopt+0x12a>
   19304:	6982      	ldr	r2, [r0, #24]
   19306:	2a63      	cmp	r2, #99	; 0x63
   19308:	dc43      	bgt.n	19392 <pdn_interface_setopt+0x12a>
   1930a:	4413      	add	r3, r2
   1930c:	f103 0120 	add.w	r1, r3, #32
   19310:	f001 fe7a 	bl	1b008 <nrf_realloc>
   19314:	4603      	mov	r3, r0
   19316:	2800      	cmp	r0, #0
   19318:	d048      	beq.n	193ac <pdn_interface_setopt+0x144>
   1931a:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   1931e:	6941      	ldr	r1, [r0, #20]
   19320:	462b      	mov	r3, r5
   19322:	4a28      	ldr	r2, [pc, #160]	; (193c4 <pdn_interface_setopt+0x15c>)
   19324:	3020      	adds	r0, #32
   19326:	f7f7 f977 	bl	10618 <snprintf>
   1932a:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1932e:	3021      	adds	r0, #33	; 0x21
   19330:	4633      	mov	r3, r6
   19332:	6991      	ldr	r1, [r2, #24]
   19334:	4410      	add	r0, r2
   19336:	4a23      	ldr	r2, [pc, #140]	; (193c4 <pdn_interface_setopt+0x15c>)
   19338:	f7f7 f96e 	bl	10618 <snprintf>
   1933c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   19340:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   19344:	2000      	movs	r0, #0
   19346:	741a      	strb	r2, [r3, #16]
   19348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1934a:	202d      	movs	r0, #45	; 0x2d
   1934c:	e7a0      	b.n	19290 <pdn_interface_setopt+0x28>
   1934e:	689a      	ldr	r2, [r3, #8]
   19350:	b12a      	cbz	r2, 1935e <pdn_interface_setopt+0xf6>
   19352:	689a      	ldr	r2, [r3, #8]
   19354:	2a03      	cmp	r2, #3
   19356:	d002      	beq.n	1935e <pdn_interface_setopt+0xf6>
   19358:	689a      	ldr	r2, [r3, #8]
   1935a:	2a04      	cmp	r2, #4
   1935c:	d101      	bne.n	19362 <pdn_interface_setopt+0xfa>
   1935e:	200e      	movs	r0, #14
   19360:	e796      	b.n	19290 <pdn_interface_setopt+0x28>
   19362:	08b2      	lsrs	r2, r6, #2
   19364:	1e51      	subs	r1, r2, #1
   19366:	2901      	cmp	r1, #1
   19368:	d813      	bhi.n	19392 <pdn_interface_setopt+0x12a>
   1936a:	07b1      	lsls	r1, r6, #30
   1936c:	d111      	bne.n	19392 <pdn_interface_setopt+0x12a>
   1936e:	6829      	ldr	r1, [r5, #0]
   19370:	2902      	cmp	r1, #2
   19372:	d016      	beq.n	193a2 <pdn_interface_setopt+0x13a>
   19374:	290a      	cmp	r1, #10
   19376:	d10c      	bne.n	19392 <pdn_interface_setopt+0x12a>
   19378:	2102      	movs	r1, #2
   1937a:	2a02      	cmp	r2, #2
   1937c:	d106      	bne.n	1938c <pdn_interface_setopt+0x124>
   1937e:	686a      	ldr	r2, [r5, #4]
   19380:	2a02      	cmp	r2, #2
   19382:	d010      	beq.n	193a6 <pdn_interface_setopt+0x13e>
   19384:	2a0a      	cmp	r2, #10
   19386:	d104      	bne.n	19392 <pdn_interface_setopt+0x12a>
   19388:	f041 0102 	orr.w	r1, r1, #2
   1938c:	60d9      	str	r1, [r3, #12]
   1938e:	2000      	movs	r0, #0
   19390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19392:	2016      	movs	r0, #22
   19394:	e77c      	b.n	19290 <pdn_interface_setopt+0x28>
   19396:	2016      	movs	r0, #22
   19398:	f7f8 f866 	bl	11468 <bsd_os_errno_set>
   1939c:	f04f 30ff 	mov.w	r0, #4294967295
   193a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   193a2:	2101      	movs	r1, #1
   193a4:	e7e9      	b.n	1937a <pdn_interface_setopt+0x112>
   193a6:	f041 0101 	orr.w	r1, r1, #1
   193aa:	e7ef      	b.n	1938c <pdn_interface_setopt+0x124>
   193ac:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   193b0:	200c      	movs	r0, #12
   193b2:	6153      	str	r3, [r2, #20]
   193b4:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   193b8:	6193      	str	r3, [r2, #24]
   193ba:	e769      	b.n	19290 <pdn_interface_setopt+0x28>
   193bc:	789a0000 	.word	0x789a0000
   193c0:	20020e44 	.word	0x20020e44
   193c4:	00021260 	.word	0x00021260

000193c8 <pdn_interface_getopt>:
   193c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   193cc:	f240 2402 	movw	r4, #514	; 0x202
   193d0:	b083      	sub	sp, #12
   193d2:	42a1      	cmp	r1, r4
   193d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   193d6:	f040 808f 	bne.w	194f8 <pdn_interface_getopt+0x130>
   193da:	461e      	mov	r6, r3
   193dc:	2b00      	cmp	r3, #0
   193de:	f000 808b 	beq.w	194f8 <pdn_interface_getopt+0x130>
   193e2:	2d00      	cmp	r5, #0
   193e4:	f000 8088 	beq.w	194f8 <pdn_interface_getopt+0x130>
   193e8:	0c03      	lsrs	r3, r0, #16
   193ea:	4954      	ldr	r1, [pc, #336]	; (1953c <pdn_interface_getopt+0x174>)
   193ec:	041b      	lsls	r3, r3, #16
   193ee:	428b      	cmp	r3, r1
   193f0:	f040 8084 	bne.w	194fc <pdn_interface_getopt+0x134>
   193f4:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   193f8:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   193fc:	2c09      	cmp	r4, #9
   193fe:	dc7d      	bgt.n	194fc <pdn_interface_getopt+0x134>
   19400:	4b4f      	ldr	r3, [pc, #316]	; (19540 <pdn_interface_getopt+0x178>)
   19402:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   19406:	2b00      	cmp	r3, #0
   19408:	d078      	beq.n	194fc <pdn_interface_getopt+0x134>
   1940a:	6899      	ldr	r1, [r3, #8]
   1940c:	2900      	cmp	r1, #0
   1940e:	d075      	beq.n	194fc <pdn_interface_getopt+0x134>
   19410:	2a02      	cmp	r2, #2
   19412:	d04e      	beq.n	194b2 <pdn_interface_getopt+0xea>
   19414:	2a03      	cmp	r2, #3
   19416:	d009      	beq.n	1942c <pdn_interface_getopt+0x64>
   19418:	2a01      	cmp	r2, #1
   1941a:	d054      	beq.n	194c6 <pdn_interface_getopt+0xfe>
   1941c:	202d      	movs	r0, #45	; 0x2d
   1941e:	f7f8 f823 	bl	11468 <bsd_os_errno_set>
   19422:	f04f 30ff 	mov.w	r0, #4294967295
   19426:	b003      	add	sp, #12
   19428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1942c:	682b      	ldr	r3, [r5, #0]
   1942e:	2b00      	cmp	r3, #0
   19430:	d062      	beq.n	194f8 <pdn_interface_getopt+0x130>
   19432:	4b44      	ldr	r3, [pc, #272]	; (19544 <pdn_interface_getopt+0x17c>)
   19434:	4a44      	ldr	r2, [pc, #272]	; (19548 <pdn_interface_getopt+0x180>)
   19436:	f44f 7180 	mov.w	r1, #256	; 0x100
   1943a:	4844      	ldr	r0, [pc, #272]	; (1954c <pdn_interface_getopt+0x184>)
   1943c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 19558 <pdn_interface_getopt+0x190>
   19440:	f7f7 f8ea 	bl	10618 <snprintf>
   19444:	4841      	ldr	r0, [pc, #260]	; (1954c <pdn_interface_getopt+0x184>)
   19446:	f8d8 9000 	ldr.w	r9, [r8]
   1944a:	2700      	movs	r7, #0
   1944c:	f005 f9f1 	bl	1e832 <strlen>
   19450:	463b      	mov	r3, r7
   19452:	4602      	mov	r2, r0
   19454:	493d      	ldr	r1, [pc, #244]	; (1954c <pdn_interface_getopt+0x184>)
   19456:	4648      	mov	r0, r9
   19458:	9701      	str	r7, [sp, #4]
   1945a:	9700      	str	r7, [sp, #0]
   1945c:	f7ff f81c 	bl	18498 <at_interface_write>
   19460:	4681      	mov	r9, r0
   19462:	483a      	ldr	r0, [pc, #232]	; (1954c <pdn_interface_getopt+0x184>)
   19464:	f005 f9e5 	bl	1e832 <strlen>
   19468:	4548      	cmp	r0, r9
   1946a:	d161      	bne.n	19530 <pdn_interface_getopt+0x168>
   1946c:	463b      	mov	r3, r7
   1946e:	e9cd 7700 	strd	r7, r7, [sp]
   19472:	f44f 7280 	mov.w	r2, #256	; 0x100
   19476:	4935      	ldr	r1, [pc, #212]	; (1954c <pdn_interface_getopt+0x184>)
   19478:	f8d8 0000 	ldr.w	r0, [r8]
   1947c:	f7ff f960 	bl	18740 <at_interface_read>
   19480:	4607      	mov	r7, r0
   19482:	4833      	ldr	r0, [pc, #204]	; (19550 <pdn_interface_getopt+0x188>)
   19484:	f005 f9d5 	bl	1e832 <strlen>
   19488:	4287      	cmp	r7, r0
   1948a:	db3d      	blt.n	19508 <pdn_interface_getopt+0x140>
   1948c:	4602      	mov	r2, r0
   1948e:	492f      	ldr	r1, [pc, #188]	; (1954c <pdn_interface_getopt+0x184>)
   19490:	482f      	ldr	r0, [pc, #188]	; (19550 <pdn_interface_getopt+0x188>)
   19492:	f005 f9e1 	bl	1e858 <strncmp>
   19496:	4607      	mov	r7, r0
   19498:	2800      	cmp	r0, #0
   1949a:	d135      	bne.n	19508 <pdn_interface_getopt+0x140>
   1949c:	4620      	mov	r0, r4
   1949e:	492b      	ldr	r1, [pc, #172]	; (1954c <pdn_interface_getopt+0x184>)
   194a0:	f7ff fa38 	bl	18914 <pdn_state_get_parser>
   194a4:	2800      	cmp	r0, #0
   194a6:	dbba      	blt.n	1941e <pdn_interface_getopt+0x56>
   194a8:	2301      	movs	r3, #1
   194aa:	7030      	strb	r0, [r6, #0]
   194ac:	4638      	mov	r0, r7
   194ae:	602b      	str	r3, [r5, #0]
   194b0:	e7b9      	b.n	19426 <pdn_interface_getopt+0x5e>
   194b2:	682a      	ldr	r2, [r5, #0]
   194b4:	b302      	cbz	r2, 194f8 <pdn_interface_getopt+0x130>
   194b6:	2201      	movs	r2, #1
   194b8:	2000      	movs	r0, #0
   194ba:	681b      	ldr	r3, [r3, #0]
   194bc:	7033      	strb	r3, [r6, #0]
   194be:	602a      	str	r2, [r5, #0]
   194c0:	b003      	add	sp, #12
   194c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   194c6:	689a      	ldr	r2, [r3, #8]
   194c8:	b1a2      	cbz	r2, 194f4 <pdn_interface_getopt+0x12c>
   194ca:	689a      	ldr	r2, [r3, #8]
   194cc:	2a04      	cmp	r2, #4
   194ce:	d011      	beq.n	194f4 <pdn_interface_getopt+0x12c>
   194d0:	682a      	ldr	r2, [r5, #0]
   194d2:	2a07      	cmp	r2, #7
   194d4:	d910      	bls.n	194f8 <pdn_interface_getopt+0x130>
   194d6:	f012 0203 	ands.w	r2, r2, #3
   194da:	d10d      	bne.n	194f8 <pdn_interface_getopt+0x130>
   194dc:	68db      	ldr	r3, [r3, #12]
   194de:	0799      	lsls	r1, r3, #30
   194e0:	d421      	bmi.n	19526 <pdn_interface_getopt+0x15e>
   194e2:	2104      	movs	r1, #4
   194e4:	07db      	lsls	r3, r3, #31
   194e6:	d502      	bpl.n	194ee <pdn_interface_getopt+0x126>
   194e8:	2302      	movs	r3, #2
   194ea:	50b3      	str	r3, [r6, r2]
   194ec:	460a      	mov	r2, r1
   194ee:	602a      	str	r2, [r5, #0]
   194f0:	2000      	movs	r0, #0
   194f2:	e798      	b.n	19426 <pdn_interface_getopt+0x5e>
   194f4:	200e      	movs	r0, #14
   194f6:	e792      	b.n	1941e <pdn_interface_getopt+0x56>
   194f8:	2016      	movs	r0, #22
   194fa:	e790      	b.n	1941e <pdn_interface_getopt+0x56>
   194fc:	2009      	movs	r0, #9
   194fe:	f7f7 ffb3 	bl	11468 <bsd_os_errno_set>
   19502:	f04f 30ff 	mov.w	r0, #4294967295
   19506:	e78e      	b.n	19426 <pdn_interface_getopt+0x5e>
   19508:	4812      	ldr	r0, [pc, #72]	; (19554 <pdn_interface_getopt+0x18c>)
   1950a:	f005 f992 	bl	1e832 <strlen>
   1950e:	490f      	ldr	r1, [pc, #60]	; (1954c <pdn_interface_getopt+0x184>)
   19510:	4602      	mov	r2, r0
   19512:	4810      	ldr	r0, [pc, #64]	; (19554 <pdn_interface_getopt+0x18c>)
   19514:	f005 f9a0 	bl	1e858 <strncmp>
   19518:	b950      	cbnz	r0, 19530 <pdn_interface_getopt+0x168>
   1951a:	2008      	movs	r0, #8
   1951c:	f7f7 ffa4 	bl	11468 <bsd_os_errno_set>
   19520:	f04f 30ff 	mov.w	r0, #4294967295
   19524:	e77b      	b.n	1941e <pdn_interface_getopt+0x56>
   19526:	220a      	movs	r2, #10
   19528:	2108      	movs	r1, #8
   1952a:	6032      	str	r2, [r6, #0]
   1952c:	2204      	movs	r2, #4
   1952e:	e7d9      	b.n	194e4 <pdn_interface_getopt+0x11c>
   19530:	2005      	movs	r0, #5
   19532:	f7f7 ff99 	bl	11468 <bsd_os_errno_set>
   19536:	f04f 30ff 	mov.w	r0, #4294967295
   1953a:	e770      	b.n	1941e <pdn_interface_getopt+0x56>
   1953c:	789a0000 	.word	0x789a0000
   19540:	20020e44 	.word	0x20020e44
   19544:	00021240 	.word	0x00021240
   19548:	00021260 	.word	0x00021260
   1954c:	20020d44 	.word	0x20020d44
   19550:	0002124c 	.word	0x0002124c
   19554:	00021270 	.word	0x00021270
   19558:	20020d40 	.word	0x20020d40

0001955c <pdn_interface_pdn_id_get>:
   1955c:	2900      	cmp	r1, #0
   1955e:	f000 82ba 	beq.w	19ad6 <pdn_interface_pdn_id_get+0x57a>
   19562:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19566:	2802      	cmp	r0, #2
   19568:	b083      	sub	sp, #12
   1956a:	460e      	mov	r6, r1
   1956c:	d067      	beq.n	1963e <pdn_interface_pdn_id_get+0xe2>
   1956e:	280a      	cmp	r0, #10
   19570:	d040      	beq.n	195f4 <pdn_interface_pdn_id_get+0x98>
   19572:	4cae      	ldr	r4, [pc, #696]	; (1982c <pdn_interface_pdn_id_get+0x2d0>)
   19574:	6823      	ldr	r3, [r4, #0]
   19576:	b11b      	cbz	r3, 19580 <pdn_interface_pdn_id_get+0x24>
   19578:	689b      	ldr	r3, [r3, #8]
   1957a:	2b03      	cmp	r3, #3
   1957c:	f000 80fc 	beq.w	19778 <pdn_interface_pdn_id_get+0x21c>
   19580:	6863      	ldr	r3, [r4, #4]
   19582:	b11b      	cbz	r3, 1958c <pdn_interface_pdn_id_get+0x30>
   19584:	689b      	ldr	r3, [r3, #8]
   19586:	2b03      	cmp	r3, #3
   19588:	f000 80e4 	beq.w	19754 <pdn_interface_pdn_id_get+0x1f8>
   1958c:	68a3      	ldr	r3, [r4, #8]
   1958e:	b11b      	cbz	r3, 19598 <pdn_interface_pdn_id_get+0x3c>
   19590:	689b      	ldr	r3, [r3, #8]
   19592:	2b03      	cmp	r3, #3
   19594:	f000 80cc 	beq.w	19730 <pdn_interface_pdn_id_get+0x1d4>
   19598:	68e3      	ldr	r3, [r4, #12]
   1959a:	b11b      	cbz	r3, 195a4 <pdn_interface_pdn_id_get+0x48>
   1959c:	689b      	ldr	r3, [r3, #8]
   1959e:	2b03      	cmp	r3, #3
   195a0:	f000 80b4 	beq.w	1970c <pdn_interface_pdn_id_get+0x1b0>
   195a4:	6923      	ldr	r3, [r4, #16]
   195a6:	b11b      	cbz	r3, 195b0 <pdn_interface_pdn_id_get+0x54>
   195a8:	689b      	ldr	r3, [r3, #8]
   195aa:	2b03      	cmp	r3, #3
   195ac:	f000 80f5 	beq.w	1979a <pdn_interface_pdn_id_get+0x23e>
   195b0:	6963      	ldr	r3, [r4, #20]
   195b2:	b11b      	cbz	r3, 195bc <pdn_interface_pdn_id_get+0x60>
   195b4:	689b      	ldr	r3, [r3, #8]
   195b6:	2b03      	cmp	r3, #3
   195b8:	f000 813c 	beq.w	19834 <pdn_interface_pdn_id_get+0x2d8>
   195bc:	69a3      	ldr	r3, [r4, #24]
   195be:	b11b      	cbz	r3, 195c8 <pdn_interface_pdn_id_get+0x6c>
   195c0:	689b      	ldr	r3, [r3, #8]
   195c2:	2b03      	cmp	r3, #3
   195c4:	f000 811f 	beq.w	19806 <pdn_interface_pdn_id_get+0x2aa>
   195c8:	69e3      	ldr	r3, [r4, #28]
   195ca:	b11b      	cbz	r3, 195d4 <pdn_interface_pdn_id_get+0x78>
   195cc:	689b      	ldr	r3, [r3, #8]
   195ce:	2b03      	cmp	r3, #3
   195d0:	f000 8107 	beq.w	197e2 <pdn_interface_pdn_id_get+0x286>
   195d4:	6a23      	ldr	r3, [r4, #32]
   195d6:	b11b      	cbz	r3, 195e0 <pdn_interface_pdn_id_get+0x84>
   195d8:	689b      	ldr	r3, [r3, #8]
   195da:	2b03      	cmp	r3, #3
   195dc:	f000 80ef 	beq.w	197be <pdn_interface_pdn_id_get+0x262>
   195e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   195e2:	b113      	cbz	r3, 195ea <pdn_interface_pdn_id_get+0x8e>
   195e4:	689b      	ldr	r3, [r3, #8]
   195e6:	2b03      	cmp	r3, #3
   195e8:	d07e      	beq.n	196e8 <pdn_interface_pdn_id_get+0x18c>
   195ea:	f04f 30ff 	mov.w	r0, #4294967295
   195ee:	b003      	add	sp, #12
   195f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   195f4:	2500      	movs	r5, #0
   195f6:	4c8e      	ldr	r4, [pc, #568]	; (19830 <pdn_interface_pdn_id_get+0x2d4>)
   195f8:	e002      	b.n	19600 <pdn_interface_pdn_id_get+0xa4>
   195fa:	3501      	adds	r5, #1
   195fc:	2d0a      	cmp	r5, #10
   195fe:	d0f4      	beq.n	195ea <pdn_interface_pdn_id_get+0x8e>
   19600:	f854 3f04 	ldr.w	r3, [r4, #4]!
   19604:	2b00      	cmp	r3, #0
   19606:	d0f8      	beq.n	195fa <pdn_interface_pdn_id_get+0x9e>
   19608:	689b      	ldr	r3, [r3, #8]
   1960a:	2b03      	cmp	r3, #3
   1960c:	d1f5      	bne.n	195fa <pdn_interface_pdn_id_get+0x9e>
   1960e:	4630      	mov	r0, r6
   19610:	f005 f90f 	bl	1e832 <strlen>
   19614:	6823      	ldr	r3, [r4, #0]
   19616:	69da      	ldr	r2, [r3, #28]
   19618:	4290      	cmp	r0, r2
   1961a:	d1ee      	bne.n	195fa <pdn_interface_pdn_id_get+0x9e>
   1961c:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   19620:	4439      	add	r1, r7
   19622:	3120      	adds	r1, #32
   19624:	4602      	mov	r2, r0
   19626:	4419      	add	r1, r3
   19628:	4630      	mov	r0, r6
   1962a:	f005 f915 	bl	1e858 <strncmp>
   1962e:	2800      	cmp	r0, #0
   19630:	d1e3      	bne.n	195fa <pdn_interface_pdn_id_get+0x9e>
   19632:	6823      	ldr	r3, [r4, #0]
   19634:	68da      	ldr	r2, [r3, #12]
   19636:	0792      	lsls	r2, r2, #30
   19638:	f100 8128 	bmi.w	1988c <pdn_interface_pdn_id_get+0x330>
   1963c:	e7dd      	b.n	195fa <pdn_interface_pdn_id_get+0x9e>
   1963e:	4c7b      	ldr	r4, [pc, #492]	; (1982c <pdn_interface_pdn_id_get+0x2d0>)
   19640:	6823      	ldr	r3, [r4, #0]
   19642:	b11b      	cbz	r3, 1964c <pdn_interface_pdn_id_get+0xf0>
   19644:	689b      	ldr	r3, [r3, #8]
   19646:	2b03      	cmp	r3, #3
   19648:	f000 822a 	beq.w	19aa0 <pdn_interface_pdn_id_get+0x544>
   1964c:	6863      	ldr	r3, [r4, #4]
   1964e:	b11b      	cbz	r3, 19658 <pdn_interface_pdn_id_get+0xfc>
   19650:	689b      	ldr	r3, [r3, #8]
   19652:	2b03      	cmp	r3, #3
   19654:	f000 8209 	beq.w	19a6a <pdn_interface_pdn_id_get+0x50e>
   19658:	68a3      	ldr	r3, [r4, #8]
   1965a:	b11b      	cbz	r3, 19664 <pdn_interface_pdn_id_get+0x108>
   1965c:	689b      	ldr	r3, [r3, #8]
   1965e:	2b03      	cmp	r3, #3
   19660:	f000 81b3 	beq.w	199ca <pdn_interface_pdn_id_get+0x46e>
   19664:	68e3      	ldr	r3, [r4, #12]
   19666:	b11b      	cbz	r3, 19670 <pdn_interface_pdn_id_get+0x114>
   19668:	689d      	ldr	r5, [r3, #8]
   1966a:	2d03      	cmp	r5, #3
   1966c:	f000 81c8 	beq.w	19a00 <pdn_interface_pdn_id_get+0x4a4>
   19670:	6923      	ldr	r3, [r4, #16]
   19672:	b11b      	cbz	r3, 1967c <pdn_interface_pdn_id_get+0x120>
   19674:	689b      	ldr	r3, [r3, #8]
   19676:	2b03      	cmp	r3, #3
   19678:	f000 80ee 	beq.w	19858 <pdn_interface_pdn_id_get+0x2fc>
   1967c:	6963      	ldr	r3, [r4, #20]
   1967e:	b11b      	cbz	r3, 19688 <pdn_interface_pdn_id_get+0x12c>
   19680:	689b      	ldr	r3, [r3, #8]
   19682:	2b03      	cmp	r3, #3
   19684:	f000 8150 	beq.w	19928 <pdn_interface_pdn_id_get+0x3cc>
   19688:	69a3      	ldr	r3, [r4, #24]
   1968a:	b11b      	cbz	r3, 19694 <pdn_interface_pdn_id_get+0x138>
   1968c:	689b      	ldr	r3, [r3, #8]
   1968e:	2b03      	cmp	r3, #3
   19690:	f000 8165 	beq.w	1995e <pdn_interface_pdn_id_get+0x402>
   19694:	69e3      	ldr	r3, [r4, #28]
   19696:	b11b      	cbz	r3, 196a0 <pdn_interface_pdn_id_get+0x144>
   19698:	689b      	ldr	r3, [r3, #8]
   1969a:	2b03      	cmp	r3, #3
   1969c:	f000 817a 	beq.w	19994 <pdn_interface_pdn_id_get+0x438>
   196a0:	6a23      	ldr	r3, [r4, #32]
   196a2:	b11b      	cbz	r3, 196ac <pdn_interface_pdn_id_get+0x150>
   196a4:	689b      	ldr	r3, [r3, #8]
   196a6:	2b03      	cmp	r3, #3
   196a8:	f000 81c4 	beq.w	19a34 <pdn_interface_pdn_id_get+0x4d8>
   196ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   196ae:	2b00      	cmp	r3, #0
   196b0:	d09b      	beq.n	195ea <pdn_interface_pdn_id_get+0x8e>
   196b2:	689b      	ldr	r3, [r3, #8]
   196b4:	2b03      	cmp	r3, #3
   196b6:	d198      	bne.n	195ea <pdn_interface_pdn_id_get+0x8e>
   196b8:	4630      	mov	r0, r6
   196ba:	f005 f8ba 	bl	1e832 <strlen>
   196be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   196c0:	69da      	ldr	r2, [r3, #28]
   196c2:	4290      	cmp	r0, r2
   196c4:	d191      	bne.n	195ea <pdn_interface_pdn_id_get+0x8e>
   196c6:	e9d3 5105 	ldrd	r5, r1, [r3, #20]
   196ca:	4429      	add	r1, r5
   196cc:	3120      	adds	r1, #32
   196ce:	4602      	mov	r2, r0
   196d0:	4419      	add	r1, r3
   196d2:	4630      	mov	r0, r6
   196d4:	f005 f8c0 	bl	1e858 <strncmp>
   196d8:	2800      	cmp	r0, #0
   196da:	d186      	bne.n	195ea <pdn_interface_pdn_id_get+0x8e>
   196dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   196de:	68da      	ldr	r2, [r3, #12]
   196e0:	07d2      	lsls	r2, r2, #31
   196e2:	d582      	bpl.n	195ea <pdn_interface_pdn_id_get+0x8e>
   196e4:	2509      	movs	r5, #9
   196e6:	e0d1      	b.n	1988c <pdn_interface_pdn_id_get+0x330>
   196e8:	4630      	mov	r0, r6
   196ea:	f005 f8a2 	bl	1e832 <strlen>
   196ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   196f0:	69da      	ldr	r2, [r3, #28]
   196f2:	4290      	cmp	r0, r2
   196f4:	f47f af79 	bne.w	195ea <pdn_interface_pdn_id_get+0x8e>
   196f8:	e9d3 1405 	ldrd	r1, r4, [r3, #20]
   196fc:	4421      	add	r1, r4
   196fe:	3120      	adds	r1, #32
   19700:	4602      	mov	r2, r0
   19702:	4419      	add	r1, r3
   19704:	4630      	mov	r0, r6
   19706:	f005 f8a7 	bl	1e858 <strncmp>
   1970a:	e76e      	b.n	195ea <pdn_interface_pdn_id_get+0x8e>
   1970c:	4630      	mov	r0, r6
   1970e:	f005 f890 	bl	1e832 <strlen>
   19712:	68e3      	ldr	r3, [r4, #12]
   19714:	69da      	ldr	r2, [r3, #28]
   19716:	4290      	cmp	r0, r2
   19718:	f47f af44 	bne.w	195a4 <pdn_interface_pdn_id_get+0x48>
   1971c:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   19720:	4429      	add	r1, r5
   19722:	3120      	adds	r1, #32
   19724:	4602      	mov	r2, r0
   19726:	4419      	add	r1, r3
   19728:	4630      	mov	r0, r6
   1972a:	f005 f895 	bl	1e858 <strncmp>
   1972e:	e739      	b.n	195a4 <pdn_interface_pdn_id_get+0x48>
   19730:	4630      	mov	r0, r6
   19732:	f005 f87e 	bl	1e832 <strlen>
   19736:	68a3      	ldr	r3, [r4, #8]
   19738:	69da      	ldr	r2, [r3, #28]
   1973a:	4290      	cmp	r0, r2
   1973c:	f47f af2c 	bne.w	19598 <pdn_interface_pdn_id_get+0x3c>
   19740:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   19744:	4429      	add	r1, r5
   19746:	3120      	adds	r1, #32
   19748:	4602      	mov	r2, r0
   1974a:	4419      	add	r1, r3
   1974c:	4630      	mov	r0, r6
   1974e:	f005 f883 	bl	1e858 <strncmp>
   19752:	e721      	b.n	19598 <pdn_interface_pdn_id_get+0x3c>
   19754:	4630      	mov	r0, r6
   19756:	f005 f86c 	bl	1e832 <strlen>
   1975a:	6863      	ldr	r3, [r4, #4]
   1975c:	69da      	ldr	r2, [r3, #28]
   1975e:	4290      	cmp	r0, r2
   19760:	f47f af14 	bne.w	1958c <pdn_interface_pdn_id_get+0x30>
   19764:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   19768:	4429      	add	r1, r5
   1976a:	3120      	adds	r1, #32
   1976c:	4602      	mov	r2, r0
   1976e:	4419      	add	r1, r3
   19770:	4630      	mov	r0, r6
   19772:	f005 f871 	bl	1e858 <strncmp>
   19776:	e709      	b.n	1958c <pdn_interface_pdn_id_get+0x30>
   19778:	4608      	mov	r0, r1
   1977a:	f005 f85a 	bl	1e832 <strlen>
   1977e:	6823      	ldr	r3, [r4, #0]
   19780:	69da      	ldr	r2, [r3, #28]
   19782:	4282      	cmp	r2, r0
   19784:	f47f aefc 	bne.w	19580 <pdn_interface_pdn_id_get+0x24>
   19788:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   1978c:	4401      	add	r1, r0
   1978e:	3120      	adds	r1, #32
   19790:	4419      	add	r1, r3
   19792:	4630      	mov	r0, r6
   19794:	f005 f860 	bl	1e858 <strncmp>
   19798:	e6f2      	b.n	19580 <pdn_interface_pdn_id_get+0x24>
   1979a:	4630      	mov	r0, r6
   1979c:	f005 f849 	bl	1e832 <strlen>
   197a0:	6923      	ldr	r3, [r4, #16]
   197a2:	69da      	ldr	r2, [r3, #28]
   197a4:	4290      	cmp	r0, r2
   197a6:	f47f af03 	bne.w	195b0 <pdn_interface_pdn_id_get+0x54>
   197aa:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   197ae:	4429      	add	r1, r5
   197b0:	3120      	adds	r1, #32
   197b2:	4602      	mov	r2, r0
   197b4:	4419      	add	r1, r3
   197b6:	4630      	mov	r0, r6
   197b8:	f005 f84e 	bl	1e858 <strncmp>
   197bc:	e6f8      	b.n	195b0 <pdn_interface_pdn_id_get+0x54>
   197be:	4630      	mov	r0, r6
   197c0:	f005 f837 	bl	1e832 <strlen>
   197c4:	6a23      	ldr	r3, [r4, #32]
   197c6:	69da      	ldr	r2, [r3, #28]
   197c8:	4290      	cmp	r0, r2
   197ca:	f47f af09 	bne.w	195e0 <pdn_interface_pdn_id_get+0x84>
   197ce:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   197d2:	4429      	add	r1, r5
   197d4:	3120      	adds	r1, #32
   197d6:	4602      	mov	r2, r0
   197d8:	4419      	add	r1, r3
   197da:	4630      	mov	r0, r6
   197dc:	f005 f83c 	bl	1e858 <strncmp>
   197e0:	e6fe      	b.n	195e0 <pdn_interface_pdn_id_get+0x84>
   197e2:	4630      	mov	r0, r6
   197e4:	f005 f825 	bl	1e832 <strlen>
   197e8:	69e3      	ldr	r3, [r4, #28]
   197ea:	69da      	ldr	r2, [r3, #28]
   197ec:	4290      	cmp	r0, r2
   197ee:	f47f aef1 	bne.w	195d4 <pdn_interface_pdn_id_get+0x78>
   197f2:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   197f6:	4429      	add	r1, r5
   197f8:	3120      	adds	r1, #32
   197fa:	4602      	mov	r2, r0
   197fc:	4419      	add	r1, r3
   197fe:	4630      	mov	r0, r6
   19800:	f005 f82a 	bl	1e858 <strncmp>
   19804:	e6e6      	b.n	195d4 <pdn_interface_pdn_id_get+0x78>
   19806:	4630      	mov	r0, r6
   19808:	f005 f813 	bl	1e832 <strlen>
   1980c:	69a3      	ldr	r3, [r4, #24]
   1980e:	69da      	ldr	r2, [r3, #28]
   19810:	4290      	cmp	r0, r2
   19812:	f47f aed9 	bne.w	195c8 <pdn_interface_pdn_id_get+0x6c>
   19816:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1981a:	4429      	add	r1, r5
   1981c:	3120      	adds	r1, #32
   1981e:	4602      	mov	r2, r0
   19820:	4419      	add	r1, r3
   19822:	4630      	mov	r0, r6
   19824:	f005 f818 	bl	1e858 <strncmp>
   19828:	e6ce      	b.n	195c8 <pdn_interface_pdn_id_get+0x6c>
   1982a:	bf00      	nop
   1982c:	20020e44 	.word	0x20020e44
   19830:	20020e40 	.word	0x20020e40
   19834:	4630      	mov	r0, r6
   19836:	f004 fffc 	bl	1e832 <strlen>
   1983a:	6963      	ldr	r3, [r4, #20]
   1983c:	69da      	ldr	r2, [r3, #28]
   1983e:	4290      	cmp	r0, r2
   19840:	f47f aebc 	bne.w	195bc <pdn_interface_pdn_id_get+0x60>
   19844:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   19848:	4429      	add	r1, r5
   1984a:	3120      	adds	r1, #32
   1984c:	4602      	mov	r2, r0
   1984e:	4419      	add	r1, r3
   19850:	4630      	mov	r0, r6
   19852:	f005 f801 	bl	1e858 <strncmp>
   19856:	e6b1      	b.n	195bc <pdn_interface_pdn_id_get+0x60>
   19858:	4630      	mov	r0, r6
   1985a:	f004 ffea 	bl	1e832 <strlen>
   1985e:	6923      	ldr	r3, [r4, #16]
   19860:	69da      	ldr	r2, [r3, #28]
   19862:	4290      	cmp	r0, r2
   19864:	f47f af0a 	bne.w	1967c <pdn_interface_pdn_id_get+0x120>
   19868:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1986c:	4429      	add	r1, r5
   1986e:	3120      	adds	r1, #32
   19870:	4602      	mov	r2, r0
   19872:	4419      	add	r1, r3
   19874:	4630      	mov	r0, r6
   19876:	f004 ffef 	bl	1e858 <strncmp>
   1987a:	2800      	cmp	r0, #0
   1987c:	f47f aefe 	bne.w	1967c <pdn_interface_pdn_id_get+0x120>
   19880:	6923      	ldr	r3, [r4, #16]
   19882:	68da      	ldr	r2, [r3, #12]
   19884:	07d2      	lsls	r2, r2, #31
   19886:	f57f aef9 	bpl.w	1967c <pdn_interface_pdn_id_get+0x120>
   1988a:	2504      	movs	r5, #4
   1988c:	6858      	ldr	r0, [r3, #4]
   1988e:	1c43      	adds	r3, r0, #1
   19890:	f47f aead 	bne.w	195ee <pdn_interface_pdn_id_get+0x92>
   19894:	4e9d      	ldr	r6, [pc, #628]	; (19b0c <pdn_interface_pdn_id_get+0x5b0>)
   19896:	4b9e      	ldr	r3, [pc, #632]	; (19b10 <pdn_interface_pdn_id_get+0x5b4>)
   19898:	4a9e      	ldr	r2, [pc, #632]	; (19b14 <pdn_interface_pdn_id_get+0x5b8>)
   1989a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1989e:	4630      	mov	r0, r6
   198a0:	f7f6 feba 	bl	10618 <snprintf>
   198a4:	4c9c      	ldr	r4, [pc, #624]	; (19b18 <pdn_interface_pdn_id_get+0x5bc>)
   198a6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   198aa:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   198ae:	4a9b      	ldr	r2, [pc, #620]	; (19b1c <pdn_interface_pdn_id_get+0x5c0>)
   198b0:	681b      	ldr	r3, [r3, #0]
   198b2:	4430      	add	r0, r6
   198b4:	f8df 8270 	ldr.w	r8, [pc, #624]	; 19b28 <pdn_interface_pdn_id_get+0x5cc>
   198b8:	f7f6 feae 	bl	10618 <snprintf>
   198bc:	4630      	mov	r0, r6
   198be:	f8d8 9000 	ldr.w	r9, [r8]
   198c2:	2700      	movs	r7, #0
   198c4:	f004 ffb5 	bl	1e832 <strlen>
   198c8:	4631      	mov	r1, r6
   198ca:	4602      	mov	r2, r0
   198cc:	463b      	mov	r3, r7
   198ce:	4648      	mov	r0, r9
   198d0:	9701      	str	r7, [sp, #4]
   198d2:	9700      	str	r7, [sp, #0]
   198d4:	f7fe fde0 	bl	18498 <at_interface_write>
   198d8:	4681      	mov	r9, r0
   198da:	4630      	mov	r0, r6
   198dc:	f004 ffa9 	bl	1e832 <strlen>
   198e0:	4548      	cmp	r0, r9
   198e2:	f040 810b 	bne.w	19afc <pdn_interface_pdn_id_get+0x5a0>
   198e6:	463b      	mov	r3, r7
   198e8:	f44f 7280 	mov.w	r2, #256	; 0x100
   198ec:	e9cd 7700 	strd	r7, r7, [sp]
   198f0:	4631      	mov	r1, r6
   198f2:	f8d8 0000 	ldr.w	r0, [r8]
   198f6:	f7fe ff23 	bl	18740 <at_interface_read>
   198fa:	4607      	mov	r7, r0
   198fc:	4888      	ldr	r0, [pc, #544]	; (19b20 <pdn_interface_pdn_id_get+0x5c4>)
   198fe:	f004 ff98 	bl	1e832 <strlen>
   19902:	4287      	cmp	r7, r0
   19904:	4602      	mov	r2, r0
   19906:	f2c0 80e9 	blt.w	19adc <pdn_interface_pdn_id_get+0x580>
   1990a:	4631      	mov	r1, r6
   1990c:	4884      	ldr	r0, [pc, #528]	; (19b20 <pdn_interface_pdn_id_get+0x5c4>)
   1990e:	f004 ffa3 	bl	1e858 <strncmp>
   19912:	2800      	cmp	r0, #0
   19914:	f040 80e2 	bne.w	19adc <pdn_interface_pdn_id_get+0x580>
   19918:	4631      	mov	r1, r6
   1991a:	4628      	mov	r0, r5
   1991c:	f7ff f830 	bl	18980 <pdn_id_get_parser>
   19920:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   19924:	6858      	ldr	r0, [r3, #4]
   19926:	e662      	b.n	195ee <pdn_interface_pdn_id_get+0x92>
   19928:	4630      	mov	r0, r6
   1992a:	f004 ff82 	bl	1e832 <strlen>
   1992e:	6963      	ldr	r3, [r4, #20]
   19930:	69da      	ldr	r2, [r3, #28]
   19932:	4290      	cmp	r0, r2
   19934:	f47f aea8 	bne.w	19688 <pdn_interface_pdn_id_get+0x12c>
   19938:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   1993c:	4429      	add	r1, r5
   1993e:	3120      	adds	r1, #32
   19940:	4602      	mov	r2, r0
   19942:	4419      	add	r1, r3
   19944:	4630      	mov	r0, r6
   19946:	f004 ff87 	bl	1e858 <strncmp>
   1994a:	2800      	cmp	r0, #0
   1994c:	f47f ae9c 	bne.w	19688 <pdn_interface_pdn_id_get+0x12c>
   19950:	6963      	ldr	r3, [r4, #20]
   19952:	68da      	ldr	r2, [r3, #12]
   19954:	07d7      	lsls	r7, r2, #31
   19956:	f57f ae97 	bpl.w	19688 <pdn_interface_pdn_id_get+0x12c>
   1995a:	2505      	movs	r5, #5
   1995c:	e796      	b.n	1988c <pdn_interface_pdn_id_get+0x330>
   1995e:	4630      	mov	r0, r6
   19960:	f004 ff67 	bl	1e832 <strlen>
   19964:	69a3      	ldr	r3, [r4, #24]
   19966:	69da      	ldr	r2, [r3, #28]
   19968:	4290      	cmp	r0, r2
   1996a:	f47f ae93 	bne.w	19694 <pdn_interface_pdn_id_get+0x138>
   1996e:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   19972:	4429      	add	r1, r5
   19974:	3120      	adds	r1, #32
   19976:	4602      	mov	r2, r0
   19978:	4419      	add	r1, r3
   1997a:	4630      	mov	r0, r6
   1997c:	f004 ff6c 	bl	1e858 <strncmp>
   19980:	2800      	cmp	r0, #0
   19982:	f47f ae87 	bne.w	19694 <pdn_interface_pdn_id_get+0x138>
   19986:	69a3      	ldr	r3, [r4, #24]
   19988:	68da      	ldr	r2, [r3, #12]
   1998a:	07d5      	lsls	r5, r2, #31
   1998c:	f57f ae82 	bpl.w	19694 <pdn_interface_pdn_id_get+0x138>
   19990:	2506      	movs	r5, #6
   19992:	e77b      	b.n	1988c <pdn_interface_pdn_id_get+0x330>
   19994:	4630      	mov	r0, r6
   19996:	f004 ff4c 	bl	1e832 <strlen>
   1999a:	69e3      	ldr	r3, [r4, #28]
   1999c:	69da      	ldr	r2, [r3, #28]
   1999e:	4290      	cmp	r0, r2
   199a0:	f47f ae7e 	bne.w	196a0 <pdn_interface_pdn_id_get+0x144>
   199a4:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   199a8:	4429      	add	r1, r5
   199aa:	3120      	adds	r1, #32
   199ac:	4602      	mov	r2, r0
   199ae:	4419      	add	r1, r3
   199b0:	4630      	mov	r0, r6
   199b2:	f004 ff51 	bl	1e858 <strncmp>
   199b6:	2800      	cmp	r0, #0
   199b8:	f47f ae72 	bne.w	196a0 <pdn_interface_pdn_id_get+0x144>
   199bc:	69e3      	ldr	r3, [r4, #28]
   199be:	68da      	ldr	r2, [r3, #12]
   199c0:	07d0      	lsls	r0, r2, #31
   199c2:	f57f ae6d 	bpl.w	196a0 <pdn_interface_pdn_id_get+0x144>
   199c6:	2507      	movs	r5, #7
   199c8:	e760      	b.n	1988c <pdn_interface_pdn_id_get+0x330>
   199ca:	4630      	mov	r0, r6
   199cc:	f004 ff31 	bl	1e832 <strlen>
   199d0:	68a3      	ldr	r3, [r4, #8]
   199d2:	69da      	ldr	r2, [r3, #28]
   199d4:	4290      	cmp	r0, r2
   199d6:	f47f ae45 	bne.w	19664 <pdn_interface_pdn_id_get+0x108>
   199da:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   199de:	4429      	add	r1, r5
   199e0:	3120      	adds	r1, #32
   199e2:	4602      	mov	r2, r0
   199e4:	4419      	add	r1, r3
   199e6:	4630      	mov	r0, r6
   199e8:	f004 ff36 	bl	1e858 <strncmp>
   199ec:	2800      	cmp	r0, #0
   199ee:	f47f ae39 	bne.w	19664 <pdn_interface_pdn_id_get+0x108>
   199f2:	68a3      	ldr	r3, [r4, #8]
   199f4:	68da      	ldr	r2, [r3, #12]
   199f6:	07d0      	lsls	r0, r2, #31
   199f8:	f57f ae34 	bpl.w	19664 <pdn_interface_pdn_id_get+0x108>
   199fc:	2502      	movs	r5, #2
   199fe:	e745      	b.n	1988c <pdn_interface_pdn_id_get+0x330>
   19a00:	4630      	mov	r0, r6
   19a02:	f004 ff16 	bl	1e832 <strlen>
   19a06:	68e3      	ldr	r3, [r4, #12]
   19a08:	69da      	ldr	r2, [r3, #28]
   19a0a:	4290      	cmp	r0, r2
   19a0c:	f47f ae30 	bne.w	19670 <pdn_interface_pdn_id_get+0x114>
   19a10:	e9d3 1705 	ldrd	r1, r7, [r3, #20]
   19a14:	4439      	add	r1, r7
   19a16:	3120      	adds	r1, #32
   19a18:	4602      	mov	r2, r0
   19a1a:	4419      	add	r1, r3
   19a1c:	4630      	mov	r0, r6
   19a1e:	f004 ff1b 	bl	1e858 <strncmp>
   19a22:	2800      	cmp	r0, #0
   19a24:	f47f ae24 	bne.w	19670 <pdn_interface_pdn_id_get+0x114>
   19a28:	68e3      	ldr	r3, [r4, #12]
   19a2a:	68da      	ldr	r2, [r3, #12]
   19a2c:	07d1      	lsls	r1, r2, #31
   19a2e:	f53f af2d 	bmi.w	1988c <pdn_interface_pdn_id_get+0x330>
   19a32:	e61d      	b.n	19670 <pdn_interface_pdn_id_get+0x114>
   19a34:	4630      	mov	r0, r6
   19a36:	f004 fefc 	bl	1e832 <strlen>
   19a3a:	6a23      	ldr	r3, [r4, #32]
   19a3c:	69da      	ldr	r2, [r3, #28]
   19a3e:	4290      	cmp	r0, r2
   19a40:	f47f ae34 	bne.w	196ac <pdn_interface_pdn_id_get+0x150>
   19a44:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   19a48:	4429      	add	r1, r5
   19a4a:	3120      	adds	r1, #32
   19a4c:	4602      	mov	r2, r0
   19a4e:	4419      	add	r1, r3
   19a50:	4630      	mov	r0, r6
   19a52:	f004 ff01 	bl	1e858 <strncmp>
   19a56:	2800      	cmp	r0, #0
   19a58:	f47f ae28 	bne.w	196ac <pdn_interface_pdn_id_get+0x150>
   19a5c:	6a23      	ldr	r3, [r4, #32]
   19a5e:	68da      	ldr	r2, [r3, #12]
   19a60:	07d1      	lsls	r1, r2, #31
   19a62:	f57f ae23 	bpl.w	196ac <pdn_interface_pdn_id_get+0x150>
   19a66:	2508      	movs	r5, #8
   19a68:	e710      	b.n	1988c <pdn_interface_pdn_id_get+0x330>
   19a6a:	4630      	mov	r0, r6
   19a6c:	f004 fee1 	bl	1e832 <strlen>
   19a70:	6863      	ldr	r3, [r4, #4]
   19a72:	69da      	ldr	r2, [r3, #28]
   19a74:	4290      	cmp	r0, r2
   19a76:	f47f adef 	bne.w	19658 <pdn_interface_pdn_id_get+0xfc>
   19a7a:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   19a7e:	4429      	add	r1, r5
   19a80:	3120      	adds	r1, #32
   19a82:	4602      	mov	r2, r0
   19a84:	4419      	add	r1, r3
   19a86:	4630      	mov	r0, r6
   19a88:	f004 fee6 	bl	1e858 <strncmp>
   19a8c:	2800      	cmp	r0, #0
   19a8e:	f47f ade3 	bne.w	19658 <pdn_interface_pdn_id_get+0xfc>
   19a92:	6863      	ldr	r3, [r4, #4]
   19a94:	68da      	ldr	r2, [r3, #12]
   19a96:	07d5      	lsls	r5, r2, #31
   19a98:	f57f adde 	bpl.w	19658 <pdn_interface_pdn_id_get+0xfc>
   19a9c:	2501      	movs	r5, #1
   19a9e:	e6f5      	b.n	1988c <pdn_interface_pdn_id_get+0x330>
   19aa0:	4608      	mov	r0, r1
   19aa2:	f004 fec6 	bl	1e832 <strlen>
   19aa6:	6823      	ldr	r3, [r4, #0]
   19aa8:	69da      	ldr	r2, [r3, #28]
   19aaa:	4290      	cmp	r0, r2
   19aac:	f47f adce 	bne.w	1964c <pdn_interface_pdn_id_get+0xf0>
   19ab0:	e9d3 1505 	ldrd	r1, r5, [r3, #20]
   19ab4:	4429      	add	r1, r5
   19ab6:	3120      	adds	r1, #32
   19ab8:	4602      	mov	r2, r0
   19aba:	4419      	add	r1, r3
   19abc:	4630      	mov	r0, r6
   19abe:	f004 fecb 	bl	1e858 <strncmp>
   19ac2:	4605      	mov	r5, r0
   19ac4:	2800      	cmp	r0, #0
   19ac6:	f47f adc1 	bne.w	1964c <pdn_interface_pdn_id_get+0xf0>
   19aca:	6823      	ldr	r3, [r4, #0]
   19acc:	68da      	ldr	r2, [r3, #12]
   19ace:	07d7      	lsls	r7, r2, #31
   19ad0:	f53f aedc 	bmi.w	1988c <pdn_interface_pdn_id_get+0x330>
   19ad4:	e5ba      	b.n	1964c <pdn_interface_pdn_id_get+0xf0>
   19ad6:	f04f 30ff 	mov.w	r0, #4294967295
   19ada:	4770      	bx	lr
   19adc:	4811      	ldr	r0, [pc, #68]	; (19b24 <pdn_interface_pdn_id_get+0x5c8>)
   19ade:	f004 fea8 	bl	1e832 <strlen>
   19ae2:	490a      	ldr	r1, [pc, #40]	; (19b0c <pdn_interface_pdn_id_get+0x5b0>)
   19ae4:	4602      	mov	r2, r0
   19ae6:	480f      	ldr	r0, [pc, #60]	; (19b24 <pdn_interface_pdn_id_get+0x5c8>)
   19ae8:	f004 feb6 	bl	1e858 <strncmp>
   19aec:	b930      	cbnz	r0, 19afc <pdn_interface_pdn_id_get+0x5a0>
   19aee:	2008      	movs	r0, #8
   19af0:	f7f7 fcba 	bl	11468 <bsd_os_errno_set>
   19af4:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   19af8:	6858      	ldr	r0, [r3, #4]
   19afa:	e578      	b.n	195ee <pdn_interface_pdn_id_get+0x92>
   19afc:	2005      	movs	r0, #5
   19afe:	f7f7 fcb3 	bl	11468 <bsd_os_errno_set>
   19b02:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   19b06:	6858      	ldr	r0, [r3, #4]
   19b08:	e571      	b.n	195ee <pdn_interface_pdn_id_get+0x92>
   19b0a:	bf00      	nop
   19b0c:	20020d44 	.word	0x20020d44
   19b10:	00021224 	.word	0x00021224
   19b14:	00021260 	.word	0x00021260
   19b18:	20020e44 	.word	0x20020e44
   19b1c:	00021220 	.word	0x00021220
   19b20:	00021234 	.word	0x00021234
   19b24:	00021270 	.word	0x00021270
   19b28:	20020d40 	.word	0x20020d40

00019b2c <bsd_platform_error_handler>:
   19b2c:	b508      	push	{r3, lr}
   19b2e:	f7f3 fc8d 	bl	d44c <bsd_recoverable_error_handler>
   19b32:	bd08      	pop	{r3, pc}

00019b34 <bsd_init>:
   19b34:	b160      	cbz	r0, 19b50 <bsd_init+0x1c>
   19b36:	b510      	push	{r4, lr}
   19b38:	4c07      	ldr	r4, [pc, #28]	; (19b58 <bsd_init+0x24>)
   19b3a:	7823      	ldrb	r3, [r4, #0]
   19b3c:	b92b      	cbnz	r3, 19b4a <bsd_init+0x16>
   19b3e:	f000 f81b 	bl	19b78 <bsd_platform_init>
   19b42:	b908      	cbnz	r0, 19b48 <bsd_init+0x14>
   19b44:	2301      	movs	r3, #1
   19b46:	7023      	strb	r3, [r4, #0]
   19b48:	bd10      	pop	{r4, pc}
   19b4a:	f04f 30ff 	mov.w	r0, #4294967295
   19b4e:	bd10      	pop	{r4, pc}
   19b50:	f04f 30ff 	mov.w	r0, #4294967295
   19b54:	4770      	bx	lr
   19b56:	bf00      	nop
   19b58:	200236c5 	.word	0x200236c5

00019b5c <unimplemented_method>:
   19b5c:	b40f      	push	{r0, r1, r2, r3}
   19b5e:	b508      	push	{r3, lr}
   19b60:	202d      	movs	r0, #45	; 0x2d
   19b62:	f7f7 fc81 	bl	11468 <bsd_os_errno_set>
   19b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19b6a:	f04f 30ff 	mov.w	r0, #4294967295
   19b6e:	b004      	add	sp, #16
   19b70:	4770      	bx	lr
   19b72:	bf00      	nop

00019b74 <rpc_transport_ipc_fault_handler>:
   19b74:	f7ff bfda 	b.w	19b2c <bsd_platform_error_handler>

00019b78 <bsd_platform_init>:
   19b78:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b7a:	f04f 0c00 	mov.w	ip, #0
   19b7e:	f247 0660 	movw	r6, #28768	; 0x7060
   19b82:	f24b 0260 	movw	r2, #45152	; 0xb060
   19b86:	6843      	ldr	r3, [r0, #4]
   19b88:	4d3a      	ldr	r5, [pc, #232]	; (19c74 <bsd_platform_init+0xfc>)
   19b8a:	4607      	mov	r7, r0
   19b8c:	602b      	str	r3, [r5, #0]
   19b8e:	7801      	ldrb	r1, [r0, #0]
   19b90:	2006      	movs	r0, #6
   19b92:	4561      	cmp	r1, ip
   19b94:	bf08      	it	eq
   19b96:	4632      	moveq	r2, r6
   19b98:	4413      	add	r3, r2
   19b9a:	4c37      	ldr	r4, [pc, #220]	; (19c78 <bsd_platform_init+0x100>)
   19b9c:	60ab      	str	r3, [r5, #8]
   19b9e:	68b9      	ldr	r1, [r7, #8]
   19ba0:	6063      	str	r3, [r4, #4]
   19ba2:	4b36      	ldr	r3, [pc, #216]	; (19c7c <bsd_platform_init+0x104>)
   19ba4:	b093      	sub	sp, #76	; 0x4c
   19ba6:	606a      	str	r2, [r5, #4]
   19ba8:	f8a4 c000 	strh.w	ip, [r4]
   19bac:	1a8a      	subs	r2, r1, r2
   19bae:	60ea      	str	r2, [r5, #12]
   19bb0:	60a2      	str	r2, [r4, #8]
   19bb2:	81a0      	strh	r0, [r4, #12]
   19bb4:	6123      	str	r3, [r4, #16]
   19bb6:	f001 f883 	bl	1acc0 <nrf_mem_init>
   19bba:	2800      	cmp	r0, #0
   19bbc:	d156      	bne.n	19c6c <bsd_platform_init+0xf4>
   19bbe:	4621      	mov	r1, r4
   19bc0:	a801      	add	r0, sp, #4
   19bc2:	f001 f8f1 	bl	1ada8 <nrf_mem_register>
   19bc6:	2800      	cmp	r0, #0
   19bc8:	d150      	bne.n	19c6c <bsd_platform_init+0xf4>
   19bca:	f7f7 fde1 	bl	11790 <bsd_os_init>
   19bce:	f7fd fbff 	bl	173d0 <rpc_framework_init>
   19bd2:	2800      	cmp	r0, #0
   19bd4:	d14a      	bne.n	19c6c <bsd_platform_init+0xf4>
   19bd6:	783a      	ldrb	r2, [r7, #0]
   19bd8:	682b      	ldr	r3, [r5, #0]
   19bda:	bb32      	cbnz	r2, 19c2a <bsd_platform_init+0xb2>
   19bdc:	4606      	mov	r6, r0
   19bde:	2220      	movs	r2, #32
   19be0:	2408      	movs	r4, #8
   19be2:	2500      	movs	r5, #0
   19be4:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   19be8:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   19bec:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   19bf0:	4411      	add	r1, r2
   19bf2:	9302      	str	r3, [sp, #8]
   19bf4:	e9cd 6008 	strd	r6, r0, [sp, #32]
   19bf8:	910c      	str	r1, [sp, #48]	; 0x30
   19bfa:	9203      	str	r2, [sp, #12]
   19bfc:	f103 0140 	add.w	r1, r3, #64	; 0x40
   19c00:	9205      	str	r2, [sp, #20]
   19c02:	9207      	str	r2, [sp, #28]
   19c04:	eb0d 0004 	add.w	r0, sp, r4
   19c08:	189a      	adds	r2, r3, r2
   19c0a:	3360      	adds	r3, #96	; 0x60
   19c0c:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   19c10:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   19c14:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   19c18:	940f      	str	r4, [sp, #60]	; 0x3c
   19c1a:	9104      	str	r1, [sp, #16]
   19c1c:	9206      	str	r2, [sp, #24]
   19c1e:	930a      	str	r3, [sp, #40]	; 0x28
   19c20:	f7fa fb3a 	bl	14298 <rpc_transport_ipc_init>
   19c24:	b128      	cbz	r0, 19c32 <bsd_platform_init+0xba>
   19c26:	b013      	add	sp, #76	; 0x4c
   19c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c2a:	441e      	add	r6, r3
   19c2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   19c30:	e7d5      	b.n	19bde <bsd_platform_init+0x66>
   19c32:	f001 fda9 	bl	1b788 <interface_init>
   19c36:	b9c8      	cbnz	r0, 19c6c <bsd_platform_init+0xf4>
   19c38:	f7fe fcac 	bl	18594 <at_interface_init>
   19c3c:	b9b0      	cbnz	r0, 19c6c <bsd_platform_init+0xf4>
   19c3e:	f7fb fe4b 	bl	158d8 <ip_interface_init>
   19c42:	b998      	cbnz	r0, 19c6c <bsd_platform_init+0xf4>
   19c44:	f7fb f902 	bl	14e4c <tls_interface_init>
   19c48:	b980      	cbnz	r0, 19c6c <bsd_platform_init+0xf4>
   19c4a:	f001 fab9 	bl	1b1c0 <mfu_interface_init>
   19c4e:	b968      	cbnz	r0, 19c6c <bsd_platform_init+0xf4>
   19c50:	f7fe feee 	bl	18a30 <pdn_interface_init>
   19c54:	b950      	cbnz	r0, 19c6c <bsd_platform_init+0xf4>
   19c56:	f7fe faf3 	bl	18240 <gnss_interface_init>
   19c5a:	b938      	cbnz	r0, 19c6c <bsd_platform_init+0xf4>
   19c5c:	f7f9 fd5a 	bl	13714 <logobj_interface_init>
   19c60:	1b40      	subs	r0, r0, r5
   19c62:	bf18      	it	ne
   19c64:	2001      	movne	r0, #1
   19c66:	4240      	negs	r0, r0
   19c68:	b013      	add	sp, #76	; 0x4c
   19c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c6c:	f04f 30ff 	mov.w	r0, #4294967295
   19c70:	b013      	add	sp, #76	; 0x4c
   19c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c74:	20020e80 	.word	0x20020e80
   19c78:	20020e6c 	.word	0x20020e6c
   19c7c:	000213c4 	.word	0x000213c4

00019c80 <bsd_platform_af_method_table_get>:
   19c80:	2805      	cmp	r0, #5
   19c82:	d02a      	beq.n	19cda <bsd_platform_af_method_table_get+0x5a>
   19c84:	b508      	push	{r3, lr}
   19c86:	d914      	bls.n	19cb2 <bsd_platform_af_method_table_get+0x32>
   19c88:	280a      	cmp	r0, #10
   19c8a:	d016      	beq.n	19cba <bsd_platform_af_method_table_get+0x3a>
   19c8c:	2866      	cmp	r0, #102	; 0x66
   19c8e:	d11f      	bne.n	19cd0 <bsd_platform_af_method_table_get+0x50>
   19c90:	f240 2302 	movw	r3, #514	; 0x202
   19c94:	429a      	cmp	r2, r3
   19c96:	d035      	beq.n	19d04 <bsd_platform_af_method_table_get+0x84>
   19c98:	f240 2305 	movw	r3, #517	; 0x205
   19c9c:	429a      	cmp	r2, r3
   19c9e:	d035      	beq.n	19d0c <bsd_platform_af_method_table_get+0x8c>
   19ca0:	f240 2301 	movw	r3, #513	; 0x201
   19ca4:	429a      	cmp	r2, r3
   19ca6:	d02f      	beq.n	19d08 <bsd_platform_af_method_table_get+0x88>
   19ca8:	202b      	movs	r0, #43	; 0x2b
   19caa:	f7f7 fbdd 	bl	11468 <bsd_os_errno_set>
   19cae:	2000      	movs	r0, #0
   19cb0:	bd08      	pop	{r3, pc}
   19cb2:	2801      	cmp	r0, #1
   19cb4:	d016      	beq.n	19ce4 <bsd_platform_af_method_table_get+0x64>
   19cb6:	2802      	cmp	r0, #2
   19cb8:	d10a      	bne.n	19cd0 <bsd_platform_af_method_table_get+0x50>
   19cba:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   19cbe:	d21a      	bcs.n	19cf6 <bsd_platform_af_method_table_get+0x76>
   19cc0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   19cc4:	d21a      	bcs.n	19cfc <bsd_platform_af_method_table_get+0x7c>
   19cc6:	3a01      	subs	r2, #1
   19cc8:	2a01      	cmp	r2, #1
   19cca:	d8ed      	bhi.n	19ca8 <bsd_platform_af_method_table_get+0x28>
   19ccc:	4810      	ldr	r0, [pc, #64]	; (19d10 <bsd_platform_af_method_table_get+0x90>)
   19cce:	bd08      	pop	{r3, pc}
   19cd0:	2016      	movs	r0, #22
   19cd2:	f7f7 fbc9 	bl	11468 <bsd_os_errno_set>
   19cd6:	2000      	movs	r0, #0
   19cd8:	bd08      	pop	{r3, pc}
   19cda:	2903      	cmp	r1, #3
   19cdc:	480d      	ldr	r0, [pc, #52]	; (19d14 <bsd_platform_af_method_table_get+0x94>)
   19cde:	bf18      	it	ne
   19ce0:	2000      	movne	r0, #0
   19ce2:	4770      	bx	lr
   19ce4:	f240 2303 	movw	r3, #515	; 0x203
   19ce8:	429a      	cmp	r2, r3
   19cea:	d009      	beq.n	19d00 <bsd_platform_af_method_table_get+0x80>
   19cec:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   19cf0:	d1da      	bne.n	19ca8 <bsd_platform_af_method_table_get+0x28>
   19cf2:	4809      	ldr	r0, [pc, #36]	; (19d18 <bsd_platform_af_method_table_get+0x98>)
   19cf4:	bd08      	pop	{r3, pc}
   19cf6:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   19cfa:	d1d5      	bne.n	19ca8 <bsd_platform_af_method_table_get+0x28>
   19cfc:	4807      	ldr	r0, [pc, #28]	; (19d1c <bsd_platform_af_method_table_get+0x9c>)
   19cfe:	bd08      	pop	{r3, pc}
   19d00:	4807      	ldr	r0, [pc, #28]	; (19d20 <bsd_platform_af_method_table_get+0xa0>)
   19d02:	bd08      	pop	{r3, pc}
   19d04:	4807      	ldr	r0, [pc, #28]	; (19d24 <bsd_platform_af_method_table_get+0xa4>)
   19d06:	bd08      	pop	{r3, pc}
   19d08:	4807      	ldr	r0, [pc, #28]	; (19d28 <bsd_platform_af_method_table_get+0xa8>)
   19d0a:	bd08      	pop	{r3, pc}
   19d0c:	4807      	ldr	r0, [pc, #28]	; (19d2c <bsd_platform_af_method_table_get+0xac>)
   19d0e:	bd08      	pop	{r3, pc}
   19d10:	000212ac 	.word	0x000212ac
   19d14:	0002139c 	.word	0x0002139c
   19d18:	0002134c 	.word	0x0002134c
   19d1c:	000212d4 	.word	0x000212d4
   19d20:	000212fc 	.word	0x000212fc
   19d24:	00021324 	.word	0x00021324
   19d28:	00021284 	.word	0x00021284
   19d2c:	00021374 	.word	0x00021374

00019d30 <bsd_platform_fd_method_table_get>:
   19d30:	b538      	push	{r3, r4, r5, lr}
   19d32:	4605      	mov	r5, r0
   19d34:	f001 fe5a 	bl	1b9ec <interface_socket_from_handle_get>
   19d38:	4604      	mov	r4, r0
   19d3a:	b960      	cbnz	r0, 19d56 <bsd_platform_fd_method_table_get+0x26>
   19d3c:	4b2c      	ldr	r3, [pc, #176]	; (19df0 <bsd_platform_fd_method_table_get+0xc0>)
   19d3e:	429d      	cmp	r5, r3
   19d40:	d02f      	beq.n	19da2 <bsd_platform_fd_method_table_get+0x72>
   19d42:	0c2b      	lsrs	r3, r5, #16
   19d44:	4a2b      	ldr	r2, [pc, #172]	; (19df4 <bsd_platform_fd_method_table_get+0xc4>)
   19d46:	041b      	lsls	r3, r3, #16
   19d48:	4293      	cmp	r3, r2
   19d4a:	d03d      	beq.n	19dc8 <bsd_platform_fd_method_table_get+0x98>
   19d4c:	4b2a      	ldr	r3, [pc, #168]	; (19df8 <bsd_platform_fd_method_table_get+0xc8>)
   19d4e:	429d      	cmp	r5, r3
   19d50:	d149      	bne.n	19de6 <bsd_platform_fd_method_table_get+0xb6>
   19d52:	482a      	ldr	r0, [pc, #168]	; (19dfc <bsd_platform_fd_method_table_get+0xcc>)
   19d54:	bd38      	pop	{r3, r4, r5, pc}
   19d56:	68c3      	ldr	r3, [r0, #12]
   19d58:	6942      	ldr	r2, [r0, #20]
   19d5a:	2b05      	cmp	r3, #5
   19d5c:	d036      	beq.n	19dcc <bsd_platform_fd_method_table_get+0x9c>
   19d5e:	d911      	bls.n	19d84 <bsd_platform_fd_method_table_get+0x54>
   19d60:	2b0a      	cmp	r3, #10
   19d62:	d013      	beq.n	19d8c <bsd_platform_fd_method_table_get+0x5c>
   19d64:	2b66      	cmp	r3, #102	; 0x66
   19d66:	d11e      	bne.n	19da6 <bsd_platform_fd_method_table_get+0x76>
   19d68:	f240 2302 	movw	r3, #514	; 0x202
   19d6c:	429a      	cmp	r2, r3
   19d6e:	d02b      	beq.n	19dc8 <bsd_platform_fd_method_table_get+0x98>
   19d70:	f240 2305 	movw	r3, #517	; 0x205
   19d74:	429a      	cmp	r2, r3
   19d76:	d02f      	beq.n	19dd8 <bsd_platform_fd_method_table_get+0xa8>
   19d78:	f240 2301 	movw	r3, #513	; 0x201
   19d7c:	429a      	cmp	r2, r3
   19d7e:	d11e      	bne.n	19dbe <bsd_platform_fd_method_table_get+0x8e>
   19d80:	481f      	ldr	r0, [pc, #124]	; (19e00 <bsd_platform_fd_method_table_get+0xd0>)
   19d82:	bd38      	pop	{r3, r4, r5, pc}
   19d84:	2b01      	cmp	r3, #1
   19d86:	d013      	beq.n	19db0 <bsd_platform_fd_method_table_get+0x80>
   19d88:	2b02      	cmp	r3, #2
   19d8a:	d10c      	bne.n	19da6 <bsd_platform_fd_method_table_get+0x76>
   19d8c:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   19d90:	d224      	bcs.n	19ddc <bsd_platform_fd_method_table_get+0xac>
   19d92:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   19d96:	d224      	bcs.n	19de2 <bsd_platform_fd_method_table_get+0xb2>
   19d98:	3a01      	subs	r2, #1
   19d9a:	2a01      	cmp	r2, #1
   19d9c:	d80f      	bhi.n	19dbe <bsd_platform_fd_method_table_get+0x8e>
   19d9e:	4819      	ldr	r0, [pc, #100]	; (19e04 <bsd_platform_fd_method_table_get+0xd4>)
   19da0:	bd38      	pop	{r3, r4, r5, pc}
   19da2:	4819      	ldr	r0, [pc, #100]	; (19e08 <bsd_platform_fd_method_table_get+0xd8>)
   19da4:	bd38      	pop	{r3, r4, r5, pc}
   19da6:	2016      	movs	r0, #22
   19da8:	f7f7 fb5e 	bl	11468 <bsd_os_errno_set>
   19dac:	2000      	movs	r0, #0
   19dae:	bd38      	pop	{r3, r4, r5, pc}
   19db0:	f240 2303 	movw	r3, #515	; 0x203
   19db4:	429a      	cmp	r2, r3
   19db6:	d0f4      	beq.n	19da2 <bsd_platform_fd_method_table_get+0x72>
   19db8:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   19dbc:	d0c9      	beq.n	19d52 <bsd_platform_fd_method_table_get+0x22>
   19dbe:	202b      	movs	r0, #43	; 0x2b
   19dc0:	f7f7 fb52 	bl	11468 <bsd_os_errno_set>
   19dc4:	2000      	movs	r0, #0
   19dc6:	bd38      	pop	{r3, r4, r5, pc}
   19dc8:	4810      	ldr	r0, [pc, #64]	; (19e0c <bsd_platform_fd_method_table_get+0xdc>)
   19dca:	bd38      	pop	{r3, r4, r5, pc}
   19dcc:	6903      	ldr	r3, [r0, #16]
   19dce:	4810      	ldr	r0, [pc, #64]	; (19e10 <bsd_platform_fd_method_table_get+0xe0>)
   19dd0:	2b03      	cmp	r3, #3
   19dd2:	bf18      	it	ne
   19dd4:	2000      	movne	r0, #0
   19dd6:	bd38      	pop	{r3, r4, r5, pc}
   19dd8:	480e      	ldr	r0, [pc, #56]	; (19e14 <bsd_platform_fd_method_table_get+0xe4>)
   19dda:	bd38      	pop	{r3, r4, r5, pc}
   19ddc:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   19de0:	d1ed      	bne.n	19dbe <bsd_platform_fd_method_table_get+0x8e>
   19de2:	480d      	ldr	r0, [pc, #52]	; (19e18 <bsd_platform_fd_method_table_get+0xe8>)
   19de4:	bd38      	pop	{r3, r4, r5, pc}
   19de6:	2009      	movs	r0, #9
   19de8:	f7f7 fb3e 	bl	11468 <bsd_os_errno_set>
   19dec:	4620      	mov	r0, r4
   19dee:	bd38      	pop	{r3, r4, r5, pc}
   19df0:	49765432 	.word	0x49765432
   19df4:	789a0000 	.word	0x789a0000
   19df8:	49765443 	.word	0x49765443
   19dfc:	0002134c 	.word	0x0002134c
   19e00:	00021284 	.word	0x00021284
   19e04:	000212ac 	.word	0x000212ac
   19e08:	000212fc 	.word	0x000212fc
   19e0c:	00021324 	.word	0x00021324
   19e10:	0002139c 	.word	0x0002139c
   19e14:	00021374 	.word	0x00021374
   19e18:	000212d4 	.word	0x000212d4

00019e1c <bsd_platform_getaddrinfo>:
   19e1c:	f7fc bec6 	b.w	16bac <ip_interface_getaddrinfo>

00019e20 <bsd_platform_freeaddrinfo>:
   19e20:	f7fc bfc2 	b.w	16da8 <ip_interface_freeaddrinfo>

00019e24 <bsd_platform_poll>:
   19e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19e28:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   19e2c:	b083      	sub	sp, #12
   19e2e:	9200      	str	r2, [sp, #0]
   19e30:	2800      	cmp	r0, #0
   19e32:	d048      	beq.n	19ec6 <bsd_platform_poll+0xa2>
   19e34:	1e4b      	subs	r3, r1, #1
   19e36:	2b08      	cmp	r3, #8
   19e38:	d845      	bhi.n	19ec6 <bsd_platform_poll+0xa2>
   19e3a:	4680      	mov	r8, r0
   19e3c:	4605      	mov	r5, r0
   19e3e:	2400      	movs	r4, #0
   19e40:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   19e44:	88ab      	ldrh	r3, [r5, #4]
   19e46:	6828      	ldr	r0, [r5, #0]
   19e48:	f003 0303 	and.w	r3, r3, #3
   19e4c:	a901      	add	r1, sp, #4
   19e4e:	f043 061c 	orr.w	r6, r3, #28
   19e52:	f001 fdd9 	bl	1ba08 <interface_socket_event_get>
   19e56:	9b01      	ldr	r3, [sp, #4]
   19e58:	3508      	adds	r5, #8
   19e5a:	4033      	ands	r3, r6
   19e5c:	f825 3c02 	strh.w	r3, [r5, #-2]
   19e60:	b103      	cbz	r3, 19e64 <bsd_platform_poll+0x40>
   19e62:	3401      	adds	r4, #1
   19e64:	42af      	cmp	r7, r5
   19e66:	d1ed      	bne.n	19e44 <bsd_platform_poll+0x20>
   19e68:	bb9c      	cbnz	r4, 19ed2 <bsd_platform_poll+0xae>
   19e6a:	4669      	mov	r1, sp
   19e6c:	4640      	mov	r0, r8
   19e6e:	f7f7 fa43 	bl	112f8 <bsd_os_timedwait>
   19e72:	4607      	mov	r7, r0
   19e74:	b108      	cbz	r0, 19e7a <bsd_platform_poll+0x56>
   19e76:	283c      	cmp	r0, #60	; 0x3c
   19e78:	d11d      	bne.n	19eb6 <bsd_platform_poll+0x92>
   19e7a:	46c1      	mov	r9, r8
   19e7c:	2600      	movs	r6, #0
   19e7e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   19e82:	f8d9 0000 	ldr.w	r0, [r9]
   19e86:	f003 0303 	and.w	r3, r3, #3
   19e8a:	a901      	add	r1, sp, #4
   19e8c:	f043 041c 	orr.w	r4, r3, #28
   19e90:	f001 fdba 	bl	1ba08 <interface_socket_event_get>
   19e94:	9b01      	ldr	r3, [sp, #4]
   19e96:	f109 0908 	add.w	r9, r9, #8
   19e9a:	4023      	ands	r3, r4
   19e9c:	f829 3c02 	strh.w	r3, [r9, #-2]
   19ea0:	b103      	cbz	r3, 19ea4 <bsd_platform_poll+0x80>
   19ea2:	3601      	adds	r6, #1
   19ea4:	454d      	cmp	r5, r9
   19ea6:	d1ea      	bne.n	19e7e <bsd_platform_poll+0x5a>
   19ea8:	b90e      	cbnz	r6, 19eae <bsd_platform_poll+0x8a>
   19eaa:	2f00      	cmp	r7, #0
   19eac:	d0dd      	beq.n	19e6a <bsd_platform_poll+0x46>
   19eae:	4630      	mov	r0, r6
   19eb0:	b003      	add	sp, #12
   19eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19eb6:	2023      	movs	r0, #35	; 0x23
   19eb8:	f7f7 fad6 	bl	11468 <bsd_os_errno_set>
   19ebc:	f04f 30ff 	mov.w	r0, #4294967295
   19ec0:	b003      	add	sp, #12
   19ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19ec6:	2016      	movs	r0, #22
   19ec8:	f7f7 face 	bl	11468 <bsd_os_errno_set>
   19ecc:	f04f 30ff 	mov.w	r0, #4294967295
   19ed0:	e7ee      	b.n	19eb0 <bsd_platform_poll+0x8c>
   19ed2:	4620      	mov	r0, r4
   19ed4:	e7ec      	b.n	19eb0 <bsd_platform_poll+0x8c>
   19ed6:	bf00      	nop

00019ed8 <bsd_platform_fcntl>:
   19ed8:	b508      	push	{r3, lr}
   19eda:	4b06      	ldr	r3, [pc, #24]	; (19ef4 <bsd_platform_fcntl+0x1c>)
   19edc:	4298      	cmp	r0, r3
   19ede:	d003      	beq.n	19ee8 <bsd_platform_fcntl+0x10>
   19ee0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19ee4:	f001 be3a 	b.w	1bb5c <interface_socket_fcntl>
   19ee8:	202d      	movs	r0, #45	; 0x2d
   19eea:	f7f7 fabd 	bl	11468 <bsd_os_errno_set>
   19eee:	f04f 30ff 	mov.w	r0, #4294967295
   19ef2:	bd08      	pop	{r3, pc}
   19ef4:	49765432 	.word	0x49765432

00019ef8 <linked_list_init>:
   19ef8:	b128      	cbz	r0, 19f06 <linked_list_init+0xe>
   19efa:	2300      	movs	r3, #0
   19efc:	6003      	str	r3, [r0, #0]
   19efe:	e9c0 3301 	strd	r3, r3, [r0, #4]
   19f02:	4618      	mov	r0, r3
   19f04:	4770      	bx	lr
   19f06:	2007      	movs	r0, #7
   19f08:	4770      	bx	lr
   19f0a:	bf00      	nop

00019f0c <linked_list_push>:
   19f0c:	6802      	ldr	r2, [r0, #0]
   19f0e:	4603      	mov	r3, r0
   19f10:	3201      	adds	r2, #1
   19f12:	d00e      	beq.n	19f32 <linked_list_push+0x26>
   19f14:	2200      	movs	r2, #0
   19f16:	600a      	str	r2, [r1, #0]
   19f18:	6802      	ldr	r2, [r0, #0]
   19f1a:	b13a      	cbz	r2, 19f2c <linked_list_push+0x20>
   19f1c:	6882      	ldr	r2, [r0, #8]
   19f1e:	6011      	str	r1, [r2, #0]
   19f20:	6081      	str	r1, [r0, #8]
   19f22:	681a      	ldr	r2, [r3, #0]
   19f24:	2000      	movs	r0, #0
   19f26:	3201      	adds	r2, #1
   19f28:	601a      	str	r2, [r3, #0]
   19f2a:	4770      	bx	lr
   19f2c:	e9c0 1101 	strd	r1, r1, [r0, #4]
   19f30:	e7f7      	b.n	19f22 <linked_list_push+0x16>
   19f32:	2004      	movs	r0, #4
   19f34:	4770      	bx	lr
   19f36:	bf00      	nop

00019f38 <linked_list_pop>:
   19f38:	4603      	mov	r3, r0
   19f3a:	6800      	ldr	r0, [r0, #0]
   19f3c:	b128      	cbz	r0, 19f4a <linked_list_pop+0x12>
   19f3e:	6858      	ldr	r0, [r3, #4]
   19f40:	681a      	ldr	r2, [r3, #0]
   19f42:	6801      	ldr	r1, [r0, #0]
   19f44:	3a01      	subs	r2, #1
   19f46:	6059      	str	r1, [r3, #4]
   19f48:	601a      	str	r2, [r3, #0]
   19f4a:	4770      	bx	lr

00019f4c <linked_list_peek>:
   19f4c:	6803      	ldr	r3, [r0, #0]
   19f4e:	b10b      	cbz	r3, 19f54 <linked_list_peek+0x8>
   19f50:	6840      	ldr	r0, [r0, #4]
   19f52:	4770      	bx	lr
   19f54:	4618      	mov	r0, r3
   19f56:	4770      	bx	lr

00019f58 <linked_list_size_get>:
   19f58:	6800      	ldr	r0, [r0, #0]
   19f5a:	4770      	bx	lr

00019f5c <linked_list_get_next>:
   19f5c:	6800      	ldr	r0, [r0, #0]
   19f5e:	4770      	bx	lr

00019f60 <nrf_socket>:
   19f60:	b570      	push	{r4, r5, r6, lr}
   19f62:	4604      	mov	r4, r0
   19f64:	460d      	mov	r5, r1
   19f66:	4616      	mov	r6, r2
   19f68:	f7ff fe8a 	bl	19c80 <bsd_platform_af_method_table_get>
   19f6c:	b130      	cbz	r0, 19f7c <nrf_socket+0x1c>
   19f6e:	6803      	ldr	r3, [r0, #0]
   19f70:	4632      	mov	r2, r6
   19f72:	4629      	mov	r1, r5
   19f74:	4620      	mov	r0, r4
   19f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19f7a:	4718      	bx	r3
   19f7c:	f04f 30ff 	mov.w	r0, #4294967295
   19f80:	bd70      	pop	{r4, r5, r6, pc}
   19f82:	bf00      	nop

00019f84 <nrf_close>:
   19f84:	b510      	push	{r4, lr}
   19f86:	4604      	mov	r4, r0
   19f88:	f7ff fed2 	bl	19d30 <bsd_platform_fd_method_table_get>
   19f8c:	b120      	cbz	r0, 19f98 <nrf_close+0x14>
   19f8e:	6843      	ldr	r3, [r0, #4]
   19f90:	4620      	mov	r0, r4
   19f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19f96:	4718      	bx	r3
   19f98:	f04f 30ff 	mov.w	r0, #4294967295
   19f9c:	bd10      	pop	{r4, pc}
   19f9e:	bf00      	nop

00019fa0 <nrf_sendto>:
   19fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19fa4:	460d      	mov	r5, r1
   19fa6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   19faa:	4616      	mov	r6, r2
   19fac:	461f      	mov	r7, r3
   19fae:	4604      	mov	r4, r0
   19fb0:	f7ff febe 	bl	19d30 <bsd_platform_fd_method_table_get>
   19fb4:	b158      	cbz	r0, 19fce <nrf_sendto+0x2e>
   19fb6:	e9cd 8908 	strd	r8, r9, [sp, #32]
   19fba:	f8d0 e008 	ldr.w	lr, [r0, #8]
   19fbe:	463b      	mov	r3, r7
   19fc0:	4632      	mov	r2, r6
   19fc2:	4629      	mov	r1, r5
   19fc4:	4620      	mov	r0, r4
   19fc6:	46f4      	mov	ip, lr
   19fc8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19fcc:	4760      	bx	ip
   19fce:	f04f 30ff 	mov.w	r0, #4294967295
   19fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19fd6:	bf00      	nop

00019fd8 <nrf_recvfrom>:
   19fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19fdc:	460d      	mov	r5, r1
   19fde:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   19fe2:	4616      	mov	r6, r2
   19fe4:	461f      	mov	r7, r3
   19fe6:	4604      	mov	r4, r0
   19fe8:	f7ff fea2 	bl	19d30 <bsd_platform_fd_method_table_get>
   19fec:	b158      	cbz	r0, 1a006 <nrf_recvfrom+0x2e>
   19fee:	e9cd 8908 	strd	r8, r9, [sp, #32]
   19ff2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   19ff6:	463b      	mov	r3, r7
   19ff8:	4632      	mov	r2, r6
   19ffa:	4629      	mov	r1, r5
   19ffc:	4620      	mov	r0, r4
   19ffe:	46f4      	mov	ip, lr
   1a000:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a004:	4760      	bx	ip
   1a006:	f04f 30ff 	mov.w	r0, #4294967295
   1a00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a00e:	bf00      	nop

0001a010 <nrf_connect>:
   1a010:	b570      	push	{r4, r5, r6, lr}
   1a012:	460d      	mov	r5, r1
   1a014:	4616      	mov	r6, r2
   1a016:	4604      	mov	r4, r0
   1a018:	f7ff fe8a 	bl	19d30 <bsd_platform_fd_method_table_get>
   1a01c:	b130      	cbz	r0, 1a02c <nrf_connect+0x1c>
   1a01e:	6943      	ldr	r3, [r0, #20]
   1a020:	4632      	mov	r2, r6
   1a022:	4629      	mov	r1, r5
   1a024:	4620      	mov	r0, r4
   1a026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a02a:	4718      	bx	r3
   1a02c:	f04f 30ff 	mov.w	r0, #4294967295
   1a030:	bd70      	pop	{r4, r5, r6, pc}
   1a032:	bf00      	nop

0001a034 <nrf_listen>:
   1a034:	b570      	push	{r4, r5, r6, lr}
   1a036:	460d      	mov	r5, r1
   1a038:	4604      	mov	r4, r0
   1a03a:	f7ff fe79 	bl	19d30 <bsd_platform_fd_method_table_get>
   1a03e:	b128      	cbz	r0, 1a04c <nrf_listen+0x18>
   1a040:	6983      	ldr	r3, [r0, #24]
   1a042:	4629      	mov	r1, r5
   1a044:	4620      	mov	r0, r4
   1a046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a04a:	4718      	bx	r3
   1a04c:	f04f 30ff 	mov.w	r0, #4294967295
   1a050:	bd70      	pop	{r4, r5, r6, pc}
   1a052:	bf00      	nop

0001a054 <nrf_accept>:
   1a054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a058:	460d      	mov	r5, r1
   1a05a:	4616      	mov	r6, r2
   1a05c:	4604      	mov	r4, r0
   1a05e:	f7ff fe67 	bl	19d30 <bsd_platform_fd_method_table_get>
   1a062:	b140      	cbz	r0, 1a076 <nrf_accept+0x22>
   1a064:	69c7      	ldr	r7, [r0, #28]
   1a066:	4632      	mov	r2, r6
   1a068:	4629      	mov	r1, r5
   1a06a:	4620      	mov	r0, r4
   1a06c:	46bc      	mov	ip, r7
   1a06e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a072:	2300      	movs	r3, #0
   1a074:	4760      	bx	ip
   1a076:	f04f 30ff 	mov.w	r0, #4294967295
   1a07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a07e:	bf00      	nop

0001a080 <nrf_bind>:
   1a080:	b570      	push	{r4, r5, r6, lr}
   1a082:	460d      	mov	r5, r1
   1a084:	4616      	mov	r6, r2
   1a086:	4604      	mov	r4, r0
   1a088:	f7ff fe52 	bl	19d30 <bsd_platform_fd_method_table_get>
   1a08c:	b130      	cbz	r0, 1a09c <nrf_bind+0x1c>
   1a08e:	6903      	ldr	r3, [r0, #16]
   1a090:	4632      	mov	r2, r6
   1a092:	4629      	mov	r1, r5
   1a094:	4620      	mov	r0, r4
   1a096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a09a:	4718      	bx	r3
   1a09c:	f04f 30ff 	mov.w	r0, #4294967295
   1a0a0:	bd70      	pop	{r4, r5, r6, pc}
   1a0a2:	bf00      	nop

0001a0a4 <nrf_setsockopt>:
   1a0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1a0ac:	460d      	mov	r5, r1
   1a0ae:	4616      	mov	r6, r2
   1a0b0:	461f      	mov	r7, r3
   1a0b2:	4604      	mov	r4, r0
   1a0b4:	f7ff fe3c 	bl	19d30 <bsd_platform_fd_method_table_get>
   1a0b8:	b158      	cbz	r0, 1a0d2 <nrf_setsockopt+0x2e>
   1a0ba:	f8cd 8018 	str.w	r8, [sp, #24]
   1a0be:	f8d0 e020 	ldr.w	lr, [r0, #32]
   1a0c2:	463b      	mov	r3, r7
   1a0c4:	4632      	mov	r2, r6
   1a0c6:	4629      	mov	r1, r5
   1a0c8:	4620      	mov	r0, r4
   1a0ca:	46f4      	mov	ip, lr
   1a0cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a0d0:	4760      	bx	ip
   1a0d2:	f04f 30ff 	mov.w	r0, #4294967295
   1a0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a0da:	bf00      	nop

0001a0dc <nrf_getsockopt>:
   1a0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1a0e4:	460d      	mov	r5, r1
   1a0e6:	4616      	mov	r6, r2
   1a0e8:	461f      	mov	r7, r3
   1a0ea:	4604      	mov	r4, r0
   1a0ec:	f7ff fe20 	bl	19d30 <bsd_platform_fd_method_table_get>
   1a0f0:	b158      	cbz	r0, 1a10a <nrf_getsockopt+0x2e>
   1a0f2:	f8cd 8018 	str.w	r8, [sp, #24]
   1a0f6:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   1a0fa:	463b      	mov	r3, r7
   1a0fc:	4632      	mov	r2, r6
   1a0fe:	4629      	mov	r1, r5
   1a100:	4620      	mov	r0, r4
   1a102:	46f4      	mov	ip, lr
   1a104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a108:	4760      	bx	ip
   1a10a:	f04f 30ff 	mov.w	r0, #4294967295
   1a10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a112:	bf00      	nop

0001a114 <nrf_getaddrinfo>:
   1a114:	f7ff be82 	b.w	19e1c <bsd_platform_getaddrinfo>

0001a118 <nrf_freeaddrinfo>:
   1a118:	f7ff be82 	b.w	19e20 <bsd_platform_freeaddrinfo>

0001a11c <nrf_poll>:
   1a11c:	f7ff be82 	b.w	19e24 <bsd_platform_poll>

0001a120 <nrf_fcntl>:
   1a120:	f7ff beda 	b.w	19ed8 <bsd_platform_fcntl>

0001a124 <rpc_gnss_serialize_utc>:
   1a124:	4603      	mov	r3, r0
   1a126:	b1d8      	cbz	r0, 1a160 <rpc_gnss_serialize_utc+0x3c>
   1a128:	b1d1      	cbz	r1, 1a160 <rpc_gnss_serialize_utc+0x3c>
   1a12a:	2000      	movs	r0, #0
   1a12c:	2201      	movs	r2, #1
   1a12e:	7048      	strb	r0, [r1, #1]
   1a130:	700a      	strb	r2, [r1, #0]
   1a132:	685a      	ldr	r2, [r3, #4]
   1a134:	2010      	movs	r0, #16
   1a136:	f8c1 2006 	str.w	r2, [r1, #6]
   1a13a:	681a      	ldr	r2, [r3, #0]
   1a13c:	f8c1 2002 	str.w	r2, [r1, #2]
   1a140:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1a144:	730a      	strb	r2, [r1, #12]
   1a146:	f993 200d 	ldrsb.w	r2, [r3, #13]
   1a14a:	73ca      	strb	r2, [r1, #15]
   1a14c:	f993 200c 	ldrsb.w	r2, [r3, #12]
   1a150:	738a      	strb	r2, [r1, #14]
   1a152:	7a1a      	ldrb	r2, [r3, #8]
   1a154:	728a      	strb	r2, [r1, #10]
   1a156:	7ada      	ldrb	r2, [r3, #11]
   1a158:	734a      	strb	r2, [r1, #13]
   1a15a:	7a5b      	ldrb	r3, [r3, #9]
   1a15c:	72cb      	strb	r3, [r1, #11]
   1a15e:	4770      	bx	lr
   1a160:	f04f 30ff 	mov.w	r0, #4294967295
   1a164:	4770      	bx	lr
   1a166:	bf00      	nop

0001a168 <rpc_gnss_serialize_ephe>:
   1a168:	4603      	mov	r3, r0
   1a16a:	2800      	cmp	r0, #0
   1a16c:	d04b      	beq.n	1a206 <rpc_gnss_serialize_ephe+0x9e>
   1a16e:	2900      	cmp	r1, #0
   1a170:	d049      	beq.n	1a206 <rpc_gnss_serialize_ephe+0x9e>
   1a172:	2000      	movs	r0, #0
   1a174:	2202      	movs	r2, #2
   1a176:	7048      	strb	r0, [r1, #1]
   1a178:	700a      	strb	r2, [r1, #0]
   1a17a:	68da      	ldr	r2, [r3, #12]
   1a17c:	2040      	movs	r0, #64	; 0x40
   1a17e:	f8c1 200b 	str.w	r2, [r1, #11]
   1a182:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a186:	f8a1 2009 	strh.w	r2, [r1, #9]
   1a18a:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a18e:	720a      	strb	r2, [r1, #8]
   1a190:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   1a194:	878a      	strh	r2, [r1, #60]	; 0x3c
   1a196:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   1a19a:	86ca      	strh	r2, [r1, #54]	; 0x36
   1a19c:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   1a1a0:	874a      	strh	r2, [r1, #58]	; 0x3a
   1a1a2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   1a1a6:	868a      	strh	r2, [r1, #52]	; 0x34
   1a1a8:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   1a1ac:	87ca      	strh	r2, [r1, #62]	; 0x3e
   1a1ae:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   1a1b2:	870a      	strh	r2, [r1, #56]	; 0x38
   1a1b4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a1b8:	830a      	strh	r2, [r1, #24]
   1a1ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a1bc:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   1a1c0:	7c9a      	ldrb	r2, [r3, #18]
   1a1c2:	744a      	strb	r2, [r1, #17]
   1a1c4:	785a      	ldrb	r2, [r3, #1]
   1a1c6:	70ca      	strb	r2, [r1, #3]
   1a1c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a1ca:	62ca      	str	r2, [r1, #44]	; 0x2c
   1a1cc:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   1a1d0:	84ca      	strh	r2, [r1, #38]	; 0x26
   1a1d2:	885a      	ldrh	r2, [r3, #2]
   1a1d4:	808a      	strh	r2, [r1, #4]
   1a1d6:	6a1a      	ldr	r2, [r3, #32]
   1a1d8:	f8c1 201a 	str.w	r2, [r1, #26]
   1a1dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a1de:	630a      	str	r2, [r1, #48]	; 0x30
   1a1e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a1e2:	f8c1 201e 	str.w	r2, [r1, #30]
   1a1e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a1e8:	628a      	str	r2, [r1, #40]	; 0x28
   1a1ea:	781a      	ldrb	r2, [r3, #0]
   1a1ec:	708a      	strb	r2, [r1, #2]
   1a1ee:	f993 2010 	ldrsb.w	r2, [r3, #16]
   1a1f2:	73ca      	strb	r2, [r1, #15]
   1a1f4:	889a      	ldrh	r2, [r3, #4]
   1a1f6:	80ca      	strh	r2, [r1, #6]
   1a1f8:	8a9a      	ldrh	r2, [r3, #20]
   1a1fa:	824a      	strh	r2, [r1, #18]
   1a1fc:	7c5a      	ldrb	r2, [r3, #17]
   1a1fe:	740a      	strb	r2, [r1, #16]
   1a200:	699b      	ldr	r3, [r3, #24]
   1a202:	614b      	str	r3, [r1, #20]
   1a204:	4770      	bx	lr
   1a206:	f04f 30ff 	mov.w	r0, #4294967295
   1a20a:	4770      	bx	lr

0001a20c <rpc_gnss_serialize_alm>:
   1a20c:	4603      	mov	r3, r0
   1a20e:	b360      	cbz	r0, 1a26a <rpc_gnss_serialize_alm+0x5e>
   1a210:	b359      	cbz	r1, 1a26a <rpc_gnss_serialize_alm+0x5e>
   1a212:	2000      	movs	r0, #0
   1a214:	2203      	movs	r2, #3
   1a216:	7048      	strb	r0, [r1, #1]
   1a218:	700a      	strb	r2, [r1, #0]
   1a21a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   1a21e:	2021      	movs	r0, #33	; 0x21
   1a220:	f8a1 201d 	strh.w	r2, [r1, #29]
   1a224:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   1a228:	f8a1 201f 	strh.w	r2, [r1, #31]
   1a22c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   1a230:	810a      	strh	r2, [r1, #8]
   1a232:	889a      	ldrh	r2, [r3, #4]
   1a234:	80ca      	strh	r2, [r1, #6]
   1a236:	78da      	ldrb	r2, [r3, #3]
   1a238:	714a      	strb	r2, [r1, #5]
   1a23a:	699a      	ldr	r2, [r3, #24]
   1a23c:	f8c1 2019 	str.w	r2, [r1, #25]
   1a240:	691a      	ldr	r2, [r3, #16]
   1a242:	f8c1 2011 	str.w	r2, [r1, #17]
   1a246:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a24a:	814a      	strh	r2, [r1, #10]
   1a24c:	68da      	ldr	r2, [r3, #12]
   1a24e:	f8c1 200d 	str.w	r2, [r1, #13]
   1a252:	7a9a      	ldrb	r2, [r3, #10]
   1a254:	730a      	strb	r2, [r1, #12]
   1a256:	781a      	ldrb	r2, [r3, #0]
   1a258:	708a      	strb	r2, [r1, #2]
   1a25a:	789a      	ldrb	r2, [r3, #2]
   1a25c:	710a      	strb	r2, [r1, #4]
   1a25e:	695a      	ldr	r2, [r3, #20]
   1a260:	f8c1 2015 	str.w	r2, [r1, #21]
   1a264:	785b      	ldrb	r3, [r3, #1]
   1a266:	70cb      	strb	r3, [r1, #3]
   1a268:	4770      	bx	lr
   1a26a:	f04f 30ff 	mov.w	r0, #4294967295
   1a26e:	4770      	bx	lr

0001a270 <rpc_gnss_serialize_klob>:
   1a270:	4603      	mov	r3, r0
   1a272:	b1f0      	cbz	r0, 1a2b2 <rpc_gnss_serialize_klob+0x42>
   1a274:	b1e9      	cbz	r1, 1a2b2 <rpc_gnss_serialize_klob+0x42>
   1a276:	2000      	movs	r0, #0
   1a278:	2204      	movs	r2, #4
   1a27a:	7048      	strb	r0, [r1, #1]
   1a27c:	700a      	strb	r2, [r1, #0]
   1a27e:	f993 2000 	ldrsb.w	r2, [r3]
   1a282:	200a      	movs	r0, #10
   1a284:	708a      	strb	r2, [r1, #2]
   1a286:	f993 2001 	ldrsb.w	r2, [r3, #1]
   1a28a:	70ca      	strb	r2, [r1, #3]
   1a28c:	f993 2002 	ldrsb.w	r2, [r3, #2]
   1a290:	710a      	strb	r2, [r1, #4]
   1a292:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1a296:	714a      	strb	r2, [r1, #5]
   1a298:	f993 2004 	ldrsb.w	r2, [r3, #4]
   1a29c:	718a      	strb	r2, [r1, #6]
   1a29e:	f993 2005 	ldrsb.w	r2, [r3, #5]
   1a2a2:	71ca      	strb	r2, [r1, #7]
   1a2a4:	f993 2006 	ldrsb.w	r2, [r3, #6]
   1a2a8:	720a      	strb	r2, [r1, #8]
   1a2aa:	f993 3007 	ldrsb.w	r3, [r3, #7]
   1a2ae:	724b      	strb	r3, [r1, #9]
   1a2b0:	4770      	bx	lr
   1a2b2:	f04f 30ff 	mov.w	r0, #4294967295
   1a2b6:	4770      	bx	lr

0001a2b8 <rpc_gnss_serialize_nequick>:
   1a2b8:	4603      	mov	r3, r0
   1a2ba:	b198      	cbz	r0, 1a2e4 <rpc_gnss_serialize_nequick+0x2c>
   1a2bc:	b191      	cbz	r1, 1a2e4 <rpc_gnss_serialize_nequick+0x2c>
   1a2be:	2000      	movs	r0, #0
   1a2c0:	2205      	movs	r2, #5
   1a2c2:	7048      	strb	r0, [r1, #1]
   1a2c4:	700a      	strb	r2, [r1, #0]
   1a2c6:	f9b3 2000 	ldrsh.w	r2, [r3]
   1a2ca:	200a      	movs	r0, #10
   1a2cc:	804a      	strh	r2, [r1, #2]
   1a2ce:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   1a2d2:	808a      	strh	r2, [r1, #4]
   1a2d4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   1a2d8:	80ca      	strh	r2, [r1, #6]
   1a2da:	799a      	ldrb	r2, [r3, #6]
   1a2dc:	720a      	strb	r2, [r1, #8]
   1a2de:	79db      	ldrb	r3, [r3, #7]
   1a2e0:	724b      	strb	r3, [r1, #9]
   1a2e2:	4770      	bx	lr
   1a2e4:	f04f 30ff 	mov.w	r0, #4294967295
   1a2e8:	4770      	bx	lr
   1a2ea:	bf00      	nop

0001a2ec <rpc_gnss_serialize_time_and_sv_tow>:
   1a2ec:	b310      	cbz	r0, 1a334 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a2ee:	b309      	cbz	r1, 1a334 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   1a2f0:	b470      	push	{r4, r5, r6}
   1a2f2:	2500      	movs	r5, #0
   1a2f4:	2606      	movs	r6, #6
   1a2f6:	460c      	mov	r4, r1
   1a2f8:	704d      	strb	r5, [r1, #1]
   1a2fa:	700e      	strb	r6, [r1, #0]
   1a2fc:	462b      	mov	r3, r5
   1a2fe:	8805      	ldrh	r5, [r0, #0]
   1a300:	4602      	mov	r2, r0
   1a302:	804d      	strh	r5, [r1, #2]
   1a304:	68c5      	ldr	r5, [r0, #12]
   1a306:	f8c1 500a 	str.w	r5, [r1, #10]
   1a30a:	8905      	ldrh	r5, [r0, #8]
   1a30c:	810d      	strh	r5, [r1, #8]
   1a30e:	6840      	ldr	r0, [r0, #4]
   1a310:	6048      	str	r0, [r1, #4]
   1a312:	8a15      	ldrh	r5, [r2, #16]
   1a314:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1a318:	4408      	add	r0, r1
   1a31a:	81c5      	strh	r5, [r0, #14]
   1a31c:	7c90      	ldrb	r0, [r2, #18]
   1a31e:	3301      	adds	r3, #1
   1a320:	2b20      	cmp	r3, #32
   1a322:	7420      	strb	r0, [r4, #16]
   1a324:	f102 0204 	add.w	r2, r2, #4
   1a328:	f104 0403 	add.w	r4, r4, #3
   1a32c:	d1f1      	bne.n	1a312 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   1a32e:	206e      	movs	r0, #110	; 0x6e
   1a330:	bc70      	pop	{r4, r5, r6}
   1a332:	4770      	bx	lr
   1a334:	f04f 30ff 	mov.w	r0, #4294967295
   1a338:	4770      	bx	lr
   1a33a:	bf00      	nop

0001a33c <rpc_gnss_serialize_location>:
   1a33c:	4603      	mov	r3, r0
   1a33e:	b1c8      	cbz	r0, 1a374 <rpc_gnss_serialize_location+0x38>
   1a340:	b1c1      	cbz	r1, 1a374 <rpc_gnss_serialize_location+0x38>
   1a342:	2000      	movs	r0, #0
   1a344:	2207      	movs	r2, #7
   1a346:	7048      	strb	r0, [r1, #1]
   1a348:	700a      	strb	r2, [r1, #0]
   1a34a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   1a34e:	2011      	movs	r0, #17
   1a350:	814a      	strh	r2, [r1, #10]
   1a352:	7b9a      	ldrb	r2, [r3, #14]
   1a354:	740a      	strb	r2, [r1, #16]
   1a356:	681a      	ldr	r2, [r3, #0]
   1a358:	f8c1 2002 	str.w	r2, [r1, #2]
   1a35c:	685a      	ldr	r2, [r3, #4]
   1a35e:	f8c1 2006 	str.w	r2, [r1, #6]
   1a362:	7b1a      	ldrb	r2, [r3, #12]
   1a364:	738a      	strb	r2, [r1, #14]
   1a366:	7b5a      	ldrb	r2, [r3, #13]
   1a368:	73ca      	strb	r2, [r1, #15]
   1a36a:	7a9a      	ldrb	r2, [r3, #10]
   1a36c:	730a      	strb	r2, [r1, #12]
   1a36e:	7adb      	ldrb	r3, [r3, #11]
   1a370:	734b      	strb	r3, [r1, #13]
   1a372:	4770      	bx	lr
   1a374:	f04f 30ff 	mov.w	r0, #4294967295
   1a378:	4770      	bx	lr
   1a37a:	bf00      	nop

0001a37c <rpc_gnss_serialize_integrity>:
   1a37c:	b148      	cbz	r0, 1a392 <rpc_gnss_serialize_integrity+0x16>
   1a37e:	b141      	cbz	r1, 1a392 <rpc_gnss_serialize_integrity+0x16>
   1a380:	2200      	movs	r2, #0
   1a382:	2308      	movs	r3, #8
   1a384:	704a      	strb	r2, [r1, #1]
   1a386:	700b      	strb	r3, [r1, #0]
   1a388:	6803      	ldr	r3, [r0, #0]
   1a38a:	2006      	movs	r0, #6
   1a38c:	f8c1 3002 	str.w	r3, [r1, #2]
   1a390:	4770      	bx	lr
   1a392:	f04f 30ff 	mov.w	r0, #4294967295
   1a396:	4770      	bx	lr

0001a398 <gnss_client_event_handler>:
   1a398:	f850 1b08 	ldr.w	r1, [r0], #8
   1a39c:	0c09      	lsrs	r1, r1, #16
   1a39e:	f7fd b8ed 	b.w	1757c <rpc_gnss_event_handler>
   1a3a2:	bf00      	nop

0001a3a4 <rpc_gnss_client_init>:
   1a3a4:	4801      	ldr	r0, [pc, #4]	; (1a3ac <rpc_gnss_client_init+0x8>)
   1a3a6:	f7fd b81d 	b.w	173e4 <rpc_client_register>
   1a3aa:	bf00      	nop
   1a3ac:	000213dc 	.word	0x000213dc

0001a3b0 <rpc_gnss_client_request_alloc>:
   1a3b0:	2300      	movs	r3, #0
   1a3b2:	b510      	push	{r4, lr}
   1a3b4:	b082      	sub	sp, #8
   1a3b6:	9301      	str	r3, [sp, #4]
   1a3b8:	b158      	cbz	r0, 1a3d2 <rpc_gnss_client_request_alloc+0x22>
   1a3ba:	4604      	mov	r4, r0
   1a3bc:	aa01      	add	r2, sp, #4
   1a3be:	2007      	movs	r0, #7
   1a3c0:	f7fd f88a 	bl	174d8 <rpc_message_alloc>
   1a3c4:	b918      	cbnz	r0, 1a3ce <rpc_gnss_client_request_alloc+0x1e>
   1a3c6:	9b01      	ldr	r3, [sp, #4]
   1a3c8:	b10b      	cbz	r3, 1a3ce <rpc_gnss_client_request_alloc+0x1e>
   1a3ca:	3308      	adds	r3, #8
   1a3cc:	6023      	str	r3, [r4, #0]
   1a3ce:	b002      	add	sp, #8
   1a3d0:	bd10      	pop	{r4, pc}
   1a3d2:	2007      	movs	r0, #7
   1a3d4:	b002      	add	sp, #8
   1a3d6:	bd10      	pop	{r4, pc}

0001a3d8 <rpc_gnss_client_request_send>:
   1a3d8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   1a3dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a3e0:	d10b      	bne.n	1a3fa <rpc_gnss_client_request_send+0x22>
   1a3e2:	b160      	cbz	r0, 1a3fe <rpc_gnss_client_request_send+0x26>
   1a3e4:	4603      	mov	r3, r0
   1a3e6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1a3ea:	2007      	movs	r0, #7
   1a3ec:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1a3f0:	f843 1d08 	str.w	r1, [r3, #-8]!
   1a3f4:	4619      	mov	r1, r3
   1a3f6:	f7fd b85f 	b.w	174b8 <rpc_message_send>
   1a3fa:	200f      	movs	r0, #15
   1a3fc:	4770      	bx	lr
   1a3fe:	2007      	movs	r0, #7
   1a400:	4770      	bx	lr
   1a402:	bf00      	nop

0001a404 <rpc_gnss_client_message_free>:
   1a404:	b120      	cbz	r0, 1a410 <rpc_gnss_client_message_free+0xc>
   1a406:	f1a0 0108 	sub.w	r1, r0, #8
   1a40a:	2007      	movs	r0, #7
   1a40c:	f7fd b890 	b.w	17530 <rpc_message_free>
   1a410:	2007      	movs	r0, #7
   1a412:	4770      	bx	lr

0001a414 <rpc_gnss_client_data_free>:
   1a414:	b118      	cbz	r0, 1a41e <rpc_gnss_client_data_free+0xa>
   1a416:	4601      	mov	r1, r0
   1a418:	2007      	movs	r0, #7
   1a41a:	f7fd b895 	b.w	17548 <rpc_message_data_free>
   1a41e:	2007      	movs	r0, #7
   1a420:	4770      	bx	lr
   1a422:	bf00      	nop

0001a424 <datagram_handler_init>:
   1a424:	b510      	push	{r4, lr}
   1a426:	4604      	mov	r4, r0
   1a428:	200c      	movs	r0, #12
   1a42a:	f000 fdd7 	bl	1afdc <nrf_malloc>
   1a42e:	60e0      	str	r0, [r4, #12]
   1a430:	b118      	cbz	r0, 1a43a <datagram_handler_init+0x16>
   1a432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a436:	f7ff bd5f 	b.w	19ef8 <linked_list_init>
   1a43a:	2004      	movs	r0, #4
   1a43c:	bd10      	pop	{r4, pc}
   1a43e:	bf00      	nop

0001a440 <datagram_handler_put>:
   1a440:	b570      	push	{r4, r5, r6, lr}
   1a442:	4606      	mov	r6, r0
   1a444:	2014      	movs	r0, #20
   1a446:	460d      	mov	r5, r1
   1a448:	f000 fdc8 	bl	1afdc <nrf_malloc>
   1a44c:	b178      	cbz	r0, 1a46e <datagram_handler_put+0x2e>
   1a44e:	682b      	ldr	r3, [r5, #0]
   1a450:	4604      	mov	r4, r0
   1a452:	6043      	str	r3, [r0, #4]
   1a454:	686b      	ldr	r3, [r5, #4]
   1a456:	4601      	mov	r1, r0
   1a458:	6083      	str	r3, [r0, #8]
   1a45a:	68eb      	ldr	r3, [r5, #12]
   1a45c:	60c3      	str	r3, [r0, #12]
   1a45e:	68ab      	ldr	r3, [r5, #8]
   1a460:	6103      	str	r3, [r0, #16]
   1a462:	68f0      	ldr	r0, [r6, #12]
   1a464:	f7ff fd52 	bl	19f0c <linked_list_push>
   1a468:	b920      	cbnz	r0, 1a474 <datagram_handler_put+0x34>
   1a46a:	6868      	ldr	r0, [r5, #4]
   1a46c:	bd70      	pop	{r4, r5, r6, pc}
   1a46e:	f04f 30ff 	mov.w	r0, #4294967295
   1a472:	bd70      	pop	{r4, r5, r6, pc}
   1a474:	4620      	mov	r0, r4
   1a476:	f000 fdbb 	bl	1aff0 <nrf_free>
   1a47a:	f04f 30ff 	mov.w	r0, #4294967295
   1a47e:	bd70      	pop	{r4, r5, r6, pc}

0001a480 <datagram_handler_get>:
   1a480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a484:	4607      	mov	r7, r0
   1a486:	b084      	sub	sp, #16
   1a488:	68c0      	ldr	r0, [r0, #12]
   1a48a:	460c      	mov	r4, r1
   1a48c:	4616      	mov	r6, r2
   1a48e:	f7ff fd5d 	bl	19f4c <linked_list_peek>
   1a492:	2800      	cmp	r0, #0
   1a494:	d03b      	beq.n	1a50e <datagram_handler_get+0x8e>
   1a496:	6882      	ldr	r2, [r0, #8]
   1a498:	4605      	mov	r5, r0
   1a49a:	e9d4 0300 	ldrd	r0, r3, [r4]
   1a49e:	429a      	cmp	r2, r3
   1a4a0:	bf28      	it	cs
   1a4a2:	461a      	movcs	r2, r3
   1a4a4:	6062      	str	r2, [r4, #4]
   1a4a6:	b110      	cbz	r0, 1a4ae <datagram_handler_get+0x2e>
   1a4a8:	6869      	ldr	r1, [r5, #4]
   1a4aa:	f004 f9f4 	bl	1e896 <memcpy>
   1a4ae:	68a0      	ldr	r0, [r4, #8]
   1a4b0:	b118      	cbz	r0, 1a4ba <datagram_handler_get+0x3a>
   1a4b2:	692b      	ldr	r3, [r5, #16]
   1a4b4:	b10b      	cbz	r3, 1a4ba <datagram_handler_get+0x3a>
   1a4b6:	68ea      	ldr	r2, [r5, #12]
   1a4b8:	bb02      	cbnz	r2, 1a4fc <datagram_handler_get+0x7c>
   1a4ba:	2300      	movs	r3, #0
   1a4bc:	60e3      	str	r3, [r4, #12]
   1a4be:	0732      	lsls	r2, r6, #28
   1a4c0:	d506      	bpl.n	1a4d0 <datagram_handler_get+0x50>
   1a4c2:	06b3      	lsls	r3, r6, #26
   1a4c4:	bf4c      	ite	mi
   1a4c6:	68a8      	ldrmi	r0, [r5, #8]
   1a4c8:	6860      	ldrpl	r0, [r4, #4]
   1a4ca:	b004      	add	sp, #16
   1a4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a4d0:	68f8      	ldr	r0, [r7, #12]
   1a4d2:	f7ff fd31 	bl	19f38 <linked_list_pop>
   1a4d6:	4680      	mov	r8, r0
   1a4d8:	2800      	cmp	r0, #0
   1a4da:	d0f2      	beq.n	1a4c2 <datagram_handler_get+0x42>
   1a4dc:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a4e0:	6902      	ldr	r2, [r0, #16]
   1a4e2:	9300      	str	r3, [sp, #0]
   1a4e4:	68c3      	ldr	r3, [r0, #12]
   1a4e6:	e9cd 1201 	strd	r1, r2, [sp, #4]
   1a4ea:	9303      	str	r3, [sp, #12]
   1a4ec:	4668      	mov	r0, sp
   1a4ee:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   1a4f2:	4798      	blx	r3
   1a4f4:	4640      	mov	r0, r8
   1a4f6:	f000 fd7b 	bl	1aff0 <nrf_free>
   1a4fa:	e7e2      	b.n	1a4c2 <datagram_handler_get+0x42>
   1a4fc:	68e3      	ldr	r3, [r4, #12]
   1a4fe:	429a      	cmp	r2, r3
   1a500:	bf28      	it	cs
   1a502:	461a      	movcs	r2, r3
   1a504:	60e2      	str	r2, [r4, #12]
   1a506:	6929      	ldr	r1, [r5, #16]
   1a508:	f004 f9c5 	bl	1e896 <memcpy>
   1a50c:	e7d7      	b.n	1a4be <datagram_handler_get+0x3e>
   1a50e:	f04f 30ff 	mov.w	r0, #4294967295
   1a512:	e7da      	b.n	1a4ca <datagram_handler_get+0x4a>

0001a514 <datagram_handler_available>:
   1a514:	b508      	push	{r3, lr}
   1a516:	68c0      	ldr	r0, [r0, #12]
   1a518:	f7ff fd18 	bl	19f4c <linked_list_peek>
   1a51c:	b108      	cbz	r0, 1a522 <datagram_handler_available+0xe>
   1a51e:	6880      	ldr	r0, [r0, #8]
   1a520:	bd08      	pop	{r3, pc}
   1a522:	f04f 30ff 	mov.w	r0, #4294967295
   1a526:	bd08      	pop	{r3, pc}

0001a528 <datagram_handler_flush>:
   1a528:	b530      	push	{r4, r5, lr}
   1a52a:	4605      	mov	r5, r0
   1a52c:	68c0      	ldr	r0, [r0, #12]
   1a52e:	b085      	sub	sp, #20
   1a530:	b9a8      	cbnz	r0, 1a55e <datagram_handler_flush+0x36>
   1a532:	e01a      	b.n	1a56a <datagram_handler_flush+0x42>
   1a534:	68e8      	ldr	r0, [r5, #12]
   1a536:	f7ff fcff 	bl	19f38 <linked_list_pop>
   1a53a:	4604      	mov	r4, r0
   1a53c:	b170      	cbz	r0, 1a55c <datagram_handler_flush+0x34>
   1a53e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a542:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a546:	e9cd 0100 	strd	r0, r1, [sp]
   1a54a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a54e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a552:	4668      	mov	r0, sp
   1a554:	4798      	blx	r3
   1a556:	4620      	mov	r0, r4
   1a558:	f000 fd4a 	bl	1aff0 <nrf_free>
   1a55c:	68e8      	ldr	r0, [r5, #12]
   1a55e:	f7ff fcfb 	bl	19f58 <linked_list_size_get>
   1a562:	2800      	cmp	r0, #0
   1a564:	d1e6      	bne.n	1a534 <datagram_handler_flush+0xc>
   1a566:	b005      	add	sp, #20
   1a568:	bd30      	pop	{r4, r5, pc}
   1a56a:	2008      	movs	r0, #8
   1a56c:	b005      	add	sp, #20
   1a56e:	bd30      	pop	{r4, r5, pc}

0001a570 <datagram_handler_free>:
   1a570:	b530      	push	{r4, r5, lr}
   1a572:	4605      	mov	r5, r0
   1a574:	68c0      	ldr	r0, [r0, #12]
   1a576:	b085      	sub	sp, #20
   1a578:	b9a0      	cbnz	r0, 1a5a4 <datagram_handler_free+0x34>
   1a57a:	e01c      	b.n	1a5b6 <datagram_handler_free+0x46>
   1a57c:	f7ff fcdc 	bl	19f38 <linked_list_pop>
   1a580:	4604      	mov	r4, r0
   1a582:	b170      	cbz	r0, 1a5a2 <datagram_handler_free+0x32>
   1a584:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a588:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a58c:	e9cd 0100 	strd	r0, r1, [sp]
   1a590:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a594:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a598:	4668      	mov	r0, sp
   1a59a:	4798      	blx	r3
   1a59c:	4620      	mov	r0, r4
   1a59e:	f000 fd27 	bl	1aff0 <nrf_free>
   1a5a2:	68e8      	ldr	r0, [r5, #12]
   1a5a4:	f7ff fcd8 	bl	19f58 <linked_list_size_get>
   1a5a8:	4604      	mov	r4, r0
   1a5aa:	68e8      	ldr	r0, [r5, #12]
   1a5ac:	2c00      	cmp	r4, #0
   1a5ae:	d1e5      	bne.n	1a57c <datagram_handler_free+0xc>
   1a5b0:	f000 fd1e 	bl	1aff0 <nrf_free>
   1a5b4:	60ec      	str	r4, [r5, #12]
   1a5b6:	b005      	add	sp, #20
   1a5b8:	bd30      	pop	{r4, r5, pc}
   1a5ba:	bf00      	nop

0001a5bc <null_handler_init>:
   1a5bc:	2000      	movs	r0, #0
   1a5be:	4770      	bx	lr

0001a5c0 <null_handler_put>:
   1a5c0:	b510      	push	{r4, lr}
   1a5c2:	460c      	mov	r4, r1
   1a5c4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   1a5c8:	4620      	mov	r0, r4
   1a5ca:	4798      	blx	r3
   1a5cc:	6860      	ldr	r0, [r4, #4]
   1a5ce:	bd10      	pop	{r4, pc}

0001a5d0 <null_handler_get>:
   1a5d0:	f04f 30ff 	mov.w	r0, #4294967295
   1a5d4:	4770      	bx	lr
   1a5d6:	bf00      	nop

0001a5d8 <null_handler_available>:
   1a5d8:	f04f 30ff 	mov.w	r0, #4294967295
   1a5dc:	4770      	bx	lr
   1a5de:	bf00      	nop

0001a5e0 <null_handler_flush>:
   1a5e0:	2000      	movs	r0, #0
   1a5e2:	4770      	bx	lr

0001a5e4 <null_handler_free>:
   1a5e4:	4770      	bx	lr
   1a5e6:	bf00      	nop

0001a5e8 <packet_handler_create>:
   1a5e8:	2801      	cmp	r0, #1
   1a5ea:	b538      	push	{r3, r4, r5, lr}
   1a5ec:	460d      	mov	r5, r1
   1a5ee:	4614      	mov	r4, r2
   1a5f0:	d00d      	beq.n	1a60e <packet_handler_create+0x26>
   1a5f2:	db11      	blt.n	1a618 <packet_handler_create+0x30>
   1a5f4:	2803      	cmp	r0, #3
   1a5f6:	dc0f      	bgt.n	1a618 <packet_handler_create+0x30>
   1a5f8:	2010      	movs	r0, #16
   1a5fa:	f000 fcef 	bl	1afdc <nrf_malloc>
   1a5fe:	2218      	movs	r2, #24
   1a600:	b120      	cbz	r0, 1a60c <packet_handler_create+0x24>
   1a602:	4b08      	ldr	r3, [pc, #32]	; (1a624 <packet_handler_create+0x3c>)
   1a604:	6045      	str	r5, [r0, #4]
   1a606:	4413      	add	r3, r2
   1a608:	6084      	str	r4, [r0, #8]
   1a60a:	6003      	str	r3, [r0, #0]
   1a60c:	bd38      	pop	{r3, r4, r5, pc}
   1a60e:	2014      	movs	r0, #20
   1a610:	f000 fce4 	bl	1afdc <nrf_malloc>
   1a614:	2230      	movs	r2, #48	; 0x30
   1a616:	e7f3      	b.n	1a600 <packet_handler_create+0x18>
   1a618:	200c      	movs	r0, #12
   1a61a:	f000 fcdf 	bl	1afdc <nrf_malloc>
   1a61e:	2200      	movs	r2, #0
   1a620:	e7ee      	b.n	1a600 <packet_handler_create+0x18>
   1a622:	bf00      	nop
   1a624:	000213ec 	.word	0x000213ec

0001a628 <packet_handler_delete>:
   1a628:	b510      	push	{r4, lr}
   1a62a:	4604      	mov	r4, r0
   1a62c:	6803      	ldr	r3, [r0, #0]
   1a62e:	691b      	ldr	r3, [r3, #16]
   1a630:	4798      	blx	r3
   1a632:	6823      	ldr	r3, [r4, #0]
   1a634:	4620      	mov	r0, r4
   1a636:	695b      	ldr	r3, [r3, #20]
   1a638:	4798      	blx	r3
   1a63a:	4620      	mov	r0, r4
   1a63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a640:	f000 bcd6 	b.w	1aff0 <nrf_free>

0001a644 <stream_handler_init>:
   1a644:	b510      	push	{r4, lr}
   1a646:	4604      	mov	r4, r0
   1a648:	200c      	movs	r0, #12
   1a64a:	f000 fcc7 	bl	1afdc <nrf_malloc>
   1a64e:	60e0      	str	r0, [r4, #12]
   1a650:	b128      	cbz	r0, 1a65e <stream_handler_init+0x1a>
   1a652:	2300      	movs	r3, #0
   1a654:	6123      	str	r3, [r4, #16]
   1a656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a65a:	f7ff bc4d 	b.w	19ef8 <linked_list_init>
   1a65e:	2004      	movs	r0, #4
   1a660:	bd10      	pop	{r4, pc}
   1a662:	bf00      	nop

0001a664 <stream_handler_put>:
   1a664:	b570      	push	{r4, r5, r6, lr}
   1a666:	4606      	mov	r6, r0
   1a668:	2014      	movs	r0, #20
   1a66a:	460d      	mov	r5, r1
   1a66c:	f000 fcb6 	bl	1afdc <nrf_malloc>
   1a670:	b178      	cbz	r0, 1a692 <stream_handler_put+0x2e>
   1a672:	682b      	ldr	r3, [r5, #0]
   1a674:	4604      	mov	r4, r0
   1a676:	6043      	str	r3, [r0, #4]
   1a678:	686b      	ldr	r3, [r5, #4]
   1a67a:	4601      	mov	r1, r0
   1a67c:	6083      	str	r3, [r0, #8]
   1a67e:	68eb      	ldr	r3, [r5, #12]
   1a680:	60c3      	str	r3, [r0, #12]
   1a682:	68ab      	ldr	r3, [r5, #8]
   1a684:	6103      	str	r3, [r0, #16]
   1a686:	68f0      	ldr	r0, [r6, #12]
   1a688:	f7ff fc40 	bl	19f0c <linked_list_push>
   1a68c:	b920      	cbnz	r0, 1a698 <stream_handler_put+0x34>
   1a68e:	6868      	ldr	r0, [r5, #4]
   1a690:	bd70      	pop	{r4, r5, r6, pc}
   1a692:	f04f 30ff 	mov.w	r0, #4294967295
   1a696:	bd70      	pop	{r4, r5, r6, pc}
   1a698:	4620      	mov	r0, r4
   1a69a:	f000 fca9 	bl	1aff0 <nrf_free>
   1a69e:	f04f 30ff 	mov.w	r0, #4294967295
   1a6a2:	bd70      	pop	{r4, r5, r6, pc}

0001a6a4 <stream_handler_get>:
   1a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6a8:	4682      	mov	sl, r0
   1a6aa:	b089      	sub	sp, #36	; 0x24
   1a6ac:	68c0      	ldr	r0, [r0, #12]
   1a6ae:	4689      	mov	r9, r1
   1a6b0:	4693      	mov	fp, r2
   1a6b2:	f7ff fc4b 	bl	19f4c <linked_list_peek>
   1a6b6:	2800      	cmp	r0, #0
   1a6b8:	d071      	beq.n	1a79e <stream_handler_get+0xfa>
   1a6ba:	4605      	mov	r5, r0
   1a6bc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1a6c0:	b120      	cbz	r0, 1a6cc <stream_handler_get+0x28>
   1a6c2:	692b      	ldr	r3, [r5, #16]
   1a6c4:	b113      	cbz	r3, 1a6cc <stream_handler_get+0x28>
   1a6c6:	68ea      	ldr	r2, [r5, #12]
   1a6c8:	2a00      	cmp	r2, #0
   1a6ca:	d15d      	bne.n	1a788 <stream_handler_get+0xe4>
   1a6cc:	2300      	movs	r3, #0
   1a6ce:	f8c9 300c 	str.w	r3, [r9, #12]
   1a6d2:	f8d9 2000 	ldr.w	r2, [r9]
   1a6d6:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1a6da:	f8da 1010 	ldr.w	r1, [sl, #16]
   1a6de:	9203      	str	r2, [sp, #12]
   1a6e0:	f1b8 0f00 	cmp.w	r8, #0
   1a6e4:	d030      	beq.n	1a748 <stream_handler_get+0xa4>
   1a6e6:	2400      	movs	r4, #0
   1a6e8:	f00b 0320 	and.w	r3, fp, #32
   1a6ec:	9301      	str	r3, [sp, #4]
   1a6ee:	f00b 0b08 	and.w	fp, fp, #8
   1a6f2:	68ae      	ldr	r6, [r5, #8]
   1a6f4:	eba8 0304 	sub.w	r3, r8, r4
   1a6f8:	1a76      	subs	r6, r6, r1
   1a6fa:	429e      	cmp	r6, r3
   1a6fc:	4637      	mov	r7, r6
   1a6fe:	bf28      	it	cs
   1a700:	461f      	movcs	r7, r3
   1a702:	b10a      	cbz	r2, 1a708 <stream_handler_get+0x64>
   1a704:	9a01      	ldr	r2, [sp, #4]
   1a706:	b1aa      	cbz	r2, 1a734 <stream_handler_get+0x90>
   1a708:	f1bb 0f00 	cmp.w	fp, #0
   1a70c:	d106      	bne.n	1a71c <stream_handler_get+0x78>
   1a70e:	429e      	cmp	r6, r3
   1a710:	d921      	bls.n	1a756 <stream_handler_get+0xb2>
   1a712:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a716:	443b      	add	r3, r7
   1a718:	f8ca 3010 	str.w	r3, [sl, #16]
   1a71c:	4628      	mov	r0, r5
   1a71e:	f7ff fc1d 	bl	19f5c <linked_list_get_next>
   1a722:	443c      	add	r4, r7
   1a724:	4605      	mov	r5, r0
   1a726:	b180      	cbz	r0, 1a74a <stream_handler_get+0xa6>
   1a728:	45a0      	cmp	r8, r4
   1a72a:	d90e      	bls.n	1a74a <stream_handler_get+0xa6>
   1a72c:	f8d9 2000 	ldr.w	r2, [r9]
   1a730:	2100      	movs	r1, #0
   1a732:	e7de      	b.n	1a6f2 <stream_handler_get+0x4e>
   1a734:	6868      	ldr	r0, [r5, #4]
   1a736:	9302      	str	r3, [sp, #8]
   1a738:	9b03      	ldr	r3, [sp, #12]
   1a73a:	4401      	add	r1, r0
   1a73c:	463a      	mov	r2, r7
   1a73e:	1918      	adds	r0, r3, r4
   1a740:	f004 f8a9 	bl	1e896 <memcpy>
   1a744:	9b02      	ldr	r3, [sp, #8]
   1a746:	e7df      	b.n	1a708 <stream_handler_get+0x64>
   1a748:	4644      	mov	r4, r8
   1a74a:	4620      	mov	r0, r4
   1a74c:	f8c9 4004 	str.w	r4, [r9, #4]
   1a750:	b009      	add	sp, #36	; 0x24
   1a752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a756:	f8da 000c 	ldr.w	r0, [sl, #12]
   1a75a:	f7ff fbed 	bl	19f38 <linked_list_pop>
   1a75e:	4606      	mov	r6, r0
   1a760:	b170      	cbz	r0, 1a780 <stream_handler_get+0xdc>
   1a762:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   1a766:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   1a76a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1a76e:	e9cd 1006 	strd	r1, r0, [sp, #24]
   1a772:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   1a776:	a804      	add	r0, sp, #16
   1a778:	4798      	blx	r3
   1a77a:	4630      	mov	r0, r6
   1a77c:	f000 fc38 	bl	1aff0 <nrf_free>
   1a780:	2300      	movs	r3, #0
   1a782:	f8ca 3010 	str.w	r3, [sl, #16]
   1a786:	e7c9      	b.n	1a71c <stream_handler_get+0x78>
   1a788:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1a78c:	429a      	cmp	r2, r3
   1a78e:	bf28      	it	cs
   1a790:	461a      	movcs	r2, r3
   1a792:	f8c9 200c 	str.w	r2, [r9, #12]
   1a796:	6929      	ldr	r1, [r5, #16]
   1a798:	f004 f87d 	bl	1e896 <memcpy>
   1a79c:	e799      	b.n	1a6d2 <stream_handler_get+0x2e>
   1a79e:	f04f 30ff 	mov.w	r0, #4294967295
   1a7a2:	e7d5      	b.n	1a750 <stream_handler_get+0xac>

0001a7a4 <stream_handler_available>:
   1a7a4:	b510      	push	{r4, lr}
   1a7a6:	4604      	mov	r4, r0
   1a7a8:	68c0      	ldr	r0, [r0, #12]
   1a7aa:	f7ff fbcf 	bl	19f4c <linked_list_peek>
   1a7ae:	b150      	cbz	r0, 1a7c6 <stream_handler_available+0x22>
   1a7b0:	6924      	ldr	r4, [r4, #16]
   1a7b2:	4264      	negs	r4, r4
   1a7b4:	6883      	ldr	r3, [r0, #8]
   1a7b6:	441c      	add	r4, r3
   1a7b8:	f7ff fbd0 	bl	19f5c <linked_list_get_next>
   1a7bc:	2800      	cmp	r0, #0
   1a7be:	d1f9      	bne.n	1a7b4 <stream_handler_available+0x10>
   1a7c0:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   1a7c4:	bd10      	pop	{r4, pc}
   1a7c6:	f04f 30ff 	mov.w	r0, #4294967295
   1a7ca:	bd10      	pop	{r4, pc}

0001a7cc <stream_handler_flush>:
   1a7cc:	b530      	push	{r4, r5, lr}
   1a7ce:	4605      	mov	r5, r0
   1a7d0:	68c0      	ldr	r0, [r0, #12]
   1a7d2:	b085      	sub	sp, #20
   1a7d4:	b9a8      	cbnz	r0, 1a802 <stream_handler_flush+0x36>
   1a7d6:	e01a      	b.n	1a80e <stream_handler_flush+0x42>
   1a7d8:	68e8      	ldr	r0, [r5, #12]
   1a7da:	f7ff fbad 	bl	19f38 <linked_list_pop>
   1a7de:	4604      	mov	r4, r0
   1a7e0:	b170      	cbz	r0, 1a800 <stream_handler_flush+0x34>
   1a7e2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a7e6:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a7ea:	e9cd 0100 	strd	r0, r1, [sp]
   1a7ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a7f2:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a7f6:	4668      	mov	r0, sp
   1a7f8:	4798      	blx	r3
   1a7fa:	4620      	mov	r0, r4
   1a7fc:	f000 fbf8 	bl	1aff0 <nrf_free>
   1a800:	68e8      	ldr	r0, [r5, #12]
   1a802:	f7ff fba9 	bl	19f58 <linked_list_size_get>
   1a806:	2800      	cmp	r0, #0
   1a808:	d1e6      	bne.n	1a7d8 <stream_handler_flush+0xc>
   1a80a:	b005      	add	sp, #20
   1a80c:	bd30      	pop	{r4, r5, pc}
   1a80e:	2008      	movs	r0, #8
   1a810:	b005      	add	sp, #20
   1a812:	bd30      	pop	{r4, r5, pc}

0001a814 <stream_handler_free>:
   1a814:	b530      	push	{r4, r5, lr}
   1a816:	4605      	mov	r5, r0
   1a818:	68c0      	ldr	r0, [r0, #12]
   1a81a:	b085      	sub	sp, #20
   1a81c:	b9a0      	cbnz	r0, 1a848 <stream_handler_free+0x34>
   1a81e:	e01c      	b.n	1a85a <stream_handler_free+0x46>
   1a820:	f7ff fb8a 	bl	19f38 <linked_list_pop>
   1a824:	4604      	mov	r4, r0
   1a826:	b170      	cbz	r0, 1a846 <stream_handler_free+0x32>
   1a828:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   1a82c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   1a830:	e9cd 0100 	strd	r0, r1, [sp]
   1a834:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a838:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   1a83c:	4668      	mov	r0, sp
   1a83e:	4798      	blx	r3
   1a840:	4620      	mov	r0, r4
   1a842:	f000 fbd5 	bl	1aff0 <nrf_free>
   1a846:	68e8      	ldr	r0, [r5, #12]
   1a848:	f7ff fb86 	bl	19f58 <linked_list_size_get>
   1a84c:	4604      	mov	r4, r0
   1a84e:	68e8      	ldr	r0, [r5, #12]
   1a850:	2c00      	cmp	r4, #0
   1a852:	d1e5      	bne.n	1a820 <stream_handler_free+0xc>
   1a854:	f000 fbcc 	bl	1aff0 <nrf_free>
   1a858:	60ec      	str	r4, [r5, #12]
   1a85a:	b005      	add	sp, #20
   1a85c:	bd30      	pop	{r4, r5, pc}
   1a85e:	bf00      	nop

0001a860 <mem_free>:
   1a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a864:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a934 <mem_free+0xd4>
   1a868:	b083      	sub	sp, #12
   1a86a:	9000      	str	r0, [sp, #0]
   1a86c:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   1a870:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1a874:	b12b      	cbz	r3, 1a882 <mem_free+0x22>
   1a876:	f8dc 2000 	ldr.w	r2, [ip]
   1a87a:	9c00      	ldr	r4, [sp, #0]
   1a87c:	7810      	ldrb	r0, [r2, #0]
   1a87e:	42a0      	cmp	r0, r4
   1a880:	d006      	beq.n	1a890 <mem_free+0x30>
   1a882:	f10c 0c0c 	add.w	ip, ip, #12
   1a886:	45e3      	cmp	fp, ip
   1a888:	d1f2      	bne.n	1a870 <mem_free+0x10>
   1a88a:	b003      	add	sp, #12
   1a88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a890:	f8dc a004 	ldr.w	sl, [ip, #4]
   1a894:	eb03 080a 	add.w	r8, r3, sl
   1a898:	45c2      	cmp	sl, r8
   1a89a:	d2f2      	bcs.n	1a882 <mem_free+0x22>
   1a89c:	6853      	ldr	r3, [r2, #4]
   1a89e:	f8cd c004 	str.w	ip, [sp, #4]
   1a8a2:	46d6      	mov	lr, sl
   1a8a4:	469c      	mov	ip, r3
   1a8a6:	f8d2 9010 	ldr.w	r9, [r2, #16]
   1a8aa:	8997      	ldrh	r7, [r2, #12]
   1a8ac:	ebae 000a 	sub.w	r0, lr, sl
   1a8b0:	b3df      	cbz	r7, 1a92a <mem_free+0xca>
   1a8b2:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1a8b6:	4290      	cmp	r0, r2
   1a8b8:	d31c      	bcc.n	1a8f4 <mem_free+0x94>
   1a8ba:	4665      	mov	r5, ip
   1a8bc:	2400      	movs	r4, #0
   1a8be:	f109 0304 	add.w	r3, r9, #4
   1a8c2:	e003      	b.n	1a8cc <mem_free+0x6c>
   1a8c4:	885a      	ldrh	r2, [r3, #2]
   1a8c6:	3304      	adds	r3, #4
   1a8c8:	4282      	cmp	r2, r0
   1a8ca:	d815      	bhi.n	1a8f8 <mem_free+0x98>
   1a8cc:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   1a8d0:	3401      	adds	r4, #1
   1a8d2:	42a7      	cmp	r7, r4
   1a8d4:	fb02 5506 	mla	r5, r2, r6, r5
   1a8d8:	eba0 0002 	sub.w	r0, r0, r2
   1a8dc:	461e      	mov	r6, r3
   1a8de:	d1f1      	bne.n	1a8c4 <mem_free+0x64>
   1a8e0:	2000      	movs	r0, #0
   1a8e2:	4281      	cmp	r1, r0
   1a8e4:	d00d      	beq.n	1a902 <mem_free+0xa2>
   1a8e6:	f10e 0e01 	add.w	lr, lr, #1
   1a8ea:	45f0      	cmp	r8, lr
   1a8ec:	d1de      	bne.n	1a8ac <mem_free+0x4c>
   1a8ee:	f8dd c004 	ldr.w	ip, [sp, #4]
   1a8f2:	e7c6      	b.n	1a882 <mem_free+0x22>
   1a8f4:	4665      	mov	r5, ip
   1a8f6:	464e      	mov	r6, r9
   1a8f8:	8833      	ldrh	r3, [r6, #0]
   1a8fa:	fb00 5003 	mla	r0, r0, r3, r5
   1a8fe:	4281      	cmp	r1, r0
   1a900:	d1f1      	bne.n	1a8e6 <mem_free+0x86>
   1a902:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1a906:	f8dd c004 	ldr.w	ip, [sp, #4]
   1a90a:	d0ba      	beq.n	1a882 <mem_free+0x22>
   1a90c:	2301      	movs	r3, #1
   1a90e:	4a08      	ldr	r2, [pc, #32]	; (1a930 <mem_free+0xd0>)
   1a910:	ea4f 115e 	mov.w	r1, lr, lsr #5
   1a914:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1a918:	f00e 0e1f 	and.w	lr, lr, #31
   1a91c:	fa03 fe0e 	lsl.w	lr, r3, lr
   1a920:	ea4e 0000 	orr.w	r0, lr, r0
   1a924:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   1a928:	e7af      	b.n	1a88a <mem_free+0x2a>
   1a92a:	4638      	mov	r0, r7
   1a92c:	e7d9      	b.n	1a8e2 <mem_free+0x82>
   1a92e:	bf00      	nop
   1a930:	20020e90 	.word	0x20020e90
   1a934:	20020ed4 	.word	0x20020ed4

0001a938 <mem_alloc.constprop.5>:
   1a938:	2800      	cmp	r0, #0
   1a93a:	d050      	beq.n	1a9de <mem_alloc.constprop.5+0xa6>
   1a93c:	4b6d      	ldr	r3, [pc, #436]	; (1aaf4 <mem_alloc.constprop.5+0x1bc>)
   1a93e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1a942:	4290      	cmp	r0, r2
   1a944:	d84b      	bhi.n	1a9de <mem_alloc.constprop.5+0xa6>
   1a946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a94a:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   1a94e:	b083      	sub	sp, #12
   1a950:	f1bb 0f00 	cmp.w	fp, #0
   1a954:	d054      	beq.n	1aa00 <mem_alloc.constprop.5+0xc8>
   1a956:	f10b 32ff 	add.w	r2, fp, #4294967295
   1a95a:	4691      	mov	r9, r2
   1a95c:	2600      	movs	r6, #0
   1a95e:	f04f 0812 	mov.w	r8, #18
   1a962:	4f65      	ldr	r7, [pc, #404]	; (1aaf8 <mem_alloc.constprop.5+0x1c0>)
   1a964:	9201      	str	r2, [sp, #4]
   1a966:	f10b 0e11 	add.w	lr, fp, #17
   1a96a:	eb06 0209 	add.w	r2, r6, r9
   1a96e:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   1a972:	3201      	adds	r2, #1
   1a974:	0852      	lsrs	r2, r2, #1
   1a976:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   1a97a:	f102 0112 	add.w	r1, r2, #18
   1a97e:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   1a982:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   1a986:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   1a98a:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   1a98e:	f8dc c004 	ldr.w	ip, [ip, #4]
   1a992:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1a996:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1a99a:	f8da a010 	ldr.w	sl, [sl, #16]
   1a99e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   1a9a2:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   1a9a6:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   1a9aa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1a9ae:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   1a9b2:	6849      	ldr	r1, [r1, #4]
   1a9b4:	692d      	ldr	r5, [r5, #16]
   1a9b6:	6924      	ldr	r4, [r4, #16]
   1a9b8:	f8dc c004 	ldr.w	ip, [ip, #4]
   1a9bc:	4550      	cmp	r0, sl
   1a9be:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   1a9c2:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   1a9c6:	d915      	bls.n	1a9f4 <mem_alloc.constprop.5+0xbc>
   1a9c8:	4288      	cmp	r0, r1
   1a9ca:	d211      	bcs.n	1a9f0 <mem_alloc.constprop.5+0xb8>
   1a9cc:	42a8      	cmp	r0, r5
   1a9ce:	d908      	bls.n	1a9e2 <mem_alloc.constprop.5+0xaa>
   1a9d0:	1c56      	adds	r6, r2, #1
   1a9d2:	45b1      	cmp	r9, r6
   1a9d4:	f0c0 8087 	bcc.w	1aae6 <mem_alloc.constprop.5+0x1ae>
   1a9d8:	f102 0813 	add.w	r8, r2, #19
   1a9dc:	e7c5      	b.n	1a96a <mem_alloc.constprop.5+0x32>
   1a9de:	2000      	movs	r0, #0
   1a9e0:	4770      	bx	lr
   1a9e2:	f102 39ff 	add.w	r9, r2, #4294967295
   1a9e6:	454e      	cmp	r6, r9
   1a9e8:	d87d      	bhi.n	1aae6 <mem_alloc.constprop.5+0x1ae>
   1a9ea:	f102 0e11 	add.w	lr, r2, #17
   1a9ee:	e7bc      	b.n	1a96a <mem_alloc.constprop.5+0x32>
   1a9f0:	f109 0601 	add.w	r6, r9, #1
   1a9f4:	45b3      	cmp	fp, r6
   1a9f6:	d007      	beq.n	1aa08 <mem_alloc.constprop.5+0xd0>
   1a9f8:	2e10      	cmp	r6, #16
   1a9fa:	d001      	beq.n	1aa00 <mem_alloc.constprop.5+0xc8>
   1a9fc:	45b3      	cmp	fp, r6
   1a9fe:	d808      	bhi.n	1aa12 <mem_alloc.constprop.5+0xda>
   1aa00:	2000      	movs	r0, #0
   1aa02:	b003      	add	sp, #12
   1aa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa08:	9a01      	ldr	r2, [sp, #4]
   1aa0a:	2a10      	cmp	r2, #16
   1aa0c:	bf18      	it	ne
   1aa0e:	4616      	movne	r6, r2
   1aa10:	d0f6      	beq.n	1aa00 <mem_alloc.constprop.5+0xc8>
   1aa12:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1aafc <mem_alloc.constprop.5+0x1c4>
   1aa16:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   1aa1a:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   1aa1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1aa22:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   1aa26:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   1aa2a:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1aa2e:	691d      	ldr	r5, [r3, #16]
   1aa30:	2c00      	cmp	r4, #0
   1aa32:	d056      	beq.n	1aae2 <mem_alloc.constprop.5+0x1aa>
   1aa34:	462a      	mov	r2, r5
   1aa36:	4670      	mov	r0, lr
   1aa38:	00a4      	lsls	r4, r4, #2
   1aa3a:	eb05 0904 	add.w	r9, r5, r4
   1aa3e:	8851      	ldrh	r1, [r2, #2]
   1aa40:	3204      	adds	r2, #4
   1aa42:	4591      	cmp	r9, r2
   1aa44:	4408      	add	r0, r1
   1aa46:	d1fa      	bne.n	1aa3e <mem_alloc.constprop.5+0x106>
   1aa48:	1929      	adds	r1, r5, r4
   1aa4a:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   1aa4e:	4482      	add	sl, r0
   1aa50:	4582      	cmp	sl, r0
   1aa52:	d918      	bls.n	1aa86 <mem_alloc.constprop.5+0x14e>
   1aa54:	0941      	lsrs	r1, r0, #5
   1aa56:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1aa5a:	f000 041f 	and.w	r4, r0, #31
   1aa5e:	fa22 f904 	lsr.w	r9, r2, r4
   1aa62:	f019 0f01 	tst.w	r9, #1
   1aa66:	d007      	beq.n	1aa78 <mem_alloc.constprop.5+0x140>
   1aa68:	e013      	b.n	1aa92 <mem_alloc.constprop.5+0x15a>
   1aa6a:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   1aa6e:	fa22 f904 	lsr.w	r9, r2, r4
   1aa72:	f019 0f01 	tst.w	r9, #1
   1aa76:	d10c      	bne.n	1aa92 <mem_alloc.constprop.5+0x15a>
   1aa78:	3001      	adds	r0, #1
   1aa7a:	4582      	cmp	sl, r0
   1aa7c:	ea4f 1150 	mov.w	r1, r0, lsr #5
   1aa80:	f000 041f 	and.w	r4, r0, #31
   1aa84:	d1f1      	bne.n	1aa6a <mem_alloc.constprop.5+0x132>
   1aa86:	3601      	adds	r6, #1
   1aa88:	455e      	cmp	r6, fp
   1aa8a:	f108 0808 	add.w	r8, r8, #8
   1aa8e:	d3c4      	bcc.n	1aa1a <mem_alloc.constprop.5+0xe2>
   1aa90:	e7b6      	b.n	1aa00 <mem_alloc.constprop.5+0xc8>
   1aa92:	2601      	movs	r6, #1
   1aa94:	fa06 f404 	lsl.w	r4, r6, r4
   1aa98:	899e      	ldrh	r6, [r3, #12]
   1aa9a:	ea22 0204 	bic.w	r2, r2, r4
   1aa9e:	eba0 000e 	sub.w	r0, r0, lr
   1aaa2:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   1aaa6:	685c      	ldr	r4, [r3, #4]
   1aaa8:	2e00      	cmp	r6, #0
   1aaaa:	d0a9      	beq.n	1aa00 <mem_alloc.constprop.5+0xc8>
   1aaac:	886a      	ldrh	r2, [r5, #2]
   1aaae:	4282      	cmp	r2, r0
   1aab0:	d811      	bhi.n	1aad6 <mem_alloc.constprop.5+0x19e>
   1aab2:	2100      	movs	r1, #0
   1aab4:	1d2b      	adds	r3, r5, #4
   1aab6:	e003      	b.n	1aac0 <mem_alloc.constprop.5+0x188>
   1aab8:	885a      	ldrh	r2, [r3, #2]
   1aaba:	3304      	adds	r3, #4
   1aabc:	4282      	cmp	r2, r0
   1aabe:	d80a      	bhi.n	1aad6 <mem_alloc.constprop.5+0x19e>
   1aac0:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1aac4:	3101      	adds	r1, #1
   1aac6:	428e      	cmp	r6, r1
   1aac8:	fb02 4405 	mla	r4, r2, r5, r4
   1aacc:	eba0 0002 	sub.w	r0, r0, r2
   1aad0:	461d      	mov	r5, r3
   1aad2:	d1f1      	bne.n	1aab8 <mem_alloc.constprop.5+0x180>
   1aad4:	e794      	b.n	1aa00 <mem_alloc.constprop.5+0xc8>
   1aad6:	882b      	ldrh	r3, [r5, #0]
   1aad8:	fb00 4003 	mla	r0, r0, r3, r4
   1aadc:	b003      	add	sp, #12
   1aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aae2:	4670      	mov	r0, lr
   1aae4:	e7b0      	b.n	1aa48 <mem_alloc.constprop.5+0x110>
   1aae6:	f1bb 0f10 	cmp.w	fp, #16
   1aaea:	bf08      	it	eq
   1aaec:	260f      	moveq	r6, #15
   1aaee:	d090      	beq.n	1aa12 <mem_alloc.constprop.5+0xda>
   1aaf0:	e786      	b.n	1aa00 <mem_alloc.constprop.5+0xc8>
   1aaf2:	bf00      	nop
   1aaf4:	20020f10 	.word	0x20020f10
   1aaf8:	20020ed4 	.word	0x20020ed4
   1aafc:	20020e90 	.word	0x20020e90

0001ab00 <mem_alloc.constprop.4>:
   1ab00:	2800      	cmp	r0, #0
   1ab02:	d04c      	beq.n	1ab9e <mem_alloc.constprop.4+0x9e>
   1ab04:	4b6b      	ldr	r3, [pc, #428]	; (1acb4 <mem_alloc.constprop.4+0x1b4>)
   1ab06:	681a      	ldr	r2, [r3, #0]
   1ab08:	4290      	cmp	r0, r2
   1ab0a:	d848      	bhi.n	1ab9e <mem_alloc.constprop.4+0x9e>
   1ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab10:	685f      	ldr	r7, [r3, #4]
   1ab12:	b083      	sub	sp, #12
   1ab14:	9700      	str	r7, [sp, #0]
   1ab16:	2f00      	cmp	r7, #0
   1ab18:	d051      	beq.n	1abbe <mem_alloc.constprop.4+0xbe>
   1ab1a:	1e7a      	subs	r2, r7, #1
   1ab1c:	4696      	mov	lr, r2
   1ab1e:	2100      	movs	r1, #0
   1ab20:	f04f 0c01 	mov.w	ip, #1
   1ab24:	4c64      	ldr	r4, [pc, #400]	; (1acb8 <mem_alloc.constprop.4+0x1b8>)
   1ab26:	9201      	str	r2, [sp, #4]
   1ab28:	eb01 020e 	add.w	r2, r1, lr
   1ab2c:	3201      	adds	r2, #1
   1ab2e:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   1ab32:	0852      	lsrs	r2, r2, #1
   1ab34:	f102 0801 	add.w	r8, r2, #1
   1ab38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1ab3c:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   1ab40:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   1ab44:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   1ab48:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   1ab4c:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   1ab50:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1ab54:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1ab58:	f8da a010 	ldr.w	sl, [sl, #16]
   1ab5c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   1ab60:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   1ab64:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   1ab68:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   1ab6c:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   1ab70:	6936      	ldr	r6, [r6, #16]
   1ab72:	f8db b004 	ldr.w	fp, [fp, #4]
   1ab76:	692d      	ldr	r5, [r5, #16]
   1ab78:	f8d9 9004 	ldr.w	r9, [r9, #4]
   1ab7c:	4550      	cmp	r0, sl
   1ab7e:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   1ab82:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   1ab86:	d913      	bls.n	1abb0 <mem_alloc.constprop.4+0xb0>
   1ab88:	42a8      	cmp	r0, r5
   1ab8a:	d210      	bcs.n	1abae <mem_alloc.constprop.4+0xae>
   1ab8c:	42b0      	cmp	r0, r6
   1ab8e:	d908      	bls.n	1aba2 <mem_alloc.constprop.4+0xa2>
   1ab90:	45c6      	cmp	lr, r8
   1ab92:	4641      	mov	r1, r8
   1ab94:	f0c0 8087 	bcc.w	1aca6 <mem_alloc.constprop.4+0x1a6>
   1ab98:	f108 0c01 	add.w	ip, r8, #1
   1ab9c:	e7c4      	b.n	1ab28 <mem_alloc.constprop.4+0x28>
   1ab9e:	2000      	movs	r0, #0
   1aba0:	4770      	bx	lr
   1aba2:	f102 3eff 	add.w	lr, r2, #4294967295
   1aba6:	4571      	cmp	r1, lr
   1aba8:	d87d      	bhi.n	1aca6 <mem_alloc.constprop.4+0x1a6>
   1abaa:	4617      	mov	r7, r2
   1abac:	e7bc      	b.n	1ab28 <mem_alloc.constprop.4+0x28>
   1abae:	4639      	mov	r1, r7
   1abb0:	9a00      	ldr	r2, [sp, #0]
   1abb2:	428a      	cmp	r2, r1
   1abb4:	d007      	beq.n	1abc6 <mem_alloc.constprop.4+0xc6>
   1abb6:	2910      	cmp	r1, #16
   1abb8:	d001      	beq.n	1abbe <mem_alloc.constprop.4+0xbe>
   1abba:	428a      	cmp	r2, r1
   1abbc:	d808      	bhi.n	1abd0 <mem_alloc.constprop.4+0xd0>
   1abbe:	2000      	movs	r0, #0
   1abc0:	b003      	add	sp, #12
   1abc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abc6:	9a01      	ldr	r2, [sp, #4]
   1abc8:	2a10      	cmp	r2, #16
   1abca:	bf18      	it	ne
   1abcc:	4611      	movne	r1, r2
   1abce:	d0f6      	beq.n	1abbe <mem_alloc.constprop.4+0xbe>
   1abd0:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1acbc <mem_alloc.constprop.4+0x1bc>
   1abd4:	f8dd 9000 	ldr.w	r9, [sp]
   1abd8:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   1abdc:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   1abe0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1abe4:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   1abe8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1abec:	f8d2 e004 	ldr.w	lr, [r2, #4]
   1abf0:	691f      	ldr	r7, [r3, #16]
   1abf2:	2e00      	cmp	r6, #0
   1abf4:	d055      	beq.n	1aca2 <mem_alloc.constprop.4+0x1a2>
   1abf6:	463a      	mov	r2, r7
   1abf8:	4670      	mov	r0, lr
   1abfa:	00b6      	lsls	r6, r6, #2
   1abfc:	eb07 0a06 	add.w	sl, r7, r6
   1ac00:	8855      	ldrh	r5, [r2, #2]
   1ac02:	3204      	adds	r2, #4
   1ac04:	4592      	cmp	sl, r2
   1ac06:	4428      	add	r0, r5
   1ac08:	d1fa      	bne.n	1ac00 <mem_alloc.constprop.4+0x100>
   1ac0a:	19bd      	adds	r5, r7, r6
   1ac0c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   1ac10:	4483      	add	fp, r0
   1ac12:	4583      	cmp	fp, r0
   1ac14:	d918      	bls.n	1ac48 <mem_alloc.constprop.4+0x148>
   1ac16:	0945      	lsrs	r5, r0, #5
   1ac18:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1ac1c:	f000 061f 	and.w	r6, r0, #31
   1ac20:	fa22 fa06 	lsr.w	sl, r2, r6
   1ac24:	f01a 0f01 	tst.w	sl, #1
   1ac28:	d007      	beq.n	1ac3a <mem_alloc.constprop.4+0x13a>
   1ac2a:	e013      	b.n	1ac54 <mem_alloc.constprop.4+0x154>
   1ac2c:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   1ac30:	fa22 fa06 	lsr.w	sl, r2, r6
   1ac34:	f01a 0f01 	tst.w	sl, #1
   1ac38:	d10c      	bne.n	1ac54 <mem_alloc.constprop.4+0x154>
   1ac3a:	3001      	adds	r0, #1
   1ac3c:	4583      	cmp	fp, r0
   1ac3e:	ea4f 1550 	mov.w	r5, r0, lsr #5
   1ac42:	f000 061f 	and.w	r6, r0, #31
   1ac46:	d1f1      	bne.n	1ac2c <mem_alloc.constprop.4+0x12c>
   1ac48:	3101      	adds	r1, #1
   1ac4a:	4549      	cmp	r1, r9
   1ac4c:	f108 0808 	add.w	r8, r8, #8
   1ac50:	d3c4      	bcc.n	1abdc <mem_alloc.constprop.4+0xdc>
   1ac52:	e7b4      	b.n	1abbe <mem_alloc.constprop.4+0xbe>
   1ac54:	2101      	movs	r1, #1
   1ac56:	40b1      	lsls	r1, r6
   1ac58:	899e      	ldrh	r6, [r3, #12]
   1ac5a:	ea22 0201 	bic.w	r2, r2, r1
   1ac5e:	eba0 000e 	sub.w	r0, r0, lr
   1ac62:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   1ac66:	685c      	ldr	r4, [r3, #4]
   1ac68:	2e00      	cmp	r6, #0
   1ac6a:	d0a8      	beq.n	1abbe <mem_alloc.constprop.4+0xbe>
   1ac6c:	887a      	ldrh	r2, [r7, #2]
   1ac6e:	4282      	cmp	r2, r0
   1ac70:	d811      	bhi.n	1ac96 <mem_alloc.constprop.4+0x196>
   1ac72:	2100      	movs	r1, #0
   1ac74:	1d3b      	adds	r3, r7, #4
   1ac76:	e003      	b.n	1ac80 <mem_alloc.constprop.4+0x180>
   1ac78:	885a      	ldrh	r2, [r3, #2]
   1ac7a:	3304      	adds	r3, #4
   1ac7c:	4282      	cmp	r2, r0
   1ac7e:	d80a      	bhi.n	1ac96 <mem_alloc.constprop.4+0x196>
   1ac80:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   1ac84:	3101      	adds	r1, #1
   1ac86:	428e      	cmp	r6, r1
   1ac88:	eba0 0002 	sub.w	r0, r0, r2
   1ac8c:	fb02 4405 	mla	r4, r2, r5, r4
   1ac90:	461f      	mov	r7, r3
   1ac92:	d1f1      	bne.n	1ac78 <mem_alloc.constprop.4+0x178>
   1ac94:	e793      	b.n	1abbe <mem_alloc.constprop.4+0xbe>
   1ac96:	883b      	ldrh	r3, [r7, #0]
   1ac98:	fb00 4003 	mla	r0, r0, r3, r4
   1ac9c:	b003      	add	sp, #12
   1ac9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aca2:	4670      	mov	r0, lr
   1aca4:	e7b1      	b.n	1ac0a <mem_alloc.constprop.4+0x10a>
   1aca6:	9a00      	ldr	r2, [sp, #0]
   1aca8:	2a10      	cmp	r2, #16
   1acaa:	bf08      	it	eq
   1acac:	210f      	moveq	r1, #15
   1acae:	d08f      	beq.n	1abd0 <mem_alloc.constprop.4+0xd0>
   1acb0:	e785      	b.n	1abbe <mem_alloc.constprop.4+0xbe>
   1acb2:	bf00      	nop
   1acb4:	20020f10 	.word	0x20020f10
   1acb8:	20020ed4 	.word	0x20020ed4
   1acbc:	20020e90 	.word	0x20020e90

0001acc0 <nrf_mem_init>:
   1acc0:	b570      	push	{r4, r5, r6, lr}
   1acc2:	2200      	movs	r2, #0
   1acc4:	2501      	movs	r5, #1
   1acc6:	4833      	ldr	r0, [pc, #204]	; (1ad94 <nrf_mem_init+0xd4>)
   1acc8:	0951      	lsrs	r1, r2, #5
   1acca:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   1acce:	f002 031f 	and.w	r3, r2, #31
   1acd2:	fa05 f303 	lsl.w	r3, r5, r3
   1acd6:	3201      	adds	r2, #1
   1acd8:	4323      	orrs	r3, r4
   1acda:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1acde:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   1ace2:	d1f1      	bne.n	1acc8 <nrf_mem_init+0x8>
   1ace4:	2400      	movs	r4, #0
   1ace6:	4b2c      	ldr	r3, [pc, #176]	; (1ad98 <nrf_mem_init+0xd8>)
   1ace8:	4621      	mov	r1, r4
   1acea:	223c      	movs	r2, #60	; 0x3c
   1acec:	482b      	ldr	r0, [pc, #172]	; (1ad9c <nrf_mem_init+0xdc>)
   1acee:	601c      	str	r4, [r3, #0]
   1acf0:	f003 fdfc 	bl	1e8ec <memset>
   1acf4:	2110      	movs	r1, #16
   1acf6:	2205      	movs	r2, #5
   1acf8:	4b29      	ldr	r3, [pc, #164]	; (1ada0 <nrf_mem_init+0xe0>)
   1acfa:	4e2a      	ldr	r6, [pc, #168]	; (1ada4 <nrf_mem_init+0xe4>)
   1acfc:	e9c3 4400 	strd	r4, r4, [r3]
   1ad00:	60d9      	str	r1, [r3, #12]
   1ad02:	6159      	str	r1, [r3, #20]
   1ad04:	61d9      	str	r1, [r3, #28]
   1ad06:	6259      	str	r1, [r3, #36]	; 0x24
   1ad08:	62d9      	str	r1, [r3, #44]	; 0x2c
   1ad0a:	6359      	str	r1, [r3, #52]	; 0x34
   1ad0c:	63d9      	str	r1, [r3, #60]	; 0x3c
   1ad0e:	6459      	str	r1, [r3, #68]	; 0x44
   1ad10:	64d9      	str	r1, [r3, #76]	; 0x4c
   1ad12:	6559      	str	r1, [r3, #84]	; 0x54
   1ad14:	65d9      	str	r1, [r3, #92]	; 0x5c
   1ad16:	6659      	str	r1, [r3, #100]	; 0x64
   1ad18:	66d9      	str	r1, [r3, #108]	; 0x6c
   1ad1a:	6759      	str	r1, [r3, #116]	; 0x74
   1ad1c:	67d9      	str	r1, [r3, #124]	; 0x7c
   1ad1e:	609a      	str	r2, [r3, #8]
   1ad20:	611a      	str	r2, [r3, #16]
   1ad22:	619a      	str	r2, [r3, #24]
   1ad24:	621a      	str	r2, [r3, #32]
   1ad26:	629a      	str	r2, [r3, #40]	; 0x28
   1ad28:	631a      	str	r2, [r3, #48]	; 0x30
   1ad2a:	639a      	str	r2, [r3, #56]	; 0x38
   1ad2c:	641a      	str	r2, [r3, #64]	; 0x40
   1ad2e:	649a      	str	r2, [r3, #72]	; 0x48
   1ad30:	651a      	str	r2, [r3, #80]	; 0x50
   1ad32:	659a      	str	r2, [r3, #88]	; 0x58
   1ad34:	661a      	str	r2, [r3, #96]	; 0x60
   1ad36:	669a      	str	r2, [r3, #104]	; 0x68
   1ad38:	671a      	str	r2, [r3, #112]	; 0x70
   1ad3a:	679a      	str	r2, [r3, #120]	; 0x78
   1ad3c:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   1ad40:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   1ad44:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   1ad48:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   1ad4c:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   1ad50:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   1ad54:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   1ad58:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   1ad5c:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   1ad60:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   1ad64:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   1ad68:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   1ad6c:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   1ad70:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   1ad74:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   1ad78:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   1ad7c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1ad80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ad84:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   1ad88:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1ad8c:	4620      	mov	r0, r4
   1ad8e:	7035      	strb	r5, [r6, #0]
   1ad90:	bd70      	pop	{r4, r5, r6, pc}
   1ad92:	bf00      	nop
   1ad94:	20020e90 	.word	0x20020e90
   1ad98:	20020ed0 	.word	0x20020ed0
   1ad9c:	20020ed4 	.word	0x20020ed4
   1ada0:	20020f10 	.word	0x20020f10
   1ada4:	200236c6 	.word	0x200236c6

0001ada8 <nrf_mem_register>:
   1ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1adac:	4b87      	ldr	r3, [pc, #540]	; (1afcc <nrf_mem_register+0x224>)
   1adae:	b087      	sub	sp, #28
   1adb0:	781b      	ldrb	r3, [r3, #0]
   1adb2:	2b00      	cmp	r3, #0
   1adb4:	f000 808c 	beq.w	1aed0 <nrf_mem_register+0x128>
   1adb8:	b328      	cbz	r0, 1ae06 <nrf_mem_register+0x5e>
   1adba:	b321      	cbz	r1, 1ae06 <nrf_mem_register+0x5e>
   1adbc:	780b      	ldrb	r3, [r1, #0]
   1adbe:	f8df 8218 	ldr.w	r8, [pc, #536]	; 1afd8 <nrf_mem_register+0x230>
   1adc2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1adc6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1adca:	685b      	ldr	r3, [r3, #4]
   1adcc:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   1add0:	4463      	add	r3, ip
   1add2:	2b10      	cmp	r3, #16
   1add4:	d811      	bhi.n	1adfa <nrf_mem_register+0x52>
   1add6:	f04f 0a00 	mov.w	sl, #0
   1adda:	4689      	mov	r9, r1
   1addc:	4b7c      	ldr	r3, [pc, #496]	; (1afd0 <nrf_mem_register+0x228>)
   1adde:	4f7d      	ldr	r7, [pc, #500]	; (1afd4 <nrf_mem_register+0x22c>)
   1ade0:	681b      	ldr	r3, [r3, #0]
   1ade2:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   1ade6:	9300      	str	r3, [sp, #0]
   1ade8:	68b9      	ldr	r1, [r7, #8]
   1adea:	b191      	cbz	r1, 1ae12 <nrf_mem_register+0x6a>
   1adec:	f10a 0a01 	add.w	sl, sl, #1
   1adf0:	f1ba 0f05 	cmp.w	sl, #5
   1adf4:	f107 070c 	add.w	r7, r7, #12
   1adf8:	d1f6      	bne.n	1ade8 <nrf_mem_register+0x40>
   1adfa:	f248 1b07 	movw	fp, #33031	; 0x8107
   1adfe:	4658      	mov	r0, fp
   1ae00:	b007      	add	sp, #28
   1ae02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae06:	f248 1b0e 	movw	fp, #33038	; 0x810e
   1ae0a:	4658      	mov	r0, fp
   1ae0c:	b007      	add	sp, #28
   1ae0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae12:	f1bc 0f00 	cmp.w	ip, #0
   1ae16:	d061      	beq.n	1aedc <nrf_mem_register+0x134>
   1ae18:	460d      	mov	r5, r1
   1ae1a:	460c      	mov	r4, r1
   1ae1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1ae20:	eb0e 0b03 	add.w	fp, lr, r3
   1ae24:	885a      	ldrh	r2, [r3, #2]
   1ae26:	f833 6b04 	ldrh.w	r6, [r3], #4
   1ae2a:	4415      	add	r5, r2
   1ae2c:	459b      	cmp	fp, r3
   1ae2e:	fb02 4406 	mla	r4, r2, r6, r4
   1ae32:	d1f7      	bne.n	1ae24 <nrf_mem_register+0x7c>
   1ae34:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1ae38:	42a3      	cmp	r3, r4
   1ae3a:	d3d7      	bcc.n	1adec <nrf_mem_register+0x44>
   1ae3c:	9b00      	ldr	r3, [sp, #0]
   1ae3e:	442b      	add	r3, r5
   1ae40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1ae44:	d2d2      	bcs.n	1adec <nrf_mem_register+0x44>
   1ae46:	4c63      	ldr	r4, [pc, #396]	; (1afd4 <nrf_mem_register+0x22c>)
   1ae48:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   1ae4c:	0092      	lsls	r2, r2, #2
   1ae4e:	f8c0 a000 	str.w	sl, [r0]
   1ae52:	18a0      	adds	r0, r4, r2
   1ae54:	f844 9002 	str.w	r9, [r4, r2]
   1ae58:	9a00      	ldr	r2, [sp, #0]
   1ae5a:	468b      	mov	fp, r1
   1ae5c:	e9c0 2501 	strd	r2, r5, [r0, #4]
   1ae60:	f899 2001 	ldrb.w	r2, [r9, #1]
   1ae64:	485a      	ldr	r0, [pc, #360]	; (1afd0 <nrf_mem_register+0x228>)
   1ae66:	2a01      	cmp	r2, #1
   1ae68:	6003      	str	r3, [r0, #0]
   1ae6a:	d0c8      	beq.n	1adfe <nrf_mem_register+0x56>
   1ae6c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   1ae70:	2b00      	cmp	r3, #0
   1ae72:	d0c4      	beq.n	1adfe <nrf_mem_register+0x56>
   1ae74:	2500      	movs	r5, #0
   1ae76:	f8cd 9004 	str.w	r9, [sp, #4]
   1ae7a:	f8cd a00c 	str.w	sl, [sp, #12]
   1ae7e:	f8cd b014 	str.w	fp, [sp, #20]
   1ae82:	9b01      	ldr	r3, [sp, #4]
   1ae84:	781f      	ldrb	r7, [r3, #0]
   1ae86:	691a      	ldr	r2, [r3, #16]
   1ae88:	013b      	lsls	r3, r7, #4
   1ae8a:	eb03 0907 	add.w	r9, r3, r7
   1ae8e:	9300      	str	r3, [sp, #0]
   1ae90:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1ae94:	6859      	ldr	r1, [r3, #4]
   1ae96:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   1ae9a:	9102      	str	r1, [sp, #8]
   1ae9c:	bb39      	cbnz	r1, 1aeee <nrf_mem_register+0x146>
   1ae9e:	9a03      	ldr	r2, [sp, #12]
   1aea0:	60dd      	str	r5, [r3, #12]
   1aea2:	609a      	str	r2, [r3, #8]
   1aea4:	9b00      	ldr	r3, [sp, #0]
   1aea6:	443b      	add	r3, r7
   1aea8:	461f      	mov	r7, r3
   1aeaa:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1aeae:	684b      	ldr	r3, [r1, #4]
   1aeb0:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   1aeb4:	3301      	adds	r3, #1
   1aeb6:	4294      	cmp	r4, r2
   1aeb8:	604b      	str	r3, [r1, #4]
   1aeba:	d912      	bls.n	1aee2 <nrf_mem_register+0x13a>
   1aebc:	9b01      	ldr	r3, [sp, #4]
   1aebe:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   1aec2:	899b      	ldrh	r3, [r3, #12]
   1aec4:	3501      	adds	r5, #1
   1aec6:	429d      	cmp	r5, r3
   1aec8:	d3db      	bcc.n	1ae82 <nrf_mem_register+0xda>
   1aeca:	f8dd b014 	ldr.w	fp, [sp, #20]
   1aece:	e796      	b.n	1adfe <nrf_mem_register+0x56>
   1aed0:	f248 1b08 	movw	fp, #33032	; 0x8108
   1aed4:	4658      	mov	r0, fp
   1aed6:	b007      	add	sp, #28
   1aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aedc:	9b00      	ldr	r3, [sp, #0]
   1aede:	4665      	mov	r5, ip
   1aee0:	e7ae      	b.n	1ae40 <nrf_mem_register+0x98>
   1aee2:	9b01      	ldr	r3, [sp, #4]
   1aee4:	3501      	adds	r5, #1
   1aee6:	899b      	ldrh	r3, [r3, #12]
   1aee8:	42ab      	cmp	r3, r5
   1aeea:	d8ca      	bhi.n	1ae82 <nrf_mem_register+0xda>
   1aeec:	e7ed      	b.n	1aeca <nrf_mem_register+0x122>
   1aeee:	2600      	movs	r6, #0
   1aef0:	f101 3aff 	add.w	sl, r1, #4294967295
   1aef4:	9504      	str	r5, [sp, #16]
   1aef6:	eb06 000a 	add.w	r0, r6, sl
   1aefa:	eb09 0206 	add.w	r2, r9, r6
   1aefe:	3201      	adds	r2, #1
   1af00:	3001      	adds	r0, #1
   1af02:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   1af06:	0840      	lsrs	r0, r0, #1
   1af08:	4d32      	ldr	r5, [pc, #200]	; (1afd4 <nrf_mem_register+0x22c>)
   1af0a:	eb09 0100 	add.w	r1, r9, r0
   1af0e:	eb09 030a 	add.w	r3, r9, sl
   1af12:	3101      	adds	r1, #1
   1af14:	3301      	adds	r3, #1
   1af16:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1af1a:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   1af1e:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   1af22:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   1af26:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   1af2a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1af2e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1af32:	f8db b010 	ldr.w	fp, [fp, #16]
   1af36:	6852      	ldr	r2, [r2, #4]
   1af38:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   1af3c:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   1af40:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   1af44:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1af48:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   1af4c:	f8de e010 	ldr.w	lr, [lr, #16]
   1af50:	6849      	ldr	r1, [r1, #4]
   1af52:	f8dc c010 	ldr.w	ip, [ip, #16]
   1af56:	685b      	ldr	r3, [r3, #4]
   1af58:	4294      	cmp	r4, r2
   1af5a:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   1af5e:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   1af62:	d92d      	bls.n	1afc0 <nrf_mem_register+0x218>
   1af64:	429c      	cmp	r4, r3
   1af66:	d22d      	bcs.n	1afc4 <nrf_mem_register+0x21c>
   1af68:	428c      	cmp	r4, r1
   1af6a:	d924      	bls.n	1afb6 <nrf_mem_register+0x20e>
   1af6c:	1c46      	adds	r6, r0, #1
   1af6e:	45b2      	cmp	sl, r6
   1af70:	d2c1      	bcs.n	1aef6 <nrf_mem_register+0x14e>
   1af72:	2610      	movs	r6, #16
   1af74:	9d04      	ldr	r5, [sp, #16]
   1af76:	9a02      	ldr	r2, [sp, #8]
   1af78:	42b2      	cmp	r2, r6
   1af7a:	d911      	bls.n	1afa0 <nrf_mem_register+0x1f8>
   1af7c:	9b00      	ldr	r3, [sp, #0]
   1af7e:	443b      	add	r3, r7
   1af80:	441a      	add	r2, r3
   1af82:	4433      	add	r3, r6
   1af84:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   1af88:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   1af8c:	2208      	movs	r2, #8
   1af8e:	4651      	mov	r1, sl
   1af90:	eb0a 0002 	add.w	r0, sl, r2
   1af94:	f1aa 0a08 	sub.w	sl, sl, #8
   1af98:	f003 fc7d 	bl	1e896 <memcpy>
   1af9c:	45d1      	cmp	r9, sl
   1af9e:	d1f5      	bne.n	1af8c <nrf_mem_register+0x1e4>
   1afa0:	9b00      	ldr	r3, [sp, #0]
   1afa2:	9903      	ldr	r1, [sp, #12]
   1afa4:	443b      	add	r3, r7
   1afa6:	4433      	add	r3, r6
   1afa8:	3301      	adds	r3, #1
   1afaa:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1afae:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   1afb2:	6055      	str	r5, [r2, #4]
   1afb4:	e776      	b.n	1aea4 <nrf_mem_register+0xfc>
   1afb6:	f100 3aff 	add.w	sl, r0, #4294967295
   1afba:	4556      	cmp	r6, sl
   1afbc:	d99b      	bls.n	1aef6 <nrf_mem_register+0x14e>
   1afbe:	e7d8      	b.n	1af72 <nrf_mem_register+0x1ca>
   1afc0:	9d04      	ldr	r5, [sp, #16]
   1afc2:	e7d8      	b.n	1af76 <nrf_mem_register+0x1ce>
   1afc4:	9d04      	ldr	r5, [sp, #16]
   1afc6:	f10a 0601 	add.w	r6, sl, #1
   1afca:	e7d4      	b.n	1af76 <nrf_mem_register+0x1ce>
   1afcc:	200236c6 	.word	0x200236c6
   1afd0:	20020ed0 	.word	0x20020ed0
   1afd4:	20020ed4 	.word	0x20020ed4
   1afd8:	20020f10 	.word	0x20020f10

0001afdc <nrf_malloc>:
   1afdc:	4b03      	ldr	r3, [pc, #12]	; (1afec <nrf_malloc+0x10>)
   1afde:	781b      	ldrb	r3, [r3, #0]
   1afe0:	b10b      	cbz	r3, 1afe6 <nrf_malloc+0xa>
   1afe2:	f7ff bd8d 	b.w	1ab00 <mem_alloc.constprop.4>
   1afe6:	4618      	mov	r0, r3
   1afe8:	4770      	bx	lr
   1afea:	bf00      	nop
   1afec:	200236c6 	.word	0x200236c6

0001aff0 <nrf_free>:
   1aff0:	4b04      	ldr	r3, [pc, #16]	; (1b004 <nrf_free+0x14>)
   1aff2:	781b      	ldrb	r3, [r3, #0]
   1aff4:	b123      	cbz	r3, 1b000 <nrf_free+0x10>
   1aff6:	b118      	cbz	r0, 1b000 <nrf_free+0x10>
   1aff8:	4601      	mov	r1, r0
   1affa:	2000      	movs	r0, #0
   1affc:	f7ff bc30 	b.w	1a860 <mem_free>
   1b000:	4770      	bx	lr
   1b002:	bf00      	nop
   1b004:	200236c6 	.word	0x200236c6

0001b008 <nrf_realloc>:
   1b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b00c:	4b52      	ldr	r3, [pc, #328]	; (1b158 <nrf_realloc+0x150>)
   1b00e:	b087      	sub	sp, #28
   1b010:	781b      	ldrb	r3, [r3, #0]
   1b012:	b173      	cbz	r3, 1b032 <nrf_realloc+0x2a>
   1b014:	b168      	cbz	r0, 1b032 <nrf_realloc+0x2a>
   1b016:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1b01a:	f8df a148 	ldr.w	sl, [pc, #328]	; 1b164 <nrf_realloc+0x15c>
   1b01e:	f8da 3000 	ldr.w	r3, [sl]
   1b022:	b10b      	cbz	r3, 1b028 <nrf_realloc+0x20>
   1b024:	781a      	ldrb	r2, [r3, #0]
   1b026:	b14a      	cbz	r2, 1b03c <nrf_realloc+0x34>
   1b028:	4b4c      	ldr	r3, [pc, #304]	; (1b15c <nrf_realloc+0x154>)
   1b02a:	f10a 0a0c 	add.w	sl, sl, #12
   1b02e:	4553      	cmp	r3, sl
   1b030:	d1f5      	bne.n	1b01e <nrf_realloc+0x16>
   1b032:	2400      	movs	r4, #0
   1b034:	4620      	mov	r0, r4
   1b036:	b007      	add	sp, #28
   1b038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b03c:	e9da 9201 	ldrd	r9, r2, [sl, #4]
   1b040:	444a      	add	r2, r9
   1b042:	4591      	cmp	r9, r2
   1b044:	9200      	str	r2, [sp, #0]
   1b046:	d2ef      	bcs.n	1b028 <nrf_realloc+0x20>
   1b048:	685a      	ldr	r2, [r3, #4]
   1b04a:	f8cd a00c 	str.w	sl, [sp, #12]
   1b04e:	46cb      	mov	fp, r9
   1b050:	4692      	mov	sl, r2
   1b052:	f8d3 8010 	ldr.w	r8, [r3, #16]
   1b056:	899f      	ldrh	r7, [r3, #12]
   1b058:	ebab 0e09 	sub.w	lr, fp, r9
   1b05c:	b1d7      	cbz	r7, 1b094 <nrf_realloc+0x8c>
   1b05e:	f8b8 c002 	ldrh.w	ip, [r8, #2]
   1b062:	45e6      	cmp	lr, ip
   1b064:	4662      	mov	r2, ip
   1b066:	d31d      	bcc.n	1b0a4 <nrf_realloc+0x9c>
   1b068:	4654      	mov	r4, sl
   1b06a:	4671      	mov	r1, lr
   1b06c:	4665      	mov	r5, ip
   1b06e:	2000      	movs	r0, #0
   1b070:	f108 0304 	add.w	r3, r8, #4
   1b074:	e004      	b.n	1b080 <nrf_realloc+0x78>
   1b076:	885a      	ldrh	r2, [r3, #2]
   1b078:	3304      	adds	r3, #4
   1b07a:	428a      	cmp	r2, r1
   1b07c:	4615      	mov	r5, r2
   1b07e:	d814      	bhi.n	1b0aa <nrf_realloc+0xa2>
   1b080:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   1b084:	3001      	adds	r0, #1
   1b086:	4287      	cmp	r7, r0
   1b088:	fb02 4406 	mla	r4, r2, r6, r4
   1b08c:	eba1 0105 	sub.w	r1, r1, r5
   1b090:	461e      	mov	r6, r3
   1b092:	d1f0      	bne.n	1b076 <nrf_realloc+0x6e>
   1b094:	9b00      	ldr	r3, [sp, #0]
   1b096:	f10b 0b01 	add.w	fp, fp, #1
   1b09a:	455b      	cmp	r3, fp
   1b09c:	d1dc      	bne.n	1b058 <nrf_realloc+0x50>
   1b09e:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1b0a2:	e7c1      	b.n	1b028 <nrf_realloc+0x20>
   1b0a4:	4654      	mov	r4, sl
   1b0a6:	4671      	mov	r1, lr
   1b0a8:	4646      	mov	r6, r8
   1b0aa:	8833      	ldrh	r3, [r6, #0]
   1b0ac:	fb01 4103 	mla	r1, r1, r3, r4
   1b0b0:	9b01      	ldr	r3, [sp, #4]
   1b0b2:	428b      	cmp	r3, r1
   1b0b4:	d1ee      	bne.n	1b094 <nrf_realloc+0x8c>
   1b0b6:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   1b0ba:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1b0be:	d0b3      	beq.n	1b028 <nrf_realloc+0x20>
   1b0c0:	45e6      	cmp	lr, ip
   1b0c2:	d334      	bcc.n	1b12e <nrf_realloc+0x126>
   1b0c4:	2200      	movs	r2, #0
   1b0c6:	f108 0304 	add.w	r3, r8, #4
   1b0ca:	e006      	b.n	1b0da <nrf_realloc+0xd2>
   1b0cc:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   1b0d0:	4698      	mov	r8, r3
   1b0d2:	45f4      	cmp	ip, lr
   1b0d4:	f103 0304 	add.w	r3, r3, #4
   1b0d8:	d829      	bhi.n	1b12e <nrf_realloc+0x126>
   1b0da:	3201      	adds	r2, #1
   1b0dc:	42ba      	cmp	r2, r7
   1b0de:	ebae 0e0c 	sub.w	lr, lr, ip
   1b0e2:	d1f3      	bne.n	1b0cc <nrf_realloc+0xc4>
   1b0e4:	2300      	movs	r3, #0
   1b0e6:	9a02      	ldr	r2, [sp, #8]
   1b0e8:	429a      	cmp	r2, r3
   1b0ea:	d923      	bls.n	1b134 <nrf_realloc+0x12c>
   1b0ec:	4610      	mov	r0, r2
   1b0ee:	f7ff fd07 	bl	1ab00 <mem_alloc.constprop.4>
   1b0f2:	4604      	mov	r4, r0
   1b0f4:	2800      	cmp	r0, #0
   1b0f6:	d097      	beq.n	1b028 <nrf_realloc+0x20>
   1b0f8:	e9dd 1501 	ldrd	r1, r5, [sp, #4]
   1b0fc:	462a      	mov	r2, r5
   1b0fe:	f003 fbca 	bl	1e896 <memcpy>
   1b102:	462b      	mov	r3, r5
   1b104:	2201      	movs	r2, #1
   1b106:	3303      	adds	r3, #3
   1b108:	4915      	ldr	r1, [pc, #84]	; (1b160 <nrf_realloc+0x158>)
   1b10a:	4423      	add	r3, r4
   1b10c:	f023 0303 	bic.w	r3, r3, #3
   1b110:	ea4f 105b 	mov.w	r0, fp, lsr #5
   1b114:	681e      	ldr	r6, [r3, #0]
   1b116:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
   1b11a:	f00b 031f 	and.w	r3, fp, #31
   1b11e:	fa02 f303 	lsl.w	r3, r2, r3
   1b122:	9605      	str	r6, [sp, #20]
   1b124:	432b      	orrs	r3, r5
   1b126:	9a05      	ldr	r2, [sp, #20]
   1b128:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   1b12c:	e782      	b.n	1b034 <nrf_realloc+0x2c>
   1b12e:	f8b8 3000 	ldrh.w	r3, [r8]
   1b132:	e7d8      	b.n	1b0e6 <nrf_realloc+0xde>
   1b134:	4615      	mov	r5, r2
   1b136:	b96a      	cbnz	r2, 1b154 <nrf_realloc+0x14c>
   1b138:	2301      	movs	r3, #1
   1b13a:	4a09      	ldr	r2, [pc, #36]	; (1b160 <nrf_realloc+0x158>)
   1b13c:	ea4f 115b 	mov.w	r1, fp, lsr #5
   1b140:	f00b 041f 	and.w	r4, fp, #31
   1b144:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1b148:	40a3      	lsls	r3, r4
   1b14a:	4303      	orrs	r3, r0
   1b14c:	462c      	mov	r4, r5
   1b14e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   1b152:	e76f      	b.n	1b034 <nrf_realloc+0x2c>
   1b154:	9c01      	ldr	r4, [sp, #4]
   1b156:	e76d      	b.n	1b034 <nrf_realloc+0x2c>
   1b158:	200236c6 	.word	0x200236c6
   1b15c:	20020f10 	.word	0x20020f10
   1b160:	20020e90 	.word	0x20020e90
   1b164:	20020ed4 	.word	0x20020ed4

0001b168 <nrf_shared_malloc>:
   1b168:	4b03      	ldr	r3, [pc, #12]	; (1b178 <nrf_shared_malloc+0x10>)
   1b16a:	781b      	ldrb	r3, [r3, #0]
   1b16c:	b10b      	cbz	r3, 1b172 <nrf_shared_malloc+0xa>
   1b16e:	f7ff bbe3 	b.w	1a938 <mem_alloc.constprop.5>
   1b172:	4618      	mov	r0, r3
   1b174:	4770      	bx	lr
   1b176:	bf00      	nop
   1b178:	200236c6 	.word	0x200236c6

0001b17c <nrf_shared_free>:
   1b17c:	4b04      	ldr	r3, [pc, #16]	; (1b190 <nrf_shared_free+0x14>)
   1b17e:	781b      	ldrb	r3, [r3, #0]
   1b180:	b123      	cbz	r3, 1b18c <nrf_shared_free+0x10>
   1b182:	b118      	cbz	r0, 1b18c <nrf_shared_free+0x10>
   1b184:	4601      	mov	r1, r0
   1b186:	2001      	movs	r0, #1
   1b188:	f7ff bb6a 	b.w	1a860 <mem_free>
   1b18c:	4770      	bx	lr
   1b18e:	bf00      	nop
   1b190:	200236c6 	.word	0x200236c6

0001b194 <rpc_dfu_event_handler>:
   1b194:	b508      	push	{r3, lr}
   1b196:	4a08      	ldr	r2, [pc, #32]	; (1b1b8 <rpc_dfu_event_handler+0x24>)
   1b198:	68c1      	ldr	r1, [r0, #12]
   1b19a:	8812      	ldrh	r2, [r2, #0]
   1b19c:	4603      	mov	r3, r0
   1b19e:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   1b1a2:	d005      	beq.n	1b1b0 <rpc_dfu_event_handler+0x1c>
   1b1a4:	6800      	ldr	r0, [r0, #0]
   1b1a6:	b110      	cbz	r0, 1b1ae <rpc_dfu_event_handler+0x1a>
   1b1a8:	f7fd f96a 	bl	18480 <rpc_dfu_client_data_free>
   1b1ac:	2000      	movs	r0, #0
   1b1ae:	bd08      	pop	{r3, pc}
   1b1b0:	4a02      	ldr	r2, [pc, #8]	; (1b1bc <rpc_dfu_event_handler+0x28>)
   1b1b2:	2001      	movs	r0, #1
   1b1b4:	6013      	str	r3, [r2, #0]
   1b1b6:	bd08      	pop	{r3, pc}
   1b1b8:	200219d8 	.word	0x200219d8
   1b1bc:	2002102c 	.word	0x2002102c

0001b1c0 <mfu_interface_init>:
   1b1c0:	2300      	movs	r3, #0
   1b1c2:	b510      	push	{r4, lr}
   1b1c4:	4808      	ldr	r0, [pc, #32]	; (1b1e8 <mfu_interface_init+0x28>)
   1b1c6:	4909      	ldr	r1, [pc, #36]	; (1b1ec <mfu_interface_init+0x2c>)
   1b1c8:	4a09      	ldr	r2, [pc, #36]	; (1b1f0 <mfu_interface_init+0x30>)
   1b1ca:	4c0a      	ldr	r4, [pc, #40]	; (1b1f4 <mfu_interface_init+0x34>)
   1b1cc:	8003      	strh	r3, [r0, #0]
   1b1ce:	600b      	str	r3, [r1, #0]
   1b1d0:	6013      	str	r3, [r2, #0]
   1b1d2:	6023      	str	r3, [r4, #0]
   1b1d4:	f7fd f91e 	bl	18414 <rpc_dfu_client_init>
   1b1d8:	b910      	cbnz	r0, 1b1e0 <mfu_interface_init+0x20>
   1b1da:	2301      	movs	r3, #1
   1b1dc:	6023      	str	r3, [r4, #0]
   1b1de:	bd10      	pop	{r4, pc}
   1b1e0:	f04f 30ff 	mov.w	r0, #4294967295
   1b1e4:	bd10      	pop	{r4, pc}
   1b1e6:	bf00      	nop
   1b1e8:	200219d8 	.word	0x200219d8
   1b1ec:	2002102c 	.word	0x2002102c
   1b1f0:	20021028 	.word	0x20021028
   1b1f4:	20021020 	.word	0x20021020

0001b1f8 <mfu_interface_open>:
   1b1f8:	b508      	push	{r3, lr}
   1b1fa:	4b07      	ldr	r3, [pc, #28]	; (1b218 <mfu_interface_open+0x20>)
   1b1fc:	681a      	ldr	r2, [r3, #0]
   1b1fe:	2a01      	cmp	r2, #1
   1b200:	d103      	bne.n	1b20a <mfu_interface_open+0x12>
   1b202:	2202      	movs	r2, #2
   1b204:	601a      	str	r2, [r3, #0]
   1b206:	4805      	ldr	r0, [pc, #20]	; (1b21c <mfu_interface_open+0x24>)
   1b208:	bd08      	pop	{r3, pc}
   1b20a:	2001      	movs	r0, #1
   1b20c:	f7f6 f92c 	bl	11468 <bsd_os_errno_set>
   1b210:	f04f 30ff 	mov.w	r0, #4294967295
   1b214:	bd08      	pop	{r3, pc}
   1b216:	bf00      	nop
   1b218:	20021020 	.word	0x20021020
   1b21c:	49765432 	.word	0x49765432

0001b220 <mfu_interface_close>:
   1b220:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b222:	4c32      	ldr	r4, [pc, #200]	; (1b2ec <mfu_interface_close+0xcc>)
   1b224:	b083      	sub	sp, #12
   1b226:	6823      	ldr	r3, [r4, #0]
   1b228:	1e9a      	subs	r2, r3, #2
   1b22a:	2a01      	cmp	r2, #1
   1b22c:	d857      	bhi.n	1b2de <mfu_interface_close+0xbe>
   1b22e:	2b03      	cmp	r3, #3
   1b230:	d004      	beq.n	1b23c <mfu_interface_close+0x1c>
   1b232:	2301      	movs	r3, #1
   1b234:	2000      	movs	r0, #0
   1b236:	6023      	str	r3, [r4, #0]
   1b238:	b003      	add	sp, #12
   1b23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b23c:	2100      	movs	r1, #0
   1b23e:	4668      	mov	r0, sp
   1b240:	f7fd f8ee 	bl	18420 <rpc_dfu_client_request_alloc>
   1b244:	4603      	mov	r3, r0
   1b246:	2800      	cmp	r0, #0
   1b248:	d13d      	bne.n	1b2c6 <mfu_interface_close+0xa6>
   1b24a:	2104      	movs	r1, #4
   1b24c:	4e28      	ldr	r6, [pc, #160]	; (1b2f0 <mfu_interface_close+0xd0>)
   1b24e:	9800      	ldr	r0, [sp, #0]
   1b250:	8832      	ldrh	r2, [r6, #0]
   1b252:	7201      	strb	r1, [r0, #8]
   1b254:	3201      	adds	r2, #1
   1b256:	b292      	uxth	r2, r2
   1b258:	0411      	lsls	r1, r2, #16
   1b25a:	f041 0106 	orr.w	r1, r1, #6
   1b25e:	4d25      	ldr	r5, [pc, #148]	; (1b2f4 <mfu_interface_close+0xd4>)
   1b260:	60c1      	str	r1, [r0, #12]
   1b262:	7103      	strb	r3, [r0, #4]
   1b264:	7143      	strb	r3, [r0, #5]
   1b266:	7183      	strb	r3, [r0, #6]
   1b268:	71c3      	strb	r3, [r0, #7]
   1b26a:	7243      	strb	r3, [r0, #9]
   1b26c:	7283      	strb	r3, [r0, #10]
   1b26e:	72c3      	strb	r3, [r0, #11]
   1b270:	2106      	movs	r1, #6
   1b272:	8032      	strh	r2, [r6, #0]
   1b274:	602b      	str	r3, [r5, #0]
   1b276:	f7fd f8e7 	bl	18448 <rpc_dfu_client_request_send>
   1b27a:	b9d8      	cbnz	r0, 1b2b4 <mfu_interface_close+0x94>
   1b27c:	f04f 33ff 	mov.w	r3, #4294967295
   1b280:	ae02      	add	r6, sp, #8
   1b282:	4627      	mov	r7, r4
   1b284:	f846 3d04 	str.w	r3, [r6, #-4]!
   1b288:	e004      	b.n	1b294 <mfu_interface_close+0x74>
   1b28a:	4631      	mov	r1, r6
   1b28c:	4638      	mov	r0, r7
   1b28e:	f7f6 f833 	bl	112f8 <bsd_os_timedwait>
   1b292:	b9f0      	cbnz	r0, 1b2d2 <mfu_interface_close+0xb2>
   1b294:	6828      	ldr	r0, [r5, #0]
   1b296:	2800      	cmp	r0, #0
   1b298:	d0f7      	beq.n	1b28a <mfu_interface_close+0x6a>
   1b29a:	6905      	ldr	r5, [r0, #16]
   1b29c:	f7fd f8e8 	bl	18470 <rpc_dfu_client_message_free>
   1b2a0:	2d00      	cmp	r5, #0
   1b2a2:	d0c6      	beq.n	1b232 <mfu_interface_close+0x12>
   1b2a4:	4b14      	ldr	r3, [pc, #80]	; (1b2f8 <mfu_interface_close+0xd8>)
   1b2a6:	2008      	movs	r0, #8
   1b2a8:	601d      	str	r5, [r3, #0]
   1b2aa:	f7f6 f8dd 	bl	11468 <bsd_os_errno_set>
   1b2ae:	f04f 30ff 	mov.w	r0, #4294967295
   1b2b2:	e7c1      	b.n	1b238 <mfu_interface_close+0x18>
   1b2b4:	9800      	ldr	r0, [sp, #0]
   1b2b6:	6803      	ldr	r3, [r0, #0]
   1b2b8:	b11b      	cbz	r3, 1b2c2 <mfu_interface_close+0xa2>
   1b2ba:	4618      	mov	r0, r3
   1b2bc:	f7fd f8e0 	bl	18480 <rpc_dfu_client_data_free>
   1b2c0:	9800      	ldr	r0, [sp, #0]
   1b2c2:	f7fd f8d5 	bl	18470 <rpc_dfu_client_message_free>
   1b2c6:	200c      	movs	r0, #12
   1b2c8:	f7f6 f8ce 	bl	11468 <bsd_os_errno_set>
   1b2cc:	f04f 30ff 	mov.w	r0, #4294967295
   1b2d0:	e7b2      	b.n	1b238 <mfu_interface_close+0x18>
   1b2d2:	203c      	movs	r0, #60	; 0x3c
   1b2d4:	f7f6 f8c8 	bl	11468 <bsd_os_errno_set>
   1b2d8:	f04f 30ff 	mov.w	r0, #4294967295
   1b2dc:	e7ac      	b.n	1b238 <mfu_interface_close+0x18>
   1b2de:	2001      	movs	r0, #1
   1b2e0:	f7f6 f8c2 	bl	11468 <bsd_os_errno_set>
   1b2e4:	f04f 30ff 	mov.w	r0, #4294967295
   1b2e8:	e7a6      	b.n	1b238 <mfu_interface_close+0x18>
   1b2ea:	bf00      	nop
   1b2ec:	20021020 	.word	0x20021020
   1b2f0:	200219d8 	.word	0x200219d8
   1b2f4:	2002102c 	.word	0x2002102c
   1b2f8:	20021024 	.word	0x20021024

0001b2fc <mfu_interface_sendto>:
   1b2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b300:	4e64      	ldr	r6, [pc, #400]	; (1b494 <mfu_interface_sendto+0x198>)
   1b302:	460f      	mov	r7, r1
   1b304:	6831      	ldr	r1, [r6, #0]
   1b306:	4615      	mov	r5, r2
   1b308:	1e8a      	subs	r2, r1, #2
   1b30a:	2a01      	cmp	r2, #1
   1b30c:	b082      	sub	sp, #8
   1b30e:	f200 80b4 	bhi.w	1b47a <mfu_interface_sendto+0x17e>
   1b312:	2f00      	cmp	r7, #0
   1b314:	f000 80a5 	beq.w	1b462 <mfu_interface_sendto+0x166>
   1b318:	2d00      	cmp	r5, #0
   1b31a:	f000 80a2 	beq.w	1b462 <mfu_interface_sendto+0x166>
   1b31e:	2b00      	cmp	r3, #0
   1b320:	f040 80b1 	bne.w	1b486 <mfu_interface_sendto+0x18a>
   1b324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b326:	2b00      	cmp	r3, #0
   1b328:	f040 80a1 	bne.w	1b46e <mfu_interface_sendto+0x172>
   1b32c:	2902      	cmp	r1, #2
   1b32e:	d04f      	beq.n	1b3d0 <mfu_interface_sendto+0xd4>
   1b330:	46e8      	mov	r8, sp
   1b332:	4640      	mov	r0, r8
   1b334:	4629      	mov	r1, r5
   1b336:	f7fd f873 	bl	18420 <rpc_dfu_client_request_alloc>
   1b33a:	4606      	mov	r6, r0
   1b33c:	b140      	cbz	r0, 1b350 <mfu_interface_sendto+0x54>
   1b33e:	200c      	movs	r0, #12
   1b340:	f7f6 f892 	bl	11468 <bsd_os_errno_set>
   1b344:	f04f 35ff 	mov.w	r5, #4294967295
   1b348:	4628      	mov	r0, r5
   1b34a:	b002      	add	sp, #8
   1b34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b350:	9b00      	ldr	r3, [sp, #0]
   1b352:	4639      	mov	r1, r7
   1b354:	6818      	ldr	r0, [r3, #0]
   1b356:	462a      	mov	r2, r5
   1b358:	f003 fa9d 	bl	1e896 <memcpy>
   1b35c:	2104      	movs	r1, #4
   1b35e:	4c4e      	ldr	r4, [pc, #312]	; (1b498 <mfu_interface_sendto+0x19c>)
   1b360:	9800      	ldr	r0, [sp, #0]
   1b362:	8823      	ldrh	r3, [r4, #0]
   1b364:	6045      	str	r5, [r0, #4]
   1b366:	3301      	adds	r3, #1
   1b368:	b29b      	uxth	r3, r3
   1b36a:	041a      	lsls	r2, r3, #16
   1b36c:	8023      	strh	r3, [r4, #0]
   1b36e:	430a      	orrs	r2, r1
   1b370:	4c4a      	ldr	r4, [pc, #296]	; (1b49c <mfu_interface_sendto+0x1a0>)
   1b372:	60c2      	str	r2, [r0, #12]
   1b374:	7246      	strb	r6, [r0, #9]
   1b376:	7286      	strb	r6, [r0, #10]
   1b378:	72c6      	strb	r6, [r0, #11]
   1b37a:	7201      	strb	r1, [r0, #8]
   1b37c:	6026      	str	r6, [r4, #0]
   1b37e:	f7fd f863 	bl	18448 <rpc_dfu_client_request_send>
   1b382:	2800      	cmp	r0, #0
   1b384:	d163      	bne.n	1b44e <mfu_interface_sendto+0x152>
   1b386:	f04f 33ff 	mov.w	r3, #4294967295
   1b38a:	ae02      	add	r6, sp, #8
   1b38c:	4f41      	ldr	r7, [pc, #260]	; (1b494 <mfu_interface_sendto+0x198>)
   1b38e:	f846 3d04 	str.w	r3, [r6, #-4]!
   1b392:	e004      	b.n	1b39e <mfu_interface_sendto+0xa2>
   1b394:	4631      	mov	r1, r6
   1b396:	4638      	mov	r0, r7
   1b398:	f7f5 ffae 	bl	112f8 <bsd_os_timedwait>
   1b39c:	b978      	cbnz	r0, 1b3be <mfu_interface_sendto+0xc2>
   1b39e:	6820      	ldr	r0, [r4, #0]
   1b3a0:	2800      	cmp	r0, #0
   1b3a2:	d0f7      	beq.n	1b394 <mfu_interface_sendto+0x98>
   1b3a4:	6904      	ldr	r4, [r0, #16]
   1b3a6:	f7fd f863 	bl	18470 <rpc_dfu_client_message_free>
   1b3aa:	2c00      	cmp	r4, #0
   1b3ac:	d0cc      	beq.n	1b348 <mfu_interface_sendto+0x4c>
   1b3ae:	4b3c      	ldr	r3, [pc, #240]	; (1b4a0 <mfu_interface_sendto+0x1a4>)
   1b3b0:	2008      	movs	r0, #8
   1b3b2:	601c      	str	r4, [r3, #0]
   1b3b4:	f04f 35ff 	mov.w	r5, #4294967295
   1b3b8:	f7f6 f856 	bl	11468 <bsd_os_errno_set>
   1b3bc:	e7c4      	b.n	1b348 <mfu_interface_sendto+0x4c>
   1b3be:	f04f 35ff 	mov.w	r5, #4294967295
   1b3c2:	203c      	movs	r0, #60	; 0x3c
   1b3c4:	f7f6 f850 	bl	11468 <bsd_os_errno_set>
   1b3c8:	4628      	mov	r0, r5
   1b3ca:	b002      	add	sp, #8
   1b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b3d0:	46e8      	mov	r8, sp
   1b3d2:	4619      	mov	r1, r3
   1b3d4:	4640      	mov	r0, r8
   1b3d6:	f7fd f823 	bl	18420 <rpc_dfu_client_request_alloc>
   1b3da:	4602      	mov	r2, r0
   1b3dc:	2800      	cmp	r0, #0
   1b3de:	d1ae      	bne.n	1b33e <mfu_interface_sendto+0x42>
   1b3e0:	f04f 0c08 	mov.w	ip, #8
   1b3e4:	492c      	ldr	r1, [pc, #176]	; (1b498 <mfu_interface_sendto+0x19c>)
   1b3e6:	482f      	ldr	r0, [pc, #188]	; (1b4a4 <mfu_interface_sendto+0x1a8>)
   1b3e8:	880b      	ldrh	r3, [r1, #0]
   1b3ea:	6804      	ldr	r4, [r0, #0]
   1b3ec:	3301      	adds	r3, #1
   1b3ee:	9800      	ldr	r0, [sp, #0]
   1b3f0:	b29b      	uxth	r3, r3
   1b3f2:	800b      	strh	r3, [r1, #0]
   1b3f4:	041b      	lsls	r3, r3, #16
   1b3f6:	f043 0303 	orr.w	r3, r3, #3
   1b3fa:	6104      	str	r4, [r0, #16]
   1b3fc:	4c27      	ldr	r4, [pc, #156]	; (1b49c <mfu_interface_sendto+0x1a0>)
   1b3fe:	60c3      	str	r3, [r0, #12]
   1b400:	7102      	strb	r2, [r0, #4]
   1b402:	7142      	strb	r2, [r0, #5]
   1b404:	7182      	strb	r2, [r0, #6]
   1b406:	71c2      	strb	r2, [r0, #7]
   1b408:	7242      	strb	r2, [r0, #9]
   1b40a:	7282      	strb	r2, [r0, #10]
   1b40c:	72c2      	strb	r2, [r0, #11]
   1b40e:	f880 c008 	strb.w	ip, [r0, #8]
   1b412:	2103      	movs	r1, #3
   1b414:	6022      	str	r2, [r4, #0]
   1b416:	f7fd f817 	bl	18448 <rpc_dfu_client_request_send>
   1b41a:	b9c0      	cbnz	r0, 1b44e <mfu_interface_sendto+0x152>
   1b41c:	f04f 33ff 	mov.w	r3, #4294967295
   1b420:	f10d 0908 	add.w	r9, sp, #8
   1b424:	f849 3d04 	str.w	r3, [r9, #-4]!
   1b428:	46b2      	mov	sl, r6
   1b42a:	e005      	b.n	1b438 <mfu_interface_sendto+0x13c>
   1b42c:	4649      	mov	r1, r9
   1b42e:	4650      	mov	r0, sl
   1b430:	f7f5 ff62 	bl	112f8 <bsd_os_timedwait>
   1b434:	2800      	cmp	r0, #0
   1b436:	d1c2      	bne.n	1b3be <mfu_interface_sendto+0xc2>
   1b438:	6820      	ldr	r0, [r4, #0]
   1b43a:	2800      	cmp	r0, #0
   1b43c:	d0f6      	beq.n	1b42c <mfu_interface_sendto+0x130>
   1b43e:	6904      	ldr	r4, [r0, #16]
   1b440:	f7fd f816 	bl	18470 <rpc_dfu_client_message_free>
   1b444:	2c00      	cmp	r4, #0
   1b446:	d1b2      	bne.n	1b3ae <mfu_interface_sendto+0xb2>
   1b448:	2303      	movs	r3, #3
   1b44a:	6033      	str	r3, [r6, #0]
   1b44c:	e771      	b.n	1b332 <mfu_interface_sendto+0x36>
   1b44e:	9800      	ldr	r0, [sp, #0]
   1b450:	6803      	ldr	r3, [r0, #0]
   1b452:	b11b      	cbz	r3, 1b45c <mfu_interface_sendto+0x160>
   1b454:	4618      	mov	r0, r3
   1b456:	f7fd f813 	bl	18480 <rpc_dfu_client_data_free>
   1b45a:	9800      	ldr	r0, [sp, #0]
   1b45c:	f7fd f808 	bl	18470 <rpc_dfu_client_message_free>
   1b460:	e76d      	b.n	1b33e <mfu_interface_sendto+0x42>
   1b462:	2016      	movs	r0, #22
   1b464:	f7f6 f800 	bl	11468 <bsd_os_errno_set>
   1b468:	f04f 35ff 	mov.w	r5, #4294967295
   1b46c:	e76c      	b.n	1b348 <mfu_interface_sendto+0x4c>
   1b46e:	2038      	movs	r0, #56	; 0x38
   1b470:	f7f5 fffa 	bl	11468 <bsd_os_errno_set>
   1b474:	f04f 35ff 	mov.w	r5, #4294967295
   1b478:	e766      	b.n	1b348 <mfu_interface_sendto+0x4c>
   1b47a:	2001      	movs	r0, #1
   1b47c:	f7f5 fff4 	bl	11468 <bsd_os_errno_set>
   1b480:	f04f 35ff 	mov.w	r5, #4294967295
   1b484:	e760      	b.n	1b348 <mfu_interface_sendto+0x4c>
   1b486:	202d      	movs	r0, #45	; 0x2d
   1b488:	f7f5 ffee 	bl	11468 <bsd_os_errno_set>
   1b48c:	f04f 35ff 	mov.w	r5, #4294967295
   1b490:	e75a      	b.n	1b348 <mfu_interface_sendto+0x4c>
   1b492:	bf00      	nop
   1b494:	20021020 	.word	0x20021020
   1b498:	200219d8 	.word	0x200219d8
   1b49c:	2002102c 	.word	0x2002102c
   1b4a0:	20021024 	.word	0x20021024
   1b4a4:	20021028 	.word	0x20021028

0001b4a8 <mfu_interface_setopt>:
   1b4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b4aa:	4846      	ldr	r0, [pc, #280]	; (1b5c4 <mfu_interface_setopt+0x11c>)
   1b4ac:	b083      	sub	sp, #12
   1b4ae:	6800      	ldr	r0, [r0, #0]
   1b4b0:	3802      	subs	r0, #2
   1b4b2:	2801      	cmp	r0, #1
   1b4b4:	d877      	bhi.n	1b5a6 <mfu_interface_setopt+0xfe>
   1b4b6:	f240 2003 	movw	r0, #515	; 0x203
   1b4ba:	4281      	cmp	r1, r0
   1b4bc:	d16d      	bne.n	1b59a <mfu_interface_setopt+0xf2>
   1b4be:	3a04      	subs	r2, #4
   1b4c0:	2a03      	cmp	r2, #3
   1b4c2:	d85c      	bhi.n	1b57e <mfu_interface_setopt+0xd6>
   1b4c4:	e8df f002 	tbb	[pc, r2]
   1b4c8:	514e024b 	.word	0x514e024b
   1b4cc:	2407      	movs	r4, #7
   1b4ce:	4625      	mov	r5, r4
   1b4d0:	2100      	movs	r1, #0
   1b4d2:	4668      	mov	r0, sp
   1b4d4:	f7fc ffa4 	bl	18420 <rpc_dfu_client_request_alloc>
   1b4d8:	4603      	mov	r3, r0
   1b4da:	2800      	cmp	r0, #0
   1b4dc:	d138      	bne.n	1b550 <mfu_interface_setopt+0xa8>
   1b4de:	2704      	movs	r7, #4
   1b4e0:	4e39      	ldr	r6, [pc, #228]	; (1b5c8 <mfu_interface_setopt+0x120>)
   1b4e2:	9800      	ldr	r0, [sp, #0]
   1b4e4:	8832      	ldrh	r2, [r6, #0]
   1b4e6:	4629      	mov	r1, r5
   1b4e8:	3201      	adds	r2, #1
   1b4ea:	b292      	uxth	r2, r2
   1b4ec:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   1b4f0:	4c36      	ldr	r4, [pc, #216]	; (1b5cc <mfu_interface_setopt+0x124>)
   1b4f2:	60c5      	str	r5, [r0, #12]
   1b4f4:	7103      	strb	r3, [r0, #4]
   1b4f6:	7143      	strb	r3, [r0, #5]
   1b4f8:	7183      	strb	r3, [r0, #6]
   1b4fa:	71c3      	strb	r3, [r0, #7]
   1b4fc:	7243      	strb	r3, [r0, #9]
   1b4fe:	7283      	strb	r3, [r0, #10]
   1b500:	72c3      	strb	r3, [r0, #11]
   1b502:	7207      	strb	r7, [r0, #8]
   1b504:	8032      	strh	r2, [r6, #0]
   1b506:	6023      	str	r3, [r4, #0]
   1b508:	f7fc ff9e 	bl	18448 <rpc_dfu_client_request_send>
   1b50c:	b9b8      	cbnz	r0, 1b53e <mfu_interface_setopt+0x96>
   1b50e:	f04f 33ff 	mov.w	r3, #4294967295
   1b512:	ad02      	add	r5, sp, #8
   1b514:	4e2b      	ldr	r6, [pc, #172]	; (1b5c4 <mfu_interface_setopt+0x11c>)
   1b516:	f845 3d04 	str.w	r3, [r5, #-4]!
   1b51a:	e005      	b.n	1b528 <mfu_interface_setopt+0x80>
   1b51c:	4629      	mov	r1, r5
   1b51e:	4630      	mov	r0, r6
   1b520:	f7f5 feea 	bl	112f8 <bsd_os_timedwait>
   1b524:	2800      	cmp	r0, #0
   1b526:	d131      	bne.n	1b58c <mfu_interface_setopt+0xe4>
   1b528:	6820      	ldr	r0, [r4, #0]
   1b52a:	2800      	cmp	r0, #0
   1b52c:	d0f6      	beq.n	1b51c <mfu_interface_setopt+0x74>
   1b52e:	6904      	ldr	r4, [r0, #16]
   1b530:	f7fc ff9e 	bl	18470 <rpc_dfu_client_message_free>
   1b534:	2c00      	cmp	r4, #0
   1b536:	d13c      	bne.n	1b5b2 <mfu_interface_setopt+0x10a>
   1b538:	4620      	mov	r0, r4
   1b53a:	b003      	add	sp, #12
   1b53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b53e:	9800      	ldr	r0, [sp, #0]
   1b540:	6803      	ldr	r3, [r0, #0]
   1b542:	b11b      	cbz	r3, 1b54c <mfu_interface_setopt+0xa4>
   1b544:	4618      	mov	r0, r3
   1b546:	f7fc ff9b 	bl	18480 <rpc_dfu_client_data_free>
   1b54a:	9800      	ldr	r0, [sp, #0]
   1b54c:	f7fc ff90 	bl	18470 <rpc_dfu_client_message_free>
   1b550:	200c      	movs	r0, #12
   1b552:	f7f5 ff89 	bl	11468 <bsd_os_errno_set>
   1b556:	f04f 30ff 	mov.w	r0, #4294967295
   1b55a:	b003      	add	sp, #12
   1b55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b55e:	2405      	movs	r4, #5
   1b560:	4625      	mov	r5, r4
   1b562:	e7b5      	b.n	1b4d0 <mfu_interface_setopt+0x28>
   1b564:	2408      	movs	r4, #8
   1b566:	4625      	mov	r5, r4
   1b568:	e7b2      	b.n	1b4d0 <mfu_interface_setopt+0x28>
   1b56a:	b1b3      	cbz	r3, 1b59a <mfu_interface_setopt+0xf2>
   1b56c:	9a08      	ldr	r2, [sp, #32]
   1b56e:	2a04      	cmp	r2, #4
   1b570:	d113      	bne.n	1b59a <mfu_interface_setopt+0xf2>
   1b572:	2000      	movs	r0, #0
   1b574:	681a      	ldr	r2, [r3, #0]
   1b576:	4b16      	ldr	r3, [pc, #88]	; (1b5d0 <mfu_interface_setopt+0x128>)
   1b578:	601a      	str	r2, [r3, #0]
   1b57a:	b003      	add	sp, #12
   1b57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b57e:	202a      	movs	r0, #42	; 0x2a
   1b580:	f7f5 ff72 	bl	11468 <bsd_os_errno_set>
   1b584:	f04f 30ff 	mov.w	r0, #4294967295
   1b588:	b003      	add	sp, #12
   1b58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b58c:	203c      	movs	r0, #60	; 0x3c
   1b58e:	f7f5 ff6b 	bl	11468 <bsd_os_errno_set>
   1b592:	f04f 30ff 	mov.w	r0, #4294967295
   1b596:	b003      	add	sp, #12
   1b598:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b59a:	2016      	movs	r0, #22
   1b59c:	f7f5 ff64 	bl	11468 <bsd_os_errno_set>
   1b5a0:	f04f 30ff 	mov.w	r0, #4294967295
   1b5a4:	e7c9      	b.n	1b53a <mfu_interface_setopt+0x92>
   1b5a6:	2001      	movs	r0, #1
   1b5a8:	f7f5 ff5e 	bl	11468 <bsd_os_errno_set>
   1b5ac:	f04f 30ff 	mov.w	r0, #4294967295
   1b5b0:	e7c3      	b.n	1b53a <mfu_interface_setopt+0x92>
   1b5b2:	4b08      	ldr	r3, [pc, #32]	; (1b5d4 <mfu_interface_setopt+0x12c>)
   1b5b4:	2008      	movs	r0, #8
   1b5b6:	601c      	str	r4, [r3, #0]
   1b5b8:	f7f5 ff56 	bl	11468 <bsd_os_errno_set>
   1b5bc:	f04f 30ff 	mov.w	r0, #4294967295
   1b5c0:	e7bb      	b.n	1b53a <mfu_interface_setopt+0x92>
   1b5c2:	bf00      	nop
   1b5c4:	20021020 	.word	0x20021020
   1b5c8:	200219d8 	.word	0x200219d8
   1b5cc:	2002102c 	.word	0x2002102c
   1b5d0:	20021028 	.word	0x20021028
   1b5d4:	20021024 	.word	0x20021024

0001b5d8 <mfu_interface_getopt>:
   1b5d8:	f240 2003 	movw	r0, #515	; 0x203
   1b5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5e0:	4281      	cmp	r1, r0
   1b5e2:	b082      	sub	sp, #8
   1b5e4:	9e08      	ldr	r6, [sp, #32]
   1b5e6:	f040 80ae 	bne.w	1b746 <mfu_interface_getopt+0x16e>
   1b5ea:	461d      	mov	r5, r3
   1b5ec:	2b00      	cmp	r3, #0
   1b5ee:	f000 80aa 	beq.w	1b746 <mfu_interface_getopt+0x16e>
   1b5f2:	2e00      	cmp	r6, #0
   1b5f4:	f000 80a7 	beq.w	1b746 <mfu_interface_getopt+0x16e>
   1b5f8:	4b5e      	ldr	r3, [pc, #376]	; (1b774 <mfu_interface_getopt+0x19c>)
   1b5fa:	681b      	ldr	r3, [r3, #0]
   1b5fc:	3b02      	subs	r3, #2
   1b5fe:	2b01      	cmp	r3, #1
   1b600:	f200 80a7 	bhi.w	1b752 <mfu_interface_getopt+0x17a>
   1b604:	3a01      	subs	r2, #1
   1b606:	2a13      	cmp	r2, #19
   1b608:	d879      	bhi.n	1b6fe <mfu_interface_getopt+0x126>
   1b60a:	e8df f002 	tbb	[pc, r2]
   1b60e:	5f17      	.short	0x5f17
   1b610:	78787878 	.word	0x78787878
   1b614:	78787872 	.word	0x78787872
   1b618:	78787878 	.word	0x78787878
   1b61c:	78787878 	.word	0x78787878
   1b620:	0a78      	.short	0x0a78
   1b622:	6833      	ldr	r3, [r6, #0]
   1b624:	2b04      	cmp	r3, #4
   1b626:	f040 808e 	bne.w	1b746 <mfu_interface_getopt+0x16e>
   1b62a:	2200      	movs	r2, #0
   1b62c:	4610      	mov	r0, r2
   1b62e:	4b52      	ldr	r3, [pc, #328]	; (1b778 <mfu_interface_getopt+0x1a0>)
   1b630:	6819      	ldr	r1, [r3, #0]
   1b632:	601a      	str	r2, [r3, #0]
   1b634:	6029      	str	r1, [r5, #0]
   1b636:	b002      	add	sp, #8
   1b638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b63c:	6833      	ldr	r3, [r6, #0]
   1b63e:	2b24      	cmp	r3, #36	; 0x24
   1b640:	f040 8081 	bne.w	1b746 <mfu_interface_getopt+0x16e>
   1b644:	2401      	movs	r4, #1
   1b646:	46a0      	mov	r8, r4
   1b648:	2100      	movs	r1, #0
   1b64a:	4668      	mov	r0, sp
   1b64c:	f7fc fee8 	bl	18420 <rpc_dfu_client_request_alloc>
   1b650:	2800      	cmp	r0, #0
   1b652:	d146      	bne.n	1b6e2 <mfu_interface_getopt+0x10a>
   1b654:	4949      	ldr	r1, [pc, #292]	; (1b77c <mfu_interface_getopt+0x1a4>)
   1b656:	9b00      	ldr	r3, [sp, #0]
   1b658:	880a      	ldrh	r2, [r1, #0]
   1b65a:	f1b8 0f03 	cmp.w	r8, #3
   1b65e:	f102 0201 	add.w	r2, r2, #1
   1b662:	b292      	uxth	r2, r2
   1b664:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1b668:	7118      	strb	r0, [r3, #4]
   1b66a:	800a      	strh	r2, [r1, #0]
   1b66c:	60dc      	str	r4, [r3, #12]
   1b66e:	7158      	strb	r0, [r3, #5]
   1b670:	7198      	strb	r0, [r3, #6]
   1b672:	71d8      	strb	r0, [r3, #7]
   1b674:	d04b      	beq.n	1b70e <mfu_interface_getopt+0x136>
   1b676:	2104      	movs	r1, #4
   1b678:	2200      	movs	r2, #0
   1b67a:	4f41      	ldr	r7, [pc, #260]	; (1b780 <mfu_interface_getopt+0x1a8>)
   1b67c:	6099      	str	r1, [r3, #8]
   1b67e:	4618      	mov	r0, r3
   1b680:	4641      	mov	r1, r8
   1b682:	603a      	str	r2, [r7, #0]
   1b684:	f7fc fee0 	bl	18448 <rpc_dfu_client_request_send>
   1b688:	2800      	cmp	r0, #0
   1b68a:	d14d      	bne.n	1b728 <mfu_interface_getopt+0x150>
   1b68c:	f04f 33ff 	mov.w	r3, #4294967295
   1b690:	ac02      	add	r4, sp, #8
   1b692:	f844 3d04 	str.w	r3, [r4, #-4]!
   1b696:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1b774 <mfu_interface_getopt+0x19c>
   1b69a:	e005      	b.n	1b6a8 <mfu_interface_getopt+0xd0>
   1b69c:	4621      	mov	r1, r4
   1b69e:	4640      	mov	r0, r8
   1b6a0:	f7f5 fe2a 	bl	112f8 <bsd_os_timedwait>
   1b6a4:	2800      	cmp	r0, #0
   1b6a6:	d137      	bne.n	1b718 <mfu_interface_getopt+0x140>
   1b6a8:	6839      	ldr	r1, [r7, #0]
   1b6aa:	2900      	cmp	r1, #0
   1b6ac:	d0f6      	beq.n	1b69c <mfu_interface_getopt+0xc4>
   1b6ae:	690c      	ldr	r4, [r1, #16]
   1b6b0:	2c00      	cmp	r4, #0
   1b6b2:	d154      	bne.n	1b75e <mfu_interface_getopt+0x186>
   1b6b4:	6832      	ldr	r2, [r6, #0]
   1b6b6:	3114      	adds	r1, #20
   1b6b8:	4628      	mov	r0, r5
   1b6ba:	f003 f8ec 	bl	1e896 <memcpy>
   1b6be:	6838      	ldr	r0, [r7, #0]
   1b6c0:	f7fc fed6 	bl	18470 <rpc_dfu_client_message_free>
   1b6c4:	4620      	mov	r0, r4
   1b6c6:	b002      	add	sp, #8
   1b6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b6cc:	6833      	ldr	r3, [r6, #0]
   1b6ce:	2b04      	cmp	r3, #4
   1b6d0:	d139      	bne.n	1b746 <mfu_interface_getopt+0x16e>
   1b6d2:	2402      	movs	r4, #2
   1b6d4:	2100      	movs	r1, #0
   1b6d6:	4668      	mov	r0, sp
   1b6d8:	46a0      	mov	r8, r4
   1b6da:	f7fc fea1 	bl	18420 <rpc_dfu_client_request_alloc>
   1b6de:	2800      	cmp	r0, #0
   1b6e0:	d0b8      	beq.n	1b654 <mfu_interface_getopt+0x7c>
   1b6e2:	200c      	movs	r0, #12
   1b6e4:	f7f5 fec0 	bl	11468 <bsd_os_errno_set>
   1b6e8:	f04f 30ff 	mov.w	r0, #4294967295
   1b6ec:	b002      	add	sp, #8
   1b6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b6f2:	6833      	ldr	r3, [r6, #0]
   1b6f4:	2b04      	cmp	r3, #4
   1b6f6:	d126      	bne.n	1b746 <mfu_interface_getopt+0x16e>
   1b6f8:	2409      	movs	r4, #9
   1b6fa:	46a0      	mov	r8, r4
   1b6fc:	e7a4      	b.n	1b648 <mfu_interface_getopt+0x70>
   1b6fe:	202a      	movs	r0, #42	; 0x2a
   1b700:	f7f5 feb2 	bl	11468 <bsd_os_errno_set>
   1b704:	f04f 30ff 	mov.w	r0, #4294967295
   1b708:	b002      	add	sp, #8
   1b70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b70e:	4a1d      	ldr	r2, [pc, #116]	; (1b784 <mfu_interface_getopt+0x1ac>)
   1b710:	2108      	movs	r1, #8
   1b712:	6812      	ldr	r2, [r2, #0]
   1b714:	611a      	str	r2, [r3, #16]
   1b716:	e7af      	b.n	1b678 <mfu_interface_getopt+0xa0>
   1b718:	203c      	movs	r0, #60	; 0x3c
   1b71a:	f7f5 fea5 	bl	11468 <bsd_os_errno_set>
   1b71e:	f04f 30ff 	mov.w	r0, #4294967295
   1b722:	b002      	add	sp, #8
   1b724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b728:	9800      	ldr	r0, [sp, #0]
   1b72a:	6803      	ldr	r3, [r0, #0]
   1b72c:	b11b      	cbz	r3, 1b736 <mfu_interface_getopt+0x15e>
   1b72e:	4618      	mov	r0, r3
   1b730:	f7fc fea6 	bl	18480 <rpc_dfu_client_data_free>
   1b734:	9800      	ldr	r0, [sp, #0]
   1b736:	f7fc fe9b 	bl	18470 <rpc_dfu_client_message_free>
   1b73a:	200c      	movs	r0, #12
   1b73c:	f7f5 fe94 	bl	11468 <bsd_os_errno_set>
   1b740:	f04f 30ff 	mov.w	r0, #4294967295
   1b744:	e7d2      	b.n	1b6ec <mfu_interface_getopt+0x114>
   1b746:	2016      	movs	r0, #22
   1b748:	f7f5 fe8e 	bl	11468 <bsd_os_errno_set>
   1b74c:	f04f 30ff 	mov.w	r0, #4294967295
   1b750:	e771      	b.n	1b636 <mfu_interface_getopt+0x5e>
   1b752:	2001      	movs	r0, #1
   1b754:	f7f5 fe88 	bl	11468 <bsd_os_errno_set>
   1b758:	f04f 30ff 	mov.w	r0, #4294967295
   1b75c:	e76b      	b.n	1b636 <mfu_interface_getopt+0x5e>
   1b75e:	4b06      	ldr	r3, [pc, #24]	; (1b778 <mfu_interface_getopt+0x1a0>)
   1b760:	2008      	movs	r0, #8
   1b762:	601c      	str	r4, [r3, #0]
   1b764:	f7f5 fe80 	bl	11468 <bsd_os_errno_set>
   1b768:	6838      	ldr	r0, [r7, #0]
   1b76a:	f7fc fe81 	bl	18470 <rpc_dfu_client_message_free>
   1b76e:	f04f 30ff 	mov.w	r0, #4294967295
   1b772:	e760      	b.n	1b636 <mfu_interface_getopt+0x5e>
   1b774:	20021020 	.word	0x20021020
   1b778:	20021024 	.word	0x20021024
   1b77c:	200219d8 	.word	0x200219d8
   1b780:	2002102c 	.word	0x2002102c
   1b784:	20021028 	.word	0x20021028

0001b788 <interface_init>:
   1b788:	b508      	push	{r3, lr}
   1b78a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1b78e:	2100      	movs	r1, #0
   1b790:	4802      	ldr	r0, [pc, #8]	; (1b79c <interface_init+0x14>)
   1b792:	f003 f8ab 	bl	1e8ec <memset>
   1b796:	2000      	movs	r0, #0
   1b798:	bd08      	pop	{r3, pc}
   1b79a:	bf00      	nop
   1b79c:	200236c8 	.word	0x200236c8

0001b7a0 <interface_socket_allocate>:
   1b7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b7a2:	4b30      	ldr	r3, [pc, #192]	; (1b864 <interface_socket_allocate+0xc4>)
   1b7a4:	4606      	mov	r6, r0
   1b7a6:	681d      	ldr	r5, [r3, #0]
   1b7a8:	4608      	mov	r0, r1
   1b7aa:	b31d      	cbz	r5, 1b7f4 <interface_socket_allocate+0x54>
   1b7ac:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   1b7ae:	2c00      	cmp	r4, #0
   1b7b0:	d04a      	beq.n	1b848 <interface_socket_allocate+0xa8>
   1b7b2:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   1b7b4:	2c00      	cmp	r4, #0
   1b7b6:	d049      	beq.n	1b84c <interface_socket_allocate+0xac>
   1b7b8:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   1b7ba:	2c00      	cmp	r4, #0
   1b7bc:	d048      	beq.n	1b850 <interface_socket_allocate+0xb0>
   1b7be:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   1b7c2:	2900      	cmp	r1, #0
   1b7c4:	d046      	beq.n	1b854 <interface_socket_allocate+0xb4>
   1b7c6:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   1b7ca:	b191      	cbz	r1, 1b7f2 <interface_socket_allocate+0x52>
   1b7cc:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   1b7d0:	2900      	cmp	r1, #0
   1b7d2:	d043      	beq.n	1b85c <interface_socket_allocate+0xbc>
   1b7d4:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   1b7d8:	2900      	cmp	r1, #0
   1b7da:	d041      	beq.n	1b860 <interface_socket_allocate+0xc0>
   1b7dc:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   1b7e0:	2900      	cmp	r1, #0
   1b7e2:	d039      	beq.n	1b858 <interface_socket_allocate+0xb8>
   1b7e4:	f04f 35ff 	mov.w	r5, #4294967295
   1b7e8:	2069      	movs	r0, #105	; 0x69
   1b7ea:	f7f5 fe3d 	bl	11468 <bsd_os_errno_set>
   1b7ee:	4628      	mov	r0, r5
   1b7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7f2:	2505      	movs	r5, #5
   1b7f4:	f04f 0c01 	mov.w	ip, #1
   1b7f8:	f04f 37ff 	mov.w	r7, #4294967295
   1b7fc:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1b800:	00e4      	lsls	r4, r4, #3
   1b802:	f843 c004 	str.w	ip, [r3, r4]
   1b806:	441c      	add	r4, r3
   1b808:	4611      	mov	r1, r2
   1b80a:	61a7      	str	r7, [r4, #24]
   1b80c:	4622      	mov	r2, r4
   1b80e:	f7fe feeb 	bl	1a5e8 <packet_handler_create>
   1b812:	4603      	mov	r3, r0
   1b814:	61e0      	str	r0, [r4, #28]
   1b816:	b158      	cbz	r0, 1b830 <interface_socket_allocate+0x90>
   1b818:	681b      	ldr	r3, [r3, #0]
   1b81a:	681b      	ldr	r3, [r3, #0]
   1b81c:	4798      	blx	r3
   1b81e:	b910      	cbnz	r0, 1b826 <interface_socket_allocate+0x86>
   1b820:	6034      	str	r4, [r6, #0]
   1b822:	4628      	mov	r0, r5
   1b824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b826:	69e0      	ldr	r0, [r4, #28]
   1b828:	f7fe fefe 	bl	1a628 <packet_handler_delete>
   1b82c:	2300      	movs	r3, #0
   1b82e:	61e3      	str	r3, [r4, #28]
   1b830:	f04f 35ff 	mov.w	r5, #4294967295
   1b834:	2228      	movs	r2, #40	; 0x28
   1b836:	2100      	movs	r1, #0
   1b838:	4620      	mov	r0, r4
   1b83a:	f003 f857 	bl	1e8ec <memset>
   1b83e:	200c      	movs	r0, #12
   1b840:	f7f5 fe12 	bl	11468 <bsd_os_errno_set>
   1b844:	4628      	mov	r0, r5
   1b846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b848:	2501      	movs	r5, #1
   1b84a:	e7d3      	b.n	1b7f4 <interface_socket_allocate+0x54>
   1b84c:	2502      	movs	r5, #2
   1b84e:	e7d1      	b.n	1b7f4 <interface_socket_allocate+0x54>
   1b850:	2503      	movs	r5, #3
   1b852:	e7cf      	b.n	1b7f4 <interface_socket_allocate+0x54>
   1b854:	2504      	movs	r5, #4
   1b856:	e7cd      	b.n	1b7f4 <interface_socket_allocate+0x54>
   1b858:	2508      	movs	r5, #8
   1b85a:	e7cb      	b.n	1b7f4 <interface_socket_allocate+0x54>
   1b85c:	2506      	movs	r5, #6
   1b85e:	e7c9      	b.n	1b7f4 <interface_socket_allocate+0x54>
   1b860:	2507      	movs	r5, #7
   1b862:	e7c7      	b.n	1b7f4 <interface_socket_allocate+0x54>
   1b864:	200236c8 	.word	0x200236c8

0001b868 <interface_socket_free>:
   1b868:	2808      	cmp	r0, #8
   1b86a:	d900      	bls.n	1b86e <interface_socket_free+0x6>
   1b86c:	4770      	bx	lr
   1b86e:	b510      	push	{r4, lr}
   1b870:	4c07      	ldr	r4, [pc, #28]	; (1b890 <interface_socket_free+0x28>)
   1b872:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b876:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   1b87a:	69e0      	ldr	r0, [r4, #28]
   1b87c:	b108      	cbz	r0, 1b882 <interface_socket_free+0x1a>
   1b87e:	f7fe fed3 	bl	1a628 <packet_handler_delete>
   1b882:	4620      	mov	r0, r4
   1b884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b888:	2228      	movs	r2, #40	; 0x28
   1b88a:	2100      	movs	r1, #0
   1b88c:	f003 b82e 	b.w	1e8ec <memset>
   1b890:	200236c8 	.word	0x200236c8

0001b894 <interface_socket_packet_handler_update>:
   1b894:	2808      	cmp	r0, #8
   1b896:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b89a:	d81e      	bhi.n	1b8da <interface_socket_packet_handler_update+0x46>
   1b89c:	ea4f 0880 	mov.w	r8, r0, lsl #2
   1b8a0:	4e17      	ldr	r6, [pc, #92]	; (1b900 <interface_socket_packet_handler_update+0x6c>)
   1b8a2:	eb08 0300 	add.w	r3, r8, r0
   1b8a6:	00db      	lsls	r3, r3, #3
   1b8a8:	58f4      	ldr	r4, [r6, r3]
   1b8aa:	18f5      	adds	r5, r6, r3
   1b8ac:	b1ac      	cbz	r4, 1b8da <interface_socket_packet_handler_update+0x46>
   1b8ae:	460b      	mov	r3, r1
   1b8b0:	4604      	mov	r4, r0
   1b8b2:	4611      	mov	r1, r2
   1b8b4:	4618      	mov	r0, r3
   1b8b6:	462a      	mov	r2, r5
   1b8b8:	f8d5 901c 	ldr.w	r9, [r5, #28]
   1b8bc:	f7fe fe94 	bl	1a5e8 <packet_handler_create>
   1b8c0:	61e8      	str	r0, [r5, #28]
   1b8c2:	b1d0      	cbz	r0, 1b8fa <interface_socket_packet_handler_update+0x66>
   1b8c4:	6803      	ldr	r3, [r0, #0]
   1b8c6:	681b      	ldr	r3, [r3, #0]
   1b8c8:	4798      	blx	r3
   1b8ca:	4607      	mov	r7, r0
   1b8cc:	b948      	cbnz	r0, 1b8e2 <interface_socket_packet_handler_update+0x4e>
   1b8ce:	4648      	mov	r0, r9
   1b8d0:	f7fe feaa 	bl	1a628 <packet_handler_delete>
   1b8d4:	4638      	mov	r0, r7
   1b8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b8da:	2705      	movs	r7, #5
   1b8dc:	4638      	mov	r0, r7
   1b8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b8e2:	69e8      	ldr	r0, [r5, #28]
   1b8e4:	f7fe fea0 	bl	1a628 <packet_handler_delete>
   1b8e8:	eb08 0004 	add.w	r0, r8, r4
   1b8ec:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   1b8f0:	f8c6 901c 	str.w	r9, [r6, #28]
   1b8f4:	4638      	mov	r0, r7
   1b8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b8fa:	2704      	movs	r7, #4
   1b8fc:	e7f4      	b.n	1b8e8 <interface_socket_packet_handler_update+0x54>
   1b8fe:	bf00      	nop
   1b900:	200236c8 	.word	0x200236c8

0001b904 <interface_socket_wait>:
   1b904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b908:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b90c:	4c0d      	ldr	r4, [pc, #52]	; (1b944 <interface_socket_wait+0x40>)
   1b90e:	00c0      	lsls	r0, r0, #3
   1b910:	5825      	ldr	r5, [r4, r0]
   1b912:	4404      	add	r4, r0
   1b914:	4015      	ands	r5, r2
   1b916:	428d      	cmp	r5, r1
   1b918:	d011      	beq.n	1b93e <interface_socket_wait+0x3a>
   1b91a:	6860      	ldr	r0, [r4, #4]
   1b91c:	b978      	cbnz	r0, 1b93e <interface_socket_wait+0x3a>
   1b91e:	4698      	mov	r8, r3
   1b920:	460f      	mov	r7, r1
   1b922:	4616      	mov	r6, r2
   1b924:	4625      	mov	r5, r4
   1b926:	e006      	b.n	1b936 <interface_socket_wait+0x32>
   1b928:	686b      	ldr	r3, [r5, #4]
   1b92a:	b943      	cbnz	r3, 1b93e <interface_socket_wait+0x3a>
   1b92c:	4641      	mov	r1, r8
   1b92e:	4620      	mov	r0, r4
   1b930:	f7f5 fce2 	bl	112f8 <bsd_os_timedwait>
   1b934:	b920      	cbnz	r0, 1b940 <interface_socket_wait+0x3c>
   1b936:	6828      	ldr	r0, [r5, #0]
   1b938:	4030      	ands	r0, r6
   1b93a:	42b8      	cmp	r0, r7
   1b93c:	d1f4      	bne.n	1b928 <interface_socket_wait+0x24>
   1b93e:	2000      	movs	r0, #0
   1b940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b944:	200236c8 	.word	0x200236c8

0001b948 <interface_from_internal_id_search>:
   1b948:	4b27      	ldr	r3, [pc, #156]	; (1b9e8 <interface_from_internal_id_search+0xa0>)
   1b94a:	681a      	ldr	r2, [r3, #0]
   1b94c:	b112      	cbz	r2, 1b954 <interface_from_internal_id_search+0xc>
   1b94e:	699a      	ldr	r2, [r3, #24]
   1b950:	4282      	cmp	r2, r0
   1b952:	d039      	beq.n	1b9c8 <interface_from_internal_id_search+0x80>
   1b954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b956:	b112      	cbz	r2, 1b95e <interface_from_internal_id_search+0x16>
   1b958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b95a:	4282      	cmp	r2, r0
   1b95c:	d036      	beq.n	1b9cc <interface_from_internal_id_search+0x84>
   1b95e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1b960:	b112      	cbz	r2, 1b968 <interface_from_internal_id_search+0x20>
   1b962:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1b964:	4282      	cmp	r2, r0
   1b966:	d033      	beq.n	1b9d0 <interface_from_internal_id_search+0x88>
   1b968:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   1b96a:	b11a      	cbz	r2, 1b974 <interface_from_internal_id_search+0x2c>
   1b96c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1b970:	4282      	cmp	r2, r0
   1b972:	d02f      	beq.n	1b9d4 <interface_from_internal_id_search+0x8c>
   1b974:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1b978:	b11a      	cbz	r2, 1b982 <interface_from_internal_id_search+0x3a>
   1b97a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1b97e:	4282      	cmp	r2, r0
   1b980:	d02a      	beq.n	1b9d8 <interface_from_internal_id_search+0x90>
   1b982:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   1b986:	b11a      	cbz	r2, 1b990 <interface_from_internal_id_search+0x48>
   1b988:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   1b98c:	4282      	cmp	r2, r0
   1b98e:	d025      	beq.n	1b9dc <interface_from_internal_id_search+0x94>
   1b990:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   1b994:	b11a      	cbz	r2, 1b99e <interface_from_internal_id_search+0x56>
   1b996:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   1b99a:	4282      	cmp	r2, r0
   1b99c:	d020      	beq.n	1b9e0 <interface_from_internal_id_search+0x98>
   1b99e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   1b9a2:	b11a      	cbz	r2, 1b9ac <interface_from_internal_id_search+0x64>
   1b9a4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1b9a8:	4282      	cmp	r2, r0
   1b9aa:	d01b      	beq.n	1b9e4 <interface_from_internal_id_search+0x9c>
   1b9ac:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1b9b0:	b13a      	cbz	r2, 1b9c2 <interface_from_internal_id_search+0x7a>
   1b9b2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   1b9b6:	4283      	cmp	r3, r0
   1b9b8:	bf14      	ite	ne
   1b9ba:	f04f 30ff 	movne.w	r0, #4294967295
   1b9be:	2008      	moveq	r0, #8
   1b9c0:	4770      	bx	lr
   1b9c2:	f04f 30ff 	mov.w	r0, #4294967295
   1b9c6:	4770      	bx	lr
   1b9c8:	2000      	movs	r0, #0
   1b9ca:	4770      	bx	lr
   1b9cc:	2001      	movs	r0, #1
   1b9ce:	4770      	bx	lr
   1b9d0:	2002      	movs	r0, #2
   1b9d2:	4770      	bx	lr
   1b9d4:	2003      	movs	r0, #3
   1b9d6:	4770      	bx	lr
   1b9d8:	2004      	movs	r0, #4
   1b9da:	4770      	bx	lr
   1b9dc:	2005      	movs	r0, #5
   1b9de:	4770      	bx	lr
   1b9e0:	2006      	movs	r0, #6
   1b9e2:	4770      	bx	lr
   1b9e4:	2007      	movs	r0, #7
   1b9e6:	4770      	bx	lr
   1b9e8:	200236c8 	.word	0x200236c8

0001b9ec <interface_socket_from_handle_get>:
   1b9ec:	2808      	cmp	r0, #8
   1b9ee:	d807      	bhi.n	1ba00 <interface_socket_from_handle_get+0x14>
   1b9f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1b9f4:	4b03      	ldr	r3, [pc, #12]	; (1ba04 <interface_socket_from_handle_get+0x18>)
   1b9f6:	00c0      	lsls	r0, r0, #3
   1b9f8:	581a      	ldr	r2, [r3, r0]
   1b9fa:	b10a      	cbz	r2, 1ba00 <interface_socket_from_handle_get+0x14>
   1b9fc:	4418      	add	r0, r3
   1b9fe:	4770      	bx	lr
   1ba00:	2000      	movs	r0, #0
   1ba02:	4770      	bx	lr
   1ba04:	200236c8 	.word	0x200236c8

0001ba08 <interface_socket_event_get>:
   1ba08:	b119      	cbz	r1, 1ba12 <interface_socket_event_get+0xa>
   1ba0a:	2808      	cmp	r0, #8
   1ba0c:	d902      	bls.n	1ba14 <interface_socket_event_get+0xc>
   1ba0e:	2310      	movs	r3, #16
   1ba10:	600b      	str	r3, [r1, #0]
   1ba12:	4770      	bx	lr
   1ba14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ba18:	4b07      	ldr	r3, [pc, #28]	; (1ba38 <interface_socket_event_get+0x30>)
   1ba1a:	00c0      	lsls	r0, r0, #3
   1ba1c:	581a      	ldr	r2, [r3, r0]
   1ba1e:	2a00      	cmp	r2, #0
   1ba20:	d0f5      	beq.n	1ba0e <interface_socket_event_get+0x6>
   1ba22:	581b      	ldr	r3, [r3, r0]
   1ba24:	0c1b      	lsrs	r3, r3, #16
   1ba26:	f003 020a 	and.w	r2, r3, #10
   1ba2a:	2a0a      	cmp	r2, #10
   1ba2c:	bf14      	ite	ne
   1ba2e:	f003 030f 	andne.w	r3, r3, #15
   1ba32:	f003 030d 	andeq.w	r3, r3, #13
   1ba36:	e7eb      	b.n	1ba10 <interface_socket_event_get+0x8>
   1ba38:	200236c8 	.word	0x200236c8

0001ba3c <interface_socket_setopt>:
   1ba3c:	2808      	cmp	r0, #8
   1ba3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba40:	d82c      	bhi.n	1ba9c <interface_socket_setopt+0x60>
   1ba42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ba46:	4e1e      	ldr	r6, [pc, #120]	; (1bac0 <interface_socket_setopt+0x84>)
   1ba48:	00c0      	lsls	r0, r0, #3
   1ba4a:	5834      	ldr	r4, [r6, r0]
   1ba4c:	b334      	cbz	r4, 1ba9c <interface_socket_setopt+0x60>
   1ba4e:	2901      	cmp	r1, #1
   1ba50:	d11e      	bne.n	1ba90 <interface_socket_setopt+0x54>
   1ba52:	f1a2 0114 	sub.w	r1, r2, #20
   1ba56:	2901      	cmp	r1, #1
   1ba58:	d81a      	bhi.n	1ba90 <interface_socket_setopt+0x54>
   1ba5a:	9906      	ldr	r1, [sp, #24]
   1ba5c:	2908      	cmp	r1, #8
   1ba5e:	d123      	bne.n	1baa8 <interface_socket_setopt+0x6c>
   1ba60:	b313      	cbz	r3, 1baa8 <interface_socket_setopt+0x6c>
   1ba62:	6859      	ldr	r1, [r3, #4]
   1ba64:	4c17      	ldr	r4, [pc, #92]	; (1bac4 <interface_socket_setopt+0x88>)
   1ba66:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1ba6a:	fba4 4101 	umull	r4, r1, r4, r1
   1ba6e:	0989      	lsrs	r1, r1, #6
   1ba70:	460c      	mov	r4, r1
   1ba72:	2500      	movs	r5, #0
   1ba74:	681b      	ldr	r3, [r3, #0]
   1ba76:	fbe7 4503 	umlal	r4, r5, r7, r3
   1ba7a:	2d01      	cmp	r5, #1
   1ba7c:	bf08      	it	eq
   1ba7e:	2c00      	cmpeq	r4, #0
   1ba80:	d218      	bcs.n	1bab4 <interface_socket_setopt+0x78>
   1ba82:	4430      	add	r0, r6
   1ba84:	2a14      	cmp	r2, #20
   1ba86:	bf0c      	ite	eq
   1ba88:	6204      	streq	r4, [r0, #32]
   1ba8a:	6244      	strne	r4, [r0, #36]	; 0x24
   1ba8c:	2000      	movs	r0, #0
   1ba8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba90:	202a      	movs	r0, #42	; 0x2a
   1ba92:	f7f5 fce9 	bl	11468 <bsd_os_errno_set>
   1ba96:	f04f 30ff 	mov.w	r0, #4294967295
   1ba9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba9c:	2009      	movs	r0, #9
   1ba9e:	f7f5 fce3 	bl	11468 <bsd_os_errno_set>
   1baa2:	f04f 30ff 	mov.w	r0, #4294967295
   1baa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1baa8:	2016      	movs	r0, #22
   1baaa:	f7f5 fcdd 	bl	11468 <bsd_os_errno_set>
   1baae:	f04f 30ff 	mov.w	r0, #4294967295
   1bab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bab4:	2025      	movs	r0, #37	; 0x25
   1bab6:	f7f5 fcd7 	bl	11468 <bsd_os_errno_set>
   1baba:	f04f 30ff 	mov.w	r0, #4294967295
   1babe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bac0:	200236c8 	.word	0x200236c8
   1bac4:	10624dd3 	.word	0x10624dd3

0001bac8 <interface_socket_getopt>:
   1bac8:	b570      	push	{r4, r5, r6, lr}
   1baca:	2808      	cmp	r0, #8
   1bacc:	9d04      	ldr	r5, [sp, #16]
   1bace:	d835      	bhi.n	1bb3c <interface_socket_getopt+0x74>
   1bad0:	4c20      	ldr	r4, [pc, #128]	; (1bb54 <interface_socket_getopt+0x8c>)
   1bad2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1bad6:	00c0      	lsls	r0, r0, #3
   1bad8:	5826      	ldr	r6, [r4, r0]
   1bada:	4404      	add	r4, r0
   1badc:	b376      	cbz	r6, 1bb3c <interface_socket_getopt+0x74>
   1bade:	2901      	cmp	r1, #1
   1bae0:	d132      	bne.n	1bb48 <interface_socket_getopt+0x80>
   1bae2:	b32b      	cbz	r3, 1bb30 <interface_socket_getopt+0x68>
   1bae4:	b325      	cbz	r5, 1bb30 <interface_socket_getopt+0x68>
   1bae6:	2a04      	cmp	r2, #4
   1bae8:	d019      	beq.n	1bb1e <interface_socket_getopt+0x56>
   1baea:	f1a2 0114 	sub.w	r1, r2, #20
   1baee:	2901      	cmp	r1, #1
   1baf0:	d82a      	bhi.n	1bb48 <interface_socket_getopt+0x80>
   1baf2:	6829      	ldr	r1, [r5, #0]
   1baf4:	2908      	cmp	r1, #8
   1baf6:	d11b      	bne.n	1bb30 <interface_socket_getopt+0x68>
   1baf8:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   1bafc:	2a14      	cmp	r2, #20
   1bafe:	bf18      	it	ne
   1bb00:	4601      	movne	r1, r0
   1bb02:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1bb06:	4a14      	ldr	r2, [pc, #80]	; (1bb58 <interface_socket_getopt+0x90>)
   1bb08:	2000      	movs	r0, #0
   1bb0a:	fba2 5201 	umull	r5, r2, r2, r1
   1bb0e:	0992      	lsrs	r2, r2, #6
   1bb10:	fb04 1112 	mls	r1, r4, r2, r1
   1bb14:	fb04 f101 	mul.w	r1, r4, r1
   1bb18:	e9c3 2100 	strd	r2, r1, [r3]
   1bb1c:	bd70      	pop	{r4, r5, r6, pc}
   1bb1e:	682a      	ldr	r2, [r5, #0]
   1bb20:	2a04      	cmp	r2, #4
   1bb22:	d105      	bne.n	1bb30 <interface_socket_getopt+0x68>
   1bb24:	2200      	movs	r2, #0
   1bb26:	6861      	ldr	r1, [r4, #4]
   1bb28:	4610      	mov	r0, r2
   1bb2a:	6019      	str	r1, [r3, #0]
   1bb2c:	6062      	str	r2, [r4, #4]
   1bb2e:	bd70      	pop	{r4, r5, r6, pc}
   1bb30:	2016      	movs	r0, #22
   1bb32:	f7f5 fc99 	bl	11468 <bsd_os_errno_set>
   1bb36:	f04f 30ff 	mov.w	r0, #4294967295
   1bb3a:	bd70      	pop	{r4, r5, r6, pc}
   1bb3c:	2009      	movs	r0, #9
   1bb3e:	f7f5 fc93 	bl	11468 <bsd_os_errno_set>
   1bb42:	f04f 30ff 	mov.w	r0, #4294967295
   1bb46:	bd70      	pop	{r4, r5, r6, pc}
   1bb48:	202a      	movs	r0, #42	; 0x2a
   1bb4a:	f7f5 fc8d 	bl	11468 <bsd_os_errno_set>
   1bb4e:	f04f 30ff 	mov.w	r0, #4294967295
   1bb52:	bd70      	pop	{r4, r5, r6, pc}
   1bb54:	200236c8 	.word	0x200236c8
   1bb58:	10624dd3 	.word	0x10624dd3

0001bb5c <interface_socket_fcntl>:
   1bb5c:	2808      	cmp	r0, #8
   1bb5e:	b510      	push	{r4, lr}
   1bb60:	d826      	bhi.n	1bbb0 <interface_socket_fcntl+0x54>
   1bb62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1bb66:	4c1b      	ldr	r4, [pc, #108]	; (1bbd4 <interface_socket_fcntl+0x78>)
   1bb68:	00c3      	lsls	r3, r0, #3
   1bb6a:	58e0      	ldr	r0, [r4, r3]
   1bb6c:	b300      	cbz	r0, 1bbb0 <interface_socket_fcntl+0x54>
   1bb6e:	2901      	cmp	r1, #1
   1bb70:	d005      	beq.n	1bb7e <interface_socket_fcntl+0x22>
   1bb72:	2902      	cmp	r1, #2
   1bb74:	d122      	bne.n	1bbbc <interface_socket_fcntl+0x60>
   1bb76:	58e0      	ldr	r0, [r4, r3]
   1bb78:	f3c0 7000 	ubfx	r0, r0, #28, #1
   1bb7c:	bd10      	pop	{r4, pc}
   1bb7e:	07d2      	lsls	r2, r2, #31
   1bb80:	d410      	bmi.n	1bba4 <interface_socket_fcntl+0x48>
   1bb82:	58e0      	ldr	r0, [r4, r3]
   1bb84:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   1bb88:	d11e      	bne.n	1bbc8 <interface_socket_fcntl+0x6c>
   1bb8a:	58e2      	ldr	r2, [r4, r3]
   1bb8c:	b292      	uxth	r2, r2
   1bb8e:	2a0a      	cmp	r2, #10
   1bb90:	d01a      	beq.n	1bbc8 <interface_socket_fcntl+0x6c>
   1bb92:	58e2      	ldr	r2, [r4, r3]
   1bb94:	b292      	uxth	r2, r2
   1bb96:	2a0b      	cmp	r2, #11
   1bb98:	d016      	beq.n	1bbc8 <interface_socket_fcntl+0x6c>
   1bb9a:	58e2      	ldr	r2, [r4, r3]
   1bb9c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   1bba0:	50e2      	str	r2, [r4, r3]
   1bba2:	bd10      	pop	{r4, pc}
   1bba4:	58e2      	ldr	r2, [r4, r3]
   1bba6:	2000      	movs	r0, #0
   1bba8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1bbac:	50e2      	str	r2, [r4, r3]
   1bbae:	bd10      	pop	{r4, pc}
   1bbb0:	2009      	movs	r0, #9
   1bbb2:	f7f5 fc59 	bl	11468 <bsd_os_errno_set>
   1bbb6:	f04f 30ff 	mov.w	r0, #4294967295
   1bbba:	bd10      	pop	{r4, pc}
   1bbbc:	2016      	movs	r0, #22
   1bbbe:	f7f5 fc53 	bl	11468 <bsd_os_errno_set>
   1bbc2:	f04f 30ff 	mov.w	r0, #4294967295
   1bbc6:	bd10      	pop	{r4, pc}
   1bbc8:	2023      	movs	r0, #35	; 0x23
   1bbca:	f7f5 fc4d 	bl	11468 <bsd_os_errno_set>
   1bbce:	f04f 30ff 	mov.w	r0, #4294967295
   1bbd2:	bd10      	pop	{r4, pc}
   1bbd4:	200236c8 	.word	0x200236c8

0001bbd8 <at_client_evt_handler>:
   1bbd8:	b120      	cbz	r0, 1bbe4 <at_client_evt_handler+0xc>
   1bbda:	f850 1b08 	ldr.w	r1, [r0], #8
   1bbde:	0c09      	lsrs	r1, r1, #16
   1bbe0:	f7fc be44 	b.w	1886c <rpc_at_event_handler>
   1bbe4:	4770      	bx	lr
   1bbe6:	bf00      	nop

0001bbe8 <rpc_at_client_init>:
   1bbe8:	4801      	ldr	r0, [pc, #4]	; (1bbf0 <rpc_at_client_init+0x8>)
   1bbea:	f7fb bbfb 	b.w	173e4 <rpc_client_register>
   1bbee:	bf00      	nop
   1bbf0:	00021434 	.word	0x00021434

0001bbf4 <rpc_at_client_request_alloc>:
   1bbf4:	b180      	cbz	r0, 1bc18 <rpc_at_client_request_alloc+0x24>
   1bbf6:	2300      	movs	r3, #0
   1bbf8:	b510      	push	{r4, lr}
   1bbfa:	b082      	sub	sp, #8
   1bbfc:	aa02      	add	r2, sp, #8
   1bbfe:	4604      	mov	r4, r0
   1bc00:	f842 3d04 	str.w	r3, [r2, #-4]!
   1bc04:	2003      	movs	r0, #3
   1bc06:	f7fb fc67 	bl	174d8 <rpc_message_alloc>
   1bc0a:	b918      	cbnz	r0, 1bc14 <rpc_at_client_request_alloc+0x20>
   1bc0c:	9b01      	ldr	r3, [sp, #4]
   1bc0e:	b10b      	cbz	r3, 1bc14 <rpc_at_client_request_alloc+0x20>
   1bc10:	3308      	adds	r3, #8
   1bc12:	6023      	str	r3, [r4, #0]
   1bc14:	b002      	add	sp, #8
   1bc16:	bd10      	pop	{r4, pc}
   1bc18:	200e      	movs	r0, #14
   1bc1a:	4770      	bx	lr

0001bc1c <rpc_at_client_request_send>:
   1bc1c:	b150      	cbz	r0, 1bc34 <rpc_at_client_request_send+0x18>
   1bc1e:	4603      	mov	r3, r0
   1bc20:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1bc24:	2003      	movs	r0, #3
   1bc26:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1bc2a:	f843 1d08 	str.w	r1, [r3, #-8]!
   1bc2e:	4619      	mov	r1, r3
   1bc30:	f7fb bc42 	b.w	174b8 <rpc_message_send>
   1bc34:	200e      	movs	r0, #14
   1bc36:	4770      	bx	lr

0001bc38 <rpc_at_client_message_free>:
   1bc38:	b120      	cbz	r0, 1bc44 <rpc_at_client_message_free+0xc>
   1bc3a:	f1a0 0108 	sub.w	r1, r0, #8
   1bc3e:	2003      	movs	r0, #3
   1bc40:	f7fb bc76 	b.w	17530 <rpc_message_free>
   1bc44:	200e      	movs	r0, #14
   1bc46:	4770      	bx	lr

0001bc48 <rpc_at_client_data_free>:
   1bc48:	b118      	cbz	r0, 1bc52 <rpc_at_client_data_free+0xa>
   1bc4a:	4601      	mov	r1, r0
   1bc4c:	2003      	movs	r0, #3
   1bc4e:	f7fb bc7b 	b.w	17548 <rpc_message_data_free>
   1bc52:	200e      	movs	r0, #14
   1bc54:	4770      	bx	lr
   1bc56:	bf00      	nop

0001bc58 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1bc58:	4a07      	ldr	r2, [pc, #28]	; (1bc78 <SystemInit+0x20>)
   1bc5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1bc5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1bc62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1bc66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bc6a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1bc6e:	4b03      	ldr	r3, [pc, #12]	; (1bc7c <SystemInit+0x24>)
   1bc70:	4a03      	ldr	r2, [pc, #12]	; (1bc80 <SystemInit+0x28>)
   1bc72:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1bc74:	4770      	bx	lr
   1bc76:	bf00      	nop
   1bc78:	e000ed00 	.word	0xe000ed00
   1bc7c:	20020064 	.word	0x20020064
   1bc80:	03d09000 	.word	0x03d09000

0001bc84 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1bc84:	4b04      	ldr	r3, [pc, #16]	; (1bc98 <nrfx_clock_init+0x14>)
   1bc86:	791a      	ldrb	r2, [r3, #4]
   1bc88:	b922      	cbnz	r2, 1bc94 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1bc8a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1bc8c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1bc8e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1bc90:	4802      	ldr	r0, [pc, #8]	; (1bc9c <nrfx_clock_init+0x18>)
   1bc92:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1bc94:	4802      	ldr	r0, [pc, #8]	; (1bca0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1bc96:	4770      	bx	lr
   1bc98:	20021030 	.word	0x20021030
   1bc9c:	0bad0000 	.word	0x0bad0000
   1bca0:	0bad000c 	.word	0x0bad000c

0001bca4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1bca4:	b110      	cbz	r0, 1bcac <nrfx_clock_start+0x8>
   1bca6:	2801      	cmp	r0, #1
   1bca8:	d01e      	beq.n	1bce8 <nrfx_clock_start+0x44>
   1bcaa:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1bcac:	4b13      	ldr	r3, [pc, #76]	; (1bcfc <nrfx_clock_start+0x58>)
   1bcae:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1bcb2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1bcb6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   1bcba:	4619      	mov	r1, r3
   1bcbc:	d010      	beq.n	1bce0 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1bcbe:	f002 0203 	and.w	r2, r2, #3
   1bcc2:	2a02      	cmp	r2, #2
   1bcc4:	d10c      	bne.n	1bce0 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1bcc6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bcca:	2200      	movs	r2, #0
   1bccc:	4b0c      	ldr	r3, [pc, #48]	; (1bd00 <nrfx_clock_start+0x5c>)
   1bcce:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   1bcd0:	2202      	movs	r2, #2
   1bcd2:	681b      	ldr	r3, [r3, #0]
   1bcd4:	4b09      	ldr	r3, [pc, #36]	; (1bcfc <nrfx_clock_start+0x58>)
   1bcd6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bcda:	2201      	movs	r2, #1
   1bcdc:	609a      	str	r2, [r3, #8]
}
   1bcde:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   1bce0:	2301      	movs	r3, #1
   1bce2:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   1bce6:	e7f0      	b.n	1bcca <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bce8:	2200      	movs	r2, #0
   1bcea:	4b06      	ldr	r3, [pc, #24]	; (1bd04 <nrfx_clock_start+0x60>)
   1bcec:	601a      	str	r2, [r3, #0]
   1bcee:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1bcf0:	4b02      	ldr	r3, [pc, #8]	; (1bcfc <nrfx_clock_start+0x58>)
   1bcf2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bcf6:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1bcf8:	4770      	bx	lr
   1bcfa:	bf00      	nop
   1bcfc:	40005000 	.word	0x40005000
   1bd00:	40005104 	.word	0x40005104
   1bd04:	40005100 	.word	0x40005100

0001bd08 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1bd08:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1bd0a:	b110      	cbz	r0, 1bd12 <nrfx_clock_stop+0xa>
   1bd0c:	2801      	cmp	r0, #1
   1bd0e:	d016      	beq.n	1bd3e <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1bd10:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1bd12:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bd14:	2101      	movs	r1, #1
   1bd16:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   1bd1a:	4c16      	ldr	r4, [pc, #88]	; (1bd74 <nrfx_clock_stop+0x6c>)
   1bd1c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bd20:	4a15      	ldr	r2, [pc, #84]	; (1bd78 <nrfx_clock_stop+0x70>)
   1bd22:	6010      	str	r0, [r2, #0]
   1bd24:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bd26:	4a15      	ldr	r2, [pc, #84]	; (1bd7c <nrfx_clock_stop+0x74>)
   1bd28:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1bd2a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1bd2e:	03db      	lsls	r3, r3, #15
   1bd30:	d5ee      	bpl.n	1bd10 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1bd32:	2001      	movs	r0, #1
   1bd34:	f004 fa82 	bl	2023c <nrfx_busy_wait>
   1bd38:	3d01      	subs	r5, #1
   1bd3a:	d1f6      	bne.n	1bd2a <nrfx_clock_stop+0x22>
   1bd3c:	e7e8      	b.n	1bd10 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bd3e:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bd40:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bd44:	4b0e      	ldr	r3, [pc, #56]	; (1bd80 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   1bd46:	4c0b      	ldr	r4, [pc, #44]	; (1bd74 <nrfx_clock_stop+0x6c>)
   1bd48:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bd4c:	601a      	str	r2, [r3, #0]
   1bd4e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bd50:	4b0c      	ldr	r3, [pc, #48]	; (1bd84 <nrfx_clock_stop+0x7c>)
   1bd52:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1bd54:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1bd58:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1bd5c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1bd60:	03d2      	lsls	r2, r2, #15
   1bd62:	d5d5      	bpl.n	1bd10 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1bd64:	2b00      	cmp	r3, #0
   1bd66:	d0d3      	beq.n	1bd10 <nrfx_clock_stop+0x8>
   1bd68:	2001      	movs	r0, #1
   1bd6a:	f004 fa67 	bl	2023c <nrfx_busy_wait>
   1bd6e:	3d01      	subs	r5, #1
   1bd70:	d1f0      	bne.n	1bd54 <nrfx_clock_stop+0x4c>
   1bd72:	e7cd      	b.n	1bd10 <nrfx_clock_stop+0x8>
   1bd74:	40005000 	.word	0x40005000
   1bd78:	40005104 	.word	0x40005104
   1bd7c:	4000500c 	.word	0x4000500c
   1bd80:	40005100 	.word	0x40005100
   1bd84:	40005004 	.word	0x40005004

0001bd88 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1bd88:	4b15      	ldr	r3, [pc, #84]	; (1bde0 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1bd8a:	b510      	push	{r4, lr}
   1bd8c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1bd8e:	b14a      	cbz	r2, 1bda4 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bd90:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   1bd92:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bd94:	6018      	str	r0, [r3, #0]
   1bd96:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1bd98:	4b12      	ldr	r3, [pc, #72]	; (1bde4 <nrfx_power_clock_irq_handler+0x5c>)
   1bd9a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1bd9e:	4b12      	ldr	r3, [pc, #72]	; (1bde8 <nrfx_power_clock_irq_handler+0x60>)
   1bda0:	681b      	ldr	r3, [r3, #0]
   1bda2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1bda4:	4b11      	ldr	r3, [pc, #68]	; (1bdec <nrfx_power_clock_irq_handler+0x64>)
   1bda6:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1bda8:	b182      	cbz	r2, 1bdcc <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bdaa:	2200      	movs	r2, #0
   1bdac:	601a      	str	r2, [r3, #0]
   1bdae:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1bdb0:	4b0c      	ldr	r3, [pc, #48]	; (1bde4 <nrfx_power_clock_irq_handler+0x5c>)
   1bdb2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1bdb6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1bdba:	f002 0203 	and.w	r2, r2, #3
   1bdbe:	2a01      	cmp	r2, #1
   1bdc0:	f04f 0102 	mov.w	r1, #2
   1bdc4:	d103      	bne.n	1bdce <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1bdc6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bdca:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1bdcc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1bdce:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1bdd2:	4b05      	ldr	r3, [pc, #20]	; (1bde8 <nrfx_power_clock_irq_handler+0x60>)
   1bdd4:	2001      	movs	r0, #1
}
   1bdd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1bdda:	681b      	ldr	r3, [r3, #0]
   1bddc:	4718      	bx	r3
   1bdde:	bf00      	nop
   1bde0:	40005100 	.word	0x40005100
   1bde4:	40005000 	.word	0x40005000
   1bde8:	20021030 	.word	0x20021030
   1bdec:	40005104 	.word	0x40005104

0001bdf0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1bdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1bdf2:	4b10      	ldr	r3, [pc, #64]	; (1be34 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1bdf4:	4f10      	ldr	r7, [pc, #64]	; (1be38 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1bdf6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1bdfa:	3001      	adds	r0, #1
   1bdfc:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1be00:	42ae      	cmp	r6, r5
   1be02:	d800      	bhi.n	1be06 <z_sys_init_run_level+0x16>
		}
	}
}
   1be04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1be06:	e9d5 3400 	ldrd	r3, r4, [r5]
   1be0a:	4620      	mov	r0, r4
   1be0c:	4798      	blx	r3
   1be0e:	b170      	cbz	r0, 1be2e <z_sys_init_run_level+0x3e>
   1be10:	b16c      	cbz	r4, 1be2e <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   1be12:	2301      	movs	r3, #1
				(dev - __device_start));
   1be14:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1be16:	4a09      	ldr	r2, [pc, #36]	; (1be3c <z_sys_init_run_level+0x4c>)
   1be18:	1124      	asrs	r4, r4, #4
   1be1a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   1be1c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1be20:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1be24:	fa03 f404 	lsl.w	r4, r3, r4
   1be28:	4304      	orrs	r4, r0
   1be2a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1be2e:	3508      	adds	r5, #8
   1be30:	e7e6      	b.n	1be00 <z_sys_init_run_level+0x10>
   1be32:	bf00      	nop
   1be34:	00021444 	.word	0x00021444
   1be38:	20020090 	.word	0x20020090
   1be3c:	20020100 	.word	0x20020100

0001be40 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1be40:	4b08      	ldr	r3, [pc, #32]	; (1be64 <z_device_ready+0x24>)
   1be42:	1ac0      	subs	r0, r0, r3
   1be44:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1be46:	4b08      	ldr	r3, [pc, #32]	; (1be68 <z_device_ready+0x28>)
   1be48:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   1be4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1be4e:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1be50:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   1be54:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1be58:	4210      	tst	r0, r2
}
   1be5a:	bf0c      	ite	eq
   1be5c:	4618      	moveq	r0, r3
   1be5e:	2000      	movne	r0, #0
   1be60:	4770      	bx	lr
   1be62:	bf00      	nop
   1be64:	20020090 	.word	0x20020090
   1be68:	20020100 	.word	0x20020100

0001be6c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1be6c:	4911      	ldr	r1, [pc, #68]	; (1beb4 <z_impl_device_get_binding+0x48>)
{
   1be6e:	b570      	push	{r4, r5, r6, lr}
   1be70:	4605      	mov	r5, r0
   1be72:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1be74:	4c10      	ldr	r4, [pc, #64]	; (1beb8 <z_impl_device_get_binding+0x4c>)
   1be76:	428c      	cmp	r4, r1
   1be78:	d104      	bne.n	1be84 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1be7a:	4c0f      	ldr	r4, [pc, #60]	; (1beb8 <z_impl_device_get_binding+0x4c>)
   1be7c:	42b4      	cmp	r4, r6
   1be7e:	d10a      	bne.n	1be96 <z_impl_device_get_binding+0x2a>
	return NULL;
   1be80:	2400      	movs	r4, #0
   1be82:	e014      	b.n	1beae <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1be84:	4620      	mov	r0, r4
   1be86:	f7ff ffdb 	bl	1be40 <z_device_ready>
   1be8a:	b110      	cbz	r0, 1be92 <z_impl_device_get_binding+0x26>
   1be8c:	6823      	ldr	r3, [r4, #0]
   1be8e:	42ab      	cmp	r3, r5
   1be90:	d00d      	beq.n	1beae <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1be92:	3410      	adds	r4, #16
   1be94:	e7ef      	b.n	1be76 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1be96:	4620      	mov	r0, r4
   1be98:	f7ff ffd2 	bl	1be40 <z_device_ready>
   1be9c:	b908      	cbnz	r0, 1bea2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1be9e:	3410      	adds	r4, #16
   1bea0:	e7ec      	b.n	1be7c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1bea2:	4628      	mov	r0, r5
   1bea4:	6821      	ldr	r1, [r4, #0]
   1bea6:	f002 fccb 	bl	1e840 <strcmp>
   1beaa:	2800      	cmp	r0, #0
   1beac:	d1f7      	bne.n	1be9e <z_impl_device_get_binding+0x32>
}
   1beae:	4620      	mov	r0, r4
   1beb0:	bd70      	pop	{r4, r5, r6, pc}
   1beb2:	bf00      	nop
   1beb4:	20020100 	.word	0x20020100
   1beb8:	20020090 	.word	0x20020090

0001bebc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1bebc:	4b01      	ldr	r3, [pc, #4]	; (1bec4 <z_impl_z_errno+0x8>)
   1bebe:	6898      	ldr	r0, [r3, #8]
}
   1bec0:	3064      	adds	r0, #100	; 0x64
   1bec2:	4770      	bx	lr
   1bec4:	20021038 	.word	0x20021038

0001bec8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1bec8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1becc:	4605      	mov	r5, r0
   1bece:	460f      	mov	r7, r1
	__asm__ volatile(
   1bed0:	f04f 0320 	mov.w	r3, #32
   1bed4:	f3ef 8811 	mrs	r8, BASEPRI
   1bed8:	f383 8811 	msr	BASEPRI, r3
   1bedc:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1bee0:	f000 feca 	bl	1cc78 <z_impl_k_current_get>
   1bee4:	4c22      	ldr	r4, [pc, #136]	; (1bf70 <z_fatal_error+0xa8>)
   1bee6:	4b23      	ldr	r3, [pc, #140]	; (1bf74 <z_fatal_error+0xac>)
   1bee8:	2d04      	cmp	r5, #4
   1beea:	eba4 0403 	sub.w	r4, r4, r3
   1beee:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1bef2:	bf98      	it	ls
   1bef4:	4a20      	ldrls	r2, [pc, #128]	; (1bf78 <z_fatal_error+0xb0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1bef6:	ea4f 1484 	mov.w	r4, r4, lsl #6
   1befa:	f044 0301 	orr.w	r3, r4, #1
   1befe:	4606      	mov	r6, r0
	switch (reason) {
   1bf00:	bf94      	ite	ls
   1bf02:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1bf06:	4a1d      	ldrhi	r2, [pc, #116]	; (1bf7c <z_fatal_error+0xb4>)
   1bf08:	f8ad 3000 	strh.w	r3, [sp]
   1bf0c:	4629      	mov	r1, r5
   1bf0e:	2300      	movs	r3, #0
   1bf10:	481b      	ldr	r0, [pc, #108]	; (1bf80 <z_fatal_error+0xb8>)
   1bf12:	f001 ff22 	bl	1dd5a <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1bf16:	b147      	cbz	r7, 1bf2a <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1bf18:	69fb      	ldr	r3, [r7, #28]
   1bf1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1bf1e:	b123      	cbz	r3, 1bf2a <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   1bf20:	4818      	ldr	r0, [pc, #96]	; (1bf84 <z_fatal_error+0xbc>)
   1bf22:	f044 0101 	orr.w	r1, r4, #1
   1bf26:	f001 fed9 	bl	1dcdc <log_0>
	const char *thread_name = k_thread_name_get(thread);
   1bf2a:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1bf2c:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   1bf30:	f004 fbcd 	bl	206ce <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1bf34:	b1d0      	cbz	r0, 1bf6c <z_fatal_error+0xa4>
   1bf36:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1bf38:	4b13      	ldr	r3, [pc, #76]	; (1bf88 <z_fatal_error+0xc0>)
   1bf3a:	2a00      	cmp	r2, #0
   1bf3c:	bf08      	it	eq
   1bf3e:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1bf40:	f7f2 fd0a 	bl	e958 <log_strdup>
   1bf44:	4623      	mov	r3, r4
   1bf46:	4602      	mov	r2, r0
   1bf48:	4631      	mov	r1, r6
   1bf4a:	4810      	ldr	r0, [pc, #64]	; (1bf8c <z_fatal_error+0xc4>)
   1bf4c:	f001 feec 	bl	1dd28 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1bf50:	4639      	mov	r1, r7
   1bf52:	4628      	mov	r0, r5
   1bf54:	f7f7 faf0 	bl	13538 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1bf58:	f388 8811 	msr	BASEPRI, r8
   1bf5c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1bf60:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1bf62:	b002      	add	sp, #8
   1bf64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bf68:	f7f4 b976 	b.w	10258 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1bf6c:	4806      	ldr	r0, [pc, #24]	; (1bf88 <z_fatal_error+0xc0>)
   1bf6e:	e7e7      	b.n	1bf40 <z_fatal_error+0x78>
   1bf70:	00020e70 	.word	0x00020e70
   1bf74:	00020e10 	.word	0x00020e10
   1bf78:	0002145c 	.word	0x0002145c
   1bf7c:	00022cd4 	.word	0x00022cd4
   1bf80:	00022cea 	.word	0x00022cea
   1bf84:	00022d12 	.word	0x00022d12
   1bf88:	00022ce2 	.word	0x00022ce2
   1bf8c:	00022d33 	.word	0x00022d33

0001bf90 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1bf90:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1bf92:	4d0b      	ldr	r5, [pc, #44]	; (1bfc0 <idle+0x30>)
	__asm__ volatile(
   1bf94:	f04f 0220 	mov.w	r2, #32
   1bf98:	f3ef 8311 	mrs	r3, BASEPRI
   1bf9c:	f382 8811 	msr	BASEPRI, r2
   1bfa0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1bfa4:	f004 fc0f 	bl	207c6 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1bfa8:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   1bfaa:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1bfac:	2802      	cmp	r0, #2
   1bfae:	bfd8      	it	le
   1bfb0:	4608      	movle	r0, r1
   1bfb2:	f004 fc18 	bl	207e6 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1bfb6:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   1bfb8:	f7f3 fe06 	bl	fbc8 <arch_cpu_idle>
}
   1bfbc:	e7ea      	b.n	1bf94 <idle+0x4>
   1bfbe:	bf00      	nop
   1bfc0:	20021038 	.word	0x20021038

0001bfc4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1bfc4:	4802      	ldr	r0, [pc, #8]	; (1bfd0 <z_bss_zero+0xc>)
   1bfc6:	4a03      	ldr	r2, [pc, #12]	; (1bfd4 <z_bss_zero+0x10>)
   1bfc8:	2100      	movs	r1, #0
   1bfca:	1a12      	subs	r2, r2, r0
   1bfcc:	f002 bc8e 	b.w	1e8ec <memset>
   1bfd0:	20020208 	.word	0x20020208
   1bfd4:	20023830 	.word	0x20023830

0001bfd8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1bfd8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1bfda:	4806      	ldr	r0, [pc, #24]	; (1bff4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1bfdc:	4a06      	ldr	r2, [pc, #24]	; (1bff8 <z_data_copy+0x20>)
   1bfde:	4907      	ldr	r1, [pc, #28]	; (1bffc <z_data_copy+0x24>)
   1bfe0:	1a12      	subs	r2, r2, r0
   1bfe2:	f002 fc58 	bl	1e896 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bfe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1bfea:	4a05      	ldr	r2, [pc, #20]	; (1c000 <z_data_copy+0x28>)
   1bfec:	4905      	ldr	r1, [pc, #20]	; (1c004 <z_data_copy+0x2c>)
   1bfee:	4806      	ldr	r0, [pc, #24]	; (1c008 <z_data_copy+0x30>)
   1bff0:	f002 bc51 	b.w	1e896 <memcpy>
   1bff4:	20020000 	.word	0x20020000
   1bff8:	20020204 	.word	0x20020204
   1bffc:	00022de0 	.word	0x00022de0
   1c000:	00000000 	.word	0x00000000
   1c004:	00022de0 	.word	0x00022de0
   1c008:	20020000 	.word	0x20020000

0001c00c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1c00c:	2201      	movs	r2, #1
{
   1c00e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1c010:	4b0b      	ldr	r3, [pc, #44]	; (1c040 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1c012:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1c014:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1c016:	f7ff feeb 	bl	1bdf0 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1c01a:	4a0a      	ldr	r2, [pc, #40]	; (1c044 <bg_thread_main+0x38>)
   1c01c:	490a      	ldr	r1, [pc, #40]	; (1c048 <bg_thread_main+0x3c>)
   1c01e:	480b      	ldr	r0, [pc, #44]	; (1c04c <bg_thread_main+0x40>)
   1c020:	f001 fa7e 	bl	1d520 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1c024:	2003      	movs	r0, #3
   1c026:	f7ff fee3 	bl	1bdf0 <z_sys_init_run_level>

	z_init_static_threads();
   1c02a:	f000 feef 	bl	1ce0c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1c02e:	f7f1 fa1f 	bl	d470 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1c032:	4a07      	ldr	r2, [pc, #28]	; (1c050 <bg_thread_main+0x44>)
   1c034:	7b13      	ldrb	r3, [r2, #12]
   1c036:	f023 0301 	bic.w	r3, r3, #1
   1c03a:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1c03c:	bd08      	pop	{r3, pc}
   1c03e:	bf00      	nop
   1c040:	200236c7 	.word	0x200236c7
   1c044:	00022cd3 	.word	0x00022cd3
   1c048:	00022d95 	.word	0x00022d95
   1c04c:	00022da1 	.word	0x00022da1
   1c050:	200205a8 	.word	0x200205a8

0001c054 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1c054:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1c058:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1c05a:	f7f2 fbe1 	bl	e820 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1c05e:	4b34      	ldr	r3, [pc, #208]	; (1c130 <z_cstart+0xdc>)
	uint32_t msp =
   1c060:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1c064:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1c068:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c06c:	2400      	movs	r4, #0
   1c06e:	23e0      	movs	r3, #224	; 0xe0
   1c070:	4d30      	ldr	r5, [pc, #192]	; (1c134 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c072:	f04f 0b01 	mov.w	fp, #1
   1c076:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1c07a:	77ec      	strb	r4, [r5, #31]
   1c07c:	762c      	strb	r4, [r5, #24]
   1c07e:	766c      	strb	r4, [r5, #25]
   1c080:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1c082:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   1c084:	4e2c      	ldr	r6, [pc, #176]	; (1c138 <z_cstart+0xe4>)
   1c086:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1c08a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1c08c:	f7f4 f8ac 	bl	101e8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1c090:	f7f3 fd94 	bl	fbbc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1c094:	f04f 33ff 	mov.w	r3, #4294967295
   1c098:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1c09a:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1c09c:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1c0a0:	4d26      	ldr	r5, [pc, #152]	; (1c13c <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1c0a2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1c0a6:	ab06      	add	r3, sp, #24
   1c0a8:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1c0aa:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1c0ac:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   1c0b0:	f7ff fe9e 	bl	1bdf0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1c0b4:	2001      	movs	r0, #1
   1c0b6:	f7ff fe9b 	bl	1bdf0 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c0ba:	f8df a098 	ldr.w	sl, [pc, #152]	; 1c154 <z_cstart+0x100>
	z_sched_init();
   1c0be:	f000 fd61 	bl	1cb84 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c0c2:	4b1f      	ldr	r3, [pc, #124]	; (1c140 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   1c0c4:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c0c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1c0ca:	491e      	ldr	r1, [pc, #120]	; (1c144 <z_cstart+0xf0>)
   1c0cc:	9305      	str	r3, [sp, #20]
   1c0ce:	4630      	mov	r0, r6
   1c0d0:	4653      	mov	r3, sl
   1c0d2:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1c0d6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1c0da:	9400      	str	r4, [sp, #0]
   1c0dc:	f000 fe3a 	bl	1cd54 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c0e0:	7b73      	ldrb	r3, [r6, #13]
   1c0e2:	4680      	mov	r8, r0
   1c0e4:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1c0e8:	4630      	mov	r0, r6
   1c0ea:	7373      	strb	r3, [r6, #13]
   1c0ec:	f004 fa44 	bl	20578 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1c0f0:	230f      	movs	r3, #15
   1c0f2:	4f15      	ldr	r7, [pc, #84]	; (1c148 <z_cstart+0xf4>)
   1c0f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1c0f8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1c0fc:	4913      	ldr	r1, [pc, #76]	; (1c14c <z_cstart+0xf8>)
   1c0fe:	4b14      	ldr	r3, [pc, #80]	; (1c150 <z_cstart+0xfc>)
   1c100:	4638      	mov	r0, r7
   1c102:	e9cd b404 	strd	fp, r4, [sp, #16]
   1c106:	e9cd 4400 	strd	r4, r4, [sp]
   1c10a:	f000 fe23 	bl	1cd54 <z_setup_new_thread>
   1c10e:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1c110:	4652      	mov	r2, sl
   1c112:	f023 0304 	bic.w	r3, r3, #4
   1c116:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1c118:	f105 0318 	add.w	r3, r5, #24
   1c11c:	4641      	mov	r1, r8
   1c11e:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   1c120:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1c124:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   1c126:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1c128:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1c12c:	f7f3 fd20 	bl	fb70 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1c130:	20025470 	.word	0x20025470
   1c134:	e000ed00 	.word	0xe000ed00
   1c138:	200205a8 	.word	0x200205a8
   1c13c:	20021038 	.word	0x20021038
   1c140:	00022dc8 	.word	0x00022dc8
   1c144:	20024330 	.word	0x20024330
   1c148:	200204e0 	.word	0x200204e0
   1c14c:	20025330 	.word	0x20025330
   1c150:	0001bf91 	.word	0x0001bf91
   1c154:	0001c00d 	.word	0x0001c00d

0001c158 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1c158:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1c15a:	4c06      	ldr	r4, [pc, #24]	; (1c174 <statics_init+0x1c>)
   1c15c:	4d06      	ldr	r5, [pc, #24]	; (1c178 <statics_init+0x20>)
   1c15e:	42ac      	cmp	r4, r5
   1c160:	d301      	bcc.n	1c166 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1c162:	2000      	movs	r0, #0
   1c164:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1c166:	4620      	mov	r0, r4
   1c168:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1c16c:	f004 f875 	bl	2025a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1c170:	3414      	adds	r4, #20
   1c172:	e7f4      	b.n	1c15e <statics_init+0x6>
   1c174:	20020104 	.word	0x20020104
   1c178:	20020118 	.word	0x20020118

0001c17c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1c17c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c17e:	4b0e      	ldr	r3, [pc, #56]	; (1c1b8 <init_mem_slab_module+0x3c>)
   1c180:	4c0e      	ldr	r4, [pc, #56]	; (1c1bc <init_mem_slab_module+0x40>)
   1c182:	42a3      	cmp	r3, r4
   1c184:	d301      	bcc.n	1c18a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1c186:	2000      	movs	r0, #0
	return rc;
}
   1c188:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1c18a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1c18e:	ea41 0200 	orr.w	r2, r1, r0
   1c192:	f012 0203 	ands.w	r2, r2, #3
   1c196:	d10b      	bne.n	1c1b0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1c198:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1c19a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1c19c:	42aa      	cmp	r2, r5
   1c19e:	d101      	bne.n	1c1a4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c1a0:	331c      	adds	r3, #28
   1c1a2:	e7ee      	b.n	1c182 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1c1a4:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1c1a6:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   1c1a8:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1c1aa:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1c1ac:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1c1ae:	e7f5      	b.n	1c19c <init_mem_slab_module+0x20>
		return -EINVAL;
   1c1b0:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1c1b4:	e7e8      	b.n	1c188 <init_mem_slab_module+0xc>
   1c1b6:	bf00      	nop
   1c1b8:	20020104 	.word	0x20020104
   1c1bc:	20020104 	.word	0x20020104

0001c1c0 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1c1c0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1c1c2:	460c      	mov	r4, r1
   1c1c4:	4616      	mov	r6, r2
   1c1c6:	461f      	mov	r7, r3
   1c1c8:	f04f 0320 	mov.w	r3, #32
   1c1cc:	f3ef 8111 	mrs	r1, BASEPRI
   1c1d0:	f383 8811 	msr	BASEPRI, r3
   1c1d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1c1d8:	6943      	ldr	r3, [r0, #20]
   1c1da:	b15b      	cbz	r3, 1c1f4 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1c1dc:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1c1de:	681b      	ldr	r3, [r3, #0]
   1c1e0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1c1e2:	6983      	ldr	r3, [r0, #24]
   1c1e4:	3301      	adds	r3, #1
   1c1e6:	6183      	str	r3, [r0, #24]
		result = 0;
   1c1e8:	2000      	movs	r0, #0
	__asm__ volatile(
   1c1ea:	f381 8811 	msr	BASEPRI, r1
   1c1ee:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1c1f2:	e011      	b.n	1c218 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c1f4:	ea56 0207 	orrs.w	r2, r6, r7
   1c1f8:	d103      	bne.n	1c202 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   1c1fa:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   1c1fe:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1c200:	e7f3      	b.n	1c1ea <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1c202:	4602      	mov	r2, r0
   1c204:	e9cd 6700 	strd	r6, r7, [sp]
   1c208:	4804      	ldr	r0, [pc, #16]	; (1c21c <k_mem_slab_alloc+0x5c>)
   1c20a:	f000 fc35 	bl	1ca78 <z_pend_curr>
		if (result == 0) {
   1c20e:	b918      	cbnz	r0, 1c218 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1c210:	4b03      	ldr	r3, [pc, #12]	; (1c220 <k_mem_slab_alloc+0x60>)
   1c212:	689b      	ldr	r3, [r3, #8]
   1c214:	695b      	ldr	r3, [r3, #20]
   1c216:	6023      	str	r3, [r4, #0]
}
   1c218:	b002      	add	sp, #8
   1c21a:	bdd0      	pop	{r4, r6, r7, pc}
   1c21c:	200236c8 	.word	0x200236c8
   1c220:	20021038 	.word	0x20021038

0001c224 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1c224:	b570      	push	{r4, r5, r6, lr}
   1c226:	4604      	mov	r4, r0
   1c228:	460d      	mov	r5, r1
	__asm__ volatile(
   1c22a:	f04f 0320 	mov.w	r3, #32
   1c22e:	f3ef 8611 	mrs	r6, BASEPRI
   1c232:	f383 8811 	msr	BASEPRI, r3
   1c236:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1c23a:	f004 f9f8 	bl	2062e <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1c23e:	b158      	cbz	r0, 1c258 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1c240:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1c242:	682a      	ldr	r2, [r5, #0]
   1c244:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1c246:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   1c248:	f004 f996 	bl	20578 <z_ready_thread>
		z_reschedule(&lock, key);
   1c24c:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1c24e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1c252:	4808      	ldr	r0, [pc, #32]	; (1c274 <k_mem_slab_free+0x50>)
   1c254:	f000 b9f6 	b.w	1c644 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1c258:	682b      	ldr	r3, [r5, #0]
   1c25a:	6962      	ldr	r2, [r4, #20]
   1c25c:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1c25e:	682b      	ldr	r3, [r5, #0]
   1c260:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1c262:	69a3      	ldr	r3, [r4, #24]
   1c264:	3b01      	subs	r3, #1
   1c266:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1c268:	f386 8811 	msr	BASEPRI, r6
   1c26c:	f3bf 8f6f 	isb	sy
}
   1c270:	bd70      	pop	{r4, r5, r6, pc}
   1c272:	bf00      	nop
   1c274:	200236c8 	.word	0x200236c8

0001c278 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   1c278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c27c:	4604      	mov	r4, r0
   1c27e:	4616      	mov	r6, r2
   1c280:	461f      	mov	r7, r3
   1c282:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1c284:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   1c288:	f04f 0320 	mov.w	r3, #32
   1c28c:	f3ef 8811 	mrs	r8, BASEPRI
   1c290:	f383 8811 	msr	BASEPRI, r3
   1c294:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1c298:	6a02      	ldr	r2, [r0, #32]
   1c29a:	68c3      	ldr	r3, [r0, #12]
   1c29c:	429a      	cmp	r2, r3
   1c29e:	d22b      	bcs.n	1c2f8 <z_impl_k_msgq_put+0x80>
   1c2a0:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1c2a2:	f004 f9c4 	bl	2062e <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1c2a6:	9903      	ldr	r1, [sp, #12]
   1c2a8:	4605      	mov	r5, r0
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   1c2aa:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   1c2ac:	b178      	cbz	r0, 1c2ce <z_impl_k_msgq_put+0x56>
   1c2ae:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   1c2b0:	6940      	ldr	r0, [r0, #20]
   1c2b2:	f002 faf0 	bl	1e896 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1c2b6:	4628      	mov	r0, r5
   1c2b8:	67ec      	str	r4, [r5, #124]	; 0x7c
   1c2ba:	f004 f95d 	bl	20578 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1c2be:	4648      	mov	r0, r9
   1c2c0:	4641      	mov	r1, r8
   1c2c2:	f000 f9bf 	bl	1c644 <z_reschedule>
			return 0;
   1c2c6:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1c2c8:	b005      	add	sp, #20
   1c2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1c2ce:	69e0      	ldr	r0, [r4, #28]
   1c2d0:	f002 fae1 	bl	1e896 <memcpy>
		result = 0;
   1c2d4:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   1c2d6:	69e3      	ldr	r3, [r4, #28]
   1c2d8:	68a2      	ldr	r2, [r4, #8]
   1c2da:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1c2dc:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1c2de:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1c2e0:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1c2e2:	bf04      	itt	eq
   1c2e4:	6923      	ldreq	r3, [r4, #16]
   1c2e6:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1c2e8:	6a23      	ldr	r3, [r4, #32]
   1c2ea:	3301      	adds	r3, #1
   1c2ec:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   1c2ee:	f388 8811 	msr	BASEPRI, r8
   1c2f2:	f3bf 8f6f 	isb	sy
	return result;
   1c2f6:	e7e7      	b.n	1c2c8 <z_impl_k_msgq_put+0x50>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c2f8:	ea56 0307 	orrs.w	r3, r6, r7
   1c2fc:	d00a      	beq.n	1c314 <z_impl_k_msgq_put+0x9c>
		_current->base.swap_data = (void *) data;
   1c2fe:	4b07      	ldr	r3, [pc, #28]	; (1c31c <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1c300:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   1c302:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1c304:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   1c306:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1c308:	4641      	mov	r1, r8
   1c30a:	e9cd 6700 	strd	r6, r7, [sp]
   1c30e:	f000 fbb3 	bl	1ca78 <z_pend_curr>
   1c312:	e7d9      	b.n	1c2c8 <z_impl_k_msgq_put+0x50>
		result = -ENOMSG;
   1c314:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   1c318:	e7e9      	b.n	1c2ee <z_impl_k_msgq_put+0x76>
   1c31a:	bf00      	nop
   1c31c:	20021038 	.word	0x20021038

0001c320 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1c320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c324:	4604      	mov	r4, r0
   1c326:	4616      	mov	r6, r2
   1c328:	4608      	mov	r0, r1
   1c32a:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1c32c:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   1c330:	f04f 0320 	mov.w	r3, #32
   1c334:	f3ef 8811 	mrs	r8, BASEPRI
   1c338:	f383 8811 	msr	BASEPRI, r3
   1c33c:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   1c340:	6a23      	ldr	r3, [r4, #32]
   1c342:	2b00      	cmp	r3, #0
   1c344:	d032      	beq.n	1c3ac <z_impl_k_msgq_get+0x8c>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1c346:	68a2      	ldr	r2, [r4, #8]
   1c348:	69a1      	ldr	r1, [r4, #24]
   1c34a:	f002 faa4 	bl	1e896 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1c34e:	69a3      	ldr	r3, [r4, #24]
   1c350:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1c352:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1c354:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1c356:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1c358:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1c35a:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1c35c:	bf04      	itt	eq
   1c35e:	6923      	ldreq	r3, [r4, #16]
   1c360:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   1c362:	6a23      	ldr	r3, [r4, #32]
   1c364:	3b01      	subs	r3, #1
   1c366:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1c368:	f004 f961 	bl	2062e <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1c36c:	4605      	mov	r5, r0
   1c36e:	b368      	cbz	r0, 1c3cc <z_impl_k_msgq_get+0xac>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1c370:	6941      	ldr	r1, [r0, #20]
   1c372:	68a2      	ldr	r2, [r4, #8]
   1c374:	69e0      	ldr	r0, [r4, #28]
   1c376:	f002 fa8e 	bl	1e896 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1c37a:	69e3      	ldr	r3, [r4, #28]
   1c37c:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1c37e:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   1c380:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1c382:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1c384:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1c386:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1c388:	bf04      	itt	eq
   1c38a:	6923      	ldreq	r3, [r4, #16]
   1c38c:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1c38e:	6a23      	ldr	r3, [r4, #32]
   1c390:	3301      	adds	r3, #1
   1c392:	6223      	str	r3, [r4, #32]
   1c394:	2400      	movs	r4, #0
   1c396:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1c398:	f004 f8ee 	bl	20578 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1c39c:	4648      	mov	r0, r9
   1c39e:	4641      	mov	r1, r8
   1c3a0:	f000 f950 	bl	1c644 <z_reschedule>
			return 0;
   1c3a4:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1c3a6:	b003      	add	sp, #12
   1c3a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c3ac:	ea56 0307 	orrs.w	r3, r6, r7
   1c3b0:	d00a      	beq.n	1c3c8 <z_impl_k_msgq_get+0xa8>
		_current->base.swap_data = data;
   1c3b2:	4b09      	ldr	r3, [pc, #36]	; (1c3d8 <z_impl_k_msgq_get+0xb8>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1c3b4:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   1c3b6:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1c3b8:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   1c3ba:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1c3bc:	4641      	mov	r1, r8
   1c3be:	e9cd 6700 	strd	r6, r7, [sp]
   1c3c2:	f000 fb59 	bl	1ca78 <z_pend_curr>
   1c3c6:	e7ee      	b.n	1c3a6 <z_impl_k_msgq_get+0x86>
		result = -ENOMSG;
   1c3c8:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   1c3cc:	f388 8811 	msr	BASEPRI, r8
   1c3d0:	f3bf 8f6f 	isb	sy
	return result;
   1c3d4:	e7e7      	b.n	1c3a6 <z_impl_k_msgq_get+0x86>
   1c3d6:	bf00      	nop
   1c3d8:	20021038 	.word	0x20021038

0001c3dc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1c3dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c3e0:	4604      	mov	r4, r0
   1c3e2:	4616      	mov	r6, r2
   1c3e4:	461f      	mov	r7, r3
	__asm__ volatile(
   1c3e6:	f04f 0320 	mov.w	r3, #32
   1c3ea:	f3ef 8811 	mrs	r8, BASEPRI
   1c3ee:	f383 8811 	msr	BASEPRI, r3
   1c3f2:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1c3f6:	68c3      	ldr	r3, [r0, #12]
   1c3f8:	4a32      	ldr	r2, [pc, #200]	; (1c4c4 <z_impl_k_mutex_lock+0xe8>)
   1c3fa:	b16b      	cbz	r3, 1c418 <z_impl_k_mutex_lock+0x3c>
   1c3fc:	6880      	ldr	r0, [r0, #8]
   1c3fe:	6891      	ldr	r1, [r2, #8]
   1c400:	4288      	cmp	r0, r1
   1c402:	d019      	beq.n	1c438 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1c404:	ea56 0307 	orrs.w	r3, r6, r7
   1c408:	d118      	bne.n	1c43c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1c40a:	f388 8811 	msr	BASEPRI, r8
   1c40e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1c412:	f06f 000f 	mvn.w	r0, #15
   1c416:	e00c      	b.n	1c432 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1c418:	6891      	ldr	r1, [r2, #8]
   1c41a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1c41e:	3301      	adds	r3, #1
   1c420:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1c422:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1c424:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1c426:	60a3      	str	r3, [r4, #8]
   1c428:	f388 8811 	msr	BASEPRI, r8
   1c42c:	f3bf 8f6f 	isb	sy
		return 0;
   1c430:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1c432:	b002      	add	sp, #8
   1c434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1c438:	6921      	ldr	r1, [r4, #16]
   1c43a:	e7f0      	b.n	1c41e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1c43c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c440:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1c444:	4299      	cmp	r1, r3
   1c446:	bfa8      	it	ge
   1c448:	4619      	movge	r1, r3
   1c44a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1c44e:	428b      	cmp	r3, r1
   1c450:	dd2c      	ble.n	1c4ac <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1c452:	f000 fb53 	bl	1cafc <z_set_prio>
   1c456:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1c458:	4622      	mov	r2, r4
   1c45a:	4641      	mov	r1, r8
   1c45c:	e9cd 6700 	strd	r6, r7, [sp]
   1c460:	4819      	ldr	r0, [pc, #100]	; (1c4c8 <z_impl_k_mutex_lock+0xec>)
   1c462:	f000 fb09 	bl	1ca78 <z_pend_curr>
	if (got_mutex == 0) {
   1c466:	2800      	cmp	r0, #0
   1c468:	d0e3      	beq.n	1c432 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1c46a:	f04f 0320 	mov.w	r3, #32
   1c46e:	f3ef 8611 	mrs	r6, BASEPRI
   1c472:	f383 8811 	msr	BASEPRI, r3
   1c476:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1c47a:	6823      	ldr	r3, [r4, #0]
   1c47c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c47e:	42a3      	cmp	r3, r4
   1c480:	d007      	beq.n	1c492 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1c482:	b133      	cbz	r3, 1c492 <z_impl_k_mutex_lock+0xb6>
   1c484:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1c488:	4299      	cmp	r1, r3
   1c48a:	bfa8      	it	ge
   1c48c:	4619      	movge	r1, r3
   1c48e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c492:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1c494:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c498:	4299      	cmp	r1, r3
   1c49a:	d109      	bne.n	1c4b0 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1c49c:	b16d      	cbz	r5, 1c4ba <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1c49e:	4631      	mov	r1, r6
   1c4a0:	4809      	ldr	r0, [pc, #36]	; (1c4c8 <z_impl_k_mutex_lock+0xec>)
   1c4a2:	f000 f8cf 	bl	1c644 <z_reschedule>
	return -EAGAIN;
   1c4a6:	f06f 000a 	mvn.w	r0, #10
   1c4aa:	e7c2      	b.n	1c432 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1c4ac:	2500      	movs	r5, #0
   1c4ae:	e7d3      	b.n	1c458 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1c4b0:	f000 fb24 	bl	1cafc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c4b4:	2800      	cmp	r0, #0
   1c4b6:	d1f2      	bne.n	1c49e <z_impl_k_mutex_lock+0xc2>
   1c4b8:	e7f0      	b.n	1c49c <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1c4ba:	f386 8811 	msr	BASEPRI, r6
   1c4be:	f3bf 8f6f 	isb	sy
   1c4c2:	e7f0      	b.n	1c4a6 <z_impl_k_mutex_lock+0xca>
   1c4c4:	20021038 	.word	0x20021038
   1c4c8:	200236c8 	.word	0x200236c8

0001c4cc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1c4cc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1c4ce:	6883      	ldr	r3, [r0, #8]
{
   1c4d0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1c4d2:	2b00      	cmp	r3, #0
   1c4d4:	d036      	beq.n	1c544 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1c4d6:	4a1e      	ldr	r2, [pc, #120]	; (1c550 <z_impl_k_mutex_unlock+0x84>)
   1c4d8:	6892      	ldr	r2, [r2, #8]
   1c4da:	4293      	cmp	r3, r2
   1c4dc:	d135      	bne.n	1c54a <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1c4de:	7bda      	ldrb	r2, [r3, #15]
   1c4e0:	3a01      	subs	r2, #1
   1c4e2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1c4e4:	68c3      	ldr	r3, [r0, #12]
   1c4e6:	2b01      	cmp	r3, #1
   1c4e8:	d005      	beq.n	1c4f6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1c4ea:	3b01      	subs	r3, #1
   1c4ec:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1c4ee:	f000 f909 	bl	1c704 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1c4f2:	2000      	movs	r0, #0
}
   1c4f4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1c4f6:	f04f 0320 	mov.w	r3, #32
   1c4fa:	f3ef 8511 	mrs	r5, BASEPRI
   1c4fe:	f383 8811 	msr	BASEPRI, r3
   1c502:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1c506:	6901      	ldr	r1, [r0, #16]
   1c508:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1c50a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c50e:	4299      	cmp	r1, r3
   1c510:	d001      	beq.n	1c516 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1c512:	f000 faf3 	bl	1cafc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1c516:	4620      	mov	r0, r4
   1c518:	f004 f889 	bl	2062e <z_unpend_first_thread>
	mutex->owner = new_owner;
   1c51c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1c51e:	b158      	cbz	r0, 1c538 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1c520:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1c524:	6122      	str	r2, [r4, #16]
   1c526:	2200      	movs	r2, #0
   1c528:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1c52a:	f004 f825 	bl	20578 <z_ready_thread>
		z_reschedule(&lock, key);
   1c52e:	4629      	mov	r1, r5
   1c530:	4808      	ldr	r0, [pc, #32]	; (1c554 <z_impl_k_mutex_unlock+0x88>)
   1c532:	f000 f887 	bl	1c644 <z_reschedule>
   1c536:	e7da      	b.n	1c4ee <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1c538:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1c53a:	f385 8811 	msr	BASEPRI, r5
   1c53e:	f3bf 8f6f 	isb	sy
   1c542:	e7d4      	b.n	1c4ee <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1c544:	f06f 0015 	mvn.w	r0, #21
   1c548:	e7d4      	b.n	1c4f4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1c54a:	f04f 30ff 	mov.w	r0, #4294967295
   1c54e:	e7d1      	b.n	1c4f4 <z_impl_k_mutex_unlock+0x28>
   1c550:	20021038 	.word	0x20021038
   1c554:	200236c8 	.word	0x200236c8

0001c558 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1c558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c55a:	4616      	mov	r6, r2
   1c55c:	461f      	mov	r7, r3
	__asm__ volatile(
   1c55e:	f04f 0320 	mov.w	r3, #32
   1c562:	f3ef 8511 	mrs	r5, BASEPRI
   1c566:	f383 8811 	msr	BASEPRI, r3
   1c56a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1c56e:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1c570:	b19c      	cbz	r4, 1c59a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c572:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1c574:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c576:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1c57a:	4294      	cmp	r4, r2
	list->head = node;
   1c57c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1c57e:	bf08      	it	eq
   1c580:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1c582:	2101      	movs	r1, #1
   1c584:	4620      	mov	r0, r4
   1c586:	f003 ff6f 	bl	20468 <z_queue_node_peek>
   1c58a:	4604      	mov	r4, r0
	__asm__ volatile(
   1c58c:	f385 8811 	msr	BASEPRI, r5
   1c590:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1c594:	4620      	mov	r0, r4
   1c596:	b003      	add	sp, #12
   1c598:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c59a:	ea56 0307 	orrs.w	r3, r6, r7
   1c59e:	d0f5      	beq.n	1c58c <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1c5a0:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1c5a4:	4629      	mov	r1, r5
   1c5a6:	4610      	mov	r0, r2
   1c5a8:	e9cd 6700 	strd	r6, r7, [sp]
   1c5ac:	f000 fa64 	bl	1ca78 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1c5b0:	2800      	cmp	r0, #0
   1c5b2:	d1ef      	bne.n	1c594 <z_impl_k_queue_get+0x3c>
   1c5b4:	4b01      	ldr	r3, [pc, #4]	; (1c5bc <z_impl_k_queue_get+0x64>)
   1c5b6:	689b      	ldr	r3, [r3, #8]
   1c5b8:	695c      	ldr	r4, [r3, #20]
   1c5ba:	e7eb      	b.n	1c594 <z_impl_k_queue_get+0x3c>
   1c5bc:	20021038 	.word	0x20021038

0001c5c0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1c5c0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1c5c2:	4c08      	ldr	r4, [pc, #32]	; (1c5e4 <z_reset_time_slice+0x24>)
   1c5c4:	6823      	ldr	r3, [r4, #0]
   1c5c6:	b15b      	cbz	r3, 1c5e0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1c5c8:	f7f3 f9bc 	bl	f944 <z_clock_elapsed>
   1c5cc:	6822      	ldr	r2, [r4, #0]
   1c5ce:	4906      	ldr	r1, [pc, #24]	; (1c5e8 <z_reset_time_slice+0x28>)
   1c5d0:	4410      	add	r0, r2
   1c5d2:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   1c5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1c5d8:	2100      	movs	r1, #0
   1c5da:	4610      	mov	r0, r2
   1c5dc:	f004 b903 	b.w	207e6 <z_set_timeout_expiry>
}
   1c5e0:	bd10      	pop	{r4, pc}
   1c5e2:	bf00      	nop
   1c5e4:	20021074 	.word	0x20021074
   1c5e8:	20021038 	.word	0x20021038

0001c5ec <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c5ee:	460c      	mov	r4, r1
	__asm__ volatile(
   1c5f0:	f04f 0320 	mov.w	r3, #32
   1c5f4:	f3ef 8511 	mrs	r5, BASEPRI
   1c5f8:	f383 8811 	msr	BASEPRI, r3
   1c5fc:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   1c600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1c604:	f240 36e7 	movw	r6, #999	; 0x3e7
   1c608:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1c60a:	2200      	movs	r2, #0
   1c60c:	fbe1 6700 	umlal	r6, r7, r1, r0
   1c610:	4b09      	ldr	r3, [pc, #36]	; (1c638 <k_sched_time_slice_set+0x4c>)
   1c612:	4630      	mov	r0, r6
   1c614:	611a      	str	r2, [r3, #16]
   1c616:	4639      	mov	r1, r7
   1c618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c61c:	2300      	movs	r3, #0
   1c61e:	f7f0 f945 	bl	c8ac <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1c622:	4b06      	ldr	r3, [pc, #24]	; (1c63c <k_sched_time_slice_set+0x50>)
   1c624:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1c626:	4b06      	ldr	r3, [pc, #24]	; (1c640 <k_sched_time_slice_set+0x54>)
   1c628:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1c62a:	f7ff ffc9 	bl	1c5c0 <z_reset_time_slice>
	__asm__ volatile(
   1c62e:	f385 8811 	msr	BASEPRI, r5
   1c632:	f3bf 8f6f 	isb	sy
	}
}
   1c636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c638:	20021038 	.word	0x20021038
   1c63c:	20021074 	.word	0x20021074
   1c640:	20021070 	.word	0x20021070

0001c644 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1c644:	b949      	cbnz	r1, 1c65a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c646:	f3ef 8005 	mrs	r0, IPSR
   1c64a:	b930      	cbnz	r0, 1c65a <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1c64c:	4b05      	ldr	r3, [pc, #20]	; (1c664 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1c64e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1c650:	689b      	ldr	r3, [r3, #8]
   1c652:	429a      	cmp	r2, r3
   1c654:	d001      	beq.n	1c65a <z_reschedule+0x16>
	ret = arch_swap(key);
   1c656:	f7f3 b9a9 	b.w	f9ac <arch_swap>
   1c65a:	f381 8811 	msr	BASEPRI, r1
   1c65e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1c662:	4770      	bx	lr
   1c664:	20021038 	.word	0x20021038

0001c668 <k_sched_lock>:
	__asm__ volatile(
   1c668:	f04f 0320 	mov.w	r3, #32
   1c66c:	f3ef 8111 	mrs	r1, BASEPRI
   1c670:	f383 8811 	msr	BASEPRI, r3
   1c674:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1c678:	4b04      	ldr	r3, [pc, #16]	; (1c68c <k_sched_lock+0x24>)
   1c67a:	689a      	ldr	r2, [r3, #8]
   1c67c:	7bd3      	ldrb	r3, [r2, #15]
   1c67e:	3b01      	subs	r3, #1
   1c680:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1c682:	f381 8811 	msr	BASEPRI, r1
   1c686:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1c68a:	4770      	bx	lr
   1c68c:	20021038 	.word	0x20021038

0001c690 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1c690:	4b09      	ldr	r3, [pc, #36]	; (1c6b8 <z_priq_dumb_remove+0x28>)
   1c692:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1c696:	4282      	cmp	r2, r0
   1c698:	d105      	bne.n	1c6a6 <z_priq_dumb_remove+0x16>
   1c69a:	689b      	ldr	r3, [r3, #8]
   1c69c:	428b      	cmp	r3, r1
   1c69e:	d102      	bne.n	1c6a6 <z_priq_dumb_remove+0x16>
   1c6a0:	7b4b      	ldrb	r3, [r1, #13]
   1c6a2:	06db      	lsls	r3, r3, #27
   1c6a4:	d106      	bne.n	1c6b4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1c6a6:	e9d1 3200 	ldrd	r3, r2, [r1]
   1c6aa:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c6ac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c6ae:	2300      	movs	r3, #0
	node->prev = NULL;
   1c6b0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1c6b4:	4770      	bx	lr
   1c6b6:	bf00      	nop
   1c6b8:	20021038 	.word	0x20021038

0001c6bc <update_cache>:
{
   1c6bc:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1c6be:	4c10      	ldr	r4, [pc, #64]	; (1c700 <update_cache+0x44>)
{
   1c6c0:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1c6c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1c6c6:	f003 ff4d 	bl	20564 <z_priq_dumb_best>
   1c6ca:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1c6cc:	68a3      	ldr	r3, [r4, #8]
   1c6ce:	7b59      	ldrb	r1, [r3, #13]
   1c6d0:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1c6d2:	bf44      	itt	mi
   1c6d4:	f041 0108 	orrmi.w	r1, r1, #8
   1c6d8:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1c6da:	b905      	cbnz	r5, 1c6de <update_cache+0x22>
   1c6dc:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1c6de:	b94e      	cbnz	r6, 1c6f4 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   1c6e0:	7b5a      	ldrb	r2, [r3, #13]
   1c6e2:	06d2      	lsls	r2, r2, #27
   1c6e4:	d106      	bne.n	1c6f4 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1c6e6:	69aa      	ldr	r2, [r5, #24]
   1c6e8:	b922      	cbnz	r2, 1c6f4 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1c6ea:	89da      	ldrh	r2, [r3, #14]
   1c6ec:	2a7f      	cmp	r2, #127	; 0x7f
   1c6ee:	d901      	bls.n	1c6f4 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   1c6f0:	6263      	str	r3, [r4, #36]	; 0x24
}
   1c6f2:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   1c6f4:	42ab      	cmp	r3, r5
   1c6f6:	d001      	beq.n	1c6fc <update_cache+0x40>
			z_reset_time_slice();
   1c6f8:	f7ff ff62 	bl	1c5c0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1c6fc:	6265      	str	r5, [r4, #36]	; 0x24
}
   1c6fe:	e7f8      	b.n	1c6f2 <update_cache+0x36>
   1c700:	20021038 	.word	0x20021038

0001c704 <k_sched_unlock>:
{
   1c704:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c706:	f04f 0320 	mov.w	r3, #32
   1c70a:	f3ef 8411 	mrs	r4, BASEPRI
   1c70e:	f383 8811 	msr	BASEPRI, r3
   1c712:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1c716:	4b08      	ldr	r3, [pc, #32]	; (1c738 <k_sched_unlock+0x34>)
		update_cache(0);
   1c718:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1c71a:	689a      	ldr	r2, [r3, #8]
   1c71c:	7bd3      	ldrb	r3, [r2, #15]
   1c71e:	3301      	adds	r3, #1
   1c720:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1c722:	f7ff ffcb 	bl	1c6bc <update_cache>
	__asm__ volatile(
   1c726:	f384 8811 	msr	BASEPRI, r4
   1c72a:	f3bf 8f6f 	isb	sy
}
   1c72e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1c732:	f003 beeb 	b.w	2050c <z_reschedule_unlocked>
   1c736:	bf00      	nop
   1c738:	20021038 	.word	0x20021038

0001c73c <ready_thread>:
{
   1c73c:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c73e:	7b43      	ldrb	r3, [r0, #13]
   1c740:	06db      	lsls	r3, r3, #27
   1c742:	d12a      	bne.n	1c79a <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1c744:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   1c746:	bb43      	cbnz	r3, 1c79a <ready_thread+0x5e>
	return list->head == list;
   1c748:	4a15      	ldr	r2, [pc, #84]	; (1c7a0 <ready_thread+0x64>)
   1c74a:	4611      	mov	r1, r2
   1c74c:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c750:	428c      	cmp	r4, r1
   1c752:	bf18      	it	ne
   1c754:	4623      	movne	r3, r4
   1c756:	2b00      	cmp	r3, #0
   1c758:	bf38      	it	cc
   1c75a:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c75c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c75e:	b1b3      	cbz	r3, 1c78e <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   1c760:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1c764:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1c768:	42ae      	cmp	r6, r5
   1c76a:	db03      	blt.n	1c774 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   1c76c:	42a3      	cmp	r3, r4
   1c76e:	d00e      	beq.n	1c78e <ready_thread+0x52>
   1c770:	681b      	ldr	r3, [r3, #0]
   1c772:	e7f4      	b.n	1c75e <ready_thread+0x22>
	node->prev = successor->prev;
   1c774:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c776:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1c77a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1c77c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1c77e:	7b43      	ldrb	r3, [r0, #13]
   1c780:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c784:	7343      	strb	r3, [r0, #13]
}
   1c786:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1c788:	2000      	movs	r0, #0
   1c78a:	f7ff bf97 	b.w	1c6bc <update_cache>
	node->prev = list->tail;
   1c78e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1c792:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c794:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1c796:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1c798:	e7f1      	b.n	1c77e <ready_thread+0x42>
}
   1c79a:	bc70      	pop	{r4, r5, r6}
   1c79c:	4770      	bx	lr
   1c79e:	bf00      	nop
   1c7a0:	20021038 	.word	0x20021038

0001c7a4 <z_sched_start>:
{
   1c7a4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c7a6:	f04f 0220 	mov.w	r2, #32
   1c7aa:	f3ef 8411 	mrs	r4, BASEPRI
   1c7ae:	f382 8811 	msr	BASEPRI, r2
   1c7b2:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1c7b6:	7b42      	ldrb	r2, [r0, #13]
   1c7b8:	0751      	lsls	r1, r2, #29
   1c7ba:	d404      	bmi.n	1c7c6 <z_sched_start+0x22>
	__asm__ volatile(
   1c7bc:	f384 8811 	msr	BASEPRI, r4
   1c7c0:	f3bf 8f6f 	isb	sy
}
   1c7c4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c7c6:	f022 0204 	bic.w	r2, r2, #4
   1c7ca:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1c7cc:	f7ff ffb6 	bl	1c73c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1c7d0:	4621      	mov	r1, r4
}
   1c7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1c7d6:	4801      	ldr	r0, [pc, #4]	; (1c7dc <z_sched_start+0x38>)
   1c7d8:	f7ff bf34 	b.w	1c644 <z_reschedule>
   1c7dc:	200236c8 	.word	0x200236c8

0001c7e0 <move_thread_to_end_of_prio_q>:
{
   1c7e0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1c7e2:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1c7e6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1c7e8:	2b00      	cmp	r3, #0
   1c7ea:	da02      	bge.n	1c7f2 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c7ec:	4817      	ldr	r0, [pc, #92]	; (1c84c <move_thread_to_end_of_prio_q+0x6c>)
   1c7ee:	f7ff ff4f 	bl	1c690 <z_priq_dumb_remove>
	return list->head == list;
   1c7f2:	4a17      	ldr	r2, [pc, #92]	; (1c850 <move_thread_to_end_of_prio_q+0x70>)
   1c7f4:	4610      	mov	r0, r2
   1c7f6:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c7fa:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c7fc:	4283      	cmp	r3, r0
   1c7fe:	bf08      	it	eq
   1c800:	2300      	moveq	r3, #0
   1c802:	2b00      	cmp	r3, #0
   1c804:	bf38      	it	cc
   1c806:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c808:	b1d3      	cbz	r3, 1c840 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1c80a:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1c80e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1c812:	42ae      	cmp	r6, r5
   1c814:	db03      	blt.n	1c81e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1c816:	42a3      	cmp	r3, r4
   1c818:	d012      	beq.n	1c840 <move_thread_to_end_of_prio_q+0x60>
   1c81a:	681b      	ldr	r3, [r3, #0]
   1c81c:	e7f4      	b.n	1c808 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1c81e:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1c820:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1c824:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1c826:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1c828:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1c82a:	6890      	ldr	r0, [r2, #8]
   1c82c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c830:	734b      	strb	r3, [r1, #13]
   1c832:	1a43      	subs	r3, r0, r1
   1c834:	4258      	negs	r0, r3
   1c836:	4158      	adcs	r0, r3
}
   1c838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1c83c:	f7ff bf3e 	b.w	1c6bc <update_cache>
	node->prev = list->tail;
   1c840:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1c844:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c846:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1c848:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1c84a:	e7ed      	b.n	1c828 <move_thread_to_end_of_prio_q+0x48>
   1c84c:	20021060 	.word	0x20021060
   1c850:	20021038 	.word	0x20021038

0001c854 <z_time_slice>:
{
   1c854:	4601      	mov	r1, r0
   1c856:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1c858:	f04f 0320 	mov.w	r3, #32
   1c85c:	f3ef 8411 	mrs	r4, BASEPRI
   1c860:	f383 8811 	msr	BASEPRI, r3
   1c864:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1c868:	4b16      	ldr	r3, [pc, #88]	; (1c8c4 <z_time_slice+0x70>)
   1c86a:	4a17      	ldr	r2, [pc, #92]	; (1c8c8 <z_time_slice+0x74>)
   1c86c:	6898      	ldr	r0, [r3, #8]
   1c86e:	6815      	ldr	r5, [r2, #0]
   1c870:	42a8      	cmp	r0, r5
   1c872:	461d      	mov	r5, r3
   1c874:	d106      	bne.n	1c884 <z_time_slice+0x30>
			z_reset_time_slice();
   1c876:	f7ff fea3 	bl	1c5c0 <z_reset_time_slice>
	__asm__ volatile(
   1c87a:	f384 8811 	msr	BASEPRI, r4
   1c87e:	f3bf 8f6f 	isb	sy
}
   1c882:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1c884:	2600      	movs	r6, #0
   1c886:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1c888:	4a10      	ldr	r2, [pc, #64]	; (1c8cc <z_time_slice+0x78>)
   1c88a:	6812      	ldr	r2, [r2, #0]
   1c88c:	b1ba      	cbz	r2, 1c8be <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1c88e:	89c2      	ldrh	r2, [r0, #14]
   1c890:	2a7f      	cmp	r2, #127	; 0x7f
   1c892:	d814      	bhi.n	1c8be <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1c894:	7b42      	ldrb	r2, [r0, #13]
   1c896:	06d2      	lsls	r2, r2, #27
   1c898:	d111      	bne.n	1c8be <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1c89a:	4a0d      	ldr	r2, [pc, #52]	; (1c8d0 <z_time_slice+0x7c>)
   1c89c:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1c8a0:	6812      	ldr	r2, [r2, #0]
   1c8a2:	4296      	cmp	r6, r2
   1c8a4:	db0b      	blt.n	1c8be <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1c8a6:	4a0b      	ldr	r2, [pc, #44]	; (1c8d4 <z_time_slice+0x80>)
   1c8a8:	4290      	cmp	r0, r2
   1c8aa:	d008      	beq.n	1c8be <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1c8ac:	691a      	ldr	r2, [r3, #16]
   1c8ae:	428a      	cmp	r2, r1
   1c8b0:	dc02      	bgt.n	1c8b8 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1c8b2:	f7ff ff95 	bl	1c7e0 <move_thread_to_end_of_prio_q>
   1c8b6:	e7de      	b.n	1c876 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1c8b8:	1a52      	subs	r2, r2, r1
   1c8ba:	611a      	str	r2, [r3, #16]
   1c8bc:	e7dd      	b.n	1c87a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1c8be:	2300      	movs	r3, #0
   1c8c0:	612b      	str	r3, [r5, #16]
   1c8c2:	e7da      	b.n	1c87a <z_time_slice+0x26>
   1c8c4:	20021038 	.word	0x20021038
   1c8c8:	2002106c 	.word	0x2002106c
   1c8cc:	20021074 	.word	0x20021074
   1c8d0:	20021070 	.word	0x20021070
   1c8d4:	200204e0 	.word	0x200204e0

0001c8d8 <z_impl_k_thread_suspend>:
{
   1c8d8:	b570      	push	{r4, r5, r6, lr}
   1c8da:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1c8dc:	3018      	adds	r0, #24
   1c8de:	f003 ff5c 	bl	2079a <z_abort_timeout>
	__asm__ volatile(
   1c8e2:	f04f 0320 	mov.w	r3, #32
   1c8e6:	f3ef 8611 	mrs	r6, BASEPRI
   1c8ea:	f383 8811 	msr	BASEPRI, r3
   1c8ee:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1c8f2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1c8f6:	2b00      	cmp	r3, #0
   1c8f8:	da07      	bge.n	1c90a <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1c8fa:	4621      	mov	r1, r4
   1c8fc:	480e      	ldr	r0, [pc, #56]	; (1c938 <z_impl_k_thread_suspend+0x60>)
   1c8fe:	f7ff fec7 	bl	1c690 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1c902:	7b63      	ldrb	r3, [r4, #13]
   1c904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c908:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1c90a:	4d0c      	ldr	r5, [pc, #48]	; (1c93c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c90c:	7b63      	ldrb	r3, [r4, #13]
   1c90e:	68a8      	ldr	r0, [r5, #8]
   1c910:	f043 0310 	orr.w	r3, r3, #16
   1c914:	7363      	strb	r3, [r4, #13]
   1c916:	1b03      	subs	r3, r0, r4
   1c918:	4258      	negs	r0, r3
   1c91a:	4158      	adcs	r0, r3
   1c91c:	f7ff fece 	bl	1c6bc <update_cache>
	__asm__ volatile(
   1c920:	f386 8811 	msr	BASEPRI, r6
   1c924:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1c928:	68ab      	ldr	r3, [r5, #8]
   1c92a:	42a3      	cmp	r3, r4
   1c92c:	d103      	bne.n	1c936 <z_impl_k_thread_suspend+0x5e>
}
   1c92e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1c932:	f003 bdeb 	b.w	2050c <z_reschedule_unlocked>
}
   1c936:	bd70      	pop	{r4, r5, r6, pc}
   1c938:	20021060 	.word	0x20021060
   1c93c:	20021038 	.word	0x20021038

0001c940 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1c940:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   1c942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c946:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1c948:	b103      	cbz	r3, 1c94c <z_thread_single_abort+0xc>
		thread->fn_abort();
   1c94a:	4798      	blx	r3
   1c94c:	f104 0018 	add.w	r0, r4, #24
   1c950:	f003 ff23 	bl	2079a <z_abort_timeout>
	__asm__ volatile(
   1c954:	f04f 0320 	mov.w	r3, #32
   1c958:	f3ef 8611 	mrs	r6, BASEPRI
   1c95c:	f383 8811 	msr	BASEPRI, r3
   1c960:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1c964:	7b63      	ldrb	r3, [r4, #13]
   1c966:	06d8      	lsls	r0, r3, #27
   1c968:	d123      	bne.n	1c9b2 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   1c96a:	69a2      	ldr	r2, [r4, #24]
   1c96c:	bb0a      	cbnz	r2, 1c9b2 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   1c96e:	0619      	lsls	r1, r3, #24
   1c970:	d507      	bpl.n	1c982 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1c972:	4621      	mov	r1, r4
   1c974:	481e      	ldr	r0, [pc, #120]	; (1c9f0 <z_thread_single_abort+0xb0>)
   1c976:	f7ff fe8b 	bl	1c690 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1c97a:	7b63      	ldrb	r3, [r4, #13]
   1c97c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c980:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1c982:	4b1c      	ldr	r3, [pc, #112]	; (1c9f4 <z_thread_single_abort+0xb4>)
   1c984:	6898      	ldr	r0, [r3, #8]
   1c986:	1b02      	subs	r2, r0, r4
   1c988:	4250      	negs	r0, r2
   1c98a:	4150      	adcs	r0, r2
   1c98c:	f7ff fe96 	bl	1c6bc <update_cache>
			waiter->base.pended_on = NULL;
   1c990:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   1c992:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1c994:	f104 0830 	add.w	r8, r4, #48	; 0x30
   1c998:	f043 0308 	orr.w	r3, r3, #8
   1c99c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1c99e:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c9a0:	4545      	cmp	r5, r8
   1c9a2:	d000      	beq.n	1c9a6 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1c9a4:	b995      	cbnz	r5, 1c9cc <z_thread_single_abort+0x8c>
	__asm__ volatile(
   1c9a6:	f386 8811 	msr	BASEPRI, r6
   1c9aa:	f3bf 8f6f 	isb	sy
}
   1c9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   1c9b2:	079b      	lsls	r3, r3, #30
   1c9b4:	d5ec      	bpl.n	1c990 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1c9b6:	4621      	mov	r1, r4
   1c9b8:	68a0      	ldr	r0, [r4, #8]
   1c9ba:	f7ff fe69 	bl	1c690 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c9be:	7b63      	ldrb	r3, [r4, #13]
   1c9c0:	f023 0302 	bic.w	r3, r3, #2
   1c9c4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1c9c6:	2300      	movs	r3, #0
   1c9c8:	60a3      	str	r3, [r4, #8]
   1c9ca:	e7e1      	b.n	1c990 <z_thread_single_abort+0x50>
   1c9cc:	f105 0018 	add.w	r0, r5, #24
   1c9d0:	f003 fee3 	bl	2079a <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1c9d4:	68a8      	ldr	r0, [r5, #8]
   1c9d6:	4629      	mov	r1, r5
   1c9d8:	f7ff fe5a 	bl	1c690 <z_priq_dumb_remove>
   1c9dc:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1c9de:	4628      	mov	r0, r5
   1c9e0:	f023 0302 	bic.w	r3, r3, #2
   1c9e4:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1c9e6:	60af      	str	r7, [r5, #8]
   1c9e8:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   1c9ea:	f7ff fea7 	bl	1c73c <ready_thread>
   1c9ee:	e7d6      	b.n	1c99e <z_thread_single_abort+0x5e>
   1c9f0:	20021060 	.word	0x20021060
   1c9f4:	20021038 	.word	0x20021038

0001c9f8 <unready_thread>:
{
   1c9f8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1c9fa:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1c9fe:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ca00:	2b00      	cmp	r3, #0
   1ca02:	da06      	bge.n	1ca12 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1ca04:	4807      	ldr	r0, [pc, #28]	; (1ca24 <unready_thread+0x2c>)
   1ca06:	f7ff fe43 	bl	1c690 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1ca0a:	7b4b      	ldrb	r3, [r1, #13]
   1ca0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ca10:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1ca12:	4b05      	ldr	r3, [pc, #20]	; (1ca28 <unready_thread+0x30>)
   1ca14:	6898      	ldr	r0, [r3, #8]
   1ca16:	1a43      	subs	r3, r0, r1
   1ca18:	4258      	negs	r0, r3
   1ca1a:	4158      	adcs	r0, r3
}
   1ca1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1ca20:	f7ff be4c 	b.w	1c6bc <update_cache>
   1ca24:	20021060 	.word	0x20021060
   1ca28:	20021038 	.word	0x20021038

0001ca2c <pend>:
{
   1ca2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca30:	4606      	mov	r6, r0
   1ca32:	4614      	mov	r4, r2
   1ca34:	461d      	mov	r5, r3
	__asm__ volatile(
   1ca36:	f04f 0320 	mov.w	r3, #32
   1ca3a:	f3ef 8711 	mrs	r7, BASEPRI
   1ca3e:	f383 8811 	msr	BASEPRI, r3
   1ca42:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1ca46:	f003 fdc7 	bl	205d8 <add_to_waitq_locked>
	__asm__ volatile(
   1ca4a:	f387 8811 	msr	BASEPRI, r7
   1ca4e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ca52:	1c6b      	adds	r3, r5, #1
   1ca54:	bf08      	it	eq
   1ca56:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1ca5a:	d008      	beq.n	1ca6e <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1ca5c:	4622      	mov	r2, r4
   1ca5e:	462b      	mov	r3, r5
   1ca60:	f106 0018 	add.w	r0, r6, #24
   1ca64:	4903      	ldr	r1, [pc, #12]	; (1ca74 <pend+0x48>)
}
   1ca66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ca6a:	f000 bae1 	b.w	1d030 <z_add_timeout>
   1ca6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ca72:	bf00      	nop
   1ca74:	00020599 	.word	0x00020599

0001ca78 <z_pend_curr>:
{
   1ca78:	b510      	push	{r4, lr}
   1ca7a:	460c      	mov	r4, r1
	pending_current = _current;
   1ca7c:	4b06      	ldr	r3, [pc, #24]	; (1ca98 <z_pend_curr+0x20>)
{
   1ca7e:	4611      	mov	r1, r2
	pending_current = _current;
   1ca80:	6898      	ldr	r0, [r3, #8]
   1ca82:	4b06      	ldr	r3, [pc, #24]	; (1ca9c <z_pend_curr+0x24>)
   1ca84:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1ca86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ca8a:	f7ff ffcf 	bl	1ca2c <pend>
   1ca8e:	4620      	mov	r0, r4
}
   1ca90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ca94:	f7f2 bf8a 	b.w	f9ac <arch_swap>
   1ca98:	20021038 	.word	0x20021038
   1ca9c:	2002106c 	.word	0x2002106c

0001caa0 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   1caa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1caa2:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1caa4:	f003 feba 	bl	2081c <z_tick_get_32>
   1caa8:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1caaa:	f04f 0320 	mov.w	r3, #32
   1caae:	f3ef 8711 	mrs	r7, BASEPRI
   1cab2:	f383 8811 	msr	BASEPRI, r3
   1cab6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1caba:	4e0d      	ldr	r6, [pc, #52]	; (1caf0 <z_tick_sleep.part.0+0x50>)
   1cabc:	4b0d      	ldr	r3, [pc, #52]	; (1caf4 <z_tick_sleep.part.0+0x54>)
   1cabe:	68b0      	ldr	r0, [r6, #8]
   1cac0:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1cac2:	f7ff ff99 	bl	1c9f8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1cac6:	68b0      	ldr	r0, [r6, #8]
   1cac8:	490b      	ldr	r1, [pc, #44]	; (1caf8 <z_tick_sleep.part.0+0x58>)
   1caca:	462a      	mov	r2, r5
   1cacc:	17eb      	asrs	r3, r5, #31
   1cace:	3018      	adds	r0, #24
   1cad0:	f000 faae 	bl	1d030 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1cad4:	68b2      	ldr	r2, [r6, #8]
   1cad6:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1cad8:	7b53      	ldrb	r3, [r2, #13]
   1cada:	f043 0310 	orr.w	r3, r3, #16
   1cade:	7353      	strb	r3, [r2, #13]
   1cae0:	f7f2 ff64 	bl	f9ac <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1cae4:	f003 fe9a 	bl	2081c <z_tick_get_32>
   1cae8:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1caea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1caee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1caf0:	20021038 	.word	0x20021038
   1caf4:	2002106c 	.word	0x2002106c
   1caf8:	00020599 	.word	0x00020599

0001cafc <z_set_prio>:
{
   1cafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb00:	4604      	mov	r4, r0
   1cb02:	f04f 0320 	mov.w	r3, #32
   1cb06:	f3ef 8811 	mrs	r8, BASEPRI
   1cb0a:	f383 8811 	msr	BASEPRI, r3
   1cb0e:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1cb12:	7b43      	ldrb	r3, [r0, #13]
   1cb14:	b24e      	sxtb	r6, r1
   1cb16:	06db      	lsls	r3, r3, #27
   1cb18:	d12e      	bne.n	1cb78 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1cb1a:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1cb1c:	bb65      	cbnz	r5, 1cb78 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1cb1e:	4f18      	ldr	r7, [pc, #96]	; (1cb80 <z_set_prio+0x84>)
   1cb20:	4621      	mov	r1, r4
   1cb22:	f107 0028 	add.w	r0, r7, #40	; 0x28
   1cb26:	f7ff fdb3 	bl	1c690 <z_priq_dumb_remove>
	return list->head == list;
   1cb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cb2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cb2e:	4283      	cmp	r3, r0
   1cb30:	bf18      	it	ne
   1cb32:	461d      	movne	r5, r3
   1cb34:	2d00      	cmp	r5, #0
   1cb36:	bf38      	it	cc
   1cb38:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   1cb3a:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cb3c:	b1b5      	cbz	r5, 1cb6c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1cb3e:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1cb42:	42b1      	cmp	r1, r6
   1cb44:	dc03      	bgt.n	1cb4e <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1cb46:	42aa      	cmp	r2, r5
   1cb48:	d010      	beq.n	1cb6c <z_set_prio+0x70>
   1cb4a:	682d      	ldr	r5, [r5, #0]
   1cb4c:	e7f6      	b.n	1cb3c <z_set_prio+0x40>
	node->prev = successor->prev;
   1cb4e:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1cb50:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1cb54:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1cb56:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1cb58:	2001      	movs	r0, #1
   1cb5a:	f7ff fdaf 	bl	1c6bc <update_cache>
   1cb5e:	2001      	movs	r0, #1
	__asm__ volatile(
   1cb60:	f388 8811 	msr	BASEPRI, r8
   1cb64:	f3bf 8f6f 	isb	sy
}
   1cb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1cb6c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cb72:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cb74:	62fc      	str	r4, [r7, #44]	; 0x2c
}
   1cb76:	e7ef      	b.n	1cb58 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1cb78:	2000      	movs	r0, #0
   1cb7a:	73a6      	strb	r6, [r4, #14]
   1cb7c:	e7f0      	b.n	1cb60 <z_set_prio+0x64>
   1cb7e:	bf00      	nop
   1cb80:	20021038 	.word	0x20021038

0001cb84 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1cb84:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1cb86:	4b04      	ldr	r3, [pc, #16]	; (1cb98 <z_sched_init+0x14>)
   1cb88:	4608      	mov	r0, r1
   1cb8a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1cb8e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1cb92:	f7ff bd2b 	b.w	1c5ec <k_sched_time_slice_set>
   1cb96:	bf00      	nop
   1cb98:	20021038 	.word	0x20021038

0001cb9c <z_impl_k_yield>:
{
   1cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1cb9e:	4c24      	ldr	r4, [pc, #144]	; (1cc30 <z_impl_k_yield+0x94>)
   1cba0:	4b24      	ldr	r3, [pc, #144]	; (1cc34 <z_impl_k_yield+0x98>)
   1cba2:	68a2      	ldr	r2, [r4, #8]
   1cba4:	429a      	cmp	r2, r3
   1cba6:	d030      	beq.n	1cc0a <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1cba8:	f04f 0320 	mov.w	r3, #32
   1cbac:	f3ef 8511 	mrs	r5, BASEPRI
   1cbb0:	f383 8811 	msr	BASEPRI, r3
   1cbb4:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1cbb8:	68a1      	ldr	r1, [r4, #8]
   1cbba:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cbbe:	f7ff fd67 	bl	1c690 <z_priq_dumb_remove>
	return list->head == list;
   1cbc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1cbc4:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cbc6:	4283      	cmp	r3, r0
   1cbc8:	bf08      	it	eq
   1cbca:	2300      	moveq	r3, #0
   1cbcc:	2b00      	cmp	r3, #0
   1cbce:	bf38      	it	cc
   1cbd0:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cbd2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cbd4:	b32b      	cbz	r3, 1cc22 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1cbd6:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1cbda:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1cbde:	42b7      	cmp	r7, r6
   1cbe0:	db03      	blt.n	1cbea <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1cbe2:	428b      	cmp	r3, r1
   1cbe4:	d01d      	beq.n	1cc22 <z_impl_k_yield+0x86>
   1cbe6:	681b      	ldr	r3, [r3, #0]
   1cbe8:	e7f4      	b.n	1cbd4 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1cbea:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1cbec:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1cbf0:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1cbf2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1cbf4:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   1cbf6:	2001      	movs	r0, #1
   1cbf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1cbfc:	7353      	strb	r3, [r2, #13]
   1cbfe:	f7ff fd5d 	bl	1c6bc <update_cache>
	__asm__ volatile(
   1cc02:	f385 8811 	msr	BASEPRI, r5
   1cc06:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1cc0a:	f04f 0320 	mov.w	r3, #32
   1cc0e:	f3ef 8011 	mrs	r0, BASEPRI
   1cc12:	f383 8811 	msr	BASEPRI, r3
   1cc16:	f3bf 8f6f 	isb	sy
}
   1cc1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1cc1e:	f7f2 bec5 	b.w	f9ac <arch_swap>
	node->prev = list->tail;
   1cc22:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1cc26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cc28:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1cc2a:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   1cc2c:	e7e2      	b.n	1cbf4 <z_impl_k_yield+0x58>
   1cc2e:	bf00      	nop
   1cc30:	20021038 	.word	0x20021038
   1cc34:	200204e0 	.word	0x200204e0

0001cc38 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1cc38:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1cc3a:	3301      	adds	r3, #1
   1cc3c:	bf08      	it	eq
   1cc3e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1cc42:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1cc44:	d106      	bne.n	1cc54 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1cc46:	4b0b      	ldr	r3, [pc, #44]	; (1cc74 <z_impl_k_sleep+0x3c>)
   1cc48:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1cc4a:	f7ff fe45 	bl	1c8d8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1cc4e:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1cc52:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1cc54:	4604      	mov	r4, r0
	if (ticks == 0) {
   1cc56:	b948      	cbnz	r0, 1cc6c <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   1cc58:	f7ff ffa0 	bl	1cb9c <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   1cc5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1cc60:	fb84 3400 	smull	r3, r4, r4, r0
   1cc64:	0bd8      	lsrs	r0, r3, #15
   1cc66:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1cc6a:	e7f2      	b.n	1cc52 <z_impl_k_sleep+0x1a>
   1cc6c:	f7ff ff18 	bl	1caa0 <z_tick_sleep.part.0>
   1cc70:	4604      	mov	r4, r0
   1cc72:	e7f3      	b.n	1cc5c <z_impl_k_sleep+0x24>
   1cc74:	20021038 	.word	0x20021038

0001cc78 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1cc78:	4b01      	ldr	r3, [pc, #4]	; (1cc80 <z_impl_k_current_get+0x8>)
   1cc7a:	6898      	ldr	r0, [r3, #8]
   1cc7c:	4770      	bx	lr
   1cc7e:	bf00      	nop
   1cc80:	20021038 	.word	0x20021038

0001cc84 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1cc84:	b538      	push	{r3, r4, r5, lr}
   1cc86:	4604      	mov	r4, r0
   1cc88:	f04f 0320 	mov.w	r3, #32
   1cc8c:	f3ef 8511 	mrs	r5, BASEPRI
   1cc90:	f383 8811 	msr	BASEPRI, r3
   1cc94:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1cc98:	f003 fcc9 	bl	2062e <z_unpend_first_thread>

	if (thread != NULL) {
   1cc9c:	b148      	cbz	r0, 1ccb2 <z_impl_k_sem_give+0x2e>
   1cc9e:	2200      	movs	r2, #0
   1cca0:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1cca2:	f003 fc69 	bl	20578 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1cca6:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1cca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1ccac:	4807      	ldr	r0, [pc, #28]	; (1cccc <z_impl_k_sem_give+0x48>)
   1ccae:	f7ff bcc9 	b.w	1c644 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1ccb2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1ccb6:	429a      	cmp	r2, r3
   1ccb8:	bf18      	it	ne
   1ccba:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1ccbc:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1ccbe:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1ccc0:	f104 0010 	add.w	r0, r4, #16
   1ccc4:	f003 ff08 	bl	20ad8 <z_handle_obj_poll_events>
}
   1ccc8:	e7ed      	b.n	1cca6 <z_impl_k_sem_give+0x22>
   1ccca:	bf00      	nop
   1cccc:	200236c8 	.word	0x200236c8

0001ccd0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1ccd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ccd2:	4614      	mov	r4, r2
   1ccd4:	461d      	mov	r5, r3
   1ccd6:	f04f 0320 	mov.w	r3, #32
   1ccda:	f3ef 8111 	mrs	r1, BASEPRI
   1ccde:	f383 8811 	msr	BASEPRI, r3
   1cce2:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1cce6:	6883      	ldr	r3, [r0, #8]
   1cce8:	b143      	cbz	r3, 1ccfc <z_impl_k_sem_take+0x2c>
		sem->count--;
   1ccea:	3b01      	subs	r3, #1
   1ccec:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1ccee:	f381 8811 	msr	BASEPRI, r1
   1ccf2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1ccf6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1ccf8:	b003      	add	sp, #12
   1ccfa:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ccfc:	ea54 0305 	orrs.w	r3, r4, r5
   1cd00:	d106      	bne.n	1cd10 <z_impl_k_sem_take+0x40>
   1cd02:	f381 8811 	msr	BASEPRI, r1
   1cd06:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1cd0a:	f06f 000f 	mvn.w	r0, #15
   1cd0e:	e7f3      	b.n	1ccf8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1cd10:	4602      	mov	r2, r0
   1cd12:	e9cd 4500 	strd	r4, r5, [sp]
   1cd16:	4802      	ldr	r0, [pc, #8]	; (1cd20 <z_impl_k_sem_take+0x50>)
   1cd18:	f7ff feae 	bl	1ca78 <z_pend_curr>
	return ret;
   1cd1c:	e7ec      	b.n	1ccf8 <z_impl_k_sem_take+0x28>
   1cd1e:	bf00      	nop
   1cd20:	200236c8 	.word	0x200236c8

0001cd24 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1cd24:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1cd26:	4c08      	ldr	r4, [pc, #32]	; (1cd48 <k_sys_work_q_init+0x24>)
   1cd28:	f04f 33ff 	mov.w	r3, #4294967295
   1cd2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1cd30:	4620      	mov	r0, r4
   1cd32:	4906      	ldr	r1, [pc, #24]	; (1cd4c <k_sys_work_q_init+0x28>)
   1cd34:	f000 f8c8 	bl	1cec8 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1cd38:	4905      	ldr	r1, [pc, #20]	; (1cd50 <k_sys_work_q_init+0x2c>)
   1cd3a:	f104 0018 	add.w	r0, r4, #24
   1cd3e:	f003 fcc3 	bl	206c8 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1cd42:	2000      	movs	r0, #0
   1cd44:	bd10      	pop	{r4, pc}
   1cd46:	bf00      	nop
   1cd48:	20020670 	.word	0x20020670
   1cd4c:	20025c70 	.word	0x20025c70
   1cd50:	00022dd0 	.word	0x00022dd0

0001cd54 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1cd54:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1cd58:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1cd5c:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
   1cd5e:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1cd62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1cd64:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   1cd66:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1cd68:	2504      	movs	r5, #4
   1cd6a:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   1cd6c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1cd6e:	3207      	adds	r2, #7
	thread_base->prio = priority;
   1cd70:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   1cd72:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1cd74:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   1cd78:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
   1cd7c:	eb01 0802 	add.w	r8, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1cd80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	node->prev = NULL;
   1cd82:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
   1cd86:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1cd88:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1cd8a:	9202      	str	r2, [sp, #8]
   1cd8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1cd8e:	9201      	str	r2, [sp, #4]
   1cd90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cd92:	9200      	str	r2, [sp, #0]
   1cd94:	4642      	mov	r2, r8
   1cd96:	f7f2 fecd 	bl	fb34 <arch_new_thread>
	if (!_current) {
   1cd9a:	4b05      	ldr	r3, [pc, #20]	; (1cdb0 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
   1cd9c:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1cda0:	689b      	ldr	r3, [r3, #8]
   1cda2:	b103      	cbz	r3, 1cda6 <z_setup_new_thread+0x52>
	new_thread->resource_pool = _current->resource_pool;
   1cda4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   1cda6:	4640      	mov	r0, r8
   1cda8:	6763      	str	r3, [r4, #116]	; 0x74
   1cdaa:	b005      	add	sp, #20
   1cdac:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
   1cdb0:	20021038 	.word	0x20021038

0001cdb4 <z_impl_k_thread_create>:
{
   1cdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cdb6:	2500      	movs	r5, #0
{
   1cdb8:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cdba:	9505      	str	r5, [sp, #20]
   1cdbc:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   1cdbe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cdc2:	9504      	str	r5, [sp, #16]
   1cdc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   1cdc6:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cdc8:	9503      	str	r5, [sp, #12]
   1cdca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1cdcc:	9502      	str	r5, [sp, #8]
   1cdce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1cdd0:	9501      	str	r5, [sp, #4]
   1cdd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1cdd4:	9500      	str	r5, [sp, #0]
   1cdd6:	f7ff ffbd 	bl	1cd54 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1cdda:	1c7b      	adds	r3, r7, #1
   1cddc:	bf08      	it	eq
   1cdde:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1cde2:	d005      	beq.n	1cdf0 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cde4:	ea56 0307 	orrs.w	r3, r6, r7
   1cde8:	d105      	bne.n	1cdf6 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1cdea:	4620      	mov	r0, r4
   1cdec:	f7ff fcda 	bl	1c7a4 <z_sched_start>
}
   1cdf0:	4620      	mov	r0, r4
   1cdf2:	b007      	add	sp, #28
   1cdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1cdf6:	4632      	mov	r2, r6
   1cdf8:	463b      	mov	r3, r7
   1cdfa:	4903      	ldr	r1, [pc, #12]	; (1ce08 <z_impl_k_thread_create+0x54>)
   1cdfc:	f104 0018 	add.w	r0, r4, #24
   1ce00:	f000 f916 	bl	1d030 <z_add_timeout>
   1ce04:	e7f4      	b.n	1cdf0 <z_impl_k_thread_create+0x3c>
   1ce06:	bf00      	nop
   1ce08:	00020599 	.word	0x00020599

0001ce0c <z_init_static_threads>:
{
   1ce0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1ce10:	4e2a      	ldr	r6, [pc, #168]	; (1cebc <z_init_static_threads+0xb0>)
   1ce12:	4d2b      	ldr	r5, [pc, #172]	; (1cec0 <z_init_static_threads+0xb4>)
   1ce14:	46b0      	mov	r8, r6
{
   1ce16:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1ce18:	42b5      	cmp	r5, r6
   1ce1a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1ce1e:	d310      	bcc.n	1ce42 <z_init_static_threads+0x36>
	k_sched_lock();
   1ce20:	f7ff fc22 	bl	1c668 <k_sched_lock>
   1ce24:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1ce28:	f240 36e7 	movw	r6, #999	; 0x3e7
   1ce2c:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1ce2e:	4c24      	ldr	r4, [pc, #144]	; (1cec0 <z_init_static_threads+0xb4>)
   1ce30:	f8df a090 	ldr.w	sl, [pc, #144]	; 1cec4 <z_init_static_threads+0xb8>
   1ce34:	4544      	cmp	r4, r8
   1ce36:	d321      	bcc.n	1ce7c <z_init_static_threads+0x70>
}
   1ce38:	b006      	add	sp, #24
   1ce3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1ce3e:	f7ff bc61 	b.w	1c704 <k_sched_unlock>
		z_setup_new_thread(
   1ce42:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1ce46:	9305      	str	r3, [sp, #20]
   1ce48:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1ce4c:	9304      	str	r3, [sp, #16]
   1ce4e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1ce52:	9303      	str	r3, [sp, #12]
   1ce54:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1ce58:	9302      	str	r3, [sp, #8]
   1ce5a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1ce5e:	9301      	str	r3, [sp, #4]
   1ce60:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1ce64:	9300      	str	r3, [sp, #0]
   1ce66:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1ce6a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1ce6e:	f7ff ff71 	bl	1cd54 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1ce72:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1ce76:	65dd      	str	r5, [r3, #92]	; 0x5c
   1ce78:	4625      	mov	r5, r4
   1ce7a:	e7cd      	b.n	1ce18 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1ce7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ce7e:	1c5a      	adds	r2, r3, #1
   1ce80:	d00d      	beq.n	1ce9e <z_init_static_threads+0x92>
   1ce82:	4630      	mov	r0, r6
   1ce84:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   1ce86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ce8a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ce8e:	42b9      	cmp	r1, r7
   1ce90:	bf08      	it	eq
   1ce92:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1ce94:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ce96:	d104      	bne.n	1cea2 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1ce98:	4628      	mov	r0, r5
   1ce9a:	f7ff fc83 	bl	1c7a4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ce9e:	3430      	adds	r4, #48	; 0x30
   1cea0:	e7c8      	b.n	1ce34 <z_init_static_threads+0x28>
   1cea2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cea6:	2300      	movs	r3, #0
   1cea8:	f7ef fd00 	bl	c8ac <__aeabi_uldivmod>
   1ceac:	4602      	mov	r2, r0
   1ceae:	460b      	mov	r3, r1
   1ceb0:	f105 0018 	add.w	r0, r5, #24
   1ceb4:	4651      	mov	r1, sl
   1ceb6:	f000 f8bb 	bl	1d030 <z_add_timeout>
   1ceba:	e7f0      	b.n	1ce9e <z_init_static_threads+0x92>
   1cebc:	20020104 	.word	0x20020104
   1cec0:	20020104 	.word	0x20020104
   1cec4:	00020599 	.word	0x00020599

0001cec8 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1cec8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1cecc:	b08a      	sub	sp, #40	; 0x28
   1cece:	4604      	mov	r4, r0
   1ced0:	461d      	mov	r5, r3
   1ced2:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   1ced6:	f003 fad3 	bl	20480 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1ceda:	f104 0618 	add.w	r6, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1cede:	2000      	movs	r0, #0
   1cee0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   1cee4:	f04f 0800 	mov.w	r8, #0
   1cee8:	f04f 0900 	mov.w	r9, #0
   1ceec:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1cef0:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1cef4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1cef8:	4630      	mov	r0, r6
   1cefa:	4b05      	ldr	r3, [pc, #20]	; (1cf10 <k_work_q_start+0x48>)
   1cefc:	9400      	str	r4, [sp, #0]
   1cefe:	f7ff ff59 	bl	1cdb4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1cf02:	4630      	mov	r0, r6
   1cf04:	4903      	ldr	r1, [pc, #12]	; (1cf14 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1cf06:	b00a      	add	sp, #40	; 0x28
   1cf08:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   1cf0c:	f003 bbdc 	b.w	206c8 <z_impl_k_thread_name_set>
   1cf10:	0001d6c1 	.word	0x0001d6c1
   1cf14:	00021f84 	.word	0x00021f84

0001cf18 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1cf18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cf1c:	4606      	mov	r6, r0
   1cf1e:	460d      	mov	r5, r1
   1cf20:	4690      	mov	r8, r2
   1cf22:	4699      	mov	r9, r3
	__asm__ volatile(
   1cf24:	f04f 0320 	mov.w	r3, #32
   1cf28:	f3ef 8711 	mrs	r7, BASEPRI
   1cf2c:	f383 8811 	msr	BASEPRI, r3
   1cf30:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1cf34:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1cf36:	b17b      	cbz	r3, 1cf58 <k_delayed_work_submit_to_queue+0x40>
   1cf38:	4283      	cmp	r3, r0
   1cf3a:	d128      	bne.n	1cf8e <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1cf3c:	4628      	mov	r0, r5
   1cf3e:	f003 fbe1 	bl	20704 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   1cf42:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1cf46:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1cf48:	d008      	beq.n	1cf5c <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1cf4a:	2800      	cmp	r0, #0
   1cf4c:	da07      	bge.n	1cf5e <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1cf4e:	f387 8811 	msr	BASEPRI, r7
   1cf52:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1cf56:	e00f      	b.n	1cf78 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1cf58:	2800      	cmp	r0, #0
   1cf5a:	d0ef      	beq.n	1cf3c <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1cf5c:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cf5e:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1cf62:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1cf64:	d10b      	bne.n	1cf7e <k_delayed_work_submit_to_queue+0x66>
   1cf66:	f387 8811 	msr	BASEPRI, r7
   1cf6a:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1cf6e:	4629      	mov	r1, r5
   1cf70:	4630      	mov	r0, r6
   1cf72:	f003 fbae 	bl	206d2 <k_work_submit_to_queue>
		return 0;
   1cf76:	2400      	movs	r4, #0
}
   1cf78:	4620      	mov	r0, r4
   1cf7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1cf7e:	4642      	mov	r2, r8
   1cf80:	464b      	mov	r3, r9
   1cf82:	4904      	ldr	r1, [pc, #16]	; (1cf94 <k_delayed_work_submit_to_queue+0x7c>)
   1cf84:	f105 0010 	add.w	r0, r5, #16
   1cf88:	f000 f852 	bl	1d030 <z_add_timeout>
   1cf8c:	e7df      	b.n	1cf4e <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1cf8e:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1cf92:	e7dc      	b.n	1cf4e <k_delayed_work_submit_to_queue+0x36>
   1cf94:	000206fb 	.word	0x000206fb

0001cf98 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1cf98:	4b03      	ldr	r3, [pc, #12]	; (1cfa8 <elapsed+0x10>)
   1cf9a:	681b      	ldr	r3, [r3, #0]
   1cf9c:	b90b      	cbnz	r3, 1cfa2 <elapsed+0xa>
   1cf9e:	f7f2 bcd1 	b.w	f944 <z_clock_elapsed>
}
   1cfa2:	2000      	movs	r0, #0
   1cfa4:	4770      	bx	lr
   1cfa6:	bf00      	nop
   1cfa8:	20021078 	.word	0x20021078

0001cfac <remove_timeout>:
{
   1cfac:	b530      	push	{r4, r5, lr}
   1cfae:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cfb0:	b168      	cbz	r0, 1cfce <remove_timeout+0x22>
   1cfb2:	4a0a      	ldr	r2, [pc, #40]	; (1cfdc <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1cfb4:	6852      	ldr	r2, [r2, #4]
   1cfb6:	4290      	cmp	r0, r2
   1cfb8:	d009      	beq.n	1cfce <remove_timeout+0x22>
	if (next(t) != NULL) {
   1cfba:	b143      	cbz	r3, 1cfce <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1cfbc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1cfc0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1cfc4:	1912      	adds	r2, r2, r4
   1cfc6:	eb45 0101 	adc.w	r1, r5, r1
   1cfca:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1cfce:	6842      	ldr	r2, [r0, #4]
   1cfd0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1cfd2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1cfd4:	2300      	movs	r3, #0
	node->prev = NULL;
   1cfd6:	e9c0 3300 	strd	r3, r3, [r0]
}
   1cfda:	bd30      	pop	{r4, r5, pc}
   1cfdc:	20020068 	.word	0x20020068

0001cfe0 <next_timeout>:
	return list->head == list;
   1cfe0:	4b11      	ldr	r3, [pc, #68]	; (1d028 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   1cfe2:	b510      	push	{r4, lr}
   1cfe4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cfe6:	429c      	cmp	r4, r3
   1cfe8:	bf08      	it	eq
   1cfea:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1cfec:	f7ff ffd4 	bl	1cf98 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1cff0:	b1bc      	cbz	r4, 1d022 <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   1cff2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1cff6:	1a12      	subs	r2, r2, r0
   1cff8:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1cffc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1d000:	f173 0100 	sbcs.w	r1, r3, #0
   1d004:	da0d      	bge.n	1d022 <next_timeout+0x42>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   1d006:	4619      	mov	r1, r3
   1d008:	2a00      	cmp	r2, #0
   1d00a:	f171 0300 	sbcs.w	r3, r1, #0
   1d00e:	4610      	mov	r0, r2
   1d010:	da00      	bge.n	1d014 <next_timeout+0x34>
   1d012:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1d014:	4b05      	ldr	r3, [pc, #20]	; (1d02c <next_timeout+0x4c>)
   1d016:	691b      	ldr	r3, [r3, #16]
   1d018:	b113      	cbz	r3, 1d020 <next_timeout+0x40>
   1d01a:	4298      	cmp	r0, r3
   1d01c:	bfa8      	it	ge
   1d01e:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1d020:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1d022:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1d026:	e7f5      	b.n	1d014 <next_timeout+0x34>
   1d028:	20020068 	.word	0x20020068
   1d02c:	20021038 	.word	0x20021038

0001d030 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1d030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d034:	9101      	str	r1, [sp, #4]
   1d036:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d038:	1c4b      	adds	r3, r1, #1
   1d03a:	bf08      	it	eq
   1d03c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1d040:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d042:	d06b      	beq.n	1d11c <z_add_timeout+0xec>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1d044:	f06f 0301 	mvn.w	r3, #1
   1d048:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   1d04c:	1c54      	adds	r4, r2, #1
   1d04e:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1d052:	ebb3 0804 	subs.w	r8, r3, r4
   1d056:	eb6b 0905 	sbc.w	r9, fp, r5
   1d05a:	f1b8 0f00 	cmp.w	r8, #0
   1d05e:	f179 0300 	sbcs.w	r3, r9, #0
   1d062:	db0f      	blt.n	1d084 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1d064:	f7ff ff98 	bl	1cf98 <elapsed>
   1d068:	f06f 0301 	mvn.w	r3, #1
   1d06c:	4a32      	ldr	r2, [pc, #200]	; (1d138 <z_add_timeout+0x108>)
   1d06e:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1d072:	1a5b      	subs	r3, r3, r1
   1d074:	eb6b 020c 	sbc.w	r2, fp, ip
   1d078:	1b1e      	subs	r6, r3, r4
   1d07a:	eb62 0705 	sbc.w	r7, r2, r5
   1d07e:	1a34      	subs	r4, r6, r0
   1d080:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1d084:	9b01      	ldr	r3, [sp, #4]
   1d086:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1d08a:	f04f 0320 	mov.w	r3, #32
   1d08e:	f3ef 8611 	mrs	r6, BASEPRI
   1d092:	f383 8811 	msr	BASEPRI, r3
   1d096:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1d09a:	f7ff ff7d 	bl	1cf98 <elapsed>
	ticks = MAX(1, ticks);
   1d09e:	2c01      	cmp	r4, #1
   1d0a0:	f175 0300 	sbcs.w	r3, r5, #0
   1d0a4:	bfbc      	itt	lt
   1d0a6:	2401      	movlt	r4, #1
   1d0a8:	2500      	movlt	r5, #0
	return list->head == list;
   1d0aa:	4b24      	ldr	r3, [pc, #144]	; (1d13c <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
   1d0ac:	1824      	adds	r4, r4, r0
   1d0ae:	681a      	ldr	r2, [r3, #0]
   1d0b0:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d0b4:	429a      	cmp	r2, r3
   1d0b6:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1d0ba:	d001      	beq.n	1d0c0 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d0bc:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1d0be:	b952      	cbnz	r2, 1d0d6 <z_add_timeout+0xa6>
	node->prev = list->tail;
   1d0c0:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1d0c2:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   1d0c6:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1d0ca:	685a      	ldr	r2, [r3, #4]
   1d0cc:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1d0d0:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1d0d4:	e014      	b.n	1d100 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   1d0d6:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1d0da:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1d0de:	4544      	cmp	r4, r8
   1d0e0:	eb75 0109 	sbcs.w	r1, r5, r9
   1d0e4:	da1d      	bge.n	1d122 <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
   1d0e6:	ebb8 0004 	subs.w	r0, r8, r4
   1d0ea:	eb69 0105 	sbc.w	r1, r9, r5
   1d0ee:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1d0f2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1d0f4:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1d0f8:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1d0fc:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1d100:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d102:	429a      	cmp	r2, r3
   1d104:	d006      	beq.n	1d114 <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1d106:	4592      	cmp	sl, r2
   1d108:	d104      	bne.n	1d114 <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
   1d10a:	f7ff ff69 	bl	1cfe0 <next_timeout>
   1d10e:	2100      	movs	r1, #0
   1d110:	f7f2 fbb2 	bl	f878 <z_clock_set_timeout>
	__asm__ volatile(
   1d114:	f386 8811 	msr	BASEPRI, r6
   1d118:	f3bf 8f6f 	isb	sy
		}
	}
}
   1d11c:	b003      	add	sp, #12
   1d11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1d122:	ebb4 0008 	subs.w	r0, r4, r8
   1d126:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1d12a:	42ba      	cmp	r2, r7
   1d12c:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1d130:	d0c6      	beq.n	1d0c0 <z_add_timeout+0x90>
   1d132:	6812      	ldr	r2, [r2, #0]
   1d134:	e7c3      	b.n	1d0be <z_add_timeout+0x8e>
   1d136:	bf00      	nop
   1d138:	20020750 	.word	0x20020750
   1d13c:	20020068 	.word	0x20020068

0001d140 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1d140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d144:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1d146:	f7ff fb85 	bl	1c854 <z_time_slice>
	__asm__ volatile(
   1d14a:	f04f 0320 	mov.w	r3, #32
   1d14e:	f3ef 8411 	mrs	r4, BASEPRI
   1d152:	f383 8811 	msr	BASEPRI, r3
   1d156:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1d15a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1d20c <z_clock_announce+0xcc>
   1d15e:	4d2a      	ldr	r5, [pc, #168]	; (1d208 <z_clock_announce+0xc8>)
   1d160:	4651      	mov	r1, sl
	return list->head == list;
   1d162:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1d210 <z_clock_announce+0xd0>
   1d166:	602e      	str	r6, [r5, #0]
   1d168:	f8d5 c000 	ldr.w	ip, [r5]
   1d16c:	f8db 0000 	ldr.w	r0, [fp]
   1d170:	4662      	mov	r2, ip
   1d172:	e9da 8900 	ldrd	r8, r9, [sl]
   1d176:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d178:	4558      	cmp	r0, fp
   1d17a:	e9cd 2300 	strd	r2, r3, [sp]
   1d17e:	d00d      	beq.n	1d19c <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1d180:	b160      	cbz	r0, 1d19c <z_clock_announce+0x5c>
   1d182:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1d186:	45b4      	cmp	ip, r6
   1d188:	41bb      	sbcs	r3, r7
   1d18a:	da1d      	bge.n	1d1c8 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1d18c:	9b00      	ldr	r3, [sp, #0]
   1d18e:	ebb6 0c03 	subs.w	ip, r6, r3
   1d192:	9b01      	ldr	r3, [sp, #4]
   1d194:	eb67 0603 	sbc.w	r6, r7, r3
   1d198:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1d19c:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   1d19e:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   1d1a0:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   1d1a2:	eb13 0208 	adds.w	r2, r3, r8
   1d1a6:	9b01      	ldr	r3, [sp, #4]
   1d1a8:	eb43 0309 	adc.w	r3, r3, r9
   1d1ac:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   1d1b0:	f7ff ff16 	bl	1cfe0 <next_timeout>
   1d1b4:	4631      	mov	r1, r6
   1d1b6:	f7f2 fb5f 	bl	f878 <z_clock_set_timeout>
	__asm__ volatile(
   1d1ba:	f384 8811 	msr	BASEPRI, r4
   1d1be:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1d1c2:	b003      	add	sp, #12
   1d1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   1d1c8:	2200      	movs	r2, #0
   1d1ca:	2300      	movs	r3, #0
		curr_tick += dt;
   1d1cc:	eb18 0806 	adds.w	r8, r8, r6
   1d1d0:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1d1d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1d1d8:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1d1dc:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1d1e0:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1d1e2:	f7ff fee3 	bl	1cfac <remove_timeout>
   1d1e6:	f384 8811 	msr	BASEPRI, r4
   1d1ea:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1d1ee:	6883      	ldr	r3, [r0, #8]
   1d1f0:	4798      	blx	r3
	__asm__ volatile(
   1d1f2:	f04f 0320 	mov.w	r3, #32
   1d1f6:	f3ef 8411 	mrs	r4, BASEPRI
   1d1fa:	f383 8811 	msr	BASEPRI, r3
   1d1fe:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1d202:	4902      	ldr	r1, [pc, #8]	; (1d20c <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1d204:	e7b0      	b.n	1d168 <z_clock_announce+0x28>
   1d206:	bf00      	nop
   1d208:	20021078 	.word	0x20021078
   1d20c:	20020750 	.word	0x20020750
   1d210:	20020068 	.word	0x20020068

0001d214 <z_tick_get>:

int64_t z_tick_get(void)
{
   1d214:	b510      	push	{r4, lr}
   1d216:	f04f 0320 	mov.w	r3, #32
   1d21a:	f3ef 8411 	mrs	r4, BASEPRI
   1d21e:	f383 8811 	msr	BASEPRI, r3
   1d222:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1d226:	f7f2 fb8d 	bl	f944 <z_clock_elapsed>
   1d22a:	4b06      	ldr	r3, [pc, #24]	; (1d244 <z_tick_get+0x30>)
   1d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d230:	1812      	adds	r2, r2, r0
   1d232:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1d236:	f384 8811 	msr	BASEPRI, r4
   1d23a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1d23e:	4610      	mov	r0, r2
   1d240:	4619      	mov	r1, r3
   1d242:	bd10      	pop	{r4, pc}
   1d244:	20020750 	.word	0x20020750

0001d248 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1d24a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1d24e:	1c56      	adds	r6, r2, #1
   1d250:	f143 0700 	adc.w	r7, r3, #0
   1d254:	2f00      	cmp	r7, #0
   1d256:	bf08      	it	eq
   1d258:	2e02      	cmpeq	r6, #2
{
   1d25a:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1d25c:	d302      	bcc.n	1d264 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d25e:	490c      	ldr	r1, [pc, #48]	; (1d290 <z_timer_expiration_handler+0x48>)
   1d260:	f7ff fee6 	bl	1d030 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1d264:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d266:	3301      	adds	r3, #1
   1d268:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1d26a:	6a23      	ldr	r3, [r4, #32]
   1d26c:	b10b      	cbz	r3, 1d272 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1d26e:	4620      	mov	r0, r4
   1d270:	4798      	blx	r3
	return list->head == list;
   1d272:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d276:	42a5      	cmp	r5, r4
   1d278:	d008      	beq.n	1d28c <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1d27a:	b13d      	cbz	r5, 1d28c <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1d27c:	4628      	mov	r0, r5
   1d27e:	f003 f929 	bl	204d4 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1d282:	4628      	mov	r0, r5
   1d284:	f003 f978 	bl	20578 <z_ready_thread>
   1d288:	2300      	movs	r3, #0
   1d28a:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
   1d28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d28e:	bf00      	nop
   1d290:	0001d249 	.word	0x0001d249

0001d294 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1d294:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1d298:	4619      	mov	r1, r3
   1d29a:	4606      	mov	r6, r0
   1d29c:	4610      	mov	r0, r2
   1d29e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1d2a2:	1c4c      	adds	r4, r1, #1
   1d2a4:	bf08      	it	eq
   1d2a6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1d2aa:	4680      	mov	r8, r0
   1d2ac:	4689      	mov	r9, r1
   1d2ae:	d047      	beq.n	1d340 <z_impl_k_timer_start+0xac>
   1d2b0:	4614      	mov	r4, r2
   1d2b2:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1d2b4:	ea54 0305 	orrs.w	r3, r4, r5
   1d2b8:	d016      	beq.n	1d2e8 <z_impl_k_timer_start+0x54>
   1d2ba:	f06f 0301 	mvn.w	r3, #1
   1d2be:	ebb3 0a02 	subs.w	sl, r3, r2
   1d2c2:	f04f 33ff 	mov.w	r3, #4294967295
   1d2c6:	eb63 0b05 	sbc.w	fp, r3, r5
   1d2ca:	f1ba 0f00 	cmp.w	sl, #0
   1d2ce:	f17b 0300 	sbcs.w	r3, fp, #0
   1d2d2:	da09      	bge.n	1d2e8 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1d2d4:	f112 34ff 	adds.w	r4, r2, #4294967295
   1d2d8:	f145 35ff 	adc.w	r5, r5, #4294967295
   1d2dc:	2c01      	cmp	r4, #1
   1d2de:	f175 0300 	sbcs.w	r3, r5, #0
   1d2e2:	bfbc      	itt	lt
   1d2e4:	2401      	movlt	r4, #1
   1d2e6:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1d2e8:	f06f 0301 	mvn.w	r3, #1
   1d2ec:	1a1b      	subs	r3, r3, r0
   1d2ee:	9300      	str	r3, [sp, #0]
   1d2f0:	f04f 33ff 	mov.w	r3, #4294967295
   1d2f4:	eb63 0301 	sbc.w	r3, r3, r1
   1d2f8:	9301      	str	r3, [sp, #4]
   1d2fa:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d2fe:	2a00      	cmp	r2, #0
   1d300:	f173 0300 	sbcs.w	r3, r3, #0
   1d304:	da0c      	bge.n	1d320 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1d306:	f110 38ff 	adds.w	r8, r0, #4294967295
   1d30a:	f141 39ff 	adc.w	r9, r1, #4294967295
   1d30e:	f1b8 0f00 	cmp.w	r8, #0
   1d312:	f179 0300 	sbcs.w	r3, r9, #0
   1d316:	bfbc      	itt	lt
   1d318:	f04f 0800 	movlt.w	r8, #0
   1d31c:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   1d320:	4630      	mov	r0, r6
   1d322:	f003 fa3a 	bl	2079a <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1d326:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d328:	4642      	mov	r2, r8
	timer->status = 0U;
   1d32a:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d32c:	4630      	mov	r0, r6
   1d32e:	464b      	mov	r3, r9
   1d330:	4905      	ldr	r1, [pc, #20]	; (1d348 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   1d332:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1d336:	b002      	add	sp, #8
   1d338:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d33c:	f7ff be78 	b.w	1d030 <z_add_timeout>
}
   1d340:	b002      	add	sp, #8
   1d342:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1d346:	bf00      	nop
   1d348:	0001d249 	.word	0x0001d249

0001d34c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1d34c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d350:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1d352:	2301      	movs	r3, #1
{
   1d354:	b089      	sub	sp, #36	; 0x24
	struct _poller poller = { .is_polling = true,
   1d356:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   1d35a:	4b29      	ldr	r3, [pc, #164]	; (1d400 <z_impl_k_poll+0xb4>)
{
   1d35c:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   1d35e:	689b      	ldr	r3, [r3, #8]
{
   1d360:	4605      	mov	r5, r0
	struct _poller poller = { .is_polling = true,
   1d362:	9306      	str	r3, [sp, #24]
   1d364:	4b27      	ldr	r3, [pc, #156]	; (1d404 <z_impl_k_poll+0xb8>)
   1d366:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   1d368:	ea52 0307 	orrs.w	r3, r2, r7
   1d36c:	bf0c      	ite	eq
   1d36e:	2301      	moveq	r3, #1
   1d370:	2300      	movne	r3, #0
   1d372:	aa05      	add	r2, sp, #20
   1d374:	f003 fb4f 	bl	20a16 <register_events>
   1d378:	4680      	mov	r8, r0
	__asm__ volatile(
   1d37a:	f04f 0320 	mov.w	r3, #32
   1d37e:	f3ef 8911 	mrs	r9, BASEPRI
   1d382:	f383 8811 	msr	BASEPRI, r3
   1d386:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1d38a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1d38e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1d392:	b963      	cbnz	r3, 1d3ae <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   1d394:	4601      	mov	r1, r0
   1d396:	464a      	mov	r2, r9
   1d398:	4628      	mov	r0, r5
   1d39a:	f003 fa9c 	bl	208d6 <clear_event_registrations>
	__asm__ volatile(
   1d39e:	f389 8811 	msr	BASEPRI, r9
   1d3a2:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1d3a6:	4620      	mov	r0, r4
   1d3a8:	b009      	add	sp, #36	; 0x24
   1d3aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   1d3ae:	2300      	movs	r3, #0
   1d3b0:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d3b4:	ea56 0307 	orrs.w	r3, r6, r7
   1d3b8:	d106      	bne.n	1d3c8 <z_impl_k_poll+0x7c>
   1d3ba:	f389 8811 	msr	BASEPRI, r9
   1d3be:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1d3c2:	f06f 040a 	mvn.w	r4, #10
   1d3c6:	e7ee      	b.n	1d3a6 <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1d3c8:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1d3ca:	4649      	mov	r1, r9
   1d3cc:	e9cd 6700 	strd	r6, r7, [sp]
   1d3d0:	480d      	ldr	r0, [pc, #52]	; (1d408 <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1d3d2:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1d3d6:	f7ff fb4f 	bl	1ca78 <z_pend_curr>
   1d3da:	4604      	mov	r4, r0
	__asm__ volatile(
   1d3dc:	f04f 0320 	mov.w	r3, #32
   1d3e0:	f3ef 8611 	mrs	r6, BASEPRI
   1d3e4:	f383 8811 	msr	BASEPRI, r3
   1d3e8:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1d3ec:	4632      	mov	r2, r6
   1d3ee:	4641      	mov	r1, r8
   1d3f0:	4628      	mov	r0, r5
   1d3f2:	f003 fa70 	bl	208d6 <clear_event_registrations>
	__asm__ volatile(
   1d3f6:	f386 8811 	msr	BASEPRI, r6
   1d3fa:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1d3fe:	e7d2      	b.n	1d3a6 <z_impl_k_poll+0x5a>
   1d400:	20021038 	.word	0x20021038
   1d404:	00020963 	.word	0x00020963
   1d408:	200236c8 	.word	0x200236c8

0001d40c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1d40c:	b538      	push	{r3, r4, r5, lr}
   1d40e:	4603      	mov	r3, r0
	__asm__ volatile(
   1d410:	f04f 0220 	mov.w	r2, #32
   1d414:	f3ef 8511 	mrs	r5, BASEPRI
   1d418:	f382 8811 	msr	BASEPRI, r2
   1d41c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1d420:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1d422:	2101      	movs	r1, #1
   1d424:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1d426:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1d428:	4283      	cmp	r3, r0
   1d42a:	d106      	bne.n	1d43a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1d42c:	f385 8811 	msr	BASEPRI, r5
   1d430:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1d434:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1d436:	4620      	mov	r0, r4
   1d438:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1d43a:	e9d0 3200 	ldrd	r3, r2, [r0]
   1d43e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1d440:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d442:	2300      	movs	r3, #0
	node->prev = NULL;
   1d444:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d448:	f003 fa70 	bl	2092c <signal_poll_event>
	z_reschedule(&lock, key);
   1d44c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d44e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1d450:	4801      	ldr	r0, [pc, #4]	; (1d458 <z_impl_k_poll_signal_raise+0x4c>)
   1d452:	f7ff f8f7 	bl	1c644 <z_reschedule>
	return rc;
   1d456:	e7ee      	b.n	1d436 <z_impl_k_poll_signal_raise+0x2a>
   1d458:	200236c8 	.word	0x200236c8

0001d45c <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   1d45c:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   1d45e:	4801      	ldr	r0, [pc, #4]	; (1d464 <k_malloc+0x8>)
   1d460:	f003 bb48 	b.w	20af4 <k_mem_pool_malloc>
   1d464:	20020070 	.word	0x20020070

0001d468 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1d468:	b507      	push	{r0, r1, r2, lr}
   1d46a:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1d46c:	f003 f924 	bl	206b8 <k_is_in_isr>
   1d470:	9901      	ldr	r1, [sp, #4]
   1d472:	b948      	cbnz	r0, 1d488 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1d474:	4b07      	ldr	r3, [pc, #28]	; (1d494 <z_thread_malloc+0x2c>)
   1d476:	689b      	ldr	r3, [r3, #8]
   1d478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (pool) {
   1d47a:	b13b      	cbz	r3, 1d48c <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   1d47c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1d47e:	b003      	add	sp, #12
   1d480:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   1d484:	f003 bb36 	b.w	20af4 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   1d488:	4b03      	ldr	r3, [pc, #12]	; (1d498 <z_thread_malloc+0x30>)
   1d48a:	e7f7      	b.n	1d47c <z_thread_malloc+0x14>
}
   1d48c:	b003      	add	sp, #12
   1d48e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d492:	bf00      	nop
   1d494:	20021038 	.word	0x20021038
   1d498:	20020070 	.word	0x20020070

0001d49c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1d49c:	b140      	cbz	r0, 1d4b0 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1d49e:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1d4a0:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1d4a4:	2b02      	cmp	r3, #2
   1d4a6:	d006      	beq.n	1d4b6 <sys_notify_validate+0x1a>
   1d4a8:	2b03      	cmp	r3, #3
   1d4aa:	d004      	beq.n	1d4b6 <sys_notify_validate+0x1a>
   1d4ac:	2b01      	cmp	r3, #1
   1d4ae:	d005      	beq.n	1d4bc <sys_notify_validate+0x20>
		return -EINVAL;
   1d4b0:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1d4b4:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1d4b6:	6803      	ldr	r3, [r0, #0]
   1d4b8:	2b00      	cmp	r3, #0
   1d4ba:	d0f9      	beq.n	1d4b0 <sys_notify_validate+0x14>
		notify->result = 0;
   1d4bc:	2300      	movs	r3, #0
   1d4be:	6083      	str	r3, [r0, #8]
   1d4c0:	4618      	mov	r0, r3
   1d4c2:	4770      	bx	lr

0001d4c4 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1d4c4:	6843      	ldr	r3, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1d4c6:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   1d4c8:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1d4cc:	2b02      	cmp	r3, #2
	notify->result = res;
   1d4ce:	6081      	str	r1, [r0, #8]
	switch (method) {
   1d4d0:	d00b      	beq.n	1d4ea <sys_notify_finalize+0x26>
   1d4d2:	2b03      	cmp	r3, #3
   1d4d4:	d10c      	bne.n	1d4f0 <sys_notify_finalize+0x2c>
	struct k_poll_signal *sig = NULL;
   1d4d6:	2300      	movs	r3, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1d4d8:	6804      	ldr	r4, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1d4da:	2200      	movs	r2, #0
   1d4dc:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1d4de:	b113      	cbz	r3, 1d4e6 <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   1d4e0:	4618      	mov	r0, r3
   1d4e2:	f7ff ff93 	bl	1d40c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1d4e6:	4620      	mov	r0, r4
   1d4e8:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   1d4ea:	2400      	movs	r4, #0
		sig = notify->method.signal;
   1d4ec:	6803      	ldr	r3, [r0, #0]
		break;
   1d4ee:	e7f4      	b.n	1d4da <sys_notify_finalize+0x16>
	switch (method) {
   1d4f0:	2400      	movs	r4, #0
   1d4f2:	4623      	mov	r3, r4
   1d4f4:	e7f1      	b.n	1d4da <sys_notify_finalize+0x16>

0001d4f6 <arch_printk_char_out>:
}
   1d4f6:	2000      	movs	r0, #0
   1d4f8:	4770      	bx	lr

0001d4fa <str_out>:
{
   1d4fa:	b530      	push	{r4, r5, lr}
   1d4fc:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1d4fe:	680c      	ldr	r4, [r1, #0]
   1d500:	1c55      	adds	r5, r2, #1
   1d502:	b114      	cbz	r4, 1d50a <str_out+0x10>
   1d504:	684b      	ldr	r3, [r1, #4]
   1d506:	4293      	cmp	r3, r2
   1d508:	dc01      	bgt.n	1d50e <str_out+0x14>
		ctx->count++;
   1d50a:	608d      	str	r5, [r1, #8]
}
   1d50c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1d50e:	3b01      	subs	r3, #1
   1d510:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1d512:	bf08      	it	eq
   1d514:	2200      	moveq	r2, #0
   1d516:	608d      	str	r5, [r1, #8]
   1d518:	bf0c      	ite	eq
   1d51a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1d51c:	54a0      	strbne	r0, [r4, r2]
   1d51e:	e7f5      	b.n	1d50c <str_out+0x12>

0001d520 <printk>:
{
   1d520:	b40f      	push	{r0, r1, r2, r3}
   1d522:	b507      	push	{r0, r1, r2, lr}
   1d524:	a904      	add	r1, sp, #16
   1d526:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1d52a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1d52c:	f7f0 fb2c 	bl	db88 <vprintk>
}
   1d530:	b003      	add	sp, #12
   1d532:	f85d eb04 	ldr.w	lr, [sp], #4
   1d536:	b004      	add	sp, #16
   1d538:	4770      	bx	lr

0001d53a <snprintk>:
{
   1d53a:	b40c      	push	{r2, r3}
   1d53c:	b507      	push	{r0, r1, r2, lr}
   1d53e:	ab04      	add	r3, sp, #16
   1d540:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1d544:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1d546:	f7f0 fb2d 	bl	dba4 <vsnprintk>
}
   1d54a:	b003      	add	sp, #12
   1d54c:	f85d eb04 	ldr.w	lr, [sp], #4
   1d550:	b002      	add	sp, #8
   1d552:	4770      	bx	lr

0001d554 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d554:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1d556:	f013 0307 	ands.w	r3, r3, #7
   1d55a:	d105      	bne.n	1d568 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1d55c:	6803      	ldr	r3, [r0, #0]
   1d55e:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1d560:	bf0c      	ite	eq
   1d562:	2000      	moveq	r0, #0
   1d564:	2003      	movne	r0, #3
   1d566:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1d568:	2b02      	cmp	r3, #2
   1d56a:	d105      	bne.n	1d578 <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   1d56c:	8b43      	ldrh	r3, [r0, #26]
   1d56e:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1d570:	bf14      	ite	ne
   1d572:	2000      	movne	r0, #0
   1d574:	2004      	moveq	r0, #4
   1d576:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1d578:	2b01      	cmp	r3, #1
   1d57a:	d105      	bne.n	1d588 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1d57c:	6803      	ldr	r3, [r0, #0]
   1d57e:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1d580:	bf0c      	ite	eq
   1d582:	2000      	moveq	r0, #0
   1d584:	2005      	movne	r0, #5
   1d586:	4770      	bx	lr
	int evt = EVT_NOP;
   1d588:	2000      	movs	r0, #0
}
   1d58a:	4770      	bx	lr

0001d58c <notify_one>:
{
   1d58c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d58e:	460d      	mov	r5, r1
   1d590:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1d592:	4619      	mov	r1, r3
   1d594:	1d28      	adds	r0, r5, #4
{
   1d596:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1d598:	9300      	str	r3, [sp, #0]
   1d59a:	f7ff ff93 	bl	1d4c4 <sys_notify_finalize>
	if (cb) {
   1d59e:	4604      	mov	r4, r0
   1d5a0:	b140      	cbz	r0, 1d5b4 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1d5a2:	e9dd 3200 	ldrd	r3, r2, [sp]
   1d5a6:	4629      	mov	r1, r5
   1d5a8:	4630      	mov	r0, r6
   1d5aa:	46a4      	mov	ip, r4
}
   1d5ac:	b002      	add	sp, #8
   1d5ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   1d5b2:	4760      	bx	ip
}
   1d5b4:	b002      	add	sp, #8
   1d5b6:	bd70      	pop	{r4, r5, r6, pc}

0001d5b8 <transition_complete>:
{
   1d5b8:	b410      	push	{r4}
	__asm__ volatile(
   1d5ba:	f04f 0420 	mov.w	r4, #32
   1d5be:	f3ef 8211 	mrs	r2, BASEPRI
   1d5c2:	f384 8811 	msr	BASEPRI, r4
   1d5c6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1d5ca:	6141      	str	r1, [r0, #20]
}
   1d5cc:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   1d5d0:	2101      	movs	r1, #1
   1d5d2:	f7f0 bafb 	b.w	dbcc <process_event>

0001d5d6 <validate_args>:
{
   1d5d6:	b510      	push	{r4, lr}
   1d5d8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1d5da:	b140      	cbz	r0, 1d5ee <validate_args+0x18>
   1d5dc:	b139      	cbz	r1, 1d5ee <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1d5de:	1d08      	adds	r0, r1, #4
   1d5e0:	f7ff ff5c 	bl	1d49c <sys_notify_validate>
	if ((rv == 0)
   1d5e4:	b928      	cbnz	r0, 1d5f2 <validate_args+0x1c>
	    && ((cli->notify.flags
   1d5e6:	68a3      	ldr	r3, [r4, #8]
   1d5e8:	f033 0303 	bics.w	r3, r3, #3
   1d5ec:	d001      	beq.n	1d5f2 <validate_args+0x1c>
		rv = -EINVAL;
   1d5ee:	f06f 0015 	mvn.w	r0, #21
}
   1d5f2:	bd10      	pop	{r4, pc}

0001d5f4 <onoff_manager_init>:
{
   1d5f4:	b538      	push	{r3, r4, r5, lr}
   1d5f6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1d5f8:	4605      	mov	r5, r0
   1d5fa:	b158      	cbz	r0, 1d614 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1d5fc:	b151      	cbz	r1, 1d614 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1d5fe:	680b      	ldr	r3, [r1, #0]
   1d600:	b143      	cbz	r3, 1d614 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1d602:	684b      	ldr	r3, [r1, #4]
   1d604:	b133      	cbz	r3, 1d614 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1d606:	221c      	movs	r2, #28
   1d608:	2100      	movs	r1, #0
   1d60a:	f001 f96f 	bl	1e8ec <memset>
	return 0;
   1d60e:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1d610:	612c      	str	r4, [r5, #16]
}
   1d612:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1d614:	f06f 0015 	mvn.w	r0, #21
   1d618:	e7fb      	b.n	1d612 <onoff_manager_init+0x1e>

0001d61a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1d61a:	b570      	push	{r4, r5, r6, lr}
   1d61c:	4604      	mov	r4, r0
   1d61e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1d620:	f7ff ffd9 	bl	1d5d6 <validate_args>

	if (rv < 0) {
   1d624:	1e05      	subs	r5, r0, #0
   1d626:	db31      	blt.n	1d68c <onoff_request+0x72>
   1d628:	f04f 0320 	mov.w	r3, #32
   1d62c:	f3ef 8111 	mrs	r1, BASEPRI
   1d630:	f383 8811 	msr	BASEPRI, r3
   1d634:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1d638:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1d63c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1d63e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1d640:	42ab      	cmp	r3, r5
   1d642:	f000 0207 	and.w	r2, r0, #7
   1d646:	d02e      	beq.n	1d6a6 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1d648:	2a02      	cmp	r2, #2
   1d64a:	d10e      	bne.n	1d66a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1d64c:	3301      	adds	r3, #1
   1d64e:	8363      	strh	r3, [r4, #26]
	rv = state;
   1d650:	4615      	mov	r5, r2
		notify = true;
   1d652:	2301      	movs	r3, #1
	__asm__ volatile(
   1d654:	f381 8811 	msr	BASEPRI, r1
   1d658:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1d65c:	b1b3      	cbz	r3, 1d68c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1d65e:	2300      	movs	r3, #0
   1d660:	4631      	mov	r1, r6
   1d662:	4620      	mov	r0, r4
   1d664:	f7ff ff92 	bl	1d58c <notify_one>
   1d668:	e010      	b.n	1d68c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1d66a:	0783      	lsls	r3, r0, #30
   1d66c:	d001      	beq.n	1d672 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1d66e:	2a06      	cmp	r2, #6
   1d670:	d10e      	bne.n	1d690 <onoff_request+0x76>
	parent->next = child;
   1d672:	2300      	movs	r3, #0
   1d674:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1d676:	6863      	ldr	r3, [r4, #4]
   1d678:	b993      	cbnz	r3, 1d6a0 <onoff_request+0x86>
	list->head = node;
   1d67a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1d67e:	4615      	mov	r5, r2
   1d680:	b962      	cbnz	r2, 1d69c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1d682:	460a      	mov	r2, r1
   1d684:	4620      	mov	r0, r4
   1d686:	2102      	movs	r1, #2
   1d688:	f7f0 faa0 	bl	dbcc <process_event>
		}
	}

	return rv;
}
   1d68c:	4628      	mov	r0, r5
   1d68e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1d690:	2a05      	cmp	r2, #5
   1d692:	bf0c      	ite	eq
   1d694:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   1d698:	f06f 0504 	mvnne.w	r5, #4
   1d69c:	2300      	movs	r3, #0
   1d69e:	e7d9      	b.n	1d654 <onoff_request+0x3a>
	parent->next = child;
   1d6a0:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1d6a2:	6066      	str	r6, [r4, #4]
}
   1d6a4:	e7eb      	b.n	1d67e <onoff_request+0x64>
		rv = -EAGAIN;
   1d6a6:	f06f 050a 	mvn.w	r5, #10
   1d6aa:	e7f7      	b.n	1d69c <onoff_request+0x82>

0001d6ac <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1d6ac:	4604      	mov	r4, r0
   1d6ae:	b508      	push	{r3, lr}
   1d6b0:	4608      	mov	r0, r1
   1d6b2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1d6b4:	461a      	mov	r2, r3
   1d6b6:	47a0      	blx	r4
	return z_impl_k_current_get();
   1d6b8:	f7ff fade 	bl	1cc78 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1d6bc:	f7f2 fdcc 	bl	10258 <z_impl_k_thread_abort>

0001d6c0 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1d6c0:	b510      	push	{r4, lr}
   1d6c2:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1d6c4:	f04f 33ff 	mov.w	r3, #4294967295
   1d6c8:	f04f 32ff 	mov.w	r2, #4294967295
   1d6cc:	4620      	mov	r0, r4
   1d6ce:	f7fe ff43 	bl	1c558 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1d6d2:	4603      	mov	r3, r0
   1d6d4:	2800      	cmp	r0, #0
   1d6d6:	d0f5      	beq.n	1d6c4 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   1d6d8:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d6da:	3308      	adds	r3, #8
   1d6dc:	e8d3 1fef 	ldaex	r1, [r3]
   1d6e0:	f021 0c01 	bic.w	ip, r1, #1
   1d6e4:	e8c3 cfee 	stlex	lr, ip, [r3]
   1d6e8:	f1be 0f00 	cmp.w	lr, #0
   1d6ec:	d1f6      	bne.n	1d6dc <z_work_q_main+0x1c>
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1d6ee:	07cb      	lsls	r3, r1, #31
   1d6f0:	d500      	bpl.n	1d6f4 <z_work_q_main+0x34>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1d6f2:	4790      	blx	r2
	z_impl_k_yield();
   1d6f4:	f7ff fa52 	bl	1cb9c <z_impl_k_yield>
   1d6f8:	e7e4      	b.n	1d6c4 <z_work_q_main+0x4>

0001d6fa <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1d6fa:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1d6fc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1d700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1d704:	bf2c      	ite	cs
   1d706:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1d70a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1d70e:	4770      	bx	lr

0001d710 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1d710:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1d714:	6880      	ldr	r0, [r0, #8]
   1d716:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1d71a:	bf2c      	ite	cs
   1d71c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1d720:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1d724:	4770      	bx	lr

0001d726 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1d726:	2201      	movs	r2, #1
{
   1d728:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1d72a:	f7ff ffe6 	bl	1d6fa <chunk_field>
}
   1d72e:	0840      	lsrs	r0, r0, #1
   1d730:	bd08      	pop	{r3, pc}

0001d732 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1d732:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1d734:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1d738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d73c:	d308      	bcc.n	1d750 <set_chunk_used+0x1e>
		if (used) {
   1d73e:	684b      	ldr	r3, [r1, #4]
   1d740:	b11a      	cbz	r2, 1d74a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   1d742:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   1d746:	604b      	str	r3, [r1, #4]
   1d748:	4770      	bx	lr
   1d74a:	f023 0301 	bic.w	r3, r3, #1
   1d74e:	e7fa      	b.n	1d746 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1d750:	884b      	ldrh	r3, [r1, #2]
   1d752:	b11a      	cbz	r2, 1d75c <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   1d754:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   1d758:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1d75a:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   1d75c:	f023 0301 	bic.w	r3, r3, #1
   1d760:	e7fa      	b.n	1d758 <set_chunk_used+0x26>

0001d762 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1d762:	0053      	lsls	r3, r2, #1
   1d764:	2201      	movs	r2, #1
   1d766:	f7ff bfd3 	b.w	1d710 <chunk_set>

0001d76a <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1d76a:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1d76c:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1d76e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1d772:	bf2c      	ite	cs
   1d774:	2002      	movcs	r0, #2
   1d776:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1d778:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1d77a:	fab0 f080 	clz	r0, r0
}
   1d77e:	f1c0 001f 	rsb	r0, r0, #31
   1d782:	4770      	bx	lr

0001d784 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1d784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d786:	4616      	mov	r6, r2
   1d788:	4604      	mov	r4, r0
   1d78a:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1d78c:	f7ff ffcb 	bl	1d726 <chunk_size>
   1d790:	4631      	mov	r1, r6
   1d792:	4605      	mov	r5, r0
   1d794:	4620      	mov	r0, r4
   1d796:	f7ff ffc6 	bl	1d726 <chunk_size>
   1d79a:	182b      	adds	r3, r5, r0

	set_chunk_size(h, lc, newsz);
   1d79c:	461a      	mov	r2, r3
   1d79e:	4639      	mov	r1, r7
   1d7a0:	4620      	mov	r0, r4
   1d7a2:	9301      	str	r3, [sp, #4]
   1d7a4:	f7ff ffdd 	bl	1d762 <set_chunk_size>
	return c + chunk_size(h, c);
   1d7a8:	4631      	mov	r1, r6
   1d7aa:	4620      	mov	r0, r4
   1d7ac:	f7ff ffbb 	bl	1d726 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d7b0:	2200      	movs	r2, #0
   1d7b2:	1831      	adds	r1, r6, r0
   1d7b4:	4620      	mov	r0, r4
   1d7b6:	9b01      	ldr	r3, [sp, #4]
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1d7b8:	b003      	add	sp, #12
   1d7ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d7be:	f7ff bfa7 	b.w	1d710 <chunk_set>

0001d7c2 <split_chunks>:
{
   1d7c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d7c4:	4614      	mov	r4, r2
   1d7c6:	460e      	mov	r6, r1
   1d7c8:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1d7ca:	f7ff ffac 	bl	1d726 <chunk_size>
	size_t lsz = rc - lc;
   1d7ce:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   1d7d0:	1b32      	subs	r2, r6, r4
   1d7d2:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   1d7d4:	4631      	mov	r1, r6
   1d7d6:	461a      	mov	r2, r3
   1d7d8:	4628      	mov	r0, r5
   1d7da:	9301      	str	r3, [sp, #4]
   1d7dc:	f7ff ffc1 	bl	1d762 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1d7e0:	463a      	mov	r2, r7
   1d7e2:	4621      	mov	r1, r4
   1d7e4:	4628      	mov	r0, r5
   1d7e6:	f7ff ffbc 	bl	1d762 <set_chunk_size>
   1d7ea:	9b01      	ldr	r3, [sp, #4]
   1d7ec:	2200      	movs	r2, #0
   1d7ee:	4621      	mov	r1, r4
   1d7f0:	4628      	mov	r0, r5
   1d7f2:	f7ff ff8d 	bl	1d710 <chunk_set>
	return c + chunk_size(h, c);
   1d7f6:	4621      	mov	r1, r4
   1d7f8:	4628      	mov	r0, r5
   1d7fa:	f7ff ff94 	bl	1d726 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1d7fe:	463b      	mov	r3, r7
   1d800:	1821      	adds	r1, r4, r0
   1d802:	2200      	movs	r2, #0
   1d804:	4628      	mov	r0, r5
}
   1d806:	b003      	add	sp, #12
   1d808:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d80c:	f7ff bf80 	b.w	1d710 <chunk_set>

0001d810 <free_list_remove_bidx>:
{
   1d810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d814:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1d816:	2203      	movs	r2, #3
   1d818:	460e      	mov	r6, r1
   1d81a:	4604      	mov	r4, r0
   1d81c:	f7ff ff6d 	bl	1d6fa <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1d820:	4286      	cmp	r6, r0
   1d822:	4605      	mov	r5, r0
   1d824:	f107 0804 	add.w	r8, r7, #4
   1d828:	d10b      	bne.n	1d842 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1d82a:	2301      	movs	r3, #1
   1d82c:	fa03 f707 	lsl.w	r7, r3, r7
   1d830:	68e3      	ldr	r3, [r4, #12]
   1d832:	ea23 0307 	bic.w	r3, r3, r7
   1d836:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1d838:	2300      	movs	r3, #0
   1d83a:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1d83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1d842:	4631      	mov	r1, r6
   1d844:	2202      	movs	r2, #2
   1d846:	4620      	mov	r0, r4
   1d848:	f7ff ff57 	bl	1d6fa <chunk_field>
   1d84c:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1d84e:	462b      	mov	r3, r5
   1d850:	4601      	mov	r1, r0
   1d852:	2203      	movs	r2, #3
   1d854:	4620      	mov	r0, r4
		b->next = second;
   1d856:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1d85a:	f7ff ff59 	bl	1d710 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1d85e:	4633      	mov	r3, r6
   1d860:	4629      	mov	r1, r5
   1d862:	4620      	mov	r0, r4
}
   1d864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d868:	2202      	movs	r2, #2
   1d86a:	f7ff bf51 	b.w	1d710 <chunk_set>

0001d86e <free_list_remove>:
{
   1d86e:	b538      	push	{r3, r4, r5, lr}
   1d870:	4604      	mov	r4, r0
   1d872:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   1d874:	f7ff ff57 	bl	1d726 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   1d878:	68a3      	ldr	r3, [r4, #8]
   1d87a:	4601      	mov	r1, r0
   1d87c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d880:	d301      	bcc.n	1d886 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1d882:	2801      	cmp	r0, #1
   1d884:	d009      	beq.n	1d89a <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d886:	4620      	mov	r0, r4
   1d888:	f7ff ff6f 	bl	1d76a <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1d88c:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d88e:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1d890:	4620      	mov	r0, r4
}
   1d892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1d896:	f7ff bfbb 	b.w	1d810 <free_list_remove_bidx>
}
   1d89a:	bd38      	pop	{r3, r4, r5, pc}

0001d89c <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1d89c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d8a0:	4604      	mov	r4, r0
   1d8a2:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   1d8a4:	f7ff ff61 	bl	1d76a <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1d8a8:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1d8aa:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1d8ac:	4620      	mov	r0, r4
   1d8ae:	f7ff ff5c 	bl	1d76a <bucket_idx>
   1d8b2:	42a8      	cmp	r0, r5
   1d8b4:	da04      	bge.n	1d8c0 <alloc_chunk+0x24>
		return 0;
   1d8b6:	2100      	movs	r1, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1d8b8:	4608      	mov	r0, r1
   1d8ba:	b003      	add	sp, #12
   1d8bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   1d8c0:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   1d8c4:	f8d9 8010 	ldr.w	r8, [r9, #16]
   1d8c8:	f1b8 0f00 	cmp.w	r8, #0
   1d8cc:	d019      	beq.n	1d902 <alloc_chunk+0x66>
   1d8ce:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   1d8d0:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   1d8d4:	4620      	mov	r0, r4
   1d8d6:	9101      	str	r1, [sp, #4]
   1d8d8:	f7ff ff25 	bl	1d726 <chunk_size>
   1d8dc:	42b8      	cmp	r0, r7
   1d8de:	9901      	ldr	r1, [sp, #4]
   1d8e0:	d305      	bcc.n	1d8ee <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   1d8e2:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1d8e4:	4620      	mov	r0, r4
   1d8e6:	f7ff ff93 	bl	1d810 <free_list_remove_bidx>
   1d8ea:	9901      	ldr	r1, [sp, #4]
		return c;
   1d8ec:	e7e4      	b.n	1d8b8 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1d8ee:	2203      	movs	r2, #3
   1d8f0:	4620      	mov	r0, r4
   1d8f2:	f7ff ff02 	bl	1d6fa <chunk_field>
		} while (--i && b->next != first);
   1d8f6:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   1d8f8:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   1d8fc:	d001      	beq.n	1d902 <alloc_chunk+0x66>
   1d8fe:	4580      	cmp	r8, r0
   1d900:	d1e6      	bne.n	1d8d0 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1d902:	f04f 32ff 	mov.w	r2, #4294967295
   1d906:	68e3      	ldr	r3, [r4, #12]
   1d908:	3501      	adds	r5, #1
   1d90a:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0) {
   1d90c:	401a      	ands	r2, r3
   1d90e:	d0d2      	beq.n	1d8b6 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1d910:	fa92 f2a2 	rbit	r2, r2
   1d914:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1d918:	1d13      	adds	r3, r2, #4
   1d91a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1d91e:	9101      	str	r1, [sp, #4]
   1d920:	e7e0      	b.n	1d8e4 <alloc_chunk+0x48>

0001d922 <free_list_add>:
{
   1d922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d926:	4604      	mov	r4, r0
   1d928:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   1d92a:	f7ff fefc 	bl	1d726 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   1d92e:	68a3      	ldr	r3, [r4, #8]
   1d930:	4601      	mov	r1, r0
   1d932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d936:	d301      	bcc.n	1d93c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1d938:	2801      	cmp	r0, #1
   1d93a:	d035      	beq.n	1d9a8 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d93c:	4620      	mov	r0, r4
   1d93e:	f7ff ff14 	bl	1d76a <bucket_idx>
	if (b->next == 0) {
   1d942:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1d946:	6916      	ldr	r6, [r2, #16]
   1d948:	b99e      	cbnz	r6, 1d972 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1d94a:	2301      	movs	r3, #1
   1d94c:	fa03 f000 	lsl.w	r0, r3, r0
   1d950:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1d952:	4629      	mov	r1, r5
   1d954:	4303      	orrs	r3, r0
   1d956:	60e3      	str	r3, [r4, #12]
   1d958:	4620      	mov	r0, r4
		b->next = c;
   1d95a:	6115      	str	r5, [r2, #16]
   1d95c:	462b      	mov	r3, r5
   1d95e:	2202      	movs	r2, #2
   1d960:	f7ff fed6 	bl	1d710 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1d964:	2203      	movs	r2, #3
   1d966:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1d968:	4620      	mov	r0, r4
}
   1d96a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d96e:	f7ff becf 	b.w	1d710 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1d972:	2202      	movs	r2, #2
   1d974:	4631      	mov	r1, r6
   1d976:	4620      	mov	r0, r4
   1d978:	f7ff febf 	bl	1d6fa <chunk_field>
   1d97c:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1d97e:	4603      	mov	r3, r0
   1d980:	2202      	movs	r2, #2
   1d982:	4629      	mov	r1, r5
   1d984:	4620      	mov	r0, r4
   1d986:	f7ff fec3 	bl	1d710 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1d98a:	4633      	mov	r3, r6
   1d98c:	2203      	movs	r2, #3
   1d98e:	4629      	mov	r1, r5
   1d990:	4620      	mov	r0, r4
   1d992:	f7ff febd 	bl	1d710 <chunk_set>
   1d996:	2203      	movs	r2, #3
   1d998:	4639      	mov	r1, r7
   1d99a:	462b      	mov	r3, r5
   1d99c:	4620      	mov	r0, r4
   1d99e:	f7ff feb7 	bl	1d710 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1d9a2:	2202      	movs	r2, #2
   1d9a4:	4631      	mov	r1, r6
   1d9a6:	e7df      	b.n	1d968 <free_list_add+0x46>
   1d9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d9ac <sys_heap_free>:
{
   1d9ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (mem == NULL) {
   1d9ae:	2900      	cmp	r1, #0
   1d9b0:	d052      	beq.n	1da58 <sys_heap_free+0xac>
	struct z_heap *h = heap->heap;
   1d9b2:	6805      	ldr	r5, [r0, #0]
	set_chunk_used(h, c, false);
   1d9b4:	2200      	movs	r2, #0
	return big_heap(h) ? 8 : 4;
   1d9b6:	68ab      	ldr	r3, [r5, #8]
   1d9b8:	4628      	mov	r0, r5
   1d9ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d9be:	bf2c      	ite	cs
   1d9c0:	2408      	movcs	r4, #8
   1d9c2:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1d9c4:	1b09      	subs	r1, r1, r4
   1d9c6:	1b4c      	subs	r4, r1, r5
   1d9c8:	bf48      	it	mi
   1d9ca:	3407      	addmi	r4, #7
   1d9cc:	10e4      	asrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1d9ce:	4621      	mov	r1, r4
   1d9d0:	f7ff feaf 	bl	1d732 <set_chunk_used>
	return c + chunk_size(h, c);
   1d9d4:	4621      	mov	r1, r4
   1d9d6:	f7ff fea6 	bl	1d726 <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1d9da:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   1d9dc:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1d9de:	4628      	mov	r0, r5
   1d9e0:	9101      	str	r1, [sp, #4]
   1d9e2:	f7ff fe8a 	bl	1d6fa <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1d9e6:	f010 0f01 	tst.w	r0, #1
   1d9ea:	9901      	ldr	r1, [sp, #4]
   1d9ec:	d10b      	bne.n	1da06 <sys_heap_free+0x5a>
		free_list_remove(h, right_chunk(h, c));
   1d9ee:	4628      	mov	r0, r5
   1d9f0:	f7ff ff3d 	bl	1d86e <free_list_remove>
	return c + chunk_size(h, c);
   1d9f4:	4621      	mov	r1, r4
   1d9f6:	4628      	mov	r0, r5
   1d9f8:	f7ff fe95 	bl	1d726 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1d9fc:	4621      	mov	r1, r4
   1d9fe:	1822      	adds	r2, r4, r0
   1da00:	4628      	mov	r0, r5
   1da02:	f7ff febf 	bl	1d784 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1da06:	2200      	movs	r2, #0
   1da08:	4621      	mov	r1, r4
   1da0a:	4628      	mov	r0, r5
   1da0c:	f7ff fe75 	bl	1d6fa <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1da10:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   1da12:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1da14:	4628      	mov	r0, r5
   1da16:	9101      	str	r1, [sp, #4]
   1da18:	f7ff fe6f 	bl	1d6fa <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1da1c:	f010 0601 	ands.w	r6, r0, #1
   1da20:	9901      	ldr	r1, [sp, #4]
   1da22:	d112      	bne.n	1da4a <sys_heap_free+0x9e>
		free_list_remove(h, left_chunk(h, c));
   1da24:	4628      	mov	r0, r5
   1da26:	f7ff ff22 	bl	1d86e <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1da2a:	4621      	mov	r1, r4
   1da2c:	4632      	mov	r2, r6
   1da2e:	4628      	mov	r0, r5
   1da30:	f7ff fe63 	bl	1d6fa <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1da34:	4622      	mov	r2, r4
   1da36:	1a21      	subs	r1, r4, r0
   1da38:	4628      	mov	r0, r5
   1da3a:	f7ff fea3 	bl	1d784 <merge_chunks>
   1da3e:	4621      	mov	r1, r4
   1da40:	4632      	mov	r2, r6
   1da42:	4628      	mov	r0, r5
   1da44:	f7ff fe59 	bl	1d6fa <chunk_field>
   1da48:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1da4a:	4621      	mov	r1, r4
   1da4c:	4628      	mov	r0, r5
}
   1da4e:	b002      	add	sp, #8
   1da50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
   1da54:	f7ff bf65 	b.w	1d922 <free_list_add>
}
   1da58:	b002      	add	sp, #8
   1da5a:	bd70      	pop	{r4, r5, r6, pc}

0001da5c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1da5c:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0) {
   1da5e:	b909      	cbnz	r1, 1da64 <sys_heap_alloc+0x8>
		return NULL;
   1da60:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1da62:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   1da64:	6805      	ldr	r5, [r0, #0]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1da66:	1dcc      	adds	r4, r1, #7
	return big_heap(h) ? 8 : 4;
   1da68:	68ab      	ldr	r3, [r5, #8]
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1da6a:	4628      	mov	r0, r5
   1da6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1da70:	bf2c      	ite	cs
   1da72:	2208      	movcs	r2, #8
   1da74:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1da76:	4414      	add	r4, r2
   1da78:	08e4      	lsrs	r4, r4, #3
   1da7a:	4621      	mov	r1, r4
   1da7c:	f7ff ff0e 	bl	1d89c <alloc_chunk>
	if (c == 0) {
   1da80:	4606      	mov	r6, r0
   1da82:	2800      	cmp	r0, #0
   1da84:	d0ec      	beq.n	1da60 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   1da86:	4601      	mov	r1, r0
   1da88:	4628      	mov	r0, r5
   1da8a:	f7ff fe4c 	bl	1d726 <chunk_size>
   1da8e:	42a0      	cmp	r0, r4
   1da90:	d909      	bls.n	1daa6 <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   1da92:	4434      	add	r4, r6
   1da94:	4631      	mov	r1, r6
   1da96:	4628      	mov	r0, r5
   1da98:	4622      	mov	r2, r4
   1da9a:	f7ff fe92 	bl	1d7c2 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1da9e:	4621      	mov	r1, r4
   1daa0:	4628      	mov	r0, r5
   1daa2:	f7ff ff3e 	bl	1d922 <free_list_add>
	set_chunk_used(h, c, true);
   1daa6:	4628      	mov	r0, r5
   1daa8:	2201      	movs	r2, #1
   1daaa:	4631      	mov	r1, r6
   1daac:	f7ff fe41 	bl	1d732 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1dab0:	68ab      	ldr	r3, [r5, #8]
   1dab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1dab6:	bf2c      	ite	cs
   1dab8:	2008      	movcs	r0, #8
   1daba:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1dabc:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1dac0:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1dac2:	e7ce      	b.n	1da62 <sys_heap_alloc+0x6>

0001dac4 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1dac4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1dac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1daca:	bf2c      	ite	cs
   1dacc:	2508      	movcs	r5, #8
   1dace:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1dad0:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   1dad2:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   1dad4:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1dad6:	1dcc      	adds	r4, r1, #7
   1dad8:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   1dadc:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   1dade:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1dae2:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1dae4:	440d      	add	r5, r1
   1dae6:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1daea:	1b2d      	subs	r5, r5, r4
   1daec:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1daee:	4629      	mov	r1, r5
   1daf0:	4620      	mov	r0, r4
	h->len = buf_sz;
   1daf2:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1daf4:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1daf6:	f7ff fe38 	bl	1d76a <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1dafa:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1dafc:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   1dafe:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1db00:	361b      	adds	r6, #27
   1db02:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   1db04:	f104 0210 	add.w	r2, r4, #16
   1db08:	428b      	cmp	r3, r1
   1db0a:	db29      	blt.n	1db60 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1db0c:	4632      	mov	r2, r6
   1db0e:	4620      	mov	r0, r4
   1db10:	2100      	movs	r1, #0
   1db12:	f7ff fe26 	bl	1d762 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1db16:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1db18:	4620      	mov	r0, r4
   1db1a:	2201      	movs	r2, #1
   1db1c:	2100      	movs	r1, #0
   1db1e:	f7ff fe08 	bl	1d732 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1db22:	463a      	mov	r2, r7
   1db24:	4631      	mov	r1, r6
   1db26:	f7ff fe1c 	bl	1d762 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1db2a:	4633      	mov	r3, r6
   1db2c:	4631      	mov	r1, r6
   1db2e:	4620      	mov	r0, r4
   1db30:	2200      	movs	r2, #0
   1db32:	f7ff fded 	bl	1d710 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1db36:	4629      	mov	r1, r5
   1db38:	4620      	mov	r0, r4
   1db3a:	2200      	movs	r2, #0
   1db3c:	f7ff fe11 	bl	1d762 <set_chunk_size>
   1db40:	463b      	mov	r3, r7
   1db42:	4629      	mov	r1, r5
   1db44:	4620      	mov	r0, r4
   1db46:	2200      	movs	r2, #0
   1db48:	f7ff fde2 	bl	1d710 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1db4c:	4629      	mov	r1, r5
   1db4e:	4620      	mov	r0, r4
   1db50:	2201      	movs	r2, #1
   1db52:	f7ff fdee 	bl	1d732 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1db56:	4631      	mov	r1, r6
}
   1db58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1db5c:	f7ff bee1 	b.w	1d922 <free_list_add>
		h->buckets[i].next = 0;
   1db60:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1db64:	3301      	adds	r3, #1
   1db66:	e7cf      	b.n	1db08 <sys_heap_init+0x44>

0001db68 <_to_x>:
{
   1db68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db6a:	4603      	mov	r3, r0
   1db6c:	4604      	mov	r4, r0
		unsigned int d = n % base;
   1db6e:	fbb1 f0f2 	udiv	r0, r1, r2
   1db72:	fb02 1510 	mls	r5, r2, r0, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1db76:	2d09      	cmp	r5, #9
   1db78:	460f      	mov	r7, r1
   1db7a:	bf8c      	ite	hi
   1db7c:	2627      	movhi	r6, #39	; 0x27
   1db7e:	2600      	movls	r6, #0
		n /= base;
   1db80:	4601      	mov	r1, r0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1db82:	4620      	mov	r0, r4
   1db84:	3530      	adds	r5, #48	; 0x30
   1db86:	4435      	add	r5, r6
	} while (n);
   1db88:	4297      	cmp	r7, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1db8a:	f800 5b01 	strb.w	r5, [r0], #1
	} while (n);
   1db8e:	d206      	bcs.n	1db9e <_to_x+0x36>
	*buf = 0;
   1db90:	2200      	movs	r2, #0
   1db92:	7002      	strb	r2, [r0, #0]
	len = buf - start;
   1db94:	4622      	mov	r2, r4
   1db96:	1ac0      	subs	r0, r0, r3
	for (buf--; buf > start; buf--, start++) {
   1db98:	429a      	cmp	r2, r3
   1db9a:	d802      	bhi.n	1dba2 <_to_x+0x3a>
}
   1db9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1db9e:	4604      	mov	r4, r0
   1dba0:	e7e5      	b.n	1db6e <_to_x+0x6>
		char tmp = *buf;
   1dba2:	7811      	ldrb	r1, [r2, #0]
		*buf = *start;
   1dba4:	781c      	ldrb	r4, [r3, #0]
   1dba6:	f802 4901 	strb.w	r4, [r2], #-1
		*start = tmp;
   1dbaa:	f803 1b01 	strb.w	r1, [r3], #1
	for (buf--; buf > start; buf--, start++) {
   1dbae:	e7f3      	b.n	1db98 <_to_x+0x30>

0001dbb0 <_rlrshift>:
	*v = (*v & 1) + (*v >> 1);
   1dbb0:	2100      	movs	r1, #0
{
   1dbb2:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1dbb4:	e9d0 6500 	ldrd	r6, r5, [r0]
   1dbb8:	0872      	lsrs	r2, r6, #1
   1dbba:	f006 0301 	and.w	r3, r6, #1
   1dbbe:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1dbc2:	189b      	adds	r3, r3, r2
   1dbc4:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1dbc8:	eb44 0101 	adc.w	r1, r4, r1
   1dbcc:	e9c0 3100 	strd	r3, r1, [r0]
}
   1dbd0:	bd70      	pop	{r4, r5, r6, pc}

0001dbd2 <_ldiv5>:
{
   1dbd2:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t rem = *v, quot = 0U, q;
   1dbd4:	e9d0 3200 	ldrd	r3, r2, [r0]
		q = (uint64_t)(hi / 5U) << shifts[i];
   1dbd8:	2705      	movs	r7, #5
	rem += 2U;
   1dbda:	3302      	adds	r3, #2
   1dbdc:	f142 0200 	adc.w	r2, r2, #0
		q = (uint64_t)(hi / 5U) << shifts[i];
   1dbe0:	fbb2 fef7 	udiv	lr, r2, r7
   1dbe4:	f04f 0c00 	mov.w	ip, #0
		rem -= q * 5U;
   1dbe8:	fb07 f10e 	mul.w	r1, r7, lr
   1dbec:	ebb3 060c 	subs.w	r6, r3, ip
   1dbf0:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1dbf4:	08f2      	lsrs	r2, r6, #3
   1dbf6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1dbfa:	fbb2 f1f7 	udiv	r1, r2, r7
   1dbfe:	00ca      	lsls	r2, r1, #3
		quot += q;
   1dc00:	eb1c 0402 	adds.w	r4, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1dc04:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1dc08:	eb4e 0503 	adc.w	r5, lr, r3
		rem -= q * 5U;
   1dc0c:	fba2 2307 	umull	r2, r3, r2, r7
   1dc10:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1dc12:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1dc16:	18e4      	adds	r4, r4, r3
   1dc18:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
   1dc1c:	e9c0 4500 	strd	r4, r5, [r0]
}
   1dc20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dc22 <_get_digit>:
	if (*digit_count > 0) {
   1dc22:	680b      	ldr	r3, [r1, #0]
{
   1dc24:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   1dc26:	2b00      	cmp	r3, #0
   1dc28:	dd10      	ble.n	1dc4c <_get_digit+0x2a>
		*digit_count -= 1;
   1dc2a:	3b01      	subs	r3, #1
   1dc2c:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1dc2e:	210a      	movs	r1, #10
   1dc30:	6802      	ldr	r2, [r0, #0]
   1dc32:	6844      	ldr	r4, [r0, #4]
   1dc34:	fba2 5601 	umull	r5, r6, r2, r1
   1dc38:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1dc3c:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1dc40:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   1dc44:	0f31      	lsrs	r1, r6, #28
   1dc46:	3130      	adds	r1, #48	; 0x30
}
   1dc48:	4608      	mov	r0, r1
   1dc4a:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1dc4c:	2130      	movs	r1, #48	; 0x30
   1dc4e:	e7fb      	b.n	1dc48 <_get_digit+0x26>

0001dc50 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_SIMPLE_LOG_LEVEL_DBG, 1);
GEN_ABSOLUTE_SYM(CONFIG_MQTT_SIMPLE_LOG_LEVEL, 4);

GEN_ABS_SYM_END
   1dc50:	4770      	bx	lr

0001dc52 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1dc52:	f7fe b801 	b.w	1bc58 <SystemInit>

0001dc56 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1dc56:	2300      	movs	r3, #0
	list->head = NULL;
   1dc58:	e9c0 3300 	strd	r3, r3, [r0]
}
   1dc5c:	4770      	bx	lr

0001dc5e <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1dc5e:	6803      	ldr	r3, [r0, #0]
   1dc60:	b923      	cbnz	r3, 1dc6c <log_list_add_tail+0xe>
		list->head = msg;
   1dc62:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1dc64:	2300      	movs	r3, #0
	list->tail = msg;
   1dc66:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1dc68:	600b      	str	r3, [r1, #0]
}
   1dc6a:	4770      	bx	lr
		list->tail->next = msg;
   1dc6c:	6843      	ldr	r3, [r0, #4]
   1dc6e:	6019      	str	r1, [r3, #0]
   1dc70:	e7f8      	b.n	1dc64 <log_list_add_tail+0x6>

0001dc72 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1dc72:	6800      	ldr	r0, [r0, #0]
   1dc74:	4770      	bx	lr

0001dc76 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   1dc76:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   1dc78:	b10b      	cbz	r3, 1dc7e <log_list_head_get+0x8>
		list->head = list->head->next;
   1dc7a:	681a      	ldr	r2, [r3, #0]
   1dc7c:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   1dc7e:	4618      	mov	r0, r3
   1dc80:	4770      	bx	lr

0001dc82 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1dc82:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1dc84:	f7f1 f83a 	bl	ecfc <log_msg_chunk_alloc>

	if (msg != NULL) {
   1dc88:	b118      	cbz	r0, 1dc92 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1dc8a:	2301      	movs	r3, #1
   1dc8c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1dc8e:	2300      	movs	r3, #0
   1dc90:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1dc92:	bd08      	pop	{r3, pc}

0001dc94 <k_cycle_get_32_wrapper>:
   1dc94:	f7f1 be70 	b.w	f978 <z_timer_cycle_get_32>

0001dc98 <dummy_timestamp>:
   1dc98:	2000      	movs	r0, #0
   1dc9a:	4770      	bx	lr

0001dc9c <z_log_get_s_mask>:
{
   1dc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc9e:	4605      	mov	r5, r0
	uint32_t mask = 0;
   1dca0:	2000      	movs	r0, #0
				mask |= BIT(arg);
   1dca2:	2701      	movs	r7, #1
	uint32_t arg = 0;
   1dca4:	4603      	mov	r3, r0
	bool arm = false;
   1dca6:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
   1dca8:	f815 4b01 	ldrb.w	r4, [r5], #1
   1dcac:	b10c      	cbz	r4, 1dcb2 <z_log_get_s_mask+0x16>
   1dcae:	428b      	cmp	r3, r1
   1dcb0:	d300      	bcc.n	1dcb4 <z_log_get_s_mask+0x18>
}
   1dcb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1dcb4:	2c25      	cmp	r4, #37	; 0x25
   1dcb6:	d102      	bne.n	1dcbe <z_log_get_s_mask+0x22>
			arm = !arm;
   1dcb8:	f082 0201 	eor.w	r2, r2, #1
   1dcbc:	e7f4      	b.n	1dca8 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1dcbe:	2a00      	cmp	r2, #0
   1dcc0:	d0f2      	beq.n	1dca8 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1dcc2:	f044 0620 	orr.w	r6, r4, #32
   1dcc6:	3e61      	subs	r6, #97	; 0x61
   1dcc8:	2e19      	cmp	r6, #25
   1dcca:	d8ed      	bhi.n	1dca8 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1dccc:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1dcce:	bf04      	itt	eq
   1dcd0:	fa07 f203 	lsleq.w	r2, r7, r3
   1dcd4:	4310      	orreq	r0, r2
			arg++;
   1dcd6:	3301      	adds	r3, #1
			arm = false;
   1dcd8:	2200      	movs	r2, #0
   1dcda:	e7e5      	b.n	1dca8 <z_log_get_s_mask+0xc>

0001dcdc <log_0>:
{
   1dcdc:	b513      	push	{r0, r1, r4, lr}
   1dcde:	4604      	mov	r4, r0
   1dce0:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1dce2:	f7ff ffce 	bl	1dc82 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1dce6:	b130      	cbz	r0, 1dcf6 <log_0+0x1a>
		msg_finalize(msg, src_level);
   1dce8:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1dcea:	6104      	str	r4, [r0, #16]
}
   1dcec:	b002      	add	sp, #8
   1dcee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1dcf2:	f7f0 bf25 	b.w	eb40 <msg_finalize>
}
   1dcf6:	b002      	add	sp, #8
   1dcf8:	bd10      	pop	{r4, pc}

0001dcfa <log_1>:
{
   1dcfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1dcfc:	460c      	mov	r4, r1
   1dcfe:	4611      	mov	r1, r2
   1dd00:	4605      	mov	r5, r0
   1dd02:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1dd04:	f7ff ffbd 	bl	1dc82 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1dd08:	b160      	cbz	r0, 1dd24 <log_1+0x2a>
		msg->str = str;
   1dd0a:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1dd0c:	2501      	movs	r5, #1
   1dd0e:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1dd10:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   1dd12:	f365 1207 	bfi	r2, r5, #4, #4
   1dd16:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   1dd18:	9901      	ldr	r1, [sp, #4]
}
   1dd1a:	b003      	add	sp, #12
   1dd1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   1dd20:	f7f0 bf0e 	b.w	eb40 <msg_finalize>
}
   1dd24:	b003      	add	sp, #12
   1dd26:	bd30      	pop	{r4, r5, pc}

0001dd28 <log_2>:
{
   1dd28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dd2a:	460e      	mov	r6, r1
   1dd2c:	4619      	mov	r1, r3
   1dd2e:	4607      	mov	r7, r0
   1dd30:	4615      	mov	r5, r2
   1dd32:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1dd34:	f7ff ffa5 	bl	1dc82 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1dd38:	b168      	cbz	r0, 1dd56 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1dd3a:	2202      	movs	r2, #2
   1dd3c:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1dd3e:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   1dd42:	f362 1307 	bfi	r3, r2, #4, #4
   1dd46:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1dd48:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1dd4a:	6107      	str	r7, [r0, #16]
}
   1dd4c:	b003      	add	sp, #12
   1dd4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   1dd52:	f7f0 bef5 	b.w	eb40 <msg_finalize>
}
   1dd56:	b003      	add	sp, #12
   1dd58:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dd5a <log_3>:
{
   1dd5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1dd5e:	460f      	mov	r7, r1
   1dd60:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1dd64:	4680      	mov	r8, r0
   1dd66:	4616      	mov	r6, r2
   1dd68:	461d      	mov	r5, r3
   1dd6a:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1dd6c:	f7ff ff89 	bl	1dc82 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1dd70:	b178      	cbz	r0, 1dd92 <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1dd72:	2203      	movs	r2, #3
   1dd74:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1dd76:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   1dd7a:	f362 1307 	bfi	r3, r2, #4, #4
   1dd7e:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   1dd80:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   1dd82:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   1dd86:	61c5      	str	r5, [r0, #28]
}
   1dd88:	b002      	add	sp, #8
   1dd8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1dd8e:	f7f0 bed7 	b.w	eb40 <msg_finalize>
}
   1dd92:	b002      	add	sp, #8
   1dd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dd98 <log_n>:
{
   1dd98:	b510      	push	{r4, lr}
   1dd9a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1dd9c:	f000 f899 	bl	1ded2 <log_msg_create_n>
		if (msg == NULL) {
   1dda0:	b120      	cbz	r0, 1ddac <log_n+0x14>
		msg_finalize(msg, src_level);
   1dda2:	4621      	mov	r1, r4
}
   1dda4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1dda8:	f7f0 beca 	b.w	eb40 <msg_finalize>
}
   1ddac:	bd10      	pop	{r4, pc}

0001ddae <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1ddae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ddb2:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1ddb4:	8903      	ldrh	r3, [r0, #8]
{
   1ddb6:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1ddb8:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1ddbc:	42a3      	cmp	r3, r4
{
   1ddbe:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   1ddc2:	d803      	bhi.n	1ddcc <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   1ddc4:	2300      	movs	r3, #0
   1ddc6:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1ddc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1ddcc:	6811      	ldr	r1, [r2, #0]
   1ddce:	4421      	add	r1, r4
   1ddd0:	4299      	cmp	r1, r3
		*length = available_len - offset;
   1ddd2:	bf84      	itt	hi
   1ddd4:	1b19      	subhi	r1, r3, r4
   1ddd6:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ddd8:	2b0c      	cmp	r3, #12
	req_len = *length;
   1ddda:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ddde:	d92b      	bls.n	1de38 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1dde0:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1dde2:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1dde6:	d82e      	bhi.n	1de46 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1dde8:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   1ddea:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1ddec:	454b      	cmp	r3, r9
   1ddee:	bf28      	it	cs
   1ddf0:	464b      	movcs	r3, r9
   1ddf2:	4420      	add	r0, r4
   1ddf4:	461d      	mov	r5, r3
			(void)memcpy(&head_data[offset], data, cpy_len);
   1ddf6:	461a      	mov	r2, r3
		if (put_op) {
   1ddf8:	b317      	cbz	r7, 1de40 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1ddfa:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1ddfc:	f000 fd4b 	bl	1e896 <memcpy>
		req_len -= cpy_len;
   1de00:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1de04:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1de06:	f1b9 0f00 	cmp.w	r9, #0
   1de0a:	d0dd      	beq.n	1ddc8 <log_msg_hexdump_data_op+0x1a>
   1de0c:	f1b8 0f00 	cmp.w	r8, #0
   1de10:	d0da      	beq.n	1ddc8 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1de12:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1de16:	454d      	cmp	r5, r9
   1de18:	bf28      	it	cs
   1de1a:	464d      	movcs	r5, r9
		if (put_op) {
   1de1c:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
   1de1e:	462a      	mov	r2, r5
   1de20:	4440      	add	r0, r8
		if (put_op) {
   1de22:	b1bf      	cbz	r7, 1de54 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   1de24:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1de26:	f000 fd36 	bl	1e896 <memcpy>
		offset = 0;
   1de2a:	2400      	movs	r4, #0
		cont = cont->next;
   1de2c:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   1de30:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1de34:	442e      	add	r6, r5
   1de36:	e7e6      	b.n	1de06 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   1de38:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   1de3c:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   1de3e:	e7d5      	b.n	1ddec <log_msg_hexdump_data_op+0x3e>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1de40:	4601      	mov	r1, r0
   1de42:	4630      	mov	r0, r6
   1de44:	e7da      	b.n	1ddfc <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1de46:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1de48:	2c1b      	cmp	r4, #27
   1de4a:	d9dc      	bls.n	1de06 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1de4c:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1de50:	3c1c      	subs	r4, #28
   1de52:	e7f9      	b.n	1de48 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1de54:	4601      	mov	r1, r0
   1de56:	4630      	mov	r0, r6
   1de58:	e7e5      	b.n	1de26 <log_msg_hexdump_data_op+0x78>

0001de5a <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1de5a:	3004      	adds	r0, #4
   1de5c:	e8d0 3fef 	ldaex	r3, [r0]
   1de60:	3301      	adds	r3, #1
   1de62:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1de66:	2a00      	cmp	r2, #0
   1de68:	d1f8      	bne.n	1de5c <log_msg_get+0x2>
}
   1de6a:	4770      	bx	lr

0001de6c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1de6c:	7a40      	ldrb	r0, [r0, #9]
}
   1de6e:	0900      	lsrs	r0, r0, #4
   1de70:	4770      	bx	lr

0001de72 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1de72:	7a43      	ldrb	r3, [r0, #9]
   1de74:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1de78:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1de7c:	d216      	bcs.n	1deac <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1de7e:	2a03      	cmp	r2, #3
   1de80:	d803      	bhi.n	1de8a <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1de82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1de86:	6948      	ldr	r0, [r1, #20]
   1de88:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1de8a:	2901      	cmp	r1, #1
   1de8c:	d803      	bhi.n	1de96 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1de8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1de92:	6988      	ldr	r0, [r1, #24]
   1de94:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1de96:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1de98:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1de9a:	2906      	cmp	r1, #6
   1de9c:	d803      	bhi.n	1dea6 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1de9e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1dea2:	6848      	ldr	r0, [r1, #4]
   1dea4:	4770      	bx	lr
		cont = cont->next;
   1dea6:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1dea8:	3907      	subs	r1, #7
		cont = cont->next;
   1deaa:	e7f6      	b.n	1de9a <log_msg_arg_get+0x28>
		return 0;
   1deac:	2000      	movs	r0, #0
}
   1deae:	4770      	bx	lr

0001deb0 <log_msg_put>:
{
   1deb0:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1deb2:	1d02      	adds	r2, r0, #4
   1deb4:	e8d2 1fef 	ldaex	r1, [r2]
   1deb8:	3901      	subs	r1, #1
   1deba:	e8c2 1fec 	stlex	ip, r1, [r2]
   1debe:	f1bc 0f00 	cmp.w	ip, #0
   1dec2:	d1f7      	bne.n	1deb4 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   1dec4:	685b      	ldr	r3, [r3, #4]
   1dec6:	b90b      	cbnz	r3, 1decc <log_msg_put+0x1c>
		msg_free(msg);
   1dec8:	f7f0 bf2c 	b.w	ed24 <msg_free>
}
   1decc:	4770      	bx	lr

0001dece <log_msg_str_get>:
}
   1dece:	6900      	ldr	r0, [r0, #16]
   1ded0:	4770      	bx	lr

0001ded2 <log_msg_create_n>:
{
   1ded2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ded6:	4681      	mov	r9, r0
   1ded8:	4688      	mov	r8, r1
   1deda:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1dedc:	f7f0 ff0e 	bl	ecfc <log_msg_chunk_alloc>
	if (msg != NULL) {
   1dee0:	4604      	mov	r4, r0
   1dee2:	b330      	cbz	r0, 1df32 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1dee4:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1dee6:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1dee8:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1deea:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1deec:	8107      	strh	r7, [r0, #8]
   1deee:	d909      	bls.n	1df04 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1def0:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1def2:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   1def6:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   1def8:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1defc:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1defe:	f1ba 0f00 	cmp.w	sl, #0
   1df02:	dc0e      	bgt.n	1df22 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1df04:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1df06:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1df08:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   1df0c:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1df10:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1df12:	d818      	bhi.n	1df46 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1df14:	4641      	mov	r1, r8
   1df16:	00aa      	lsls	r2, r5, #2
   1df18:	f104 0014 	add.w	r0, r4, #20
   1df1c:	f000 fcbb 	bl	1e896 <memcpy>
	while (nargs != 0U) {
   1df20:	e007      	b.n	1df32 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1df22:	f7f0 feeb 	bl	ecfc <log_msg_chunk_alloc>
		if (cont == NULL) {
   1df26:	4606      	mov	r6, r0
   1df28:	b930      	cbnz	r0, 1df38 <log_msg_create_n+0x66>
			msg_free(msg);
   1df2a:	4620      	mov	r0, r4
   1df2c:	f7f0 fefa 	bl	ed24 <msg_free>
			return NULL;
   1df30:	4634      	mov	r4, r6
}
   1df32:	4620      	mov	r0, r4
   1df34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1df38:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1df3c:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   1df40:	4683      	mov	fp, r0
		cont->next = NULL;
   1df42:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   1df44:	e7db      	b.n	1defe <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1df46:	4641      	mov	r1, r8
   1df48:	2208      	movs	r2, #8
   1df4a:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1df4e:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1df50:	f000 fca1 	bl	1e896 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1df54:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1df56:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1df5a:	2d07      	cmp	r5, #7
   1df5c:	462e      	mov	r6, r5
   1df5e:	bf28      	it	cs
   1df60:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1df62:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1df66:	4641      	mov	r1, r8
   1df68:	1d38      	adds	r0, r7, #4
   1df6a:	464a      	mov	r2, r9
   1df6c:	f000 fc93 	bl	1e896 <memcpy>
	while (nargs != 0U) {
   1df70:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1df72:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1df74:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1df76:	d1f0      	bne.n	1df5a <log_msg_create_n+0x88>
   1df78:	e7db      	b.n	1df32 <log_msg_create_n+0x60>

0001df7a <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1df7a:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1df7c:	2400      	movs	r4, #0
   1df7e:	9400      	str	r4, [sp, #0]
   1df80:	f7ff ff15 	bl	1ddae <log_msg_hexdump_data_op>
}
   1df84:	b002      	add	sp, #8
   1df86:	bd10      	pop	{r4, pc}

0001df88 <buffer_write>:
{
   1df88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1df8a:	4606      	mov	r6, r0
   1df8c:	460d      	mov	r5, r1
   1df8e:	4614      	mov	r4, r2
   1df90:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1df92:	4621      	mov	r1, r4
   1df94:	4628      	mov	r0, r5
   1df96:	463a      	mov	r2, r7
   1df98:	47b0      	blx	r6
	} while (len != 0);
   1df9a:	1a24      	subs	r4, r4, r0
		buf += processed;
   1df9c:	4405      	add	r5, r0
	} while (len != 0);
   1df9e:	d1f8      	bne.n	1df92 <buffer_write+0xa>
}
   1dfa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dfa2 <std_print>:
{
   1dfa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dfa6:	b08e      	sub	sp, #56	; 0x38
   1dfa8:	af0e      	add	r7, sp, #56	; 0x38
   1dfaa:	4680      	mov	r8, r0
   1dfac:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1dfae:	f7ff ff8e 	bl	1dece <log_msg_str_get>
   1dfb2:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1dfb4:	4640      	mov	r0, r8
   1dfb6:	f7ff ff59 	bl	1de6c <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   1dfba:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   1dfbe:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   1dfc0:	0083      	lsls	r3, r0, #2
   1dfc2:	3307      	adds	r3, #7
   1dfc4:	f023 0307 	bic.w	r3, r3, #7
   1dfc8:	ebad 0d03 	sub.w	sp, sp, r3
   1dfcc:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1dfce:	45d1      	cmp	r9, sl
   1dfd0:	d116      	bne.n	1e000 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1dfd2:	4640      	mov	r0, r8
   1dfd4:	f7ff ff4a 	bl	1de6c <log_msg_nargs_get>
   1dfd8:	280f      	cmp	r0, #15
   1dfda:	d81e      	bhi.n	1e01a <std_print+0x78>
   1dfdc:	e8df f010 	tbh	[pc, r0, lsl #1]
   1dfe0:	00200019 	.word	0x00200019
   1dfe4:	002d0026 	.word	0x002d0026
   1dfe8:	00410036 	.word	0x00410036
   1dfec:	005d004e 	.word	0x005d004e
   1dff0:	0081006e 	.word	0x0081006e
   1dff4:	00ad0096 	.word	0x00ad0096
   1dff8:	00e100c6 	.word	0x00e100c6
   1dffc:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1e000:	4649      	mov	r1, r9
   1e002:	4640      	mov	r0, r8
   1e004:	f7ff ff35 	bl	1de72 <log_msg_arg_get>
   1e008:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1e00c:	f109 0901 	add.w	r9, r9, #1
   1e010:	e7dd      	b.n	1dfce <std_print+0x2c>
		print_formatted(log_output, str);
   1e012:	4631      	mov	r1, r6
   1e014:	4628      	mov	r0, r5
   1e016:	f7f0 fec3 	bl	eda0 <print_formatted>
}
   1e01a:	46bd      	mov	sp, r7
   1e01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1e020:	4631      	mov	r1, r6
   1e022:	4628      	mov	r0, r5
   1e024:	6822      	ldr	r2, [r4, #0]
   1e026:	f7f0 febb 	bl	eda0 <print_formatted>
		break;
   1e02a:	e7f6      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1e02c:	4631      	mov	r1, r6
   1e02e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e032:	4628      	mov	r0, r5
   1e034:	f7f0 feb4 	bl	eda0 <print_formatted>
		break;
   1e038:	e7ef      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1e03a:	68a3      	ldr	r3, [r4, #8]
   1e03c:	4631      	mov	r1, r6
   1e03e:	9300      	str	r3, [sp, #0]
   1e040:	4628      	mov	r0, r5
   1e042:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e046:	f7f0 feab 	bl	eda0 <print_formatted>
		break;
   1e04a:	e7e6      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e04c:	68e3      	ldr	r3, [r4, #12]
   1e04e:	4631      	mov	r1, r6
   1e050:	9301      	str	r3, [sp, #4]
   1e052:	68a3      	ldr	r3, [r4, #8]
   1e054:	4628      	mov	r0, r5
   1e056:	9300      	str	r3, [sp, #0]
   1e058:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e05c:	f7f0 fea0 	bl	eda0 <print_formatted>
		break;
   1e060:	e7db      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e062:	6923      	ldr	r3, [r4, #16]
   1e064:	4631      	mov	r1, r6
   1e066:	9302      	str	r3, [sp, #8]
   1e068:	68e3      	ldr	r3, [r4, #12]
   1e06a:	4628      	mov	r0, r5
   1e06c:	9301      	str	r3, [sp, #4]
   1e06e:	68a3      	ldr	r3, [r4, #8]
   1e070:	9300      	str	r3, [sp, #0]
   1e072:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e076:	f7f0 fe93 	bl	eda0 <print_formatted>
		break;
   1e07a:	e7ce      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e07c:	6963      	ldr	r3, [r4, #20]
   1e07e:	4631      	mov	r1, r6
   1e080:	9303      	str	r3, [sp, #12]
   1e082:	6923      	ldr	r3, [r4, #16]
   1e084:	4628      	mov	r0, r5
   1e086:	9302      	str	r3, [sp, #8]
   1e088:	68e3      	ldr	r3, [r4, #12]
   1e08a:	9301      	str	r3, [sp, #4]
   1e08c:	68a3      	ldr	r3, [r4, #8]
   1e08e:	9300      	str	r3, [sp, #0]
   1e090:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e094:	f7f0 fe84 	bl	eda0 <print_formatted>
		break;
   1e098:	e7bf      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e09a:	69a3      	ldr	r3, [r4, #24]
   1e09c:	4631      	mov	r1, r6
   1e09e:	9304      	str	r3, [sp, #16]
   1e0a0:	6963      	ldr	r3, [r4, #20]
   1e0a2:	4628      	mov	r0, r5
   1e0a4:	9303      	str	r3, [sp, #12]
   1e0a6:	6923      	ldr	r3, [r4, #16]
   1e0a8:	9302      	str	r3, [sp, #8]
   1e0aa:	68e3      	ldr	r3, [r4, #12]
   1e0ac:	9301      	str	r3, [sp, #4]
   1e0ae:	68a3      	ldr	r3, [r4, #8]
   1e0b0:	9300      	str	r3, [sp, #0]
   1e0b2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e0b6:	f7f0 fe73 	bl	eda0 <print_formatted>
		break;
   1e0ba:	e7ae      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e0bc:	69e3      	ldr	r3, [r4, #28]
   1e0be:	4631      	mov	r1, r6
   1e0c0:	9305      	str	r3, [sp, #20]
   1e0c2:	69a3      	ldr	r3, [r4, #24]
   1e0c4:	4628      	mov	r0, r5
   1e0c6:	9304      	str	r3, [sp, #16]
   1e0c8:	6963      	ldr	r3, [r4, #20]
   1e0ca:	9303      	str	r3, [sp, #12]
   1e0cc:	6923      	ldr	r3, [r4, #16]
   1e0ce:	9302      	str	r3, [sp, #8]
   1e0d0:	68e3      	ldr	r3, [r4, #12]
   1e0d2:	9301      	str	r3, [sp, #4]
   1e0d4:	68a3      	ldr	r3, [r4, #8]
   1e0d6:	9300      	str	r3, [sp, #0]
   1e0d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e0dc:	f7f0 fe60 	bl	eda0 <print_formatted>
		break;
   1e0e0:	e79b      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e0e2:	6a23      	ldr	r3, [r4, #32]
   1e0e4:	4631      	mov	r1, r6
   1e0e6:	9306      	str	r3, [sp, #24]
   1e0e8:	69e3      	ldr	r3, [r4, #28]
   1e0ea:	4628      	mov	r0, r5
   1e0ec:	9305      	str	r3, [sp, #20]
   1e0ee:	69a3      	ldr	r3, [r4, #24]
   1e0f0:	9304      	str	r3, [sp, #16]
   1e0f2:	6963      	ldr	r3, [r4, #20]
   1e0f4:	9303      	str	r3, [sp, #12]
   1e0f6:	6923      	ldr	r3, [r4, #16]
   1e0f8:	9302      	str	r3, [sp, #8]
   1e0fa:	68e3      	ldr	r3, [r4, #12]
   1e0fc:	9301      	str	r3, [sp, #4]
   1e0fe:	68a3      	ldr	r3, [r4, #8]
   1e100:	9300      	str	r3, [sp, #0]
   1e102:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e106:	f7f0 fe4b 	bl	eda0 <print_formatted>
		break;
   1e10a:	e786      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e10c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e10e:	4631      	mov	r1, r6
   1e110:	9307      	str	r3, [sp, #28]
   1e112:	6a23      	ldr	r3, [r4, #32]
   1e114:	4628      	mov	r0, r5
   1e116:	9306      	str	r3, [sp, #24]
   1e118:	69e3      	ldr	r3, [r4, #28]
   1e11a:	9305      	str	r3, [sp, #20]
   1e11c:	69a3      	ldr	r3, [r4, #24]
   1e11e:	9304      	str	r3, [sp, #16]
   1e120:	6963      	ldr	r3, [r4, #20]
   1e122:	9303      	str	r3, [sp, #12]
   1e124:	6923      	ldr	r3, [r4, #16]
   1e126:	9302      	str	r3, [sp, #8]
   1e128:	68e3      	ldr	r3, [r4, #12]
   1e12a:	9301      	str	r3, [sp, #4]
   1e12c:	68a3      	ldr	r3, [r4, #8]
   1e12e:	9300      	str	r3, [sp, #0]
   1e130:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e134:	f7f0 fe34 	bl	eda0 <print_formatted>
		break;
   1e138:	e76f      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e13a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e13c:	4631      	mov	r1, r6
   1e13e:	9308      	str	r3, [sp, #32]
   1e140:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e142:	4628      	mov	r0, r5
   1e144:	9307      	str	r3, [sp, #28]
   1e146:	6a23      	ldr	r3, [r4, #32]
   1e148:	9306      	str	r3, [sp, #24]
   1e14a:	69e3      	ldr	r3, [r4, #28]
   1e14c:	9305      	str	r3, [sp, #20]
   1e14e:	69a3      	ldr	r3, [r4, #24]
   1e150:	9304      	str	r3, [sp, #16]
   1e152:	6963      	ldr	r3, [r4, #20]
   1e154:	9303      	str	r3, [sp, #12]
   1e156:	6923      	ldr	r3, [r4, #16]
   1e158:	9302      	str	r3, [sp, #8]
   1e15a:	68e3      	ldr	r3, [r4, #12]
   1e15c:	9301      	str	r3, [sp, #4]
   1e15e:	68a3      	ldr	r3, [r4, #8]
   1e160:	9300      	str	r3, [sp, #0]
   1e162:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e166:	f7f0 fe1b 	bl	eda0 <print_formatted>
		break;
   1e16a:	e756      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e16c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e16e:	4631      	mov	r1, r6
   1e170:	9309      	str	r3, [sp, #36]	; 0x24
   1e172:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e174:	4628      	mov	r0, r5
   1e176:	9308      	str	r3, [sp, #32]
   1e178:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e17a:	9307      	str	r3, [sp, #28]
   1e17c:	6a23      	ldr	r3, [r4, #32]
   1e17e:	9306      	str	r3, [sp, #24]
   1e180:	69e3      	ldr	r3, [r4, #28]
   1e182:	9305      	str	r3, [sp, #20]
   1e184:	69a3      	ldr	r3, [r4, #24]
   1e186:	9304      	str	r3, [sp, #16]
   1e188:	6963      	ldr	r3, [r4, #20]
   1e18a:	9303      	str	r3, [sp, #12]
   1e18c:	6923      	ldr	r3, [r4, #16]
   1e18e:	9302      	str	r3, [sp, #8]
   1e190:	68e3      	ldr	r3, [r4, #12]
   1e192:	9301      	str	r3, [sp, #4]
   1e194:	68a3      	ldr	r3, [r4, #8]
   1e196:	9300      	str	r3, [sp, #0]
   1e198:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e19c:	f7f0 fe00 	bl	eda0 <print_formatted>
		break;
   1e1a0:	e73b      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e1a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e1a4:	4631      	mov	r1, r6
   1e1a6:	930a      	str	r3, [sp, #40]	; 0x28
   1e1a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e1aa:	4628      	mov	r0, r5
   1e1ac:	9309      	str	r3, [sp, #36]	; 0x24
   1e1ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e1b0:	9308      	str	r3, [sp, #32]
   1e1b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e1b4:	9307      	str	r3, [sp, #28]
   1e1b6:	6a23      	ldr	r3, [r4, #32]
   1e1b8:	9306      	str	r3, [sp, #24]
   1e1ba:	69e3      	ldr	r3, [r4, #28]
   1e1bc:	9305      	str	r3, [sp, #20]
   1e1be:	69a3      	ldr	r3, [r4, #24]
   1e1c0:	9304      	str	r3, [sp, #16]
   1e1c2:	6963      	ldr	r3, [r4, #20]
   1e1c4:	9303      	str	r3, [sp, #12]
   1e1c6:	6923      	ldr	r3, [r4, #16]
   1e1c8:	9302      	str	r3, [sp, #8]
   1e1ca:	68e3      	ldr	r3, [r4, #12]
   1e1cc:	9301      	str	r3, [sp, #4]
   1e1ce:	68a3      	ldr	r3, [r4, #8]
   1e1d0:	9300      	str	r3, [sp, #0]
   1e1d2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e1d6:	f7f0 fde3 	bl	eda0 <print_formatted>
		break;
   1e1da:	e71e      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e1dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e1de:	4631      	mov	r1, r6
   1e1e0:	930b      	str	r3, [sp, #44]	; 0x2c
   1e1e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e1e4:	4628      	mov	r0, r5
   1e1e6:	930a      	str	r3, [sp, #40]	; 0x28
   1e1e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e1ea:	9309      	str	r3, [sp, #36]	; 0x24
   1e1ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e1ee:	9308      	str	r3, [sp, #32]
   1e1f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e1f2:	9307      	str	r3, [sp, #28]
   1e1f4:	6a23      	ldr	r3, [r4, #32]
   1e1f6:	9306      	str	r3, [sp, #24]
   1e1f8:	69e3      	ldr	r3, [r4, #28]
   1e1fa:	9305      	str	r3, [sp, #20]
   1e1fc:	69a3      	ldr	r3, [r4, #24]
   1e1fe:	9304      	str	r3, [sp, #16]
   1e200:	6963      	ldr	r3, [r4, #20]
   1e202:	9303      	str	r3, [sp, #12]
   1e204:	6923      	ldr	r3, [r4, #16]
   1e206:	9302      	str	r3, [sp, #8]
   1e208:	68e3      	ldr	r3, [r4, #12]
   1e20a:	9301      	str	r3, [sp, #4]
   1e20c:	68a3      	ldr	r3, [r4, #8]
   1e20e:	9300      	str	r3, [sp, #0]
   1e210:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e214:	f7f0 fdc4 	bl	eda0 <print_formatted>
		break;
   1e218:	e6ff      	b.n	1e01a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1e21a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e21c:	4631      	mov	r1, r6
   1e21e:	930c      	str	r3, [sp, #48]	; 0x30
   1e220:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e222:	4628      	mov	r0, r5
   1e224:	930b      	str	r3, [sp, #44]	; 0x2c
   1e226:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e228:	930a      	str	r3, [sp, #40]	; 0x28
   1e22a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e22c:	9309      	str	r3, [sp, #36]	; 0x24
   1e22e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e230:	9308      	str	r3, [sp, #32]
   1e232:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e234:	9307      	str	r3, [sp, #28]
   1e236:	6a23      	ldr	r3, [r4, #32]
   1e238:	9306      	str	r3, [sp, #24]
   1e23a:	69e3      	ldr	r3, [r4, #28]
   1e23c:	9305      	str	r3, [sp, #20]
   1e23e:	69a3      	ldr	r3, [r4, #24]
   1e240:	9304      	str	r3, [sp, #16]
   1e242:	6963      	ldr	r3, [r4, #20]
   1e244:	9303      	str	r3, [sp, #12]
   1e246:	6923      	ldr	r3, [r4, #16]
   1e248:	9302      	str	r3, [sp, #8]
   1e24a:	68e3      	ldr	r3, [r4, #12]
   1e24c:	9301      	str	r3, [sp, #4]
   1e24e:	68a3      	ldr	r3, [r4, #8]
   1e250:	9300      	str	r3, [sp, #0]
   1e252:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e256:	f7f0 fda3 	bl	eda0 <print_formatted>
}
   1e25a:	e6de      	b.n	1e01a <std_print+0x78>

0001e25c <log_output_flush>:
		     log_output->control_block->offset,
   1e25c:	6842      	ldr	r2, [r0, #4]
{
   1e25e:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   1e260:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   1e264:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1e266:	6881      	ldr	r1, [r0, #8]
   1e268:	6800      	ldr	r0, [r0, #0]
   1e26a:	f7ff fe8d 	bl	1df88 <buffer_write>
	log_output->control_block->offset = 0;
   1e26e:	2200      	movs	r2, #0
   1e270:	6863      	ldr	r3, [r4, #4]
   1e272:	601a      	str	r2, [r3, #0]
}
   1e274:	bd10      	pop	{r4, pc}

0001e276 <out_func>:
{
   1e276:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1e278:	684b      	ldr	r3, [r1, #4]
{
   1e27a:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1e27c:	681a      	ldr	r2, [r3, #0]
   1e27e:	68cb      	ldr	r3, [r1, #12]
{
   1e280:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1e282:	429a      	cmp	r2, r3
   1e284:	d102      	bne.n	1e28c <out_func+0x16>
		log_output_flush(out_ctx);
   1e286:	4608      	mov	r0, r1
   1e288:	f7ff ffe8 	bl	1e25c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e28c:	6863      	ldr	r3, [r4, #4]
   1e28e:	e8d3 2fef 	ldaex	r2, [r3]
   1e292:	1c51      	adds	r1, r2, #1
   1e294:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1e298:	2800      	cmp	r0, #0
   1e29a:	d1f8      	bne.n	1e28e <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   1e29c:	68a3      	ldr	r3, [r4, #8]
}
   1e29e:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   1e2a0:	549d      	strb	r5, [r3, r2]
}
   1e2a2:	bd38      	pop	{r3, r4, r5, pc}

0001e2a4 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   1e2a4:	f7f1 b8cc 	b.w	f440 <socket_offload_getaddrinfo>

0001e2a8 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   1e2a8:	f7f1 b8d4 	b.w	f454 <socket_offload_freeaddrinfo>

0001e2ac <z_errno>:
   1e2ac:	f7fd be06 	b.w	1bebc <z_impl_z_errno>

0001e2b0 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   1e2b0:	b40c      	push	{r2, r3}
   1e2b2:	4603      	mov	r3, r0
   1e2b4:	b507      	push	{r0, r1, r2, lr}
   1e2b6:	aa04      	add	r2, sp, #16
   1e2b8:	4608      	mov	r0, r1
   1e2ba:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   1e2be:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   1e2c0:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   1e2c2:	4798      	blx	r3
	va_end(args);

	return res;
}
   1e2c4:	b003      	add	sp, #12
   1e2c6:	f85d eb04 	ldr.w	lr, [sp], #4
   1e2ca:	b002      	add	sp, #8
   1e2cc:	4770      	bx	lr

0001e2ce <z_impl_zsock_close>:
{
   1e2ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   1e2d0:	a901      	add	r1, sp, #4
{
   1e2d2:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   1e2d4:	f7ef fa5e 	bl	d794 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   1e2d8:	b940      	cbnz	r0, 1e2ec <z_impl_zsock_close+0x1e>
		errno = EBADF;
   1e2da:	f7ff ffe7 	bl	1e2ac <z_errno>
   1e2de:	2309      	movs	r3, #9
		return -1;
   1e2e0:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   1e2e4:	6003      	str	r3, [r0, #0]
}
   1e2e6:	4620      	mov	r0, r4
   1e2e8:	b003      	add	sp, #12
   1e2ea:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   1e2ec:	9b01      	ldr	r3, [sp, #4]
   1e2ee:	689b      	ldr	r3, [r3, #8]
   1e2f0:	4798      	blx	r3
   1e2f2:	4604      	mov	r4, r0
	z_free_fd(sock);
   1e2f4:	4628      	mov	r0, r5
   1e2f6:	f7ef fa9d 	bl	d834 <z_free_fd>
	return ret;
   1e2fa:	e7f4      	b.n	1e2e6 <z_impl_zsock_close+0x18>

0001e2fc <z_impl_zsock_connect>:
{
   1e2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e2fe:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1e300:	a903      	add	r1, sp, #12
{
   1e302:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   1e304:	f7ef fa46 	bl	d794 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   1e308:	b118      	cbz	r0, 1e312 <z_impl_zsock_connect+0x16>
   1e30a:	9b03      	ldr	r3, [sp, #12]
   1e30c:	9a01      	ldr	r2, [sp, #4]
   1e30e:	695b      	ldr	r3, [r3, #20]
   1e310:	b93b      	cbnz	r3, 1e322 <z_impl_zsock_connect+0x26>
   1e312:	f7ff ffcb 	bl	1e2ac <z_errno>
   1e316:	2309      	movs	r3, #9
   1e318:	6003      	str	r3, [r0, #0]
   1e31a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e31e:	b004      	add	sp, #16
   1e320:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   1e322:	4621      	mov	r1, r4
   1e324:	4798      	blx	r3
   1e326:	e7fa      	b.n	1e31e <z_impl_zsock_connect+0x22>

0001e328 <z_impl_zsock_sendto>:
{
   1e328:	b530      	push	{r4, r5, lr}
   1e32a:	b087      	sub	sp, #28
   1e32c:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1e32e:	a905      	add	r1, sp, #20
{
   1e330:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   1e334:	f7ef fa2e 	bl	d794 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1e338:	b120      	cbz	r0, 1e344 <z_impl_zsock_sendto+0x1c>
   1e33a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1e33e:	9905      	ldr	r1, [sp, #20]
   1e340:	6a0d      	ldr	r5, [r1, #32]
   1e342:	b93d      	cbnz	r5, 1e354 <z_impl_zsock_sendto+0x2c>
   1e344:	f7ff ffb2 	bl	1e2ac <z_errno>
   1e348:	2309      	movs	r3, #9
   1e34a:	6003      	str	r3, [r0, #0]
   1e34c:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e350:	b007      	add	sp, #28
   1e352:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1e354:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1e356:	9101      	str	r1, [sp, #4]
   1e358:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e35a:	9100      	str	r1, [sp, #0]
   1e35c:	4621      	mov	r1, r4
   1e35e:	47a8      	blx	r5
   1e360:	e7f6      	b.n	1e350 <z_impl_zsock_sendto+0x28>

0001e362 <z_impl_zsock_sendmsg>:
{
   1e362:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e364:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1e366:	a903      	add	r1, sp, #12
{
   1e368:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   1e36a:	f7ef fa13 	bl	d794 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   1e36e:	b118      	cbz	r0, 1e378 <z_impl_zsock_sendmsg+0x16>
   1e370:	9b03      	ldr	r3, [sp, #12]
   1e372:	9a01      	ldr	r2, [sp, #4]
   1e374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e376:	b93b      	cbnz	r3, 1e388 <z_impl_zsock_sendmsg+0x26>
   1e378:	f7ff ff98 	bl	1e2ac <z_errno>
   1e37c:	2309      	movs	r3, #9
   1e37e:	6003      	str	r3, [r0, #0]
   1e380:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e384:	b004      	add	sp, #16
   1e386:	bd10      	pop	{r4, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   1e388:	4621      	mov	r1, r4
   1e38a:	4798      	blx	r3
   1e38c:	e7fa      	b.n	1e384 <z_impl_zsock_sendmsg+0x22>

0001e38e <z_impl_zsock_recvfrom>:
{
   1e38e:	b530      	push	{r4, r5, lr}
   1e390:	b087      	sub	sp, #28
   1e392:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   1e394:	a905      	add	r1, sp, #20
{
   1e396:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   1e39a:	f7ef f9fb 	bl	d794 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1e39e:	b120      	cbz	r0, 1e3aa <z_impl_zsock_recvfrom+0x1c>
   1e3a0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1e3a4:	9905      	ldr	r1, [sp, #20]
   1e3a6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1e3a8:	b93d      	cbnz	r5, 1e3ba <z_impl_zsock_recvfrom+0x2c>
   1e3aa:	f7ff ff7f 	bl	1e2ac <z_errno>
   1e3ae:	2309      	movs	r3, #9
   1e3b0:	6003      	str	r3, [r0, #0]
   1e3b2:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e3b6:	b007      	add	sp, #28
   1e3b8:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1e3ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1e3bc:	9101      	str	r1, [sp, #4]
   1e3be:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e3c0:	9100      	str	r1, [sp, #0]
   1e3c2:	4621      	mov	r1, r4
   1e3c4:	47a8      	blx	r5
   1e3c6:	e7f6      	b.n	1e3b6 <z_impl_zsock_recvfrom+0x28>

0001e3c8 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1e3c8:	b2cb      	uxtb	r3, r1
   1e3ca:	210c      	movs	r1, #12
   1e3cc:	68c2      	ldr	r2, [r0, #12]
   1e3ce:	fb03 2101 	mla	r1, r3, r1, r2
   1e3d2:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1e3d4:	f000 0007 	and.w	r0, r0, #7
   1e3d8:	4770      	bx	lr

0001e3da <set_off_state>:
	__asm__ volatile(
   1e3da:	f04f 0320 	mov.w	r3, #32
   1e3de:	f3ef 8211 	mrs	r2, BASEPRI
   1e3e2:	f383 8811 	msr	BASEPRI, r3
   1e3e6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1e3ea:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1e3ec:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1e3f0:	d001      	beq.n	1e3f6 <set_off_state+0x1c>
   1e3f2:	428b      	cmp	r3, r1
   1e3f4:	d107      	bne.n	1e406 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1e3f6:	2301      	movs	r3, #1
   1e3f8:	6003      	str	r3, [r0, #0]
	int err = 0;
   1e3fa:	2000      	movs	r0, #0
	__asm__ volatile(
   1e3fc:	f382 8811 	msr	BASEPRI, r2
   1e400:	f3bf 8f6f 	isb	sy
}
   1e404:	4770      	bx	lr
		err = -EPERM;
   1e406:	f04f 30ff 	mov.w	r0, #4294967295
   1e40a:	e7f7      	b.n	1e3fc <set_off_state+0x22>

0001e40c <set_starting_state>:
{
   1e40c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e40e:	f04f 0320 	mov.w	r3, #32
   1e412:	f3ef 8211 	mrs	r2, BASEPRI
   1e416:	f383 8811 	msr	BASEPRI, r3
   1e41a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1e41e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1e420:	f003 0407 	and.w	r4, r3, #7
   1e424:	2c01      	cmp	r4, #1
   1e426:	d106      	bne.n	1e436 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1e428:	6001      	str	r1, [r0, #0]
	int err = 0;
   1e42a:	2000      	movs	r0, #0
	__asm__ volatile(
   1e42c:	f382 8811 	msr	BASEPRI, r2
   1e430:	f3bf 8f6f 	isb	sy
}
   1e434:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1e436:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1e43a:	428b      	cmp	r3, r1
		err = -EBUSY;
   1e43c:	bf14      	ite	ne
   1e43e:	f04f 30ff 	movne.w	r0, #4294967295
   1e442:	f06f 000f 	mvneq.w	r0, #15
   1e446:	e7f1      	b.n	1e42c <set_starting_state+0x20>

0001e448 <set_on_state>:
	__asm__ volatile(
   1e448:	f04f 0320 	mov.w	r3, #32
   1e44c:	f3ef 8211 	mrs	r2, BASEPRI
   1e450:	f383 8811 	msr	BASEPRI, r3
   1e454:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1e458:	6803      	ldr	r3, [r0, #0]
   1e45a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e45e:	f043 0302 	orr.w	r3, r3, #2
   1e462:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1e464:	f382 8811 	msr	BASEPRI, r2
   1e468:	f3bf 8f6f 	isb	sy
}
   1e46c:	4770      	bx	lr

0001e46e <onoff_started_callback>:
{
   1e46e:	b410      	push	{r4}
	notify(mgr, 0);
   1e470:	241c      	movs	r4, #28
	return &data->mgr[type];
   1e472:	68c0      	ldr	r0, [r0, #12]
   1e474:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1e476:	fb03 0004 	mla	r0, r3, r4, r0
   1e47a:	2100      	movs	r1, #0
}
   1e47c:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   1e480:	4710      	bx	r2

0001e482 <blocking_start_callback>:
{
   1e482:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1e484:	f7fe bbfe 	b.w	1cc84 <z_impl_k_sem_give>

0001e488 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1e488:	2000      	movs	r0, #0
   1e48a:	f7fd bc3d 	b.w	1bd08 <nrfx_clock_stop>

0001e48e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1e48e:	2000      	movs	r0, #0
   1e490:	f7fd bc08 	b.w	1bca4 <nrfx_clock_start>

0001e494 <api_stop>:
{
   1e494:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   1e496:	240c      	movs	r4, #12
   1e498:	b2c9      	uxtb	r1, r1
   1e49a:	434c      	muls	r4, r1
{
   1e49c:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1e49e:	68c0      	ldr	r0, [r0, #12]
   1e4a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1e4a4:	2180      	movs	r1, #128	; 0x80
   1e4a6:	4418      	add	r0, r3
   1e4a8:	f7ff ff97 	bl	1e3da <set_off_state>
	if (err < 0) {
   1e4ac:	2800      	cmp	r0, #0
   1e4ae:	db04      	blt.n	1e4ba <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1e4b0:	6869      	ldr	r1, [r5, #4]
   1e4b2:	440c      	add	r4, r1
   1e4b4:	6863      	ldr	r3, [r4, #4]
   1e4b6:	4798      	blx	r3
	return 0;
   1e4b8:	2000      	movs	r0, #0
}
   1e4ba:	bd38      	pop	{r3, r4, r5, pc}

0001e4bc <api_start>:
{
   1e4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   1e4be:	240c      	movs	r4, #12
   1e4c0:	b2c9      	uxtb	r1, r1
   1e4c2:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1e4c4:	68c5      	ldr	r5, [r0, #12]
{
   1e4c6:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1e4c8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1e4cc:	2180      	movs	r1, #128	; 0x80
   1e4ce:	4428      	add	r0, r5
{
   1e4d0:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   1e4d2:	f7ff ff9b 	bl	1e40c <set_starting_state>
	if (err < 0) {
   1e4d6:	2800      	cmp	r0, #0
   1e4d8:	db08      	blt.n	1e4ec <api_start+0x30>
	subdata->cb = data->cb;
   1e4da:	687b      	ldr	r3, [r7, #4]
   1e4dc:	4425      	add	r5, r4
   1e4de:	63ab      	str	r3, [r5, #56]	; 0x38
	subdata->user_data = data->user_data;
   1e4e0:	68bb      	ldr	r3, [r7, #8]
   1e4e2:	63eb      	str	r3, [r5, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
   1e4e4:	6873      	ldr	r3, [r6, #4]
   1e4e6:	591b      	ldr	r3, [r3, r4]
   1e4e8:	4798      	blx	r3
	return 0;
   1e4ea:	2000      	movs	r0, #0
}
   1e4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e4ee <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1e4ee:	4770      	bx	lr

0001e4f0 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1e4f0:	4770      	bx	lr

0001e4f2 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   1e4f2:	b510      	push	{r4, lr}
   1e4f4:	b40f      	push	{r0, r1, r2, r3}
   1e4f6:	f7fe f8b7 	bl	1c668 <k_sched_lock>
   1e4fa:	bc0f      	pop	{r0, r1, r2, r3}
   1e4fc:	f7e9 fd74 	bl	7fe8 <spm_request_random_number_nse>
   1e500:	b40f      	push	{r0, r1, r2, r3}
   1e502:	f7fe f8ff 	bl	1c704 <k_sched_unlock>
   1e506:	bc0f      	pop	{r0, r1, r2, r3}
   1e508:	bd10      	pop	{r4, pc}

0001e50a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1e50a:	2100      	movs	r1, #0
   1e50c:	2001      	movs	r0, #1
   1e50e:	f7f1 bb73 	b.w	fbf8 <z_arm_fatal_error>

0001e512 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1e512:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1e514:	f383 880b 	msr	PSPLIM, r3
}
   1e518:	4770      	bx	lr

0001e51a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1e51a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1e51c:	6800      	ldr	r0, [r0, #0]
   1e51e:	f7f1 bb6b 	b.w	fbf8 <z_arm_fatal_error>

0001e522 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1e522:	b508      	push	{r3, lr}
	handler();
   1e524:	f7f1 fbdc 	bl	fce0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1e528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1e52c:	f7f1 be68 	b.w	10200 <z_arm_exc_exit>

0001e530 <mpu_configure_region>:
{
   1e530:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   1e532:	890a      	ldrh	r2, [r1, #8]
   1e534:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   1e536:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1e538:	684c      	ldr	r4, [r1, #4]
   1e53a:	f002 021f 	and.w	r2, r2, #31
{
   1e53e:	b085      	sub	sp, #20
   1e540:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   1e544:	9300      	str	r3, [sp, #0]
   1e546:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1e54a:	f023 031f 	bic.w	r3, r3, #31
   1e54e:	1e62      	subs	r2, r4, #1
   1e550:	4413      	add	r3, r2
   1e552:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   1e556:	280f      	cmp	r0, #15
   1e558:	4604      	mov	r4, r0
   1e55a:	9303      	str	r3, [sp, #12]
   1e55c:	d905      	bls.n	1e56a <mpu_configure_region+0x3a>
   1e55e:	f7f1 fee9 	bl	10334 <region_allocate_and_init.part.0>
   1e562:	4604      	mov	r4, r0
}
   1e564:	4620      	mov	r0, r4
   1e566:	b005      	add	sp, #20
   1e568:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   1e56a:	4669      	mov	r1, sp
   1e56c:	f7f1 feca 	bl	10304 <region_init>
	return region_allocate_and_init(index,
   1e570:	e7f8      	b.n	1e564 <mpu_configure_region+0x34>

0001e572 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1e572:	e840 f000 	tt	r0, r0
   1e576:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1e578:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1e57c:	bf14      	ite	ne
   1e57e:	4618      	movne	r0, r3
   1e580:	f06f 0015 	mvneq.w	r0, #21
   1e584:	4770      	bx	lr

0001e586 <atoi>:

#include <stdlib.h>
#include <ctype.h>

int atoi(const char *s)
{
   1e586:	b530      	push	{r4, r5, lr}
	int n = 0;
	int neg = 0;

	while (isspace(*s)) {
   1e588:	7802      	ldrb	r2, [r0, #0]
   1e58a:	4603      	mov	r3, r0
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1e58c:	2a20      	cmp	r2, #32
   1e58e:	f100 0001 	add.w	r0, r0, #1
   1e592:	d0f9      	beq.n	1e588 <atoi+0x2>
   1e594:	f1a2 0109 	sub.w	r1, r2, #9
   1e598:	2904      	cmp	r1, #4
   1e59a:	d9f5      	bls.n	1e588 <atoi+0x2>
		s++;
	}
	switch (*s) {
   1e59c:	2a2b      	cmp	r2, #43	; 0x2b
   1e59e:	d008      	beq.n	1e5b2 <atoi+0x2c>
	case '-':
		neg = 1;
		s++;
   1e5a0:	2a2d      	cmp	r2, #45	; 0x2d
   1e5a2:	bf0a      	itet	eq
   1e5a4:	4603      	moveq	r3, r0
   1e5a6:	2100      	movne	r1, #0
   1e5a8:	2101      	moveq	r1, #1
	switch (*s) {
   1e5aa:	2000      	movs	r0, #0
	case '+':
		s++;
	}
	/* Compute n as a negative number to avoid overflow on INT_MIN */
	while (isdigit(*s)) {
		n = 10*n - (*s++ - '0');
   1e5ac:	250a      	movs	r5, #10
   1e5ae:	3b01      	subs	r3, #1
   1e5b0:	e006      	b.n	1e5c0 <atoi+0x3a>
		s++;
   1e5b2:	4603      	mov	r3, r0
	int neg = 0;
   1e5b4:	2100      	movs	r1, #0
   1e5b6:	e7f8      	b.n	1e5aa <atoi+0x24>
		n = 10*n - (*s++ - '0');
   1e5b8:	f1c2 0230 	rsb	r2, r2, #48	; 0x30
   1e5bc:	fb05 2000 	mla	r0, r5, r0, r2
	while (isdigit(*s)) {
   1e5c0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1e5c4:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   1e5c8:	2c09      	cmp	r4, #9
   1e5ca:	d9f5      	bls.n	1e5b8 <atoi+0x32>
	}
	return neg ? n : -n;
   1e5cc:	b901      	cbnz	r1, 1e5d0 <atoi+0x4a>
   1e5ce:	4240      	negs	r0, r0
}
   1e5d0:	bd30      	pop	{r4, r5, pc}

0001e5d2 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1e5d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e5d6:	4684      	mov	ip, r0
   1e5d8:	4688      	mov	r8, r1
	register const char *s = nptr;
   1e5da:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1e5dc:	460c      	mov	r4, r1
   1e5de:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1e5e2:	2b20      	cmp	r3, #32
   1e5e4:	d033      	beq.n	1e64e <strtol+0x7c>
   1e5e6:	f1a3 0009 	sub.w	r0, r3, #9
   1e5ea:	2804      	cmp	r0, #4
   1e5ec:	d92f      	bls.n	1e64e <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   1e5ee:	2b2d      	cmp	r3, #45	; 0x2d
   1e5f0:	d12f      	bne.n	1e652 <strtol+0x80>
		neg = 1;
		c = *s++;
   1e5f2:	784b      	ldrb	r3, [r1, #1]
   1e5f4:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1e5f6:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1e5f8:	2a00      	cmp	r2, #0
   1e5fa:	d05c      	beq.n	1e6b6 <strtol+0xe4>
   1e5fc:	2a10      	cmp	r2, #16
   1e5fe:	d109      	bne.n	1e614 <strtol+0x42>
   1e600:	2b30      	cmp	r3, #48	; 0x30
   1e602:	d107      	bne.n	1e614 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1e604:	7823      	ldrb	r3, [r4, #0]
   1e606:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e60a:	2b58      	cmp	r3, #88	; 0x58
   1e60c:	d14e      	bne.n	1e6ac <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1e60e:	2210      	movs	r2, #16
		c = s[1];
   1e610:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1e612:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1e614:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1e616:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1e61a:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1e61c:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1e620:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1e622:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1e626:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1e62a:	2d09      	cmp	r5, #9
   1e62c:	d817      	bhi.n	1e65e <strtol+0x8c>
			c -= '0';
   1e62e:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1e630:	429a      	cmp	r2, r3
   1e632:	dd24      	ble.n	1e67e <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1e634:	1c75      	adds	r5, r6, #1
   1e636:	d007      	beq.n	1e648 <strtol+0x76>
   1e638:	4570      	cmp	r0, lr
   1e63a:	d81d      	bhi.n	1e678 <strtol+0xa6>
   1e63c:	d101      	bne.n	1e642 <strtol+0x70>
   1e63e:	454b      	cmp	r3, r9
   1e640:	dc1a      	bgt.n	1e678 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   1e642:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1e644:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1e648:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1e64c:	e7eb      	b.n	1e626 <strtol+0x54>
{
   1e64e:	4621      	mov	r1, r4
   1e650:	e7c4      	b.n	1e5dc <strtol+0xa>
	} else if (c == '+') {
   1e652:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1e654:	bf04      	itt	eq
   1e656:	784b      	ldrbeq	r3, [r1, #1]
   1e658:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1e65a:	2100      	movs	r1, #0
   1e65c:	e7cc      	b.n	1e5f8 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1e65e:	f043 0520 	orr.w	r5, r3, #32
   1e662:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1e664:	2d19      	cmp	r5, #25
   1e666:	d80a      	bhi.n	1e67e <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1e668:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1e66c:	2d1a      	cmp	r5, #26
   1e66e:	bf34      	ite	cc
   1e670:	2537      	movcc	r5, #55	; 0x37
   1e672:	2557      	movcs	r5, #87	; 0x57
   1e674:	1b5b      	subs	r3, r3, r5
   1e676:	e7db      	b.n	1e630 <strtol+0x5e>
			any = -1;
   1e678:	f04f 36ff 	mov.w	r6, #4294967295
   1e67c:	e7e4      	b.n	1e648 <strtol+0x76>
		}
	}

	if (any < 0) {
   1e67e:	1c73      	adds	r3, r6, #1
   1e680:	d109      	bne.n	1e696 <strtol+0xc4>
   1e682:	f7fd fc1b 	bl	1bebc <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1e686:	2326      	movs	r3, #38	; 0x26
   1e688:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1e68a:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1e68c:	f1b8 0f00 	cmp.w	r8, #0
   1e690:	d107      	bne.n	1e6a2 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1e692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1e696:	b101      	cbz	r1, 1e69a <strtol+0xc8>
		acc = -acc;
   1e698:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1e69a:	f1b8 0f00 	cmp.w	r8, #0
   1e69e:	d0f8      	beq.n	1e692 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   1e6a0:	b10e      	cbz	r6, 1e6a6 <strtol+0xd4>
   1e6a2:	f104 3cff 	add.w	ip, r4, #4294967295
   1e6a6:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1e6aa:	e7f2      	b.n	1e692 <strtol+0xc0>
	if (base == 0) {
   1e6ac:	2330      	movs	r3, #48	; 0x30
   1e6ae:	2a00      	cmp	r2, #0
   1e6b0:	d1b0      	bne.n	1e614 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1e6b2:	2208      	movs	r2, #8
   1e6b4:	e7ae      	b.n	1e614 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1e6b6:	2b30      	cmp	r3, #48	; 0x30
   1e6b8:	d0a4      	beq.n	1e604 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1e6ba:	220a      	movs	r2, #10
   1e6bc:	e7aa      	b.n	1e614 <strtol+0x42>

0001e6be <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   1e6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e6c2:	4684      	mov	ip, r0
   1e6c4:	460f      	mov	r7, r1
	register const char *s = nptr;
   1e6c6:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   1e6c8:	462c      	mov	r4, r5
   1e6ca:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1e6ce:	2b20      	cmp	r3, #32
   1e6d0:	d035      	beq.n	1e73e <strtoul+0x80>
   1e6d2:	f1a3 0109 	sub.w	r1, r3, #9
   1e6d6:	2904      	cmp	r1, #4
   1e6d8:	d931      	bls.n	1e73e <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   1e6da:	2b2d      	cmp	r3, #45	; 0x2d
   1e6dc:	d131      	bne.n	1e742 <strtoul+0x84>
		neg = 1;
   1e6de:	f04f 0e01 	mov.w	lr, #1
		c = *s++;
   1e6e2:	786b      	ldrb	r3, [r5, #1]
   1e6e4:	1cac      	adds	r4, r5, #2
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1e6e6:	2a00      	cmp	r2, #0
   1e6e8:	d05e      	beq.n	1e7a8 <strtoul+0xea>
   1e6ea:	2a10      	cmp	r2, #16
   1e6ec:	d109      	bne.n	1e702 <strtoul+0x44>
   1e6ee:	2b30      	cmp	r3, #48	; 0x30
   1e6f0:	d107      	bne.n	1e702 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1e6f2:	7823      	ldrb	r3, [r4, #0]
   1e6f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e6f8:	2b58      	cmp	r3, #88	; 0x58
   1e6fa:	d150      	bne.n	1e79e <strtoul+0xe0>
		c = s[1];
		s += 2;
		base = 16;
   1e6fc:	2210      	movs	r2, #16
		c = s[1];
   1e6fe:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1e700:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   1e702:	f04f 31ff 	mov.w	r1, #4294967295
   1e706:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1e70a:	2600      	movs	r6, #0
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1e70c:	fb02 f801 	mul.w	r8, r2, r1
	for (acc = 0, any = 0;; c = *s++) {
   1e710:	4630      	mov	r0, r6
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   1e712:	ea6f 0808 	mvn.w	r8, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1e716:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1e71a:	2d09      	cmp	r5, #9
   1e71c:	d818      	bhi.n	1e750 <strtoul+0x92>
			c -= '0';
   1e71e:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1e720:	429a      	cmp	r2, r3
   1e722:	dd25      	ble.n	1e770 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1e724:	2e00      	cmp	r6, #0
   1e726:	db20      	blt.n	1e76a <strtoul+0xac>
   1e728:	4288      	cmp	r0, r1
   1e72a:	d81e      	bhi.n	1e76a <strtoul+0xac>
   1e72c:	d101      	bne.n	1e732 <strtoul+0x74>
   1e72e:	4543      	cmp	r3, r8
   1e730:	dc1b      	bgt.n	1e76a <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
   1e732:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1e734:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1e738:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1e73c:	e7eb      	b.n	1e716 <strtoul+0x58>
{
   1e73e:	4625      	mov	r5, r4
   1e740:	e7c2      	b.n	1e6c8 <strtoul+0xa>
	} else if (c == '+') {
   1e742:	2b2b      	cmp	r3, #43	; 0x2b
	register int neg = 0, any, cutlim;
   1e744:	f04f 0e00 	mov.w	lr, #0
		c = *s++;
   1e748:	bf04      	itt	eq
   1e74a:	786b      	ldrbeq	r3, [r5, #1]
   1e74c:	1cac      	addeq	r4, r5, #2
   1e74e:	e7ca      	b.n	1e6e6 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1e750:	f043 0520 	orr.w	r5, r3, #32
   1e754:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1e756:	2d19      	cmp	r5, #25
   1e758:	d80a      	bhi.n	1e770 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1e75a:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1e75e:	2d1a      	cmp	r5, #26
   1e760:	bf34      	ite	cc
   1e762:	2537      	movcc	r5, #55	; 0x37
   1e764:	2557      	movcs	r5, #87	; 0x57
   1e766:	1b5b      	subs	r3, r3, r5
   1e768:	e7da      	b.n	1e720 <strtoul+0x62>
			any = -1;
   1e76a:	f04f 36ff 	mov.w	r6, #4294967295
   1e76e:	e7e3      	b.n	1e738 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   1e770:	2e00      	cmp	r6, #0
   1e772:	da08      	bge.n	1e786 <strtoul+0xc8>
   1e774:	f7fd fba2 	bl	1bebc <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   1e778:	2326      	movs	r3, #38	; 0x26
   1e77a:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   1e77c:	f04f 30ff 	mov.w	r0, #4294967295
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   1e780:	b947      	cbnz	r7, 1e794 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1e782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   1e786:	f1be 0f00 	cmp.w	lr, #0
   1e78a:	d000      	beq.n	1e78e <strtoul+0xd0>
		acc = -acc;
   1e78c:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1e78e:	2f00      	cmp	r7, #0
   1e790:	d0f7      	beq.n	1e782 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   1e792:	b10e      	cbz	r6, 1e798 <strtoul+0xda>
   1e794:	f104 3cff 	add.w	ip, r4, #4294967295
   1e798:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   1e79c:	e7f1      	b.n	1e782 <strtoul+0xc4>
	if (base == 0) {
   1e79e:	2330      	movs	r3, #48	; 0x30
   1e7a0:	2a00      	cmp	r2, #0
   1e7a2:	d1ae      	bne.n	1e702 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   1e7a4:	2208      	movs	r2, #8
   1e7a6:	e7ac      	b.n	1e702 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   1e7a8:	2b30      	cmp	r3, #48	; 0x30
   1e7aa:	d0a2      	beq.n	1e6f2 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   1e7ac:	220a      	movs	r2, #10
   1e7ae:	e7a8      	b.n	1e702 <strtoul+0x44>

0001e7b0 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1e7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1e7b4:	f891 8000 	ldrb.w	r8, [r1]
{
   1e7b8:	4605      	mov	r5, r0
	if (c != 0) {
   1e7ba:	f1b8 0f00 	cmp.w	r8, #0
   1e7be:	d010      	beq.n	1e7e2 <strstr+0x32>
	c = *find++;
   1e7c0:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1e7c2:	4620      	mov	r0, r4
   1e7c4:	f000 f835 	bl	1e832 <strlen>
   1e7c8:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   1e7ca:	462e      	mov	r6, r5
   1e7cc:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1e7d0:	b163      	cbz	r3, 1e7ec <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   1e7d2:	4598      	cmp	r8, r3
   1e7d4:	d108      	bne.n	1e7e8 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   1e7d6:	463a      	mov	r2, r7
   1e7d8:	4621      	mov	r1, r4
   1e7da:	4630      	mov	r0, r6
   1e7dc:	f000 f83c 	bl	1e858 <strncmp>
   1e7e0:	b910      	cbnz	r0, 1e7e8 <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   1e7e2:	4628      	mov	r0, r5
   1e7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1e7e8:	4635      	mov	r5, r6
   1e7ea:	e7ee      	b.n	1e7ca <strstr+0x1a>
					return NULL;
   1e7ec:	461d      	mov	r5, r3
   1e7ee:	e7f8      	b.n	1e7e2 <strstr+0x32>

0001e7f0 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1e7f0:	b570      	push	{r4, r5, r6, lr}
   1e7f2:	4605      	mov	r5, r0
   1e7f4:	3901      	subs	r1, #1
   1e7f6:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1e7f8:	b142      	cbz	r2, 1e80c <strncpy+0x1c>
   1e7fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1e7fe:	1e56      	subs	r6, r2, #1
   1e800:	b92b      	cbnz	r3, 1e80e <strncpy+0x1e>
   1e802:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1e804:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1e808:	42a2      	cmp	r2, r4
   1e80a:	d1fb      	bne.n	1e804 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1e80c:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1e80e:	4632      	mov	r2, r6
		*d = *s;
   1e810:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1e814:	e7ef      	b.n	1e7f6 <strncpy+0x6>

0001e816 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1e816:	4603      	mov	r3, r0
   1e818:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1e81a:	781a      	ldrb	r2, [r3, #0]
   1e81c:	4618      	mov	r0, r3
   1e81e:	428a      	cmp	r2, r1
   1e820:	f103 0301 	add.w	r3, r3, #1
   1e824:	d004      	beq.n	1e830 <strchr+0x1a>
   1e826:	2a00      	cmp	r2, #0
   1e828:	d1f7      	bne.n	1e81a <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1e82a:	2900      	cmp	r1, #0
   1e82c:	bf18      	it	ne
   1e82e:	2000      	movne	r0, #0
}
   1e830:	4770      	bx	lr

0001e832 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1e832:	4603      	mov	r3, r0
	size_t n = 0;
   1e834:	2000      	movs	r0, #0

	while (*s != '\0') {
   1e836:	5c1a      	ldrb	r2, [r3, r0]
   1e838:	b902      	cbnz	r2, 1e83c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1e83a:	4770      	bx	lr
		n++;
   1e83c:	3001      	adds	r0, #1
   1e83e:	e7fa      	b.n	1e836 <strlen+0x4>

0001e840 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1e840:	3801      	subs	r0, #1
   1e842:	3901      	subs	r1, #1
   1e844:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1e848:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e84c:	4293      	cmp	r3, r2
   1e84e:	d101      	bne.n	1e854 <strcmp+0x14>
   1e850:	2b00      	cmp	r3, #0
   1e852:	d1f7      	bne.n	1e844 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1e854:	1a98      	subs	r0, r3, r2
   1e856:	4770      	bx	lr

0001e858 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1e858:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1e85a:	2400      	movs	r4, #0
   1e85c:	42a2      	cmp	r2, r4
   1e85e:	d008      	beq.n	1e872 <strncmp+0x1a>
   1e860:	5d03      	ldrb	r3, [r0, r4]
   1e862:	5d0d      	ldrb	r5, [r1, r4]
   1e864:	42ab      	cmp	r3, r5
   1e866:	d102      	bne.n	1e86e <strncmp+0x16>
   1e868:	3401      	adds	r4, #1
   1e86a:	2b00      	cmp	r3, #0
   1e86c:	d1f6      	bne.n	1e85c <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1e86e:	1b58      	subs	r0, r3, r5
   1e870:	e000      	b.n	1e874 <strncmp+0x1c>
   1e872:	2000      	movs	r0, #0
}
   1e874:	bd30      	pop	{r4, r5, pc}

0001e876 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1e876:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1e878:	b15a      	cbz	r2, 1e892 <memcmp+0x1c>
   1e87a:	3901      	subs	r1, #1
   1e87c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1e87e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1e882:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1e886:	42a0      	cmp	r0, r4
   1e888:	d001      	beq.n	1e88e <memcmp+0x18>
   1e88a:	429a      	cmp	r2, r3
   1e88c:	d0f7      	beq.n	1e87e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1e88e:	1ad0      	subs	r0, r2, r3
}
   1e890:	bd10      	pop	{r4, pc}
		return 0;
   1e892:	4610      	mov	r0, r2
   1e894:	e7fc      	b.n	1e890 <memcmp+0x1a>

0001e896 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1e896:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1e898:	ea81 0400 	eor.w	r4, r1, r0
   1e89c:	07a5      	lsls	r5, r4, #30
   1e89e:	4603      	mov	r3, r0
   1e8a0:	d00b      	beq.n	1e8ba <memcpy+0x24>
   1e8a2:	3b01      	subs	r3, #1
   1e8a4:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1e8a6:	4291      	cmp	r1, r2
   1e8a8:	d11b      	bne.n	1e8e2 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1e8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1e8ac:	2a00      	cmp	r2, #0
   1e8ae:	d0fc      	beq.n	1e8aa <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1e8b0:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1e8b4:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1e8b6:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1e8ba:	079c      	lsls	r4, r3, #30
   1e8bc:	d1f6      	bne.n	1e8ac <memcpy+0x16>
   1e8be:	f022 0403 	bic.w	r4, r2, #3
   1e8c2:	1f1d      	subs	r5, r3, #4
   1e8c4:	0896      	lsrs	r6, r2, #2
   1e8c6:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1e8c8:	42b9      	cmp	r1, r7
   1e8ca:	d105      	bne.n	1e8d8 <memcpy+0x42>
   1e8cc:	f06f 0503 	mvn.w	r5, #3
   1e8d0:	4423      	add	r3, r4
   1e8d2:	fb05 2206 	mla	r2, r5, r6, r2
   1e8d6:	e7e4      	b.n	1e8a2 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1e8d8:	f851 cb04 	ldr.w	ip, [r1], #4
   1e8dc:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1e8e0:	e7f2      	b.n	1e8c8 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1e8e2:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e8e6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1e8ea:	e7dc      	b.n	1e8a6 <memcpy+0x10>

0001e8ec <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1e8ec:	4603      	mov	r3, r0
{
   1e8ee:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1e8f0:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1e8f2:	079c      	lsls	r4, r3, #30
   1e8f4:	d111      	bne.n	1e91a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1e8f6:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1e8fa:	f022 0603 	bic.w	r6, r2, #3
   1e8fe:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1e902:	441e      	add	r6, r3
   1e904:	0894      	lsrs	r4, r2, #2
   1e906:	42b3      	cmp	r3, r6
   1e908:	d10d      	bne.n	1e926 <memset+0x3a>
   1e90a:	f06f 0503 	mvn.w	r5, #3
   1e90e:	fb05 2204 	mla	r2, r5, r4, r2
   1e912:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1e914:	4293      	cmp	r3, r2
   1e916:	d109      	bne.n	1e92c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1e918:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1e91a:	2a00      	cmp	r2, #0
   1e91c:	d0fc      	beq.n	1e918 <memset+0x2c>
		*(d_byte++) = c_byte;
   1e91e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e922:	3a01      	subs	r2, #1
   1e924:	e7e5      	b.n	1e8f2 <memset+0x6>
		*(d_word++) = c_word;
   1e926:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1e92a:	e7ec      	b.n	1e906 <memset+0x1a>
		*(d_byte++) = c_byte;
   1e92c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e930:	e7f0      	b.n	1e914 <memset+0x28>

0001e932 <_stdout_hook_default>:
}
   1e932:	f04f 30ff 	mov.w	r0, #4294967295
   1e936:	4770      	bx	lr

0001e938 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1e938:	684b      	ldr	r3, [r1, #4]
   1e93a:	2b01      	cmp	r3, #1
   1e93c:	dd07      	ble.n	1e94e <sprintf_out+0x16>
		*(p->ptr) = c;
   1e93e:	680b      	ldr	r3, [r1, #0]
   1e940:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1e942:	680b      	ldr	r3, [r1, #0]
   1e944:	3301      	adds	r3, #1
   1e946:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1e948:	684b      	ldr	r3, [r1, #4]
   1e94a:	3b01      	subs	r3, #1
   1e94c:	604b      	str	r3, [r1, #4]
}
   1e94e:	2000      	movs	r0, #0
   1e950:	4770      	bx	lr

0001e952 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   1e952:	b508      	push	{r3, lr}
	net_if_init();
   1e954:	f7f1 fe90 	bl	10678 <net_if_init>
	net_if_post_init();
   1e958:	f7f1 fea4 	bl	106a4 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   1e95c:	2000      	movs	r0, #0
   1e95e:	bd08      	pop	{r3, pc}

0001e960 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   1e960:	b110      	cbz	r0, 1e968 <net_if_l2+0x8>
   1e962:	6800      	ldr	r0, [r0, #0]
   1e964:	b100      	cbz	r0, 1e968 <net_if_l2+0x8>
	return iface->if_dev->l2;
   1e966:	6840      	ldr	r0, [r0, #4]
}
   1e968:	4770      	bx	lr

0001e96a <l2_flags_get>:
{
   1e96a:	b510      	push	{r4, lr}
   1e96c:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1e96e:	f7ff fff7 	bl	1e960 <net_if_l2>
   1e972:	b128      	cbz	r0, 1e980 <l2_flags_get+0x16>
   1e974:	68c2      	ldr	r2, [r0, #12]
   1e976:	b11a      	cbz	r2, 1e980 <l2_flags_get+0x16>
}
   1e978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   1e97c:	4618      	mov	r0, r3
   1e97e:	4710      	bx	r2
}
   1e980:	2000      	movs	r0, #0
   1e982:	bd10      	pop	{r4, pc}

0001e984 <net_if_up>:
{
   1e984:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e986:	6803      	ldr	r3, [r0, #0]
   1e988:	4604      	mov	r4, r0
   1e98a:	330c      	adds	r3, #12
   1e98c:	e8d3 3faf 	lda	r3, [r3]
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   1e990:	f013 0301 	ands.w	r3, r3, #1
   1e994:	d10b      	bne.n	1e9ae <net_if_up+0x2a>
	     net_if_is_socket_offloaded(iface))) {
   1e996:	6802      	ldr	r2, [r0, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1e998:	7e91      	ldrb	r1, [r2, #26]
   1e99a:	b151      	cbz	r1, 1e9b2 <net_if_up+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e99c:	320c      	adds	r2, #12
   1e99e:	e8d2 1fef 	ldaex	r1, [r2]
   1e9a2:	f041 0101 	orr.w	r1, r1, #1
   1e9a6:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1e9aa:	2800      	cmp	r0, #0
   1e9ac:	d1f7      	bne.n	1e99e <net_if_up+0x1a>
		return 0;
   1e9ae:	2000      	movs	r0, #0
   1e9b0:	e018      	b.n	1e9e4 <net_if_up+0x60>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1e9b2:	f7ff ffd5 	bl	1e960 <net_if_l2>
   1e9b6:	b968      	cbnz	r0, 1e9d4 <net_if_up+0x50>
   1e9b8:	6823      	ldr	r3, [r4, #0]
   1e9ba:	330c      	adds	r3, #12
   1e9bc:	e8d3 2fef 	ldaex	r2, [r3]
   1e9c0:	f042 0201 	orr.w	r2, r2, #1
   1e9c4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1e9c8:	2900      	cmp	r1, #0
   1e9ca:	d1f7      	bne.n	1e9bc <net_if_up+0x38>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   1e9cc:	4620      	mov	r0, r4
   1e9ce:	f7ff ffcc 	bl	1e96a <l2_flags_get>
   1e9d2:	e7ec      	b.n	1e9ae <net_if_up+0x2a>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   1e9d4:	6883      	ldr	r3, [r0, #8]
   1e9d6:	2b00      	cmp	r3, #0
   1e9d8:	d0ee      	beq.n	1e9b8 <net_if_up+0x34>
	status = net_if_l2(iface)->enable(iface, true);
   1e9da:	2101      	movs	r1, #1
   1e9dc:	4620      	mov	r0, r4
   1e9de:	4798      	blx	r3
	if (status < 0) {
   1e9e0:	2800      	cmp	r0, #0
   1e9e2:	dae9      	bge.n	1e9b8 <net_if_up+0x34>
}
   1e9e4:	bd10      	pop	{r4, pc}

0001e9e6 <net_byte_to_hex>:
{
   1e9e6:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1e9e8:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   1e9ea:	b1bb      	cbz	r3, 1ea1c <net_byte_to_hex+0x36>
		if (val < 10) {
   1e9ec:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   1e9ee:	b26b      	sxtb	r3, r5
   1e9f0:	bf86      	itte	hi
   1e9f2:	f1a2 050a 	subhi.w	r5, r2, #10
   1e9f6:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   1e9f8:	3330      	addls	r3, #48	; 0x30
   1e9fa:	1c44      	adds	r4, r0, #1
   1e9fc:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1e9fe:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   1ea02:	4619      	mov	r1, r3
   1ea04:	2b09      	cmp	r3, #9
	*ptr = '\0';
   1ea06:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   1ea0a:	bf83      	ittte	hi
   1ea0c:	3a0a      	subhi	r2, #10
   1ea0e:	1889      	addhi	r1, r1, r2
   1ea10:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   1ea12:	3130      	addls	r1, #48	; 0x30
   1ea14:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   1ea16:	7063      	strb	r3, [r4, #1]
   1ea18:	1c60      	adds	r0, r4, #1
}
   1ea1a:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   1ea1c:	2d00      	cmp	r5, #0
   1ea1e:	d1e5      	bne.n	1e9ec <net_byte_to_hex+0x6>
   1ea20:	4604      	mov	r4, r0
   1ea22:	e7ec      	b.n	1e9fe <net_byte_to_hex+0x18>

0001ea24 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   1ea24:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ea28:	1a9b      	subs	r3, r3, r2
   1ea2a:	2b01      	cmp	r3, #1
{
   1ea2c:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   1ea2e:	d90c      	bls.n	1ea4a <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   1ea30:	4614      	mov	r4, r2
   1ea32:	1c53      	adds	r3, r2, #1
   1ea34:	6003      	str	r3, [r0, #0]
   1ea36:	f814 3b02 	ldrb.w	r3, [r4], #2
   1ea3a:	021b      	lsls	r3, r3, #8
   1ea3c:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   1ea3e:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   1ea40:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   1ea42:	7852      	ldrb	r2, [r2, #1]
   1ea44:	4313      	orrs	r3, r2
   1ea46:	800b      	strh	r3, [r1, #0]
}
   1ea48:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1ea4a:	f06f 0015 	mvn.w	r0, #21
   1ea4e:	e7fb      	b.n	1ea48 <unpack_uint16+0x24>

0001ea50 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   1ea50:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1ea52:	e9d0 3400 	ldrd	r3, r4, [r0]
   1ea56:	429c      	cmp	r4, r3
   1ea58:	d01f      	beq.n	1ea9a <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   1ea5a:	1c5c      	adds	r4, r3, #1
   1ea5c:	6004      	str	r4, [r0, #0]
   1ea5e:	781b      	ldrb	r3, [r3, #0]
   1ea60:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   1ea62:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   1ea64:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   1ea66:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   1ea68:	6804      	ldr	r4, [r0, #0]
   1ea6a:	42bc      	cmp	r4, r7
   1ea6c:	d218      	bcs.n	1eaa0 <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   1ea6e:	4625      	mov	r5, r4
   1ea70:	f815 3b01 	ldrb.w	r3, [r5], #1
   1ea74:	6816      	ldr	r6, [r2, #0]
   1ea76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   1ea7a:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   1ea7c:	4433      	add	r3, r6
   1ea7e:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   1ea80:	6005      	str	r5, [r0, #0]
   1ea82:	f994 4000 	ldrsb.w	r4, [r4]
   1ea86:	2c00      	cmp	r4, #0
   1ea88:	db04      	blt.n	1ea94 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   1ea8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   1ea8e:	d204      	bcs.n	1ea9a <fixed_header_decode+0x4a>
	return 0;
   1ea90:	2000      	movs	r0, #0
   1ea92:	e004      	b.n	1ea9e <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   1ea94:	3107      	adds	r1, #7
   1ea96:	291c      	cmp	r1, #28
   1ea98:	d1e6      	bne.n	1ea68 <fixed_header_decode+0x18>
		return -EINVAL;
   1ea9a:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   1ea9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   1eaa0:	f06f 000a 	mvn.w	r0, #10
   1eaa4:	e7fb      	b.n	1ea9e <fixed_header_decode+0x4e>

0001eaa6 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   1eaa6:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1eaa8:	e9d1 3500 	ldrd	r3, r5, [r1]
   1eaac:	429d      	cmp	r5, r3
   1eaae:	d102      	bne.n	1eab6 <connect_ack_decode+0x10>
		return -EINVAL;
   1eab0:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   1eab4:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   1eab6:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1eab8:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   1eaba:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1eabc:	d0f8      	beq.n	1eab0 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   1eabe:	461d      	mov	r5, r3
   1eac0:	f815 4b02 	ldrb.w	r4, [r5], #2
   1eac4:	600d      	str	r5, [r1, #0]
   1eac6:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1eac8:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
	return 0;
   1eacc:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   1eace:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   1ead0:	bf04      	itt	eq
   1ead2:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   1ead6:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   1ead8:	7051      	strb	r1, [r2, #1]
	return 0;
   1eada:	e7eb      	b.n	1eab4 <connect_ack_decode+0xe>

0001eadc <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   1eadc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1eae0:	461c      	mov	r4, r3
   1eae2:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   1eae4:	7da2      	ldrb	r2, [r4, #22]
   1eae6:	0043      	lsls	r3, r0, #1
   1eae8:	f022 0203 	bic.w	r2, r2, #3
   1eaec:	f003 0302 	and.w	r3, r3, #2
   1eaf0:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   1eaf2:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1eaf6:	7220      	strb	r0, [r4, #8]
{
   1eaf8:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   1eafa:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   1eafc:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   1eafe:	f10d 0106 	add.w	r1, sp, #6
   1eb02:	f7ff ff8f 	bl	1ea24 <unpack_uint16>
	if (err_code != 0) {
   1eb06:	4606      	mov	r6, r0
   1eb08:	b9c0      	cbnz	r0, 1eb3c <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   1eb0a:	683b      	ldr	r3, [r7, #0]
   1eb0c:	687a      	ldr	r2, [r7, #4]
   1eb0e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   1eb12:	1ad2      	subs	r2, r2, r3
   1eb14:	42aa      	cmp	r2, r5
   1eb16:	da02      	bge.n	1eb1e <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   1eb18:	f06f 0615 	mvn.w	r6, #21
   1eb1c:	e00e      	b.n	1eb3c <publish_decode+0x60>
	str->size = utf8_strlen;
   1eb1e:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   1eb20:	b185      	cbz	r5, 1eb44 <publish_decode+0x68>
		str->utf8 = buf->cur;
   1eb22:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   1eb24:	442b      	add	r3, r5
   1eb26:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   1eb28:	7a23      	ldrb	r3, [r4, #8]
   1eb2a:	b96b      	cbnz	r3, 1eb48 <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   1eb2c:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   1eb2e:	4545      	cmp	r5, r8
   1eb30:	d8f2      	bhi.n	1eb18 <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   1eb32:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   1eb34:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   1eb38:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   1eb3a:	6125      	str	r5, [r4, #16]

	return 0;
}
   1eb3c:	4630      	mov	r0, r6
   1eb3e:	b002      	add	sp, #8
   1eb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   1eb44:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   1eb46:	e7ef      	b.n	1eb28 <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   1eb48:	4638      	mov	r0, r7
   1eb4a:	f104 0114 	add.w	r1, r4, #20
   1eb4e:	f7ff ff69 	bl	1ea24 <unpack_uint16>
		if (err_code != 0) {
   1eb52:	b908      	cbnz	r0, 1eb58 <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   1eb54:	3504      	adds	r5, #4
   1eb56:	e7ea      	b.n	1eb2e <publish_decode+0x52>
   1eb58:	4606      	mov	r6, r0
   1eb5a:	e7ef      	b.n	1eb3c <publish_decode+0x60>

0001eb5c <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1eb5c:	f7ff bf62 	b.w	1ea24 <unpack_uint16>

0001eb60 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1eb60:	f7ff bf60 	b.w	1ea24 <unpack_uint16>

0001eb64 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1eb64:	f7ff bf5e 	b.w	1ea24 <unpack_uint16>

0001eb68 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1eb68:	f7ff bf5c 	b.w	1ea24 <unpack_uint16>

0001eb6c <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   1eb6c:	b538      	push	{r3, r4, r5, lr}
   1eb6e:	4605      	mov	r5, r0
   1eb70:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   1eb72:	f7ff ff57 	bl	1ea24 <unpack_uint16>
	if (err_code != 0) {
   1eb76:	b930      	cbnz	r0, 1eb86 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   1eb78:	e9d5 2300 	ldrd	r2, r3, [r5]
   1eb7c:	1a99      	subs	r1, r3, r2
	str->len = length;
   1eb7e:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   1eb80:	b111      	cbz	r1, 1eb88 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   1eb82:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   1eb84:	602b      	str	r3, [r5, #0]
}
   1eb86:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   1eb88:	6060      	str	r0, [r4, #4]
   1eb8a:	e7fc      	b.n	1eb86 <subscribe_ack_decode+0x1a>

0001eb8c <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   1eb8c:	f7ff bf4a 	b.w	1ea24 <unpack_uint16>

0001eb90 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   1eb90:	e9d1 3200 	ldrd	r3, r2, [r1]
   1eb94:	1ad2      	subs	r2, r2, r3
   1eb96:	2a01      	cmp	r2, #1
   1eb98:	d909      	bls.n	1ebae <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   1eb9a:	1c5a      	adds	r2, r3, #1
   1eb9c:	600a      	str	r2, [r1, #0]
   1eb9e:	0a02      	lsrs	r2, r0, #8
   1eba0:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   1eba2:	680b      	ldr	r3, [r1, #0]
   1eba4:	1c5a      	adds	r2, r3, #1
   1eba6:	600a      	str	r2, [r1, #0]
   1eba8:	7018      	strb	r0, [r3, #0]
	return 0;
   1ebaa:	2000      	movs	r0, #0
   1ebac:	4770      	bx	lr
		return -ENOMEM;
   1ebae:	f06f 000b 	mvn.w	r0, #11
}
   1ebb2:	4770      	bx	lr

0001ebb4 <pack_utf8_str>:
{
   1ebb4:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   1ebb6:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   1ebba:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   1ebbc:	6840      	ldr	r0, [r0, #4]
   1ebbe:	1a9b      	subs	r3, r3, r2
   1ebc0:	1c82      	adds	r2, r0, #2
   1ebc2:	4293      	cmp	r3, r2
{
   1ebc4:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   1ebc6:	d30d      	bcc.n	1ebe4 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   1ebc8:	b280      	uxth	r0, r0
   1ebca:	f7ff ffe1 	bl	1eb90 <pack_uint16>
	memcpy(buf->cur, str->utf8, str->size);
   1ebce:	e9d5 1200 	ldrd	r1, r2, [r5]
   1ebd2:	6820      	ldr	r0, [r4, #0]
   1ebd4:	f7ff fe5f 	bl	1e896 <memcpy>
	return 0;
   1ebd8:	2000      	movs	r0, #0
	buf->cur += str->size;
   1ebda:	6823      	ldr	r3, [r4, #0]
   1ebdc:	686a      	ldr	r2, [r5, #4]
   1ebde:	4413      	add	r3, r2
   1ebe0:	6023      	str	r3, [r4, #0]
}
   1ebe2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   1ebe4:	f06f 000b 	mvn.w	r0, #11
   1ebe8:	e7fb      	b.n	1ebe2 <pack_utf8_str+0x2e>

0001ebea <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   1ebea:	6813      	ldr	r3, [r2, #0]
{
   1ebec:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   1ebee:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   1ebf0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   1ebf4:	d227      	bcs.n	1ec46 <mqtt_encode_fixed_header+0x5c>
   1ebf6:	4625      	mov	r5, r4
   1ebf8:	2600      	movs	r6, #0
	} while (length > 0);
   1ebfa:	09ed      	lsrs	r5, r5, #7
   1ebfc:	b2f3      	uxtb	r3, r6
   1ebfe:	f106 0601 	add.w	r6, r6, #1
   1ec02:	d1fa      	bne.n	1ebfa <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   1ec04:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1ec06:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   1ec08:	b2db      	uxtb	r3, r3
   1ec0a:	425d      	negs	r5, r3
   1ec0c:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1ec0e:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   1ec10:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   1ec12:	bf1e      	ittt	ne
   1ec14:	3301      	addne	r3, #1
   1ec16:	6013      	strne	r3, [r2, #0]
   1ec18:	5548      	strbne	r0, [r1, r5]
	return 0;
   1ec1a:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   1ec1c:	6813      	ldr	r3, [r2, #0]
   1ec1e:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   1ec22:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   1ec24:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   1ec26:	bf1f      	itttt	ne
   1ec28:	6811      	ldrne	r1, [r2, #0]
   1ec2a:	780b      	ldrbne	r3, [r1, #0]
   1ec2c:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   1ec30:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   1ec32:	6813      	ldr	r3, [r2, #0]
   1ec34:	3301      	adds	r3, #1
   1ec36:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   1ec38:	2800      	cmp	r0, #0
   1ec3a:	d1ef      	bne.n	1ec1c <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   1ec3c:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   1ec3e:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   1ec40:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   1ec42:	6053      	str	r3, [r2, #4]
}
   1ec44:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1ec46:	f06f 0023 	mvn.w	r0, #35	; 0x23
   1ec4a:	e7fb      	b.n	1ec44 <mqtt_encode_fixed_header+0x5a>

0001ec4c <mqtt_message_id_only_enc>:
{
   1ec4c:	b570      	push	{r4, r5, r6, lr}
   1ec4e:	4606      	mov	r6, r0
   1ec50:	4614      	mov	r4, r2
	if (message_id == 0U) {
   1ec52:	4608      	mov	r0, r1
   1ec54:	b169      	cbz	r1, 1ec72 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1ec56:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   1ec58:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1ec5a:	3505      	adds	r5, #5
   1ec5c:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   1ec5e:	f7ff ff97 	bl	1eb90 <pack_uint16>
	if (err_code != 0) {
   1ec62:	b940      	cbnz	r0, 1ec76 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   1ec64:	4622      	mov	r2, r4
   1ec66:	4629      	mov	r1, r5
   1ec68:	4630      	mov	r0, r6
}
   1ec6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1ec6e:	f7ff bfbc 	b.w	1ebea <mqtt_encode_fixed_header>
		return -EINVAL;
   1ec72:	f06f 0015 	mvn.w	r0, #21
}
   1ec76:	bd70      	pop	{r4, r5, r6, pc}

0001ec78 <publish_encode>:
{
   1ec78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1ec7c:	7d87      	ldrb	r7, [r0, #22]
   1ec7e:	7a04      	ldrb	r4, [r0, #8]
   1ec80:	f007 0801 	and.w	r8, r7, #1
{
   1ec84:	4605      	mov	r5, r0
   1ec86:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1ec88:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   1ec8c:	b10c      	cbz	r4, 1ec92 <publish_encode+0x1a>
   1ec8e:	8a83      	ldrh	r3, [r0, #20]
   1ec90:	b383      	cbz	r3, 1ecf4 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1ec92:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   1ec96:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1ec98:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   1ec9a:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1ec9c:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   1eca0:	f7ff ff88 	bl	1ebb4 <pack_utf8_str>
	if (err_code != 0) {
   1eca4:	b9b0      	cbnz	r0, 1ecd4 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   1eca6:	7a2b      	ldrb	r3, [r5, #8]
   1eca8:	b9b3      	cbnz	r3, 1ecd8 <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1ecaa:	0060      	lsls	r0, r4, #1
   1ecac:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   1ecb0:	692a      	ldr	r2, [r5, #16]
   1ecb2:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1ecb6:	4338      	orrs	r0, r7
   1ecb8:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   1ecbc:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   1ecbe:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   1ecc2:	464a      	mov	r2, r9
   1ecc4:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   1ecc6:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   1ecca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1ecce:	f7ff ff8c 	bl	1ebea <mqtt_encode_fixed_header>
	if (err_code != 0) {
   1ecd2:	b140      	cbz	r0, 1ece6 <publish_encode+0x6e>
}
   1ecd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   1ecd8:	4649      	mov	r1, r9
   1ecda:	8aa8      	ldrh	r0, [r5, #20]
   1ecdc:	f7ff ff58 	bl	1eb90 <pack_uint16>
		if (err_code != 0) {
   1ece0:	2800      	cmp	r0, #0
   1ece2:	d0e2      	beq.n	1ecaa <publish_encode+0x32>
   1ece4:	e7f6      	b.n	1ecd4 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   1ece6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1ecea:	692a      	ldr	r2, [r5, #16]
   1ecec:	1a9b      	subs	r3, r3, r2
   1ecee:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   1ecf2:	e7ef      	b.n	1ecd4 <publish_encode+0x5c>
		return -EINVAL;
   1ecf4:	f06f 0015 	mvn.w	r0, #21
   1ecf8:	e7ec      	b.n	1ecd4 <publish_encode+0x5c>

0001ecfa <publish_ack_encode>:
{
   1ecfa:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   1ecfc:	8801      	ldrh	r1, [r0, #0]
   1ecfe:	2040      	movs	r0, #64	; 0x40
   1ed00:	f7ff bfa4 	b.w	1ec4c <mqtt_message_id_only_enc>

0001ed04 <subscribe_encode>:
{
   1ed04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ed08:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   1ed0a:	88c0      	ldrh	r0, [r0, #6]
{
   1ed0c:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   1ed0e:	b330      	cbz	r0, 1ed5e <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   1ed10:	680f      	ldr	r7, [r1, #0]
   1ed12:	3705      	adds	r7, #5
   1ed14:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   1ed16:	f7ff ff3b 	bl	1eb90 <pack_uint16>
	if (err_code != 0) {
   1ed1a:	4604      	mov	r4, r0
   1ed1c:	bb08      	cbnz	r0, 1ed62 <subscribe_encode+0x5e>
   1ed1e:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   1ed22:	88b3      	ldrh	r3, [r6, #4]
   1ed24:	42a3      	cmp	r3, r4
   1ed26:	dc06      	bgt.n	1ed36 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   1ed28:	462a      	mov	r2, r5
   1ed2a:	4639      	mov	r1, r7
}
   1ed2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   1ed30:	2082      	movs	r0, #130	; 0x82
   1ed32:	f7ff bf5a 	b.w	1ebea <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   1ed36:	fb08 f904 	mul.w	r9, r8, r4
   1ed3a:	6830      	ldr	r0, [r6, #0]
   1ed3c:	4629      	mov	r1, r5
   1ed3e:	4448      	add	r0, r9
   1ed40:	f7ff ff38 	bl	1ebb4 <pack_utf8_str>
		if (err_code != 0) {
   1ed44:	b980      	cbnz	r0, 1ed68 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   1ed46:	6833      	ldr	r3, [r6, #0]
   1ed48:	444b      	add	r3, r9
   1ed4a:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   1ed4c:	e9d5 3100 	ldrd	r3, r1, [r5]
   1ed50:	4299      	cmp	r1, r3
   1ed52:	d00b      	beq.n	1ed6c <subscribe_encode+0x68>
	*(buf->cur++) = val;
   1ed54:	1c59      	adds	r1, r3, #1
   1ed56:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   1ed58:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   1ed5a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   1ed5c:	e7e1      	b.n	1ed22 <subscribe_encode+0x1e>
		return -EINVAL;
   1ed5e:	f06f 0415 	mvn.w	r4, #21
}
   1ed62:	4620      	mov	r0, r4
   1ed64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   1ed68:	4604      	mov	r4, r0
   1ed6a:	e7fa      	b.n	1ed62 <subscribe_encode+0x5e>
		return -ENOMEM;
   1ed6c:	f06f 040b 	mvn.w	r4, #11
   1ed70:	e7f7      	b.n	1ed62 <subscribe_encode+0x5e>

0001ed72 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   1ed72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ed74:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   1ed76:	e9d1 3100 	ldrd	r3, r1, [r1]
   1ed7a:	1acb      	subs	r3, r1, r3
   1ed7c:	4293      	cmp	r3, r2
{
   1ed7e:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   1ed80:	d301      	bcc.n	1ed86 <mqtt_read_message_chunk+0x14>
		return 0;
   1ed82:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   1ed84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   1ed86:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   1ed88:	190f      	adds	r7, r1, r4
   1ed8a:	e9d0 2313 	ldrd	r2, r3, [r0, #76]	; 0x4c
   1ed8e:	4413      	add	r3, r2
   1ed90:	429f      	cmp	r7, r3
   1ed92:	d813      	bhi.n	1edbc <mqtt_read_message_chunk+0x4a>
   1ed94:	4297      	cmp	r7, r2
   1ed96:	d311      	bcc.n	1edbc <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   1ed98:	2300      	movs	r3, #0
   1ed9a:	4622      	mov	r2, r4
   1ed9c:	f7f1 fe4e 	bl	10a3c <mqtt_transport_read>
	if (len < 0) {
   1eda0:	2800      	cmp	r0, #0
   1eda2:	dbef      	blt.n	1ed84 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   1eda4:	d00d      	beq.n	1edc2 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   1eda6:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   1eda8:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   1edaa:	4403      	add	r3, r0
   1edac:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   1edae:	686b      	ldr	r3, [r5, #4]
   1edb0:	4403      	add	r3, r0
   1edb2:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   1edb4:	d2e5      	bcs.n	1ed82 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   1edb6:	f06f 000a 	mvn.w	r0, #10
   1edba:	e7e3      	b.n	1ed84 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   1edbc:	f06f 000b 	mvn.w	r0, #11
   1edc0:	e7e0      	b.n	1ed84 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   1edc2:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1edc6:	e7dd      	b.n	1ed84 <mqtt_read_message_chunk+0x12>

0001edc8 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   1edc8:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   1edca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   1edcc:	69c2      	ldr	r2, [r0, #28]
{
   1edce:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   1edd0:	9302      	str	r3, [sp, #8]
{
   1edd2:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   1edd4:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   1edd6:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   1edd8:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   1edda:	4628      	mov	r0, r5
   1eddc:	a902      	add	r1, sp, #8
   1edde:	f7ff ffc8 	bl	1ed72 <mqtt_read_message_chunk>
		if (err_code < 0) {
   1ede2:	1e04      	subs	r4, r0, #0
   1ede4:	db2d      	blt.n	1ee42 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   1ede6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   1ede8:	aa01      	add	r2, sp, #4
   1edea:	f10d 0103 	add.w	r1, sp, #3
   1edee:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   1edf0:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   1edf2:	f7ff fe2d 	bl	1ea50 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   1edf6:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   1edfa:	4604      	mov	r4, r0
		chunk_size = 1U;
   1edfc:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   1ee00:	d0eb      	beq.n	1edda <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   1ee02:	2800      	cmp	r0, #0
   1ee04:	db21      	blt.n	1ee4a <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   1ee06:	f89d 6003 	ldrb.w	r6, [sp, #3]
   1ee0a:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   1ee0e:	2b30      	cmp	r3, #48	; 0x30
   1ee10:	d11e      	bne.n	1ee50 <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   1ee12:	2202      	movs	r2, #2
   1ee14:	4628      	mov	r0, r5
   1ee16:	a902      	add	r1, sp, #8
   1ee18:	f7ff ffab 	bl	1ed72 <mqtt_read_message_chunk>
	if (err_code < 0) {
   1ee1c:	1e04      	subs	r4, r0, #0
   1ee1e:	db10      	blt.n	1ee42 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   1ee20:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   1ee22:	f016 0f06 	tst.w	r6, #6
   1ee26:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   1ee28:	4628      	mov	r0, r5
   1ee2a:	ba52      	rev16	r2, r2
   1ee2c:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   1ee2e:	bf0c      	ite	eq
   1ee30:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   1ee32:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   1ee34:	a902      	add	r1, sp, #8
   1ee36:	f7ff ff9c 	bl	1ed72 <mqtt_read_message_chunk>
	if (err_code < 0) {
   1ee3a:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   1ee3e:	2c00      	cmp	r4, #0
   1ee40:	da0d      	bge.n	1ee5e <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   1ee42:	f114 0f0b 	cmn.w	r4, #11
   1ee46:	d100      	bne.n	1ee4a <mqtt_handle_rx+0x82>
   1ee48:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   1ee4a:	4620      	mov	r0, r4
   1ee4c:	b00c      	add	sp, #48	; 0x30
   1ee4e:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   1ee50:	4628      	mov	r0, r5
   1ee52:	9a01      	ldr	r2, [sp, #4]
   1ee54:	a902      	add	r1, sp, #8
   1ee56:	f7ff ff8c 	bl	1ed72 <mqtt_read_message_chunk>
   1ee5a:	4604      	mov	r4, r0
   1ee5c:	e7ef      	b.n	1ee3e <mqtt_handle_rx+0x76>
	evt.result = 0;
   1ee5e:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   1ee60:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1ee64:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   1ee66:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   1ee6a:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   1ee6c:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   1ee6e:	d066      	beq.n	1ef3e <mqtt_handle_rx+0x176>
   1ee70:	d813      	bhi.n	1ee9a <mqtt_handle_rx+0xd2>
   1ee72:	2b40      	cmp	r3, #64	; 0x40
   1ee74:	d059      	beq.n	1ef2a <mqtt_handle_rx+0x162>
   1ee76:	d806      	bhi.n	1ee86 <mqtt_handle_rx+0xbe>
   1ee78:	2b20      	cmp	r3, #32
   1ee7a:	d02f      	beq.n	1eedc <mqtt_handle_rx+0x114>
   1ee7c:	2b30      	cmp	r3, #48	; 0x30
   1ee7e:	d048      	beq.n	1ef12 <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   1ee80:	2400      	movs	r4, #0
   1ee82:	61ec      	str	r4, [r5, #28]
	return 0;
   1ee84:	e7e1      	b.n	1ee4a <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   1ee86:	2b50      	cmp	r3, #80	; 0x50
   1ee88:	d1fa      	bne.n	1ee80 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   1ee8a:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   1ee8c:	a905      	add	r1, sp, #20
   1ee8e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   1ee90:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   1ee94:	f7ff fe64 	bl	1eb60 <publish_receive_decode>
   1ee98:	e04e      	b.n	1ef38 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   1ee9a:	2bb0      	cmp	r3, #176	; 0xb0
   1ee9c:	d05f      	beq.n	1ef5e <mqtt_handle_rx+0x196>
   1ee9e:	d80b      	bhi.n	1eeb8 <mqtt_handle_rx+0xf0>
   1eea0:	2b70      	cmp	r3, #112	; 0x70
   1eea2:	d054      	beq.n	1ef4e <mqtt_handle_rx+0x186>
   1eea4:	2b90      	cmp	r3, #144	; 0x90
   1eea6:	d1eb      	bne.n	1ee80 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   1eea8:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   1eeaa:	a905      	add	r1, sp, #20
   1eeac:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   1eeae:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   1eeb2:	f7ff fe5b 	bl	1eb6c <subscribe_ack_decode>
   1eeb6:	e03f      	b.n	1ef38 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   1eeb8:	2bd0      	cmp	r3, #208	; 0xd0
   1eeba:	d1e1      	bne.n	1ee80 <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   1eebc:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	int err_code = 0;
   1eec0:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   1eec2:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   1eec4:	bfc8      	it	gt
   1eec6:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   1eeca:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   1eece:	bfc8      	it	gt
   1eed0:	b252      	sxtbgt	r2, r2
   1eed2:	f885 205f 	strb.w	r2, [r5, #95]	; 0x5f
		evt.type = MQTT_EVT_PINGRESP;
   1eed6:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   1eeda:	e010      	b.n	1eefe <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   1eedc:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   1eee0:	4628      	mov	r0, r5
   1eee2:	aa05      	add	r2, sp, #20
   1eee4:	a902      	add	r1, sp, #8
   1eee6:	f7ff fdde 	bl	1eaa6 <connect_ack_decode>
		if (err_code == 0) {
   1eeea:	4604      	mov	r4, r0
   1eeec:	bb28      	cbnz	r0, 1ef3a <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   1eeee:	f89d 2015 	ldrb.w	r2, [sp, #21]
   1eef2:	b95a      	cbnz	r2, 1ef0c <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   1eef4:	69ab      	ldr	r3, [r5, #24]
   1eef6:	f043 0304 	orr.w	r3, r3, #4
   1eefa:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   1eefc:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   1eefe:	4628      	mov	r0, r5
   1ef00:	a904      	add	r1, sp, #16
   1ef02:	f000 f8c5 	bl	1f090 <event_notify>
	if (err_code < 0) {
   1ef06:	2c00      	cmp	r4, #0
   1ef08:	daba      	bge.n	1ee80 <mqtt_handle_rx+0xb8>
   1ef0a:	e79e      	b.n	1ee4a <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   1ef0c:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1ef10:	e7f4      	b.n	1eefc <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   1ef12:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   1ef14:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   1ef16:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   1ef1a:	ab05      	add	r3, sp, #20
   1ef1c:	f7ff fdde 	bl	1eadc <publish_decode>
		client->internal.remaining_payload =
   1ef20:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   1ef22:	4604      	mov	r4, r0
		evt.result = err_code;
   1ef24:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   1ef26:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   1ef28:	e7e9      	b.n	1eefe <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   1ef2a:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   1ef2c:	a905      	add	r1, sp, #20
   1ef2e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   1ef30:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   1ef34:	f7ff fe12 	bl	1eb5c <publish_ack_decode>
   1ef38:	4604      	mov	r4, r0
		evt.result = err_code;
   1ef3a:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   1ef3c:	e7df      	b.n	1eefe <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   1ef3e:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   1ef40:	a905      	add	r1, sp, #20
   1ef42:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   1ef44:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   1ef48:	f7ff fe0c 	bl	1eb64 <publish_release_decode>
   1ef4c:	e7f4      	b.n	1ef38 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   1ef4e:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   1ef50:	a905      	add	r1, sp, #20
   1ef52:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   1ef54:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   1ef58:	f7ff fe06 	bl	1eb68 <publish_complete_decode>
   1ef5c:	e7ec      	b.n	1ef38 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   1ef5e:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   1ef60:	a905      	add	r1, sp, #20
   1ef62:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   1ef66:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   1ef6a:	f7ff fe0f 	bl	1eb8c <unsubscribe_ack_decode>
   1ef6e:	e7e3      	b.n	1ef38 <mqtt_handle_rx+0x170>

0001ef70 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   1ef70:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   1ef72:	6b45      	ldr	r5, [r0, #52]	; 0x34
{
   1ef74:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   1ef76:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   1ef78:	2206      	movs	r2, #6
   1ef7a:	2101      	movs	r1, #1
   1ef7c:	f7f0 f938 	bl	f1f0 <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   1ef80:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   1ef82:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   1ef84:	da04      	bge.n	1ef90 <mqtt_client_tcp_connect+0x20>
   1ef86:	f7fc ff99 	bl	1bebc <z_impl_z_errno>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   1ef8a:	6800      	ldr	r0, [r0, #0]
   1ef8c:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   1ef8e:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   1ef90:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   1ef92:	6b61      	ldr	r1, [r4, #52]	; 0x34
	if (broker->sa_family == AF_INET) {
   1ef94:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   1ef96:	bf14      	ite	ne
   1ef98:	2218      	movne	r2, #24
   1ef9a:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   1ef9c:	f7ff f9ae 	bl	1e2fc <z_impl_zsock_connect>
	if (ret < 0) {
   1efa0:	2800      	cmp	r0, #0
   1efa2:	da03      	bge.n	1efac <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   1efa4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   1efa6:	f7ff f992 	bl	1e2ce <z_impl_zsock_close>
   1efaa:	e7ec      	b.n	1ef86 <mqtt_client_tcp_connect+0x16>
	return 0;
   1efac:	2000      	movs	r0, #0
   1efae:	e7ee      	b.n	1ef8e <mqtt_client_tcp_connect+0x1e>

0001efb0 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   1efb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   1efb4:	2400      	movs	r4, #0
{
   1efb6:	4606      	mov	r6, r0
   1efb8:	460f      	mov	r7, r1
   1efba:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1efbc:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   1efbe:	42ac      	cmp	r4, r5
   1efc0:	d301      	bcc.n	1efc6 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   1efc2:	2000      	movs	r0, #0
   1efc4:	e00d      	b.n	1efe2 <mqtt_client_tcp_write+0x32>
		ret = send(client->transport.tcp.sock, data + offset,
   1efc6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   1efc8:	2300      	movs	r3, #0
   1efca:	e9cd 8800 	strd	r8, r8, [sp]
   1efce:	1b2a      	subs	r2, r5, r4
   1efd0:	1939      	adds	r1, r7, r4
   1efd2:	f7ff f9a9 	bl	1e328 <z_impl_zsock_sendto>
		if (ret < 0) {
   1efd6:	1e03      	subs	r3, r0, #0
   1efd8:	da06      	bge.n	1efe8 <mqtt_client_tcp_write+0x38>
   1efda:	f7fc ff6f 	bl	1bebc <z_impl_z_errno>
			return -errno;
   1efde:	6800      	ldr	r0, [r0, #0]
   1efe0:	4240      	negs	r0, r0
}
   1efe2:	b002      	add	sp, #8
   1efe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   1efe8:	441c      	add	r4, r3
   1efea:	e7e8      	b.n	1efbe <mqtt_client_tcp_write+0xe>

0001efec <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   1efec:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   1efee:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   1eff0:	2200      	movs	r2, #0
   1eff2:	f7ff f9b6 	bl	1e362 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   1eff6:	2800      	cmp	r0, #0
   1eff8:	da04      	bge.n	1f004 <mqtt_client_tcp_write_msg+0x18>
   1effa:	f7fc ff5f 	bl	1bebc <z_impl_z_errno>
		return -errno;
   1effe:	6800      	ldr	r0, [r0, #0]
   1f000:	4240      	negs	r0, r0
	}

	return 0;
}
   1f002:	bd08      	pop	{r3, pc}
	return 0;
   1f004:	2000      	movs	r0, #0
   1f006:	e7fc      	b.n	1f002 <mqtt_client_tcp_write_msg+0x16>

0001f008 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   1f008:	b513      	push	{r0, r1, r4, lr}
   1f00a:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   1f00c:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   1f00e:	bf14      	ite	ne
   1f010:	4623      	movne	r3, r4
   1f012:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   1f014:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1f016:	e9cd 4400 	strd	r4, r4, [sp]
   1f01a:	f7ff f9b8 	bl	1e38e <z_impl_zsock_recvfrom>
	if (ret < 0) {
   1f01e:	2800      	cmp	r0, #0
   1f020:	da03      	bge.n	1f02a <mqtt_client_tcp_read+0x22>
   1f022:	f7fc ff4b 	bl	1bebc <z_impl_z_errno>
		return -errno;
   1f026:	6800      	ldr	r0, [r0, #0]
   1f028:	4240      	negs	r0, r0
	}

	return ret;
}
   1f02a:	b002      	add	sp, #8
   1f02c:	bd10      	pop	{r4, pc}

0001f02e <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   1f02e:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   1f030:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   1f032:	f7ff f94c 	bl	1e2ce <z_impl_zsock_close>
	if (ret < 0) {
   1f036:	2800      	cmp	r0, #0
   1f038:	da04      	bge.n	1f044 <mqtt_client_tcp_disconnect+0x16>
   1f03a:	f7fc ff3f 	bl	1bebc <z_impl_z_errno>
		return -errno;
   1f03e:	6800      	ldr	r0, [r0, #0]
   1f040:	4240      	negs	r0, r0
	}

	return 0;
}
   1f042:	bd08      	pop	{r3, pc}
	return 0;
   1f044:	2000      	movs	r0, #0
   1f046:	e7fc      	b.n	1f042 <mqtt_client_tcp_disconnect+0x14>

0001f048 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   1f048:	f7ff bff1 	b.w	1f02e <mqtt_client_tcp_disconnect>

0001f04c <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   1f04c:	b538      	push	{r3, r4, r5, lr}
   1f04e:	4604      	mov	r4, r0
   1f050:	460d      	mov	r5, r1
	memset(client->tx_buf, 0, client->tx_buf_size);
   1f052:	6d82      	ldr	r2, [r0, #88]	; 0x58
   1f054:	2100      	movs	r1, #0
   1f056:	6d40      	ldr	r0, [r0, #84]	; 0x54
   1f058:	f7ff fc48 	bl	1e8ec <memset>
	buf->cur = client->tx_buf;
   1f05c:	6d63      	ldr	r3, [r4, #84]	; 0x54
	buf->end = client->tx_buf + client->tx_buf_size;
   1f05e:	6da2      	ldr	r2, [r4, #88]	; 0x58
	buf->cur = client->tx_buf;
   1f060:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   1f062:	4413      	add	r3, r2
   1f064:	606b      	str	r3, [r5, #4]
}
   1f066:	bd38      	pop	{r3, r4, r5, pc}

0001f068 <k_uptime_get>:
{
   1f068:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   1f06a:	f001 fbdb 	bl	20824 <z_impl_k_uptime_ticks>
   1f06e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1f072:	fba0 2304 	umull	r2, r3, r0, r4
   1f076:	fb04 3301 	mla	r3, r4, r1, r3
   1f07a:	0bd0      	lsrs	r0, r2, #15
}
   1f07c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1f080:	0bd9      	lsrs	r1, r3, #15
   1f082:	bd10      	pop	{r4, pc}

0001f084 <mqtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1f084:	f04f 32ff 	mov.w	r2, #4294967295
   1f088:	f04f 33ff 	mov.w	r3, #4294967295
   1f08c:	f7fd b9a6 	b.w	1c3dc <z_impl_k_mutex_lock>

0001f090 <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   1f090:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   1f092:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   1f094:	4604      	mov	r4, r0
   1f096:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   1f098:	b15b      	cbz	r3, 1f0b2 <event_notify+0x22>

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
	int ret = sys_mutex_unlock(&client->internal.mutex);
   1f09a:	f7f1 fcdd 	bl	10a58 <sys_mutex_unlock>
		mqtt_mutex_unlock(client);

		client->evt_cb(client, evt);
   1f09e:	4620      	mov	r0, r4
   1f0a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1f0a2:	9901      	ldr	r1, [sp, #4]
   1f0a4:	4798      	blx	r3

		mqtt_mutex_lock(client);
   1f0a6:	4620      	mov	r0, r4
	}
}
   1f0a8:	b002      	add	sp, #8
   1f0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   1f0ae:	f7ff bfe9 	b.w	1f084 <mqtt_mutex_lock>
}
   1f0b2:	b002      	add	sp, #8
   1f0b4:	bd10      	pop	{r4, pc}

0001f0b6 <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   1f0b6:	b530      	push	{r4, r5, lr}
   1f0b8:	b089      	sub	sp, #36	; 0x24
   1f0ba:	4604      	mov	r4, r0
   1f0bc:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   1f0be:	f7ff ffc3 	bl	1f048 <mqtt_transport_disconnect>
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	if (notify) {
		struct mqtt_evt evt = {
   1f0c2:	221c      	movs	r2, #28
   1f0c4:	2100      	movs	r1, #0
   1f0c6:	4668      	mov	r0, sp
   1f0c8:	f7ff fc10 	bl	1e8ec <memset>
   1f0cc:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   1f0ce:	4669      	mov	r1, sp
   1f0d0:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   1f0d2:	f88d 3000 	strb.w	r3, [sp]
   1f0d6:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   1f0d8:	f7ff ffda 	bl	1f090 <event_notify>
	MQTT_STATE_INIT(client);
   1f0dc:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   1f0de:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   1f0e2:	e9c4 3307 	strd	r3, r3, [r4, #28]
	}

	/* Reset internal state. */
	client_reset(client);
}
   1f0e6:	b009      	add	sp, #36	; 0x24
   1f0e8:	bd30      	pop	{r4, r5, pc}

0001f0ea <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   1f0ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f0ec:	4617      	mov	r7, r2
   1f0ee:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   1f0f0:	4605      	mov	r5, r0
{
   1f0f2:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   1f0f4:	b320      	cbz	r0, 1f140 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   1f0f6:	f7ff ffc5 	bl	1f084 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   1f0fa:	6a2c      	ldr	r4, [r5, #32]
   1f0fc:	b1b4      	cbz	r4, 1f12c <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   1f0fe:	42bc      	cmp	r4, r7
   1f100:	4622      	mov	r2, r4
   1f102:	4633      	mov	r3, r6
   1f104:	bf28      	it	cs
   1f106:	463a      	movcs	r2, r7
   1f108:	4628      	mov	r0, r5
   1f10a:	9901      	ldr	r1, [sp, #4]
   1f10c:	f7f1 fc96 	bl	10a3c <mqtt_transport_read>
   1f110:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   1f112:	b916      	cbnz	r6, 1f11a <read_publish_payload+0x30>
   1f114:	f110 0f0b 	cmn.w	r0, #11
   1f118:	d008      	beq.n	1f12c <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   1f11a:	2c00      	cmp	r4, #0
   1f11c:	dc0c      	bgt.n	1f138 <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   1f11e:	bf08      	it	eq
   1f120:	f06f 0438 	mvneq.w	r4, #56	; 0x38
		}

		client_disconnect(client, ret, true);
   1f124:	4628      	mov	r0, r5
   1f126:	4621      	mov	r1, r4
   1f128:	f7ff ffc5 	bl	1f0b6 <client_disconnect.constprop.0>
   1f12c:	4628      	mov	r0, r5
   1f12e:	f7f1 fc93 	bl	10a58 <sys_mutex_unlock>

exit:
	mqtt_mutex_unlock(client);

	return ret;
}
   1f132:	4620      	mov	r0, r4
   1f134:	b003      	add	sp, #12
   1f136:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   1f138:	6a2b      	ldr	r3, [r5, #32]
   1f13a:	1b1b      	subs	r3, r3, r4
   1f13c:	622b      	str	r3, [r5, #32]
   1f13e:	e7f5      	b.n	1f12c <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   1f140:	f06f 0415 	mvn.w	r4, #21
   1f144:	e7f5      	b.n	1f132 <read_publish_payload+0x48>

0001f146 <client_write>:
{
   1f146:	b538      	push	{r3, r4, r5, lr}
   1f148:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   1f14a:	f7f1 fc5d 	bl	10a08 <mqtt_transport_write>
	if (err_code < 0) {
   1f14e:	1e04      	subs	r4, r0, #0
   1f150:	da05      	bge.n	1f15e <client_write+0x18>
		client_disconnect(client, err_code, true);
   1f152:	4621      	mov	r1, r4
   1f154:	4628      	mov	r0, r5
   1f156:	f7ff ffae 	bl	1f0b6 <client_disconnect.constprop.0>
}
   1f15a:	4620      	mov	r0, r4
   1f15c:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   1f15e:	f7ff ff83 	bl	1f068 <k_uptime_get>
	return 0;
   1f162:	2400      	movs	r4, #0
   1f164:	6168      	str	r0, [r5, #20]
   1f166:	e7f8      	b.n	1f15a <client_write+0x14>

0001f168 <mqtt_client_init>:
{
   1f168:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   1f16a:	4604      	mov	r4, r0
   1f16c:	b1a0      	cbz	r0, 1f198 <mqtt_client_init+0x30>
	memset(client, 0, sizeof(*client));
   1f16e:	2264      	movs	r2, #100	; 0x64
   1f170:	2100      	movs	r1, #0
   1f172:	f7ff fbbb 	bl	1e8ec <memset>
	MQTT_STATE_INIT(client);
   1f176:	2300      	movs	r3, #0
   1f178:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   1f17a:	4620      	mov	r0, r4
   1f17c:	f001 f90d 	bl	2039a <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   1f180:	2304      	movs	r3, #4
   1f182:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	client->clean_session = MQTT_CLEAN_SESSION;
   1f186:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1f18a:	f043 0302 	orr.w	r3, r3, #2
   1f18e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	client->keepalive = MQTT_KEEPALIVE;
   1f192:	233c      	movs	r3, #60	; 0x3c
   1f194:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
}
   1f198:	bd10      	pop	{r4, pc}

0001f19a <mqtt_connect>:
{
   1f19a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1f19c:	4605      	mov	r5, r0
   1f19e:	2800      	cmp	r0, #0
   1f1a0:	d03b      	beq.n	1f21a <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   1f1a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1f1a4:	2b00      	cmp	r3, #0
   1f1a6:	d038      	beq.n	1f21a <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   1f1a8:	f7ff ff6c 	bl	1f084 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   1f1ac:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   1f1ae:	b38b      	cbz	r3, 1f214 <mqtt_connect+0x7a>
   1f1b0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1f1b2:	b37b      	cbz	r3, 1f214 <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   1f1b4:	4628      	mov	r0, r5
   1f1b6:	f7f1 fc1d 	bl	109f4 <mqtt_transport_connect>
	if (err_code < 0) {
   1f1ba:	1e04      	subs	r4, r0, #0
   1f1bc:	db24      	blt.n	1f208 <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   1f1be:	4669      	mov	r1, sp
   1f1c0:	4628      	mov	r0, r5
   1f1c2:	f7ff ff43 	bl	1f04c <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   1f1c6:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   1f1c8:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   1f1ca:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   1f1ce:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   1f1d0:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   1f1d2:	f7f1 fb63 	bl	1089c <connect_request_encode>
	if (err_code < 0) {
   1f1d6:	1e04      	subs	r4, r0, #0
   1f1d8:	db13      	blt.n	1f202 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   1f1da:	e9dd 1200 	ldrd	r1, r2, [sp]
   1f1de:	4628      	mov	r0, r5
   1f1e0:	1a52      	subs	r2, r2, r1
   1f1e2:	f7f1 fc11 	bl	10a08 <mqtt_transport_write>
	if (err_code < 0) {
   1f1e6:	1e04      	subs	r4, r0, #0
   1f1e8:	db0b      	blt.n	1f202 <mqtt_connect+0x68>
   1f1ea:	f7ff ff3d 	bl	1f068 <k_uptime_get>
	client->unacked_ping = 0;
   1f1ee:	2400      	movs	r4, #0
   1f1f0:	6168      	str	r0, [r5, #20]
   1f1f2:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
   1f1f6:	4628      	mov	r0, r5
   1f1f8:	f7f1 fc2e 	bl	10a58 <sys_mutex_unlock>
}
   1f1fc:	4620      	mov	r0, r4
   1f1fe:	b003      	add	sp, #12
   1f200:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   1f202:	4628      	mov	r0, r5
   1f204:	f7ff ff20 	bl	1f048 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   1f208:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   1f20a:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   1f20e:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   1f212:	e7f0      	b.n	1f1f6 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   1f214:	f06f 040b 	mvn.w	r4, #11
   1f218:	e7f6      	b.n	1f208 <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   1f21a:	f06f 0415 	mvn.w	r4, #21
   1f21e:	e7ed      	b.n	1f1fc <mqtt_connect+0x62>

0001f220 <mqtt_publish>:
{
   1f220:	b570      	push	{r4, r5, r6, lr}
   1f222:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   1f224:	4605      	mov	r5, r0
{
   1f226:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   1f228:	2800      	cmp	r0, #0
   1f22a:	d03b      	beq.n	1f2a4 <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   1f22c:	2900      	cmp	r1, #0
   1f22e:	d039      	beq.n	1f2a4 <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   1f230:	f7ff ff28 	bl	1f084 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1f234:	4628      	mov	r0, r5
   1f236:	a901      	add	r1, sp, #4
   1f238:	f7ff ff08 	bl	1f04c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1f23c:	69ab      	ldr	r3, [r5, #24]
   1f23e:	075b      	lsls	r3, r3, #29
   1f240:	d52d      	bpl.n	1f29e <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   1f242:	4630      	mov	r0, r6
   1f244:	a901      	add	r1, sp, #4
   1f246:	f7ff fd17 	bl	1ec78 <publish_encode>
	if (err_code < 0) {
   1f24a:	1e04      	subs	r4, r0, #0
   1f24c:	db1c      	blt.n	1f288 <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   1f24e:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   1f250:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   1f252:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   1f254:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   1f256:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   1f258:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   1f25a:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   1f25c:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   1f25e:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   1f260:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   1f262:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   1f266:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   1f268:	f7ff fb40 	bl	1e8ec <memset>
	msg.msg_iov = io_vector;
   1f26c:	ab03      	add	r3, sp, #12
   1f26e:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   1f270:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   1f272:	4628      	mov	r0, r5
   1f274:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   1f276:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   1f278:	f7f1 fbd2 	bl	10a20 <mqtt_transport_write_msg>
	if (err_code < 0) {
   1f27c:	1e04      	subs	r4, r0, #0
   1f27e:	da09      	bge.n	1f294 <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   1f280:	4621      	mov	r1, r4
   1f282:	4628      	mov	r0, r5
   1f284:	f7ff ff17 	bl	1f0b6 <client_disconnect.constprop.0>
   1f288:	4628      	mov	r0, r5
   1f28a:	f7f1 fbe5 	bl	10a58 <sys_mutex_unlock>
}
   1f28e:	4620      	mov	r0, r4
   1f290:	b00e      	add	sp, #56	; 0x38
   1f292:	bd70      	pop	{r4, r5, r6, pc}
   1f294:	f7ff fee8 	bl	1f068 <k_uptime_get>
	return 0;
   1f298:	2400      	movs	r4, #0
   1f29a:	6168      	str	r0, [r5, #20]
   1f29c:	e7f4      	b.n	1f288 <mqtt_publish+0x68>
		return -ENOTCONN;
   1f29e:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1f2a2:	e7f1      	b.n	1f288 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   1f2a4:	f06f 0415 	mvn.w	r4, #21
   1f2a8:	e7f1      	b.n	1f28e <mqtt_publish+0x6e>

0001f2aa <mqtt_publish_qos1_ack>:
{
   1f2aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f2ac:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   1f2ae:	4605      	mov	r5, r0
   1f2b0:	b1f8      	cbz	r0, 1f2f2 <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   1f2b2:	b1f1      	cbz	r1, 1f2f2 <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   1f2b4:	f7ff fee6 	bl	1f084 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1f2b8:	4669      	mov	r1, sp
   1f2ba:	4628      	mov	r0, r5
   1f2bc:	f7ff fec6 	bl	1f04c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1f2c0:	69ab      	ldr	r3, [r5, #24]
   1f2c2:	075b      	lsls	r3, r3, #29
   1f2c4:	d512      	bpl.n	1f2ec <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   1f2c6:	4620      	mov	r0, r4
   1f2c8:	4669      	mov	r1, sp
   1f2ca:	f7ff fd16 	bl	1ecfa <publish_ack_encode>
	if (err_code < 0) {
   1f2ce:	1e04      	subs	r4, r0, #0
   1f2d0:	db06      	blt.n	1f2e0 <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1f2d2:	e9dd 1200 	ldrd	r1, r2, [sp]
   1f2d6:	4628      	mov	r0, r5
   1f2d8:	1a52      	subs	r2, r2, r1
   1f2da:	f7ff ff34 	bl	1f146 <client_write>
   1f2de:	4604      	mov	r4, r0
   1f2e0:	4628      	mov	r0, r5
   1f2e2:	f7f1 fbb9 	bl	10a58 <sys_mutex_unlock>
}
   1f2e6:	4620      	mov	r0, r4
   1f2e8:	b003      	add	sp, #12
   1f2ea:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1f2ec:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1f2f0:	e7f6      	b.n	1f2e0 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   1f2f2:	f06f 0415 	mvn.w	r4, #21
   1f2f6:	e7f6      	b.n	1f2e6 <mqtt_publish_qos1_ack+0x3c>

0001f2f8 <mqtt_disconnect>:
{
   1f2f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1f2fa:	4605      	mov	r5, r0
   1f2fc:	b310      	cbz	r0, 1f344 <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   1f2fe:	f7ff fec1 	bl	1f084 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1f302:	4669      	mov	r1, sp
   1f304:	4628      	mov	r0, r5
   1f306:	f7ff fea1 	bl	1f04c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1f30a:	69ab      	ldr	r3, [r5, #24]
   1f30c:	075b      	lsls	r3, r3, #29
   1f30e:	d516      	bpl.n	1f33e <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   1f310:	4668      	mov	r0, sp
   1f312:	f7f1 fb43 	bl	1099c <disconnect_encode>
	if (err_code < 0) {
   1f316:	1e04      	subs	r4, r0, #0
   1f318:	db0b      	blt.n	1f332 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1f31a:	e9dd 1200 	ldrd	r1, r2, [sp]
   1f31e:	4628      	mov	r0, r5
   1f320:	1a52      	subs	r2, r2, r1
   1f322:	f7ff ff10 	bl	1f146 <client_write>
	if (err_code < 0) {
   1f326:	1e04      	subs	r4, r0, #0
   1f328:	db03      	blt.n	1f332 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   1f32a:	2100      	movs	r1, #0
   1f32c:	4628      	mov	r0, r5
   1f32e:	f7ff fec2 	bl	1f0b6 <client_disconnect.constprop.0>
   1f332:	4628      	mov	r0, r5
   1f334:	f7f1 fb90 	bl	10a58 <sys_mutex_unlock>
}
   1f338:	4620      	mov	r0, r4
   1f33a:	b003      	add	sp, #12
   1f33c:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1f33e:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1f342:	e7f6      	b.n	1f332 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   1f344:	f06f 0415 	mvn.w	r4, #21
   1f348:	e7f6      	b.n	1f338 <mqtt_disconnect+0x40>

0001f34a <mqtt_subscribe>:
{
   1f34a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f34c:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   1f34e:	4605      	mov	r5, r0
   1f350:	b1f8      	cbz	r0, 1f392 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   1f352:	b1f1      	cbz	r1, 1f392 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   1f354:	f7ff fe96 	bl	1f084 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1f358:	4669      	mov	r1, sp
   1f35a:	4628      	mov	r0, r5
   1f35c:	f7ff fe76 	bl	1f04c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1f360:	69ab      	ldr	r3, [r5, #24]
   1f362:	075b      	lsls	r3, r3, #29
   1f364:	d512      	bpl.n	1f38c <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   1f366:	4620      	mov	r0, r4
   1f368:	4669      	mov	r1, sp
   1f36a:	f7ff fccb 	bl	1ed04 <subscribe_encode>
	if (err_code < 0) {
   1f36e:	1e04      	subs	r4, r0, #0
   1f370:	db06      	blt.n	1f380 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1f372:	e9dd 1200 	ldrd	r1, r2, [sp]
   1f376:	4628      	mov	r0, r5
   1f378:	1a52      	subs	r2, r2, r1
   1f37a:	f7ff fee4 	bl	1f146 <client_write>
   1f37e:	4604      	mov	r4, r0
   1f380:	4628      	mov	r0, r5
   1f382:	f7f1 fb69 	bl	10a58 <sys_mutex_unlock>
}
   1f386:	4620      	mov	r0, r4
   1f388:	b003      	add	sp, #12
   1f38a:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1f38c:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1f390:	e7f6      	b.n	1f380 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   1f392:	f06f 0415 	mvn.w	r4, #21
   1f396:	e7f6      	b.n	1f386 <mqtt_subscribe+0x3c>

0001f398 <mqtt_ping>:
{
   1f398:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1f39a:	4605      	mov	r5, r0
   1f39c:	b320      	cbz	r0, 1f3e8 <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   1f39e:	f7ff fe71 	bl	1f084 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   1f3a2:	4669      	mov	r1, sp
   1f3a4:	4628      	mov	r0, r5
   1f3a6:	f7ff fe51 	bl	1f04c <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   1f3aa:	69ab      	ldr	r3, [r5, #24]
   1f3ac:	075b      	lsls	r3, r3, #29
   1f3ae:	d518      	bpl.n	1f3e2 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   1f3b0:	4668      	mov	r0, sp
   1f3b2:	f7f1 fb09 	bl	109c8 <ping_request_encode>
	if (err_code < 0) {
   1f3b6:	1e04      	subs	r4, r0, #0
   1f3b8:	db0d      	blt.n	1f3d6 <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1f3ba:	e9dd 1200 	ldrd	r1, r2, [sp]
   1f3be:	4628      	mov	r0, r5
   1f3c0:	1a52      	subs	r2, r2, r1
   1f3c2:	f7ff fec0 	bl	1f146 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   1f3c6:	f995 305f 	ldrsb.w	r3, [r5, #95]	; 0x5f
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   1f3ca:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   1f3cc:	2b7f      	cmp	r3, #127	; 0x7f
   1f3ce:	d002      	beq.n	1f3d6 <mqtt_ping+0x3e>
		client->unacked_ping++;
   1f3d0:	3301      	adds	r3, #1
   1f3d2:	f885 305f 	strb.w	r3, [r5, #95]	; 0x5f
   1f3d6:	4628      	mov	r0, r5
   1f3d8:	f7f1 fb3e 	bl	10a58 <sys_mutex_unlock>
}
   1f3dc:	4620      	mov	r0, r4
   1f3de:	b003      	add	sp, #12
   1f3e0:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1f3e2:	f06f 0438 	mvn.w	r4, #56	; 0x38
   1f3e6:	e7f6      	b.n	1f3d6 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   1f3e8:	f06f 0415 	mvn.w	r4, #21
   1f3ec:	e7f6      	b.n	1f3dc <mqtt_ping+0x44>

0001f3ee <mqtt_live>:
{
   1f3ee:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   1f3f0:	4606      	mov	r6, r0
   1f3f2:	b300      	cbz	r0, 1f436 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   1f3f4:	f7ff fe46 	bl	1f084 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   1f3f8:	6974      	ldr	r4, [r6, #20]
   1f3fa:	f7ff fe35 	bl	1f068 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   1f3fe:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   1f400:	f8b6 405c 	ldrh.w	r4, [r6, #92]	; 0x5c

	if (diff < 0) {
		return 0;
   1f404:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1f408:	b19c      	cbz	r4, 1f432 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   1f40a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f40e:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   1f410:	4284      	cmp	r4, r0
   1f412:	d80d      	bhi.n	1f430 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   1f414:	4630      	mov	r0, r6
   1f416:	f7ff ffbf 	bl	1f398 <mqtt_ping>
		ping_sent = true;
   1f41a:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   1f41c:	4605      	mov	r5, r0
	int ret = sys_mutex_unlock(&client->internal.mutex);
   1f41e:	4630      	mov	r0, r6
   1f420:	f7f1 fb1a 	bl	10a58 <sys_mutex_unlock>
		return -EAGAIN;
   1f424:	2c00      	cmp	r4, #0
   1f426:	bf08      	it	eq
   1f428:	f06f 050a 	mvneq.w	r5, #10
}
   1f42c:	4628      	mov	r0, r5
   1f42e:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   1f430:	2400      	movs	r4, #0
	int err_code = 0;
   1f432:	4625      	mov	r5, r4
   1f434:	e7f3      	b.n	1f41e <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   1f436:	f06f 0515 	mvn.w	r5, #21
   1f43a:	e7f7      	b.n	1f42c <mqtt_live+0x3e>

0001f43c <mqtt_keepalive_time_left>:
{
   1f43c:	b538      	push	{r3, r4, r5, lr}
   1f43e:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   1f440:	6945      	ldr	r5, [r0, #20]
   1f442:	f7ff fe11 	bl	1f068 <k_uptime_get>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   1f446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f44a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
	int32_t diff = k_uptime_get_32() - last_activity;
   1f44e:	1b42      	subs	r2, r0, r5
   1f450:	434b      	muls	r3, r1
		return 0;
   1f452:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   1f456:	b119      	cbz	r1, 1f460 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   1f458:	4293      	cmp	r3, r2
   1f45a:	d904      	bls.n	1f466 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   1f45c:	1a98      	subs	r0, r3, r2
}
   1f45e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   1f460:	f04f 30ff 	mov.w	r0, #4294967295
   1f464:	e7fb      	b.n	1f45e <mqtt_keepalive_time_left+0x22>
		return 0;
   1f466:	2000      	movs	r0, #0
   1f468:	e7f9      	b.n	1f45e <mqtt_keepalive_time_left+0x22>

0001f46a <mqtt_input>:
{
   1f46a:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   1f46c:	4605      	mov	r5, r0
   1f46e:	b1d0      	cbz	r0, 1f4a6 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   1f470:	f7ff fe08 	bl	1f084 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   1f474:	69ab      	ldr	r3, [r5, #24]
   1f476:	079b      	lsls	r3, r3, #30
   1f478:	d50f      	bpl.n	1f49a <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   1f47a:	6a2b      	ldr	r3, [r5, #32]
   1f47c:	b983      	cbnz	r3, 1f4a0 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   1f47e:	4628      	mov	r0, r5
   1f480:	f7ff fca2 	bl	1edc8 <mqtt_handle_rx>
	if (err_code < 0) {
   1f484:	1e04      	subs	r4, r0, #0
   1f486:	da03      	bge.n	1f490 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   1f488:	4621      	mov	r1, r4
   1f48a:	4628      	mov	r0, r5
   1f48c:	f7ff fe13 	bl	1f0b6 <client_disconnect.constprop.0>
	int ret = sys_mutex_unlock(&client->internal.mutex);
   1f490:	4628      	mov	r0, r5
   1f492:	f7f1 fae1 	bl	10a58 <sys_mutex_unlock>
}
   1f496:	4620      	mov	r0, r4
   1f498:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   1f49a:	f06f 040c 	mvn.w	r4, #12
   1f49e:	e7f7      	b.n	1f490 <mqtt_input+0x26>
		return -EBUSY;
   1f4a0:	f06f 040f 	mvn.w	r4, #15
   1f4a4:	e7f4      	b.n	1f490 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   1f4a6:	f06f 0415 	mvn.w	r4, #21
   1f4aa:	e7f4      	b.n	1f496 <mqtt_input+0x2c>

0001f4ac <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   1f4ac:	2301      	movs	r3, #1
   1f4ae:	f7ff be1c 	b.w	1f0ea <read_publish_payload>

0001f4b2 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   1f4b2:	b570      	push	{r4, r5, r6, lr}
   1f4b4:	4606      	mov	r6, r0
   1f4b6:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   1f4b8:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   1f4ba:	42ac      	cmp	r4, r5
   1f4bc:	d301      	bcc.n	1f4c2 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   1f4be:	2000      	movs	r0, #0
}
   1f4c0:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   1f4c2:	4621      	mov	r1, r4
   1f4c4:	4630      	mov	r0, r6
   1f4c6:	1b2a      	subs	r2, r5, r4
   1f4c8:	f7ff fff0 	bl	1f4ac <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   1f4cc:	2800      	cmp	r0, #0
   1f4ce:	dbf7      	blt.n	1f4c0 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   1f4d0:	d001      	beq.n	1f4d6 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   1f4d2:	4404      	add	r4, r0
   1f4d4:	e7f1      	b.n	1f4ba <mqtt_readall_publish_payload+0x8>
			return -EIO;
   1f4d6:	f06f 0004 	mvn.w	r0, #4
   1f4da:	e7f1      	b.n	1f4c0 <mqtt_readall_publish_payload+0xe>

0001f4dc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f4dc:	6843      	ldr	r3, [r0, #4]
}
   1f4de:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f4e0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1f4e2:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1f4e4:	600b      	str	r3, [r1, #0]
}
   1f4e6:	4770      	bx	lr

0001f4e8 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f4e8:	6843      	ldr	r3, [r0, #4]
   1f4ea:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1f4ec:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1f4ee:	4042      	eors	r2, r0
   1f4f0:	400a      	ands	r2, r1
   1f4f2:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1f4f4:	605a      	str	r2, [r3, #4]
}
   1f4f6:	2000      	movs	r0, #0
   1f4f8:	4770      	bx	lr

0001f4fa <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f4fa:	6843      	ldr	r3, [r0, #4]
}
   1f4fc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f4fe:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1f500:	6099      	str	r1, [r3, #8]
}
   1f502:	4770      	bx	lr

0001f504 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f504:	6843      	ldr	r3, [r0, #4]
}
   1f506:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f508:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1f50a:	60d9      	str	r1, [r3, #12]
}
   1f50c:	4770      	bx	lr

0001f50e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f50e:	6843      	ldr	r3, [r0, #4]
}
   1f510:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f512:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1f514:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1f516:	4059      	eors	r1, r3
    p_reg->OUT = value;
   1f518:	6051      	str	r1, [r2, #4]
}
   1f51a:	4770      	bx	lr

0001f51c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f51c:	68c3      	ldr	r3, [r0, #12]
{
   1f51e:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1f520:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1f522:	b158      	cbz	r0, 1f53c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f524:	2400      	movs	r4, #0
   1f526:	4281      	cmp	r1, r0
   1f528:	d113      	bne.n	1f552 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1f52a:	6808      	ldr	r0, [r1, #0]
   1f52c:	b95c      	cbnz	r4, 1f546 <gpio_nrfx_manage_callback+0x2a>
   1f52e:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1f530:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f532:	42a1      	cmp	r1, r4
   1f534:	d100      	bne.n	1f538 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1f536:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1f538:	2000      	movs	r0, #0
   1f53a:	6008      	str	r0, [r1, #0]
	if (set) {
   1f53c:	b972      	cbnz	r2, 1f55c <gpio_nrfx_manage_callback+0x40>
	return 0;
   1f53e:	2000      	movs	r0, #0
}
   1f540:	bd30      	pop	{r4, r5, pc}
   1f542:	4628      	mov	r0, r5
   1f544:	e7ef      	b.n	1f526 <gpio_nrfx_manage_callback+0xa>
   1f546:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f548:	6898      	ldr	r0, [r3, #8]
   1f54a:	4281      	cmp	r1, r0
	list->tail = node;
   1f54c:	bf08      	it	eq
   1f54e:	609c      	streq	r4, [r3, #8]
}
   1f550:	e7f2      	b.n	1f538 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f552:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f554:	4604      	mov	r4, r0
   1f556:	2d00      	cmp	r5, #0
   1f558:	d1f3      	bne.n	1f542 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1f55a:	b13a      	cbz	r2, 1f56c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1f55c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f55e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f560:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1f562:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f564:	2800      	cmp	r0, #0
   1f566:	d1ea      	bne.n	1f53e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1f568:	6099      	str	r1, [r3, #8]
}
   1f56a:	e7e9      	b.n	1f540 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1f56c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f570:	e7e6      	b.n	1f540 <gpio_nrfx_manage_callback+0x24>

0001f572 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   1f572:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1f574:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   1f576:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   1f578:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   1f57a:	7b91      	ldrb	r1, [r2, #14]
   1f57c:	b159      	cbz	r1, 1f596 <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f57e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1f582:	b141      	cbz	r1, 1f596 <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   1f584:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f588:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f58c:	2101      	movs	r1, #1
   1f58e:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   1f590:	2300      	movs	r3, #0
   1f592:	7393      	strb	r3, [r2, #14]
		return;
   1f594:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f596:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1f59a:	b121      	cbz	r1, 1f5a6 <uarte_nrfx_isr_int+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f59c:	2100      	movs	r1, #0
   1f59e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1f5a2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1f5a6:	6813      	ldr	r3, [r2, #0]
   1f5a8:	b10b      	cbz	r3, 1f5ae <uarte_nrfx_isr_int+0x3c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1f5aa:	6851      	ldr	r1, [r2, #4]
   1f5ac:	4718      	bx	r3
}
   1f5ae:	4770      	bx	lr

0001f5b0 <uarte_nrfx_config_get>:
{
   1f5b0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1f5b2:	68c2      	ldr	r2, [r0, #12]
   1f5b4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1f5b8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1f5bc:	2000      	movs	r0, #0
   1f5be:	4770      	bx	lr

0001f5c0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1f5c0:	6843      	ldr	r3, [r0, #4]
   1f5c2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1f5c4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1f5c8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1f5cc:	4770      	bx	lr

0001f5ce <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1f5ce:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1f5d0:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1f5d2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f5d4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f5d8:	b148      	cbz	r0, 1f5ee <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f5da:	2000      	movs	r0, #0
	*c = data->rx_data;
   1f5dc:	7d12      	ldrb	r2, [r2, #20]
   1f5de:	700a      	strb	r2, [r1, #0]
   1f5e0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1f5e4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f5e8:	2201      	movs	r2, #1
   1f5ea:	601a      	str	r2, [r3, #0]
	return 0;
   1f5ec:	4770      	bx	lr
		return -1;
   1f5ee:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f5f2:	4770      	bx	lr

0001f5f4 <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   1f5f4:	6843      	ldr	r3, [r0, #4]
{
   1f5f6:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   1f5f8:	681c      	ldr	r4, [r3, #0]
{
   1f5fa:	4605      	mov	r5, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f5fc:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1f600:	b1a0      	cbz	r0, 1f62c <uarte_nrfx_fifo_fill+0x38>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f602:	68ed      	ldr	r5, [r5, #12]
	if (len > data->int_driven->tx_buff_size) {
   1f604:	68eb      	ldr	r3, [r5, #12]
   1f606:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f608:	2300      	movs	r3, #0
   1f60a:	4290      	cmp	r0, r2
   1f60c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1f610:	bfa8      	it	ge
   1f612:	4610      	movge	r0, r2
   1f614:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   1f618:	68ea      	ldr	r2, [r5, #12]
   1f61a:	4283      	cmp	r3, r0
   1f61c:	6892      	ldr	r2, [r2, #8]
   1f61e:	db06      	blt.n	1f62e <uarte_nrfx_fifo_fill+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f620:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1f622:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1f626:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f62a:	60a3      	str	r3, [r4, #8]
}
   1f62c:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1f62e:	5cce      	ldrb	r6, [r1, r3]
   1f630:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   1f632:	3301      	adds	r3, #1
   1f634:	e7f0      	b.n	1f618 <uarte_nrfx_fifo_fill+0x24>

0001f636 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1f636:	6843      	ldr	r3, [r0, #4]
   1f638:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f63a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f63e:	b153      	cbz	r3, 1f656 <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1f640:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f642:	2000      	movs	r0, #0
   1f644:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   1f648:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f64c:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1f64e:	7d1b      	ldrb	r3, [r3, #20]
   1f650:	700b      	strb	r3, [r1, #0]
   1f652:	6010      	str	r0, [r2, #0]
}
   1f654:	4770      	bx	lr
	int num_rx = 0;
   1f656:	4618      	mov	r0, r3
}
   1f658:	4770      	bx	lr

0001f65a <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   1f65a:	2100      	movs	r1, #0
   1f65c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1f65e:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   1f660:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   1f662:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   1f664:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   1f666:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f66a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f66e:	4770      	bx	lr

0001f670 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1f670:	2201      	movs	r2, #1
   1f672:	68c3      	ldr	r3, [r0, #12]
   1f674:	68db      	ldr	r3, [r3, #12]
   1f676:	739a      	strb	r2, [r3, #14]
}
   1f678:	4770      	bx	lr

0001f67a <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   1f67a:	68c3      	ldr	r3, [r0, #12]
   1f67c:	68db      	ldr	r3, [r3, #12]
   1f67e:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1f680:	b94b      	cbnz	r3, 1f696 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   1f682:	6843      	ldr	r3, [r0, #4]
   1f684:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f686:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   1f68a:	b128      	cbz	r0, 1f698 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   1f68c:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   1f690:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1f694:	4770      	bx	lr
   1f696:	2000      	movs	r0, #0
}
   1f698:	4770      	bx	lr

0001f69a <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1f69a:	6843      	ldr	r3, [r0, #4]
   1f69c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f69e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1f6a2:	3800      	subs	r0, #0
   1f6a4:	bf18      	it	ne
   1f6a6:	2001      	movne	r0, #1
   1f6a8:	4770      	bx	lr

0001f6aa <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1f6aa:	2210      	movs	r2, #16
	return config->uarte_regs;
   1f6ac:	6843      	ldr	r3, [r0, #4]
   1f6ae:	681b      	ldr	r3, [r3, #0]
   1f6b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f6b4:	4770      	bx	lr

0001f6b6 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1f6b6:	2210      	movs	r2, #16
	return config->uarte_regs;
   1f6b8:	6843      	ldr	r3, [r0, #4]
   1f6ba:	681b      	ldr	r3, [r3, #0]
   1f6bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1f6c0:	4770      	bx	lr

0001f6c2 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1f6c2:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1f6c6:	6843      	ldr	r3, [r0, #4]
   1f6c8:	681b      	ldr	r3, [r3, #0]
   1f6ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f6ce:	4770      	bx	lr

0001f6d0 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1f6d0:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1f6d4:	6843      	ldr	r3, [r0, #4]
   1f6d6:	681b      	ldr	r3, [r3, #0]
   1f6d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1f6dc:	4770      	bx	lr

0001f6de <uarte_nrfx_irq_update>:
}
   1f6de:	2001      	movs	r0, #1
   1f6e0:	4770      	bx	lr

0001f6e2 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1f6e2:	68c3      	ldr	r3, [r0, #12]
   1f6e4:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1f6e6:	e9c3 1200 	strd	r1, r2, [r3]
}
   1f6ea:	4770      	bx	lr

0001f6ec <uarte_nrfx_irq_is_pending>:
{
   1f6ec:	b508      	push	{r3, lr}
	return config->uarte_regs;
   1f6ee:	6843      	ldr	r3, [r0, #4]
{
   1f6f0:	4602      	mov	r2, r0
	return config->uarte_regs;
   1f6f2:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1f6f4:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1f6f8:	05db      	lsls	r3, r3, #23
   1f6fa:	d405      	bmi.n	1f708 <uarte_nrfx_irq_is_pending+0x1c>
   1f6fc:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1f700:	f010 0010 	ands.w	r0, r0, #16
   1f704:	d106      	bne.n	1f714 <uarte_nrfx_irq_is_pending+0x28>
}
   1f706:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1f708:	f7ff ffb7 	bl	1f67a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   1f70c:	2800      	cmp	r0, #0
   1f70e:	d0f5      	beq.n	1f6fc <uarte_nrfx_irq_is_pending+0x10>
		||
   1f710:	2001      	movs	r0, #1
   1f712:	e7f8      	b.n	1f706 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1f714:	4610      	mov	r0, r2
   1f716:	f7ff ffc0 	bl	1f69a <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1f71a:	3800      	subs	r0, #0
   1f71c:	bf18      	it	ne
   1f71e:	2001      	movne	r0, #1
   1f720:	e7f1      	b.n	1f706 <uarte_nrfx_irq_is_pending+0x1a>

0001f722 <uarte_nrfx_poll_out>:
{
   1f722:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1f726:	6843      	ldr	r3, [r0, #4]
{
   1f728:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1f72c:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f72e:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   1f730:	f000 ffc2 	bl	206b8 <k_is_in_isr>
   1f734:	bb98      	cbnz	r0, 1f79e <uarte_nrfx_poll_out+0x7c>
		lock = &data->poll_out_lock;
   1f736:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f738:	f04f 0801 	mov.w	r8, #1
   1f73c:	f106 0710 	add.w	r7, r6, #16
   1f740:	e8d7 3fef 	ldaex	r3, [r7]
   1f744:	2b00      	cmp	r3, #0
   1f746:	d103      	bne.n	1f750 <uarte_nrfx_poll_out+0x2e>
   1f748:	e8c7 8fe2 	stlex	r2, r8, [r7]
   1f74c:	2a00      	cmp	r2, #0
   1f74e:	d1f7      	bne.n	1f740 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   1f750:	d007      	beq.n	1f762 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   1f752:	2021      	movs	r0, #33	; 0x21
   1f754:	2100      	movs	r1, #0
   1f756:	3d01      	subs	r5, #1
   1f758:	f7fd fa6e 	bl	1cc38 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1f75c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1f760:	d1ee      	bne.n	1f740 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f762:	2300      	movs	r3, #0
   1f764:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1f768:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1f76c:	f10d 0307 	add.w	r3, sp, #7
   1f770:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1f774:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f776:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   1f77a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f77e:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f780:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   1f784:	b923      	cbnz	r3, 1f790 <uarte_nrfx_poll_out+0x6e>
   1f786:	2001      	movs	r0, #1
   1f788:	f000 fd58 	bl	2023c <nrfx_busy_wait>
   1f78c:	3d01      	subs	r5, #1
   1f78e:	d1f7      	bne.n	1f780 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f790:	2301      	movs	r3, #1
   1f792:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   1f794:	2300      	movs	r3, #0
   1f796:	6133      	str	r3, [r6, #16]
}
   1f798:	b002      	add	sp, #8
   1f79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   1f79e:	2301      	movs	r3, #1
   1f7a0:	6133      	str	r3, [r6, #16]
   1f7a2:	e7de      	b.n	1f762 <uarte_nrfx_poll_out+0x40>

0001f7a4 <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   1f7a4:	2000      	movs	r0, #0
   1f7a6:	4770      	bx	lr

0001f7a8 <entropy_cc3xx_rng_get_entropy>:
{
   1f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f7ac:	460f      	mov	r7, r1
   1f7ae:	4614      	mov	r4, r2
	size_t offset = 0;
   1f7b0:	2600      	movs	r6, #0
	int res = -EINVAL;
   1f7b2:	f06f 0515 	mvn.w	r5, #21
{
   1f7b6:	b0a6      	sub	sp, #152	; 0x98
	while (length > 0) {
   1f7b8:	b91c      	cbnz	r4, 1f7c2 <entropy_cc3xx_rng_get_entropy+0x1a>
}
   1f7ba:	4628      	mov	r0, r5
   1f7bc:	b026      	add	sp, #152	; 0x98
   1f7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   1f7c2:	2190      	movs	r1, #144	; 0x90
   1f7c4:	aa01      	add	r2, sp, #4
   1f7c6:	a802      	add	r0, sp, #8
   1f7c8:	f7fe fe93 	bl	1e4f2 <spm_request_random_number>
		if (res < 0) {
   1f7cc:	1e05      	subs	r5, r0, #0
   1f7ce:	dbf4      	blt.n	1f7ba <entropy_cc3xx_rng_get_entropy+0x12>
		if (olen != sizeof(spm_buf)) {
   1f7d0:	9b01      	ldr	r3, [sp, #4]
   1f7d2:	2b90      	cmp	r3, #144	; 0x90
   1f7d4:	d10e      	bne.n	1f7f4 <entropy_cc3xx_rng_get_entropy+0x4c>
		to_copy = MIN(length, sizeof(spm_buf));
   1f7d6:	2c90      	cmp	r4, #144	; 0x90
   1f7d8:	46a0      	mov	r8, r4
   1f7da:	bf28      	it	cs
   1f7dc:	f04f 0890 	movcs.w	r8, #144	; 0x90
		memcpy(buffer + offset, spm_buf, to_copy);
   1f7e0:	19b8      	adds	r0, r7, r6
   1f7e2:	4642      	mov	r2, r8
   1f7e4:	a902      	add	r1, sp, #8
		length -= to_copy;
   1f7e6:	eba4 0408 	sub.w	r4, r4, r8
		memcpy(buffer + offset, spm_buf, to_copy);
   1f7ea:	f7ff f854 	bl	1e896 <memcpy>
		length -= to_copy;
   1f7ee:	b2a4      	uxth	r4, r4
		offset += to_copy;
   1f7f0:	4446      	add	r6, r8
   1f7f2:	e7e1      	b.n	1f7b8 <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   1f7f4:	f06f 0515 	mvn.w	r5, #21
   1f7f8:	e7df      	b.n	1f7ba <entropy_cc3xx_rng_get_entropy+0x12>

0001f7fa <z_errno>:
   1f7fa:	f7fc bb5f 	b.w	1bebc <z_impl_z_errno>

0001f7fe <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1f7fe:	4668      	mov	r0, sp
   1f800:	f020 0107 	bic.w	r1, r0, #7
   1f804:	468d      	mov	sp, r1
   1f806:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   1f808:	f7f4 fac6 	bl	13d98 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1f80c:	f7f0 f984 	bl	fb18 <_arch_isr_direct_pm>
   1f810:	f7f0 fcf6 	bl	10200 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   1f814:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1f818:	4685      	mov	sp, r0
   1f81a:	4770      	bx	lr

0001f81c <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1f81c:	4668      	mov	r0, sp
   1f81e:	f020 0107 	bic.w	r1, r0, #7
   1f822:	468d      	mov	sp, r1
   1f824:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   1f826:	f7f4 fe5d 	bl	144e4 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   1f82a:	f7f0 f975 	bl	fb18 <_arch_isr_direct_pm>
   1f82e:	f7f0 fce7 	bl	10200 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   1f832:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1f836:	4685      	mov	sp, r0
   1f838:	4770      	bx	lr

0001f83a <trace_task_create>:
{
   1f83a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   1f83c:	201d      	movs	r0, #29
   1f83e:	2200      	movs	r2, #0
   1f840:	2106      	movs	r1, #6
   1f842:	f7f0 f953 	bl	faec <z_arm_irq_priority_set>
}
   1f846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   1f84a:	201d      	movs	r0, #29
   1f84c:	f7f0 b930 	b.w	fab0 <arch_irq_enable>

0001f850 <read_task_create>:
{
   1f850:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   1f852:	201c      	movs	r0, #28
   1f854:	2200      	movs	r2, #0
   1f856:	2106      	movs	r1, #6
   1f858:	f7f0 f948 	bl	faec <z_arm_irq_priority_set>
}
   1f85c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   1f860:	201c      	movs	r0, #28
   1f862:	f7f0 b925 	b.w	fab0 <arch_irq_enable>

0001f866 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   1f866:	2000      	movs	r0, #0
   1f868:	4770      	bx	lr

0001f86a <z_to_nrf_flags>:
{
   1f86a:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   1f86c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1f870:	bf18      	it	ne
   1f872:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   1f874:	079a      	lsls	r2, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   1f876:	bf48      	it	mi
   1f878:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   1f87c:	06db      	lsls	r3, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   1f87e:	bf48      	it	mi
   1f880:	f040 0020 	orrmi.w	r0, r0, #32
}
   1f884:	4770      	bx	lr

0001f886 <z_to_nrf_family>:
	switch (z_family) {
   1f886:	2806      	cmp	r0, #6
   1f888:	d80a      	bhi.n	1f8a0 <z_to_nrf_family+0x1a>
   1f88a:	b198      	cbz	r0, 1f8b4 <z_to_nrf_family+0x2e>
   1f88c:	3801      	subs	r0, #1
   1f88e:	2805      	cmp	r0, #5
   1f890:	d810      	bhi.n	1f8b4 <z_to_nrf_family+0x2e>
   1f892:	e8df f000 	tbb	[pc, r0]
   1f896:	0312      	.short	0x0312
   1f898:	0b0f0f0d 	.word	0x0b0f0f0d
   1f89c:	200a      	movs	r0, #10
   1f89e:	4770      	bx	lr
   1f8a0:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   1f8a2:	bf14      	ite	ne
   1f8a4:	f06f 002e 	mvnne.w	r0, #46	; 0x2e
   1f8a8:	2066      	moveq	r0, #102	; 0x66
   1f8aa:	4770      	bx	lr
		return NRF_AF_LOCAL;
   1f8ac:	2001      	movs	r0, #1
   1f8ae:	4770      	bx	lr
		return NRF_AF_PACKET;
   1f8b0:	2005      	movs	r0, #5
   1f8b2:	4770      	bx	lr
		return -EAFNOSUPPORT;
   1f8b4:	f06f 002e 	mvn.w	r0, #46	; 0x2e
   1f8b8:	4770      	bx	lr
		return NRF_AF_INET;
   1f8ba:	2002      	movs	r0, #2
}
   1f8bc:	4770      	bx	lr

0001f8be <z_to_nrf_protocol>:
	switch (proto) {
   1f8be:	f240 1311 	movw	r3, #273	; 0x111
   1f8c2:	4298      	cmp	r0, r3
   1f8c4:	d023      	beq.n	1f90e <z_to_nrf_protocol+0x50>
   1f8c6:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   1f8ca:	da11      	bge.n	1f8f0 <z_to_nrf_protocol+0x32>
   1f8cc:	2811      	cmp	r0, #17
   1f8ce:	d021      	beq.n	1f914 <z_to_nrf_protocol+0x56>
   1f8d0:	dc06      	bgt.n	1f8e0 <z_to_nrf_protocol+0x22>
   1f8d2:	b300      	cbz	r0, 1f916 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   1f8d4:	2806      	cmp	r0, #6
   1f8d6:	bf14      	ite	ne
   1f8d8:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1f8dc:	2001      	moveq	r0, #1
   1f8de:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   1f8e0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1f8e4:	bf14      	ite	ne
   1f8e6:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1f8ea:	f44f 7082 	moveq.w	r0, #260	; 0x104
   1f8ee:	4770      	bx	lr
	switch (proto) {
   1f8f0:	f240 2302 	movw	r3, #514	; 0x202
   1f8f4:	4298      	cmp	r0, r3
   1f8f6:	d00e      	beq.n	1f916 <z_to_nrf_protocol+0x58>
   1f8f8:	f240 2303 	movw	r3, #515	; 0x203
   1f8fc:	4298      	cmp	r0, r3
   1f8fe:	d00a      	beq.n	1f916 <z_to_nrf_protocol+0x58>
   1f900:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   1f904:	4298      	cmp	r0, r3
   1f906:	bf18      	it	ne
   1f908:	f06f 002a 	mvnne.w	r0, #42	; 0x2a
   1f90c:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   1f90e:	f44f 7087 	mov.w	r0, #270	; 0x10e
   1f912:	4770      	bx	lr
	switch (proto) {
   1f914:	2002      	movs	r0, #2
}
   1f916:	4770      	bx	lr

0001f918 <nrf91_socket_is_supported>:
}
   1f918:	2001      	movs	r0, #1
   1f91a:	4770      	bx	lr

0001f91c <nrf91_bsdlib_socket_offload_init>:
}
   1f91c:	2000      	movs	r0, #0
   1f91e:	4770      	bx	lr

0001f920 <z_errno>:
   1f920:	f7fc bacc 	b.w	1bebc <z_impl_z_errno>

0001f924 <nrf91_socket_offload_getsockopt>:
{
   1f924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f928:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   1f92a:	2300      	movs	r3, #0
{
   1f92c:	b086      	sub	sp, #24
   1f92e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   1f932:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1f936:	f8d8 3000 	ldr.w	r3, [r8]
{
   1f93a:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   1f93c:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   1f93e:	f240 2302 	movw	r3, #514	; 0x202
   1f942:	4299      	cmp	r1, r3
{
   1f944:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   1f946:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   1f94a:	d005      	beq.n	1f958 <nrf91_socket_offload_getsockopt+0x34>
   1f94c:	dc30      	bgt.n	1f9b0 <nrf91_socket_offload_getsockopt+0x8c>
   1f94e:	2901      	cmp	r1, #1
   1f950:	d002      	beq.n	1f958 <nrf91_socket_offload_getsockopt+0x34>
   1f952:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1f956:	d13c      	bne.n	1f9d2 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1f958:	4631      	mov	r1, r6
   1f95a:	4620      	mov	r0, r4
   1f95c:	aa02      	add	r2, sp, #8
   1f95e:	f7f1 ff2d 	bl	117bc <z_to_nrf_optname>
   1f962:	2800      	cmp	r0, #0
   1f964:	db35      	blt.n	1f9d2 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   1f966:	2c01      	cmp	r4, #1
   1f968:	d126      	bne.n	1f9b8 <nrf91_socket_offload_getsockopt+0x94>
   1f96a:	f1a6 0314 	sub.w	r3, r6, #20
   1f96e:	2b01      	cmp	r3, #1
   1f970:	d822      	bhi.n	1f9b8 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   1f972:	2308      	movs	r3, #8
   1f974:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   1f976:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1f978:	aa03      	add	r2, sp, #12
   1f97a:	4638      	mov	r0, r7
   1f97c:	9200      	str	r2, [sp, #0]
   1f97e:	4621      	mov	r1, r4
   1f980:	9a02      	ldr	r2, [sp, #8]
   1f982:	f7fa fbab 	bl	1a0dc <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   1f986:	4607      	mov	r7, r0
   1f988:	b970      	cbnz	r0, 1f9a8 <nrf91_socket_offload_getsockopt+0x84>
   1f98a:	b16d      	cbz	r5, 1f9a8 <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   1f98c:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   1f98e:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   1f990:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   1f994:	d108      	bne.n	1f9a8 <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   1f996:	2e04      	cmp	r6, #4
   1f998:	d110      	bne.n	1f9bc <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   1f99a:	6828      	ldr	r0, [r5, #0]
   1f99c:	f7f1 fd64 	bl	11468 <bsd_os_errno_set>
				*(int *)optval = errno;
   1f9a0:	f7ff ffbe 	bl	1f920 <z_errno>
   1f9a4:	6803      	ldr	r3, [r0, #0]
   1f9a6:	602b      	str	r3, [r5, #0]
}
   1f9a8:	4638      	mov	r0, r7
   1f9aa:	b006      	add	sp, #24
   1f9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1f9b0:	f240 2303 	movw	r3, #515	; 0x203
   1f9b4:	4299      	cmp	r1, r3
   1f9b6:	e7ce      	b.n	1f956 <nrf91_socket_offload_getsockopt+0x32>
   1f9b8:	462b      	mov	r3, r5
   1f9ba:	e7dd      	b.n	1f978 <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   1f9bc:	3e14      	subs	r6, #20
   1f9be:	2e01      	cmp	r6, #1
   1f9c0:	d8f2      	bhi.n	1f9a8 <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   1f9c2:	9b04      	ldr	r3, [sp, #16]
   1f9c4:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   1f9c6:	9b05      	ldr	r3, [sp, #20]
   1f9c8:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   1f9ca:	2308      	movs	r3, #8
   1f9cc:	f8c8 3000 	str.w	r3, [r8]
   1f9d0:	e7ea      	b.n	1f9a8 <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   1f9d2:	f7ff ffa5 	bl	1f920 <z_errno>
   1f9d6:	232a      	movs	r3, #42	; 0x2a
	return retval;
   1f9d8:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   1f9dc:	6003      	str	r3, [r0, #0]
	return retval;
   1f9de:	e7e3      	b.n	1f9a8 <nrf91_socket_offload_getsockopt+0x84>

0001f9e0 <nrf91_socket_offload_recvfrom>:
{
   1f9e0:	b570      	push	{r4, r5, r6, lr}
	int sd = OBJ_TO_SD(obj);
   1f9e2:	1e45      	subs	r5, r0, #1
{
   1f9e4:	b08e      	sub	sp, #56	; 0x38
   1f9e6:	4618      	mov	r0, r3
   1f9e8:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   1f9ec:	9203      	str	r2, [sp, #12]
   1f9ee:	f7ff ff3c 	bl	1f86a <z_to_nrf_flags>
	if (from == NULL) {
   1f9f2:	9a03      	ldr	r2, [sp, #12]
   1f9f4:	4603      	mov	r3, r0
   1f9f6:	b944      	cbnz	r4, 1fa0a <nrf91_socket_offload_recvfrom+0x2a>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1f9f8:	4628      	mov	r0, r5
   1f9fa:	e9cd 4400 	strd	r4, r4, [sp]
   1f9fe:	f7fa faeb 	bl	19fd8 <nrf_recvfrom>
   1fa02:	4605      	mov	r5, r0
}
   1fa04:	4628      	mov	r0, r5
   1fa06:	b00e      	add	sp, #56	; 0x38
   1fa08:	bd70      	pop	{r4, r5, r6, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   1fa0a:	2024      	movs	r0, #36	; 0x24
   1fa0c:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1fa0e:	a804      	add	r0, sp, #16
   1fa10:	9001      	str	r0, [sp, #4]
   1fa12:	a805      	add	r0, sp, #20
   1fa14:	9000      	str	r0, [sp, #0]
   1fa16:	4628      	mov	r0, r5
   1fa18:	f7fa fade 	bl	19fd8 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   1fa1c:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   1fa1e:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   1fa20:	2b02      	cmp	r3, #2
   1fa22:	d109      	bne.n	1fa38 <nrf91_socket_offload_recvfrom+0x58>
	ptr->sin_port = nrf_in->sin_port;
   1fa24:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1fa28:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   1fa2a:	2301      	movs	r3, #1
   1fa2c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1fa2e:	9b08      	ldr	r3, [sp, #32]
   1fa30:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   1fa32:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   1fa34:	6033      	str	r3, [r6, #0]
	return retval;
   1fa36:	e7e5      	b.n	1fa04 <nrf91_socket_offload_recvfrom+0x24>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   1fa38:	2b0a      	cmp	r3, #10
   1fa3a:	d1e3      	bne.n	1fa04 <nrf91_socket_offload_recvfrom+0x24>
	ptr->sin6_port = nrf_in->sin6_port;
   1fa3c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	ptr->sin6_family = AF_INET6;
   1fa40:	4620      	mov	r0, r4
	ptr->sin6_port = nrf_in->sin6_port;
   1fa42:	8063      	strh	r3, [r4, #2]
	ptr->sin6_family = AF_INET6;
   1fa44:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1fa46:	2210      	movs	r2, #16
	ptr->sin6_family = AF_INET6;
   1fa48:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1fa4c:	a909      	add	r1, sp, #36	; 0x24
   1fa4e:	f7fe ff22 	bl	1e896 <memcpy>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   1fa52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fa54:	7523      	strb	r3, [r4, #20]
			*fromlen = sizeof(struct sockaddr_in6);
   1fa56:	2318      	movs	r3, #24
   1fa58:	e7ec      	b.n	1fa34 <nrf91_socket_offload_recvfrom+0x54>

0001fa5a <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   1fa5a:	2300      	movs	r3, #0
{
   1fa5c:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   1fa5e:	e9cd 3300 	strd	r3, r3, [sp]
   1fa62:	f7ff ffbd 	bl	1f9e0 <nrf91_socket_offload_recvfrom>
}
   1fa66:	b003      	add	sp, #12
   1fa68:	f85d fb04 	ldr.w	pc, [sp], #4

0001fa6c <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   1fa6c:	3801      	subs	r0, #1
   1fa6e:	f7fa bae1 	b.w	1a034 <nrf_listen>

0001fa72 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   1fa72:	3801      	subs	r0, #1
   1fa74:	f7fa ba86 	b.w	19f84 <nrf_close>

0001fa78 <nrf91_socket_offload_freeaddrinfo>:
{
   1fa78:	b538      	push	{r3, r4, r5, lr}
   1fa7a:	4604      	mov	r4, r0
	while (next != NULL) {
   1fa7c:	b904      	cbnz	r4, 1fa80 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   1fa7e:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   1fa80:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   1fa82:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   1fa84:	f001 f84e 	bl	20b24 <k_free>
		k_free(this);
   1fa88:	4620      	mov	r0, r4
   1fa8a:	f001 f84b 	bl	20b24 <k_free>
		next = next->ai_next;
   1fa8e:	462c      	mov	r4, r5
   1fa90:	e7f4      	b.n	1fa7c <nrf91_socket_offload_freeaddrinfo+0x4>

0001fa92 <z_to_nrf_addrinfo_hints>:
{
   1fa92:	b538      	push	{r3, r4, r5, lr}
   1fa94:	460c      	mov	r4, r1
   1fa96:	4605      	mov	r5, r0
	memset(nrf_out, 0, sizeof(struct nrf_addrinfo));
   1fa98:	2220      	movs	r2, #32
   1fa9a:	2100      	movs	r1, #0
   1fa9c:	4620      	mov	r0, r4
   1fa9e:	f7fe ff25 	bl	1e8ec <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   1faa2:	2300      	movs	r3, #0
   1faa4:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1faa6:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   1faa8:	2b03      	cmp	r3, #3
   1faaa:	d003      	beq.n	1fab4 <z_to_nrf_addrinfo_hints+0x22>
   1faac:	2b04      	cmp	r3, #4
   1faae:	bf08      	it	eq
   1fab0:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   1fab4:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   1fab6:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   1fab8:	f7ff fee5 	bl	1f886 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   1fabc:	f110 0f2f 	cmn.w	r0, #47	; 0x2f
   1fac0:	d00b      	beq.n	1fada <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   1fac2:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1fac4:	6928      	ldr	r0, [r5, #16]
   1fac6:	f7ff fefa 	bl	1f8be <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1faca:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   1face:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   1fad0:	d003      	beq.n	1fada <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   1fad2:	69e8      	ldr	r0, [r5, #28]
   1fad4:	b108      	cbz	r0, 1fada <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   1fad6:	61a0      	str	r0, [r4, #24]
	return 0;
   1fad8:	2000      	movs	r0, #0
}
   1fada:	bd38      	pop	{r3, r4, r5, pc}

0001fadc <nrf91_socket_offload_connect>:
{
   1fadc:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1fade:	880b      	ldrh	r3, [r1, #0]
{
   1fae0:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1fae2:	2b01      	cmp	r3, #1
{
   1fae4:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   1fae6:	f100 35ff 	add.w	r5, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   1faea:	d10f      	bne.n	1fb0c <nrf91_socket_offload_connect+0x30>
	nrf_out->sin_port = ptr->sin_port;
   1faec:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1faee:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1faf0:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1faf4:	2302      	movs	r3, #2
   1faf6:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1faf8:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1fafa:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1fafe:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1fb00:	4628      	mov	r0, r5
   1fb02:	a901      	add	r1, sp, #4
   1fb04:	f7fa fa84 	bl	1a010 <nrf_connect>
}
   1fb08:	b00a      	add	sp, #40	; 0x28
   1fb0a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1fb0c:	2b02      	cmp	r3, #2
   1fb0e:	d110      	bne.n	1fb32 <nrf91_socket_offload_connect+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1fb10:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1fb12:	2624      	movs	r6, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1fb14:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1fb18:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1fb1a:	2210      	movs	r2, #16
   1fb1c:	3104      	adds	r1, #4
   1fb1e:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1fb20:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1fb22:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1fb26:	f7fe feb6 	bl	1e896 <memcpy>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1fb2a:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1fb2c:	4632      	mov	r2, r6
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1fb2e:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   1fb30:	e7e6      	b.n	1fb00 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   1fb32:	4628      	mov	r0, r5
   1fb34:	f7fa fa6c 	bl	1a010 <nrf_connect>
		if (retval < 0) {
   1fb38:	2800      	cmp	r0, #0
   1fb3a:	dae5      	bge.n	1fb08 <nrf91_socket_offload_connect+0x2c>
	errno = ENOTSUP;
   1fb3c:	f7ff fef0 	bl	1f920 <z_errno>
   1fb40:	2323      	movs	r3, #35	; 0x23
   1fb42:	6003      	str	r3, [r0, #0]
   1fb44:	f04f 30ff 	mov.w	r0, #4294967295
   1fb48:	e7de      	b.n	1fb08 <nrf91_socket_offload_connect+0x2c>

0001fb4a <nrf91_socket_offload_getaddrinfo>:
{
   1fb4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb4e:	4614      	mov	r4, r2
   1fb50:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   1fb52:	2100      	movs	r1, #0
{
   1fb54:	b093      	sub	sp, #76	; 0x4c
   1fb56:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1fb58:	2220      	movs	r2, #32
   1fb5a:	a802      	add	r0, sp, #8
{
   1fb5c:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   1fb5e:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   1fb60:	f7fe fec4 	bl	1e8ec <memset>
	if (hints != NULL) {
   1fb64:	b194      	cbz	r4, 1fb8c <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   1fb66:	4620      	mov	r0, r4
   1fb68:	a902      	add	r1, sp, #8
   1fb6a:	f7ff ff92 	bl	1fa92 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   1fb6e:	f110 0f2b 	cmn.w	r0, #43	; 0x2b
   1fb72:	f000 80e0 	beq.w	1fd36 <nrf91_socket_offload_getaddrinfo+0x1ec>
		} else if (error == -EAFNOSUPPORT) {
   1fb76:	302f      	adds	r0, #47	; 0x2f
   1fb78:	f000 80e0 	beq.w	1fd3c <nrf91_socket_offload_getaddrinfo+0x1f2>
		if (hints->ai_next != NULL) {
   1fb7c:	6820      	ldr	r0, [r4, #0]
   1fb7e:	b120      	cbz	r0, 1fb8a <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   1fb80:	ac0a      	add	r4, sp, #40	; 0x28
   1fb82:	4621      	mov	r1, r4
   1fb84:	f7ff ff85 	bl	1fa92 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   1fb88:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   1fb8a:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   1fb8c:	4628      	mov	r0, r5
   1fb8e:	4622      	mov	r2, r4
   1fb90:	4631      	mov	r1, r6
   1fb92:	ab01      	add	r3, sp, #4
   1fb94:	f7fa fabe 	bl	1a114 <nrf_getaddrinfo>
	if (retval != 0) {
   1fb98:	4605      	mov	r5, r0
   1fb9a:	b1f8      	cbz	r0, 1fbdc <nrf91_socket_offload_getaddrinfo+0x92>
	switch (nrf_error) {
   1fb9c:	282f      	cmp	r0, #47	; 0x2f
   1fb9e:	f000 80d0 	beq.w	1fd42 <nrf91_socket_offload_getaddrinfo+0x1f8>
   1fba2:	dc0c      	bgt.n	1fbbe <nrf91_socket_offload_getaddrinfo+0x74>
   1fba4:	280c      	cmp	r0, #12
   1fba6:	f000 80cf 	beq.w	1fd48 <nrf91_socket_offload_getaddrinfo+0x1fe>
		return DNS_EAI_AGAIN;
   1fbaa:	2823      	cmp	r0, #35	; 0x23
   1fbac:	bf14      	ite	ne
   1fbae:	f06f 050a 	mvnne.w	r5, #10
   1fbb2:	f06f 0502 	mvneq.w	r5, #2
}
   1fbb6:	4628      	mov	r0, r5
   1fbb8:	b013      	add	sp, #76	; 0x4c
   1fbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (nrf_error) {
   1fbbe:	2833      	cmp	r0, #51	; 0x33
   1fbc0:	d006      	beq.n	1fbd0 <nrf91_socket_offload_getaddrinfo+0x86>
		return DNS_EAI_INPROGRESS;
   1fbc2:	2873      	cmp	r0, #115	; 0x73
   1fbc4:	bf14      	ite	ne
   1fbc6:	f06f 050a 	mvnne.w	r5, #10
   1fbca:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   1fbce:	e7f2      	b.n	1fbb6 <nrf91_socket_offload_getaddrinfo+0x6c>
		errno = ENETUNREACH;
   1fbd0:	f7ff fea6 	bl	1f920 <z_errno>
   1fbd4:	6005      	str	r5, [r0, #0]
		return DNS_EAI_SYSTEM;
   1fbd6:	f06f 050a 	mvn.w	r5, #10
   1fbda:	e7ec      	b.n	1fbb6 <nrf91_socket_offload_getaddrinfo+0x6c>
	struct zsock_addrinfo *latest_z_res = NULL;
   1fbdc:	4681      	mov	r9, r0
	z_out->ai_next = NULL;
   1fbde:	4682      	mov	sl, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   1fbe0:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   1fbe2:	f8c8 0000 	str.w	r0, [r8]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   1fbe6:	b91e      	cbnz	r6, 1fbf0 <nrf91_socket_offload_getaddrinfo+0xa6>
	nrf_freeaddrinfo(nrf_res);
   1fbe8:	9801      	ldr	r0, [sp, #4]
   1fbea:	f7fa fa95 	bl	1a118 <nrf_freeaddrinfo>
	return retval;
   1fbee:	e7e2      	b.n	1fbb6 <nrf91_socket_offload_getaddrinfo+0x6c>
					k_malloc(sizeof(struct zsock_addrinfo));
   1fbf0:	2050      	movs	r0, #80	; 0x50
   1fbf2:	f7fd fc33 	bl	1d45c <k_malloc>
		if (next_z_res == NULL) {
   1fbf6:	4604      	mov	r4, r0
   1fbf8:	2800      	cmp	r0, #0
   1fbfa:	f000 808f 	beq.w	1fd1c <nrf91_socket_offload_getaddrinfo+0x1d2>
	z_out->ai_socktype = nrf_in->ai_socktype;
   1fbfe:	68b3      	ldr	r3, [r6, #8]
	z_out->ai_next = NULL;
   1fc00:	f8c0 a000 	str.w	sl, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   1fc04:	60c3      	str	r3, [r0, #12]
	family = nrf_to_z_family(nrf_in->ai_family);
   1fc06:	6873      	ldr	r3, [r6, #4]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   1fc08:	f8c0 a01c 	str.w	sl, [r0, #28]
	switch (nrf_family) {
   1fc0c:	2b0a      	cmp	r3, #10
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   1fc0e:	f8c0 a004 	str.w	sl, [r0, #4]
	switch (nrf_family) {
   1fc12:	dc23      	bgt.n	1fc5c <nrf91_socket_offload_getaddrinfo+0x112>
   1fc14:	2b00      	cmp	r3, #0
   1fc16:	dd23      	ble.n	1fc60 <nrf91_socket_offload_getaddrinfo+0x116>
   1fc18:	1e5a      	subs	r2, r3, #1
   1fc1a:	2a09      	cmp	r2, #9
   1fc1c:	d820      	bhi.n	1fc60 <nrf91_socket_offload_getaddrinfo+0x116>
   1fc1e:	e8df f002 	tbb	[pc, r2]
   1fc22:	2905      	.short	0x2905
   1fc24:	1f251f1f 	.word	0x1f251f1f
   1fc28:	271f1f1f 	.word	0x271f1f1f
		return AF_LOCAL;
   1fc2c:	2206      	movs	r2, #6
	z_out->ai_family = family;
   1fc2e:	60a2      	str	r2, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1fc30:	68f2      	ldr	r2, [r6, #12]
	switch (proto) {
   1fc32:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1fc36:	d04c      	beq.n	1fcd2 <nrf91_socket_offload_getaddrinfo+0x188>
   1fc38:	dc26      	bgt.n	1fc88 <nrf91_socket_offload_getaddrinfo+0x13e>
   1fc3a:	2a02      	cmp	r2, #2
   1fc3c:	d04c      	beq.n	1fcd8 <nrf91_socket_offload_getaddrinfo+0x18e>
   1fc3e:	dc1d      	bgt.n	1fc7c <nrf91_socket_offload_getaddrinfo+0x132>
   1fc40:	b372      	cbz	r2, 1fca0 <nrf91_socket_offload_getaddrinfo+0x156>
   1fc42:	2a01      	cmp	r2, #1
   1fc44:	d04a      	beq.n	1fcdc <nrf91_socket_offload_getaddrinfo+0x192>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1fc46:	f06f 032a 	mvn.w	r3, #42	; 0x2a
   1fc4a:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   1fc4c:	2300      	movs	r3, #0
   1fc4e:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   1fc50:	4620      	mov	r0, r4
   1fc52:	f000 ff67 	bl	20b24 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   1fc56:	f06f 0506 	mvn.w	r5, #6
   1fc5a:	e061      	b.n	1fd20 <nrf91_socket_offload_getaddrinfo+0x1d6>
	switch (nrf_family) {
   1fc5c:	2b66      	cmp	r3, #102	; 0x66
   1fc5e:	d00b      	beq.n	1fc78 <nrf91_socket_offload_getaddrinfo+0x12e>
			k_free(next_z_res);
   1fc60:	4620      	mov	r0, r4
   1fc62:	f000 ff5f 	bl	20b24 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   1fc66:	f06f 0508 	mvn.w	r5, #8
   1fc6a:	e059      	b.n	1fd20 <nrf91_socket_offload_getaddrinfo+0x1d6>
		return AF_PACKET;
   1fc6c:	2203      	movs	r2, #3
   1fc6e:	e7de      	b.n	1fc2e <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_INET6;
   1fc70:	2202      	movs	r2, #2
   1fc72:	e7dc      	b.n	1fc2e <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (nrf_family) {
   1fc74:	2201      	movs	r2, #1
   1fc76:	e7da      	b.n	1fc2e <nrf91_socket_offload_getaddrinfo+0xe4>
		return AF_LTE;
   1fc78:	461a      	mov	r2, r3
   1fc7a:	e7d8      	b.n	1fc2e <nrf91_socket_offload_getaddrinfo+0xe4>
	switch (proto) {
   1fc7c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1fc80:	d1e1      	bne.n	1fc46 <nrf91_socket_offload_getaddrinfo+0xfc>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1fc82:	f44f 7281 	mov.w	r2, #258	; 0x102
   1fc86:	e00b      	b.n	1fca0 <nrf91_socket_offload_getaddrinfo+0x156>
	switch (proto) {
   1fc88:	f240 2102 	movw	r1, #514	; 0x202
   1fc8c:	428a      	cmp	r2, r1
   1fc8e:	d007      	beq.n	1fca0 <nrf91_socket_offload_getaddrinfo+0x156>
   1fc90:	f240 2103 	movw	r1, #515	; 0x203
   1fc94:	428a      	cmp	r2, r1
   1fc96:	d003      	beq.n	1fca0 <nrf91_socket_offload_getaddrinfo+0x156>
   1fc98:	f240 2101 	movw	r1, #513	; 0x201
   1fc9c:	428a      	cmp	r2, r1
   1fc9e:	d1d2      	bne.n	1fc46 <nrf91_socket_offload_getaddrinfo+0xfc>
	if (nrf_in->ai_family == NRF_AF_INET) {
   1fca0:	2b02      	cmp	r3, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1fca2:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   1fca4:	d11c      	bne.n	1fce0 <nrf91_socket_offload_getaddrinfo+0x196>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   1fca6:	2008      	movs	r0, #8
   1fca8:	f7fd fbd8 	bl	1d45c <k_malloc>
   1fcac:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1fcae:	b390      	cbz	r0, 1fd16 <nrf91_socket_offload_getaddrinfo+0x1cc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   1fcb0:	2308      	movs	r3, #8
   1fcb2:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   1fcb4:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   1fcb6:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1fcb8:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   1fcba:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   1fcbc:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   1fcbe:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   1fcc0:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   1fcc2:	f1b9 0f00 	cmp.w	r9, #0
   1fcc6:	d133      	bne.n	1fd30 <nrf91_socket_offload_getaddrinfo+0x1e6>
			*res = next_z_res;
   1fcc8:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   1fccc:	46a1      	mov	r9, r4
   1fcce:	69f6      	ldr	r6, [r6, #28]
   1fcd0:	e789      	b.n	1fbe6 <nrf91_socket_offload_getaddrinfo+0x9c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   1fcd2:	f240 1211 	movw	r2, #273	; 0x111
   1fcd6:	e7e3      	b.n	1fca0 <nrf91_socket_offload_getaddrinfo+0x156>
   1fcd8:	2211      	movs	r2, #17
   1fcda:	e7e1      	b.n	1fca0 <nrf91_socket_offload_getaddrinfo+0x156>
   1fcdc:	2206      	movs	r2, #6
   1fcde:	e7df      	b.n	1fca0 <nrf91_socket_offload_getaddrinfo+0x156>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   1fce0:	2b0a      	cmp	r3, #10
   1fce2:	d1b5      	bne.n	1fc50 <nrf91_socket_offload_getaddrinfo+0x106>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   1fce4:	2018      	movs	r0, #24
   1fce6:	f7fd fbb9 	bl	1d45c <k_malloc>
   1fcea:	4607      	mov	r7, r0
   1fcec:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   1fcee:	b190      	cbz	r0, 1fd16 <nrf91_socket_offload_getaddrinfo+0x1cc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1fcf0:	2318      	movs	r3, #24
			(const struct nrf_sockaddr_in6 *)nrf_in->ai_addr);
   1fcf2:	f8d6 b014 	ldr.w	fp, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   1fcf6:	6163      	str	r3, [r4, #20]
	ptr->sin6_port = nrf_in->sin6_port;
   1fcf8:	f8bb 3008 	ldrh.w	r3, [fp, #8]
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1fcfc:	2210      	movs	r2, #16
	ptr->sin6_port = nrf_in->sin6_port;
   1fcfe:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   1fd00:	2302      	movs	r3, #2
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1fd02:	eb0b 0102 	add.w	r1, fp, r2
	ptr->sin6_family = AF_INET6;
   1fd06:	f820 3b04 	strh.w	r3, [r0], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   1fd0a:	f7fe fdc4 	bl	1e896 <memcpy>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   1fd0e:	f8db 3020 	ldr.w	r3, [fp, #32]
   1fd12:	753b      	strb	r3, [r7, #20]
		} else if (error == -EAFNOSUPPORT) {
   1fd14:	e7d5      	b.n	1fcc2 <nrf91_socket_offload_getaddrinfo+0x178>
			k_free(next_z_res);
   1fd16:	4620      	mov	r0, r4
   1fd18:	f000 ff04 	bl	20b24 <k_free>
			retval = DNS_EAI_MEMORY;
   1fd1c:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   1fd20:	f8d8 0000 	ldr.w	r0, [r8]
   1fd24:	f7ff fea8 	bl	1fa78 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   1fd28:	2300      	movs	r3, #0
   1fd2a:	f8c8 3000 	str.w	r3, [r8]
   1fd2e:	e75b      	b.n	1fbe8 <nrf91_socket_offload_getaddrinfo+0x9e>
			latest_z_res->ai_next = next_z_res;
   1fd30:	f8c9 4000 	str.w	r4, [r9]
   1fd34:	e7ca      	b.n	1fccc <nrf91_socket_offload_getaddrinfo+0x182>
			return DNS_EAI_SOCKTYPE;
   1fd36:	f06f 0506 	mvn.w	r5, #6
   1fd3a:	e73c      	b.n	1fbb6 <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   1fd3c:	f06f 0508 	mvn.w	r5, #8
   1fd40:	e739      	b.n	1fbb6 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   1fd42:	f06f 0501 	mvn.w	r5, #1
   1fd46:	e736      	b.n	1fbb6 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   1fd48:	f06f 0509 	mvn.w	r5, #9
   1fd4c:	e733      	b.n	1fbb6 <nrf91_socket_offload_getaddrinfo+0x6c>

0001fd4e <nrf91_socket_offload_sendto>:
{
   1fd4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fd52:	b08d      	sub	sp, #52	; 0x34
   1fd54:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1fd56:	460e      	mov	r6, r1
   1fd58:	4617      	mov	r7, r2
   1fd5a:	4698      	mov	r8, r3
	int sd = OBJ_TO_SD(obj);
   1fd5c:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   1fd5e:	b96c      	cbnz	r4, 1fd7c <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   1fd60:	4618      	mov	r0, r3
   1fd62:	f7ff fd82 	bl	1f86a <z_to_nrf_flags>
   1fd66:	4603      	mov	r3, r0
   1fd68:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1fd6c:	463a      	mov	r2, r7
   1fd6e:	4631      	mov	r1, r6
   1fd70:	4628      	mov	r0, r5
   1fd72:	f7fa f915 	bl	19fa0 <nrf_sendto>
}
   1fd76:	b00d      	add	sp, #52	; 0x34
   1fd78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   1fd7c:	8823      	ldrh	r3, [r4, #0]
   1fd7e:	2b01      	cmp	r3, #1
   1fd80:	d111      	bne.n	1fda6 <nrf91_socket_offload_sendto+0x58>
	nrf_out->sin_port = ptr->sin_port;
   1fd82:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1fd84:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   1fd86:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   1fd8a:	2302      	movs	r3, #2
   1fd8c:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1fd8e:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1fd90:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1fd92:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1fd94:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   1fd98:	f7ff fd67 	bl	1f86a <z_to_nrf_flags>
   1fd9c:	4603      	mov	r3, r0
   1fd9e:	9101      	str	r1, [sp, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1fda0:	aa03      	add	r2, sp, #12
   1fda2:	9200      	str	r2, [sp, #0]
   1fda4:	e7e2      	b.n	1fd6c <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   1fda6:	2b02      	cmp	r3, #2
   1fda8:	d116      	bne.n	1fdd8 <nrf91_socket_offload_sendto+0x8a>
	nrf_out->sin6_port = ptr->sin6_port;
   1fdaa:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1fdac:	f04f 0924 	mov.w	r9, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1fdb0:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin6_family = NRF_AF_INET6;
   1fdb4:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1fdb6:	2210      	movs	r2, #16
   1fdb8:	1d21      	adds	r1, r4, #4
   1fdba:	a807      	add	r0, sp, #28
	nrf_out->sin6_family = NRF_AF_INET6;
   1fdbc:	9304      	str	r3, [sp, #16]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1fdbe:	f88d 900c 	strb.w	r9, [sp, #12]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1fdc2:	f7fe fd68 	bl	1e896 <memcpy>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1fdc6:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1fdc8:	4640      	mov	r0, r8
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1fdca:	930b      	str	r3, [sp, #44]	; 0x2c
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   1fdcc:	f7ff fd4d 	bl	1f86a <z_to_nrf_flags>
   1fdd0:	f8cd 9004 	str.w	r9, [sp, #4]
   1fdd4:	4603      	mov	r3, r0
   1fdd6:	e7e3      	b.n	1fda0 <nrf91_socket_offload_sendto+0x52>
	errno = ENOTSUP;
   1fdd8:	f7ff fda2 	bl	1f920 <z_errno>
   1fddc:	2323      	movs	r3, #35	; 0x23
   1fdde:	6003      	str	r3, [r0, #0]
	return retval;
   1fde0:	f04f 30ff 	mov.w	r0, #4294967295
   1fde4:	e7c7      	b.n	1fd76 <nrf91_socket_offload_sendto+0x28>

0001fde6 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   1fde6:	2300      	movs	r3, #0
{
   1fde8:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   1fdea:	e9cd 3300 	strd	r3, r3, [sp]
   1fdee:	f7ff ffae 	bl	1fd4e <nrf91_socket_offload_sendto>
}
   1fdf2:	b003      	add	sp, #12
   1fdf4:	f85d fb04 	ldr.w	pc, [sp], #4

0001fdf8 <nrf91_socket_offload_setsockopt>:
{
   1fdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fdfc:	461e      	mov	r6, r3
	switch (z_in_level) {
   1fdfe:	f240 2302 	movw	r3, #514	; 0x202
{
   1fe02:	b086      	sub	sp, #24
	switch (z_in_level) {
   1fe04:	4299      	cmp	r1, r3
{
   1fe06:	460c      	mov	r4, r1
   1fe08:	4615      	mov	r5, r2
   1fe0a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   1fe0c:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   1fe10:	d005      	beq.n	1fe1e <nrf91_socket_offload_setsockopt+0x26>
   1fe12:	dc20      	bgt.n	1fe56 <nrf91_socket_offload_setsockopt+0x5e>
   1fe14:	2901      	cmp	r1, #1
   1fe16:	d002      	beq.n	1fe1e <nrf91_socket_offload_setsockopt+0x26>
   1fe18:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   1fe1c:	d126      	bne.n	1fe6c <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   1fe1e:	4629      	mov	r1, r5
   1fe20:	4620      	mov	r0, r4
   1fe22:	aa03      	add	r2, sp, #12
   1fe24:	f7f1 fcca 	bl	117bc <z_to_nrf_optname>
   1fe28:	2800      	cmp	r0, #0
   1fe2a:	db1f      	blt.n	1fe6c <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   1fe2c:	2c01      	cmp	r4, #1
   1fe2e:	d116      	bne.n	1fe5e <nrf91_socket_offload_setsockopt+0x66>
   1fe30:	3d14      	subs	r5, #20
   1fe32:	2d01      	cmp	r5, #1
   1fe34:	d805      	bhi.n	1fe42 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   1fe36:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1fe38:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1fe3a:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   1fe3c:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   1fe3e:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   1fe40:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   1fe42:	4633      	mov	r3, r6
   1fe44:	4621      	mov	r1, r4
   1fe46:	4640      	mov	r0, r8
   1fe48:	9a03      	ldr	r2, [sp, #12]
   1fe4a:	9700      	str	r7, [sp, #0]
   1fe4c:	f7fa f92a 	bl	1a0a4 <nrf_setsockopt>
}
   1fe50:	b006      	add	sp, #24
   1fe52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   1fe56:	f240 2303 	movw	r3, #515	; 0x203
   1fe5a:	4299      	cmp	r1, r3
   1fe5c:	e7de      	b.n	1fe1c <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   1fe5e:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   1fe62:	d1ee      	bne.n	1fe42 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   1fe64:	2d07      	cmp	r5, #7
   1fe66:	bf08      	it	eq
   1fe68:	2701      	moveq	r7, #1
   1fe6a:	e7ea      	b.n	1fe42 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   1fe6c:	f7ff fd58 	bl	1f920 <z_errno>
   1fe70:	232a      	movs	r3, #42	; 0x2a
   1fe72:	6003      	str	r3, [r0, #0]
   1fe74:	f04f 30ff 	mov.w	r0, #4294967295
   1fe78:	e7ea      	b.n	1fe50 <nrf91_socket_offload_setsockopt+0x58>

0001fe7a <nrf91_socket_offload_bind>:
{
   1fe7a:	b570      	push	{r4, r5, r6, lr}
	if (addr->sa_family == AF_INET) {
   1fe7c:	880b      	ldrh	r3, [r1, #0]
{
   1fe7e:	460c      	mov	r4, r1
	if (addr->sa_family == AF_INET) {
   1fe80:	2b01      	cmp	r3, #1
{
   1fe82:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   1fe84:	f100 35ff 	add.w	r5, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   1fe88:	d10f      	bne.n	1feaa <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   1fe8a:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1fe8c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   1fe8e:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   1fe92:	2302      	movs	r3, #2
   1fe94:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1fe96:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   1fe98:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   1fe9c:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1fe9e:	4628      	mov	r0, r5
   1fea0:	a901      	add	r1, sp, #4
   1fea2:	f7fa f8ed 	bl	1a080 <nrf_bind>
}
   1fea6:	b00a      	add	sp, #40	; 0x28
   1fea8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (addr->sa_family == AF_INET6) {
   1feaa:	2b02      	cmp	r3, #2
   1feac:	d110      	bne.n	1fed0 <nrf91_socket_offload_bind+0x56>
	nrf_out->sin6_port = ptr->sin6_port;
   1feae:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1feb0:	2624      	movs	r6, #36	; 0x24
	nrf_out->sin6_port = ptr->sin6_port;
   1feb2:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin6_family = NRF_AF_INET6;
   1feb6:	230a      	movs	r3, #10
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1feb8:	2210      	movs	r2, #16
   1feba:	3104      	adds	r1, #4
   1febc:	a805      	add	r0, sp, #20
	nrf_out->sin6_family = NRF_AF_INET6;
   1febe:	9302      	str	r3, [sp, #8]
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   1fec0:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   1fec4:	f7fe fce7 	bl	1e896 <memcpy>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1fec8:	7d23      	ldrb	r3, [r4, #20]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1feca:	4632      	mov	r2, r6
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   1fecc:	9309      	str	r3, [sp, #36]	; 0x24
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   1fece:	e7e6      	b.n	1fe9e <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   1fed0:	f7ff fd26 	bl	1f920 <z_errno>
   1fed4:	2323      	movs	r3, #35	; 0x23
   1fed6:	6003      	str	r3, [r0, #0]
   1fed8:	f04f 30ff 	mov.w	r0, #4294967295
   1fedc:	e7e3      	b.n	1fea6 <nrf91_socket_offload_bind+0x2c>

0001fede <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1fede:	0413      	lsls	r3, r2, #16
{
   1fee0:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   1fee2:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1fee4:	d507      	bpl.n	1fef6 <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1fee6:	2301      	movs	r3, #1
   1fee8:	68c5      	ldr	r5, [r0, #12]
   1feea:	408b      	lsls	r3, r1
   1feec:	682d      	ldr	r5, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1feee:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1fef0:	bf18      	it	ne
   1fef2:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1fef6:	69a4      	ldr	r4, [r4, #24]
   1fef8:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   1fefc:	46a4      	mov	ip, r4
}
   1fefe:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1ff00:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   1ff04:	4760      	bx	ip

0001ff06 <gpio_pin_configure>:
{
   1ff06:	b538      	push	{r3, r4, r5, lr}
   1ff08:	460c      	mov	r4, r1
	struct gpio_driver_data *data =
   1ff0a:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
   1ff0c:	6883      	ldr	r3, [r0, #8]
   1ff0e:	681b      	ldr	r3, [r3, #0]
   1ff10:	4798      	blx	r3
	if (ret != 0) {
   1ff12:	b930      	cbnz	r0, 1ff22 <gpio_pin_configure+0x1c>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ff14:	2201      	movs	r2, #1
   1ff16:	682b      	ldr	r3, [r5, #0]
   1ff18:	fa02 f104 	lsl.w	r1, r2, r4
   1ff1c:	ea23 0301 	bic.w	r3, r3, r1
   1ff20:	602b      	str	r3, [r5, #0]
}
   1ff22:	bd38      	pop	{r3, r4, r5, pc}

0001ff24 <z_errno>:
   1ff24:	f7fb bfca 	b.w	1bebc <z_impl_z_errno>

0001ff28 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   1ff28:	6883      	ldr	r3, [r0, #8]
   1ff2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ff2c:	b103      	cbz	r3, 1ff30 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   1ff2e:	4718      	bx	r3
}
   1ff30:	4770      	bx	lr

0001ff32 <response_handler>:
	write_uart_string(response);
   1ff32:	4608      	mov	r0, r1
   1ff34:	f7f2 bbd2 	b.w	126dc <write_uart_string>

0001ff38 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   1ff38:	280d      	cmp	r0, #13
   1ff3a:	d004      	beq.n	1ff46 <is_lfcr+0xe>
   1ff3c:	f1a0 030a 	sub.w	r3, r0, #10
   1ff40:	4258      	negs	r0, r3
   1ff42:	4158      	adcs	r0, r3
   1ff44:	4770      	bx	lr
		return true;
   1ff46:	2001      	movs	r0, #1
}
   1ff48:	4770      	bx	lr

0001ff4a <skip_command_prefix>:
{
   1ff4a:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   1ff4c:	6801      	ldr	r1, [r0, #0]
{
   1ff4e:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   1ff50:	1c8b      	adds	r3, r1, #2
   1ff52:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   1ff54:	788c      	ldrb	r4, [r1, #2]
   1ff56:	4620      	mov	r0, r4
   1ff58:	f7ff ffee 	bl	1ff38 <is_lfcr>
   1ff5c:	b910      	cbnz	r0, 1ff64 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1ff5e:	b10c      	cbz	r4, 1ff64 <skip_command_prefix+0x1a>
	(*cmd)++;
   1ff60:	3103      	adds	r1, #3
   1ff62:	6011      	str	r1, [r2, #0]
}
   1ff64:	bd10      	pop	{r4, pc}

0001ff66 <is_valid_notification_char>:
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
}

static inline int toupper(int chr)
{
	return (int)((chr >= (int)'a' && chr <=
   1ff66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1ff6a:	2b19      	cmp	r3, #25
   1ff6c:	bf98      	it	ls
   1ff6e:	3820      	subls	r0, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   1ff70:	3841      	subs	r0, #65	; 0x41
   1ff72:	b2c0      	uxtb	r0, r0
}
   1ff74:	2819      	cmp	r0, #25
   1ff76:	bf8c      	ite	hi
   1ff78:	2000      	movhi	r0, #0
   1ff7a:	2001      	movls	r0, #1
   1ff7c:	4770      	bx	lr

0001ff7e <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   1ff7e:	b510      	push	{r4, lr}
   1ff80:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   1ff82:	f7fe fc56 	bl	1e832 <strlen>
   1ff86:	2801      	cmp	r0, #1
   1ff88:	d91e      	bls.n	1ffc8 <is_command+0x4a>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   1ff8a:	7823      	ldrb	r3, [r4, #0]
   1ff8c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1ff90:	2a19      	cmp	r2, #25
   1ff92:	bf98      	it	ls
   1ff94:	3b20      	subls	r3, #32
   1ff96:	2b41      	cmp	r3, #65	; 0x41
   1ff98:	d116      	bne.n	1ffc8 <is_command+0x4a>
   1ff9a:	7863      	ldrb	r3, [r4, #1]
   1ff9c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1ffa0:	2a19      	cmp	r2, #25
   1ffa2:	bf98      	it	ls
   1ffa4:	3b20      	subls	r3, #32
   1ffa6:	2b54      	cmp	r3, #84	; 0x54
   1ffa8:	d10e      	bne.n	1ffc8 <is_command+0x4a>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   1ffaa:	78a2      	ldrb	r2, [r4, #2]
   1ffac:	2a25      	cmp	r2, #37	; 0x25
   1ffae:	d00d      	beq.n	1ffcc <is_command+0x4e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   1ffb0:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   1ffb4:	2b23      	cmp	r3, #35	; 0x23
   1ffb6:	d009      	beq.n	1ffcc <is_command+0x4e>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   1ffb8:	4610      	mov	r0, r2
   1ffba:	f7ff ffbd 	bl	1ff38 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   1ffbe:	b910      	cbnz	r0, 1ffc6 <is_command+0x48>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   1ffc0:	fab2 f082 	clz	r0, r2
   1ffc4:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1ffc6:	bd10      	pop	{r4, pc}
		return false;
   1ffc8:	2000      	movs	r0, #0
   1ffca:	e7fc      	b.n	1ffc6 <is_command+0x48>
		return true;
   1ffcc:	2001      	movs	r0, #1
   1ffce:	e7fa      	b.n	1ffc6 <is_command+0x48>

0001ffd0 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   1ffd0:	6813      	ldr	r3, [r2, #0]
   1ffd2:	f7f2 be8b 	b.w	12cec <at_parser_max_params_from_str>

0001ffd6 <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   1ffd6:	6803      	ldr	r3, [r0, #0]
   1ffd8:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   1ffda:	bf83      	ittte	hi
   1ffdc:	230c      	movhi	r3, #12
   1ffde:	6840      	ldrhi	r0, [r0, #4]
   1ffe0:	fb03 0001 	mlahi	r0, r3, r1, r0
		return NULL;
   1ffe4:	2000      	movls	r0, #0
}
   1ffe6:	4770      	bx	lr

0001ffe8 <at_param_size>:
/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
	__ASSERT(param != NULL, "Parameter cannot be NULL.");

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   1ffe8:	7803      	ldrb	r3, [r0, #0]
   1ffea:	2b01      	cmp	r3, #1
   1ffec:	d006      	beq.n	1fffc <at_param_size+0x14>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   1ffee:	2b02      	cmp	r3, #2
   1fff0:	d006      	beq.n	20000 <at_param_size+0x18>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   1fff2:	3b03      	subs	r3, #3
   1fff4:	2b01      	cmp	r3, #1
   1fff6:	d805      	bhi.n	20004 <at_param_size+0x1c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   1fff8:	6840      	ldr	r0, [r0, #4]
   1fffa:	4770      	bx	lr
		return sizeof(uint16_t);
   1fffc:	2002      	movs	r0, #2
   1fffe:	4770      	bx	lr
		return sizeof(uint32_t);
   20000:	2004      	movs	r0, #4
   20002:	4770      	bx	lr
	}

	return 0;
   20004:	2000      	movs	r0, #0
}
   20006:	4770      	bx	lr

00020008 <at_param_clear>:
{
   20008:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2000a:	7803      	ldrb	r3, [r0, #0]
{
   2000c:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2000e:	3b03      	subs	r3, #3
   20010:	2b01      	cmp	r3, #1
   20012:	d802      	bhi.n	2001a <at_param_clear+0x12>
		k_free(param->value.str_val);
   20014:	6880      	ldr	r0, [r0, #8]
   20016:	f000 fd85 	bl	20b24 <k_free>
	param->value.int_val = 0;
   2001a:	2300      	movs	r3, #0
   2001c:	60a3      	str	r3, [r4, #8]
}
   2001e:	bd10      	pop	{r4, pc}

00020020 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   20020:	b538      	push	{r3, r4, r5, lr}
   20022:	460d      	mov	r5, r1
	if (list == NULL) {
   20024:	4604      	mov	r4, r0
   20026:	b140      	cbz	r0, 2003a <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   20028:	210c      	movs	r1, #12
   2002a:	4628      	mov	r0, r5
   2002c:	f000 fd7f 	bl	20b2e <k_calloc>
   20030:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   20032:	b128      	cbz	r0, 20040 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   20034:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   20036:	6025      	str	r5, [r4, #0]
}
   20038:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2003a:	f06f 0015 	mvn.w	r0, #21
   2003e:	e7fb      	b.n	20038 <at_params_list_init+0x18>
		return -ENOMEM;
   20040:	f06f 000b 	mvn.w	r0, #11
   20044:	e7f8      	b.n	20038 <at_params_list_init+0x18>

00020046 <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   20046:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (list == NULL || list->params == NULL) {
   20048:	4604      	mov	r4, r0
   2004a:	b130      	cbz	r0, 2005a <at_params_list_clear+0x14>
   2004c:	6843      	ldr	r3, [r0, #4]
   2004e:	b123      	cbz	r3, 2005a <at_params_list_clear+0x14>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   20050:	2500      	movs	r5, #0
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
   20052:	260c      	movs	r6, #12
	for (size_t i = 0; i < list->param_count; ++i) {
   20054:	6823      	ldr	r3, [r4, #0]
   20056:	429d      	cmp	r5, r3
   20058:	d301      	bcc.n	2005e <at_params_list_clear+0x18>
		at_param_init(&params[i]);
	}
}
   2005a:	b002      	add	sp, #8
   2005c:	bd70      	pop	{r4, r5, r6, pc}
		at_param_clear(&params[i]);
   2005e:	6860      	ldr	r0, [r4, #4]
   20060:	fb06 0005 	mla	r0, r6, r5, r0
   20064:	9001      	str	r0, [sp, #4]
   20066:	f7ff ffcf 	bl	20008 <at_param_clear>
	memset(param, 0, sizeof(struct at_param));
   2006a:	220c      	movs	r2, #12
   2006c:	2100      	movs	r1, #0
   2006e:	9801      	ldr	r0, [sp, #4]
   20070:	f7fe fc3c 	bl	1e8ec <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   20074:	3501      	adds	r5, #1
   20076:	e7ed      	b.n	20054 <at_params_list_clear+0xe>

00020078 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   20078:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   2007a:	4604      	mov	r4, r0
   2007c:	b148      	cbz	r0, 20092 <at_params_list_free+0x1a>
   2007e:	6843      	ldr	r3, [r0, #4]
   20080:	b13b      	cbz	r3, 20092 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   20082:	2500      	movs	r5, #0
	at_params_list_clear(list);
   20084:	f7ff ffdf 	bl	20046 <at_params_list_clear>
	k_free(list->params);
   20088:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   2008a:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   2008c:	f000 fd4a 	bl	20b24 <k_free>
	list->params = NULL;
   20090:	6065      	str	r5, [r4, #4]
}
   20092:	bd38      	pop	{r3, r4, r5, pc}

00020094 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   20094:	b538      	push	{r3, r4, r5, lr}
   20096:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   20098:	b160      	cbz	r0, 200b4 <at_params_short_put+0x20>
   2009a:	6843      	ldr	r3, [r0, #4]
   2009c:	b153      	cbz	r3, 200b4 <at_params_short_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2009e:	f7ff ff9a 	bl	1ffd6 <at_params_get>

	if (param == NULL) {
   200a2:	4604      	mov	r4, r0
   200a4:	b130      	cbz	r0, 200b4 <at_params_short_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   200a6:	f7ff ffaf 	bl	20008 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_SHORT;
   200aa:	2301      	movs	r3, #1
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
   200ac:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   200ae:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   200b0:	60a5      	str	r5, [r4, #8]
}
   200b2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   200b4:	f06f 0015 	mvn.w	r0, #21
   200b8:	e7fb      	b.n	200b2 <at_params_short_put+0x1e>

000200ba <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   200ba:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   200bc:	b160      	cbz	r0, 200d8 <at_params_empty_put+0x1e>
   200be:	6843      	ldr	r3, [r0, #4]
   200c0:	b153      	cbz	r3, 200d8 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   200c2:	f7ff ff88 	bl	1ffd6 <at_params_get>

	if (param == NULL) {
   200c6:	4604      	mov	r4, r0
   200c8:	b130      	cbz	r0, 200d8 <at_params_empty_put+0x1e>
		return -EINVAL;
	}

	at_param_clear(param);
   200ca:	f7ff ff9d 	bl	20008 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   200ce:	2305      	movs	r3, #5
	param->value.int_val = 0;
   200d0:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   200d2:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   200d4:	60a0      	str	r0, [r4, #8]

	return 0;
}
   200d6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   200d8:	f06f 0015 	mvn.w	r0, #21
   200dc:	e7fb      	b.n	200d6 <at_params_empty_put+0x1c>

000200de <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   200de:	b538      	push	{r3, r4, r5, lr}
   200e0:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   200e2:	b160      	cbz	r0, 200fe <at_params_int_put+0x20>
   200e4:	6843      	ldr	r3, [r0, #4]
   200e6:	b153      	cbz	r3, 200fe <at_params_int_put+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   200e8:	f7ff ff75 	bl	1ffd6 <at_params_get>

	if (param == NULL) {
   200ec:	4604      	mov	r4, r0
   200ee:	b130      	cbz	r0, 200fe <at_params_int_put+0x20>
		return -EINVAL;
	}

	at_param_clear(param);
   200f0:	f7ff ff8a 	bl	20008 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   200f4:	2302      	movs	r3, #2
	param->value.int_val = value;
	return 0;
   200f6:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   200f8:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   200fa:	60a5      	str	r5, [r4, #8]
}
   200fc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   200fe:	f06f 0015 	mvn.w	r0, #21
   20102:	e7fb      	b.n	200fc <at_params_int_put+0x1e>

00020104 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   20104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20106:	4617      	mov	r7, r2
   20108:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   2010a:	b1c0      	cbz	r0, 2013e <at_params_string_put+0x3a>
   2010c:	6843      	ldr	r3, [r0, #4]
   2010e:	b1b3      	cbz	r3, 2013e <at_params_string_put+0x3a>
   20110:	b1aa      	cbz	r2, 2013e <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   20112:	f7ff ff60 	bl	1ffd6 <at_params_get>

	if (param == NULL) {
   20116:	4604      	mov	r4, r0
   20118:	b188      	cbz	r0, 2013e <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   2011a:	1c68      	adds	r0, r5, #1
   2011c:	f7fd f99e 	bl	1d45c <k_malloc>

	if (param_value == NULL) {
   20120:	4606      	mov	r6, r0
   20122:	b178      	cbz	r0, 20144 <at_params_string_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);
   20124:	462a      	mov	r2, r5
   20126:	4639      	mov	r1, r7
   20128:	f7fe fbb5 	bl	1e896 <memcpy>

	at_param_clear(param);
   2012c:	4620      	mov	r0, r4
   2012e:	f7ff ff6b 	bl	20008 <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   20132:	2303      	movs	r3, #3
	param->value.str_val = param_value;

	return 0;
   20134:	2000      	movs	r0, #0
	param->size = str_len;
   20136:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   20138:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   2013a:	60a6      	str	r6, [r4, #8]
}
   2013c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2013e:	f06f 0015 	mvn.w	r0, #21
   20142:	e7fb      	b.n	2013c <at_params_string_put+0x38>
		return -ENOMEM;
   20144:	f06f 000b 	mvn.w	r0, #11
   20148:	e7f8      	b.n	2013c <at_params_string_put+0x38>

0002014a <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   2014a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2014c:	4617      	mov	r7, r2
   2014e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   20150:	b1c0      	cbz	r0, 20184 <at_params_array_put+0x3a>
   20152:	6843      	ldr	r3, [r0, #4]
   20154:	b1b3      	cbz	r3, 20184 <at_params_array_put+0x3a>
   20156:	b1aa      	cbz	r2, 20184 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   20158:	f7ff ff3d 	bl	1ffd6 <at_params_get>

	if (param == NULL) {
   2015c:	4604      	mov	r4, r0
   2015e:	b188      	cbz	r0, 20184 <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   20160:	4628      	mov	r0, r5
   20162:	f7fd f97b 	bl	1d45c <k_malloc>

	if (param_value == NULL) {
   20166:	4606      	mov	r6, r0
   20168:	b178      	cbz	r0, 2018a <at_params_array_put+0x40>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);
   2016a:	462a      	mov	r2, r5
   2016c:	4639      	mov	r1, r7
   2016e:	f7fe fb92 	bl	1e896 <memcpy>

	at_param_clear(param);
   20172:	4620      	mov	r0, r4
   20174:	f7ff ff48 	bl	20008 <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   20178:	2304      	movs	r3, #4
	param->value.array_val = param_value;

	return 0;
   2017a:	2000      	movs	r0, #0
	param->size = array_len;
   2017c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   2017e:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   20180:	60a6      	str	r6, [r4, #8]
}
   20182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   20184:	f06f 0015 	mvn.w	r0, #21
   20188:	e7fb      	b.n	20182 <at_params_array_put+0x38>
		return -ENOMEM;
   2018a:	f06f 000b 	mvn.w	r0, #11
   2018e:	e7f8      	b.n	20182 <at_params_array_put+0x38>

00020190 <at_params_int_get>:
	return 0;
}

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   20190:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   20192:	b168      	cbz	r0, 201b0 <at_params_int_get+0x20>
   20194:	6843      	ldr	r3, [r0, #4]
   20196:	b15b      	cbz	r3, 201b0 <at_params_int_get+0x20>
   20198:	b152      	cbz	r2, 201b0 <at_params_int_get+0x20>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   2019a:	f7ff ff1c 	bl	1ffd6 <at_params_get>

	if (param == NULL) {
   2019e:	b138      	cbz	r0, 201b0 <at_params_int_get+0x20>
		return -EINVAL;
	}

	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   201a0:	7803      	ldrb	r3, [r0, #0]
   201a2:	3b01      	subs	r3, #1
   201a4:	2b01      	cmp	r3, #1
   201a6:	d803      	bhi.n	201b0 <at_params_int_get+0x20>
	    (param->type != AT_PARAM_TYPE_NUM_SHORT)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   201a8:	6883      	ldr	r3, [r0, #8]
	return 0;
   201aa:	2000      	movs	r0, #0
	*value = param->value.int_val;
   201ac:	6013      	str	r3, [r2, #0]
}
   201ae:	bd08      	pop	{r3, pc}
		return -EINVAL;
   201b0:	f06f 0015 	mvn.w	r0, #21
   201b4:	e7fb      	b.n	201ae <at_params_int_get+0x1e>

000201b6 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   201b6:	b570      	push	{r4, r5, r6, lr}
   201b8:	4616      	mov	r6, r2
   201ba:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   201bc:	b1c0      	cbz	r0, 201f0 <at_params_string_get+0x3a>
   201be:	6843      	ldr	r3, [r0, #4]
   201c0:	b1b3      	cbz	r3, 201f0 <at_params_string_get+0x3a>
   201c2:	b1aa      	cbz	r2, 201f0 <at_params_string_get+0x3a>
	    value == NULL || len == NULL) {
   201c4:	b1a4      	cbz	r4, 201f0 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   201c6:	f7ff ff06 	bl	1ffd6 <at_params_get>

	if (param == NULL) {
   201ca:	4601      	mov	r1, r0
   201cc:	b180      	cbz	r0, 201f0 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   201ce:	7803      	ldrb	r3, [r0, #0]
   201d0:	2b03      	cmp	r3, #3
   201d2:	d10d      	bne.n	201f0 <at_params_string_get+0x3a>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   201d4:	f7ff ff08 	bl	1ffe8 <at_param_size>

	if (*len < param_len) {
   201d8:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   201da:	4605      	mov	r5, r0
	if (*len < param_len) {
   201dc:	4283      	cmp	r3, r0
   201de:	d30a      	bcc.n	201f6 <at_params_string_get+0x40>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
   201e0:	4602      	mov	r2, r0
   201e2:	6889      	ldr	r1, [r1, #8]
   201e4:	4630      	mov	r0, r6
   201e6:	f7fe fb56 	bl	1e896 <memcpy>
	*len = param_len;

	return 0;
   201ea:	2000      	movs	r0, #0
	*len = param_len;
   201ec:	6025      	str	r5, [r4, #0]
}
   201ee:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   201f0:	f06f 0015 	mvn.w	r0, #21
   201f4:	e7fb      	b.n	201ee <at_params_string_get+0x38>
		return -ENOMEM;
   201f6:	f06f 000b 	mvn.w	r0, #11
   201fa:	e7f8      	b.n	201ee <at_params_string_get+0x38>

000201fc <response_is_valid>:
{
   201fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   201fe:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   20200:	4610      	mov	r0, r2
{
   20202:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   20204:	9201      	str	r2, [sp, #4]
   20206:	f7fe fb14 	bl	1e832 <strlen>
   2020a:	42a0      	cmp	r0, r4
   2020c:	d809      	bhi.n	20222 <response_is_valid+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   2020e:	4622      	mov	r2, r4
   20210:	4628      	mov	r0, r5
   20212:	9901      	ldr	r1, [sp, #4]
   20214:	f7fe fb2f 	bl	1e876 <memcmp>
	if ((response_len < strlen(check)) ||
   20218:	fab0 f080 	clz	r0, r0
   2021c:	0940      	lsrs	r0, r0, #5
}
   2021e:	b003      	add	sp, #12
   20220:	bd30      	pop	{r4, r5, pc}
		return false;
   20222:	2000      	movs	r0, #0
   20224:	e7fb      	b.n	2021e <response_is_valid+0x22>

00020226 <lte_lc_init_and_connect>:
{
   20226:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   20228:	f7f3 f852 	bl	132d0 <w_lte_lc_init>
	if (ret) {
   2022c:	b920      	cbnz	r0, 20238 <lte_lc_init_and_connect+0x12>
}
   2022e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   20232:	2001      	movs	r0, #1
   20234:	f7f2 bf12 	b.w	1305c <w_lte_lc_connect>
}
   20238:	bd08      	pop	{r3, pc}

0002023a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2023a:	4700      	bx	r0

0002023c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2023c:	f000 ba42 	b.w	206c4 <z_impl_k_busy_wait>

00020240 <nrfx_clock_enable>:
{
   20240:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   20242:	2005      	movs	r0, #5
   20244:	f7ef fc44 	bl	fad0 <arch_irq_is_enabled>
   20248:	b920      	cbnz	r0, 20254 <nrfx_clock_enable+0x14>
}
   2024a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2024e:	2005      	movs	r0, #5
   20250:	f7ef bc2e 	b.w	fab0 <arch_irq_enable>
   20254:	bd08      	pop	{r3, pc}

00020256 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   20256:	f7fe b94b 	b.w	1e4f0 <z_clock_idle_exit>

0002025a <k_heap_init>:
{
   2025a:	b410      	push	{r4}
   2025c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   20260:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   20264:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   20268:	f7fd bc2c 	b.w	1dac4 <sys_heap_init>

0002026c <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   2026c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20270:	4605      	mov	r5, r0
   20272:	b085      	sub	sp, #20
   20274:	460f      	mov	r7, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   20276:	4610      	mov	r0, r2
   20278:	4619      	mov	r1, r3
   2027a:	f000 fad5 	bl	20828 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2027e:	f105 0b14 	add.w	fp, r5, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   20282:	9002      	str	r0, [sp, #8]
   20284:	468a      	mov	sl, r1
	__asm__ volatile(
   20286:	f04f 0320 	mov.w	r3, #32
   2028a:	f3ef 8411 	mrs	r4, BASEPRI
   2028e:	f383 8811 	msr	BASEPRI, r3
   20292:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20296:	f105 060c 	add.w	r6, r5, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   2029a:	4639      	mov	r1, r7
   2029c:	4628      	mov	r0, r5
   2029e:	f7fd fbdd 	bl	1da5c <sys_heap_alloc>
   202a2:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   202a4:	f7fc ffb6 	bl	1d214 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   202a8:	9b03      	ldr	r3, [sp, #12]
   202aa:	b13b      	cbz	r3, 202bc <k_heap_alloc+0x50>
	__asm__ volatile(
   202ac:	f384 8811 	msr	BASEPRI, r4
   202b0:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   202b4:	4618      	mov	r0, r3
   202b6:	b005      	add	sp, #20
   202b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   202bc:	9a02      	ldr	r2, [sp, #8]
   202be:	ebb2 0800 	subs.w	r8, r2, r0
   202c2:	eb6a 0901 	sbc.w	r9, sl, r1
   202c6:	f1b8 0f01 	cmp.w	r8, #1
   202ca:	f179 0200 	sbcs.w	r2, r9, #0
   202ce:	dbed      	blt.n	202ac <k_heap_alloc+0x40>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   202d0:	4632      	mov	r2, r6
   202d2:	4621      	mov	r1, r4
   202d4:	4658      	mov	r0, fp
   202d6:	e9cd 8900 	strd	r8, r9, [sp]
   202da:	f7fc fbcd 	bl	1ca78 <z_pend_curr>
	__asm__ volatile(
   202de:	f04f 0320 	mov.w	r3, #32
   202e2:	f3ef 8411 	mrs	r4, BASEPRI
   202e6:	f383 8811 	msr	BASEPRI, r3
   202ea:	f3bf 8f6f 	isb	sy
   202ee:	e7d4      	b.n	2029a <k_heap_alloc+0x2e>

000202f0 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   202f0:	b538      	push	{r3, r4, r5, lr}
   202f2:	4604      	mov	r4, r0
   202f4:	f04f 0320 	mov.w	r3, #32
   202f8:	f3ef 8511 	mrs	r5, BASEPRI
   202fc:	f383 8811 	msr	BASEPRI, r3
   20300:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   20304:	f7fd fb52 	bl	1d9ac <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   20308:	f104 000c 	add.w	r0, r4, #12
   2030c:	f000 f9b4 	bl	20678 <z_unpend_all>
   20310:	b130      	cbz	r0, 20320 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   20312:	4629      	mov	r1, r5
   20314:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2031c:	f7fc b992 	b.w	1c644 <z_reschedule>
	__asm__ volatile(
   20320:	f385 8811 	msr	BASEPRI, r5
   20324:	f3bf 8f6f 	isb	sy
}
   20328:	bd38      	pop	{r3, r4, r5, pc}

0002032a <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   2032a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2032c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   20330:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   20332:	6800      	ldr	r0, [r0, #0]
{
   20334:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   20336:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   20338:	4632      	mov	r2, r6
   2033a:	463b      	mov	r3, r7
   2033c:	4621      	mov	r1, r4
   2033e:	f7ff ff95 	bl	2026c <k_heap_alloc>
   20342:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   20344:	b144      	cbz	r4, 20358 <k_mem_pool_alloc+0x2e>
   20346:	b938      	cbnz	r0, 20358 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   20348:	ea56 0307 	orrs.w	r3, r6, r7
   2034c:	bf0c      	ite	eq
   2034e:	f06f 000b 	mvneq.w	r0, #11
   20352:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   20356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   20358:	2000      	movs	r0, #0
   2035a:	e7fc      	b.n	20356 <k_mem_pool_alloc+0x2c>

0002035c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   2035c:	e9d0 1000 	ldrd	r1, r0, [r0]
   20360:	f7ff bfc6 	b.w	202f0 <k_heap_free>

00020364 <k_mem_slab_init>:
{
   20364:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   20366:	2400      	movs	r4, #0
   20368:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2036a:	ea41 0402 	orr.w	r4, r1, r2
   2036e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   20372:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   20376:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20378:	d10c      	bne.n	20394 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2037a:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2037c:	42a3      	cmp	r3, r4
   2037e:	d103      	bne.n	20388 <k_mem_slab_init+0x24>
   20380:	e9c0 0000 	strd	r0, r0, [r0]
}
   20384:	2000      	movs	r0, #0
}
   20386:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   20388:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2038a:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   2038c:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   2038e:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   20390:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   20392:	e7f3      	b.n	2037c <k_mem_slab_init+0x18>
		return -EINVAL;
   20394:	f06f 0015 	mvn.w	r0, #21
	return rc;
   20398:	e7f5      	b.n	20386 <k_mem_slab_init+0x22>

0002039a <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   2039a:	2300      	movs	r3, #0
   2039c:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   203a0:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   203a4:	4618      	mov	r0, r3
   203a6:	4770      	bx	lr

000203a8 <queue_insert>:
{
   203a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   203ac:	4604      	mov	r4, r0
   203ae:	460d      	mov	r5, r1
   203b0:	4690      	mov	r8, r2
   203b2:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   203b4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   203b8:	f04f 0320 	mov.w	r3, #32
   203bc:	f3ef 8711 	mrs	r7, BASEPRI
   203c0:	f383 8811 	msr	BASEPRI, r3
   203c4:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   203c8:	4630      	mov	r0, r6
   203ca:	f000 f930 	bl	2062e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   203ce:	b158      	cbz	r0, 203e8 <queue_insert+0x40>
   203d0:	2400      	movs	r4, #0
   203d2:	f8c0 8014 	str.w	r8, [r0, #20]
   203d6:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   203d8:	f000 f8ce 	bl	20578 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   203dc:	4630      	mov	r0, r6
   203de:	4639      	mov	r1, r7
   203e0:	f7fc f930 	bl	1c644 <z_reschedule>
	return 0;
   203e4:	2000      	movs	r0, #0
   203e6:	e00c      	b.n	20402 <queue_insert+0x5a>
	if (alloc) {
   203e8:	f1b9 0f00 	cmp.w	r9, #0
   203ec:	d01b      	beq.n	20426 <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   203ee:	2008      	movs	r0, #8
   203f0:	f7fd f83a 	bl	1d468 <z_thread_malloc>
		if (anode == NULL) {
   203f4:	b938      	cbnz	r0, 20406 <queue_insert+0x5e>
	__asm__ volatile(
   203f6:	f387 8811 	msr	BASEPRI, r7
   203fa:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   203fe:	f06f 000b 	mvn.w	r0, #11
}
   20402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   20406:	2301      	movs	r3, #1
		anode->data = data;
   20408:	f8c0 8004 	str.w	r8, [r0, #4]
   2040c:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2040e:	6803      	ldr	r3, [r0, #0]
   20410:	f003 0203 	and.w	r2, r3, #3
   20414:	b95d      	cbnz	r5, 2042e <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20416:	6823      	ldr	r3, [r4, #0]
   20418:	4313      	orrs	r3, r2
   2041a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2041c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2041e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20420:	b973      	cbnz	r3, 20440 <queue_insert+0x98>
	list->tail = node;
   20422:	6060      	str	r0, [r4, #4]
}
   20424:	e00c      	b.n	20440 <queue_insert+0x98>
}
   20426:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   20428:	f8c8 9000 	str.w	r9, [r8]
}
   2042c:	e7ef      	b.n	2040e <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2042e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20430:	f033 0303 	bics.w	r3, r3, #3
   20434:	d110      	bne.n	20458 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20436:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   20438:	6862      	ldr	r2, [r4, #4]
   2043a:	b93a      	cbnz	r2, 2044c <queue_insert+0xa4>
	list->head = node;
   2043c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20440:	2104      	movs	r1, #4
   20442:	f104 0010 	add.w	r0, r4, #16
   20446:	f000 fb47 	bl	20ad8 <z_handle_obj_poll_events>
   2044a:	e7c7      	b.n	203dc <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2044c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2044e:	f003 0303 	and.w	r3, r3, #3
   20452:	4303      	orrs	r3, r0
   20454:	6013      	str	r3, [r2, #0]
   20456:	e7e4      	b.n	20422 <queue_insert+0x7a>
   20458:	4313      	orrs	r3, r2
   2045a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2045c:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2045e:	f003 0303 	and.w	r3, r3, #3
   20462:	4303      	orrs	r3, r0
   20464:	602b      	str	r3, [r5, #0]
}
   20466:	e7eb      	b.n	20440 <queue_insert+0x98>

00020468 <z_queue_node_peek>:
{
   20468:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2046a:	4604      	mov	r4, r0
   2046c:	b130      	cbz	r0, 2047c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2046e:	6802      	ldr	r2, [r0, #0]
   20470:	0793      	lsls	r3, r2, #30
   20472:	d003      	beq.n	2047c <z_queue_node_peek+0x14>
		ret = anode->data;
   20474:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   20476:	b109      	cbz	r1, 2047c <z_queue_node_peek+0x14>
			k_free(anode);
   20478:	f000 fb54 	bl	20b24 <k_free>
}
   2047c:	4620      	mov	r0, r4
   2047e:	bd10      	pop	{r4, pc}

00020480 <z_impl_k_queue_init>:
	list->head = NULL;
   20480:	2300      	movs	r3, #0
	list->tail = NULL;
   20482:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   20486:	f100 0308 	add.w	r3, r0, #8
   2048a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2048e:	f100 0310 	add.w	r3, r0, #16
   20492:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   20496:	4770      	bx	lr

00020498 <k_queue_append>:
{
   20498:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2049a:	2300      	movs	r3, #0
   2049c:	6841      	ldr	r1, [r0, #4]
   2049e:	f7ff bf83 	b.w	203a8 <queue_insert>

000204a2 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   204a2:	f990 000e 	ldrsb.w	r0, [r0, #14]
   204a6:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   204aa:	4298      	cmp	r0, r3
   204ac:	bfac      	ite	ge
   204ae:	2000      	movge	r0, #0
   204b0:	2001      	movlt	r0, #1
   204b2:	4770      	bx	lr

000204b4 <z_find_first_thread_to_unpend>:
{
   204b4:	b510      	push	{r4, lr}
	__asm__ volatile(
   204b6:	f04f 0320 	mov.w	r3, #32
   204ba:	f3ef 8411 	mrs	r4, BASEPRI
   204be:	f383 8811 	msr	BASEPRI, r3
   204c2:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   204c6:	f000 f84d 	bl	20564 <z_priq_dumb_best>
	__asm__ volatile(
   204ca:	f384 8811 	msr	BASEPRI, r4
   204ce:	f3bf 8f6f 	isb	sy
}
   204d2:	bd10      	pop	{r4, pc}

000204d4 <z_unpend_thread_no_timeout>:
{
   204d4:	b510      	push	{r4, lr}
	__asm__ volatile(
   204d6:	f04f 0320 	mov.w	r3, #32
   204da:	f3ef 8411 	mrs	r4, BASEPRI
   204de:	f383 8811 	msr	BASEPRI, r3
   204e2:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   204e6:	f000 f81b 	bl	20520 <unpend_thread_no_timeout>
	__asm__ volatile(
   204ea:	f384 8811 	msr	BASEPRI, r4
   204ee:	f3bf 8f6f 	isb	sy
}
   204f2:	bd10      	pop	{r4, pc}

000204f4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   204f4:	4603      	mov	r3, r0
   204f6:	b920      	cbnz	r0, 20502 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   204f8:	f3ef 8205 	mrs	r2, IPSR
   204fc:	b90a      	cbnz	r2, 20502 <z_reschedule_irqlock+0xe>
   204fe:	f7ef ba55 	b.w	f9ac <arch_swap>
   20502:	f383 8811 	msr	BASEPRI, r3
   20506:	f3bf 8f6f 	isb	sy
}
   2050a:	4770      	bx	lr

0002050c <z_reschedule_unlocked>:
	__asm__ volatile(
   2050c:	f04f 0320 	mov.w	r3, #32
   20510:	f3ef 8011 	mrs	r0, BASEPRI
   20514:	f383 8811 	msr	BASEPRI, r3
   20518:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2051c:	f7ff bfea 	b.w	204f4 <z_reschedule_irqlock>

00020520 <unpend_thread_no_timeout>:
{
   20520:	4601      	mov	r1, r0
   20522:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   20524:	6880      	ldr	r0, [r0, #8]
   20526:	f7fc f8b3 	bl	1c690 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2052a:	7b4b      	ldrb	r3, [r1, #13]
   2052c:	f023 0302 	bic.w	r3, r3, #2
   20530:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   20532:	2300      	movs	r3, #0
   20534:	608b      	str	r3, [r1, #8]
}
   20536:	bd08      	pop	{r3, pc}

00020538 <z_unpend_thread>:
{
   20538:	b538      	push	{r3, r4, r5, lr}
   2053a:	4604      	mov	r4, r0
   2053c:	f04f 0320 	mov.w	r3, #32
   20540:	f3ef 8511 	mrs	r5, BASEPRI
   20544:	f383 8811 	msr	BASEPRI, r3
   20548:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2054c:	f7ff ffe8 	bl	20520 <unpend_thread_no_timeout>
	__asm__ volatile(
   20550:	f385 8811 	msr	BASEPRI, r5
   20554:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   20558:	f104 0018 	add.w	r0, r4, #24
}
   2055c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20560:	f000 b91b 	b.w	2079a <z_abort_timeout>

00020564 <z_priq_dumb_best>:
	return list->head == list;
   20564:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20566:	4298      	cmp	r0, r3
   20568:	d004      	beq.n	20574 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2056a:	2b00      	cmp	r3, #0
   2056c:	bf38      	it	cc
   2056e:	2300      	movcc	r3, #0
   20570:	4618      	mov	r0, r3
   20572:	4770      	bx	lr
	struct k_thread *thread = NULL;
   20574:	2000      	movs	r0, #0
}
   20576:	4770      	bx	lr

00020578 <z_ready_thread>:
{
   20578:	b510      	push	{r4, lr}
	__asm__ volatile(
   2057a:	f04f 0320 	mov.w	r3, #32
   2057e:	f3ef 8411 	mrs	r4, BASEPRI
   20582:	f383 8811 	msr	BASEPRI, r3
   20586:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   2058a:	f7fc f8d7 	bl	1c73c <ready_thread>
	__asm__ volatile(
   2058e:	f384 8811 	msr	BASEPRI, r4
   20592:	f3bf 8f6f 	isb	sy
}
   20596:	bd10      	pop	{r4, pc}

00020598 <z_thread_timeout>:
{
   20598:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2059a:	4604      	mov	r4, r0
	__asm__ volatile(
   2059c:	f04f 0320 	mov.w	r3, #32
   205a0:	f3ef 8511 	mrs	r5, BASEPRI
   205a4:	f383 8811 	msr	BASEPRI, r3
   205a8:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   205ac:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   205b0:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
   205b2:	b11b      	cbz	r3, 205bc <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   205b4:	9001      	str	r0, [sp, #4]
   205b6:	f7ff ffb3 	bl	20520 <unpend_thread_no_timeout>
   205ba:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   205bc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   205c0:	f023 0314 	bic.w	r3, r3, #20
   205c4:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   205c8:	f7fc f8b8 	bl	1c73c <ready_thread>
	__asm__ volatile(
   205cc:	f385 8811 	msr	BASEPRI, r5
   205d0:	f3bf 8f6f 	isb	sy
}
   205d4:	b003      	add	sp, #12
   205d6:	bd30      	pop	{r4, r5, pc}

000205d8 <add_to_waitq_locked>:
{
   205d8:	b538      	push	{r3, r4, r5, lr}
   205da:	4604      	mov	r4, r0
   205dc:	460d      	mov	r5, r1
	unready_thread(thread);
   205de:	f7fc fa0b 	bl	1c9f8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   205e2:	7b63      	ldrb	r3, [r4, #13]
   205e4:	f043 0302 	orr.w	r3, r3, #2
   205e8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   205ea:	b1c5      	cbz	r5, 2061e <add_to_waitq_locked+0x46>
	return list->head == list;
   205ec:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   205ee:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   205f0:	429d      	cmp	r5, r3
   205f2:	bf08      	it	eq
   205f4:	2300      	moveq	r3, #0
   205f6:	2b00      	cmp	r3, #0
   205f8:	bf38      	it	cc
   205fa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   205fc:	b183      	cbz	r3, 20620 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   205fe:	f994 100e 	ldrsb.w	r1, [r4, #14]
   20602:	f993 200e 	ldrsb.w	r2, [r3, #14]
   20606:	4291      	cmp	r1, r2
   20608:	db04      	blt.n	20614 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   2060a:	686a      	ldr	r2, [r5, #4]
   2060c:	429a      	cmp	r2, r3
   2060e:	d007      	beq.n	20620 <add_to_waitq_locked+0x48>
   20610:	681b      	ldr	r3, [r3, #0]
   20612:	e7f3      	b.n	205fc <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   20614:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20616:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2061a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2061c:	605c      	str	r4, [r3, #4]
}
   2061e:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   20620:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   20622:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   20624:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   20626:	686b      	ldr	r3, [r5, #4]
   20628:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2062a:	606c      	str	r4, [r5, #4]
   2062c:	e7f7      	b.n	2061e <add_to_waitq_locked+0x46>

0002062e <z_unpend_first_thread>:
{
   2062e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20630:	f04f 0320 	mov.w	r3, #32
   20634:	f3ef 8211 	mrs	r2, BASEPRI
   20638:	f383 8811 	msr	BASEPRI, r3
   2063c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   20640:	f7ff ff90 	bl	20564 <z_priq_dumb_best>
   20644:	4604      	mov	r4, r0
	__asm__ volatile(
   20646:	f382 8811 	msr	BASEPRI, r2
   2064a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2064e:	b188      	cbz	r0, 20674 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   20650:	f04f 0320 	mov.w	r3, #32
   20654:	f3ef 8511 	mrs	r5, BASEPRI
   20658:	f383 8811 	msr	BASEPRI, r3
   2065c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   20660:	f7ff ff5e 	bl	20520 <unpend_thread_no_timeout>
	__asm__ volatile(
   20664:	f385 8811 	msr	BASEPRI, r5
   20668:	f3bf 8f6f 	isb	sy
   2066c:	f104 0018 	add.w	r0, r4, #24
   20670:	f000 f893 	bl	2079a <z_abort_timeout>
}
   20674:	4620      	mov	r0, r4
   20676:	bd38      	pop	{r3, r4, r5, pc}

00020678 <z_unpend_all>:
{
   20678:	b538      	push	{r3, r4, r5, lr}
   2067a:	4605      	mov	r5, r0
	int need_sched = 0;
   2067c:	2000      	movs	r0, #0
	return list->head == list;
   2067e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20680:	42a5      	cmp	r5, r4
   20682:	d000      	beq.n	20686 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   20684:	b904      	cbnz	r4, 20688 <z_unpend_all+0x10>
}
   20686:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   20688:	4620      	mov	r0, r4
   2068a:	f7ff ff55 	bl	20538 <z_unpend_thread>
		z_ready_thread(thread);
   2068e:	4620      	mov	r0, r4
   20690:	f7ff ff72 	bl	20578 <z_ready_thread>
		need_sched = 1;
   20694:	2001      	movs	r0, #1
   20696:	e7f2      	b.n	2067e <z_unpend_all+0x6>

00020698 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   20698:	b15a      	cbz	r2, 206b2 <z_impl_k_sem_init+0x1a>
   2069a:	428a      	cmp	r2, r1
   2069c:	d309      	bcc.n	206b2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2069e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   206a2:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   206a6:	e9c0 0000 	strd	r0, r0, [r0]
   206aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   206ae:	2000      	movs	r0, #0
   206b0:	4770      	bx	lr
		return -EINVAL;
   206b2:	f06f 0015 	mvn.w	r0, #21
}
   206b6:	4770      	bx	lr

000206b8 <k_is_in_isr>:
   206b8:	f3ef 8005 	mrs	r0, IPSR
}
   206bc:	3800      	subs	r0, #0
   206be:	bf18      	it	ne
   206c0:	2001      	movne	r0, #1
   206c2:	4770      	bx	lr

000206c4 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   206c4:	f7ee b86e 	b.w	e7a4 <arch_busy_wait>

000206c8 <z_impl_k_thread_name_set>:
}
   206c8:	f06f 0046 	mvn.w	r0, #70	; 0x46
   206cc:	4770      	bx	lr

000206ce <k_thread_name_get>:
}
   206ce:	2000      	movs	r0, #0
   206d0:	4770      	bx	lr

000206d2 <k_work_submit_to_queue>:
{
   206d2:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   206d4:	f101 0308 	add.w	r3, r1, #8
   206d8:	e8d3 2fef 	ldaex	r2, [r3]
   206dc:	f042 0c01 	orr.w	ip, r2, #1
   206e0:	e8c3 cfee 	stlex	lr, ip, [r3]
   206e4:	f1be 0f00 	cmp.w	lr, #0
   206e8:	d1f6      	bne.n	206d8 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   206ea:	07d3      	lsls	r3, r2, #31
   206ec:	d403      	bmi.n	206f6 <k_work_submit_to_queue+0x24>
}
   206ee:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   206f2:	f7ff bed1 	b.w	20498 <k_queue_append>
}
   206f6:	f85d fb04 	ldr.w	pc, [sp], #4

000206fa <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   206fa:	f1a0 0110 	sub.w	r1, r0, #16
   206fe:	6980      	ldr	r0, [r0, #24]
   20700:	f7ff bfe7 	b.w	206d2 <k_work_submit_to_queue>

00020704 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   20704:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   20706:	b570      	push	{r4, r5, r6, lr}
   20708:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   2070a:	b913      	cbnz	r3, 20712 <work_cancel+0xe>
		return -EALREADY;
   2070c:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   20710:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   20712:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20716:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   2071a:	07db      	lsls	r3, r3, #31
   2071c:	d52f      	bpl.n	2077e <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2071e:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   20720:	6a82      	ldr	r2, [r0, #40]	; 0x28
   20722:	6813      	ldr	r3, [r2, #0]
   20724:	b913      	cbnz	r3, 2072c <work_cancel+0x28>
			return -EINVAL;
   20726:	f06f 0015 	mvn.w	r0, #21
   2072a:	e7f1      	b.n	20710 <work_cancel+0xc>
   2072c:	429c      	cmp	r4, r3
   2072e:	d121      	bne.n	20774 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   20730:	6823      	ldr	r3, [r4, #0]
   20732:	6856      	ldr	r6, [r2, #4]
   20734:	f023 0003 	bic.w	r0, r3, #3
   20738:	b991      	cbnz	r1, 20760 <work_cancel+0x5c>
   2073a:	42b4      	cmp	r4, r6
	list->head = node;
   2073c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2073e:	d100      	bne.n	20742 <work_cancel+0x3e>
	list->tail = node;
   20740:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20742:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20744:	f003 0303 	and.w	r3, r3, #3
   20748:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2074a:	2000      	movs	r0, #0
   2074c:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2074e:	e8d5 3fef 	ldaex	r3, [r5]
   20752:	f023 0301 	bic.w	r3, r3, #1
   20756:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2075a:	2a00      	cmp	r2, #0
   2075c:	d0d8      	beq.n	20710 <work_cancel+0xc>
   2075e:	e7f6      	b.n	2074e <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20760:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   20762:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   20764:	f003 0303 	and.w	r3, r3, #3
   20768:	ea43 0300 	orr.w	r3, r3, r0
   2076c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2076e:	bf08      	it	eq
   20770:	6051      	streq	r1, [r2, #4]
}
   20772:	e7e6      	b.n	20742 <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20774:	6818      	ldr	r0, [r3, #0]
   20776:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   20778:	f020 0303 	bic.w	r3, r0, #3
   2077c:	e7d2      	b.n	20724 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   2077e:	3010      	adds	r0, #16
   20780:	f000 f80b 	bl	2079a <z_abort_timeout>
		if (err) {
   20784:	2800      	cmp	r0, #0
   20786:	d0e0      	beq.n	2074a <work_cancel+0x46>
   20788:	e7c0      	b.n	2070c <work_cancel+0x8>

0002078a <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2078a:	2300      	movs	r3, #0
   2078c:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   20790:	e9c0 3304 	strd	r3, r3, [r0, #16]
   20794:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   20796:	6283      	str	r3, [r0, #40]	; 0x28
}
   20798:	4770      	bx	lr

0002079a <z_abort_timeout>:
{
   2079a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2079c:	f04f 0220 	mov.w	r2, #32
   207a0:	f3ef 8411 	mrs	r4, BASEPRI
   207a4:	f382 8811 	msr	BASEPRI, r2
   207a8:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   207ac:	6803      	ldr	r3, [r0, #0]
   207ae:	b13b      	cbz	r3, 207c0 <z_abort_timeout+0x26>
			remove_timeout(to);
   207b0:	f7fc fbfc 	bl	1cfac <remove_timeout>
			ret = 0;
   207b4:	2000      	movs	r0, #0
	__asm__ volatile(
   207b6:	f384 8811 	msr	BASEPRI, r4
   207ba:	f3bf 8f6f 	isb	sy
}
   207be:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   207c0:	f06f 0015 	mvn.w	r0, #21
   207c4:	e7f7      	b.n	207b6 <z_abort_timeout+0x1c>

000207c6 <z_get_next_timeout_expiry>:
{
   207c6:	b510      	push	{r4, lr}
	__asm__ volatile(
   207c8:	f04f 0320 	mov.w	r3, #32
   207cc:	f3ef 8411 	mrs	r4, BASEPRI
   207d0:	f383 8811 	msr	BASEPRI, r3
   207d4:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   207d8:	f7fc fc02 	bl	1cfe0 <next_timeout>
	__asm__ volatile(
   207dc:	f384 8811 	msr	BASEPRI, r4
   207e0:	f3bf 8f6f 	isb	sy
}
   207e4:	bd10      	pop	{r4, pc}

000207e6 <z_set_timeout_expiry>:
{
   207e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   207e8:	4604      	mov	r4, r0
   207ea:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   207ec:	f04f 0320 	mov.w	r3, #32
   207f0:	f3ef 8511 	mrs	r5, BASEPRI
   207f4:	f383 8811 	msr	BASEPRI, r3
   207f8:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   207fc:	f7fc fbf0 	bl	1cfe0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   20800:	2801      	cmp	r0, #1
   20802:	dd05      	ble.n	20810 <z_set_timeout_expiry+0x2a>
   20804:	42a0      	cmp	r0, r4
   20806:	9901      	ldr	r1, [sp, #4]
   20808:	dd02      	ble.n	20810 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   2080a:	4620      	mov	r0, r4
   2080c:	f7ef f834 	bl	f878 <z_clock_set_timeout>
	__asm__ volatile(
   20810:	f385 8811 	msr	BASEPRI, r5
   20814:	f3bf 8f6f 	isb	sy
}
   20818:	b003      	add	sp, #12
   2081a:	bd30      	pop	{r4, r5, pc}

0002081c <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2081c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2081e:	f7fc fcf9 	bl	1d214 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   20822:	bd08      	pop	{r3, pc}

00020824 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   20824:	f7fc bcf6 	b.w	1d214 <z_tick_get>

00020828 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   20828:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2082a:	1c4b      	adds	r3, r1, #1
   2082c:	bf08      	it	eq
   2082e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   20832:	4604      	mov	r4, r0
   20834:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20836:	d013      	beq.n	20860 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20838:	ea54 0105 	orrs.w	r1, r4, r5
   2083c:	d103      	bne.n	20846 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   2083e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   20842:	f7fc bce7 	b.w	1d214 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   20846:	f06f 0101 	mvn.w	r1, #1
   2084a:	1a0a      	subs	r2, r1, r0
   2084c:	f04f 31ff 	mov.w	r1, #4294967295
   20850:	eb61 0305 	sbc.w	r3, r1, r5
   20854:	2a00      	cmp	r2, #0
   20856:	f173 0100 	sbcs.w	r1, r3, #0
   2085a:	db02      	blt.n	20862 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2085c:	4610      	mov	r0, r2
   2085e:	4619      	mov	r1, r3
}
   20860:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   20862:	f7fc fcd7 	bl	1d214 <z_tick_get>
   20866:	2c01      	cmp	r4, #1
   20868:	f175 0300 	sbcs.w	r3, r5, #0
   2086c:	bfbc      	itt	lt
   2086e:	2401      	movlt	r4, #1
   20870:	2500      	movlt	r5, #0
   20872:	1820      	adds	r0, r4, r0
   20874:	eb45 0101 	adc.w	r1, r5, r1
   20878:	e7f2      	b.n	20860 <z_timeout_end_calc+0x38>

0002087a <k_timer_init>:
	timer->status = 0U;
   2087a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2087c:	e9c0 1208 	strd	r1, r2, [r0, #32]
   20880:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   20884:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   20888:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2088c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2088e:	6343      	str	r3, [r0, #52]	; 0x34
}
   20890:	4770      	bx	lr

00020892 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   20892:	b510      	push	{r4, lr}
   20894:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   20896:	f7ff ff80 	bl	2079a <z_abort_timeout>

	if (inactive) {
   2089a:	b9d8      	cbnz	r0, 208d4 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2089c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2089e:	b10b      	cbz	r3, 208a4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   208a0:	4620      	mov	r0, r4
   208a2:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   208a4:	f104 0018 	add.w	r0, r4, #24
   208a8:	2100      	movs	r1, #0
   208aa:	f7ff fe03 	bl	204b4 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   208ae:	4604      	mov	r4, r0
   208b0:	b180      	cbz	r0, 208d4 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   208b2:	f7ff fe0f 	bl	204d4 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   208b6:	4620      	mov	r0, r4
   208b8:	f7ff fe5e 	bl	20578 <z_ready_thread>
	__asm__ volatile(
   208bc:	f04f 0320 	mov.w	r3, #32
   208c0:	f3ef 8011 	mrs	r0, BASEPRI
   208c4:	f383 8811 	msr	BASEPRI, r3
   208c8:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   208cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   208d0:	f7ff be10 	b.w	204f4 <z_reschedule_irqlock>
   208d4:	bd10      	pop	{r4, pc}

000208d6 <clear_event_registrations>:
	while (num_events--) {
   208d6:	2314      	movs	r3, #20
{
   208d8:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   208da:	2400      	movs	r4, #0
   208dc:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   208e0:	4281      	cmp	r1, r0
   208e2:	d100      	bne.n	208e6 <clear_event_registrations+0x10>
}
   208e4:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   208e6:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   208ea:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   208ee:	f003 030f 	and.w	r3, r3, #15
   208f2:	2b02      	cmp	r3, #2
   208f4:	d80a      	bhi.n	2090c <clear_event_registrations+0x36>
   208f6:	b15b      	cbz	r3, 20910 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   208f8:	f851 3c14 	ldr.w	r3, [r1, #-20]
   208fc:	b143      	cbz	r3, 20910 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   208fe:	f851 5c10 	ldr.w	r5, [r1, #-16]
   20902:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   20904:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   20906:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   2090a:	e001      	b.n	20910 <clear_event_registrations+0x3a>
	switch (event->type) {
   2090c:	2b04      	cmp	r3, #4
   2090e:	d0f3      	beq.n	208f8 <clear_event_registrations+0x22>
	__asm__ volatile(
   20910:	f382 8811 	msr	BASEPRI, r2
   20914:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20918:	f04f 0320 	mov.w	r3, #32
   2091c:	f3ef 8211 	mrs	r2, BASEPRI
   20920:	f383 8811 	msr	BASEPRI, r3
   20924:	f3bf 8f6f 	isb	sy
   20928:	3914      	subs	r1, #20
   2092a:	e7d9      	b.n	208e0 <clear_event_registrations+0xa>

0002092c <signal_poll_event>:
{
   2092c:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   2092e:	6884      	ldr	r4, [r0, #8]
{
   20930:	4605      	mov	r5, r0
   20932:	460e      	mov	r6, r1
	if (poller) {
   20934:	b19c      	cbz	r4, 2095e <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   20936:	68a3      	ldr	r3, [r4, #8]
   20938:	b95b      	cbnz	r3, 20952 <signal_poll_event+0x26>
	int retcode = 0;
   2093a:	4618      	mov	r0, r3
		poller->is_polling = false;
   2093c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   2093e:	2300      	movs	r3, #0
   20940:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   20942:	68eb      	ldr	r3, [r5, #12]
   20944:	f3c3 3104 	ubfx	r1, r3, #12, #5
   20948:	430e      	orrs	r6, r1
   2094a:	f366 3310 	bfi	r3, r6, #12, #5
   2094e:	60eb      	str	r3, [r5, #12]
	return retcode;
   20950:	e004      	b.n	2095c <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   20952:	4798      	blx	r3
		poller->is_polling = false;
   20954:	2300      	movs	r3, #0
		if (retcode < 0) {
   20956:	2800      	cmp	r0, #0
		poller->is_polling = false;
   20958:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   2095a:	daf0      	bge.n	2093e <signal_poll_event+0x12>
}
   2095c:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   2095e:	4620      	mov	r0, r4
   20960:	e7ed      	b.n	2093e <signal_poll_event+0x12>

00020962 <k_poll_poller_cb>:
{
   20962:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   20964:	6883      	ldr	r3, [r0, #8]
{
   20966:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   20968:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   2096a:	7b63      	ldrb	r3, [r4, #13]
   2096c:	079a      	lsls	r2, r3, #30
   2096e:	d515      	bpl.n	2099c <k_poll_poller_cb+0x3a>
	if (z_is_thread_timeout_expired(thread)) {
   20970:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   20974:	f04f 31ff 	mov.w	r1, #4294967295
   20978:	f06f 0001 	mvn.w	r0, #1
   2097c:	428b      	cmp	r3, r1
   2097e:	bf08      	it	eq
   20980:	4282      	cmpeq	r2, r0
   20982:	d014      	beq.n	209ae <k_poll_poller_cb+0x4c>
	z_unpend_thread(thread);
   20984:	4620      	mov	r0, r4
   20986:	f7ff fdd7 	bl	20538 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2098a:	2d08      	cmp	r5, #8
   2098c:	bf0c      	ite	eq
   2098e:	f06f 0303 	mvneq.w	r3, #3
   20992:	2300      	movne	r3, #0
   20994:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   20996:	7b63      	ldrb	r3, [r4, #13]
   20998:	06db      	lsls	r3, r3, #27
   2099a:	d001      	beq.n	209a0 <k_poll_poller_cb+0x3e>
		return 0;
   2099c:	2000      	movs	r0, #0
}
   2099e:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   209a0:	69a5      	ldr	r5, [r4, #24]
   209a2:	2d00      	cmp	r5, #0
   209a4:	d1fa      	bne.n	2099c <k_poll_poller_cb+0x3a>
	z_ready_thread(thread);
   209a6:	4620      	mov	r0, r4
   209a8:	f7ff fde6 	bl	20578 <z_ready_thread>
	return 0;
   209ac:	e7f6      	b.n	2099c <k_poll_poller_cb+0x3a>
		return -EAGAIN;
   209ae:	f06f 000a 	mvn.w	r0, #10
   209b2:	e7f4      	b.n	2099e <k_poll_poller_cb+0x3c>

000209b4 <add_event>:
{
   209b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   209b6:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   209b8:	e9d0 2300 	ldrd	r2, r3, [r0]
   209bc:	4290      	cmp	r0, r2
   209be:	4604      	mov	r4, r0
   209c0:	460d      	mov	r5, r1
   209c2:	d106      	bne.n	209d2 <add_event+0x1e>
	node->prev = list->tail;
   209c4:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   209c6:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   209c8:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   209ca:	6863      	ldr	r3, [r4, #4]
   209cc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   209ce:	6065      	str	r5, [r4, #4]
}
   209d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   209d2:	2b00      	cmp	r3, #0
   209d4:	d0f6      	beq.n	209c4 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   209d6:	689b      	ldr	r3, [r3, #8]
   209d8:	6879      	ldr	r1, [r7, #4]
   209da:	6858      	ldr	r0, [r3, #4]
   209dc:	f7ff fd61 	bl	204a2 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   209e0:	2800      	cmp	r0, #0
   209e2:	d1ef      	bne.n	209c4 <add_event+0x10>
	return list->head == list;
   209e4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   209e6:	42b4      	cmp	r4, r6
   209e8:	d0ec      	beq.n	209c4 <add_event+0x10>
   209ea:	2e00      	cmp	r6, #0
   209ec:	bf38      	it	cc
   209ee:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   209f0:	2e00      	cmp	r6, #0
   209f2:	d0e7      	beq.n	209c4 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   209f4:	68b3      	ldr	r3, [r6, #8]
   209f6:	6878      	ldr	r0, [r7, #4]
   209f8:	6859      	ldr	r1, [r3, #4]
   209fa:	f7ff fd52 	bl	204a2 <z_is_t1_higher_prio_than_t2>
   209fe:	b128      	cbz	r0, 20a0c <add_event+0x58>
	node->prev = successor->prev;
   20a00:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   20a02:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   20a06:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   20a08:	6075      	str	r5, [r6, #4]
			return;
   20a0a:	e7e1      	b.n	209d0 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   20a0c:	6863      	ldr	r3, [r4, #4]
   20a0e:	42b3      	cmp	r3, r6
   20a10:	d0d8      	beq.n	209c4 <add_event+0x10>
   20a12:	6836      	ldr	r6, [r6, #0]
   20a14:	e7ec      	b.n	209f0 <add_event+0x3c>

00020a16 <register_events>:
{
   20a16:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   20a1a:	f04f 0a00 	mov.w	sl, #0
{
   20a1e:	460e      	mov	r6, r1
   20a20:	4614      	mov	r4, r2
   20a22:	461f      	mov	r7, r3
   20a24:	4683      	mov	fp, r0
	int events_registered = 0;
   20a26:	4655      	mov	r5, sl
	event->poller = NULL;
   20a28:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   20a2a:	45b2      	cmp	sl, r6
   20a2c:	db02      	blt.n	20a34 <register_events+0x1e>
}
   20a2e:	4628      	mov	r0, r5
   20a30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a34:	f04f 0320 	mov.w	r3, #32
   20a38:	f3ef 8911 	mrs	r9, BASEPRI
   20a3c:	f383 8811 	msr	BASEPRI, r3
   20a40:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   20a44:	f89b 200d 	ldrb.w	r2, [fp, #13]
   20a48:	f002 020f 	and.w	r2, r2, #15
   20a4c:	2a02      	cmp	r2, #2
   20a4e:	d006      	beq.n	20a5e <register_events+0x48>
   20a50:	2a04      	cmp	r2, #4
   20a52:	d008      	beq.n	20a66 <register_events+0x50>
   20a54:	2a01      	cmp	r2, #1
   20a56:	d120      	bne.n	20a9a <register_events+0x84>
		if (event->signal->signaled != 0U) {
   20a58:	f8db 3010 	ldr.w	r3, [fp, #16]
   20a5c:	e001      	b.n	20a62 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   20a5e:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   20a62:	689b      	ldr	r3, [r3, #8]
   20a64:	e002      	b.n	20a6c <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   20a66:	f8db 3010 	ldr.w	r3, [fp, #16]
   20a6a:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   20a6c:	b1ab      	cbz	r3, 20a9a <register_events+0x84>
	event->state |= state;
   20a6e:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   20a72:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   20a76:	f3c3 3104 	ubfx	r1, r3, #12, #5
   20a7a:	430a      	orrs	r2, r1
   20a7c:	f362 3310 	bfi	r3, r2, #12, #5
   20a80:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   20a84:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   20a88:	f389 8811 	msr	BASEPRI, r9
   20a8c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   20a90:	f10a 0a01 	add.w	sl, sl, #1
   20a94:	f10b 0b14 	add.w	fp, fp, #20
   20a98:	e7c7      	b.n	20a2a <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   20a9a:	2f00      	cmp	r7, #0
   20a9c:	d1f4      	bne.n	20a88 <register_events+0x72>
   20a9e:	7823      	ldrb	r3, [r4, #0]
   20aa0:	2b00      	cmp	r3, #0
   20aa2:	d0f1      	beq.n	20a88 <register_events+0x72>
	switch (event->type) {
   20aa4:	f89b 300d 	ldrb.w	r3, [fp, #13]
   20aa8:	f003 030f 	and.w	r3, r3, #15
   20aac:	2b02      	cmp	r3, #2
   20aae:	d008      	beq.n	20ac2 <register_events+0xac>
   20ab0:	2b04      	cmp	r3, #4
   20ab2:	d006      	beq.n	20ac2 <register_events+0xac>
   20ab4:	2b01      	cmp	r3, #1
   20ab6:	d10b      	bne.n	20ad0 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   20ab8:	4622      	mov	r2, r4
   20aba:	4659      	mov	r1, fp
   20abc:	f8db 0010 	ldr.w	r0, [fp, #16]
   20ac0:	e004      	b.n	20acc <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   20ac2:	4622      	mov	r2, r4
   20ac4:	4659      	mov	r1, fp
   20ac6:	f8db 0010 	ldr.w	r0, [fp, #16]
   20aca:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   20acc:	f7ff ff72 	bl	209b4 <add_event>
	event->poller = poller;
   20ad0:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   20ad4:	3501      	adds	r5, #1
   20ad6:	e7d7      	b.n	20a88 <register_events+0x72>

00020ad8 <z_handle_obj_poll_events>:
{
   20ad8:	4603      	mov	r3, r0
	return list->head == list;
   20ada:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   20adc:	4283      	cmp	r3, r0
   20ade:	d008      	beq.n	20af2 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   20ae0:	e9d0 3200 	ldrd	r3, r2, [r0]
   20ae4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20ae6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20ae8:	2300      	movs	r3, #0
	node->prev = NULL;
   20aea:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   20aee:	f7ff bf1d 	b.w	2092c <signal_poll_event>
}
   20af2:	4770      	bx	lr

00020af4 <k_mem_pool_malloc>:
{
   20af4:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   20af6:	2408      	movs	r4, #8
   20af8:	190a      	adds	r2, r1, r4
   20afa:	d208      	bcs.n	20b0e <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   20afc:	2600      	movs	r6, #0
   20afe:	2700      	movs	r7, #0
   20b00:	eb0d 0104 	add.w	r1, sp, r4
   20b04:	e9cd 6700 	strd	r6, r7, [sp]
   20b08:	f7ff fc0f 	bl	2032a <k_mem_pool_alloc>
   20b0c:	b110      	cbz	r0, 20b14 <k_mem_pool_malloc+0x20>
		return NULL;
   20b0e:	2000      	movs	r0, #0
}
   20b10:	b004      	add	sp, #16
   20b12:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   20b14:	4622      	mov	r2, r4
   20b16:	9802      	ldr	r0, [sp, #8]
   20b18:	a902      	add	r1, sp, #8
   20b1a:	f7fd febc 	bl	1e896 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   20b1e:	9802      	ldr	r0, [sp, #8]
   20b20:	3008      	adds	r0, #8
   20b22:	e7f5      	b.n	20b10 <k_mem_pool_malloc+0x1c>

00020b24 <k_free>:
	if (ptr != NULL) {
   20b24:	b110      	cbz	r0, 20b2c <k_free+0x8>
		k_mem_pool_free_id(ptr);
   20b26:	3808      	subs	r0, #8
   20b28:	f7ff bc18 	b.w	2035c <k_mem_pool_free_id>
}
   20b2c:	4770      	bx	lr

00020b2e <k_calloc>:
{
   20b2e:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   20b30:	fba0 4501 	umull	r4, r5, r0, r1
   20b34:	b935      	cbnz	r5, 20b44 <k_calloc+0x16>
	ret = k_malloc(bounds);
   20b36:	4620      	mov	r0, r4
   20b38:	f7fc fc90 	bl	1d45c <k_malloc>
	if (ret != NULL) {
   20b3c:	4606      	mov	r6, r0
   20b3e:	b918      	cbnz	r0, 20b48 <k_calloc+0x1a>
}
   20b40:	4630      	mov	r0, r6
   20b42:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   20b44:	2600      	movs	r6, #0
   20b46:	e7fb      	b.n	20b40 <k_calloc+0x12>
		(void)memset(ret, 0, bounds);
   20b48:	4622      	mov	r2, r4
   20b4a:	4629      	mov	r1, r5
   20b4c:	f7fd fece 	bl	1e8ec <memset>
   20b50:	e7f6      	b.n	20b40 <k_calloc+0x12>

00020b52 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   20b52:	4770      	bx	lr
